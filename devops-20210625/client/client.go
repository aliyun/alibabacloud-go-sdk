// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddGroupMemberRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 30
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 18745637472884
	AliyunPks *string `json:"aliyunPks,omitempty" xml:"aliyunPks,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s AddGroupMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s AddGroupMemberRequest) GoString() string {
	return s.String()
}

func (s *AddGroupMemberRequest) SetAccessToken(v string) *AddGroupMemberRequest {
	s.AccessToken = &v
	return s
}

func (s *AddGroupMemberRequest) SetAccessLevel(v int32) *AddGroupMemberRequest {
	s.AccessLevel = &v
	return s
}

func (s *AddGroupMemberRequest) SetAliyunPks(v string) *AddGroupMemberRequest {
	s.AliyunPks = &v
	return s
}

func (s *AddGroupMemberRequest) SetOrganizationId(v string) *AddGroupMemberRequest {
	s.OrganizationId = &v
	return s
}

type AddGroupMemberResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*AddGroupMemberResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s AddGroupMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddGroupMemberResponseBody) GoString() string {
	return s.String()
}

func (s *AddGroupMemberResponseBody) SetErrorCode(v string) *AddGroupMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AddGroupMemberResponseBody) SetErrorMessage(v string) *AddGroupMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *AddGroupMemberResponseBody) SetRequestId(v string) *AddGroupMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddGroupMemberResponseBody) SetResult(v []*AddGroupMemberResponseBodyResult) *AddGroupMemberResponseBody {
	s.Result = v
	return s
}

func (s *AddGroupMemberResponseBody) SetSuccess(v bool) *AddGroupMemberResponseBody {
	s.Success = &v
	return s
}

type AddGroupMemberResponseBodyResult struct {
	// example:
	//
	// 30
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 123456
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 223241
	SourceId *int64 `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s AddGroupMemberResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s AddGroupMemberResponseBodyResult) GoString() string {
	return s.String()
}

func (s *AddGroupMemberResponseBodyResult) SetAccessLevel(v int32) *AddGroupMemberResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *AddGroupMemberResponseBodyResult) SetAvatarUrl(v string) *AddGroupMemberResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *AddGroupMemberResponseBodyResult) SetEmail(v string) *AddGroupMemberResponseBodyResult {
	s.Email = &v
	return s
}

func (s *AddGroupMemberResponseBodyResult) SetId(v int64) *AddGroupMemberResponseBodyResult {
	s.Id = &v
	return s
}

func (s *AddGroupMemberResponseBodyResult) SetName(v string) *AddGroupMemberResponseBodyResult {
	s.Name = &v
	return s
}

func (s *AddGroupMemberResponseBodyResult) SetSourceId(v int64) *AddGroupMemberResponseBodyResult {
	s.SourceId = &v
	return s
}

func (s *AddGroupMemberResponseBodyResult) SetState(v string) *AddGroupMemberResponseBodyResult {
	s.State = &v
	return s
}

func (s *AddGroupMemberResponseBodyResult) SetUsername(v string) *AddGroupMemberResponseBodyResult {
	s.Username = &v
	return s
}

type AddGroupMemberResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddGroupMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddGroupMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s AddGroupMemberResponse) GoString() string {
	return s.String()
}

func (s *AddGroupMemberResponse) SetHeaders(v map[string]*string) *AddGroupMemberResponse {
	s.Headers = v
	return s
}

func (s *AddGroupMemberResponse) SetStatusCode(v int32) *AddGroupMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *AddGroupMemberResponse) SetBody(v *AddGroupMemberResponseBody) *AddGroupMemberResponse {
	s.Body = v
	return s
}

type AddPipelineRelationsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 11,22
	RelObjectIds *string `json:"relObjectIds,omitempty" xml:"relObjectIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// VARIABLE_GROUP
	RelObjectType *string `json:"relObjectType,omitempty" xml:"relObjectType,omitempty"`
}

func (s AddPipelineRelationsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineRelationsRequest) GoString() string {
	return s.String()
}

func (s *AddPipelineRelationsRequest) SetRelObjectIds(v string) *AddPipelineRelationsRequest {
	s.RelObjectIds = &v
	return s
}

func (s *AddPipelineRelationsRequest) SetRelObjectType(v string) *AddPipelineRelationsRequest {
	s.RelObjectType = &v
	return s
}

type AddPipelineRelationsResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s AddPipelineRelationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineRelationsResponseBody) GoString() string {
	return s.String()
}

func (s *AddPipelineRelationsResponseBody) SetErrorCode(v string) *AddPipelineRelationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AddPipelineRelationsResponseBody) SetErrorMessage(v string) *AddPipelineRelationsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *AddPipelineRelationsResponseBody) SetRequestId(v string) *AddPipelineRelationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddPipelineRelationsResponseBody) SetSuccess(v bool) *AddPipelineRelationsResponseBody {
	s.Success = &v
	return s
}

type AddPipelineRelationsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddPipelineRelationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddPipelineRelationsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineRelationsResponse) GoString() string {
	return s.String()
}

func (s *AddPipelineRelationsResponse) SetHeaders(v map[string]*string) *AddPipelineRelationsResponse {
	s.Headers = v
	return s
}

func (s *AddPipelineRelationsResponse) SetStatusCode(v int32) *AddPipelineRelationsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPipelineRelationsResponse) SetBody(v *AddPipelineRelationsResponseBody) *AddPipelineRelationsResponse {
	s.Body = v
	return s
}

type AddRepositoryMemberRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 30
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 18745637472884
	AliyunPks *string `json:"aliyunPks,omitempty" xml:"aliyunPks,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s AddRepositoryMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s AddRepositoryMemberRequest) GoString() string {
	return s.String()
}

func (s *AddRepositoryMemberRequest) SetAccessToken(v string) *AddRepositoryMemberRequest {
	s.AccessToken = &v
	return s
}

func (s *AddRepositoryMemberRequest) SetAccessLevel(v int32) *AddRepositoryMemberRequest {
	s.AccessLevel = &v
	return s
}

func (s *AddRepositoryMemberRequest) SetAliyunPks(v string) *AddRepositoryMemberRequest {
	s.AliyunPks = &v
	return s
}

func (s *AddRepositoryMemberRequest) SetOrganizationId(v string) *AddRepositoryMemberRequest {
	s.OrganizationId = &v
	return s
}

type AddRepositoryMemberResponseBody struct {
	// example:
	//
	// Invalid.IdNotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 4D6AF7CC-B43B-5454-86AB-023D25E44868
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*AddRepositoryMemberResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s AddRepositoryMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddRepositoryMemberResponseBody) GoString() string {
	return s.String()
}

func (s *AddRepositoryMemberResponseBody) SetErrorCode(v string) *AddRepositoryMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AddRepositoryMemberResponseBody) SetErrorMessage(v string) *AddRepositoryMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *AddRepositoryMemberResponseBody) SetRequestId(v string) *AddRepositoryMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddRepositoryMemberResponseBody) SetResult(v []*AddRepositoryMemberResponseBodyResult) *AddRepositoryMemberResponseBody {
	s.Result = v
	return s
}

func (s *AddRepositoryMemberResponseBody) SetSuccess(v bool) *AddRepositoryMemberResponseBody {
	s.Success = &v
	return s
}

type AddRepositoryMemberResponseBodyResult struct {
	// example:
	//
	// 40
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 123456
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s AddRepositoryMemberResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s AddRepositoryMemberResponseBodyResult) GoString() string {
	return s.String()
}

func (s *AddRepositoryMemberResponseBodyResult) SetAccessLevel(v int32) *AddRepositoryMemberResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *AddRepositoryMemberResponseBodyResult) SetAvatarUrl(v string) *AddRepositoryMemberResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *AddRepositoryMemberResponseBodyResult) SetEmail(v string) *AddRepositoryMemberResponseBodyResult {
	s.Email = &v
	return s
}

func (s *AddRepositoryMemberResponseBodyResult) SetId(v int64) *AddRepositoryMemberResponseBodyResult {
	s.Id = &v
	return s
}

func (s *AddRepositoryMemberResponseBodyResult) SetState(v string) *AddRepositoryMemberResponseBodyResult {
	s.State = &v
	return s
}

type AddRepositoryMemberResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddRepositoryMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddRepositoryMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s AddRepositoryMemberResponse) GoString() string {
	return s.String()
}

func (s *AddRepositoryMemberResponse) SetHeaders(v map[string]*string) *AddRepositoryMemberResponse {
	s.Headers = v
	return s
}

func (s *AddRepositoryMemberResponse) SetStatusCode(v int32) *AddRepositoryMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *AddRepositoryMemberResponse) SetBody(v *AddRepositoryMemberResponseBody) *AddRepositoryMemberResponse {
	s.Body = v
	return s
}

type AddWebhookRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// false
	EnableSslVerification *bool `json:"enableSslVerification,omitempty" xml:"enableSslVerification,omitempty"`
	// example:
	//
	// true
	MergeRequestsEvents *bool `json:"mergeRequestsEvents,omitempty" xml:"mergeRequestsEvents,omitempty"`
	// example:
	//
	// false
	NoteEvents *bool `json:"noteEvents,omitempty" xml:"noteEvents,omitempty"`
	// example:
	//
	// true
	PushEvents *bool `json:"pushEvents,omitempty" xml:"pushEvents,omitempty"`
	// example:
	//
	// xxxx
	SecretToken *string `json:"secretToken,omitempty" xml:"secretToken,omitempty"`
	// example:
	//
	// false
	TagPushEvents *bool `json:"tagPushEvents,omitempty" xml:"tagPushEvents,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://xxxxx
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s AddWebhookRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWebhookRequest) GoString() string {
	return s.String()
}

func (s *AddWebhookRequest) SetAccessToken(v string) *AddWebhookRequest {
	s.AccessToken = &v
	return s
}

func (s *AddWebhookRequest) SetDescription(v string) *AddWebhookRequest {
	s.Description = &v
	return s
}

func (s *AddWebhookRequest) SetEnableSslVerification(v bool) *AddWebhookRequest {
	s.EnableSslVerification = &v
	return s
}

func (s *AddWebhookRequest) SetMergeRequestsEvents(v bool) *AddWebhookRequest {
	s.MergeRequestsEvents = &v
	return s
}

func (s *AddWebhookRequest) SetNoteEvents(v bool) *AddWebhookRequest {
	s.NoteEvents = &v
	return s
}

func (s *AddWebhookRequest) SetPushEvents(v bool) *AddWebhookRequest {
	s.PushEvents = &v
	return s
}

func (s *AddWebhookRequest) SetSecretToken(v string) *AddWebhookRequest {
	s.SecretToken = &v
	return s
}

func (s *AddWebhookRequest) SetTagPushEvents(v bool) *AddWebhookRequest {
	s.TagPushEvents = &v
	return s
}

func (s *AddWebhookRequest) SetUrl(v string) *AddWebhookRequest {
	s.Url = &v
	return s
}

func (s *AddWebhookRequest) SetOrganizationId(v string) *AddWebhookRequest {
	s.OrganizationId = &v
	return s
}

type AddWebhookResponseBody struct {
	// example:
	//
	// SYSTEM_NOT_FOUND_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// “”
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 6177543A-8D54-5736-A93B-E0195A1512CB
	RequestId *string                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *AddWebhookResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s AddWebhookResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddWebhookResponseBody) GoString() string {
	return s.String()
}

func (s *AddWebhookResponseBody) SetErrorCode(v string) *AddWebhookResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AddWebhookResponseBody) SetErrorMessage(v string) *AddWebhookResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *AddWebhookResponseBody) SetRequestId(v string) *AddWebhookResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddWebhookResponseBody) SetResult(v *AddWebhookResponseBodyResult) *AddWebhookResponseBody {
	s.Result = v
	return s
}

func (s *AddWebhookResponseBody) SetSuccess(v bool) *AddWebhookResponseBody {
	s.Success = &v
	return s
}

type AddWebhookResponseBodyResult struct {
	// example:
	//
	// 2022-03-12 12:00:00
	CreatedAt   *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// false
	EnableSslVerification *bool `json:"enableSslVerification,omitempty" xml:"enableSslVerification,omitempty"`
	// example:
	//
	// 30815
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ok
	LastTestResult *string `json:"lastTestResult,omitempty" xml:"lastTestResult,omitempty"`
	// example:
	//
	// true
	MergeRequestsEvents *bool `json:"mergeRequestsEvents,omitempty" xml:"mergeRequestsEvents,omitempty"`
	// example:
	//
	// false
	NoteEvents *bool `json:"noteEvents,omitempty" xml:"noteEvents,omitempty"`
	// example:
	//
	// true
	PushEvents *bool `json:"pushEvents,omitempty" xml:"pushEvents,omitempty"`
	// example:
	//
	// 2835387
	RepositoryId *int64 `json:"repositoryId,omitempty" xml:"repositoryId,omitempty"`
	// example:
	//
	// xxxx
	SecretToken *string `json:"secretToken,omitempty" xml:"secretToken,omitempty"`
	// example:
	//
	// true
	TagPushEvents *bool `json:"tagPushEvents,omitempty" xml:"tagPushEvents,omitempty"`
	// example:
	//
	// https://xxxxx
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s AddWebhookResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s AddWebhookResponseBodyResult) GoString() string {
	return s.String()
}

func (s *AddWebhookResponseBodyResult) SetCreatedAt(v string) *AddWebhookResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetDescription(v string) *AddWebhookResponseBodyResult {
	s.Description = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetEnableSslVerification(v bool) *AddWebhookResponseBodyResult {
	s.EnableSslVerification = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetId(v int64) *AddWebhookResponseBodyResult {
	s.Id = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetLastTestResult(v string) *AddWebhookResponseBodyResult {
	s.LastTestResult = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetMergeRequestsEvents(v bool) *AddWebhookResponseBodyResult {
	s.MergeRequestsEvents = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetNoteEvents(v bool) *AddWebhookResponseBodyResult {
	s.NoteEvents = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetPushEvents(v bool) *AddWebhookResponseBodyResult {
	s.PushEvents = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetRepositoryId(v int64) *AddWebhookResponseBodyResult {
	s.RepositoryId = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetSecretToken(v string) *AddWebhookResponseBodyResult {
	s.SecretToken = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetTagPushEvents(v bool) *AddWebhookResponseBodyResult {
	s.TagPushEvents = &v
	return s
}

func (s *AddWebhookResponseBodyResult) SetUrl(v string) *AddWebhookResponseBodyResult {
	s.Url = &v
	return s
}

type AddWebhookResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddWebhookResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddWebhookResponse) String() string {
	return tea.Prettify(s)
}

func (s AddWebhookResponse) GoString() string {
	return s.String()
}

func (s *AddWebhookResponse) SetHeaders(v map[string]*string) *AddWebhookResponse {
	s.Headers = v
	return s
}

func (s *AddWebhookResponse) SetStatusCode(v int32) *AddWebhookResponse {
	s.StatusCode = &v
	return s
}

func (s *AddWebhookResponse) SetBody(v *AddWebhookResponseBody) *AddWebhookResponse {
	s.Body = v
	return s
}

type CancelExecutionReleaseStageRequest struct {
	// example:
	//
	// 66c0c9fffeb86b450c19****
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CancelExecutionReleaseStageRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelExecutionReleaseStageRequest) GoString() string {
	return s.String()
}

func (s *CancelExecutionReleaseStageRequest) SetOrganizationId(v string) *CancelExecutionReleaseStageRequest {
	s.OrganizationId = &v
	return s
}

type CancelExecutionReleaseStageResponseBody struct {
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CancelExecutionReleaseStageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelExecutionReleaseStageResponseBody) GoString() string {
	return s.String()
}

func (s *CancelExecutionReleaseStageResponseBody) SetSuccess(v bool) *CancelExecutionReleaseStageResponseBody {
	s.Success = &v
	return s
}

type CancelExecutionReleaseStageResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelExecutionReleaseStageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelExecutionReleaseStageResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelExecutionReleaseStageResponse) GoString() string {
	return s.String()
}

func (s *CancelExecutionReleaseStageResponse) SetHeaders(v map[string]*string) *CancelExecutionReleaseStageResponse {
	s.Headers = v
	return s
}

func (s *CancelExecutionReleaseStageResponse) SetStatusCode(v int32) *CancelExecutionReleaseStageResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelExecutionReleaseStageResponse) SetBody(v *CancelExecutionReleaseStageResponseBody) *CancelExecutionReleaseStageResponse {
	s.Body = v
	return s
}

type CloseMergeRequestRequest struct {
	// example:
	//
	// 0cf2c8458ac44d9481aab2dd6ec10596v3
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CloseMergeRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseMergeRequestRequest) GoString() string {
	return s.String()
}

func (s *CloseMergeRequestRequest) SetAccessToken(v string) *CloseMergeRequestRequest {
	s.AccessToken = &v
	return s
}

func (s *CloseMergeRequestRequest) SetOrganizationId(v string) *CloseMergeRequestRequest {
	s.OrganizationId = &v
	return s
}

type CloseMergeRequestResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// InvalidParam.NoPermission
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// HC93CE1A-8D7A-13A9-8306-7465DE2E5C0F
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CloseMergeRequestResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CloseMergeRequestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloseMergeRequestResponseBody) GoString() string {
	return s.String()
}

func (s *CloseMergeRequestResponseBody) SetErrorCode(v string) *CloseMergeRequestResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CloseMergeRequestResponseBody) SetErrorMessage(v string) *CloseMergeRequestResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CloseMergeRequestResponseBody) SetRequestId(v string) *CloseMergeRequestResponseBody {
	s.RequestId = &v
	return s
}

func (s *CloseMergeRequestResponseBody) SetResult(v *CloseMergeRequestResponseBodyResult) *CloseMergeRequestResponseBody {
	s.Result = v
	return s
}

func (s *CloseMergeRequestResponseBody) SetSuccess(v bool) *CloseMergeRequestResponseBody {
	s.Success = &v
	return s
}

type CloseMergeRequestResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CloseMergeRequestResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CloseMergeRequestResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CloseMergeRequestResponseBodyResult) SetResult(v bool) *CloseMergeRequestResponseBodyResult {
	s.Result = &v
	return s
}

type CloseMergeRequestResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CloseMergeRequestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CloseMergeRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseMergeRequestResponse) GoString() string {
	return s.String()
}

func (s *CloseMergeRequestResponse) SetHeaders(v map[string]*string) *CloseMergeRequestResponse {
	s.Headers = v
	return s
}

func (s *CloseMergeRequestResponse) SetStatusCode(v int32) *CloseMergeRequestResponse {
	s.StatusCode = &v
	return s
}

func (s *CloseMergeRequestResponse) SetBody(v *CloseMergeRequestResponseBody) *CloseMergeRequestResponse {
	s.Body = v
	return s
}

type CreateAppMembersRequest struct {
	PlayerList []*CreateAppMembersRequestPlayerList `json:"playerList,omitempty" xml:"playerList,omitempty" type:"Repeated"`
	RoleNames  []*string                            `json:"roleNames,omitempty" xml:"roleNames,omitempty" type:"Repeated"`
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreateAppMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAppMembersRequest) GoString() string {
	return s.String()
}

func (s *CreateAppMembersRequest) SetPlayerList(v []*CreateAppMembersRequestPlayerList) *CreateAppMembersRequest {
	s.PlayerList = v
	return s
}

func (s *CreateAppMembersRequest) SetRoleNames(v []*string) *CreateAppMembersRequest {
	s.RoleNames = v
	return s
}

func (s *CreateAppMembersRequest) SetOrganizationId(v string) *CreateAppMembersRequest {
	s.OrganizationId = &v
	return s
}

type CreateAppMembersRequestPlayerList struct {
	// example:
	//
	// 1332695887xxxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// User
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateAppMembersRequestPlayerList) String() string {
	return tea.Prettify(s)
}

func (s CreateAppMembersRequestPlayerList) GoString() string {
	return s.String()
}

func (s *CreateAppMembersRequestPlayerList) SetId(v string) *CreateAppMembersRequestPlayerList {
	s.Id = &v
	return s
}

func (s *CreateAppMembersRequestPlayerList) SetType(v string) *CreateAppMembersRequestPlayerList {
	s.Type = &v
	return s
}

type CreateAppMembersResponse struct {
	Headers    map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *string            `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAppMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAppMembersResponse) GoString() string {
	return s.String()
}

func (s *CreateAppMembersResponse) SetHeaders(v map[string]*string) *CreateAppMembersResponse {
	s.Headers = v
	return s
}

func (s *CreateAppMembersResponse) SetStatusCode(v int32) *CreateAppMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAppMembersResponse) SetBody(v string) *CreateAppMembersResponse {
	s.Body = &v
	return s
}

type CreateBranchRequest struct {
	// example:
	//
	// 0cf2c8458ac44d9481aab2dd6ec10596v3
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// createBranch
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master
	Ref *string `json:"ref,omitempty" xml:"ref,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreateBranchRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBranchRequest) GoString() string {
	return s.String()
}

func (s *CreateBranchRequest) SetAccessToken(v string) *CreateBranchRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateBranchRequest) SetBranchName(v string) *CreateBranchRequest {
	s.BranchName = &v
	return s
}

func (s *CreateBranchRequest) SetRef(v string) *CreateBranchRequest {
	s.Ref = &v
	return s
}

func (s *CreateBranchRequest) SetOrganizationId(v string) *CreateBranchRequest {
	s.OrganizationId = &v
	return s
}

type CreateBranchResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                         `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateBranchResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateBranchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBranchResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBranchResponseBody) SetErrorCode(v string) *CreateBranchResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateBranchResponseBody) SetErrorMessage(v string) *CreateBranchResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateBranchResponseBody) SetRequestId(v string) *CreateBranchResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBranchResponseBody) SetResult(v *CreateBranchResponseBodyResult) *CreateBranchResponseBody {
	s.Result = v
	return s
}

func (s *CreateBranchResponseBody) SetSuccess(v bool) *CreateBranchResponseBody {
	s.Success = &v
	return s
}

type CreateBranchResponseBodyResult struct {
	Commit *CreateBranchResponseBodyResultCommit `json:"commit,omitempty" xml:"commit,omitempty" type:"Struct"`
	// example:
	//
	// createBranch
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// false
	Protected *bool `json:"protected,omitempty" xml:"protected,omitempty"`
}

func (s CreateBranchResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateBranchResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateBranchResponseBodyResult) SetCommit(v *CreateBranchResponseBodyResultCommit) *CreateBranchResponseBodyResult {
	s.Commit = v
	return s
}

func (s *CreateBranchResponseBodyResult) SetName(v string) *CreateBranchResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateBranchResponseBodyResult) SetProtected(v bool) *CreateBranchResponseBodyResult {
	s.Protected = &v
	return s
}

type CreateBranchResponseBodyResultCommit struct {
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	AuthorName  *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2022-03-18 09:00:00
	AuthoredDate *string `json:"authoredDate,omitempty" xml:"authoredDate,omitempty"`
	// example:
	//
	// 2022-03-18 10:00:00
	CommittedDate *string `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	CommitterName  *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2022-03-18 10:00:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// ff4fb5ac6d1f44f452654336d2dba468ae6c8d04
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// create branch
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// ff4fb5ac
	ShortId *string `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateBranchResponseBodyResultCommit) String() string {
	return tea.Prettify(s)
}

func (s CreateBranchResponseBodyResultCommit) GoString() string {
	return s.String()
}

func (s *CreateBranchResponseBodyResultCommit) SetAuthorEmail(v string) *CreateBranchResponseBodyResultCommit {
	s.AuthorEmail = &v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetAuthorName(v string) *CreateBranchResponseBodyResultCommit {
	s.AuthorName = &v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetAuthoredDate(v string) *CreateBranchResponseBodyResultCommit {
	s.AuthoredDate = &v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetCommittedDate(v string) *CreateBranchResponseBodyResultCommit {
	s.CommittedDate = &v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetCommitterEmail(v string) *CreateBranchResponseBodyResultCommit {
	s.CommitterEmail = &v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetCommitterName(v string) *CreateBranchResponseBodyResultCommit {
	s.CommitterName = &v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetCreatedAt(v string) *CreateBranchResponseBodyResultCommit {
	s.CreatedAt = &v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetId(v string) *CreateBranchResponseBodyResultCommit {
	s.Id = &v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetMessage(v string) *CreateBranchResponseBodyResultCommit {
	s.Message = &v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetParentIds(v []*string) *CreateBranchResponseBodyResultCommit {
	s.ParentIds = v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetShortId(v string) *CreateBranchResponseBodyResultCommit {
	s.ShortId = &v
	return s
}

func (s *CreateBranchResponseBodyResultCommit) SetTitle(v string) *CreateBranchResponseBodyResultCommit {
	s.Title = &v
	return s
}

type CreateBranchResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBranchResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBranchResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBranchResponse) GoString() string {
	return s.String()
}

func (s *CreateBranchResponse) SetHeaders(v map[string]*string) *CreateBranchResponse {
	s.Headers = v
	return s
}

func (s *CreateBranchResponse) SetStatusCode(v int32) *CreateBranchResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBranchResponse) SetBody(v *CreateBranchResponseBody) *CreateBranchResponse {
	s.Body = v
	return s
}

type CreateChangeRequestRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// sn123
	AppCodeRepoSn *string `json:"appCodeRepoSn,omitempty" xml:"appCodeRepoSn,omitempty"`
	// example:
	//
	// false
	AutoDeleteBranchWhenEnd *bool `json:"autoDeleteBranchWhenEnd,omitempty" xml:"autoDeleteBranchWhenEnd,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hotfix/20240524
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// example:
	//
	// false
	CreateBranch *bool `json:"createBranch,omitempty" xml:"createBranch,omitempty"`
	// example:
	//
	// 1332695887xxxxxx
	OwnerAccountId *string `json:"ownerAccountId,omitempty" xml:"ownerAccountId,omitempty"`
	// This parameter is required.
	OwnerId *string `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	// This parameter is required.
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreateChangeRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChangeRequestRequest) GoString() string {
	return s.String()
}

func (s *CreateChangeRequestRequest) SetAppCodeRepoSn(v string) *CreateChangeRequestRequest {
	s.AppCodeRepoSn = &v
	return s
}

func (s *CreateChangeRequestRequest) SetAutoDeleteBranchWhenEnd(v bool) *CreateChangeRequestRequest {
	s.AutoDeleteBranchWhenEnd = &v
	return s
}

func (s *CreateChangeRequestRequest) SetBranchName(v string) *CreateChangeRequestRequest {
	s.BranchName = &v
	return s
}

func (s *CreateChangeRequestRequest) SetCreateBranch(v bool) *CreateChangeRequestRequest {
	s.CreateBranch = &v
	return s
}

func (s *CreateChangeRequestRequest) SetOwnerAccountId(v string) *CreateChangeRequestRequest {
	s.OwnerAccountId = &v
	return s
}

func (s *CreateChangeRequestRequest) SetOwnerId(v string) *CreateChangeRequestRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateChangeRequestRequest) SetTitle(v string) *CreateChangeRequestRequest {
	s.Title = &v
	return s
}

func (s *CreateChangeRequestRequest) SetOrganizationId(v string) *CreateChangeRequestRequest {
	s.OrganizationId = &v
	return s
}

type CreateChangeRequestResponseBody struct {
	// example:
	//
	// sn123
	AppCodeRepoSn *string `json:"appCodeRepoSn,omitempty" xml:"appCodeRepoSn,omitempty"`
	// example:
	//
	// app-name
	AppName *string `json:"appName,omitempty" xml:"appName,omitempty"`
	// example:
	//
	// false
	AutoDeleteBranchWhenEnd *bool `json:"autoDeleteBranchWhenEnd,omitempty" xml:"autoDeleteBranchWhenEnd,omitempty"`
	// example:
	//
	// hotfix/20240524
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// create-account-123
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// create-id-123
	CreatorId *string `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// 2024-01-01 00:00:00
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 2024-01-01 00:00:00
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// master
	OriginBranch *string `json:"originBranch,omitempty" xml:"originBranch,omitempty"`
	// example:
	//
	// revision-123
	OriginBranchRevisionSha *string `json:"originBranchRevisionSha,omitempty" xml:"originBranchRevisionSha,omitempty"`
	// example:
	//
	// account-id-123
	OwnerAccountId *string `json:"ownerAccountId,omitempty" xml:"ownerAccountId,omitempty"`
	// example:
	//
	// owner-id-123
	OwnerId *string `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	// example:
	//
	// ce51b31b996246ecaf874736838360b2
	Sn *string `json:"sn,omitempty" xml:"sn,omitempty"`
	// example:
	//
	// DEVELOPING
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// APP
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateChangeRequestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateChangeRequestResponseBody) GoString() string {
	return s.String()
}

func (s *CreateChangeRequestResponseBody) SetAppCodeRepoSn(v string) *CreateChangeRequestResponseBody {
	s.AppCodeRepoSn = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetAppName(v string) *CreateChangeRequestResponseBody {
	s.AppName = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetAutoDeleteBranchWhenEnd(v bool) *CreateChangeRequestResponseBody {
	s.AutoDeleteBranchWhenEnd = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetBranch(v string) *CreateChangeRequestResponseBody {
	s.Branch = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetCreatorAccountId(v string) *CreateChangeRequestResponseBody {
	s.CreatorAccountId = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetCreatorId(v string) *CreateChangeRequestResponseBody {
	s.CreatorId = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetGmtCreate(v string) *CreateChangeRequestResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetGmtModified(v string) *CreateChangeRequestResponseBody {
	s.GmtModified = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetName(v string) *CreateChangeRequestResponseBody {
	s.Name = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetOriginBranch(v string) *CreateChangeRequestResponseBody {
	s.OriginBranch = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetOriginBranchRevisionSha(v string) *CreateChangeRequestResponseBody {
	s.OriginBranchRevisionSha = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetOwnerAccountId(v string) *CreateChangeRequestResponseBody {
	s.OwnerAccountId = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetOwnerId(v string) *CreateChangeRequestResponseBody {
	s.OwnerId = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetSn(v string) *CreateChangeRequestResponseBody {
	s.Sn = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetState(v string) *CreateChangeRequestResponseBody {
	s.State = &v
	return s
}

func (s *CreateChangeRequestResponseBody) SetType(v string) *CreateChangeRequestResponseBody {
	s.Type = &v
	return s
}

type CreateChangeRequestResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateChangeRequestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateChangeRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChangeRequestResponse) GoString() string {
	return s.String()
}

func (s *CreateChangeRequestResponse) SetHeaders(v map[string]*string) *CreateChangeRequestResponse {
	s.Headers = v
	return s
}

func (s *CreateChangeRequestResponse) SetStatusCode(v int32) *CreateChangeRequestResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateChangeRequestResponse) SetBody(v *CreateChangeRequestResponseBody) *CreateChangeRequestResponse {
	s.Body = v
	return s
}

type CreateCheckRunRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string                             `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	Annotations []*CreateCheckRunRequestAnnotations `json:"annotations,omitempty" xml:"annotations,omitempty" type:"Repeated"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	CompletedAt *string `json:"completedAt,omitempty" xml:"completedAt,omitempty"`
	// example:
	//
	// success
	Conclusion *string `json:"conclusion,omitempty" xml:"conclusion,omitempty"`
	// example:
	//
	// xxx
	DetailsUrl *string `json:"detailsUrl,omitempty" xml:"detailsUrl,omitempty"`
	// example:
	//
	// 42
	ExternalId *string `json:"externalId,omitempty" xml:"externalId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 40f4ccfe019cdd4a62d4acb0c57130106fc7e1be
	HeadSha *string `json:"headSha,omitempty" xml:"headSha,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// my-check-ci
	Name   *string                      `json:"name,omitempty" xml:"name,omitempty"`
	Output *CreateCheckRunRequestOutput `json:"output,omitempty" xml:"output,omitempty" type:"Struct"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	StartedAt *string `json:"startedAt,omitempty" xml:"startedAt,omitempty"`
	// example:
	//
	// completed
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s CreateCheckRunRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunRequest) GoString() string {
	return s.String()
}

func (s *CreateCheckRunRequest) SetAccessToken(v string) *CreateCheckRunRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateCheckRunRequest) SetAnnotations(v []*CreateCheckRunRequestAnnotations) *CreateCheckRunRequest {
	s.Annotations = v
	return s
}

func (s *CreateCheckRunRequest) SetCompletedAt(v string) *CreateCheckRunRequest {
	s.CompletedAt = &v
	return s
}

func (s *CreateCheckRunRequest) SetConclusion(v string) *CreateCheckRunRequest {
	s.Conclusion = &v
	return s
}

func (s *CreateCheckRunRequest) SetDetailsUrl(v string) *CreateCheckRunRequest {
	s.DetailsUrl = &v
	return s
}

func (s *CreateCheckRunRequest) SetExternalId(v string) *CreateCheckRunRequest {
	s.ExternalId = &v
	return s
}

func (s *CreateCheckRunRequest) SetHeadSha(v string) *CreateCheckRunRequest {
	s.HeadSha = &v
	return s
}

func (s *CreateCheckRunRequest) SetName(v string) *CreateCheckRunRequest {
	s.Name = &v
	return s
}

func (s *CreateCheckRunRequest) SetOutput(v *CreateCheckRunRequestOutput) *CreateCheckRunRequest {
	s.Output = v
	return s
}

func (s *CreateCheckRunRequest) SetStartedAt(v string) *CreateCheckRunRequest {
	s.StartedAt = &v
	return s
}

func (s *CreateCheckRunRequest) SetStatus(v string) *CreateCheckRunRequest {
	s.Status = &v
	return s
}

func (s *CreateCheckRunRequest) SetOrganizationId(v string) *CreateCheckRunRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateCheckRunRequest) SetRepositoryIdentity(v string) *CreateCheckRunRequest {
	s.RepositoryIdentity = &v
	return s
}

type CreateCheckRunRequestAnnotations struct {
	// This parameter is required.
	//
	// example:
	//
	// notice
	AnnotationLevel *string `json:"annotationLevel,omitempty" xml:"annotationLevel,omitempty"`
	// example:
	//
	// 5
	EndColumn *int64 `json:"endColumn,omitempty" xml:"endColumn,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2
	EndLine *int64 `json:"endLine,omitempty" xml:"endLine,omitempty"`
	// This parameter is required.
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// demo/test.txt
	Path       *string `json:"path,omitempty" xml:"path,omitempty"`
	RawDetails *string `json:"rawDetails,omitempty" xml:"rawDetails,omitempty"`
	// example:
	//
	// 3
	StartColumn *int64 `json:"startColumn,omitempty" xml:"startColumn,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	StartLine *int64  `json:"startLine,omitempty" xml:"startLine,omitempty"`
	Title     *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateCheckRunRequestAnnotations) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunRequestAnnotations) GoString() string {
	return s.String()
}

func (s *CreateCheckRunRequestAnnotations) SetAnnotationLevel(v string) *CreateCheckRunRequestAnnotations {
	s.AnnotationLevel = &v
	return s
}

func (s *CreateCheckRunRequestAnnotations) SetEndColumn(v int64) *CreateCheckRunRequestAnnotations {
	s.EndColumn = &v
	return s
}

func (s *CreateCheckRunRequestAnnotations) SetEndLine(v int64) *CreateCheckRunRequestAnnotations {
	s.EndLine = &v
	return s
}

func (s *CreateCheckRunRequestAnnotations) SetMessage(v string) *CreateCheckRunRequestAnnotations {
	s.Message = &v
	return s
}

func (s *CreateCheckRunRequestAnnotations) SetPath(v string) *CreateCheckRunRequestAnnotations {
	s.Path = &v
	return s
}

func (s *CreateCheckRunRequestAnnotations) SetRawDetails(v string) *CreateCheckRunRequestAnnotations {
	s.RawDetails = &v
	return s
}

func (s *CreateCheckRunRequestAnnotations) SetStartColumn(v int64) *CreateCheckRunRequestAnnotations {
	s.StartColumn = &v
	return s
}

func (s *CreateCheckRunRequestAnnotations) SetStartLine(v int64) *CreateCheckRunRequestAnnotations {
	s.StartLine = &v
	return s
}

func (s *CreateCheckRunRequestAnnotations) SetTitle(v string) *CreateCheckRunRequestAnnotations {
	s.Title = &v
	return s
}

type CreateCheckRunRequestOutput struct {
	Images []*CreateCheckRunRequestOutputImages `json:"images,omitempty" xml:"images,omitempty" type:"Repeated"`
	// This parameter is required.
	Summary *string `json:"summary,omitempty" xml:"summary,omitempty"`
	Text    *string `json:"text,omitempty" xml:"text,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Mighty Readme report
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateCheckRunRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunRequestOutput) GoString() string {
	return s.String()
}

func (s *CreateCheckRunRequestOutput) SetImages(v []*CreateCheckRunRequestOutputImages) *CreateCheckRunRequestOutput {
	s.Images = v
	return s
}

func (s *CreateCheckRunRequestOutput) SetSummary(v string) *CreateCheckRunRequestOutput {
	s.Summary = &v
	return s
}

func (s *CreateCheckRunRequestOutput) SetText(v string) *CreateCheckRunRequestOutput {
	s.Text = &v
	return s
}

func (s *CreateCheckRunRequestOutput) SetTitle(v string) *CreateCheckRunRequestOutput {
	s.Title = &v
	return s
}

type CreateCheckRunRequestOutputImages struct {
	// This parameter is required.
	//
	// example:
	//
	// test-image-alt
	Alt *string `json:"alt,omitempty" xml:"alt,omitempty"`
	// example:
	//
	// test
	Caption *string `json:"caption,omitempty" xml:"caption,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	ImageUrl *string `json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

func (s CreateCheckRunRequestOutputImages) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunRequestOutputImages) GoString() string {
	return s.String()
}

func (s *CreateCheckRunRequestOutputImages) SetAlt(v string) *CreateCheckRunRequestOutputImages {
	s.Alt = &v
	return s
}

func (s *CreateCheckRunRequestOutputImages) SetCaption(v string) *CreateCheckRunRequestOutputImages {
	s.Caption = &v
	return s
}

func (s *CreateCheckRunRequestOutputImages) SetImageUrl(v string) *CreateCheckRunRequestOutputImages {
	s.ImageUrl = &v
	return s
}

type CreateCheckRunResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateCheckRunResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateCheckRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCheckRunResponseBody) SetErrorCode(v string) *CreateCheckRunResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateCheckRunResponseBody) SetErrorMessage(v string) *CreateCheckRunResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateCheckRunResponseBody) SetRequestId(v string) *CreateCheckRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCheckRunResponseBody) SetResult(v *CreateCheckRunResponseBodyResult) *CreateCheckRunResponseBody {
	s.Result = v
	return s
}

func (s *CreateCheckRunResponseBody) SetSuccess(v bool) *CreateCheckRunResponseBody {
	s.Success = &v
	return s
}

type CreateCheckRunResponseBodyResult struct {
	Annotations []*CreateCheckRunResponseBodyResultAnnotations `json:"annotations,omitempty" xml:"annotations,omitempty" type:"Repeated"`
	CheckSuite  *CreateCheckRunResponseBodyResultCheckSuite    `json:"checkSuite,omitempty" xml:"checkSuite,omitempty" type:"Struct"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	CompletedAt *string `json:"completedAt,omitempty" xml:"completedAt,omitempty"`
	// example:
	//
	// success
	Conclusion *string `json:"conclusion,omitempty" xml:"conclusion,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// xxx
	DetailsUrl *string `json:"detailsUrl,omitempty" xml:"detailsUrl,omitempty"`
	// example:
	//
	// 42
	ExternalId *string `json:"externalId,omitempty" xml:"externalId,omitempty"`
	// example:
	//
	// 40f4ccfe019cdd4a62d4acb0c57130106fc7e1be
	HeadSha *string `json:"headSha,omitempty" xml:"headSha,omitempty"`
	// example:
	//
	// 524836
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// my-check-ci
	Name   *string                                 `json:"name,omitempty" xml:"name,omitempty"`
	Output *CreateCheckRunResponseBodyResultOutput `json:"output,omitempty" xml:"output,omitempty" type:"Struct"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	StartedAt *string `json:"startedAt,omitempty" xml:"startedAt,omitempty"`
	// example:
	//
	// completed
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	UpdatedAt *string                                 `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	Writer    *CreateCheckRunResponseBodyResultWriter `json:"writer,omitempty" xml:"writer,omitempty" type:"Struct"`
}

func (s CreateCheckRunResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateCheckRunResponseBodyResult) SetAnnotations(v []*CreateCheckRunResponseBodyResultAnnotations) *CreateCheckRunResponseBodyResult {
	s.Annotations = v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetCheckSuite(v *CreateCheckRunResponseBodyResultCheckSuite) *CreateCheckRunResponseBodyResult {
	s.CheckSuite = v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetCompletedAt(v string) *CreateCheckRunResponseBodyResult {
	s.CompletedAt = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetConclusion(v string) *CreateCheckRunResponseBodyResult {
	s.Conclusion = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetCreatedAt(v string) *CreateCheckRunResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetDetailsUrl(v string) *CreateCheckRunResponseBodyResult {
	s.DetailsUrl = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetExternalId(v string) *CreateCheckRunResponseBodyResult {
	s.ExternalId = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetHeadSha(v string) *CreateCheckRunResponseBodyResult {
	s.HeadSha = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetId(v int64) *CreateCheckRunResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetName(v string) *CreateCheckRunResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetOutput(v *CreateCheckRunResponseBodyResultOutput) *CreateCheckRunResponseBodyResult {
	s.Output = v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetStartedAt(v string) *CreateCheckRunResponseBodyResult {
	s.StartedAt = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetStatus(v string) *CreateCheckRunResponseBodyResult {
	s.Status = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetUpdatedAt(v string) *CreateCheckRunResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

func (s *CreateCheckRunResponseBodyResult) SetWriter(v *CreateCheckRunResponseBodyResultWriter) *CreateCheckRunResponseBodyResult {
	s.Writer = v
	return s
}

type CreateCheckRunResponseBodyResultAnnotations struct {
	// example:
	//
	// notice
	AnnotationLevel *string `json:"annotationLevel,omitempty" xml:"annotationLevel,omitempty"`
	// example:
	//
	// 5
	EndColumn *int64 `json:"endColumn,omitempty" xml:"endColumn,omitempty"`
	// example:
	//
	// 2
	EndLine *int64 `json:"endLine,omitempty" xml:"endLine,omitempty"`
	// example:
	//
	// 2
	Id      *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// demo/test.txt
	Path       *string `json:"path,omitempty" xml:"path,omitempty"`
	RawDetails *string `json:"rawDetails,omitempty" xml:"rawDetails,omitempty"`
	// example:
	//
	// 3
	StartColumn *int64 `json:"startColumn,omitempty" xml:"startColumn,omitempty"`
	// example:
	//
	// 1
	StartLine *int64  `json:"startLine,omitempty" xml:"startLine,omitempty"`
	Title     *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateCheckRunResponseBodyResultAnnotations) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunResponseBodyResultAnnotations) GoString() string {
	return s.String()
}

func (s *CreateCheckRunResponseBodyResultAnnotations) SetAnnotationLevel(v string) *CreateCheckRunResponseBodyResultAnnotations {
	s.AnnotationLevel = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultAnnotations) SetEndColumn(v int64) *CreateCheckRunResponseBodyResultAnnotations {
	s.EndColumn = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultAnnotations) SetEndLine(v int64) *CreateCheckRunResponseBodyResultAnnotations {
	s.EndLine = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultAnnotations) SetId(v int64) *CreateCheckRunResponseBodyResultAnnotations {
	s.Id = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultAnnotations) SetMessage(v string) *CreateCheckRunResponseBodyResultAnnotations {
	s.Message = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultAnnotations) SetPath(v string) *CreateCheckRunResponseBodyResultAnnotations {
	s.Path = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultAnnotations) SetRawDetails(v string) *CreateCheckRunResponseBodyResultAnnotations {
	s.RawDetails = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultAnnotations) SetStartColumn(v int64) *CreateCheckRunResponseBodyResultAnnotations {
	s.StartColumn = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultAnnotations) SetStartLine(v int64) *CreateCheckRunResponseBodyResultAnnotations {
	s.StartLine = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultAnnotations) SetTitle(v string) *CreateCheckRunResponseBodyResultAnnotations {
	s.Title = &v
	return s
}

type CreateCheckRunResponseBodyResultCheckSuite struct {
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
}

func (s CreateCheckRunResponseBodyResultCheckSuite) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunResponseBodyResultCheckSuite) GoString() string {
	return s.String()
}

func (s *CreateCheckRunResponseBodyResultCheckSuite) SetId(v int64) *CreateCheckRunResponseBodyResultCheckSuite {
	s.Id = &v
	return s
}

type CreateCheckRunResponseBodyResultOutput struct {
	Images  []*CreateCheckRunResponseBodyResultOutputImages `json:"images,omitempty" xml:"images,omitempty" type:"Repeated"`
	Summary *string                                         `json:"summary,omitempty" xml:"summary,omitempty"`
	Text    *string                                         `json:"text,omitempty" xml:"text,omitempty"`
	// example:
	//
	// Mighty Readme report
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateCheckRunResponseBodyResultOutput) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunResponseBodyResultOutput) GoString() string {
	return s.String()
}

func (s *CreateCheckRunResponseBodyResultOutput) SetImages(v []*CreateCheckRunResponseBodyResultOutputImages) *CreateCheckRunResponseBodyResultOutput {
	s.Images = v
	return s
}

func (s *CreateCheckRunResponseBodyResultOutput) SetSummary(v string) *CreateCheckRunResponseBodyResultOutput {
	s.Summary = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultOutput) SetText(v string) *CreateCheckRunResponseBodyResultOutput {
	s.Text = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultOutput) SetTitle(v string) *CreateCheckRunResponseBodyResultOutput {
	s.Title = &v
	return s
}

type CreateCheckRunResponseBodyResultOutputImages struct {
	// example:
	//
	// test-image-alt
	Alt *string `json:"alt,omitempty" xml:"alt,omitempty"`
	// example:
	//
	// test
	Caption *string `json:"caption,omitempty" xml:"caption,omitempty"`
	// example:
	//
	// xxx
	ImageUrl *string `json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

func (s CreateCheckRunResponseBodyResultOutputImages) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunResponseBodyResultOutputImages) GoString() string {
	return s.String()
}

func (s *CreateCheckRunResponseBodyResultOutputImages) SetAlt(v string) *CreateCheckRunResponseBodyResultOutputImages {
	s.Alt = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultOutputImages) SetCaption(v string) *CreateCheckRunResponseBodyResultOutputImages {
	s.Caption = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultOutputImages) SetImageUrl(v string) *CreateCheckRunResponseBodyResultOutputImages {
	s.ImageUrl = &v
	return s
}

type CreateCheckRunResponseBodyResultWriter struct {
	// example:
	//
	// xxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// xxx
	LogoUrl *string `json:"logoUrl,omitempty" xml:"logoUrl,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// test-codeup
	Slug *string `json:"slug,omitempty" xml:"slug,omitempty"`
	// example:
	//
	// User
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateCheckRunResponseBodyResultWriter) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunResponseBodyResultWriter) GoString() string {
	return s.String()
}

func (s *CreateCheckRunResponseBodyResultWriter) SetId(v string) *CreateCheckRunResponseBodyResultWriter {
	s.Id = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultWriter) SetLogoUrl(v string) *CreateCheckRunResponseBodyResultWriter {
	s.LogoUrl = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultWriter) SetName(v string) *CreateCheckRunResponseBodyResultWriter {
	s.Name = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultWriter) SetSlug(v string) *CreateCheckRunResponseBodyResultWriter {
	s.Slug = &v
	return s
}

func (s *CreateCheckRunResponseBodyResultWriter) SetType(v string) *CreateCheckRunResponseBodyResultWriter {
	s.Type = &v
	return s
}

type CreateCheckRunResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCheckRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCheckRunResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCheckRunResponse) GoString() string {
	return s.String()
}

func (s *CreateCheckRunResponse) SetHeaders(v map[string]*string) *CreateCheckRunResponse {
	s.Headers = v
	return s
}

func (s *CreateCheckRunResponse) SetStatusCode(v int32) *CreateCheckRunResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCheckRunResponse) SetBody(v *CreateCheckRunResponseBody) *CreateCheckRunResponse {
	s.Body = v
	return s
}

type CreateCommentRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// GLOBAL_COMMENT
	CommentType *string `json:"commentType,omitempty" xml:"commentType,omitempty"`
	// This parameter is required.
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// false
	Draft *bool `json:"draft,omitempty" xml:"draft,omitempty"`
	// example:
	//
	// /src/main/test.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// example:
	//
	// 1
	LineNumber *int32 `json:"lineNumber,omitempty" xml:"lineNumber,omitempty"`
	// example:
	//
	// 2666ac1ac53841b0ba1b042e383279cc
	ParentCommentBizId *string `json:"parentCommentBizId,omitempty" xml:"parentCommentBizId,omitempty"`
	// example:
	//
	// b7d8386be17c4ca68a07140db4836257
	PatchSetBizId *string `json:"patchSetBizId,omitempty" xml:"patchSetBizId,omitempty"`
	// example:
	//
	// false
	Resolved *bool `json:"resolved,omitempty" xml:"resolved,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	LocalId *int64 `json:"localId,omitempty" xml:"localId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s CreateCommentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCommentRequest) GoString() string {
	return s.String()
}

func (s *CreateCommentRequest) SetAccessToken(v string) *CreateCommentRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateCommentRequest) SetCommentType(v string) *CreateCommentRequest {
	s.CommentType = &v
	return s
}

func (s *CreateCommentRequest) SetContent(v string) *CreateCommentRequest {
	s.Content = &v
	return s
}

func (s *CreateCommentRequest) SetDraft(v bool) *CreateCommentRequest {
	s.Draft = &v
	return s
}

func (s *CreateCommentRequest) SetFilePath(v string) *CreateCommentRequest {
	s.FilePath = &v
	return s
}

func (s *CreateCommentRequest) SetLineNumber(v int32) *CreateCommentRequest {
	s.LineNumber = &v
	return s
}

func (s *CreateCommentRequest) SetParentCommentBizId(v string) *CreateCommentRequest {
	s.ParentCommentBizId = &v
	return s
}

func (s *CreateCommentRequest) SetPatchSetBizId(v string) *CreateCommentRequest {
	s.PatchSetBizId = &v
	return s
}

func (s *CreateCommentRequest) SetResolved(v bool) *CreateCommentRequest {
	s.Resolved = &v
	return s
}

func (s *CreateCommentRequest) SetLocalId(v int64) *CreateCommentRequest {
	s.LocalId = &v
	return s
}

func (s *CreateCommentRequest) SetOrganizationId(v string) *CreateCommentRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateCommentRequest) SetRepositoryIdentity(v string) *CreateCommentRequest {
	s.RepositoryIdentity = &v
	return s
}

type CreateCommentResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                          `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateCommentResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateCommentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCommentResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCommentResponseBody) SetErrorCode(v string) *CreateCommentResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateCommentResponseBody) SetErrorMessage(v string) *CreateCommentResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateCommentResponseBody) SetRequestId(v string) *CreateCommentResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCommentResponseBody) SetResult(v *CreateCommentResponseBodyResult) *CreateCommentResponseBody {
	s.Result = v
	return s
}

func (s *CreateCommentResponseBody) SetSuccess(v bool) *CreateCommentResponseBody {
	s.Success = &v
	return s
}

type CreateCommentResponseBodyResult struct {
	Author *CreateCommentResponseBodyResultAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// 5c399e3685e542a28db16d93e9f82abb
	CommentBizId *string `json:"commentBizId,omitempty" xml:"commentBizId,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CommentTime *string `json:"commentTime,omitempty" xml:"commentTime,omitempty"`
	// example:
	//
	// GLOBAL_COMMENT
	CommentType *string `json:"commentType,omitempty" xml:"commentType,omitempty"`
	// example:
	//
	// xxxx
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// false
	Deleted *bool `json:"deleted,omitempty" xml:"deleted,omitempty"`
	// example:
	//
	// src/main/update.txt
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	LastEditTime *string `json:"lastEditTime,omitempty" xml:"lastEditTime,omitempty"`
	// example:
	//
	// 3
	LineNumber *string `json:"lineNumber,omitempty" xml:"lineNumber,omitempty"`
	// example:
	//
	// 4c5dcec6a8dc41e69c369737dadc1841
	ParentCommentBizId *string                                         `json:"parentCommentBizId,omitempty" xml:"parentCommentBizId,omitempty"`
	RelatedPatchSet    *CreateCommentResponseBodyResultRelatedPatchSet `json:"relatedPatchSet,omitempty" xml:"relatedPatchSet,omitempty" type:"Struct"`
	// example:
	//
	// false
	Resolved *bool `json:"resolved,omitempty" xml:"resolved,omitempty"`
	// example:
	//
	// dcf2b23cebfc418f98dbd35e423d9fd3
	RootCommentBizId *string `json:"rootCommentBizId,omitempty" xml:"rootCommentBizId,omitempty"`
	// example:
	//
	// OPENED
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s CreateCommentResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateCommentResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateCommentResponseBodyResult) SetAuthor(v *CreateCommentResponseBodyResultAuthor) *CreateCommentResponseBodyResult {
	s.Author = v
	return s
}

func (s *CreateCommentResponseBodyResult) SetCommentBizId(v string) *CreateCommentResponseBodyResult {
	s.CommentBizId = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetCommentTime(v string) *CreateCommentResponseBodyResult {
	s.CommentTime = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetCommentType(v string) *CreateCommentResponseBodyResult {
	s.CommentType = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetContent(v string) *CreateCommentResponseBodyResult {
	s.Content = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetDeleted(v bool) *CreateCommentResponseBodyResult {
	s.Deleted = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetFilePath(v string) *CreateCommentResponseBodyResult {
	s.FilePath = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetLastEditTime(v string) *CreateCommentResponseBodyResult {
	s.LastEditTime = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetLineNumber(v string) *CreateCommentResponseBodyResult {
	s.LineNumber = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetParentCommentBizId(v string) *CreateCommentResponseBodyResult {
	s.ParentCommentBizId = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetRelatedPatchSet(v *CreateCommentResponseBodyResultRelatedPatchSet) *CreateCommentResponseBodyResult {
	s.RelatedPatchSet = v
	return s
}

func (s *CreateCommentResponseBodyResult) SetResolved(v bool) *CreateCommentResponseBodyResult {
	s.Resolved = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetRootCommentBizId(v string) *CreateCommentResponseBodyResult {
	s.RootCommentBizId = &v
	return s
}

func (s *CreateCommentResponseBodyResult) SetState(v string) *CreateCommentResponseBodyResult {
	s.State = &v
	return s
}

type CreateCommentResponseBodyResultAuthor struct {
	// example:
	//
	// 284692704493684695
	AliyunPk  *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 19927
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s CreateCommentResponseBodyResultAuthor) String() string {
	return tea.Prettify(s)
}

func (s CreateCommentResponseBodyResultAuthor) GoString() string {
	return s.String()
}

func (s *CreateCommentResponseBodyResultAuthor) SetAliyunPk(v string) *CreateCommentResponseBodyResultAuthor {
	s.AliyunPk = &v
	return s
}

func (s *CreateCommentResponseBodyResultAuthor) SetAvatarUrl(v string) *CreateCommentResponseBodyResultAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *CreateCommentResponseBodyResultAuthor) SetEmail(v string) *CreateCommentResponseBodyResultAuthor {
	s.Email = &v
	return s
}

func (s *CreateCommentResponseBodyResultAuthor) SetId(v int64) *CreateCommentResponseBodyResultAuthor {
	s.Id = &v
	return s
}

func (s *CreateCommentResponseBodyResultAuthor) SetName(v string) *CreateCommentResponseBodyResultAuthor {
	s.Name = &v
	return s
}

func (s *CreateCommentResponseBodyResultAuthor) SetState(v string) *CreateCommentResponseBodyResultAuthor {
	s.State = &v
	return s
}

func (s *CreateCommentResponseBodyResultAuthor) SetUsername(v string) *CreateCommentResponseBodyResultAuthor {
	s.Username = &v
	return s
}

type CreateCommentResponseBodyResultRelatedPatchSet struct {
	// example:
	//
	// 1a072f5367c21f9de3464b8c0ee8546e47764d2d
	CommitId *string `json:"commitId,omitempty" xml:"commitId,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 513fcfd81a9142d2bb0db4f72c0aa15b
	PatchSetBizId *string `json:"patchSetBizId,omitempty" xml:"patchSetBizId,omitempty"`
	PatchSetName  *string `json:"patchSetName,omitempty" xml:"patchSetName,omitempty"`
	// example:
	//
	// 1
	PatchSetNo *string `json:"patchSetNo,omitempty" xml:"patchSetNo,omitempty"`
	// example:
	//
	// MERGE_SOURCE
	RelatedMergeItemType *string `json:"relatedMergeItemType,omitempty" xml:"relatedMergeItemType,omitempty"`
	// example:
	//
	// 1a072f53
	ShortId *string `json:"shortId,omitempty" xml:"shortId,omitempty"`
}

func (s CreateCommentResponseBodyResultRelatedPatchSet) String() string {
	return tea.Prettify(s)
}

func (s CreateCommentResponseBodyResultRelatedPatchSet) GoString() string {
	return s.String()
}

func (s *CreateCommentResponseBodyResultRelatedPatchSet) SetCommitId(v string) *CreateCommentResponseBodyResultRelatedPatchSet {
	s.CommitId = &v
	return s
}

func (s *CreateCommentResponseBodyResultRelatedPatchSet) SetCreatedAt(v string) *CreateCommentResponseBodyResultRelatedPatchSet {
	s.CreatedAt = &v
	return s
}

func (s *CreateCommentResponseBodyResultRelatedPatchSet) SetPatchSetBizId(v string) *CreateCommentResponseBodyResultRelatedPatchSet {
	s.PatchSetBizId = &v
	return s
}

func (s *CreateCommentResponseBodyResultRelatedPatchSet) SetPatchSetName(v string) *CreateCommentResponseBodyResultRelatedPatchSet {
	s.PatchSetName = &v
	return s
}

func (s *CreateCommentResponseBodyResultRelatedPatchSet) SetPatchSetNo(v string) *CreateCommentResponseBodyResultRelatedPatchSet {
	s.PatchSetNo = &v
	return s
}

func (s *CreateCommentResponseBodyResultRelatedPatchSet) SetRelatedMergeItemType(v string) *CreateCommentResponseBodyResultRelatedPatchSet {
	s.RelatedMergeItemType = &v
	return s
}

func (s *CreateCommentResponseBodyResultRelatedPatchSet) SetShortId(v string) *CreateCommentResponseBodyResultRelatedPatchSet {
	s.ShortId = &v
	return s
}

type CreateCommentResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCommentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCommentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCommentResponse) GoString() string {
	return s.String()
}

func (s *CreateCommentResponse) SetHeaders(v map[string]*string) *CreateCommentResponse {
	s.Headers = v
	return s
}

func (s *CreateCommentResponse) SetStatusCode(v int32) *CreateCommentResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCommentResponse) SetBody(v *CreateCommentResponseBody) *CreateCommentResponse {
	s.Body = v
	return s
}

type CreateCommitStatusRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// default
	Context     *string `json:"context,omitempty" xml:"context,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// success
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// xxx
	TargetUrl *string `json:"targetUrl,omitempty" xml:"targetUrl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2080972
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e0c1a1299a2656bfc155650bbd2df5e628fa1f4c
	Sha *string `json:"sha,omitempty" xml:"sha,omitempty"`
}

func (s CreateCommitStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitStatusRequest) GoString() string {
	return s.String()
}

func (s *CreateCommitStatusRequest) SetAccessToken(v string) *CreateCommitStatusRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateCommitStatusRequest) SetContext(v string) *CreateCommitStatusRequest {
	s.Context = &v
	return s
}

func (s *CreateCommitStatusRequest) SetDescription(v string) *CreateCommitStatusRequest {
	s.Description = &v
	return s
}

func (s *CreateCommitStatusRequest) SetState(v string) *CreateCommitStatusRequest {
	s.State = &v
	return s
}

func (s *CreateCommitStatusRequest) SetTargetUrl(v string) *CreateCommitStatusRequest {
	s.TargetUrl = &v
	return s
}

func (s *CreateCommitStatusRequest) SetOrganizationId(v string) *CreateCommitStatusRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateCommitStatusRequest) SetRepositoryIdentity(v string) *CreateCommitStatusRequest {
	s.RepositoryIdentity = &v
	return s
}

func (s *CreateCommitStatusRequest) SetSha(v string) *CreateCommitStatusRequest {
	s.Sha = &v
	return s
}

type CreateCommitStatusResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 020F71F3-F063-5B8B-8978-2B01833216BB
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateCommitStatusResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateCommitStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitStatusResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCommitStatusResponseBody) SetErrorCode(v string) *CreateCommitStatusResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateCommitStatusResponseBody) SetErrorMessage(v string) *CreateCommitStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateCommitStatusResponseBody) SetRequestId(v string) *CreateCommitStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCommitStatusResponseBody) SetResult(v *CreateCommitStatusResponseBodyResult) *CreateCommitStatusResponseBody {
	s.Result = v
	return s
}

func (s *CreateCommitStatusResponseBody) SetSuccess(v bool) *CreateCommitStatusResponseBody {
	s.Success = &v
	return s
}

type CreateCommitStatusResponseBodyResult struct {
	// example:
	//
	// default
	Context     *string                                      `json:"context,omitempty" xml:"context,omitempty"`
	Creator     *CreateCommitStatusResponseBodyResultCreator `json:"creator,omitempty" xml:"creator,omitempty" type:"Struct"`
	Description *string                                      `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 30815
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// c0ca103441b9fa7f369be8d24a6f20db44dfddf7
	Sha *string `json:"sha,omitempty" xml:"sha,omitempty"`
	// example:
	//
	// success
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// xxx
	TargetUrl *string `json:"targetUrl,omitempty" xml:"targetUrl,omitempty"`
}

func (s CreateCommitStatusResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitStatusResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateCommitStatusResponseBodyResult) SetContext(v string) *CreateCommitStatusResponseBodyResult {
	s.Context = &v
	return s
}

func (s *CreateCommitStatusResponseBodyResult) SetCreator(v *CreateCommitStatusResponseBodyResultCreator) *CreateCommitStatusResponseBodyResult {
	s.Creator = v
	return s
}

func (s *CreateCommitStatusResponseBodyResult) SetDescription(v string) *CreateCommitStatusResponseBodyResult {
	s.Description = &v
	return s
}

func (s *CreateCommitStatusResponseBodyResult) SetId(v int64) *CreateCommitStatusResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateCommitStatusResponseBodyResult) SetSha(v string) *CreateCommitStatusResponseBodyResult {
	s.Sha = &v
	return s
}

func (s *CreateCommitStatusResponseBodyResult) SetState(v string) *CreateCommitStatusResponseBodyResult {
	s.State = &v
	return s
}

func (s *CreateCommitStatusResponseBodyResult) SetTargetUrl(v string) *CreateCommitStatusResponseBodyResult {
	s.TargetUrl = &v
	return s
}

type CreateCommitStatusResponseBodyResultCreator struct {
	// example:
	//
	// 204485087002425236
	AliyunPk *int64 `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// codeup
	Login *string `json:"login,omitempty" xml:"login,omitempty"`
	// example:
	//
	// User
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateCommitStatusResponseBodyResultCreator) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitStatusResponseBodyResultCreator) GoString() string {
	return s.String()
}

func (s *CreateCommitStatusResponseBodyResultCreator) SetAliyunPk(v int64) *CreateCommitStatusResponseBodyResultCreator {
	s.AliyunPk = &v
	return s
}

func (s *CreateCommitStatusResponseBodyResultCreator) SetAvatarUrl(v string) *CreateCommitStatusResponseBodyResultCreator {
	s.AvatarUrl = &v
	return s
}

func (s *CreateCommitStatusResponseBodyResultCreator) SetLogin(v string) *CreateCommitStatusResponseBodyResultCreator {
	s.Login = &v
	return s
}

func (s *CreateCommitStatusResponseBodyResultCreator) SetType(v string) *CreateCommitStatusResponseBodyResultCreator {
	s.Type = &v
	return s
}

type CreateCommitStatusResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCommitStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCommitStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitStatusResponse) GoString() string {
	return s.String()
}

func (s *CreateCommitStatusResponse) SetHeaders(v map[string]*string) *CreateCommitStatusResponse {
	s.Headers = v
	return s
}

func (s *CreateCommitStatusResponse) SetStatusCode(v int32) *CreateCommitStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCommitStatusResponse) SetBody(v *CreateCommitStatusResponseBody) *CreateCommitStatusResponse {
	s.Body = v
	return s
}

type CreateCommitWithMultipleFilesRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	Actions []*CreateCommitWithMultipleFilesRequestActions `json:"actions,omitempty" xml:"actions,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// master
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// auto
	CommitMessage *string `json:"commitMessage,omitempty" xml:"commitMessage,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s CreateCommitWithMultipleFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitWithMultipleFilesRequest) GoString() string {
	return s.String()
}

func (s *CreateCommitWithMultipleFilesRequest) SetAccessToken(v string) *CreateCommitWithMultipleFilesRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateCommitWithMultipleFilesRequest) SetActions(v []*CreateCommitWithMultipleFilesRequestActions) *CreateCommitWithMultipleFilesRequest {
	s.Actions = v
	return s
}

func (s *CreateCommitWithMultipleFilesRequest) SetBranch(v string) *CreateCommitWithMultipleFilesRequest {
	s.Branch = &v
	return s
}

func (s *CreateCommitWithMultipleFilesRequest) SetCommitMessage(v string) *CreateCommitWithMultipleFilesRequest {
	s.CommitMessage = &v
	return s
}

func (s *CreateCommitWithMultipleFilesRequest) SetOrganizationId(v string) *CreateCommitWithMultipleFilesRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateCommitWithMultipleFilesRequest) SetRepositoryIdentity(v string) *CreateCommitWithMultipleFilesRequest {
	s.RepositoryIdentity = &v
	return s
}

type CreateCommitWithMultipleFilesRequestActions struct {
	// example:
	//
	// create
	Action *string `json:"action,omitempty" xml:"action,omitempty"`
	// example:
	//
	// xxx
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// src/test.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// example:
	//
	// src/main/test.java
	PreviousPath *string `json:"previousPath,omitempty" xml:"previousPath,omitempty"`
}

func (s CreateCommitWithMultipleFilesRequestActions) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitWithMultipleFilesRequestActions) GoString() string {
	return s.String()
}

func (s *CreateCommitWithMultipleFilesRequestActions) SetAction(v string) *CreateCommitWithMultipleFilesRequestActions {
	s.Action = &v
	return s
}

func (s *CreateCommitWithMultipleFilesRequestActions) SetContent(v string) *CreateCommitWithMultipleFilesRequestActions {
	s.Content = &v
	return s
}

func (s *CreateCommitWithMultipleFilesRequestActions) SetFilePath(v string) *CreateCommitWithMultipleFilesRequestActions {
	s.FilePath = &v
	return s
}

func (s *CreateCommitWithMultipleFilesRequestActions) SetPreviousPath(v string) *CreateCommitWithMultipleFilesRequestActions {
	s.PreviousPath = &v
	return s
}

type CreateCommitWithMultipleFilesResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// A7586FEB-E48D-5579-983F-74981FBFF627
	RequestId *string                                          `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateCommitWithMultipleFilesResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateCommitWithMultipleFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitWithMultipleFilesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCommitWithMultipleFilesResponseBody) SetErrorCode(v string) *CreateCommitWithMultipleFilesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBody) SetErrorMsg(v string) *CreateCommitWithMultipleFilesResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBody) SetRequestId(v string) *CreateCommitWithMultipleFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBody) SetResult(v *CreateCommitWithMultipleFilesResponseBodyResult) *CreateCommitWithMultipleFilesResponseBody {
	s.Result = v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBody) SetSuccess(v bool) *CreateCommitWithMultipleFilesResponseBody {
	s.Success = &v
	return s
}

type CreateCommitWithMultipleFilesResponseBodyResult struct {
	Author *CreateCommitWithMultipleFilesResponseBodyResultAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	// example:
	//
	// test-codeup
	AuthorName *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2022-03-18 15:00:00
	AuthoredDate *string `json:"authoredDate,omitempty" xml:"authoredDate,omitempty"`
	// example:
	//
	// 2022-03-18 16:00:00
	CommittedDate *string                                                   `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	Committer     *CreateCommitWithMultipleFilesResponseBodyResultCommitter `json:"committer,omitempty" xml:"committer,omitempty" type:"Struct"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	// example:
	//
	// committer-codeup
	CommitterName *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// de02b625ba8488f92eb204bcb3773a40c1b4ddac
	Id        *string   `json:"id,omitempty" xml:"id,omitempty"`
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// de02b625
	ShortId *string `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateCommitWithMultipleFilesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitWithMultipleFilesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetAuthor(v *CreateCommitWithMultipleFilesResponseBodyResultAuthor) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.Author = v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetAuthorEmail(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.AuthorEmail = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetAuthorName(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.AuthorName = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetAuthoredDate(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.AuthoredDate = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetCommittedDate(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.CommittedDate = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetCommitter(v *CreateCommitWithMultipleFilesResponseBodyResultCommitter) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.Committer = v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetCommitterEmail(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.CommitterEmail = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetCommitterName(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.CommitterName = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetCreatedAt(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetId(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetMessage(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.Message = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetParentIds(v []*string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.ParentIds = v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetShortId(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.ShortId = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResult) SetTitle(v string) *CreateCommitWithMultipleFilesResponseBodyResult {
	s.Title = &v
	return s
}

type CreateCommitWithMultipleFilesResponseBodyResultAuthor struct {
	// example:
	//
	// 284692704493684695
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c4ef67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 19927
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
	// example:
	//
	// ""
	WebsiteUrl *string `json:"websiteUrl,omitempty" xml:"websiteUrl,omitempty"`
}

func (s CreateCommitWithMultipleFilesResponseBodyResultAuthor) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitWithMultipleFilesResponseBodyResultAuthor) GoString() string {
	return s.String()
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultAuthor) SetAliyunPk(v string) *CreateCommitWithMultipleFilesResponseBodyResultAuthor {
	s.AliyunPk = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultAuthor) SetAvatarUrl(v string) *CreateCommitWithMultipleFilesResponseBodyResultAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultAuthor) SetEmail(v string) *CreateCommitWithMultipleFilesResponseBodyResultAuthor {
	s.Email = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultAuthor) SetId(v int64) *CreateCommitWithMultipleFilesResponseBodyResultAuthor {
	s.Id = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultAuthor) SetName(v string) *CreateCommitWithMultipleFilesResponseBodyResultAuthor {
	s.Name = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultAuthor) SetState(v string) *CreateCommitWithMultipleFilesResponseBodyResultAuthor {
	s.State = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultAuthor) SetUsername(v string) *CreateCommitWithMultipleFilesResponseBodyResultAuthor {
	s.Username = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultAuthor) SetWebsiteUrl(v string) *CreateCommitWithMultipleFilesResponseBodyResultAuthor {
	s.WebsiteUrl = &v
	return s
}

type CreateCommitWithMultipleFilesResponseBodyResultCommitter struct {
	// example:
	//
	// 235671547828975455
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 24661
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// committer-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// committer-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
	// example:
	//
	// ""
	WebsiteUrl *string `json:"websiteUrl,omitempty" xml:"websiteUrl,omitempty"`
}

func (s CreateCommitWithMultipleFilesResponseBodyResultCommitter) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitWithMultipleFilesResponseBodyResultCommitter) GoString() string {
	return s.String()
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultCommitter) SetAliyunPk(v string) *CreateCommitWithMultipleFilesResponseBodyResultCommitter {
	s.AliyunPk = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultCommitter) SetAvatarUrl(v string) *CreateCommitWithMultipleFilesResponseBodyResultCommitter {
	s.AvatarUrl = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultCommitter) SetEmail(v string) *CreateCommitWithMultipleFilesResponseBodyResultCommitter {
	s.Email = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultCommitter) SetId(v int64) *CreateCommitWithMultipleFilesResponseBodyResultCommitter {
	s.Id = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultCommitter) SetName(v string) *CreateCommitWithMultipleFilesResponseBodyResultCommitter {
	s.Name = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultCommitter) SetState(v string) *CreateCommitWithMultipleFilesResponseBodyResultCommitter {
	s.State = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultCommitter) SetUsername(v string) *CreateCommitWithMultipleFilesResponseBodyResultCommitter {
	s.Username = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponseBodyResultCommitter) SetWebsiteUrl(v string) *CreateCommitWithMultipleFilesResponseBodyResultCommitter {
	s.WebsiteUrl = &v
	return s
}

type CreateCommitWithMultipleFilesResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCommitWithMultipleFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCommitWithMultipleFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCommitWithMultipleFilesResponse) GoString() string {
	return s.String()
}

func (s *CreateCommitWithMultipleFilesResponse) SetHeaders(v map[string]*string) *CreateCommitWithMultipleFilesResponse {
	s.Headers = v
	return s
}

func (s *CreateCommitWithMultipleFilesResponse) SetStatusCode(v int32) *CreateCommitWithMultipleFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCommitWithMultipleFilesResponse) SetBody(v *CreateCommitWithMultipleFilesResponseBody) *CreateCommitWithMultipleFilesResponse {
	s.Body = v
	return s
}

type CreateDeployKeyRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ""
	Key *string `json:"key,omitempty" xml:"key,omitempty"`
	// This parameter is required.
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreateDeployKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeployKeyRequest) GoString() string {
	return s.String()
}

func (s *CreateDeployKeyRequest) SetAccessToken(v string) *CreateDeployKeyRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateDeployKeyRequest) SetKey(v string) *CreateDeployKeyRequest {
	s.Key = &v
	return s
}

func (s *CreateDeployKeyRequest) SetTitle(v string) *CreateDeployKeyRequest {
	s.Title = &v
	return s
}

func (s *CreateDeployKeyRequest) SetOrganizationId(v string) *CreateDeployKeyRequest {
	s.OrganizationId = &v
	return s
}

type CreateDeployKeyResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateDeployKeyResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateDeployKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDeployKeyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDeployKeyResponseBody) SetErrorCode(v string) *CreateDeployKeyResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateDeployKeyResponseBody) SetErrorMessage(v string) *CreateDeployKeyResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateDeployKeyResponseBody) SetRequestId(v string) *CreateDeployKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDeployKeyResponseBody) SetResult(v *CreateDeployKeyResponseBodyResult) *CreateDeployKeyResponseBody {
	s.Result = v
	return s
}

func (s *CreateDeployKeyResponseBody) SetSuccess(v bool) *CreateDeployKeyResponseBody {
	s.Success = &v
	return s
}

type CreateDeployKeyResponseBodyResult struct {
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// xx:xx:xx:xx
	Fingerprint *string `json:"fingerprint,omitempty" xml:"fingerprint,omitempty"`
	// example:
	//
	// 502385
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ""
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateDeployKeyResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateDeployKeyResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateDeployKeyResponseBodyResult) SetCreatedAt(v string) *CreateDeployKeyResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *CreateDeployKeyResponseBodyResult) SetFingerprint(v string) *CreateDeployKeyResponseBodyResult {
	s.Fingerprint = &v
	return s
}

func (s *CreateDeployKeyResponseBodyResult) SetId(v int64) *CreateDeployKeyResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateDeployKeyResponseBodyResult) SetKey(v string) *CreateDeployKeyResponseBodyResult {
	s.Key = &v
	return s
}

func (s *CreateDeployKeyResponseBodyResult) SetTitle(v string) *CreateDeployKeyResponseBodyResult {
	s.Title = &v
	return s
}

type CreateDeployKeyResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDeployKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDeployKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeployKeyResponse) GoString() string {
	return s.String()
}

func (s *CreateDeployKeyResponse) SetHeaders(v map[string]*string) *CreateDeployKeyResponse {
	s.Headers = v
	return s
}

func (s *CreateDeployKeyResponse) SetStatusCode(v int32) *CreateDeployKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDeployKeyResponse) SetBody(v *CreateDeployKeyResponseBody) *CreateDeployKeyResponse {
	s.Body = v
	return s
}

type CreateFileRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// This parameter is required.
	CommitMessage *string `json:"commitMessage,omitempty" xml:"commitMessage,omitempty"`
	// This parameter is required.
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// text
	Encoding *string `json:"encoding,omitempty" xml:"encoding,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// /src/main/test.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreateFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileRequest) GoString() string {
	return s.String()
}

func (s *CreateFileRequest) SetAccessToken(v string) *CreateFileRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateFileRequest) SetBranchName(v string) *CreateFileRequest {
	s.BranchName = &v
	return s
}

func (s *CreateFileRequest) SetCommitMessage(v string) *CreateFileRequest {
	s.CommitMessage = &v
	return s
}

func (s *CreateFileRequest) SetContent(v string) *CreateFileRequest {
	s.Content = &v
	return s
}

func (s *CreateFileRequest) SetEncoding(v string) *CreateFileRequest {
	s.Encoding = &v
	return s
}

func (s *CreateFileRequest) SetFilePath(v string) *CreateFileRequest {
	s.FilePath = &v
	return s
}

func (s *CreateFileRequest) SetOrganizationId(v string) *CreateFileRequest {
	s.OrganizationId = &v
	return s
}

type CreateFileResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F8053E32-9623-511F-8B46-F0E5FD206524
	RequestId *string                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateFileResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFileResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFileResponseBody) SetErrorCode(v string) *CreateFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateFileResponseBody) SetErrorMessage(v string) *CreateFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateFileResponseBody) SetRequestId(v string) *CreateFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFileResponseBody) SetResult(v *CreateFileResponseBodyResult) *CreateFileResponseBody {
	s.Result = v
	return s
}

func (s *CreateFileResponseBody) SetSuccess(v bool) *CreateFileResponseBody {
	s.Success = &v
	return s
}

type CreateFileResponseBodyResult struct {
	// example:
	//
	// master
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// example:
	//
	// /src/main/test.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
}

func (s CreateFileResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateFileResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateFileResponseBodyResult) SetBranchName(v string) *CreateFileResponseBodyResult {
	s.BranchName = &v
	return s
}

func (s *CreateFileResponseBodyResult) SetFilePath(v string) *CreateFileResponseBodyResult {
	s.FilePath = &v
	return s
}

type CreateFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFileResponse) GoString() string {
	return s.String()
}

func (s *CreateFileResponse) SetHeaders(v map[string]*string) *CreateFileResponse {
	s.Headers = v
	return s
}

func (s *CreateFileResponse) SetStatusCode(v int32) *CreateFileResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFileResponse) SetBody(v *CreateFileResponseBody) *CreateFileResponse {
	s.Body = v
	return s
}

type CreateFlowTagRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// #1F9AEF
	Color *string `json:"color,omitempty" xml:"color,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 111
	FlowTagGroupId *int64 `json:"flowTagGroupId,omitempty" xml:"flowTagGroupId,omitempty"`
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreateFlowTagRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowTagRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowTagRequest) SetColor(v string) *CreateFlowTagRequest {
	s.Color = &v
	return s
}

func (s *CreateFlowTagRequest) SetFlowTagGroupId(v int64) *CreateFlowTagRequest {
	s.FlowTagGroupId = &v
	return s
}

func (s *CreateFlowTagRequest) SetName(v string) *CreateFlowTagRequest {
	s.Name = &v
	return s
}

type CreateFlowTagResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 111
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateFlowTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowTagResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowTagResponseBody) SetErrorCode(v string) *CreateFlowTagResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateFlowTagResponseBody) SetErrorMessage(v string) *CreateFlowTagResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateFlowTagResponseBody) SetId(v int64) *CreateFlowTagResponseBody {
	s.Id = &v
	return s
}

func (s *CreateFlowTagResponseBody) SetRequestId(v string) *CreateFlowTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowTagResponseBody) SetSuccess(v bool) *CreateFlowTagResponseBody {
	s.Success = &v
	return s
}

type CreateFlowTagResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowTagResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowTagResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowTagResponse) SetHeaders(v map[string]*string) *CreateFlowTagResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowTagResponse) SetStatusCode(v int32) *CreateFlowTagResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowTagResponse) SetBody(v *CreateFlowTagResponseBody) *CreateFlowTagResponse {
	s.Body = v
	return s
}

type CreateFlowTagGroupRequest struct {
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreateFlowTagGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowTagGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowTagGroupRequest) SetName(v string) *CreateFlowTagGroupRequest {
	s.Name = &v
	return s
}

type CreateFlowTagGroupResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 1223
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateFlowTagGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowTagGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowTagGroupResponseBody) SetErrorCode(v string) *CreateFlowTagGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateFlowTagGroupResponseBody) SetErrorMessage(v string) *CreateFlowTagGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateFlowTagGroupResponseBody) SetId(v int64) *CreateFlowTagGroupResponseBody {
	s.Id = &v
	return s
}

func (s *CreateFlowTagGroupResponseBody) SetRequestId(v string) *CreateFlowTagGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowTagGroupResponseBody) SetSuccess(v bool) *CreateFlowTagGroupResponseBody {
	s.Success = &v
	return s
}

type CreateFlowTagGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowTagGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowTagGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowTagGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowTagGroupResponse) SetHeaders(v map[string]*string) *CreateFlowTagGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowTagGroupResponse) SetStatusCode(v int32) *CreateFlowTagGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowTagGroupResponse) SetBody(v *CreateFlowTagGroupResponseBody) *CreateFlowTagGroupResponse {
	s.Body = v
	return s
}

type CreateHostGroupRequest struct {
	// example:
	//
	// cn-beijing
	AliyunRegion *string `json:"aliyunRegion,omitempty" xml:"aliyunRegion,omitempty"`
	// example:
	//
	// ecs
	EcsLabelKey *string `json:"ecsLabelKey,omitempty" xml:"ecsLabelKey,omitempty"`
	// example:
	//
	// ecs
	EcsLabelValue *string `json:"ecsLabelValue,omitempty" xml:"ecsLabelValue,omitempty"`
	// example:
	//
	// ECS_ALIYUN
	EcsType *string `json:"ecsType,omitempty" xml:"ecsType,omitempty"`
	// example:
	//
	// 0
	EnvId *string `json:"envId,omitempty" xml:"envId,omitempty"`
	// example:
	//
	// [{"aliyunRegionId":"cn-beijing","machineSn":"i-sssssss","instanceName":"ceshi","ip":"120.0.0.0"}]
	MachineInfos *string `json:"machineInfos,omitempty" xml:"machineInfos,omitempty"`
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	ServiceConnectionId *int64 `json:"serviceConnectionId,omitempty" xml:"serviceConnectionId,omitempty"`
	// example:
	//
	// 12,234
	TagIds *string `json:"tagIds,omitempty" xml:"tagIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ECS
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHostGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateHostGroupRequest) SetAliyunRegion(v string) *CreateHostGroupRequest {
	s.AliyunRegion = &v
	return s
}

func (s *CreateHostGroupRequest) SetEcsLabelKey(v string) *CreateHostGroupRequest {
	s.EcsLabelKey = &v
	return s
}

func (s *CreateHostGroupRequest) SetEcsLabelValue(v string) *CreateHostGroupRequest {
	s.EcsLabelValue = &v
	return s
}

func (s *CreateHostGroupRequest) SetEcsType(v string) *CreateHostGroupRequest {
	s.EcsType = &v
	return s
}

func (s *CreateHostGroupRequest) SetEnvId(v string) *CreateHostGroupRequest {
	s.EnvId = &v
	return s
}

func (s *CreateHostGroupRequest) SetMachineInfos(v string) *CreateHostGroupRequest {
	s.MachineInfos = &v
	return s
}

func (s *CreateHostGroupRequest) SetName(v string) *CreateHostGroupRequest {
	s.Name = &v
	return s
}

func (s *CreateHostGroupRequest) SetServiceConnectionId(v int64) *CreateHostGroupRequest {
	s.ServiceConnectionId = &v
	return s
}

func (s *CreateHostGroupRequest) SetTagIds(v string) *CreateHostGroupRequest {
	s.TagIds = &v
	return s
}

func (s *CreateHostGroupRequest) SetType(v string) *CreateHostGroupRequest {
	s.Type = &v
	return s
}

type CreateHostGroupResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 123
	HostGroupId *int64 `json:"hostGroupId,omitempty" xml:"hostGroupId,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHostGroupResponseBody) SetErrorCode(v string) *CreateHostGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateHostGroupResponseBody) SetErrorMessage(v string) *CreateHostGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateHostGroupResponseBody) SetHostGroupId(v int64) *CreateHostGroupResponseBody {
	s.HostGroupId = &v
	return s
}

func (s *CreateHostGroupResponseBody) SetRequestId(v string) *CreateHostGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHostGroupResponseBody) SetSuccess(v bool) *CreateHostGroupResponseBody {
	s.Success = &v
	return s
}

type CreateHostGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHostGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateHostGroupResponse) SetHeaders(v map[string]*string) *CreateHostGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateHostGroupResponse) SetStatusCode(v int32) *CreateHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHostGroupResponse) SetBody(v *CreateHostGroupResponseBody) *CreateHostGroupResponse {
	s.Body = v
	return s
}

type CreateMergeRequestRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// WEB
	CreateFrom  *string   `json:"createFrom,omitempty" xml:"createFrom,omitempty"`
	Description *string   `json:"description,omitempty" xml:"description,omitempty"`
	ReviewerIds []*string `json:"reviewerIds,omitempty" xml:"reviewerIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// sourceBranch
	SourceBranch *string `json:"sourceBranch,omitempty" xml:"sourceBranch,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2369234
	SourceProjectId *int64 `json:"sourceProjectId,omitempty" xml:"sourceProjectId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// targetBranch
	TargetBranch *string `json:"targetBranch,omitempty" xml:"targetBranch,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2369234
	TargetProjectId *int64 `json:"targetProjectId,omitempty" xml:"targetProjectId,omitempty"`
	// This parameter is required.
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
	// example:
	//
	// 722200214032b6b31e6f1434ab
	WorkItemIds *string `json:"workItemIds,omitempty" xml:"workItemIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 6270e731cfea268afc21ccac
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreateMergeRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMergeRequestRequest) GoString() string {
	return s.String()
}

func (s *CreateMergeRequestRequest) SetAccessToken(v string) *CreateMergeRequestRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateMergeRequestRequest) SetCreateFrom(v string) *CreateMergeRequestRequest {
	s.CreateFrom = &v
	return s
}

func (s *CreateMergeRequestRequest) SetDescription(v string) *CreateMergeRequestRequest {
	s.Description = &v
	return s
}

func (s *CreateMergeRequestRequest) SetReviewerIds(v []*string) *CreateMergeRequestRequest {
	s.ReviewerIds = v
	return s
}

func (s *CreateMergeRequestRequest) SetSourceBranch(v string) *CreateMergeRequestRequest {
	s.SourceBranch = &v
	return s
}

func (s *CreateMergeRequestRequest) SetSourceProjectId(v int64) *CreateMergeRequestRequest {
	s.SourceProjectId = &v
	return s
}

func (s *CreateMergeRequestRequest) SetTargetBranch(v string) *CreateMergeRequestRequest {
	s.TargetBranch = &v
	return s
}

func (s *CreateMergeRequestRequest) SetTargetProjectId(v int64) *CreateMergeRequestRequest {
	s.TargetProjectId = &v
	return s
}

func (s *CreateMergeRequestRequest) SetTitle(v string) *CreateMergeRequestRequest {
	s.Title = &v
	return s
}

func (s *CreateMergeRequestRequest) SetWorkItemIds(v string) *CreateMergeRequestRequest {
	s.WorkItemIds = &v
	return s
}

func (s *CreateMergeRequestRequest) SetOrganizationId(v string) *CreateMergeRequestRequest {
	s.OrganizationId = &v
	return s
}

type CreateMergeRequestResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateMergeRequestResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateMergeRequestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMergeRequestResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMergeRequestResponseBody) SetErrorCode(v string) *CreateMergeRequestResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateMergeRequestResponseBody) SetErrorMessage(v string) *CreateMergeRequestResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateMergeRequestResponseBody) SetRequestId(v string) *CreateMergeRequestResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMergeRequestResponseBody) SetResult(v *CreateMergeRequestResponseBodyResult) *CreateMergeRequestResponseBody {
	s.Result = v
	return s
}

func (s *CreateMergeRequestResponseBody) SetSuccess(v bool) *CreateMergeRequestResponseBody {
	s.Success = &v
	return s
}

type CreateMergeRequestResponseBodyResult struct {
	// example:
	//
	// 2
	Ahead *int32 `json:"ahead,omitempty" xml:"ahead,omitempty"`
	// example:
	//
	// true
	AllRequirementsPass *bool                                       `json:"allRequirementsPass,omitempty" xml:"allRequirementsPass,omitempty"`
	Author              *CreateMergeRequestResponseBodyResultAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// 0
	Behind *int32 `json:"behind,omitempty" xml:"behind,omitempty"`
	// example:
	//
	// WEB
	CreateFrom *string `json:"createFrom,omitempty" xml:"createFrom,omitempty"`
	// example:
	//
	// 2023-06-02T03:41:22Z
	CreateTime  *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// xxx
	DetailUrl *string `json:"detailUrl,omitempty" xml:"detailUrl,omitempty"`
	// example:
	//
	// 1
	LocalId *int64 `json:"localId,omitempty" xml:"localId,omitempty"`
	// example:
	//
	// bca90244c4b749e0b109df52ac0eb570
	MrBizId *string `json:"mrBizId,omitempty" xml:"mrBizId,omitempty"`
	// example:
	//
	// CODE_REVIEW
	MrType *string `json:"mrType,omitempty" xml:"mrType,omitempty"`
	// example:
	//
	// 2369234
	ProjectId *int64                                           `json:"projectId,omitempty" xml:"projectId,omitempty"`
	Reviewers []*CreateMergeRequestResponseBodyResultReviewers `json:"reviewers,omitempty" xml:"reviewers,omitempty" type:"Repeated"`
	// example:
	//
	// sourceBranch
	SourceBranch *string `json:"sourceBranch,omitempty" xml:"sourceBranch,omitempty"`
	// example:
	//
	// 2369234
	SourceProjectId *int64 `json:"sourceProjectId,omitempty" xml:"sourceProjectId,omitempty"`
	// example:
	//
	// UNDER_REVIEW
	Status      *string                                            `json:"status,omitempty" xml:"status,omitempty"`
	Subscribers []*CreateMergeRequestResponseBodyResultSubscribers `json:"subscribers,omitempty" xml:"subscribers,omitempty" type:"Repeated"`
	// example:
	//
	// true
	SupportMergeFastForwardOnly *bool `json:"supportMergeFastForwardOnly,omitempty" xml:"supportMergeFastForwardOnly,omitempty"`
	// example:
	//
	// targetBranch
	TargetBranch *string `json:"targetBranch,omitempty" xml:"targetBranch,omitempty"`
	// example:
	//
	// 2369234
	TargetProjectId *int64  `json:"targetProjectId,omitempty" xml:"targetProjectId,omitempty"`
	Title           *string `json:"title,omitempty" xml:"title,omitempty"`
	// example:
	//
	// 2023-06-02T03:41:22Z
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
	// example:
	//
	// https://codeup.aliyun.com/xxx/test/test
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s CreateMergeRequestResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateMergeRequestResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateMergeRequestResponseBodyResult) SetAhead(v int32) *CreateMergeRequestResponseBodyResult {
	s.Ahead = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetAllRequirementsPass(v bool) *CreateMergeRequestResponseBodyResult {
	s.AllRequirementsPass = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetAuthor(v *CreateMergeRequestResponseBodyResultAuthor) *CreateMergeRequestResponseBodyResult {
	s.Author = v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetBehind(v int32) *CreateMergeRequestResponseBodyResult {
	s.Behind = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetCreateFrom(v string) *CreateMergeRequestResponseBodyResult {
	s.CreateFrom = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetCreateTime(v string) *CreateMergeRequestResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetDescription(v string) *CreateMergeRequestResponseBodyResult {
	s.Description = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetDetailUrl(v string) *CreateMergeRequestResponseBodyResult {
	s.DetailUrl = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetLocalId(v int64) *CreateMergeRequestResponseBodyResult {
	s.LocalId = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetMrBizId(v string) *CreateMergeRequestResponseBodyResult {
	s.MrBizId = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetMrType(v string) *CreateMergeRequestResponseBodyResult {
	s.MrType = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetProjectId(v int64) *CreateMergeRequestResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetReviewers(v []*CreateMergeRequestResponseBodyResultReviewers) *CreateMergeRequestResponseBodyResult {
	s.Reviewers = v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetSourceBranch(v string) *CreateMergeRequestResponseBodyResult {
	s.SourceBranch = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetSourceProjectId(v int64) *CreateMergeRequestResponseBodyResult {
	s.SourceProjectId = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetStatus(v string) *CreateMergeRequestResponseBodyResult {
	s.Status = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetSubscribers(v []*CreateMergeRequestResponseBodyResultSubscribers) *CreateMergeRequestResponseBodyResult {
	s.Subscribers = v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetSupportMergeFastForwardOnly(v bool) *CreateMergeRequestResponseBodyResult {
	s.SupportMergeFastForwardOnly = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetTargetBranch(v string) *CreateMergeRequestResponseBodyResult {
	s.TargetBranch = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetTargetProjectId(v int64) *CreateMergeRequestResponseBodyResult {
	s.TargetProjectId = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetTitle(v string) *CreateMergeRequestResponseBodyResult {
	s.Title = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetUpdateTime(v string) *CreateMergeRequestResponseBodyResult {
	s.UpdateTime = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResult) SetWebUrl(v string) *CreateMergeRequestResponseBodyResult {
	s.WebUrl = &v
	return s
}

type CreateMergeRequestResponseBodyResultAuthor struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 19230
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup-nickname
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s CreateMergeRequestResponseBodyResultAuthor) String() string {
	return tea.Prettify(s)
}

func (s CreateMergeRequestResponseBodyResultAuthor) GoString() string {
	return s.String()
}

func (s *CreateMergeRequestResponseBodyResultAuthor) SetAvatarUrl(v string) *CreateMergeRequestResponseBodyResultAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultAuthor) SetEmail(v string) *CreateMergeRequestResponseBodyResultAuthor {
	s.Email = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultAuthor) SetId(v int64) *CreateMergeRequestResponseBodyResultAuthor {
	s.Id = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultAuthor) SetName(v string) *CreateMergeRequestResponseBodyResultAuthor {
	s.Name = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultAuthor) SetState(v string) *CreateMergeRequestResponseBodyResultAuthor {
	s.State = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultAuthor) SetUsername(v string) *CreateMergeRequestResponseBodyResultAuthor {
	s.Username = &v
	return s
}

type CreateMergeRequestResponseBodyResultReviewers struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// false
	HasReviewed *bool `json:"hasReviewed,omitempty" xml:"hasReviewed,omitempty"`
	// example:
	//
	// 7905
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// PASS
	ReviewOpinionStatus *string `json:"reviewOpinionStatus,omitempty" xml:"reviewOpinionStatus,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// root-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s CreateMergeRequestResponseBodyResultReviewers) String() string {
	return tea.Prettify(s)
}

func (s CreateMergeRequestResponseBodyResultReviewers) GoString() string {
	return s.String()
}

func (s *CreateMergeRequestResponseBodyResultReviewers) SetAvatarUrl(v string) *CreateMergeRequestResponseBodyResultReviewers {
	s.AvatarUrl = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultReviewers) SetEmail(v string) *CreateMergeRequestResponseBodyResultReviewers {
	s.Email = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultReviewers) SetHasReviewed(v bool) *CreateMergeRequestResponseBodyResultReviewers {
	s.HasReviewed = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultReviewers) SetId(v int64) *CreateMergeRequestResponseBodyResultReviewers {
	s.Id = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultReviewers) SetName(v string) *CreateMergeRequestResponseBodyResultReviewers {
	s.Name = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultReviewers) SetReviewOpinionStatus(v string) *CreateMergeRequestResponseBodyResultReviewers {
	s.ReviewOpinionStatus = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultReviewers) SetState(v string) *CreateMergeRequestResponseBodyResultReviewers {
	s.State = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultReviewers) SetUsername(v string) *CreateMergeRequestResponseBodyResultReviewers {
	s.Username = &v
	return s
}

type CreateMergeRequestResponseBodyResultSubscribers struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 10092
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// root-test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s CreateMergeRequestResponseBodyResultSubscribers) String() string {
	return tea.Prettify(s)
}

func (s CreateMergeRequestResponseBodyResultSubscribers) GoString() string {
	return s.String()
}

func (s *CreateMergeRequestResponseBodyResultSubscribers) SetAvatarUrl(v string) *CreateMergeRequestResponseBodyResultSubscribers {
	s.AvatarUrl = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultSubscribers) SetEmail(v string) *CreateMergeRequestResponseBodyResultSubscribers {
	s.Email = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultSubscribers) SetId(v int64) *CreateMergeRequestResponseBodyResultSubscribers {
	s.Id = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultSubscribers) SetName(v string) *CreateMergeRequestResponseBodyResultSubscribers {
	s.Name = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultSubscribers) SetState(v string) *CreateMergeRequestResponseBodyResultSubscribers {
	s.State = &v
	return s
}

func (s *CreateMergeRequestResponseBodyResultSubscribers) SetUsername(v string) *CreateMergeRequestResponseBodyResultSubscribers {
	s.Username = &v
	return s
}

type CreateMergeRequestResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMergeRequestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMergeRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMergeRequestResponse) GoString() string {
	return s.String()
}

func (s *CreateMergeRequestResponse) SetHeaders(v map[string]*string) *CreateMergeRequestResponse {
	s.Headers = v
	return s
}

func (s *CreateMergeRequestResponse) SetStatusCode(v int32) *CreateMergeRequestResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMergeRequestResponse) SetBody(v *CreateMergeRequestResponseBody) *CreateMergeRequestResponse {
	s.Body = v
	return s
}

type CreateOAuthTokenRequest struct {
	// clientId
	//
	// This parameter is required.
	//
	// example:
	//
	// dc7e0b3c00a3e58f46
	ClientId *string `json:"clientId,omitempty" xml:"clientId,omitempty"`
	// client_secret
	//
	// This parameter is required.
	//
	// example:
	//
	// a433294edea39cae7e7870
	ClientSecret *string `json:"clientSecret,omitempty" xml:"clientSecret,omitempty"`
	// example:
	//
	// 86df532f74454e189740d100ac97f4b9
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// code
	GrantType *string `json:"grantType,omitempty" xml:"grantType,omitempty"`
	// example:
	//
	// username
	Login *string `json:"login,omitempty" xml:"login,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// read:repo
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
}

func (s CreateOAuthTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOAuthTokenRequest) GoString() string {
	return s.String()
}

func (s *CreateOAuthTokenRequest) SetClientId(v string) *CreateOAuthTokenRequest {
	s.ClientId = &v
	return s
}

func (s *CreateOAuthTokenRequest) SetClientSecret(v string) *CreateOAuthTokenRequest {
	s.ClientSecret = &v
	return s
}

func (s *CreateOAuthTokenRequest) SetCode(v string) *CreateOAuthTokenRequest {
	s.Code = &v
	return s
}

func (s *CreateOAuthTokenRequest) SetGrantType(v string) *CreateOAuthTokenRequest {
	s.GrantType = &v
	return s
}

func (s *CreateOAuthTokenRequest) SetLogin(v string) *CreateOAuthTokenRequest {
	s.Login = &v
	return s
}

func (s *CreateOAuthTokenRequest) SetScope(v string) *CreateOAuthTokenRequest {
	s.Scope = &v
	return s
}

type CreateOAuthTokenResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// C2F153F6-BB43-50C4-9F4F-40593203E19A
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateOAuthTokenResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *string `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateOAuthTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOAuthTokenResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOAuthTokenResponseBody) SetErrorCode(v string) *CreateOAuthTokenResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateOAuthTokenResponseBody) SetErrorMessage(v string) *CreateOAuthTokenResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateOAuthTokenResponseBody) SetRequestId(v string) *CreateOAuthTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOAuthTokenResponseBody) SetResult(v *CreateOAuthTokenResponseBodyResult) *CreateOAuthTokenResponseBody {
	s.Result = v
	return s
}

func (s *CreateOAuthTokenResponseBody) SetSuccess(v string) *CreateOAuthTokenResponseBody {
	s.Success = &v
	return s
}

type CreateOAuthTokenResponseBodyResult struct {
	// example:
	//
	// 2aeb4cd012af879e54f0d37dfa526f51
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// id
	//
	// example:
	//
	// 30815
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// read:repo
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// code
	TokenType *string `json:"tokenType,omitempty" xml:"tokenType,omitempty"`
}

func (s CreateOAuthTokenResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateOAuthTokenResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateOAuthTokenResponseBodyResult) SetAccessToken(v string) *CreateOAuthTokenResponseBodyResult {
	s.AccessToken = &v
	return s
}

func (s *CreateOAuthTokenResponseBodyResult) SetId(v string) *CreateOAuthTokenResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateOAuthTokenResponseBodyResult) SetScope(v string) *CreateOAuthTokenResponseBodyResult {
	s.Scope = &v
	return s
}

func (s *CreateOAuthTokenResponseBodyResult) SetTokenType(v string) *CreateOAuthTokenResponseBodyResult {
	s.TokenType = &v
	return s
}

type CreateOAuthTokenResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOAuthTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOAuthTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOAuthTokenResponse) GoString() string {
	return s.String()
}

func (s *CreateOAuthTokenResponse) SetHeaders(v map[string]*string) *CreateOAuthTokenResponse {
	s.Headers = v
	return s
}

func (s *CreateOAuthTokenResponse) SetStatusCode(v int32) *CreateOAuthTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOAuthTokenResponse) SetBody(v *CreateOAuthTokenResponseBody) *CreateOAuthTokenResponse {
	s.Body = v
	return s
}

type CreatePipelineRequest struct {
	// This parameter is required.
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreatePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineRequest) GoString() string {
	return s.String()
}

func (s *CreatePipelineRequest) SetContent(v string) *CreatePipelineRequest {
	s.Content = &v
	return s
}

func (s *CreatePipelineRequest) SetName(v string) *CreatePipelineRequest {
	s.Name = &v
	return s
}

type CreatePipelineResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 11XXX
	PipelinId *int64 `json:"pipelinId,omitempty" xml:"pipelinId,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreatePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponseBody) SetErrorCode(v string) *CreatePipelineResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreatePipelineResponseBody) SetErrorMessage(v string) *CreatePipelineResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreatePipelineResponseBody) SetPipelinId(v int64) *CreatePipelineResponseBody {
	s.PipelinId = &v
	return s
}

func (s *CreatePipelineResponseBody) SetRequestId(v string) *CreatePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePipelineResponseBody) SetSuccess(v bool) *CreatePipelineResponseBody {
	s.Success = &v
	return s
}

type CreatePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponse) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponse) SetHeaders(v map[string]*string) *CreatePipelineResponse {
	s.Headers = v
	return s
}

func (s *CreatePipelineResponse) SetStatusCode(v int32) *CreatePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePipelineResponse) SetBody(v *CreatePipelineResponseBody) *CreatePipelineResponse {
	s.Body = v
	return s
}

type CreatePipelineGroupRequest struct {
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreatePipelineGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineGroupRequest) GoString() string {
	return s.String()
}

func (s *CreatePipelineGroupRequest) SetName(v string) *CreatePipelineGroupRequest {
	s.Name = &v
	return s
}

type CreatePipelineGroupResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage  *string                                       `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	PipelineGroup *CreatePipelineGroupResponseBodyPipelineGroup `json:"pipelineGroup,omitempty" xml:"pipelineGroup,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreatePipelineGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePipelineGroupResponseBody) SetErrorCode(v string) *CreatePipelineGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreatePipelineGroupResponseBody) SetErrorMessage(v string) *CreatePipelineGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreatePipelineGroupResponseBody) SetPipelineGroup(v *CreatePipelineGroupResponseBodyPipelineGroup) *CreatePipelineGroupResponseBody {
	s.PipelineGroup = v
	return s
}

func (s *CreatePipelineGroupResponseBody) SetRequestId(v string) *CreatePipelineGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePipelineGroupResponseBody) SetSuccess(v bool) *CreatePipelineGroupResponseBody {
	s.Success = &v
	return s
}

type CreatePipelineGroupResponseBodyPipelineGroup struct {
	// example:
	//
	// 111
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreatePipelineGroupResponseBodyPipelineGroup) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineGroupResponseBodyPipelineGroup) GoString() string {
	return s.String()
}

func (s *CreatePipelineGroupResponseBodyPipelineGroup) SetId(v int64) *CreatePipelineGroupResponseBodyPipelineGroup {
	s.Id = &v
	return s
}

func (s *CreatePipelineGroupResponseBodyPipelineGroup) SetName(v string) *CreatePipelineGroupResponseBodyPipelineGroup {
	s.Name = &v
	return s
}

type CreatePipelineGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePipelineGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePipelineGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineGroupResponse) GoString() string {
	return s.String()
}

func (s *CreatePipelineGroupResponse) SetHeaders(v map[string]*string) *CreatePipelineGroupResponse {
	s.Headers = v
	return s
}

func (s *CreatePipelineGroupResponse) SetStatusCode(v int32) *CreatePipelineGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePipelineGroupResponse) SetBody(v *CreatePipelineGroupResponseBody) *CreatePipelineGroupResponse {
	s.Body = v
	return s
}

type CreateProjectRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ABCD
	CustomCode *string `json:"customCode,omitempty" xml:"customCode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// public
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 704eaxxxx5efede61xxx5
	TemplateIdentifier *string `json:"templateIdentifier,omitempty" xml:"templateIdentifier,omitempty"`
}

func (s CreateProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectRequest) SetCustomCode(v string) *CreateProjectRequest {
	s.CustomCode = &v
	return s
}

func (s *CreateProjectRequest) SetName(v string) *CreateProjectRequest {
	s.Name = &v
	return s
}

func (s *CreateProjectRequest) SetScope(v string) *CreateProjectRequest {
	s.Scope = &v
	return s
}

func (s *CreateProjectRequest) SetTemplateIdentifier(v string) *CreateProjectRequest {
	s.TemplateIdentifier = &v
	return s
}

type CreateProjectResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string                           `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	Project  *CreateProjectResponseBodyProject `json:"project,omitempty" xml:"project,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProjectResponseBody) SetErrorCode(v string) *CreateProjectResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateProjectResponseBody) SetErrorMsg(v string) *CreateProjectResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateProjectResponseBody) SetProject(v *CreateProjectResponseBodyProject) *CreateProjectResponseBody {
	s.Project = v
	return s
}

func (s *CreateProjectResponseBody) SetRequestId(v string) *CreateProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateProjectResponseBody) SetSuccess(v bool) *CreateProjectResponseBody {
	s.Success = &v
	return s
}

type CreateProjectResponseBodyProject struct {
	// example:
	//
	// Project
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// OJAY
	CustomCode *string `json:"customCode,omitempty" xml:"customCode,omitempty"`
	// example:
	//
	// xxx
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1623916393000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// https://xxxxxx.png
	Icon *string `json:"icon,omitempty" xml:"icon,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// NORMAL
	LogicalStatus *string `json:"logicalStatus,omitempty" xml:"logicalStatus,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// demo示例项目
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 5e70xxxxxxcd000xxxxe96
	OrganizationIdentifier *string `json:"organizationIdentifier,omitempty" xml:"organizationIdentifier,omitempty"`
	// example:
	//
	// public
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// 8a40xxxxxxxxxxxxx64
	StatusIdentifier *string `json:"statusIdentifier,omitempty" xml:"statusIdentifier,omitempty"`
	// example:
	//
	// 1
	StatusStageIdentifier *string `json:"statusStageIdentifier,omitempty" xml:"statusStageIdentifier,omitempty"`
	// example:
	//
	// CustomProject
	TypeIdentifier *string `json:"typeIdentifier,omitempty" xml:"typeIdentifier,omitempty"`
}

func (s CreateProjectResponseBodyProject) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectResponseBodyProject) GoString() string {
	return s.String()
}

func (s *CreateProjectResponseBodyProject) SetCategoryIdentifier(v string) *CreateProjectResponseBodyProject {
	s.CategoryIdentifier = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetCreator(v string) *CreateProjectResponseBodyProject {
	s.Creator = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetCustomCode(v string) *CreateProjectResponseBodyProject {
	s.CustomCode = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetDescription(v string) *CreateProjectResponseBodyProject {
	s.Description = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetGmtCreate(v int64) *CreateProjectResponseBodyProject {
	s.GmtCreate = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetGmtModified(v int64) *CreateProjectResponseBodyProject {
	s.GmtModified = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetIcon(v string) *CreateProjectResponseBodyProject {
	s.Icon = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetIdentifier(v string) *CreateProjectResponseBodyProject {
	s.Identifier = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetLogicalStatus(v string) *CreateProjectResponseBodyProject {
	s.LogicalStatus = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetModifier(v string) *CreateProjectResponseBodyProject {
	s.Modifier = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetName(v string) *CreateProjectResponseBodyProject {
	s.Name = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetOrganizationIdentifier(v string) *CreateProjectResponseBodyProject {
	s.OrganizationIdentifier = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetScope(v string) *CreateProjectResponseBodyProject {
	s.Scope = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetStatusIdentifier(v string) *CreateProjectResponseBodyProject {
	s.StatusIdentifier = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetStatusStageIdentifier(v string) *CreateProjectResponseBodyProject {
	s.StatusStageIdentifier = &v
	return s
}

func (s *CreateProjectResponseBodyProject) SetTypeIdentifier(v string) *CreateProjectResponseBodyProject {
	s.TypeIdentifier = &v
	return s
}

type CreateProjectResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateProjectResponse) SetHeaders(v map[string]*string) *CreateProjectResponse {
	s.Headers = v
	return s
}

func (s *CreateProjectResponse) SetStatusCode(v int32) *CreateProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProjectResponse) SetBody(v *CreateProjectResponseBody) *CreateProjectResponse {
	s.Body = v
	return s
}

type CreateProjectLabelRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// #006AD4
	Color       *string `json:"color,omitempty" xml:"color,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s CreateProjectLabelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectLabelRequest) GoString() string {
	return s.String()
}

func (s *CreateProjectLabelRequest) SetAccessToken(v string) *CreateProjectLabelRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateProjectLabelRequest) SetColor(v string) *CreateProjectLabelRequest {
	s.Color = &v
	return s
}

func (s *CreateProjectLabelRequest) SetDescription(v string) *CreateProjectLabelRequest {
	s.Description = &v
	return s
}

func (s *CreateProjectLabelRequest) SetName(v string) *CreateProjectLabelRequest {
	s.Name = &v
	return s
}

func (s *CreateProjectLabelRequest) SetOrganizationId(v string) *CreateProjectLabelRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateProjectLabelRequest) SetRepositoryIdentity(v string) *CreateProjectLabelRequest {
	s.RepositoryIdentity = &v
	return s
}

type CreateProjectLabelResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// A7586FEB-E48D-5579-983F-74981FBFF627
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateProjectLabelResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateProjectLabelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectLabelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProjectLabelResponseBody) SetErrorCode(v string) *CreateProjectLabelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateProjectLabelResponseBody) SetErrorMessage(v string) *CreateProjectLabelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateProjectLabelResponseBody) SetRequestId(v string) *CreateProjectLabelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateProjectLabelResponseBody) SetResult(v *CreateProjectLabelResponseBodyResult) *CreateProjectLabelResponseBody {
	s.Result = v
	return s
}

func (s *CreateProjectLabelResponseBody) SetSuccess(v bool) *CreateProjectLabelResponseBody {
	s.Success = &v
	return s
}

type CreateProjectLabelResponseBodyResult struct {
	// example:
	//
	// #006AD4
	Color       *string `json:"color,omitempty" xml:"color,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// b5b5738b94954bc6aa5a293316ed1d24
	Id   *string `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreateProjectLabelResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectLabelResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateProjectLabelResponseBodyResult) SetColor(v string) *CreateProjectLabelResponseBodyResult {
	s.Color = &v
	return s
}

func (s *CreateProjectLabelResponseBodyResult) SetDescription(v string) *CreateProjectLabelResponseBodyResult {
	s.Description = &v
	return s
}

func (s *CreateProjectLabelResponseBodyResult) SetId(v string) *CreateProjectLabelResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateProjectLabelResponseBodyResult) SetName(v string) *CreateProjectLabelResponseBodyResult {
	s.Name = &v
	return s
}

type CreateProjectLabelResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateProjectLabelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateProjectLabelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProjectLabelResponse) GoString() string {
	return s.String()
}

func (s *CreateProjectLabelResponse) SetHeaders(v map[string]*string) *CreateProjectLabelResponse {
	s.Headers = v
	return s
}

func (s *CreateProjectLabelResponse) SetStatusCode(v int32) *CreateProjectLabelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProjectLabelResponse) SetBody(v *CreateProjectLabelResponseBody) *CreateProjectLabelResponse {
	s.Body = v
	return s
}

type CreateProtectdBranchRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	AllowMergeRoles   []*int32  `json:"allowMergeRoles,omitempty" xml:"allowMergeRoles,omitempty" type:"Repeated"`
	AllowMergeUserIds []*string `json:"allowMergeUserIds,omitempty" xml:"allowMergeUserIds,omitempty" type:"Repeated"`
	AllowPushRoles    []*int32  `json:"allowPushRoles,omitempty" xml:"allowPushRoles,omitempty" type:"Repeated"`
	AllowPushUserIds  []*string `json:"allowPushUserIds,omitempty" xml:"allowPushUserIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// protectBranch
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// --
	Id                  *int64                                          `json:"id,omitempty" xml:"id,omitempty"`
	MergeRequestSetting *CreateProtectdBranchRequestMergeRequestSetting `json:"mergeRequestSetting,omitempty" xml:"mergeRequestSetting,omitempty" type:"Struct"`
	TestSettingDTO      *CreateProtectdBranchRequestTestSettingDTO      `json:"testSettingDTO,omitempty" xml:"testSettingDTO,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreateProtectdBranchRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchRequest) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchRequest) SetAccessToken(v string) *CreateProtectdBranchRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateProtectdBranchRequest) SetAllowMergeRoles(v []*int32) *CreateProtectdBranchRequest {
	s.AllowMergeRoles = v
	return s
}

func (s *CreateProtectdBranchRequest) SetAllowMergeUserIds(v []*string) *CreateProtectdBranchRequest {
	s.AllowMergeUserIds = v
	return s
}

func (s *CreateProtectdBranchRequest) SetAllowPushRoles(v []*int32) *CreateProtectdBranchRequest {
	s.AllowPushRoles = v
	return s
}

func (s *CreateProtectdBranchRequest) SetAllowPushUserIds(v []*string) *CreateProtectdBranchRequest {
	s.AllowPushUserIds = v
	return s
}

func (s *CreateProtectdBranchRequest) SetBranch(v string) *CreateProtectdBranchRequest {
	s.Branch = &v
	return s
}

func (s *CreateProtectdBranchRequest) SetId(v int64) *CreateProtectdBranchRequest {
	s.Id = &v
	return s
}

func (s *CreateProtectdBranchRequest) SetMergeRequestSetting(v *CreateProtectdBranchRequestMergeRequestSetting) *CreateProtectdBranchRequest {
	s.MergeRequestSetting = v
	return s
}

func (s *CreateProtectdBranchRequest) SetTestSettingDTO(v *CreateProtectdBranchRequestTestSettingDTO) *CreateProtectdBranchRequest {
	s.TestSettingDTO = v
	return s
}

func (s *CreateProtectdBranchRequest) SetOrganizationId(v string) *CreateProtectdBranchRequest {
	s.OrganizationId = &v
	return s
}

type CreateProtectdBranchRequestMergeRequestSetting struct {
	AllowMergeRequestRoles []*int32  `json:"allowMergeRequestRoles,omitempty" xml:"allowMergeRequestRoles,omitempty" type:"Repeated"`
	DefaultAssignees       []*string `json:"defaultAssignees,omitempty" xml:"defaultAssignees,omitempty" type:"Repeated"`
	// example:
	//
	// true
	IsAllowSelfApproval *bool `json:"isAllowSelfApproval,omitempty" xml:"isAllowSelfApproval,omitempty"`
	// example:
	//
	// true
	IsRequireDiscussionProcessed *bool `json:"isRequireDiscussionProcessed,omitempty" xml:"isRequireDiscussionProcessed,omitempty"`
	// example:
	//
	// true
	IsRequired *bool `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	// example:
	//
	// false
	IsResetApprovalWhenNewPush *bool `json:"isResetApprovalWhenNewPush,omitempty" xml:"isResetApprovalWhenNewPush,omitempty"`
	// example:
	//
	// 1
	MinimumApproval *int32 `json:"minimumApproval,omitempty" xml:"minimumApproval,omitempty"`
	// example:
	//
	// general
	MrMode *string `json:"mrMode,omitempty" xml:"mrMode,omitempty"`
	// example:
	//
	// **.java
	WhiteList *string `json:"whiteList,omitempty" xml:"whiteList,omitempty"`
}

func (s CreateProtectdBranchRequestMergeRequestSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchRequestMergeRequestSetting) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchRequestMergeRequestSetting) SetAllowMergeRequestRoles(v []*int32) *CreateProtectdBranchRequestMergeRequestSetting {
	s.AllowMergeRequestRoles = v
	return s
}

func (s *CreateProtectdBranchRequestMergeRequestSetting) SetDefaultAssignees(v []*string) *CreateProtectdBranchRequestMergeRequestSetting {
	s.DefaultAssignees = v
	return s
}

func (s *CreateProtectdBranchRequestMergeRequestSetting) SetIsAllowSelfApproval(v bool) *CreateProtectdBranchRequestMergeRequestSetting {
	s.IsAllowSelfApproval = &v
	return s
}

func (s *CreateProtectdBranchRequestMergeRequestSetting) SetIsRequireDiscussionProcessed(v bool) *CreateProtectdBranchRequestMergeRequestSetting {
	s.IsRequireDiscussionProcessed = &v
	return s
}

func (s *CreateProtectdBranchRequestMergeRequestSetting) SetIsRequired(v bool) *CreateProtectdBranchRequestMergeRequestSetting {
	s.IsRequired = &v
	return s
}

func (s *CreateProtectdBranchRequestMergeRequestSetting) SetIsResetApprovalWhenNewPush(v bool) *CreateProtectdBranchRequestMergeRequestSetting {
	s.IsResetApprovalWhenNewPush = &v
	return s
}

func (s *CreateProtectdBranchRequestMergeRequestSetting) SetMinimumApproval(v int32) *CreateProtectdBranchRequestMergeRequestSetting {
	s.MinimumApproval = &v
	return s
}

func (s *CreateProtectdBranchRequestMergeRequestSetting) SetMrMode(v string) *CreateProtectdBranchRequestMergeRequestSetting {
	s.MrMode = &v
	return s
}

func (s *CreateProtectdBranchRequestMergeRequestSetting) SetWhiteList(v string) *CreateProtectdBranchRequestMergeRequestSetting {
	s.WhiteList = &v
	return s
}

type CreateProtectdBranchRequestTestSettingDTO struct {
	CheckConfig             *CreateProtectdBranchRequestTestSettingDTOCheckConfig             `json:"checkConfig,omitempty" xml:"checkConfig,omitempty" type:"Struct"`
	CheckTaskQualityConfig  *CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig  `json:"checkTaskQualityConfig,omitempty" xml:"checkTaskQualityConfig,omitempty" type:"Struct"`
	CodeGuidelinesDetection *CreateProtectdBranchRequestTestSettingDTOCodeGuidelinesDetection `json:"codeGuidelinesDetection,omitempty" xml:"codeGuidelinesDetection,omitempty" type:"Struct"`
	// example:
	//
	// false
	IsRequired             *bool                                                            `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	SensitiveInfoDetection *CreateProtectdBranchRequestTestSettingDTOSensitiveInfoDetection `json:"sensitiveInfoDetection,omitempty" xml:"sensitiveInfoDetection,omitempty" type:"Struct"`
}

func (s CreateProtectdBranchRequestTestSettingDTO) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchRequestTestSettingDTO) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchRequestTestSettingDTO) SetCheckConfig(v *CreateProtectdBranchRequestTestSettingDTOCheckConfig) *CreateProtectdBranchRequestTestSettingDTO {
	s.CheckConfig = v
	return s
}

func (s *CreateProtectdBranchRequestTestSettingDTO) SetCheckTaskQualityConfig(v *CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig) *CreateProtectdBranchRequestTestSettingDTO {
	s.CheckTaskQualityConfig = v
	return s
}

func (s *CreateProtectdBranchRequestTestSettingDTO) SetCodeGuidelinesDetection(v *CreateProtectdBranchRequestTestSettingDTOCodeGuidelinesDetection) *CreateProtectdBranchRequestTestSettingDTO {
	s.CodeGuidelinesDetection = v
	return s
}

func (s *CreateProtectdBranchRequestTestSettingDTO) SetIsRequired(v bool) *CreateProtectdBranchRequestTestSettingDTO {
	s.IsRequired = &v
	return s
}

func (s *CreateProtectdBranchRequestTestSettingDTO) SetSensitiveInfoDetection(v *CreateProtectdBranchRequestTestSettingDTOSensitiveInfoDetection) *CreateProtectdBranchRequestTestSettingDTO {
	s.SensitiveInfoDetection = v
	return s
}

type CreateProtectdBranchRequestTestSettingDTOCheckConfig struct {
	CheckItems []*CreateProtectdBranchRequestTestSettingDTOCheckConfigCheckItems `json:"checkItems,omitempty" xml:"checkItems,omitempty" type:"Repeated"`
}

func (s CreateProtectdBranchRequestTestSettingDTOCheckConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchRequestTestSettingDTOCheckConfig) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchRequestTestSettingDTOCheckConfig) SetCheckItems(v []*CreateProtectdBranchRequestTestSettingDTOCheckConfigCheckItems) *CreateProtectdBranchRequestTestSettingDTOCheckConfig {
	s.CheckItems = v
	return s
}

type CreateProtectdBranchRequestTestSettingDTOCheckConfigCheckItems struct {
	// example:
	//
	// false
	IsRequired *bool   `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreateProtectdBranchRequestTestSettingDTOCheckConfigCheckItems) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchRequestTestSettingDTOCheckConfigCheckItems) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchRequestTestSettingDTOCheckConfigCheckItems) SetIsRequired(v bool) *CreateProtectdBranchRequestTestSettingDTOCheckConfigCheckItems {
	s.IsRequired = &v
	return s
}

func (s *CreateProtectdBranchRequestTestSettingDTOCheckConfigCheckItems) SetName(v string) *CreateProtectdBranchRequestTestSettingDTOCheckConfigCheckItems {
	s.Name = &v
	return s
}

type CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig struct {
	// example:
	//
	// 123456
	BizNo *string `json:"bizNo,omitempty" xml:"bizNo,omitempty"`
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_task_quality
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// bz-task-quality
	TaskName *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
}

func (s CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig) SetBizNo(v string) *CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig {
	s.BizNo = &v
	return s
}

func (s *CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig) SetEnabled(v bool) *CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig {
	s.Enabled = &v
	return s
}

func (s *CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig) SetMessage(v string) *CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig {
	s.Message = &v
	return s
}

func (s *CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig) SetTaskName(v string) *CreateProtectdBranchRequestTestSettingDTOCheckTaskQualityConfig {
	s.TaskName = &v
	return s
}

type CreateProtectdBranchRequestTestSettingDTOCodeGuidelinesDetection struct {
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_code_guide_lines
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateProtectdBranchRequestTestSettingDTOCodeGuidelinesDetection) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchRequestTestSettingDTOCodeGuidelinesDetection) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchRequestTestSettingDTOCodeGuidelinesDetection) SetEnabled(v bool) *CreateProtectdBranchRequestTestSettingDTOCodeGuidelinesDetection {
	s.Enabled = &v
	return s
}

func (s *CreateProtectdBranchRequestTestSettingDTOCodeGuidelinesDetection) SetMessage(v string) *CreateProtectdBranchRequestTestSettingDTOCodeGuidelinesDetection {
	s.Message = &v
	return s
}

type CreateProtectdBranchRequestTestSettingDTOSensitiveInfoDetection struct {
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_code_sensitive_info
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateProtectdBranchRequestTestSettingDTOSensitiveInfoDetection) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchRequestTestSettingDTOSensitiveInfoDetection) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchRequestTestSettingDTOSensitiveInfoDetection) SetEnabled(v bool) *CreateProtectdBranchRequestTestSettingDTOSensitiveInfoDetection {
	s.Enabled = &v
	return s
}

func (s *CreateProtectdBranchRequestTestSettingDTOSensitiveInfoDetection) SetMessage(v string) *CreateProtectdBranchRequestTestSettingDTOSensitiveInfoDetection {
	s.Message = &v
	return s
}

type CreateProtectdBranchResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// C2F153F6-BB43-50C4-9F4F-40593203E19A
	RequestId *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateProtectdBranchResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateProtectdBranchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchResponseBody) SetErrorCode(v string) *CreateProtectdBranchResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateProtectdBranchResponseBody) SetErrorMessage(v string) *CreateProtectdBranchResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateProtectdBranchResponseBody) SetRequestId(v string) *CreateProtectdBranchResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateProtectdBranchResponseBody) SetResult(v *CreateProtectdBranchResponseBodyResult) *CreateProtectdBranchResponseBody {
	s.Result = v
	return s
}

func (s *CreateProtectdBranchResponseBody) SetSuccess(v bool) *CreateProtectdBranchResponseBody {
	s.Success = &v
	return s
}

type CreateProtectdBranchResponseBodyResult struct {
	AllowMergeRoles   []*int32 `json:"allowMergeRoles,omitempty" xml:"allowMergeRoles,omitempty" type:"Repeated"`
	AllowMergeUserIds []*int64 `json:"allowMergeUserIds,omitempty" xml:"allowMergeUserIds,omitempty" type:"Repeated"`
	AllowPushRoles    []*int32 `json:"allowPushRoles,omitempty" xml:"allowPushRoles,omitempty" type:"Repeated"`
	AllowPushUserIds  []*int64 `json:"allowPushUserIds,omitempty" xml:"allowPushUserIds,omitempty" type:"Repeated"`
	// example:
	//
	// protectBranch
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// 5240
	Id                  *int64                                                     `json:"id,omitempty" xml:"id,omitempty"`
	MergeRequestSetting *CreateProtectdBranchResponseBodyResultMergeRequestSetting `json:"mergeRequestSetting,omitempty" xml:"mergeRequestSetting,omitempty" type:"Struct"`
	TestSettingDTO      *CreateProtectdBranchResponseBodyResultTestSettingDTO      `json:"testSettingDTO,omitempty" xml:"testSettingDTO,omitempty" type:"Struct"`
}

func (s CreateProtectdBranchResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchResponseBodyResult) SetAllowMergeRoles(v []*int32) *CreateProtectdBranchResponseBodyResult {
	s.AllowMergeRoles = v
	return s
}

func (s *CreateProtectdBranchResponseBodyResult) SetAllowMergeUserIds(v []*int64) *CreateProtectdBranchResponseBodyResult {
	s.AllowMergeUserIds = v
	return s
}

func (s *CreateProtectdBranchResponseBodyResult) SetAllowPushRoles(v []*int32) *CreateProtectdBranchResponseBodyResult {
	s.AllowPushRoles = v
	return s
}

func (s *CreateProtectdBranchResponseBodyResult) SetAllowPushUserIds(v []*int64) *CreateProtectdBranchResponseBodyResult {
	s.AllowPushUserIds = v
	return s
}

func (s *CreateProtectdBranchResponseBodyResult) SetBranch(v string) *CreateProtectdBranchResponseBodyResult {
	s.Branch = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResult) SetId(v int64) *CreateProtectdBranchResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResult) SetMergeRequestSetting(v *CreateProtectdBranchResponseBodyResultMergeRequestSetting) *CreateProtectdBranchResponseBodyResult {
	s.MergeRequestSetting = v
	return s
}

func (s *CreateProtectdBranchResponseBodyResult) SetTestSettingDTO(v *CreateProtectdBranchResponseBodyResultTestSettingDTO) *CreateProtectdBranchResponseBodyResult {
	s.TestSettingDTO = v
	return s
}

type CreateProtectdBranchResponseBodyResultMergeRequestSetting struct {
	AllowMergeRequestRoles []*int32  `json:"allowMergeRequestRoles,omitempty" xml:"allowMergeRequestRoles,omitempty" type:"Repeated"`
	DefaultAssignees       []*string `json:"defaultAssignees,omitempty" xml:"defaultAssignees,omitempty" type:"Repeated"`
	// example:
	//
	// true
	IsAllowSelfApproval *bool `json:"isAllowSelfApproval,omitempty" xml:"isAllowSelfApproval,omitempty"`
	// example:
	//
	// true
	IsRequireDiscussionProcessed *bool `json:"isRequireDiscussionProcessed,omitempty" xml:"isRequireDiscussionProcessed,omitempty"`
	// example:
	//
	// true
	IsRequired *bool `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	// example:
	//
	// false
	IsResetApprovalWhenNewPush *bool `json:"isResetApprovalWhenNewPush,omitempty" xml:"isResetApprovalWhenNewPush,omitempty"`
	// example:
	//
	// 1
	MinimumApproval *int32 `json:"minimumApproval,omitempty" xml:"minimumApproval,omitempty"`
	// example:
	//
	// general
	MrMode *string `json:"mrMode,omitempty" xml:"mrMode,omitempty"`
	// example:
	//
	// **.java
	WhiteList *string `json:"whiteList,omitempty" xml:"whiteList,omitempty"`
}

func (s CreateProtectdBranchResponseBodyResultMergeRequestSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchResponseBodyResultMergeRequestSetting) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchResponseBodyResultMergeRequestSetting) SetAllowMergeRequestRoles(v []*int32) *CreateProtectdBranchResponseBodyResultMergeRequestSetting {
	s.AllowMergeRequestRoles = v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultMergeRequestSetting) SetDefaultAssignees(v []*string) *CreateProtectdBranchResponseBodyResultMergeRequestSetting {
	s.DefaultAssignees = v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultMergeRequestSetting) SetIsAllowSelfApproval(v bool) *CreateProtectdBranchResponseBodyResultMergeRequestSetting {
	s.IsAllowSelfApproval = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultMergeRequestSetting) SetIsRequireDiscussionProcessed(v bool) *CreateProtectdBranchResponseBodyResultMergeRequestSetting {
	s.IsRequireDiscussionProcessed = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultMergeRequestSetting) SetIsRequired(v bool) *CreateProtectdBranchResponseBodyResultMergeRequestSetting {
	s.IsRequired = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultMergeRequestSetting) SetIsResetApprovalWhenNewPush(v bool) *CreateProtectdBranchResponseBodyResultMergeRequestSetting {
	s.IsResetApprovalWhenNewPush = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultMergeRequestSetting) SetMinimumApproval(v int32) *CreateProtectdBranchResponseBodyResultMergeRequestSetting {
	s.MinimumApproval = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultMergeRequestSetting) SetMrMode(v string) *CreateProtectdBranchResponseBodyResultMergeRequestSetting {
	s.MrMode = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultMergeRequestSetting) SetWhiteList(v string) *CreateProtectdBranchResponseBodyResultMergeRequestSetting {
	s.WhiteList = &v
	return s
}

type CreateProtectdBranchResponseBodyResultTestSettingDTO struct {
	CheckConfig             *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfig             `json:"checkConfig,omitempty" xml:"checkConfig,omitempty" type:"Struct"`
	CheckTaskQualityConfig  *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig  `json:"checkTaskQualityConfig,omitempty" xml:"checkTaskQualityConfig,omitempty" type:"Struct"`
	CodeGuidelinesDetection *CreateProtectdBranchResponseBodyResultTestSettingDTOCodeGuidelinesDetection `json:"codeGuidelinesDetection,omitempty" xml:"codeGuidelinesDetection,omitempty" type:"Struct"`
	// example:
	//
	// false
	IsRequired             *bool                                                                       `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	SensitiveInfoDetection *CreateProtectdBranchResponseBodyResultTestSettingDTOSensitiveInfoDetection `json:"sensitiveInfoDetection,omitempty" xml:"sensitiveInfoDetection,omitempty" type:"Struct"`
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTO) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTO) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTO) SetCheckConfig(v *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfig) *CreateProtectdBranchResponseBodyResultTestSettingDTO {
	s.CheckConfig = v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTO) SetCheckTaskQualityConfig(v *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig) *CreateProtectdBranchResponseBodyResultTestSettingDTO {
	s.CheckTaskQualityConfig = v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTO) SetCodeGuidelinesDetection(v *CreateProtectdBranchResponseBodyResultTestSettingDTOCodeGuidelinesDetection) *CreateProtectdBranchResponseBodyResultTestSettingDTO {
	s.CodeGuidelinesDetection = v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTO) SetIsRequired(v bool) *CreateProtectdBranchResponseBodyResultTestSettingDTO {
	s.IsRequired = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTO) SetSensitiveInfoDetection(v *CreateProtectdBranchResponseBodyResultTestSettingDTOSensitiveInfoDetection) *CreateProtectdBranchResponseBodyResultTestSettingDTO {
	s.SensitiveInfoDetection = v
	return s
}

type CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfig struct {
	CheckItems []*CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfigCheckItems `json:"checkItems,omitempty" xml:"checkItems,omitempty" type:"Repeated"`
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfig) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfig) SetCheckItems(v []*CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfigCheckItems) *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfig {
	s.CheckItems = v
	return s
}

type CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfigCheckItems struct {
	// example:
	//
	// false
	IsRequired *bool   `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfigCheckItems) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfigCheckItems) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfigCheckItems) SetIsRequired(v bool) *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfigCheckItems {
	s.IsRequired = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfigCheckItems) SetName(v string) *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckConfigCheckItems {
	s.Name = &v
	return s
}

type CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig struct {
	// example:
	//
	// 123456
	BizNo *string `json:"bizNo,omitempty" xml:"bizNo,omitempty"`
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_task_quality
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// biz-task-quality
	TaskName *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetBizNo(v string) *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.BizNo = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetEnabled(v bool) *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.Enabled = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetMessage(v string) *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.Message = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetTaskName(v string) *CreateProtectdBranchResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.TaskName = &v
	return s
}

type CreateProtectdBranchResponseBodyResultTestSettingDTOCodeGuidelinesDetection struct {
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_code_guide_lines
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTOCodeGuidelinesDetection) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTOCodeGuidelinesDetection) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOCodeGuidelinesDetection) SetEnabled(v bool) *CreateProtectdBranchResponseBodyResultTestSettingDTOCodeGuidelinesDetection {
	s.Enabled = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOCodeGuidelinesDetection) SetMessage(v string) *CreateProtectdBranchResponseBodyResultTestSettingDTOCodeGuidelinesDetection {
	s.Message = &v
	return s
}

type CreateProtectdBranchResponseBodyResultTestSettingDTOSensitiveInfoDetection struct {
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_code_sensitive_info
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTOSensitiveInfoDetection) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchResponseBodyResultTestSettingDTOSensitiveInfoDetection) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOSensitiveInfoDetection) SetEnabled(v bool) *CreateProtectdBranchResponseBodyResultTestSettingDTOSensitiveInfoDetection {
	s.Enabled = &v
	return s
}

func (s *CreateProtectdBranchResponseBodyResultTestSettingDTOSensitiveInfoDetection) SetMessage(v string) *CreateProtectdBranchResponseBodyResultTestSettingDTOSensitiveInfoDetection {
	s.Message = &v
	return s
}

type CreateProtectdBranchResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateProtectdBranchResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateProtectdBranchResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProtectdBranchResponse) GoString() string {
	return s.String()
}

func (s *CreateProtectdBranchResponse) SetHeaders(v map[string]*string) *CreateProtectdBranchResponse {
	s.Headers = v
	return s
}

func (s *CreateProtectdBranchResponse) SetStatusCode(v int32) *CreateProtectdBranchResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProtectdBranchResponse) SetBody(v *CreateProtectdBranchResponseBody) *CreateProtectdBranchResponse {
	s.Body = v
	return s
}

type CreatePushRuleRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	RuleInfos []*CreatePushRuleRequestRuleInfos `json:"ruleInfos,omitempty" xml:"ruleInfos,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreatePushRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePushRuleRequest) GoString() string {
	return s.String()
}

func (s *CreatePushRuleRequest) SetAccessToken(v string) *CreatePushRuleRequest {
	s.AccessToken = &v
	return s
}

func (s *CreatePushRuleRequest) SetRuleInfos(v []*CreatePushRuleRequestRuleInfos) *CreatePushRuleRequest {
	s.RuleInfos = v
	return s
}

func (s *CreatePushRuleRequest) SetOrganizationId(v string) *CreatePushRuleRequest {
	s.OrganizationId = &v
	return s
}

type CreatePushRuleRequestRuleInfos struct {
	// example:
	//
	// CommitMessageChecker
	CheckerName *string `json:"checkerName,omitempty" xml:"checkerName,omitempty"`
	// example:
	//
	// warn
	CheckerType *string `json:"checkerType,omitempty" xml:"checkerType,omitempty"`
	// example:
	//
	// user@example.com
	ExtraMessage    *string   `json:"extraMessage,omitempty" xml:"extraMessage,omitempty"`
	FileRuleRegexes []*string `json:"fileRuleRegexes,omitempty" xml:"fileRuleRegexes,omitempty" type:"Repeated"`
}

func (s CreatePushRuleRequestRuleInfos) String() string {
	return tea.Prettify(s)
}

func (s CreatePushRuleRequestRuleInfos) GoString() string {
	return s.String()
}

func (s *CreatePushRuleRequestRuleInfos) SetCheckerName(v string) *CreatePushRuleRequestRuleInfos {
	s.CheckerName = &v
	return s
}

func (s *CreatePushRuleRequestRuleInfos) SetCheckerType(v string) *CreatePushRuleRequestRuleInfos {
	s.CheckerType = &v
	return s
}

func (s *CreatePushRuleRequestRuleInfos) SetExtraMessage(v string) *CreatePushRuleRequestRuleInfos {
	s.ExtraMessage = &v
	return s
}

func (s *CreatePushRuleRequestRuleInfos) SetFileRuleRegexes(v []*string) *CreatePushRuleRequestRuleInfos {
	s.FileRuleRegexes = v
	return s
}

type CreatePushRuleResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreatePushRuleResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreatePushRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePushRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePushRuleResponseBody) SetErrorCode(v string) *CreatePushRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreatePushRuleResponseBody) SetErrorMessage(v string) *CreatePushRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreatePushRuleResponseBody) SetRequestId(v string) *CreatePushRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePushRuleResponseBody) SetResult(v *CreatePushRuleResponseBodyResult) *CreatePushRuleResponseBody {
	s.Result = v
	return s
}

func (s *CreatePushRuleResponseBody) SetSuccess(v bool) *CreatePushRuleResponseBody {
	s.Success = &v
	return s
}

type CreatePushRuleResponseBodyResult struct {
	// example:
	//
	// 2023-09-03T18:20:06+08:00
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 2023-09-03T18:20:06+08:00
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 2077
	Id        *int64                                       `json:"id,omitempty" xml:"id,omitempty"`
	RuleInfos []*CreatePushRuleResponseBodyResultRuleInfos `json:"ruleInfos,omitempty" xml:"ruleInfos,omitempty" type:"Repeated"`
}

func (s CreatePushRuleResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreatePushRuleResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreatePushRuleResponseBodyResult) SetGmtCreate(v string) *CreatePushRuleResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *CreatePushRuleResponseBodyResult) SetGmtModified(v string) *CreatePushRuleResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *CreatePushRuleResponseBodyResult) SetId(v int64) *CreatePushRuleResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreatePushRuleResponseBodyResult) SetRuleInfos(v []*CreatePushRuleResponseBodyResultRuleInfos) *CreatePushRuleResponseBodyResult {
	s.RuleInfos = v
	return s
}

type CreatePushRuleResponseBodyResultRuleInfos struct {
	// example:
	//
	// ForcePushChecker
	CheckerName *string `json:"checkerName,omitempty" xml:"checkerName,omitempty"`
	// example:
	//
	// warn
	CheckerType *string `json:"checkerType,omitempty" xml:"checkerType,omitempty"`
	// example:
	//
	// disabled
	ExtraMessage    *string   `json:"extraMessage,omitempty" xml:"extraMessage,omitempty"`
	FileRuleRegexes []*string `json:"fileRuleRegexes,omitempty" xml:"fileRuleRegexes,omitempty" type:"Repeated"`
}

func (s CreatePushRuleResponseBodyResultRuleInfos) String() string {
	return tea.Prettify(s)
}

func (s CreatePushRuleResponseBodyResultRuleInfos) GoString() string {
	return s.String()
}

func (s *CreatePushRuleResponseBodyResultRuleInfos) SetCheckerName(v string) *CreatePushRuleResponseBodyResultRuleInfos {
	s.CheckerName = &v
	return s
}

func (s *CreatePushRuleResponseBodyResultRuleInfos) SetCheckerType(v string) *CreatePushRuleResponseBodyResultRuleInfos {
	s.CheckerType = &v
	return s
}

func (s *CreatePushRuleResponseBodyResultRuleInfos) SetExtraMessage(v string) *CreatePushRuleResponseBodyResultRuleInfos {
	s.ExtraMessage = &v
	return s
}

func (s *CreatePushRuleResponseBodyResultRuleInfos) SetFileRuleRegexes(v []*string) *CreatePushRuleResponseBodyResultRuleInfos {
	s.FileRuleRegexes = v
	return s
}

type CreatePushRuleResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePushRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePushRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePushRuleResponse) GoString() string {
	return s.String()
}

func (s *CreatePushRuleResponse) SetHeaders(v map[string]*string) *CreatePushRuleResponse {
	s.Headers = v
	return s
}

func (s *CreatePushRuleResponse) SetStatusCode(v int32) *CreatePushRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePushRuleResponse) SetBody(v *CreatePushRuleResponseBody) *CreatePushRuleResponse {
	s.Body = v
	return s
}

type CreateRepositoryRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl   *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// Java
	GitignoreType *string `json:"gitignoreType,omitempty" xml:"gitignoreType,omitempty"`
	// example:
	//
	// codeup-test
	ImportAccount *string `json:"importAccount,omitempty" xml:"importAccount,omitempty"`
	// example:
	//
	// true
	ImportDemoProject *bool `json:"importDemoProject,omitempty" xml:"importDemoProject,omitempty"`
	// example:
	//
	// GIT
	ImportRepoType *string `json:"importRepoType,omitempty" xml:"importRepoType,omitempty"`
	// example:
	//
	// xxxxx
	ImportToken *string `json:"importToken,omitempty" xml:"importToken,omitempty"`
	// example:
	//
	// text
	ImportTokenEncrypted *string `json:"importTokenEncrypted,omitempty" xml:"importTokenEncrypted,omitempty"`
	// example:
	//
	// https://github.com/a/b.git
	ImportUrl *string `json:"importUrl,omitempty" xml:"importUrl,omitempty"`
	// example:
	//
	// true
	InitStandardService *bool `json:"initStandardService,omitempty" xml:"initStandardService,omitempty"`
	// example:
	//
	// false
	IsCryptoEnabled *bool `json:"isCryptoEnabled,omitempty" xml:"isCryptoEnabled,omitempty"`
	// example:
	//
	// ""
	LocalImportUrl *string `json:"localImportUrl,omitempty" xml:"localImportUrl,omitempty"`
	// This parameter is required.
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	NamespaceId *int64  `json:"namespaceId,omitempty" xml:"namespaceId,omitempty"`
	Path        *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// USER_GUIDE
	ReadmeType *string `json:"readmeType,omitempty" xml:"readmeType,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// true
	CreateParentPath *bool `json:"createParentPath,omitempty" xml:"createParentPath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// false
	Sync *bool `json:"sync,omitempty" xml:"sync,omitempty"`
}

func (s CreateRepositoryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRepositoryRequest) GoString() string {
	return s.String()
}

func (s *CreateRepositoryRequest) SetAccessToken(v string) *CreateRepositoryRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateRepositoryRequest) SetAvatarUrl(v string) *CreateRepositoryRequest {
	s.AvatarUrl = &v
	return s
}

func (s *CreateRepositoryRequest) SetDescription(v string) *CreateRepositoryRequest {
	s.Description = &v
	return s
}

func (s *CreateRepositoryRequest) SetGitignoreType(v string) *CreateRepositoryRequest {
	s.GitignoreType = &v
	return s
}

func (s *CreateRepositoryRequest) SetImportAccount(v string) *CreateRepositoryRequest {
	s.ImportAccount = &v
	return s
}

func (s *CreateRepositoryRequest) SetImportDemoProject(v bool) *CreateRepositoryRequest {
	s.ImportDemoProject = &v
	return s
}

func (s *CreateRepositoryRequest) SetImportRepoType(v string) *CreateRepositoryRequest {
	s.ImportRepoType = &v
	return s
}

func (s *CreateRepositoryRequest) SetImportToken(v string) *CreateRepositoryRequest {
	s.ImportToken = &v
	return s
}

func (s *CreateRepositoryRequest) SetImportTokenEncrypted(v string) *CreateRepositoryRequest {
	s.ImportTokenEncrypted = &v
	return s
}

func (s *CreateRepositoryRequest) SetImportUrl(v string) *CreateRepositoryRequest {
	s.ImportUrl = &v
	return s
}

func (s *CreateRepositoryRequest) SetInitStandardService(v bool) *CreateRepositoryRequest {
	s.InitStandardService = &v
	return s
}

func (s *CreateRepositoryRequest) SetIsCryptoEnabled(v bool) *CreateRepositoryRequest {
	s.IsCryptoEnabled = &v
	return s
}

func (s *CreateRepositoryRequest) SetLocalImportUrl(v string) *CreateRepositoryRequest {
	s.LocalImportUrl = &v
	return s
}

func (s *CreateRepositoryRequest) SetName(v string) *CreateRepositoryRequest {
	s.Name = &v
	return s
}

func (s *CreateRepositoryRequest) SetNamespaceId(v int64) *CreateRepositoryRequest {
	s.NamespaceId = &v
	return s
}

func (s *CreateRepositoryRequest) SetPath(v string) *CreateRepositoryRequest {
	s.Path = &v
	return s
}

func (s *CreateRepositoryRequest) SetReadmeType(v string) *CreateRepositoryRequest {
	s.ReadmeType = &v
	return s
}

func (s *CreateRepositoryRequest) SetVisibilityLevel(v int32) *CreateRepositoryRequest {
	s.VisibilityLevel = &v
	return s
}

func (s *CreateRepositoryRequest) SetCreateParentPath(v bool) *CreateRepositoryRequest {
	s.CreateParentPath = &v
	return s
}

func (s *CreateRepositoryRequest) SetOrganizationId(v string) *CreateRepositoryRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateRepositoryRequest) SetSync(v bool) *CreateRepositoryRequest {
	s.Sync = &v
	return s
}

type CreateRepositoryResponseBody struct {
	// example:
	//
	// 401
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// SYSTEM_UNAUTHORIZED_ERROR
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F590C9D8-E908-5B6C-95AC-56B7E8011FFA
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateRepositoryResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateRepositoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRepositoryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRepositoryResponseBody) SetErrorCode(v string) *CreateRepositoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateRepositoryResponseBody) SetErrorMessage(v string) *CreateRepositoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateRepositoryResponseBody) SetRequestId(v string) *CreateRepositoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRepositoryResponseBody) SetResult(v *CreateRepositoryResponseBodyResult) *CreateRepositoryResponseBody {
	s.Result = v
	return s
}

func (s *CreateRepositoryResponseBody) SetSuccess(v bool) *CreateRepositoryResponseBody {
	s.Success = &v
	return s
}

type CreateRepositoryResponseBodyResult struct {
	// example:
	//
	// false
	ImportFromSvn *bool `json:"Import_from_svn,omitempty" xml:"Import_from_svn,omitempty"`
	// example:
	//
	// false
	Archived *bool `json:"archived,omitempty" xml:"archived,omitempty"`
	// example:
	//
	// ""
	AvatarUrl *string `json:"avatar_url,omitempty" xml:"avatar_url,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 1233
	CreatorId *int64 `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// master
	DefaultBranch *string `json:"defaultBranch,omitempty" xml:"defaultBranch,omitempty"`
	// example:
	//
	// false
	DemoProject *bool   `json:"demoProject,omitempty" xml:"demoProject,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// ""
	HttpUrlToRepo *string `json:"httpUrlToRepo,omitempty" xml:"httpUrlToRepo,omitempty"`
	// id
	//
	// example:
	//
	// 2959
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	LastActivityAt *string `json:"lastActivityAt,omitempty" xml:"lastActivityAt,omitempty"`
	// example:
	//
	// codeupTest
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// codeup-test-org / test-codeup
	NameWithNamespace *string                                      `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	Namespace         *CreateRepositoryResponseBodyResultNamespace `json:"namespace,omitempty" xml:"namespace,omitempty" type:"Struct"`
	// example:
	//
	// test-codeup
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// codeup-test-org/test-codeup
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// ""
	SshUrlToRepo *string `json:"sshUrlToRepo,omitempty" xml:"sshUrlToRepo,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *string `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// web url
	//
	// example:
	//
	// ""
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s CreateRepositoryResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateRepositoryResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateRepositoryResponseBodyResult) SetImportFromSvn(v bool) *CreateRepositoryResponseBodyResult {
	s.ImportFromSvn = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetArchived(v bool) *CreateRepositoryResponseBodyResult {
	s.Archived = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetAvatarUrl(v string) *CreateRepositoryResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetCreatedAt(v string) *CreateRepositoryResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetCreatorId(v int64) *CreateRepositoryResponseBodyResult {
	s.CreatorId = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetDefaultBranch(v string) *CreateRepositoryResponseBodyResult {
	s.DefaultBranch = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetDemoProject(v bool) *CreateRepositoryResponseBodyResult {
	s.DemoProject = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetDescription(v string) *CreateRepositoryResponseBodyResult {
	s.Description = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetHttpUrlToRepo(v string) *CreateRepositoryResponseBodyResult {
	s.HttpUrlToRepo = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetId(v int64) *CreateRepositoryResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetLastActivityAt(v string) *CreateRepositoryResponseBodyResult {
	s.LastActivityAt = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetName(v string) *CreateRepositoryResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetNameWithNamespace(v string) *CreateRepositoryResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetNamespace(v *CreateRepositoryResponseBodyResultNamespace) *CreateRepositoryResponseBodyResult {
	s.Namespace = v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetPath(v string) *CreateRepositoryResponseBodyResult {
	s.Path = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetPathWithNamespace(v string) *CreateRepositoryResponseBodyResult {
	s.PathWithNamespace = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetSshUrlToRepo(v string) *CreateRepositoryResponseBodyResult {
	s.SshUrlToRepo = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetVisibilityLevel(v string) *CreateRepositoryResponseBodyResult {
	s.VisibilityLevel = &v
	return s
}

func (s *CreateRepositoryResponseBodyResult) SetWebUrl(v string) *CreateRepositoryResponseBodyResult {
	s.WebUrl = &v
	return s
}

type CreateRepositoryResponseBodyResultNamespace struct {
	// example:
	//
	// ""
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// codeup repo description
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// id
	//
	// example:
	//
	// 3194
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 123
	OwnerId *int64 `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	// example:
	//
	// codeup
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// true
	Public *bool `json:"public,omitempty" xml:"public,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *string `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
}

func (s CreateRepositoryResponseBodyResultNamespace) String() string {
	return tea.Prettify(s)
}

func (s CreateRepositoryResponseBodyResultNamespace) GoString() string {
	return s.String()
}

func (s *CreateRepositoryResponseBodyResultNamespace) SetAvatar(v string) *CreateRepositoryResponseBodyResultNamespace {
	s.Avatar = &v
	return s
}

func (s *CreateRepositoryResponseBodyResultNamespace) SetCreatedAt(v string) *CreateRepositoryResponseBodyResultNamespace {
	s.CreatedAt = &v
	return s
}

func (s *CreateRepositoryResponseBodyResultNamespace) SetDescription(v string) *CreateRepositoryResponseBodyResultNamespace {
	s.Description = &v
	return s
}

func (s *CreateRepositoryResponseBodyResultNamespace) SetId(v int64) *CreateRepositoryResponseBodyResultNamespace {
	s.Id = &v
	return s
}

func (s *CreateRepositoryResponseBodyResultNamespace) SetName(v string) *CreateRepositoryResponseBodyResultNamespace {
	s.Name = &v
	return s
}

func (s *CreateRepositoryResponseBodyResultNamespace) SetOwnerId(v int64) *CreateRepositoryResponseBodyResultNamespace {
	s.OwnerId = &v
	return s
}

func (s *CreateRepositoryResponseBodyResultNamespace) SetPath(v string) *CreateRepositoryResponseBodyResultNamespace {
	s.Path = &v
	return s
}

func (s *CreateRepositoryResponseBodyResultNamespace) SetPublic(v bool) *CreateRepositoryResponseBodyResultNamespace {
	s.Public = &v
	return s
}

func (s *CreateRepositoryResponseBodyResultNamespace) SetUpdatedAt(v string) *CreateRepositoryResponseBodyResultNamespace {
	s.UpdatedAt = &v
	return s
}

func (s *CreateRepositoryResponseBodyResultNamespace) SetVisibilityLevel(v string) *CreateRepositoryResponseBodyResultNamespace {
	s.VisibilityLevel = &v
	return s
}

type CreateRepositoryResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRepositoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRepositoryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRepositoryResponse) GoString() string {
	return s.String()
}

func (s *CreateRepositoryResponse) SetHeaders(v map[string]*string) *CreateRepositoryResponse {
	s.Headers = v
	return s
}

func (s *CreateRepositoryResponse) SetStatusCode(v int32) *CreateRepositoryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRepositoryResponse) SetBody(v *CreateRepositoryResponseBody) *CreateRepositoryResponse {
	s.Body = v
	return s
}

type CreateRepositoryGroupRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl   *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// test-create-group
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 26842
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// test-create-group
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreateRepositoryGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRepositoryGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateRepositoryGroupRequest) SetAccessToken(v string) *CreateRepositoryGroupRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateRepositoryGroupRequest) SetAvatarUrl(v string) *CreateRepositoryGroupRequest {
	s.AvatarUrl = &v
	return s
}

func (s *CreateRepositoryGroupRequest) SetDescription(v string) *CreateRepositoryGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateRepositoryGroupRequest) SetName(v string) *CreateRepositoryGroupRequest {
	s.Name = &v
	return s
}

func (s *CreateRepositoryGroupRequest) SetParentId(v int64) *CreateRepositoryGroupRequest {
	s.ParentId = &v
	return s
}

func (s *CreateRepositoryGroupRequest) SetPath(v string) *CreateRepositoryGroupRequest {
	s.Path = &v
	return s
}

func (s *CreateRepositoryGroupRequest) SetVisibilityLevel(v int32) *CreateRepositoryGroupRequest {
	s.VisibilityLevel = &v
	return s
}

func (s *CreateRepositoryGroupRequest) SetOrganizationId(v string) *CreateRepositoryGroupRequest {
	s.OrganizationId = &v
	return s
}

type CreateRepositoryGroupResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateRepositoryGroupResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateRepositoryGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRepositoryGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRepositoryGroupResponseBody) SetErrorCode(v string) *CreateRepositoryGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateRepositoryGroupResponseBody) SetErrorMessage(v string) *CreateRepositoryGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateRepositoryGroupResponseBody) SetRequestId(v string) *CreateRepositoryGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRepositoryGroupResponseBody) SetResult(v *CreateRepositoryGroupResponseBodyResult) *CreateRepositoryGroupResponseBody {
	s.Result = v
	return s
}

func (s *CreateRepositoryGroupResponseBody) SetSuccess(v bool) *CreateRepositoryGroupResponseBody {
	s.Success = &v
	return s
}

type CreateRepositoryGroupResponseBodyResult struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl   *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 18685
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-create-group
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// 19230
	OwnerId *int64 `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	// example:
	//
	// 26842
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// test-create-group
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// codeup-test-org/test-create-group
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// Group
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 10
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// ""
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s CreateRepositoryGroupResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateRepositoryGroupResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateRepositoryGroupResponseBodyResult) SetAvatarUrl(v string) *CreateRepositoryGroupResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetDescription(v string) *CreateRepositoryGroupResponseBodyResult {
	s.Description = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetId(v int64) *CreateRepositoryGroupResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetName(v string) *CreateRepositoryGroupResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetNameWithNamespace(v string) *CreateRepositoryGroupResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetOwnerId(v int64) *CreateRepositoryGroupResponseBodyResult {
	s.OwnerId = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetParentId(v int64) *CreateRepositoryGroupResponseBodyResult {
	s.ParentId = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetPath(v string) *CreateRepositoryGroupResponseBodyResult {
	s.Path = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetPathWithNamespace(v string) *CreateRepositoryGroupResponseBodyResult {
	s.PathWithNamespace = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetType(v string) *CreateRepositoryGroupResponseBodyResult {
	s.Type = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetVisibilityLevel(v int32) *CreateRepositoryGroupResponseBodyResult {
	s.VisibilityLevel = &v
	return s
}

func (s *CreateRepositoryGroupResponseBodyResult) SetWebUrl(v string) *CreateRepositoryGroupResponseBodyResult {
	s.WebUrl = &v
	return s
}

type CreateRepositoryGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRepositoryGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRepositoryGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRepositoryGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateRepositoryGroupResponse) SetHeaders(v map[string]*string) *CreateRepositoryGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateRepositoryGroupResponse) SetStatusCode(v int32) *CreateRepositoryGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRepositoryGroupResponse) SetBody(v *CreateRepositoryGroupResponseBody) *CreateRepositoryGroupResponse {
	s.Body = v
	return s
}

type CreateResourceMemberRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1111111111111
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// admin
	RoleName *string `json:"roleName,omitempty" xml:"roleName,omitempty"`
}

func (s CreateResourceMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceMemberRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceMemberRequest) SetAccountId(v string) *CreateResourceMemberRequest {
	s.AccountId = &v
	return s
}

func (s *CreateResourceMemberRequest) SetRoleName(v string) *CreateResourceMemberRequest {
	s.RoleName = &v
	return s
}

type CreateResourceMemberResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateResourceMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceMemberResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResourceMemberResponseBody) SetErrorCode(v string) *CreateResourceMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateResourceMemberResponseBody) SetErrorMessage(v string) *CreateResourceMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateResourceMemberResponseBody) SetRequestId(v string) *CreateResourceMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateResourceMemberResponseBody) SetSuccess(v bool) *CreateResourceMemberResponseBody {
	s.Success = &v
	return s
}

type CreateResourceMemberResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateResourceMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateResourceMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceMemberResponse) GoString() string {
	return s.String()
}

func (s *CreateResourceMemberResponse) SetHeaders(v map[string]*string) *CreateResourceMemberResponse {
	s.Headers = v
	return s
}

func (s *CreateResourceMemberResponse) SetStatusCode(v int32) *CreateResourceMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateResourceMemberResponse) SetBody(v *CreateResourceMemberResponseBody) *CreateResourceMemberResponse {
	s.Body = v
	return s
}

type CreateServiceAuthRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// RAM
	ServiceAuthType *string `json:"serviceAuthType,omitempty" xml:"serviceAuthType,omitempty"`
}

func (s CreateServiceAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceAuthRequest) GoString() string {
	return s.String()
}

func (s *CreateServiceAuthRequest) SetServiceAuthType(v string) *CreateServiceAuthRequest {
	s.ServiceAuthType = &v
	return s
}

type CreateServiceAuthResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 1223
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateServiceAuthResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceAuthResponseBody) GoString() string {
	return s.String()
}

func (s *CreateServiceAuthResponseBody) SetErrorCode(v string) *CreateServiceAuthResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateServiceAuthResponseBody) SetErrorMessage(v string) *CreateServiceAuthResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateServiceAuthResponseBody) SetId(v string) *CreateServiceAuthResponseBody {
	s.Id = &v
	return s
}

func (s *CreateServiceAuthResponseBody) SetRequestId(v string) *CreateServiceAuthResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateServiceAuthResponseBody) SetSuccess(v bool) *CreateServiceAuthResponseBody {
	s.Success = &v
	return s
}

type CreateServiceAuthResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateServiceAuthResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateServiceAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceAuthResponse) GoString() string {
	return s.String()
}

func (s *CreateServiceAuthResponse) SetHeaders(v map[string]*string) *CreateServiceAuthResponse {
	s.Headers = v
	return s
}

func (s *CreateServiceAuthResponse) SetStatusCode(v int32) *CreateServiceAuthResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateServiceAuthResponse) SetBody(v *CreateServiceAuthResponseBody) *CreateServiceAuthResponse {
	s.Body = v
	return s
}

type CreateServiceConnectionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// CREDENTIAL
	AuthType *string `json:"authType,omitempty" xml:"authType,omitempty"`
	// This parameter is required.
	ConnectionName *string `json:"connectionName,omitempty" xml:"connectionName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ecs
	ConnectionType *string `json:"connectionType,omitempty" xml:"connectionType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// PERSON
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 111
	ServiceAuthId *int64 `json:"serviceAuthId,omitempty" xml:"serviceAuthId,omitempty"`
}

func (s CreateServiceConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceConnectionRequest) GoString() string {
	return s.String()
}

func (s *CreateServiceConnectionRequest) SetAuthType(v string) *CreateServiceConnectionRequest {
	s.AuthType = &v
	return s
}

func (s *CreateServiceConnectionRequest) SetConnectionName(v string) *CreateServiceConnectionRequest {
	s.ConnectionName = &v
	return s
}

func (s *CreateServiceConnectionRequest) SetConnectionType(v string) *CreateServiceConnectionRequest {
	s.ConnectionType = &v
	return s
}

func (s *CreateServiceConnectionRequest) SetScope(v string) *CreateServiceConnectionRequest {
	s.Scope = &v
	return s
}

func (s *CreateServiceConnectionRequest) SetServiceAuthId(v int64) *CreateServiceConnectionRequest {
	s.ServiceAuthId = &v
	return s
}

type CreateServiceConnectionResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 19224
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateServiceConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateServiceConnectionResponseBody) SetErrorCode(v string) *CreateServiceConnectionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateServiceConnectionResponseBody) SetErrorMessage(v string) *CreateServiceConnectionResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateServiceConnectionResponseBody) SetId(v int64) *CreateServiceConnectionResponseBody {
	s.Id = &v
	return s
}

func (s *CreateServiceConnectionResponseBody) SetRequestId(v string) *CreateServiceConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateServiceConnectionResponseBody) SetSuccess(v bool) *CreateServiceConnectionResponseBody {
	s.Success = &v
	return s
}

type CreateServiceConnectionResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateServiceConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateServiceConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceConnectionResponse) GoString() string {
	return s.String()
}

func (s *CreateServiceConnectionResponse) SetHeaders(v map[string]*string) *CreateServiceConnectionResponse {
	s.Headers = v
	return s
}

func (s *CreateServiceConnectionResponse) SetStatusCode(v int32) *CreateServiceConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateServiceConnectionResponse) SetBody(v *CreateServiceConnectionResponseBody) *CreateServiceConnectionResponse {
	s.Body = v
	return s
}

type CreateServiceCredentialRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 张三的Git证书
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// zhangsan
	Password *string `json:"password,omitempty" xml:"password,omitempty"`
	// example:
	//
	// PERSON
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// USERNAME_PASSWORD
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// zhangsan
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s CreateServiceCredentialRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceCredentialRequest) GoString() string {
	return s.String()
}

func (s *CreateServiceCredentialRequest) SetName(v string) *CreateServiceCredentialRequest {
	s.Name = &v
	return s
}

func (s *CreateServiceCredentialRequest) SetPassword(v string) *CreateServiceCredentialRequest {
	s.Password = &v
	return s
}

func (s *CreateServiceCredentialRequest) SetScope(v string) *CreateServiceCredentialRequest {
	s.Scope = &v
	return s
}

func (s *CreateServiceCredentialRequest) SetType(v string) *CreateServiceCredentialRequest {
	s.Type = &v
	return s
}

func (s *CreateServiceCredentialRequest) SetUsername(v string) *CreateServiceCredentialRequest {
	s.Username = &v
	return s
}

type CreateServiceCredentialResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 11222
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateServiceCredentialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceCredentialResponseBody) GoString() string {
	return s.String()
}

func (s *CreateServiceCredentialResponseBody) SetErrorCode(v string) *CreateServiceCredentialResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateServiceCredentialResponseBody) SetErrorMessage(v string) *CreateServiceCredentialResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateServiceCredentialResponseBody) SetId(v int64) *CreateServiceCredentialResponseBody {
	s.Id = &v
	return s
}

func (s *CreateServiceCredentialResponseBody) SetRequestId(v string) *CreateServiceCredentialResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateServiceCredentialResponseBody) SetSuccess(v bool) *CreateServiceCredentialResponseBody {
	s.Success = &v
	return s
}

type CreateServiceCredentialResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateServiceCredentialResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateServiceCredentialResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateServiceCredentialResponse) GoString() string {
	return s.String()
}

func (s *CreateServiceCredentialResponse) SetHeaders(v map[string]*string) *CreateServiceCredentialResponse {
	s.Headers = v
	return s
}

func (s *CreateServiceCredentialResponse) SetStatusCode(v int32) *CreateServiceCredentialResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateServiceCredentialResponse) SetBody(v *CreateServiceCredentialResponseBody) *CreateServiceCredentialResponse {
	s.Body = v
	return s
}

type CreateSprintRequest struct {
	// example:
	//
	// 2021-12-02
	EndDate *string `json:"endDate,omitempty" xml:"endDate,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// asd345xxxxx9q9845xxxxx34
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// This parameter is required.
	StaffIds []*string `json:"staffIds,omitempty" xml:"staffIds,omitempty" type:"Repeated"`
	// example:
	//
	// 2021-12-01
	StartDate *string `json:"startDate,omitempty" xml:"startDate,omitempty"`
}

func (s CreateSprintRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSprintRequest) GoString() string {
	return s.String()
}

func (s *CreateSprintRequest) SetEndDate(v string) *CreateSprintRequest {
	s.EndDate = &v
	return s
}

func (s *CreateSprintRequest) SetName(v string) *CreateSprintRequest {
	s.Name = &v
	return s
}

func (s *CreateSprintRequest) SetSpaceIdentifier(v string) *CreateSprintRequest {
	s.SpaceIdentifier = &v
	return s
}

func (s *CreateSprintRequest) SetStaffIds(v []*string) *CreateSprintRequest {
	s.StaffIds = v
	return s
}

func (s *CreateSprintRequest) SetStartDate(v string) *CreateSprintRequest {
	s.StartDate = &v
	return s
}

type CreateSprintResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                         `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Sprint    *CreateSprintResponseBodySprint `json:"sprint,omitempty" xml:"sprint,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateSprintResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSprintResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSprintResponseBody) SetErrorCode(v string) *CreateSprintResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateSprintResponseBody) SetErrorMsg(v string) *CreateSprintResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateSprintResponseBody) SetRequestId(v string) *CreateSprintResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSprintResponseBody) SetSprint(v *CreateSprintResponseBodySprint) *CreateSprintResponseBody {
	s.Sprint = v
	return s
}

func (s *CreateSprintResponseBody) SetSuccess(v bool) *CreateSprintResponseBody {
	s.Success = &v
	return s
}

type CreateSprintResponseBodySprint struct {
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// xxx
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1623916393000
	EndDate *int64 `json:"endDate,omitempty" xml:"endDate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// demo示例项目
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// public
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// 5e70xxxxxxcd000xxxxe96
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// 1638403200000
	StartDate *int64 `json:"startDate,omitempty" xml:"startDate,omitempty"`
	// example:
	//
	// TODO
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s CreateSprintResponseBodySprint) String() string {
	return tea.Prettify(s)
}

func (s CreateSprintResponseBodySprint) GoString() string {
	return s.String()
}

func (s *CreateSprintResponseBodySprint) SetCreator(v string) *CreateSprintResponseBodySprint {
	s.Creator = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetDescription(v string) *CreateSprintResponseBodySprint {
	s.Description = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetEndDate(v int64) *CreateSprintResponseBodySprint {
	s.EndDate = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetGmtCreate(v int64) *CreateSprintResponseBodySprint {
	s.GmtCreate = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetGmtModified(v int64) *CreateSprintResponseBodySprint {
	s.GmtModified = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetIdentifier(v string) *CreateSprintResponseBodySprint {
	s.Identifier = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetModifier(v string) *CreateSprintResponseBodySprint {
	s.Modifier = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetName(v string) *CreateSprintResponseBodySprint {
	s.Name = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetScope(v string) *CreateSprintResponseBodySprint {
	s.Scope = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetSpaceIdentifier(v string) *CreateSprintResponseBodySprint {
	s.SpaceIdentifier = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetStartDate(v int64) *CreateSprintResponseBodySprint {
	s.StartDate = &v
	return s
}

func (s *CreateSprintResponseBodySprint) SetStatus(v string) *CreateSprintResponseBodySprint {
	s.Status = &v
	return s
}

type CreateSprintResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSprintResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSprintResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSprintResponse) GoString() string {
	return s.String()
}

func (s *CreateSprintResponse) SetHeaders(v map[string]*string) *CreateSprintResponse {
	s.Headers = v
	return s
}

func (s *CreateSprintResponse) SetStatusCode(v int32) *CreateSprintResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSprintResponse) SetBody(v *CreateSprintResponseBody) *CreateSprintResponse {
	s.Body = v
	return s
}

type CreateSshKeyResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                         `json:"requestId,omitempty" xml:"requestId,omitempty"`
	SshKey    *CreateSshKeyResponseBodySshKey `json:"sshKey,omitempty" xml:"sshKey,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateSshKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSshKeyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSshKeyResponseBody) SetErrorCode(v string) *CreateSshKeyResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateSshKeyResponseBody) SetErrorMessage(v string) *CreateSshKeyResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateSshKeyResponseBody) SetRequestId(v string) *CreateSshKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSshKeyResponseBody) SetSshKey(v *CreateSshKeyResponseBodySshKey) *CreateSshKeyResponseBody {
	s.SshKey = v
	return s
}

func (s *CreateSshKeyResponseBody) SetSuccess(v bool) *CreateSshKeyResponseBody {
	s.Success = &v
	return s
}

type CreateSshKeyResponseBodySshKey struct {
	// example:
	//
	// 123
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// assssssssssss
	PublicKey *string `json:"publicKey,omitempty" xml:"publicKey,omitempty"`
}

func (s CreateSshKeyResponseBodySshKey) String() string {
	return tea.Prettify(s)
}

func (s CreateSshKeyResponseBodySshKey) GoString() string {
	return s.String()
}

func (s *CreateSshKeyResponseBodySshKey) SetId(v int64) *CreateSshKeyResponseBodySshKey {
	s.Id = &v
	return s
}

func (s *CreateSshKeyResponseBodySshKey) SetPublicKey(v string) *CreateSshKeyResponseBodySshKey {
	s.PublicKey = &v
	return s
}

type CreateSshKeyResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSshKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSshKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSshKeyResponse) GoString() string {
	return s.String()
}

func (s *CreateSshKeyResponse) SetHeaders(v map[string]*string) *CreateSshKeyResponse {
	s.Headers = v
	return s
}

func (s *CreateSshKeyResponse) SetStatusCode(v int32) *CreateSshKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSshKeyResponse) SetBody(v *CreateSshKeyResponseBody) *CreateSshKeyResponse {
	s.Body = v
	return s
}

type CreateTagRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	Message     *string `json:"message,omitempty" xml:"message,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master
	Ref *string `json:"ref,omitempty" xml:"ref,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// v1.0
	TagName *string `json:"tagName,omitempty" xml:"tagName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreateTagRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTagRequest) GoString() string {
	return s.String()
}

func (s *CreateTagRequest) SetAccessToken(v string) *CreateTagRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateTagRequest) SetMessage(v string) *CreateTagRequest {
	s.Message = &v
	return s
}

func (s *CreateTagRequest) SetRef(v string) *CreateTagRequest {
	s.Ref = &v
	return s
}

func (s *CreateTagRequest) SetTagName(v string) *CreateTagRequest {
	s.TagName = &v
	return s
}

func (s *CreateTagRequest) SetOrganizationId(v string) *CreateTagRequest {
	s.OrganizationId = &v
	return s
}

type CreateTagResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateTagResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTagResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTagResponseBody) SetErrorCode(v string) *CreateTagResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateTagResponseBody) SetErrorMessage(v string) *CreateTagResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateTagResponseBody) SetRequestId(v string) *CreateTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTagResponseBody) SetResult(v *CreateTagResponseBodyResult) *CreateTagResponseBody {
	s.Result = v
	return s
}

func (s *CreateTagResponseBody) SetSuccess(v bool) *CreateTagResponseBody {
	s.Success = &v
	return s
}

type CreateTagResponseBodyResult struct {
	Commit *CreateTagResponseBodyResultCommit `json:"commit,omitempty" xml:"commit,omitempty" type:"Struct"`
	// example:
	//
	// 0e3b6aa5eab2b086b59fde74766b28d4e5faab0d
	Id      *string `json:"id,omitempty" xml:"id,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// v1.0
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreateTagResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateTagResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateTagResponseBodyResult) SetCommit(v *CreateTagResponseBodyResultCommit) *CreateTagResponseBodyResult {
	s.Commit = v
	return s
}

func (s *CreateTagResponseBodyResult) SetId(v string) *CreateTagResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateTagResponseBodyResult) SetMessage(v string) *CreateTagResponseBodyResult {
	s.Message = &v
	return s
}

func (s *CreateTagResponseBodyResult) SetName(v string) *CreateTagResponseBodyResult {
	s.Name = &v
	return s
}

type CreateTagResponseBodyResultCommit struct {
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	AuthorName  *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2022-03-18 10:00:00
	AuthoredDate *string `json:"authoredDate,omitempty" xml:"authoredDate,omitempty"`
	// example:
	//
	// 2022-03-18 09:00:00
	CommittedDate *string `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	CommitterName  *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2022-03-18 10:00:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// e0297d8fb0393c833a8531e7cc8832739e3cba6d
	Id        *string   `json:"id,omitempty" xml:"id,omitempty"`
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// e0297d8f
	ShortId *string `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateTagResponseBodyResultCommit) String() string {
	return tea.Prettify(s)
}

func (s CreateTagResponseBodyResultCommit) GoString() string {
	return s.String()
}

func (s *CreateTagResponseBodyResultCommit) SetAuthorEmail(v string) *CreateTagResponseBodyResultCommit {
	s.AuthorEmail = &v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetAuthorName(v string) *CreateTagResponseBodyResultCommit {
	s.AuthorName = &v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetAuthoredDate(v string) *CreateTagResponseBodyResultCommit {
	s.AuthoredDate = &v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetCommittedDate(v string) *CreateTagResponseBodyResultCommit {
	s.CommittedDate = &v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetCommitterEmail(v string) *CreateTagResponseBodyResultCommit {
	s.CommitterEmail = &v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetCommitterName(v string) *CreateTagResponseBodyResultCommit {
	s.CommitterName = &v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetCreatedAt(v string) *CreateTagResponseBodyResultCommit {
	s.CreatedAt = &v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetId(v string) *CreateTagResponseBodyResultCommit {
	s.Id = &v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetMessage(v string) *CreateTagResponseBodyResultCommit {
	s.Message = &v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetParentIds(v []*string) *CreateTagResponseBodyResultCommit {
	s.ParentIds = v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetShortId(v string) *CreateTagResponseBodyResultCommit {
	s.ShortId = &v
	return s
}

func (s *CreateTagResponseBodyResultCommit) SetTitle(v string) *CreateTagResponseBodyResultCommit {
	s.Title = &v
	return s
}

type CreateTagResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTagResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTagResponse) GoString() string {
	return s.String()
}

func (s *CreateTagResponse) SetHeaders(v map[string]*string) *CreateTagResponse {
	s.Headers = v
	return s
}

func (s *CreateTagResponse) SetStatusCode(v int32) *CreateTagResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTagResponse) SetBody(v *CreateTagResponseBody) *CreateTagResponse {
	s.Body = v
	return s
}

type CreateTestCaseRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 19xxxx31947xxxx
	AssignedTo *string `json:"assignedTo,omitempty" xml:"assignedTo,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// fdd395xxxxx9q9845xxxxx23
	DirectoryIdentifier *string                                `json:"directoryIdentifier,omitempty" xml:"directoryIdentifier,omitempty"`
	FieldValueList      []*CreateTestCaseRequestFieldValueList `json:"fieldValueList,omitempty" xml:"fieldValueList,omitempty" type:"Repeated"`
	// example:
	//
	// ik3dexxxxxfdfds1xxxxx23
	Priority *string `json:"priority,omitempty" xml:"priority,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// asd345xxxxx9q9845xxxxx34
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// This parameter is required.
	Subject                 *string                                       `json:"subject,omitempty" xml:"subject,omitempty"`
	Tags                    []*string                                     `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	TestcaseStepContentInfo *CreateTestCaseRequestTestcaseStepContentInfo `json:"testcaseStepContentInfo,omitempty" xml:"testcaseStepContentInfo,omitempty" type:"Struct"`
}

func (s CreateTestCaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseRequest) GoString() string {
	return s.String()
}

func (s *CreateTestCaseRequest) SetAssignedTo(v string) *CreateTestCaseRequest {
	s.AssignedTo = &v
	return s
}

func (s *CreateTestCaseRequest) SetDirectoryIdentifier(v string) *CreateTestCaseRequest {
	s.DirectoryIdentifier = &v
	return s
}

func (s *CreateTestCaseRequest) SetFieldValueList(v []*CreateTestCaseRequestFieldValueList) *CreateTestCaseRequest {
	s.FieldValueList = v
	return s
}

func (s *CreateTestCaseRequest) SetPriority(v string) *CreateTestCaseRequest {
	s.Priority = &v
	return s
}

func (s *CreateTestCaseRequest) SetSpaceIdentifier(v string) *CreateTestCaseRequest {
	s.SpaceIdentifier = &v
	return s
}

func (s *CreateTestCaseRequest) SetSubject(v string) *CreateTestCaseRequest {
	s.Subject = &v
	return s
}

func (s *CreateTestCaseRequest) SetTags(v []*string) *CreateTestCaseRequest {
	s.Tags = v
	return s
}

func (s *CreateTestCaseRequest) SetTestcaseStepContentInfo(v *CreateTestCaseRequestTestcaseStepContentInfo) *CreateTestCaseRequest {
	s.TestcaseStepContentInfo = v
	return s
}

type CreateTestCaseRequestFieldValueList struct {
	// example:
	//
	// 6aexxxxxa1d98c09c60xxxx16
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	// example:
	//
	// 77c7fb03c4186c8691d6...
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s CreateTestCaseRequestFieldValueList) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseRequestFieldValueList) GoString() string {
	return s.String()
}

func (s *CreateTestCaseRequestFieldValueList) SetFieldIdentifier(v string) *CreateTestCaseRequestFieldValueList {
	s.FieldIdentifier = &v
	return s
}

func (s *CreateTestCaseRequestFieldValueList) SetValue(v string) *CreateTestCaseRequestFieldValueList {
	s.Value = &v
	return s
}

type CreateTestCaseRequestTestcaseStepContentInfo struct {
	Precondition   *string                                                       `json:"precondition,omitempty" xml:"precondition,omitempty"`
	StepResultList []*CreateTestCaseRequestTestcaseStepContentInfoStepResultList `json:"stepResultList,omitempty" xml:"stepResultList,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// TEXT
	StepType *string `json:"stepType,omitempty" xml:"stepType,omitempty"`
}

func (s CreateTestCaseRequestTestcaseStepContentInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseRequestTestcaseStepContentInfo) GoString() string {
	return s.String()
}

func (s *CreateTestCaseRequestTestcaseStepContentInfo) SetPrecondition(v string) *CreateTestCaseRequestTestcaseStepContentInfo {
	s.Precondition = &v
	return s
}

func (s *CreateTestCaseRequestTestcaseStepContentInfo) SetStepResultList(v []*CreateTestCaseRequestTestcaseStepContentInfoStepResultList) *CreateTestCaseRequestTestcaseStepContentInfo {
	s.StepResultList = v
	return s
}

func (s *CreateTestCaseRequestTestcaseStepContentInfo) SetStepType(v string) *CreateTestCaseRequestTestcaseStepContentInfo {
	s.StepType = &v
	return s
}

type CreateTestCaseRequestTestcaseStepContentInfoStepResultList struct {
	Expected *string `json:"expected,omitempty" xml:"expected,omitempty"`
	Step     *string `json:"step,omitempty" xml:"step,omitempty"`
}

func (s CreateTestCaseRequestTestcaseStepContentInfoStepResultList) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseRequestTestcaseStepContentInfoStepResultList) GoString() string {
	return s.String()
}

func (s *CreateTestCaseRequestTestcaseStepContentInfoStepResultList) SetExpected(v string) *CreateTestCaseRequestTestcaseStepContentInfoStepResultList {
	s.Expected = &v
	return s
}

func (s *CreateTestCaseRequestTestcaseStepContentInfoStepResultList) SetStep(v string) *CreateTestCaseRequestTestcaseStepContentInfoStepResultList {
	s.Step = &v
	return s
}

type CreateTestCaseResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 18E50717-93A4-53BC-A30D-963F742A1CE6
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success  *bool                               `json:"success,omitempty" xml:"success,omitempty"`
	Testcase *CreateTestCaseResponseBodyTestcase `json:"testcase,omitempty" xml:"testcase,omitempty" type:"Struct"`
}

func (s CreateTestCaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponseBody) SetErrorCode(v string) *CreateTestCaseResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateTestCaseResponseBody) SetErrorMsg(v string) *CreateTestCaseResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateTestCaseResponseBody) SetRequestId(v string) *CreateTestCaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTestCaseResponseBody) SetSuccess(v bool) *CreateTestCaseResponseBody {
	s.Success = &v
	return s
}

func (s *CreateTestCaseResponseBody) SetTestcase(v *CreateTestCaseResponseBodyTestcase) *CreateTestCaseResponseBody {
	s.Testcase = v
	return s
}

type CreateTestCaseResponseBodyTestcase struct {
	AssignedTo *CreateTestCaseResponseBodyTestcaseAssignedTo `json:"assignedTo,omitempty" xml:"assignedTo,omitempty" type:"Struct"`
	// example:
	//
	// TestCase
	CategoryIdentifier *string                                       `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	Creator            *CreateTestCaseResponseBodyTestcaseCreator    `json:"creator,omitempty" xml:"creator,omitempty" type:"Struct"`
	DetailInfo         *CreateTestCaseResponseBodyTestcaseDetailInfo `json:"detailInfo,omitempty" xml:"detailInfo,omitempty" type:"Struct"`
	Directory          *CreateTestCaseResponseBodyTestcaseDirectory  `json:"directory,omitempty" xml:"directory,omitempty" type:"Struct"`
	// example:
	//
	// 5a73f81c834d013361d92bdcce
	Identifier *string                                     `json:"identifier,omitempty" xml:"identifier,omitempty"`
	Modifier   *CreateTestCaseResponseBodyTestcaseModifier `json:"modifier,omitempty" xml:"modifier,omitempty" type:"Struct"`
	// example:
	//
	// a18571eba8fe9267cd8375fc06
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// TestRepo
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	Subject   *string `json:"subject,omitempty" xml:"subject,omitempty"`
}

func (s CreateTestCaseResponseBodyTestcase) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponseBodyTestcase) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponseBodyTestcase) SetAssignedTo(v *CreateTestCaseResponseBodyTestcaseAssignedTo) *CreateTestCaseResponseBodyTestcase {
	s.AssignedTo = v
	return s
}

func (s *CreateTestCaseResponseBodyTestcase) SetCategoryIdentifier(v string) *CreateTestCaseResponseBodyTestcase {
	s.CategoryIdentifier = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcase) SetCreator(v *CreateTestCaseResponseBodyTestcaseCreator) *CreateTestCaseResponseBodyTestcase {
	s.Creator = v
	return s
}

func (s *CreateTestCaseResponseBodyTestcase) SetDetailInfo(v *CreateTestCaseResponseBodyTestcaseDetailInfo) *CreateTestCaseResponseBodyTestcase {
	s.DetailInfo = v
	return s
}

func (s *CreateTestCaseResponseBodyTestcase) SetDirectory(v *CreateTestCaseResponseBodyTestcaseDirectory) *CreateTestCaseResponseBodyTestcase {
	s.Directory = v
	return s
}

func (s *CreateTestCaseResponseBodyTestcase) SetIdentifier(v string) *CreateTestCaseResponseBodyTestcase {
	s.Identifier = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcase) SetModifier(v *CreateTestCaseResponseBodyTestcaseModifier) *CreateTestCaseResponseBodyTestcase {
	s.Modifier = v
	return s
}

func (s *CreateTestCaseResponseBodyTestcase) SetSpaceIdentifier(v string) *CreateTestCaseResponseBodyTestcase {
	s.SpaceIdentifier = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcase) SetSpaceType(v string) *CreateTestCaseResponseBodyTestcase {
	s.SpaceType = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcase) SetSubject(v string) *CreateTestCaseResponseBodyTestcase {
	s.Subject = &v
	return s
}

type CreateTestCaseResponseBodyTestcaseAssignedTo struct {
	// example:
	//
	// 134xxx343xxxxx
	AssignIdentifier *string `json:"assignIdentifier,omitempty" xml:"assignIdentifier,omitempty"`
	Name             *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 3c2253c22xxxxxxxx53a
	TbRoleId *string `json:"tbRoleId,omitempty" xml:"tbRoleId,omitempty"`
}

func (s CreateTestCaseResponseBodyTestcaseAssignedTo) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponseBodyTestcaseAssignedTo) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponseBodyTestcaseAssignedTo) SetAssignIdentifier(v string) *CreateTestCaseResponseBodyTestcaseAssignedTo {
	s.AssignIdentifier = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseAssignedTo) SetName(v string) *CreateTestCaseResponseBodyTestcaseAssignedTo {
	s.Name = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseAssignedTo) SetTbRoleId(v string) *CreateTestCaseResponseBodyTestcaseAssignedTo {
	s.TbRoleId = &v
	return s
}

type CreateTestCaseResponseBodyTestcaseCreator struct {
	// example:
	//
	// 134xxx343xxxxx
	CreateIdentifier *string `json:"createIdentifier,omitempty" xml:"createIdentifier,omitempty"`
	Name             *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreateTestCaseResponseBodyTestcaseCreator) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponseBodyTestcaseCreator) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponseBodyTestcaseCreator) SetCreateIdentifier(v string) *CreateTestCaseResponseBodyTestcaseCreator {
	s.CreateIdentifier = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseCreator) SetName(v string) *CreateTestCaseResponseBodyTestcaseCreator {
	s.Name = &v
	return s
}

type CreateTestCaseResponseBodyTestcaseDetailInfo struct {
	ExpectedResult *CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult `json:"expectedResult,omitempty" xml:"expectedResult,omitempty" type:"Struct"`
	Precondition   *CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition   `json:"precondition,omitempty" xml:"precondition,omitempty" type:"Struct"`
	StepContent    *CreateTestCaseResponseBodyTestcaseDetailInfoStepContent    `json:"stepContent,omitempty" xml:"stepContent,omitempty" type:"Struct"`
	// example:
	//
	// TEXT/TABLE
	StepType *string `json:"stepType,omitempty" xml:"stepType,omitempty"`
}

func (s CreateTestCaseResponseBodyTestcaseDetailInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponseBodyTestcaseDetailInfo) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfo) SetExpectedResult(v *CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) *CreateTestCaseResponseBodyTestcaseDetailInfo {
	s.ExpectedResult = v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfo) SetPrecondition(v *CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition) *CreateTestCaseResponseBodyTestcaseDetailInfo {
	s.Precondition = v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfo) SetStepContent(v *CreateTestCaseResponseBodyTestcaseDetailInfoStepContent) *CreateTestCaseResponseBodyTestcaseDetailInfo {
	s.StepContent = v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfo) SetStepType(v string) *CreateTestCaseResponseBodyTestcaseDetailInfo {
	s.StepType = &v
	return s
}

type CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult struct {
	ExpectContent *string `json:"expectContent,omitempty" xml:"expectContent,omitempty"`
	// example:
	//
	// RICHTEXT
	ExpectContentType *string `json:"expectContentType,omitempty" xml:"expectContentType,omitempty"`
	// example:
	//
	// 59253164xxxxxxf2e98dbc7e27
	ExpectIdentifier *string `json:"expectIdentifier,omitempty" xml:"expectIdentifier,omitempty"`
}

func (s CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) SetExpectContent(v string) *CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult {
	s.ExpectContent = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) SetExpectContentType(v string) *CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult {
	s.ExpectContentType = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) SetExpectIdentifier(v string) *CreateTestCaseResponseBodyTestcaseDetailInfoExpectedResult {
	s.ExpectIdentifier = &v
	return s
}

type CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition struct {
	PreContent *string `json:"preContent,omitempty" xml:"preContent,omitempty"`
	// example:
	//
	// RICHTEXT
	PreContentType *string `json:"preContentType,omitempty" xml:"preContentType,omitempty"`
	// example:
	//
	// 59253164xxxxxxf2e98dbc7e27
	PreIdentifier *string `json:"preIdentifier,omitempty" xml:"preIdentifier,omitempty"`
}

func (s CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition) SetPreContent(v string) *CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition {
	s.PreContent = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition) SetPreContentType(v string) *CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition {
	s.PreContentType = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition) SetPreIdentifier(v string) *CreateTestCaseResponseBodyTestcaseDetailInfoPrecondition {
	s.PreIdentifier = &v
	return s
}

type CreateTestCaseResponseBodyTestcaseDetailInfoStepContent struct {
	StepContent *string `json:"stepContent,omitempty" xml:"stepContent,omitempty"`
	// example:
	//
	// RICHTEXT
	StepContentType *string `json:"stepContentType,omitempty" xml:"stepContentType,omitempty"`
	// example:
	//
	// 59253164xxxxxxf2e98dbc7e27
	StepIdentifier *string `json:"stepIdentifier,omitempty" xml:"stepIdentifier,omitempty"`
}

func (s CreateTestCaseResponseBodyTestcaseDetailInfoStepContent) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponseBodyTestcaseDetailInfoStepContent) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfoStepContent) SetStepContent(v string) *CreateTestCaseResponseBodyTestcaseDetailInfoStepContent {
	s.StepContent = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfoStepContent) SetStepContentType(v string) *CreateTestCaseResponseBodyTestcaseDetailInfoStepContent {
	s.StepContentType = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDetailInfoStepContent) SetStepIdentifier(v string) *CreateTestCaseResponseBodyTestcaseDetailInfoStepContent {
	s.StepIdentifier = &v
	return s
}

type CreateTestCaseResponseBodyTestcaseDirectory struct {
	// example:
	//
	// 0bc1150dcxxxxxxxx04c
	ChildIdentifier *string `json:"childIdentifier,omitempty" xml:"childIdentifier,omitempty"`
	// example:
	//
	// 0bc1150dcxxxxxxxx04c
	DirectoryIdentifier *string   `json:"directoryIdentifier,omitempty" xml:"directoryIdentifier,omitempty"`
	Name                *string   `json:"name,omitempty" xml:"name,omitempty"`
	PathName            []*string `json:"pathName,omitempty" xml:"pathName,omitempty" type:"Repeated"`
}

func (s CreateTestCaseResponseBodyTestcaseDirectory) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponseBodyTestcaseDirectory) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponseBodyTestcaseDirectory) SetChildIdentifier(v string) *CreateTestCaseResponseBodyTestcaseDirectory {
	s.ChildIdentifier = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDirectory) SetDirectoryIdentifier(v string) *CreateTestCaseResponseBodyTestcaseDirectory {
	s.DirectoryIdentifier = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDirectory) SetName(v string) *CreateTestCaseResponseBodyTestcaseDirectory {
	s.Name = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseDirectory) SetPathName(v []*string) *CreateTestCaseResponseBodyTestcaseDirectory {
	s.PathName = v
	return s
}

type CreateTestCaseResponseBodyTestcaseModifier struct {
	// example:
	//
	// 134xxx343xxxxx
	ModifyIdentifier *string `json:"modifyIdentifier,omitempty" xml:"modifyIdentifier,omitempty"`
	Name             *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s CreateTestCaseResponseBodyTestcaseModifier) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponseBodyTestcaseModifier) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponseBodyTestcaseModifier) SetModifyIdentifier(v string) *CreateTestCaseResponseBodyTestcaseModifier {
	s.ModifyIdentifier = &v
	return s
}

func (s *CreateTestCaseResponseBodyTestcaseModifier) SetName(v string) *CreateTestCaseResponseBodyTestcaseModifier {
	s.Name = &v
	return s
}

type CreateTestCaseResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTestCaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTestCaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTestCaseResponse) GoString() string {
	return s.String()
}

func (s *CreateTestCaseResponse) SetHeaders(v map[string]*string) *CreateTestCaseResponse {
	s.Headers = v
	return s
}

func (s *CreateTestCaseResponse) SetStatusCode(v int32) *CreateTestCaseResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTestCaseResponse) SetBody(v *CreateTestCaseResponseBody) *CreateTestCaseResponse {
	s.Body = v
	return s
}

type CreateUserKeyRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// 2022-03-12 12:00:00
	ExpireTime *string `json:"expireTime,omitempty" xml:"expireTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ALL
	KeyScope *string `json:"keyScope,omitempty" xml:"keyScope,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	PublicKey *string `json:"publicKey,omitempty" xml:"publicKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// SSH Title
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s CreateUserKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUserKeyRequest) GoString() string {
	return s.String()
}

func (s *CreateUserKeyRequest) SetAccessToken(v string) *CreateUserKeyRequest {
	s.AccessToken = &v
	return s
}

func (s *CreateUserKeyRequest) SetExpireTime(v string) *CreateUserKeyRequest {
	s.ExpireTime = &v
	return s
}

func (s *CreateUserKeyRequest) SetKeyScope(v string) *CreateUserKeyRequest {
	s.KeyScope = &v
	return s
}

func (s *CreateUserKeyRequest) SetPublicKey(v string) *CreateUserKeyRequest {
	s.PublicKey = &v
	return s
}

func (s *CreateUserKeyRequest) SetTitle(v string) *CreateUserKeyRequest {
	s.Title = &v
	return s
}

func (s *CreateUserKeyRequest) SetOrganizationId(v string) *CreateUserKeyRequest {
	s.OrganizationId = &v
	return s
}

type CreateUserKeyResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                          `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *CreateUserKeyResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateUserKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUserKeyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUserKeyResponseBody) SetErrorCode(v string) *CreateUserKeyResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateUserKeyResponseBody) SetErrorMessage(v string) *CreateUserKeyResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateUserKeyResponseBody) SetRequestId(v string) *CreateUserKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUserKeyResponseBody) SetResult(v *CreateUserKeyResponseBodyResult) *CreateUserKeyResponseBody {
	s.Result = v
	return s
}

func (s *CreateUserKeyResponseBody) SetSuccess(v bool) *CreateUserKeyResponseBody {
	s.Success = &v
	return s
}

type CreateUserKeyResponseBodyResult struct {
	// example:
	//
	// 2022-03-12 12:00:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 2022-03-12 12:00:00
	ExpireTime *string `json:"expireTime,omitempty" xml:"expireTime,omitempty"`
	// example:
	//
	// xxx
	FingerPrint *string `json:"fingerPrint,omitempty" xml:"fingerPrint,omitempty"`
	// example:
	//
	// 11072
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ALL
	KeyScope *string `json:"keyScope,omitempty" xml:"keyScope,omitempty"`
	// example:
	//
	// 2022-03-12 12:00:00
	LastUsedTime *string `json:"lastUsedTime,omitempty" xml:"lastUsedTime,omitempty"`
	// example:
	//
	// xxx
	PublicKey *string `json:"publicKey,omitempty" xml:"publicKey,omitempty"`
	// example:
	//
	// My Title
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s CreateUserKeyResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateUserKeyResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateUserKeyResponseBodyResult) SetCreatedAt(v string) *CreateUserKeyResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *CreateUserKeyResponseBodyResult) SetExpireTime(v string) *CreateUserKeyResponseBodyResult {
	s.ExpireTime = &v
	return s
}

func (s *CreateUserKeyResponseBodyResult) SetFingerPrint(v string) *CreateUserKeyResponseBodyResult {
	s.FingerPrint = &v
	return s
}

func (s *CreateUserKeyResponseBodyResult) SetId(v int64) *CreateUserKeyResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateUserKeyResponseBodyResult) SetKeyScope(v string) *CreateUserKeyResponseBodyResult {
	s.KeyScope = &v
	return s
}

func (s *CreateUserKeyResponseBodyResult) SetLastUsedTime(v string) *CreateUserKeyResponseBodyResult {
	s.LastUsedTime = &v
	return s
}

func (s *CreateUserKeyResponseBodyResult) SetPublicKey(v string) *CreateUserKeyResponseBodyResult {
	s.PublicKey = &v
	return s
}

func (s *CreateUserKeyResponseBodyResult) SetTitle(v string) *CreateUserKeyResponseBodyResult {
	s.Title = &v
	return s
}

type CreateUserKeyResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateUserKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateUserKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUserKeyResponse) GoString() string {
	return s.String()
}

func (s *CreateUserKeyResponse) SetHeaders(v map[string]*string) *CreateUserKeyResponse {
	s.Headers = v
	return s
}

func (s *CreateUserKeyResponse) SetStatusCode(v int32) *CreateUserKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUserKeyResponse) SetBody(v *CreateUserKeyResponseBody) *CreateUserKeyResponse {
	s.Body = v
	return s
}

type CreateVariableGroupRequest struct {
	// example:
	//
	// 变量组
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 变量组
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [{"isEncrypted":true,"name":"name1","value":"vaue1"}]
	Variables *string `json:"variables,omitempty" xml:"variables,omitempty"`
}

func (s CreateVariableGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVariableGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateVariableGroupRequest) SetDescription(v string) *CreateVariableGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateVariableGroupRequest) SetName(v string) *CreateVariableGroupRequest {
	s.Name = &v
	return s
}

func (s *CreateVariableGroupRequest) SetVariables(v string) *CreateVariableGroupRequest {
	s.Variables = &v
	return s
}

type CreateVariableGroupResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 1234
	VariableGroupId *int64 `json:"variableGroupId,omitempty" xml:"variableGroupId,omitempty"`
}

func (s CreateVariableGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVariableGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVariableGroupResponseBody) SetErrorCode(v string) *CreateVariableGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateVariableGroupResponseBody) SetErrorMessage(v string) *CreateVariableGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateVariableGroupResponseBody) SetRequestId(v string) *CreateVariableGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVariableGroupResponseBody) SetSuccess(v bool) *CreateVariableGroupResponseBody {
	s.Success = &v
	return s
}

func (s *CreateVariableGroupResponseBody) SetVariableGroupId(v int64) *CreateVariableGroupResponseBody {
	s.VariableGroupId = &v
	return s
}

type CreateVariableGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateVariableGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateVariableGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVariableGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateVariableGroupResponse) SetHeaders(v map[string]*string) *CreateVariableGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateVariableGroupResponse) SetStatusCode(v int32) *CreateVariableGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVariableGroupResponse) SetBody(v *CreateVariableGroupResponseBody) *CreateVariableGroupResponse {
	s.Body = v
	return s
}

type CreateWorkitemRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 19xxxx31947xxxx
	AssignedTo *string `json:"assignedTo,omitempty" xml:"assignedTo,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Req
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// example:
	//
	// 测试内容
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// RICHTEXT
	DescriptionFormat *string                                `json:"descriptionFormat,omitempty" xml:"descriptionFormat,omitempty"`
	FieldValueList    []*CreateWorkitemRequestFieldValueList `json:"fieldValueList,omitempty" xml:"fieldValueList,omitempty" type:"Repeated"`
	// example:
	//
	// 3a0c9cdd24ae1e1995b8...
	Parent      *string   `json:"parent,omitempty" xml:"parent,omitempty"`
	Participant []*string `json:"participant,omitempty" xml:"participant,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// asd345xxxxx9q9845xxxxx34
	Space *string `json:"space,omitempty" xml:"space,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// asd345xxxxx9q9845xxxxx34
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Project
	SpaceType *string   `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	Sprint    []*string `json:"sprint,omitempty" xml:"sprint,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 测试工作项
	Subject  *string   `json:"subject,omitempty" xml:"subject,omitempty"`
	Tracker  []*string `json:"tracker,omitempty" xml:"tracker,omitempty" type:"Repeated"`
	Verifier []*string `json:"verifier,omitempty" xml:"verifier,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 9uyxxxxxre573f561dxxn40
	WorkitemType *string `json:"workitemType,omitempty" xml:"workitemType,omitempty"`
}

func (s CreateWorkitemRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkitemRequest) SetAssignedTo(v string) *CreateWorkitemRequest {
	s.AssignedTo = &v
	return s
}

func (s *CreateWorkitemRequest) SetCategory(v string) *CreateWorkitemRequest {
	s.Category = &v
	return s
}

func (s *CreateWorkitemRequest) SetDescription(v string) *CreateWorkitemRequest {
	s.Description = &v
	return s
}

func (s *CreateWorkitemRequest) SetDescriptionFormat(v string) *CreateWorkitemRequest {
	s.DescriptionFormat = &v
	return s
}

func (s *CreateWorkitemRequest) SetFieldValueList(v []*CreateWorkitemRequestFieldValueList) *CreateWorkitemRequest {
	s.FieldValueList = v
	return s
}

func (s *CreateWorkitemRequest) SetParent(v string) *CreateWorkitemRequest {
	s.Parent = &v
	return s
}

func (s *CreateWorkitemRequest) SetParticipant(v []*string) *CreateWorkitemRequest {
	s.Participant = v
	return s
}

func (s *CreateWorkitemRequest) SetSpace(v string) *CreateWorkitemRequest {
	s.Space = &v
	return s
}

func (s *CreateWorkitemRequest) SetSpaceIdentifier(v string) *CreateWorkitemRequest {
	s.SpaceIdentifier = &v
	return s
}

func (s *CreateWorkitemRequest) SetSpaceType(v string) *CreateWorkitemRequest {
	s.SpaceType = &v
	return s
}

func (s *CreateWorkitemRequest) SetSprint(v []*string) *CreateWorkitemRequest {
	s.Sprint = v
	return s
}

func (s *CreateWorkitemRequest) SetSubject(v string) *CreateWorkitemRequest {
	s.Subject = &v
	return s
}

func (s *CreateWorkitemRequest) SetTracker(v []*string) *CreateWorkitemRequest {
	s.Tracker = v
	return s
}

func (s *CreateWorkitemRequest) SetVerifier(v []*string) *CreateWorkitemRequest {
	s.Verifier = v
	return s
}

func (s *CreateWorkitemRequest) SetWorkitemType(v string) *CreateWorkitemRequest {
	s.WorkitemType = &v
	return s
}

type CreateWorkitemRequestFieldValueList struct {
	// example:
	//
	// 6aexxxxxa1d98c09c60xxxx16
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	// example:
	//
	// 77c7fb03c4186c8691d6...
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// example:
	//
	// null
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s CreateWorkitemRequestFieldValueList) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemRequestFieldValueList) GoString() string {
	return s.String()
}

func (s *CreateWorkitemRequestFieldValueList) SetFieldIdentifier(v string) *CreateWorkitemRequestFieldValueList {
	s.FieldIdentifier = &v
	return s
}

func (s *CreateWorkitemRequestFieldValueList) SetValue(v string) *CreateWorkitemRequestFieldValueList {
	s.Value = &v
	return s
}

func (s *CreateWorkitemRequestFieldValueList) SetWorkitemIdentifier(v string) *CreateWorkitemRequestFieldValueList {
	s.WorkitemIdentifier = &v
	return s
}

type CreateWorkitemResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success  *bool                               `json:"success,omitempty" xml:"success,omitempty"`
	Workitem *CreateWorkitemResponseBodyWorkitem `json:"workitem,omitempty" xml:"workitem,omitempty" type:"Struct"`
}

func (s CreateWorkitemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWorkitemResponseBody) SetErrorCode(v string) *CreateWorkitemResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateWorkitemResponseBody) SetErrorMsg(v string) *CreateWorkitemResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateWorkitemResponseBody) SetRequestId(v string) *CreateWorkitemResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWorkitemResponseBody) SetSuccess(v bool) *CreateWorkitemResponseBody {
	s.Success = &v
	return s
}

func (s *CreateWorkitemResponseBody) SetWorkitem(v *CreateWorkitemResponseBodyWorkitem) *CreateWorkitemResponseBody {
	s.Workitem = v
	return s
}

type CreateWorkitemResponseBodyWorkitem struct {
	// example:
	//
	// 19xx7043xxxxxxx914
	AssignedTo *string `json:"assignedTo,omitempty" xml:"assignedTo,omitempty"`
	// example:
	//
	// Req
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// html格式
	Document       *string `json:"document,omitempty" xml:"document,omitempty"`
	DocumentFormat *string `json:"documentFormat,omitempty" xml:"documentFormat,omitempty"`
	// example:
	//
	// 1640850318000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1640850318000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// NORMAL
	LogicalStatus *string `json:"logicalStatus,omitempty" xml:"logicalStatus,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx24
	ParentIdentifier *string `json:"parentIdentifier,omitempty" xml:"parentIdentifier,omitempty"`
	// example:
	//
	// ABCD-1
	SerialNumber *string `json:"serialNumber,omitempty" xml:"serialNumber,omitempty"`
	// example:
	//
	// e8b26xxxxx6e76aa20xxxxx23
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// 需求项目
	SpaceName *string `json:"spaceName,omitempty" xml:"spaceName,omitempty"`
	// example:
	//
	// Project
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	// example:
	//
	// 75528f17703e92e5a568......
	SprintIdentifier *string `json:"sprintIdentifier,omitempty" xml:"sprintIdentifier,omitempty"`
	// example:
	//
	// 待处理
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 28
	StatusIdentifier *string `json:"statusIdentifier,omitempty" xml:"statusIdentifier,omitempty"`
	// example:
	//
	// 100005
	StatusStageIdentifier *string `json:"statusStageIdentifier,omitempty" xml:"statusStageIdentifier,omitempty"`
	// example:
	//
	// 测试工作项
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// example:
	//
	// 1640850328000
	UpdateStatusAt *int64 `json:"updateStatusAt,omitempty" xml:"updateStatusAt,omitempty"`
	// example:
	//
	// 9uxxxxxxre573f5xxxxxx0
	WorkitemTypeIdentifier *string `json:"workitemTypeIdentifier,omitempty" xml:"workitemTypeIdentifier,omitempty"`
}

func (s CreateWorkitemResponseBodyWorkitem) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemResponseBodyWorkitem) GoString() string {
	return s.String()
}

func (s *CreateWorkitemResponseBodyWorkitem) SetAssignedTo(v string) *CreateWorkitemResponseBodyWorkitem {
	s.AssignedTo = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetCategoryIdentifier(v string) *CreateWorkitemResponseBodyWorkitem {
	s.CategoryIdentifier = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetCreator(v string) *CreateWorkitemResponseBodyWorkitem {
	s.Creator = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetDocument(v string) *CreateWorkitemResponseBodyWorkitem {
	s.Document = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetDocumentFormat(v string) *CreateWorkitemResponseBodyWorkitem {
	s.DocumentFormat = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetGmtCreate(v int64) *CreateWorkitemResponseBodyWorkitem {
	s.GmtCreate = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetGmtModified(v int64) *CreateWorkitemResponseBodyWorkitem {
	s.GmtModified = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetIdentifier(v string) *CreateWorkitemResponseBodyWorkitem {
	s.Identifier = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetLogicalStatus(v string) *CreateWorkitemResponseBodyWorkitem {
	s.LogicalStatus = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetModifier(v string) *CreateWorkitemResponseBodyWorkitem {
	s.Modifier = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetParentIdentifier(v string) *CreateWorkitemResponseBodyWorkitem {
	s.ParentIdentifier = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetSerialNumber(v string) *CreateWorkitemResponseBodyWorkitem {
	s.SerialNumber = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetSpaceIdentifier(v string) *CreateWorkitemResponseBodyWorkitem {
	s.SpaceIdentifier = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetSpaceName(v string) *CreateWorkitemResponseBodyWorkitem {
	s.SpaceName = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetSpaceType(v string) *CreateWorkitemResponseBodyWorkitem {
	s.SpaceType = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetSprintIdentifier(v string) *CreateWorkitemResponseBodyWorkitem {
	s.SprintIdentifier = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetStatus(v string) *CreateWorkitemResponseBodyWorkitem {
	s.Status = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetStatusIdentifier(v string) *CreateWorkitemResponseBodyWorkitem {
	s.StatusIdentifier = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetStatusStageIdentifier(v string) *CreateWorkitemResponseBodyWorkitem {
	s.StatusStageIdentifier = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetSubject(v string) *CreateWorkitemResponseBodyWorkitem {
	s.Subject = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetUpdateStatusAt(v int64) *CreateWorkitemResponseBodyWorkitem {
	s.UpdateStatusAt = &v
	return s
}

func (s *CreateWorkitemResponseBodyWorkitem) SetWorkitemTypeIdentifier(v string) *CreateWorkitemResponseBodyWorkitem {
	s.WorkitemTypeIdentifier = &v
	return s
}

type CreateWorkitemResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWorkitemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWorkitemResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkitemResponse) SetHeaders(v map[string]*string) *CreateWorkitemResponse {
	s.Headers = v
	return s
}

func (s *CreateWorkitemResponse) SetStatusCode(v int32) *CreateWorkitemResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWorkitemResponse) SetBody(v *CreateWorkitemResponseBody) *CreateWorkitemResponse {
	s.Body = v
	return s
}

type CreateWorkitemCommentRequest struct {
	// This parameter is required.
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// RICHTEXT/MARKDOWN
	FormatType *string `json:"formatType,omitempty" xml:"formatType,omitempty"`
	// example:
	//
	// 26842
	ParentId *string `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1e9903d8b3f12xxxxxf9286ef5
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s CreateWorkitemCommentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemCommentRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkitemCommentRequest) SetContent(v string) *CreateWorkitemCommentRequest {
	s.Content = &v
	return s
}

func (s *CreateWorkitemCommentRequest) SetFormatType(v string) *CreateWorkitemCommentRequest {
	s.FormatType = &v
	return s
}

func (s *CreateWorkitemCommentRequest) SetParentId(v string) *CreateWorkitemCommentRequest {
	s.ParentId = &v
	return s
}

func (s *CreateWorkitemCommentRequest) SetWorkitemIdentifier(v string) *CreateWorkitemCommentRequest {
	s.WorkitemIdentifier = &v
	return s
}

type CreateWorkitemCommentResponseBody struct {
	Comment *CreateWorkitemCommentResponseBodyComment `json:"Comment,omitempty" xml:"Comment,omitempty" type:"Struct"`
	// example:
	//
	// success
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *string `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateWorkitemCommentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemCommentResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWorkitemCommentResponseBody) SetComment(v *CreateWorkitemCommentResponseBodyComment) *CreateWorkitemCommentResponseBody {
	s.Comment = v
	return s
}

func (s *CreateWorkitemCommentResponseBody) SetErrorCode(v string) *CreateWorkitemCommentResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateWorkitemCommentResponseBody) SetErrorMsg(v string) *CreateWorkitemCommentResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateWorkitemCommentResponseBody) SetRequestId(v string) *CreateWorkitemCommentResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWorkitemCommentResponseBody) SetSuccess(v string) *CreateWorkitemCommentResponseBody {
	s.Success = &v
	return s
}

type CreateWorkitemCommentResponseBodyComment struct {
	// example:
	//
	// 26842
	Id      *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// 1667202662000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// RICHTEXT/MARKDOWN
	FormatType *string `json:"formatType,omitempty" xml:"formatType,omitempty"`
	// example:
	//
	// true/false
	IsTop *bool `json:"isTop,omitempty" xml:"isTop,omitempty"`
	// example:
	//
	// 1637995553000
	ModifiedTime *int64 `json:"modifiedTime,omitempty" xml:"modifiedTime,omitempty"`
	// example:
	//
	// 26842
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// 79d523806bdxxxxx95612a5154
	TargetIdentifier *string `json:"targetIdentifier,omitempty" xml:"targetIdentifier,omitempty"`
	// example:
	//
	// workitem
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
	// example:
	//
	// 1667202662000
	TopTime *int64                                        `json:"topTime,omitempty" xml:"topTime,omitempty"`
	User    *CreateWorkitemCommentResponseBodyCommentUser `json:"user,omitempty" xml:"user,omitempty" type:"Struct"`
}

func (s CreateWorkitemCommentResponseBodyComment) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemCommentResponseBodyComment) GoString() string {
	return s.String()
}

func (s *CreateWorkitemCommentResponseBodyComment) SetId(v int64) *CreateWorkitemCommentResponseBodyComment {
	s.Id = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyComment) SetContent(v string) *CreateWorkitemCommentResponseBodyComment {
	s.Content = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyComment) SetCreateTime(v int64) *CreateWorkitemCommentResponseBodyComment {
	s.CreateTime = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyComment) SetFormatType(v string) *CreateWorkitemCommentResponseBodyComment {
	s.FormatType = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyComment) SetIsTop(v bool) *CreateWorkitemCommentResponseBodyComment {
	s.IsTop = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyComment) SetModifiedTime(v int64) *CreateWorkitemCommentResponseBodyComment {
	s.ModifiedTime = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyComment) SetParentId(v int64) *CreateWorkitemCommentResponseBodyComment {
	s.ParentId = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyComment) SetTargetIdentifier(v string) *CreateWorkitemCommentResponseBodyComment {
	s.TargetIdentifier = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyComment) SetTargetType(v string) *CreateWorkitemCommentResponseBodyComment {
	s.TargetType = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyComment) SetTopTime(v int64) *CreateWorkitemCommentResponseBodyComment {
	s.TopTime = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyComment) SetUser(v *CreateWorkitemCommentResponseBodyCommentUser) *CreateWorkitemCommentResponseBodyComment {
	s.User = v
	return s
}

type CreateWorkitemCommentResponseBodyCommentUser struct {
	// example:
	//
	// 13164xxxxx41068
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// example:
	//
	// https://xxxxx/thumbnail/112m7150e256dbba0d6456bafbb65c81f90d/w/200/h/200
	Avatar      *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	// example:
	//
	// 1e9903d8bxxxxxxe9df9286ef5
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	NickName   *string `json:"nickName,omitempty" xml:"nickName,omitempty"`
	RealName   *string `json:"realName,omitempty" xml:"realName,omitempty"`
	// example:
	//
	// workitem
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
}

func (s CreateWorkitemCommentResponseBodyCommentUser) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemCommentResponseBodyCommentUser) GoString() string {
	return s.String()
}

func (s *CreateWorkitemCommentResponseBodyCommentUser) SetAccount(v string) *CreateWorkitemCommentResponseBodyCommentUser {
	s.Account = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyCommentUser) SetAvatar(v string) *CreateWorkitemCommentResponseBodyCommentUser {
	s.Avatar = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyCommentUser) SetDisplayName(v string) *CreateWorkitemCommentResponseBodyCommentUser {
	s.DisplayName = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyCommentUser) SetIdentifier(v string) *CreateWorkitemCommentResponseBodyCommentUser {
	s.Identifier = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyCommentUser) SetNickName(v string) *CreateWorkitemCommentResponseBodyCommentUser {
	s.NickName = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyCommentUser) SetRealName(v string) *CreateWorkitemCommentResponseBodyCommentUser {
	s.RealName = &v
	return s
}

func (s *CreateWorkitemCommentResponseBodyCommentUser) SetTargetType(v string) *CreateWorkitemCommentResponseBodyCommentUser {
	s.TargetType = &v
	return s
}

type CreateWorkitemCommentResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWorkitemCommentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWorkitemCommentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemCommentResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkitemCommentResponse) SetHeaders(v map[string]*string) *CreateWorkitemCommentResponse {
	s.Headers = v
	return s
}

func (s *CreateWorkitemCommentResponse) SetStatusCode(v int32) *CreateWorkitemCommentResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWorkitemCommentResponse) SetBody(v *CreateWorkitemCommentResponseBody) *CreateWorkitemCommentResponse {
	s.Body = v
	return s
}

type CreateWorkitemEstimateRequest struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1316458xxxxx41068
	RecordUserIdentifier *string `json:"recordUserIdentifier,omitempty" xml:"recordUserIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 21
	SpentTime *string `json:"spentTime,omitempty" xml:"spentTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 9144ef6b72d8exxxxx9e61a4d0
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1e9903d8b3f1xxxxxf9286ef5
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s CreateWorkitemEstimateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemEstimateRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkitemEstimateRequest) SetDescription(v string) *CreateWorkitemEstimateRequest {
	s.Description = &v
	return s
}

func (s *CreateWorkitemEstimateRequest) SetRecordUserIdentifier(v string) *CreateWorkitemEstimateRequest {
	s.RecordUserIdentifier = &v
	return s
}

func (s *CreateWorkitemEstimateRequest) SetSpentTime(v string) *CreateWorkitemEstimateRequest {
	s.SpentTime = &v
	return s
}

func (s *CreateWorkitemEstimateRequest) SetType(v string) *CreateWorkitemEstimateRequest {
	s.Type = &v
	return s
}

func (s *CreateWorkitemEstimateRequest) SetWorkitemIdentifier(v string) *CreateWorkitemEstimateRequest {
	s.WorkitemIdentifier = &v
	return s
}

type CreateWorkitemEstimateResponseBody struct {
	WorkitemTimeEstimate *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate `json:"WorkitemTimeEstimate,omitempty" xml:"WorkitemTimeEstimate,omitempty" type:"Struct"`
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *bool   `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateWorkitemEstimateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemEstimateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWorkitemEstimateResponseBody) SetWorkitemTimeEstimate(v *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate) *CreateWorkitemEstimateResponseBody {
	s.WorkitemTimeEstimate = v
	return s
}

func (s *CreateWorkitemEstimateResponseBody) SetErrorCode(v string) *CreateWorkitemEstimateResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBody) SetErrorMsg(v string) *CreateWorkitemEstimateResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBody) SetRequestId(v string) *CreateWorkitemEstimateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBody) SetSuccess(v bool) *CreateWorkitemEstimateResponseBody {
	s.Success = &v
	return s
}

type CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// deafe5f33xxxxx6a259d8dafd
	Identifier *string                                                           `json:"identifier,omitempty" xml:"identifier,omitempty"`
	RecordUser *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser `json:"recordUser,omitempty" xml:"recordUser,omitempty" type:"Struct"`
	// example:
	//
	// 11
	SpentTime *int64 `json:"spentTime,omitempty" xml:"spentTime,omitempty"`
	// example:
	//
	// 9144ef6b72d8exxxxx9e61a4d0
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 1e9903d8b3f1xxxxxf9286ef5
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate) GoString() string {
	return s.String()
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetDescription(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.Description = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetIdentifier(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.Identifier = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetRecordUser(v *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.RecordUser = v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetSpentTime(v int64) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.SpentTime = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetType(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.Type = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetWorkitemIdentifier(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.WorkitemIdentifier = &v
	return s
}

type CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser struct {
	// example:
	//
	// 1316458xxxxx41068
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112m7150e256dbba0d6456bafbb65c81f90d/w/200/h/200
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// fdsad12xxx11
	DingTalkId  *string `json:"dingTalkId,omitempty" xml:"dingTalkId,omitempty"`
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	// example:
	//
	// wangwu
	DisplayNickName *string `json:"displayNickName,omitempty" xml:"displayNickName,omitempty"`
	// example:
	//
	// wangwu
	DisplayRealName *string `json:"displayRealName,omitempty" xml:"displayRealName,omitempty"`
	// example:
	//
	// xxxxxxcc@xxx.com
	Email  *string `json:"email,omitempty" xml:"email,omitempty"`
	Gender *string `json:"gender,omitempty" xml:"gender,omitempty"`
	// example:
	//
	// deafe5f33xxxxx6a259d8dafd
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// true/false
	IsDisabled *bool   `json:"isDisabled,omitempty" xml:"isDisabled,omitempty"`
	Mobile     *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// example:
	//
	// wangwu
	NameEn   *string `json:"nameEn,omitempty" xml:"nameEn,omitempty"`
	NickName *string `json:"nickName,omitempty" xml:"nickName,omitempty"`
	// example:
	//
	// wangwu
	NickNamePinyin *string `json:"nickNamePinyin,omitempty" xml:"nickNamePinyin,omitempty"`
	RealName       *string `json:"realName,omitempty" xml:"realName,omitempty"`
	// example:
	//
	// wangwu
	RealNamePinyin *string `json:"realNamePinyin,omitempty" xml:"realNamePinyin,omitempty"`
	Stamp          *string `json:"stamp,omitempty" xml:"stamp,omitempty"`
	// example:
	//
	// 9144ef6b72d8exxxxx9e61a4d0
	TbRoleId *string `json:"tbRoleId,omitempty" xml:"tbRoleId,omitempty"`
}

func (s CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) GoString() string {
	return s.String()
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetAccount(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.Account = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetAvatar(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.Avatar = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetDingTalkId(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.DingTalkId = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetDisplayName(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.DisplayName = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetDisplayNickName(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.DisplayNickName = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetDisplayRealName(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.DisplayRealName = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetEmail(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.Email = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetGender(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.Gender = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetIdentifier(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.Identifier = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetIsDisabled(v bool) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.IsDisabled = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetMobile(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.Mobile = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetNameEn(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.NameEn = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetNickName(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.NickName = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetNickNamePinyin(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.NickNamePinyin = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetRealName(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.RealName = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetRealNamePinyin(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.RealNamePinyin = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetStamp(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.Stamp = &v
	return s
}

func (s *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetTbRoleId(v string) *CreateWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.TbRoleId = &v
	return s
}

type CreateWorkitemEstimateResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWorkitemEstimateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWorkitemEstimateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemEstimateResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkitemEstimateResponse) SetHeaders(v map[string]*string) *CreateWorkitemEstimateResponse {
	s.Headers = v
	return s
}

func (s *CreateWorkitemEstimateResponse) SetStatusCode(v int32) *CreateWorkitemEstimateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWorkitemEstimateResponse) SetBody(v *CreateWorkitemEstimateResponseBody) *CreateWorkitemEstimateResponse {
	s.Body = v
	return s
}

type CreateWorkitemRecordRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 12
	ActualTime  *string `json:"actualTime,omitempty" xml:"actualTime,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1646323200000
	GmtEnd *string `json:"gmtEnd,omitempty" xml:"gmtEnd,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1667205617061
	GmtStart *string `json:"gmtStart,omitempty" xml:"gmtStart,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1316458xxxxx41068
	RecordUserIdentifier *string `json:"recordUserIdentifier,omitempty" xml:"recordUserIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// deafe5f33xxxxx6a259d8dafd
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 9144ef6b72d8exxxxx9e61a4d0
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s CreateWorkitemRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemRecordRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkitemRecordRequest) SetActualTime(v string) *CreateWorkitemRecordRequest {
	s.ActualTime = &v
	return s
}

func (s *CreateWorkitemRecordRequest) SetDescription(v string) *CreateWorkitemRecordRequest {
	s.Description = &v
	return s
}

func (s *CreateWorkitemRecordRequest) SetGmtEnd(v string) *CreateWorkitemRecordRequest {
	s.GmtEnd = &v
	return s
}

func (s *CreateWorkitemRecordRequest) SetGmtStart(v string) *CreateWorkitemRecordRequest {
	s.GmtStart = &v
	return s
}

func (s *CreateWorkitemRecordRequest) SetRecordUserIdentifier(v string) *CreateWorkitemRecordRequest {
	s.RecordUserIdentifier = &v
	return s
}

func (s *CreateWorkitemRecordRequest) SetType(v string) *CreateWorkitemRecordRequest {
	s.Type = &v
	return s
}

func (s *CreateWorkitemRecordRequest) SetWorkitemIdentifier(v string) *CreateWorkitemRecordRequest {
	s.WorkitemIdentifier = &v
	return s
}

type CreateWorkitemRecordResponseBody struct {
	WorkitemTime *CreateWorkitemRecordResponseBodyWorkitemTime `json:"WorkitemTime,omitempty" xml:"WorkitemTime,omitempty" type:"Struct"`
	// example:
	//
	// success
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateWorkitemRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemRecordResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWorkitemRecordResponseBody) SetWorkitemTime(v *CreateWorkitemRecordResponseBodyWorkitemTime) *CreateWorkitemRecordResponseBody {
	s.WorkitemTime = v
	return s
}

func (s *CreateWorkitemRecordResponseBody) SetErrorCode(v string) *CreateWorkitemRecordResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateWorkitemRecordResponseBody) SetErrorMsg(v string) *CreateWorkitemRecordResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateWorkitemRecordResponseBody) SetRequestId(v string) *CreateWorkitemRecordResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWorkitemRecordResponseBody) SetSuccess(v bool) *CreateWorkitemRecordResponseBody {
	s.Success = &v
	return s
}

type CreateWorkitemRecordResponseBodyWorkitemTime struct {
	// example:
	//
	// 12
	ActualTime  *int64  `json:"actualTime,omitempty" xml:"actualTime,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1667205617089
	GmtEnd *int64 `json:"gmtEnd,omitempty" xml:"gmtEnd,omitempty"`
	// example:
	//
	// 1667205617061
	GmtStart *int64 `json:"gmtStart,omitempty" xml:"gmtStart,omitempty"`
	// example:
	//
	// deafe5f33xxxxx6a259d8dafd
	Identifier *string                                                 `json:"identifier,omitempty" xml:"identifier,omitempty"`
	RecordUser *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser `json:"recordUser,omitempty" xml:"recordUser,omitempty" type:"Struct"`
	// example:
	//
	// deafe5f33xxxxx6a259d8dafd
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 9144ef6b72d8exxxxx9e61a4d0
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s CreateWorkitemRecordResponseBodyWorkitemTime) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemRecordResponseBodyWorkitemTime) GoString() string {
	return s.String()
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTime) SetActualTime(v int64) *CreateWorkitemRecordResponseBodyWorkitemTime {
	s.ActualTime = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTime) SetDescription(v string) *CreateWorkitemRecordResponseBodyWorkitemTime {
	s.Description = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTime) SetGmtEnd(v int64) *CreateWorkitemRecordResponseBodyWorkitemTime {
	s.GmtEnd = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTime) SetGmtStart(v int64) *CreateWorkitemRecordResponseBodyWorkitemTime {
	s.GmtStart = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTime) SetIdentifier(v string) *CreateWorkitemRecordResponseBodyWorkitemTime {
	s.Identifier = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTime) SetRecordUser(v *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) *CreateWorkitemRecordResponseBodyWorkitemTime {
	s.RecordUser = v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTime) SetType(v string) *CreateWorkitemRecordResponseBodyWorkitemTime {
	s.Type = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTime) SetWorkitemIdentifier(v string) *CreateWorkitemRecordResponseBodyWorkitemTime {
	s.WorkitemIdentifier = &v
	return s
}

type CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser struct {
	// example:
	//
	// 1316458xxxxx41068
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112m7150e256dbba0d6456bafbb65c81f90d/w/200/h/200
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// xx12322
	DingTalkId      *string `json:"dingTalkId,omitempty" xml:"dingTalkId,omitempty"`
	DisplayName     *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	DisplayNickName *string `json:"displayNickName,omitempty" xml:"displayNickName,omitempty"`
	DisplayRealName *string `json:"displayRealName,omitempty" xml:"displayRealName,omitempty"`
	// example:
	//
	// xxx@xxx.com
	Email  *string `json:"email,omitempty" xml:"email,omitempty"`
	Gender *string `json:"gender,omitempty" xml:"gender,omitempty"`
	// example:
	//
	// deafe5f33xxxxx6a259d8dafd
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// true/false
	IsDisabled *bool   `json:"isDisabled,omitempty" xml:"isDisabled,omitempty"`
	Mobile     *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// example:
	//
	// wangwu
	NameEn   *string `json:"nameEn,omitempty" xml:"nameEn,omitempty"`
	NickName *string `json:"nickName,omitempty" xml:"nickName,omitempty"`
	// example:
	//
	// wangwu
	NickNamePinyin *string `json:"nickNamePinyin,omitempty" xml:"nickNamePinyin,omitempty"`
	RealName       *string `json:"realName,omitempty" xml:"realName,omitempty"`
	// example:
	//
	// wangwu
	RealNamePinyin *string `json:"realNamePinyin,omitempty" xml:"realNamePinyin,omitempty"`
	Stamp          *string `json:"stamp,omitempty" xml:"stamp,omitempty"`
	// example:
	//
	// 1e9903d8b3f1xxxxxf9286ef5
	TbRoleId *string `json:"tbRoleId,omitempty" xml:"tbRoleId,omitempty"`
}

func (s CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) GoString() string {
	return s.String()
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetAccount(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.Account = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetAvatar(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.Avatar = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetDingTalkId(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.DingTalkId = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetDisplayName(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.DisplayName = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetDisplayNickName(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.DisplayNickName = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetDisplayRealName(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.DisplayRealName = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetEmail(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.Email = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetGender(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.Gender = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetIdentifier(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.Identifier = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetIsDisabled(v bool) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.IsDisabled = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetMobile(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.Mobile = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetNameEn(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.NameEn = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetNickName(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.NickName = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetNickNamePinyin(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.NickNamePinyin = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetRealName(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.RealName = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetRealNamePinyin(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.RealNamePinyin = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetStamp(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.Stamp = &v
	return s
}

func (s *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser) SetTbRoleId(v string) *CreateWorkitemRecordResponseBodyWorkitemTimeRecordUser {
	s.TbRoleId = &v
	return s
}

type CreateWorkitemRecordResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWorkitemRecordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWorkitemRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemRecordResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkitemRecordResponse) SetHeaders(v map[string]*string) *CreateWorkitemRecordResponse {
	s.Headers = v
	return s
}

func (s *CreateWorkitemRecordResponse) SetStatusCode(v int32) *CreateWorkitemRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWorkitemRecordResponse) SetBody(v *CreateWorkitemRecordResponseBody) *CreateWorkitemRecordResponse {
	s.Body = v
	return s
}

type CreateWorkitemV2Request struct {
	// This parameter is required.
	//
	// example:
	//
	// 19xxxx31947xxxx
	AssignedTo *string `json:"assignedTo,omitempty" xml:"assignedTo,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Req
	Category       *string                                  `json:"category,omitempty" xml:"category,omitempty"`
	Description    *string                                  `json:"description,omitempty" xml:"description,omitempty"`
	FieldValueList []*CreateWorkitemV2RequestFieldValueList `json:"fieldValueList,omitempty" xml:"fieldValueList,omitempty" type:"Repeated"`
	// example:
	//
	// 11223331122
	ParentIdentifier *string   `json:"parentIdentifier,omitempty" xml:"parentIdentifier,omitempty"`
	Participants     []*string `json:"participants,omitempty" xml:"participants,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// asd345xxxxx9q9845xxxxx34
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// 455532323455
	SprintIdentifier *string `json:"sprintIdentifier,omitempty" xml:"sprintIdentifier,omitempty"`
	// This parameter is required.
	Subject  *string   `json:"subject,omitempty" xml:"subject,omitempty"`
	Tags     []*string `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
	Trackers []*string `json:"trackers,omitempty" xml:"trackers,omitempty" type:"Repeated"`
	// example:
	//
	// 1561159309......
	Verifier *string   `json:"verifier,omitempty" xml:"verifier,omitempty"`
	Versions []*string `json:"versions,omitempty" xml:"versions,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 9uy29901re573f561d69jn40
	WorkitemTypeIdentifier *string `json:"workitemTypeIdentifier,omitempty" xml:"workitemTypeIdentifier,omitempty"`
}

func (s CreateWorkitemV2Request) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemV2Request) GoString() string {
	return s.String()
}

func (s *CreateWorkitemV2Request) SetAssignedTo(v string) *CreateWorkitemV2Request {
	s.AssignedTo = &v
	return s
}

func (s *CreateWorkitemV2Request) SetCategory(v string) *CreateWorkitemV2Request {
	s.Category = &v
	return s
}

func (s *CreateWorkitemV2Request) SetDescription(v string) *CreateWorkitemV2Request {
	s.Description = &v
	return s
}

func (s *CreateWorkitemV2Request) SetFieldValueList(v []*CreateWorkitemV2RequestFieldValueList) *CreateWorkitemV2Request {
	s.FieldValueList = v
	return s
}

func (s *CreateWorkitemV2Request) SetParentIdentifier(v string) *CreateWorkitemV2Request {
	s.ParentIdentifier = &v
	return s
}

func (s *CreateWorkitemV2Request) SetParticipants(v []*string) *CreateWorkitemV2Request {
	s.Participants = v
	return s
}

func (s *CreateWorkitemV2Request) SetSpaceIdentifier(v string) *CreateWorkitemV2Request {
	s.SpaceIdentifier = &v
	return s
}

func (s *CreateWorkitemV2Request) SetSprintIdentifier(v string) *CreateWorkitemV2Request {
	s.SprintIdentifier = &v
	return s
}

func (s *CreateWorkitemV2Request) SetSubject(v string) *CreateWorkitemV2Request {
	s.Subject = &v
	return s
}

func (s *CreateWorkitemV2Request) SetTags(v []*string) *CreateWorkitemV2Request {
	s.Tags = v
	return s
}

func (s *CreateWorkitemV2Request) SetTrackers(v []*string) *CreateWorkitemV2Request {
	s.Trackers = v
	return s
}

func (s *CreateWorkitemV2Request) SetVerifier(v string) *CreateWorkitemV2Request {
	s.Verifier = &v
	return s
}

func (s *CreateWorkitemV2Request) SetVersions(v []*string) *CreateWorkitemV2Request {
	s.Versions = v
	return s
}

func (s *CreateWorkitemV2Request) SetWorkitemTypeIdentifier(v string) *CreateWorkitemV2Request {
	s.WorkitemTypeIdentifier = &v
	return s
}

type CreateWorkitemV2RequestFieldValueList struct {
	// example:
	//
	// 6aexxxxxa1d98c09c60xxxx16
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	// example:
	//
	// 10
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s CreateWorkitemV2RequestFieldValueList) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemV2RequestFieldValueList) GoString() string {
	return s.String()
}

func (s *CreateWorkitemV2RequestFieldValueList) SetFieldIdentifier(v string) *CreateWorkitemV2RequestFieldValueList {
	s.FieldIdentifier = &v
	return s
}

func (s *CreateWorkitemV2RequestFieldValueList) SetValue(v string) *CreateWorkitemV2RequestFieldValueList {
	s.Value = &v
	return s
}

type CreateWorkitemV2ResponseBody struct {
	// example:
	//
	// InvalidTagGroup.IdNotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// EAE03103-5497-58D1-9169-E524DDE8604C
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 11234455454355
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s CreateWorkitemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWorkitemV2ResponseBody) SetErrorCode(v string) *CreateWorkitemV2ResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateWorkitemV2ResponseBody) SetErrorMessage(v string) *CreateWorkitemV2ResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateWorkitemV2ResponseBody) SetRequestId(v string) *CreateWorkitemV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWorkitemV2ResponseBody) SetSuccess(v string) *CreateWorkitemV2ResponseBody {
	s.Success = &v
	return s
}

func (s *CreateWorkitemV2ResponseBody) SetWorkitemIdentifier(v string) *CreateWorkitemV2ResponseBody {
	s.WorkitemIdentifier = &v
	return s
}

type CreateWorkitemV2Response struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWorkitemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWorkitemV2Response) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkitemV2Response) GoString() string {
	return s.String()
}

func (s *CreateWorkitemV2Response) SetHeaders(v map[string]*string) *CreateWorkitemV2Response {
	s.Headers = v
	return s
}

func (s *CreateWorkitemV2Response) SetStatusCode(v int32) *CreateWorkitemV2Response {
	s.StatusCode = &v
	return s
}

func (s *CreateWorkitemV2Response) SetBody(v *CreateWorkitemV2ResponseBody) *CreateWorkitemV2Response {
	s.Body = v
	return s
}

type CreateWorkspaceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// git@codeup.aliyun.com:demo/Codeup-Demo.git
	CodeUrl *string `json:"codeUrl,omitempty" xml:"codeUrl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master
	CodeVersion *string `json:"codeVersion,omitempty" xml:"codeVersion,omitempty"`
	// example:
	//
	// src/Test.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// example:
	//
	// Demo
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// fc
	RequestFrom *string `json:"requestFrom,omitempty" xml:"requestFrom,omitempty"`
	// example:
	//
	// acs:fc:cn-shenzhen:XXX:services/demo.LATEST/functions/demo
	ResourceIdentifier *string `json:"resourceIdentifier,omitempty" xml:"resourceIdentifier,omitempty"`
	// example:
	//
	// false
	Reuse *bool `json:"reuse,omitempty" xml:"reuse,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// all-in-one
	WorkspaceTemplate *string `json:"workspaceTemplate,omitempty" xml:"workspaceTemplate,omitempty"`
}

func (s CreateWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceRequest) SetCodeUrl(v string) *CreateWorkspaceRequest {
	s.CodeUrl = &v
	return s
}

func (s *CreateWorkspaceRequest) SetCodeVersion(v string) *CreateWorkspaceRequest {
	s.CodeVersion = &v
	return s
}

func (s *CreateWorkspaceRequest) SetFilePath(v string) *CreateWorkspaceRequest {
	s.FilePath = &v
	return s
}

func (s *CreateWorkspaceRequest) SetName(v string) *CreateWorkspaceRequest {
	s.Name = &v
	return s
}

func (s *CreateWorkspaceRequest) SetRequestFrom(v string) *CreateWorkspaceRequest {
	s.RequestFrom = &v
	return s
}

func (s *CreateWorkspaceRequest) SetResourceIdentifier(v string) *CreateWorkspaceRequest {
	s.ResourceIdentifier = &v
	return s
}

func (s *CreateWorkspaceRequest) SetReuse(v bool) *CreateWorkspaceRequest {
	s.Reuse = &v
	return s
}

func (s *CreateWorkspaceRequest) SetWorkspaceTemplate(v string) *CreateWorkspaceRequest {
	s.WorkspaceTemplate = &v
	return s
}

type CreateWorkspaceResponseBody struct {
	// example:
	//
	// WorkspaceQuotaExceeded
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// The maximum number of workspace per user is exceeded.
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success   *bool                                 `json:"success,omitempty" xml:"success,omitempty"`
	Workspace *CreateWorkspaceResponseBodyWorkspace `json:"workspace,omitempty" xml:"workspace,omitempty" type:"Struct"`
}

func (s CreateWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceResponseBody) SetErrorCode(v string) *CreateWorkspaceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateWorkspaceResponseBody) SetErrorMessage(v string) *CreateWorkspaceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateWorkspaceResponseBody) SetRequestId(v string) *CreateWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWorkspaceResponseBody) SetSuccess(v bool) *CreateWorkspaceResponseBody {
	s.Success = &v
	return s
}

func (s *CreateWorkspaceResponseBody) SetWorkspace(v *CreateWorkspaceResponseBodyWorkspace) *CreateWorkspaceResponseBody {
	s.Workspace = v
	return s
}

type CreateWorkspaceResponseBodyWorkspace struct {
	// example:
	//
	// 1628564442000
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 1470227819xxxxxx
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// 6ed82817-ab75-4563-865d-81e60dxxxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// Demo
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// SUCCESS
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// all-in-one
	Template *string `json:"template,omitempty" xml:"template,omitempty"`
}

func (s CreateWorkspaceResponseBodyWorkspace) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceResponseBodyWorkspace) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceResponseBodyWorkspace) SetCreateTime(v string) *CreateWorkspaceResponseBodyWorkspace {
	s.CreateTime = &v
	return s
}

func (s *CreateWorkspaceResponseBodyWorkspace) SetCreator(v string) *CreateWorkspaceResponseBodyWorkspace {
	s.Creator = &v
	return s
}

func (s *CreateWorkspaceResponseBodyWorkspace) SetId(v string) *CreateWorkspaceResponseBodyWorkspace {
	s.Id = &v
	return s
}

func (s *CreateWorkspaceResponseBodyWorkspace) SetName(v string) *CreateWorkspaceResponseBodyWorkspace {
	s.Name = &v
	return s
}

func (s *CreateWorkspaceResponseBodyWorkspace) SetStatus(v string) *CreateWorkspaceResponseBodyWorkspace {
	s.Status = &v
	return s
}

func (s *CreateWorkspaceResponseBodyWorkspace) SetTemplate(v string) *CreateWorkspaceResponseBodyWorkspace {
	s.Template = &v
	return s
}

type CreateWorkspaceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceResponse) SetHeaders(v map[string]*string) *CreateWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *CreateWorkspaceResponse) SetStatusCode(v int32) *CreateWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWorkspaceResponse) SetBody(v *CreateWorkspaceResponseBody) *CreateWorkspaceResponse {
	s.Body = v
	return s
}

type DeleteAppMemberRequest struct {
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1332695887xxxxxx
	SubjectId *string `json:"subjectId,omitempty" xml:"subjectId,omitempty"`
	// example:
	//
	// User
	SubjectType *string `json:"subjectType,omitempty" xml:"subjectType,omitempty"`
}

func (s DeleteAppMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppMemberRequest) GoString() string {
	return s.String()
}

func (s *DeleteAppMemberRequest) SetOrganizationId(v string) *DeleteAppMemberRequest {
	s.OrganizationId = &v
	return s
}

func (s *DeleteAppMemberRequest) SetSubjectId(v string) *DeleteAppMemberRequest {
	s.SubjectId = &v
	return s
}

func (s *DeleteAppMemberRequest) SetSubjectType(v string) *DeleteAppMemberRequest {
	s.SubjectType = &v
	return s
}

type DeleteAppMemberResponse struct {
	Headers    map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *string            `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAppMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAppMemberResponse) GoString() string {
	return s.String()
}

func (s *DeleteAppMemberResponse) SetHeaders(v map[string]*string) *DeleteAppMemberResponse {
	s.Headers = v
	return s
}

func (s *DeleteAppMemberResponse) SetStatusCode(v int32) *DeleteAppMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAppMemberResponse) SetBody(v string) *DeleteAppMemberResponse {
	s.Body = &v
	return s
}

type DeleteBranchRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// deleteBranch
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 619b80042f595dbd1b9b0de2
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s DeleteBranchRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBranchRequest) GoString() string {
	return s.String()
}

func (s *DeleteBranchRequest) SetAccessToken(v string) *DeleteBranchRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteBranchRequest) SetBranchName(v string) *DeleteBranchRequest {
	s.BranchName = &v
	return s
}

func (s *DeleteBranchRequest) SetOrganizationId(v string) *DeleteBranchRequest {
	s.OrganizationId = &v
	return s
}

type DeleteBranchResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 6177543A-8D54-5736-A93B-E0195A1512CB
	RequestId *string                         `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteBranchResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *string `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteBranchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBranchResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBranchResponseBody) SetErrorCode(v string) *DeleteBranchResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteBranchResponseBody) SetErrorMessage(v string) *DeleteBranchResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteBranchResponseBody) SetRequestId(v string) *DeleteBranchResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteBranchResponseBody) SetResult(v *DeleteBranchResponseBodyResult) *DeleteBranchResponseBody {
	s.Result = v
	return s
}

func (s *DeleteBranchResponseBody) SetSuccess(v string) *DeleteBranchResponseBody {
	s.Success = &v
	return s
}

type DeleteBranchResponseBodyResult struct {
	// example:
	//
	// deleteBranch
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
}

func (s DeleteBranchResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteBranchResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteBranchResponseBodyResult) SetBranchName(v string) *DeleteBranchResponseBodyResult {
	s.BranchName = &v
	return s
}

type DeleteBranchResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBranchResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBranchResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBranchResponse) GoString() string {
	return s.String()
}

func (s *DeleteBranchResponse) SetHeaders(v map[string]*string) *DeleteBranchResponse {
	s.Headers = v
	return s
}

func (s *DeleteBranchResponse) SetStatusCode(v int32) *DeleteBranchResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBranchResponse) SetBody(v *DeleteBranchResponseBody) *DeleteBranchResponse {
	s.Body = v
	return s
}

type DeleteFileRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// This parameter is required.
	CommitMessage *string `json:"commitMessage,omitempty" xml:"commitMessage,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// src/main/test.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s DeleteFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteFileRequest) SetAccessToken(v string) *DeleteFileRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteFileRequest) SetBranchName(v string) *DeleteFileRequest {
	s.BranchName = &v
	return s
}

func (s *DeleteFileRequest) SetCommitMessage(v string) *DeleteFileRequest {
	s.CommitMessage = &v
	return s
}

func (s *DeleteFileRequest) SetFilePath(v string) *DeleteFileRequest {
	s.FilePath = &v
	return s
}

func (s *DeleteFileRequest) SetOrganizationId(v string) *DeleteFileRequest {
	s.OrganizationId = &v
	return s
}

type DeleteFileResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 7EFAD5FB-2296-5D52-BC60-FCC992A40767
	RequestId *string                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteFileResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFileResponseBody) SetErrorCode(v string) *DeleteFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteFileResponseBody) SetErrorMessage(v string) *DeleteFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteFileResponseBody) SetRequestId(v string) *DeleteFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFileResponseBody) SetResult(v *DeleteFileResponseBodyResult) *DeleteFileResponseBody {
	s.Result = v
	return s
}

func (s *DeleteFileResponseBody) SetSuccess(v bool) *DeleteFileResponseBody {
	s.Success = &v
	return s
}

type DeleteFileResponseBodyResult struct {
	// example:
	//
	// master
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// example:
	//
	// src/main/delete.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
}

func (s DeleteFileResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteFileResponseBodyResult) SetBranchName(v string) *DeleteFileResponseBodyResult {
	s.BranchName = &v
	return s
}

func (s *DeleteFileResponseBodyResult) SetFilePath(v string) *DeleteFileResponseBodyResult {
	s.FilePath = &v
	return s
}

type DeleteFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteFileResponse) SetHeaders(v map[string]*string) *DeleteFileResponse {
	s.Headers = v
	return s
}

func (s *DeleteFileResponse) SetStatusCode(v int32) *DeleteFileResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFileResponse) SetBody(v *DeleteFileResponseBody) *DeleteFileResponse {
	s.Body = v
	return s
}

type DeleteFlowTagResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteFlowTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowTagResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowTagResponseBody) SetErrorCode(v string) *DeleteFlowTagResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteFlowTagResponseBody) SetErrorMessage(v string) *DeleteFlowTagResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteFlowTagResponseBody) SetRequestId(v string) *DeleteFlowTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFlowTagResponseBody) SetSuccess(v bool) *DeleteFlowTagResponseBody {
	s.Success = &v
	return s
}

type DeleteFlowTagResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFlowTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFlowTagResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowTagResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowTagResponse) SetHeaders(v map[string]*string) *DeleteFlowTagResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowTagResponse) SetStatusCode(v int32) *DeleteFlowTagResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFlowTagResponse) SetBody(v *DeleteFlowTagResponseBody) *DeleteFlowTagResponse {
	s.Body = v
	return s
}

type DeleteFlowTagGroupResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteFlowTagGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowTagGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowTagGroupResponseBody) SetErrorCode(v string) *DeleteFlowTagGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteFlowTagGroupResponseBody) SetErrorMessage(v string) *DeleteFlowTagGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteFlowTagGroupResponseBody) SetRequestId(v string) *DeleteFlowTagGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFlowTagGroupResponseBody) SetSuccess(v bool) *DeleteFlowTagGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteFlowTagGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFlowTagGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFlowTagGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowTagGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowTagGroupResponse) SetHeaders(v map[string]*string) *DeleteFlowTagGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowTagGroupResponse) SetStatusCode(v int32) *DeleteFlowTagGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFlowTagGroupResponse) SetBody(v *DeleteFlowTagGroupResponseBody) *DeleteFlowTagGroupResponse {
	s.Body = v
	return s
}

type DeleteGroupMemberRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1789095186553536
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// USERS
	MemberType *string `json:"memberType,omitempty" xml:"memberType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 6082a9b0c7972588ac363793
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s DeleteGroupMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupMemberRequest) GoString() string {
	return s.String()
}

func (s *DeleteGroupMemberRequest) SetAccessToken(v string) *DeleteGroupMemberRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteGroupMemberRequest) SetAliyunPk(v string) *DeleteGroupMemberRequest {
	s.AliyunPk = &v
	return s
}

func (s *DeleteGroupMemberRequest) SetMemberType(v string) *DeleteGroupMemberRequest {
	s.MemberType = &v
	return s
}

func (s *DeleteGroupMemberRequest) SetOrganizationId(v string) *DeleteGroupMemberRequest {
	s.OrganizationId = &v
	return s
}

type DeleteGroupMemberResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 4D6AF7CC-B43B-5454-86AB-023D25E44868
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteGroupMemberResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteGroupMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupMemberResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGroupMemberResponseBody) SetErrorCode(v string) *DeleteGroupMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteGroupMemberResponseBody) SetErrorMessage(v string) *DeleteGroupMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteGroupMemberResponseBody) SetRequestId(v string) *DeleteGroupMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteGroupMemberResponseBody) SetResult(v *DeleteGroupMemberResponseBodyResult) *DeleteGroupMemberResponseBody {
	s.Result = v
	return s
}

func (s *DeleteGroupMemberResponseBody) SetSuccess(v bool) *DeleteGroupMemberResponseBody {
	s.Success = &v
	return s
}

type DeleteGroupMemberResponseBodyResult struct {
	// example:
	//
	// 40
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// 524836
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// USERS
	MemberType *string `json:"memberType,omitempty" xml:"memberType,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 2080398
	SourceId *int64 `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s DeleteGroupMemberResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupMemberResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteGroupMemberResponseBodyResult) SetAccessLevel(v int32) *DeleteGroupMemberResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *DeleteGroupMemberResponseBodyResult) SetAvatarUrl(v string) *DeleteGroupMemberResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *DeleteGroupMemberResponseBodyResult) SetId(v int64) *DeleteGroupMemberResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DeleteGroupMemberResponseBodyResult) SetMemberType(v string) *DeleteGroupMemberResponseBodyResult {
	s.MemberType = &v
	return s
}

func (s *DeleteGroupMemberResponseBodyResult) SetName(v string) *DeleteGroupMemberResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DeleteGroupMemberResponseBodyResult) SetSourceId(v int64) *DeleteGroupMemberResponseBodyResult {
	s.SourceId = &v
	return s
}

func (s *DeleteGroupMemberResponseBodyResult) SetState(v string) *DeleteGroupMemberResponseBodyResult {
	s.State = &v
	return s
}

func (s *DeleteGroupMemberResponseBodyResult) SetUsername(v string) *DeleteGroupMemberResponseBodyResult {
	s.Username = &v
	return s
}

type DeleteGroupMemberResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteGroupMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteGroupMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupMemberResponse) GoString() string {
	return s.String()
}

func (s *DeleteGroupMemberResponse) SetHeaders(v map[string]*string) *DeleteGroupMemberResponse {
	s.Headers = v
	return s
}

func (s *DeleteGroupMemberResponse) SetStatusCode(v int32) *DeleteGroupMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGroupMemberResponse) SetBody(v *DeleteGroupMemberResponseBody) *DeleteGroupMemberResponse {
	s.Body = v
	return s
}

type DeleteHostGroupResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHostGroupResponseBody) SetErrorCode(v string) *DeleteHostGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteHostGroupResponseBody) SetErrorMessage(v string) *DeleteHostGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteHostGroupResponseBody) SetRequestId(v string) *DeleteHostGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHostGroupResponseBody) SetSuccess(v bool) *DeleteHostGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteHostGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteHostGroupResponse) SetHeaders(v map[string]*string) *DeleteHostGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteHostGroupResponse) SetStatusCode(v int32) *DeleteHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHostGroupResponse) SetBody(v *DeleteHostGroupResponseBody) *DeleteHostGroupResponse {
	s.Body = v
	return s
}

type DeletePipelineResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeletePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponseBody) SetErrorCode(v string) *DeletePipelineResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeletePipelineResponseBody) SetErrorMessage(v string) *DeletePipelineResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeletePipelineResponseBody) SetRequestId(v string) *DeletePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePipelineResponseBody) SetSuccess(v bool) *DeletePipelineResponseBody {
	s.Success = &v
	return s
}

type DeletePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponse) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponse) SetHeaders(v map[string]*string) *DeletePipelineResponse {
	s.Headers = v
	return s
}

func (s *DeletePipelineResponse) SetStatusCode(v int32) *DeletePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePipelineResponse) SetBody(v *DeletePipelineResponseBody) *DeletePipelineResponse {
	s.Body = v
	return s
}

type DeletePipelineGroupResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeletePipelineGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePipelineGroupResponseBody) SetErrorCode(v string) *DeletePipelineGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeletePipelineGroupResponseBody) SetErrorMessage(v string) *DeletePipelineGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeletePipelineGroupResponseBody) SetRequestId(v string) *DeletePipelineGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePipelineGroupResponseBody) SetSuccess(v bool) *DeletePipelineGroupResponseBody {
	s.Success = &v
	return s
}

type DeletePipelineGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePipelineGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePipelineGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineGroupResponse) GoString() string {
	return s.String()
}

func (s *DeletePipelineGroupResponse) SetHeaders(v map[string]*string) *DeletePipelineGroupResponse {
	s.Headers = v
	return s
}

func (s *DeletePipelineGroupResponse) SetStatusCode(v int32) *DeletePipelineGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePipelineGroupResponse) SetBody(v *DeletePipelineGroupResponseBody) *DeletePipelineGroupResponse {
	s.Body = v
	return s
}

type DeletePipelineRelationsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 11
	RelObjectId *string `json:"relObjectId,omitempty" xml:"relObjectId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// VARIABLE_GROUP
	RelObjectType *string `json:"relObjectType,omitempty" xml:"relObjectType,omitempty"`
}

func (s DeletePipelineRelationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineRelationsRequest) GoString() string {
	return s.String()
}

func (s *DeletePipelineRelationsRequest) SetRelObjectId(v string) *DeletePipelineRelationsRequest {
	s.RelObjectId = &v
	return s
}

func (s *DeletePipelineRelationsRequest) SetRelObjectType(v string) *DeletePipelineRelationsRequest {
	s.RelObjectType = &v
	return s
}

type DeletePipelineRelationsResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeletePipelineRelationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineRelationsResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePipelineRelationsResponseBody) SetErrorCode(v string) *DeletePipelineRelationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeletePipelineRelationsResponseBody) SetErrorMessage(v string) *DeletePipelineRelationsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeletePipelineRelationsResponseBody) SetRequestId(v string) *DeletePipelineRelationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePipelineRelationsResponseBody) SetSuccess(v bool) *DeletePipelineRelationsResponseBody {
	s.Success = &v
	return s
}

type DeletePipelineRelationsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePipelineRelationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePipelineRelationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineRelationsResponse) GoString() string {
	return s.String()
}

func (s *DeletePipelineRelationsResponse) SetHeaders(v map[string]*string) *DeletePipelineRelationsResponse {
	s.Headers = v
	return s
}

func (s *DeletePipelineRelationsResponse) SetStatusCode(v int32) *DeletePipelineRelationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePipelineRelationsResponse) SetBody(v *DeletePipelineRelationsResponseBody) *DeletePipelineRelationsResponse {
	s.Body = v
	return s
}

type DeleteProjectRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 7fb72727f32143574f7a...
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
}

func (s DeleteProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectRequest) GoString() string {
	return s.String()
}

func (s *DeleteProjectRequest) SetIdentifier(v string) *DeleteProjectRequest {
	s.Identifier = &v
	return s
}

type DeleteProjectResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProjectResponseBody) SetErrorCode(v string) *DeleteProjectResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteProjectResponseBody) SetErrorMsg(v string) *DeleteProjectResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *DeleteProjectResponseBody) SetRequestId(v string) *DeleteProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteProjectResponseBody) SetResult(v bool) *DeleteProjectResponseBody {
	s.Result = &v
	return s
}

func (s *DeleteProjectResponseBody) SetSuccess(v bool) *DeleteProjectResponseBody {
	s.Success = &v
	return s
}

type DeleteProjectResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectResponse) GoString() string {
	return s.String()
}

func (s *DeleteProjectResponse) SetHeaders(v map[string]*string) *DeleteProjectResponse {
	s.Headers = v
	return s
}

func (s *DeleteProjectResponse) SetStatusCode(v int32) *DeleteProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteProjectResponse) SetBody(v *DeleteProjectResponseBody) *DeleteProjectResponse {
	s.Body = v
	return s
}

type DeleteProjectLabelRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s DeleteProjectLabelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectLabelRequest) GoString() string {
	return s.String()
}

func (s *DeleteProjectLabelRequest) SetAccessToken(v string) *DeleteProjectLabelRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteProjectLabelRequest) SetOrganizationId(v string) *DeleteProjectLabelRequest {
	s.OrganizationId = &v
	return s
}

func (s *DeleteProjectLabelRequest) SetRepositoryIdentity(v string) *DeleteProjectLabelRequest {
	s.RepositoryIdentity = &v
	return s
}

type DeleteProjectLabelResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteProjectLabelResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteProjectLabelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectLabelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProjectLabelResponseBody) SetErrorCode(v string) *DeleteProjectLabelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteProjectLabelResponseBody) SetErrorMessage(v string) *DeleteProjectLabelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteProjectLabelResponseBody) SetRequestId(v string) *DeleteProjectLabelResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteProjectLabelResponseBody) SetResult(v *DeleteProjectLabelResponseBodyResult) *DeleteProjectLabelResponseBody {
	s.Result = v
	return s
}

func (s *DeleteProjectLabelResponseBody) SetSuccess(v bool) *DeleteProjectLabelResponseBody {
	s.Success = &v
	return s
}

type DeleteProjectLabelResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteProjectLabelResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectLabelResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteProjectLabelResponseBodyResult) SetResult(v bool) *DeleteProjectLabelResponseBodyResult {
	s.Result = &v
	return s
}

type DeleteProjectLabelResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteProjectLabelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteProjectLabelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProjectLabelResponse) GoString() string {
	return s.String()
}

func (s *DeleteProjectLabelResponse) SetHeaders(v map[string]*string) *DeleteProjectLabelResponse {
	s.Headers = v
	return s
}

func (s *DeleteProjectLabelResponse) SetStatusCode(v int32) *DeleteProjectLabelResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteProjectLabelResponse) SetBody(v *DeleteProjectLabelResponseBody) *DeleteProjectLabelResponse {
	s.Body = v
	return s
}

type DeleteProtectedBranchRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 611b75680fc7bf0dbe1dce55
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s DeleteProtectedBranchRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteProtectedBranchRequest) GoString() string {
	return s.String()
}

func (s *DeleteProtectedBranchRequest) SetAccessToken(v string) *DeleteProtectedBranchRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteProtectedBranchRequest) SetOrganizationId(v string) *DeleteProtectedBranchRequest {
	s.OrganizationId = &v
	return s
}

type DeleteProtectedBranchResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 1F4F342D-493A-5B2C-B133-BA78B30FF834
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteProtectedBranchResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteProtectedBranchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteProtectedBranchResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteProtectedBranchResponseBody) SetErrorCode(v string) *DeleteProtectedBranchResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteProtectedBranchResponseBody) SetErrorMessage(v string) *DeleteProtectedBranchResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteProtectedBranchResponseBody) SetRequestId(v string) *DeleteProtectedBranchResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteProtectedBranchResponseBody) SetResult(v *DeleteProtectedBranchResponseBodyResult) *DeleteProtectedBranchResponseBody {
	s.Result = v
	return s
}

func (s *DeleteProtectedBranchResponseBody) SetSuccess(v bool) *DeleteProtectedBranchResponseBody {
	s.Success = &v
	return s
}

type DeleteProtectedBranchResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteProtectedBranchResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteProtectedBranchResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteProtectedBranchResponseBodyResult) SetResult(v bool) *DeleteProtectedBranchResponseBodyResult {
	s.Result = &v
	return s
}

type DeleteProtectedBranchResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteProtectedBranchResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteProtectedBranchResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteProtectedBranchResponse) GoString() string {
	return s.String()
}

func (s *DeleteProtectedBranchResponse) SetHeaders(v map[string]*string) *DeleteProtectedBranchResponse {
	s.Headers = v
	return s
}

func (s *DeleteProtectedBranchResponse) SetStatusCode(v int32) *DeleteProtectedBranchResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteProtectedBranchResponse) SetBody(v *DeleteProtectedBranchResponseBody) *DeleteProtectedBranchResponse {
	s.Body = v
	return s
}

type DeletePushRuleRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60d54f3daccf2bbd6659f3ad
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s DeletePushRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePushRuleRequest) GoString() string {
	return s.String()
}

func (s *DeletePushRuleRequest) SetAccessToken(v string) *DeletePushRuleRequest {
	s.AccessToken = &v
	return s
}

func (s *DeletePushRuleRequest) SetOrganizationId(v string) *DeletePushRuleRequest {
	s.OrganizationId = &v
	return s
}

type DeletePushRuleResponseBody struct {
	// example:
	//
	// InvalidParam.NotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeletePushRuleResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *string `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeletePushRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePushRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePushRuleResponseBody) SetErrorCode(v string) *DeletePushRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeletePushRuleResponseBody) SetErrorMessage(v string) *DeletePushRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeletePushRuleResponseBody) SetRequestId(v string) *DeletePushRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePushRuleResponseBody) SetResult(v *DeletePushRuleResponseBodyResult) *DeletePushRuleResponseBody {
	s.Result = v
	return s
}

func (s *DeletePushRuleResponseBody) SetSuccess(v string) *DeletePushRuleResponseBody {
	s.Success = &v
	return s
}

type DeletePushRuleResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeletePushRuleResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeletePushRuleResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeletePushRuleResponseBodyResult) SetResult(v bool) *DeletePushRuleResponseBodyResult {
	s.Result = &v
	return s
}

type DeletePushRuleResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePushRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePushRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePushRuleResponse) GoString() string {
	return s.String()
}

func (s *DeletePushRuleResponse) SetHeaders(v map[string]*string) *DeletePushRuleResponse {
	s.Headers = v
	return s
}

func (s *DeletePushRuleResponse) SetStatusCode(v int32) *DeletePushRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePushRuleResponse) SetBody(v *DeletePushRuleResponseBody) *DeletePushRuleResponse {
	s.Body = v
	return s
}

type DeleteRepositoryRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 6082a9b0c7972588ac363793
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s DeleteRepositoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryRequest) SetAccessToken(v string) *DeleteRepositoryRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteRepositoryRequest) SetReason(v string) *DeleteRepositoryRequest {
	s.Reason = &v
	return s
}

func (s *DeleteRepositoryRequest) SetOrganizationId(v string) *DeleteRepositoryRequest {
	s.OrganizationId = &v
	return s
}

type DeleteRepositoryResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// A7586FEB-E48D-5579-983F-74981FBFF627
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteRepositoryResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteRepositoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryResponseBody) SetErrorCode(v string) *DeleteRepositoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteRepositoryResponseBody) SetErrorMessage(v string) *DeleteRepositoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteRepositoryResponseBody) SetRequestId(v string) *DeleteRepositoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRepositoryResponseBody) SetResult(v *DeleteRepositoryResponseBodyResult) *DeleteRepositoryResponseBody {
	s.Result = v
	return s
}

func (s *DeleteRepositoryResponseBody) SetSuccess(v bool) *DeleteRepositoryResponseBody {
	s.Success = &v
	return s
}

type DeleteRepositoryResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteRepositoryResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryResponseBodyResult) SetResult(v bool) *DeleteRepositoryResponseBodyResult {
	s.Result = &v
	return s
}

type DeleteRepositoryResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRepositoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRepositoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryResponse) SetHeaders(v map[string]*string) *DeleteRepositoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteRepositoryResponse) SetStatusCode(v int32) *DeleteRepositoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRepositoryResponse) SetBody(v *DeleteRepositoryResponseBody) *DeleteRepositoryResponse {
	s.Body = v
	return s
}

type DeleteRepositoryGroupRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 624666bd54d036291ae13a36
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s DeleteRepositoryGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryGroupRequest) SetAccessToken(v string) *DeleteRepositoryGroupRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteRepositoryGroupRequest) SetReason(v string) *DeleteRepositoryGroupRequest {
	s.Reason = &v
	return s
}

func (s *DeleteRepositoryGroupRequest) SetOrganizationId(v string) *DeleteRepositoryGroupRequest {
	s.OrganizationId = &v
	return s
}

type DeleteRepositoryGroupResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 30F2DA15-2877-5FC9-BC71-F7F394717907
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteRepositoryGroupResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteRepositoryGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryGroupResponseBody) SetErrorCode(v string) *DeleteRepositoryGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteRepositoryGroupResponseBody) SetErrorMessage(v string) *DeleteRepositoryGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteRepositoryGroupResponseBody) SetRequestId(v string) *DeleteRepositoryGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRepositoryGroupResponseBody) SetResult(v *DeleteRepositoryGroupResponseBodyResult) *DeleteRepositoryGroupResponseBody {
	s.Result = v
	return s
}

func (s *DeleteRepositoryGroupResponseBody) SetSuccess(v bool) *DeleteRepositoryGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteRepositoryGroupResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteRepositoryGroupResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryGroupResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryGroupResponseBodyResult) SetResult(v bool) *DeleteRepositoryGroupResponseBodyResult {
	s.Result = &v
	return s
}

type DeleteRepositoryGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRepositoryGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRepositoryGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryGroupResponse) SetHeaders(v map[string]*string) *DeleteRepositoryGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteRepositoryGroupResponse) SetStatusCode(v int32) *DeleteRepositoryGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRepositoryGroupResponse) SetBody(v *DeleteRepositoryGroupResponseBody) *DeleteRepositoryGroupResponse {
	s.Body = v
	return s
}

type DeleteRepositoryMemberRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// USERS
	MemberType *string `json:"memberType,omitempty" xml:"memberType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 632bbfdf419338aaa2b1360a
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s DeleteRepositoryMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryMemberRequest) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryMemberRequest) SetAccessToken(v string) *DeleteRepositoryMemberRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteRepositoryMemberRequest) SetMemberType(v string) *DeleteRepositoryMemberRequest {
	s.MemberType = &v
	return s
}

func (s *DeleteRepositoryMemberRequest) SetOrganizationId(v string) *DeleteRepositoryMemberRequest {
	s.OrganizationId = &v
	return s
}

type DeleteRepositoryMemberResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 0E1BCF81-51E6-59D4-8D55-FF945111127A
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteRepositoryMemberResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteRepositoryMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryMemberResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryMemberResponseBody) SetErrorCode(v string) *DeleteRepositoryMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteRepositoryMemberResponseBody) SetErrorMessage(v string) *DeleteRepositoryMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteRepositoryMemberResponseBody) SetRequestId(v string) *DeleteRepositoryMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRepositoryMemberResponseBody) SetResult(v *DeleteRepositoryMemberResponseBodyResult) *DeleteRepositoryMemberResponseBody {
	s.Result = v
	return s
}

func (s *DeleteRepositoryMemberResponseBody) SetSuccess(v bool) *DeleteRepositoryMemberResponseBody {
	s.Success = &v
	return s
}

type DeleteRepositoryMemberResponseBodyResult struct {
	// example:
	//
	// 30
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// 2022-03-12 12:00:00
	CreateAt *string `json:"createAt,omitempty" xml:"createAt,omitempty"`
	// example:
	//
	// 30815
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 2080398
	SourceId *int64 `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// Project
	SourceType *string `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	// example:
	//
	// 2022-03-12 12:00:00
	UpdateAt *string `json:"updateAt,omitempty" xml:"updateAt,omitempty"`
	// example:
	//
	// 19280
	UserId *int64 `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s DeleteRepositoryMemberResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryMemberResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryMemberResponseBodyResult) SetAccessLevel(v int32) *DeleteRepositoryMemberResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *DeleteRepositoryMemberResponseBodyResult) SetCreateAt(v string) *DeleteRepositoryMemberResponseBodyResult {
	s.CreateAt = &v
	return s
}

func (s *DeleteRepositoryMemberResponseBodyResult) SetId(v int64) *DeleteRepositoryMemberResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DeleteRepositoryMemberResponseBodyResult) SetSourceId(v int64) *DeleteRepositoryMemberResponseBodyResult {
	s.SourceId = &v
	return s
}

func (s *DeleteRepositoryMemberResponseBodyResult) SetSourceType(v string) *DeleteRepositoryMemberResponseBodyResult {
	s.SourceType = &v
	return s
}

func (s *DeleteRepositoryMemberResponseBodyResult) SetUpdateAt(v string) *DeleteRepositoryMemberResponseBodyResult {
	s.UpdateAt = &v
	return s
}

func (s *DeleteRepositoryMemberResponseBodyResult) SetUserId(v int64) *DeleteRepositoryMemberResponseBodyResult {
	s.UserId = &v
	return s
}

type DeleteRepositoryMemberResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRepositoryMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRepositoryMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryMemberResponse) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryMemberResponse) SetHeaders(v map[string]*string) *DeleteRepositoryMemberResponse {
	s.Headers = v
	return s
}

func (s *DeleteRepositoryMemberResponse) SetStatusCode(v int32) *DeleteRepositoryMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRepositoryMemberResponse) SetBody(v *DeleteRepositoryMemberResponseBody) *DeleteRepositoryMemberResponse {
	s.Body = v
	return s
}

type DeleteRepositoryWebhookRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s DeleteRepositoryWebhookRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryWebhookRequest) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryWebhookRequest) SetAccessToken(v string) *DeleteRepositoryWebhookRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteRepositoryWebhookRequest) SetOrganizationId(v string) *DeleteRepositoryWebhookRequest {
	s.OrganizationId = &v
	return s
}

type DeleteRepositoryWebhookResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                                    `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteRepositoryWebhookResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteRepositoryWebhookResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryWebhookResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryWebhookResponseBody) SetErrorCode(v string) *DeleteRepositoryWebhookResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBody) SetErrorMessage(v string) *DeleteRepositoryWebhookResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBody) SetRequestId(v string) *DeleteRepositoryWebhookResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBody) SetResult(v *DeleteRepositoryWebhookResponseBodyResult) *DeleteRepositoryWebhookResponseBody {
	s.Result = v
	return s
}

func (s *DeleteRepositoryWebhookResponseBody) SetSuccess(v bool) *DeleteRepositoryWebhookResponseBody {
	s.Success = &v
	return s
}

type DeleteRepositoryWebhookResponseBodyResult struct {
	// example:
	//
	// false
	BuildEvents *bool `json:"buildEvents,omitempty" xml:"buildEvents,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt   *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// false
	EnableSslVerification *bool `json:"enableSslVerification,omitempty" xml:"enableSslVerification,omitempty"`
	// example:
	//
	// 524836
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// false
	IssuesEvents *bool `json:"issuesEvents,omitempty" xml:"issuesEvents,omitempty"`
	// example:
	//
	// ""
	LastTestResult *string `json:"lastTestResult,omitempty" xml:"lastTestResult,omitempty"`
	// example:
	//
	// true
	MergeRequestsEvents *bool `json:"mergeRequestsEvents,omitempty" xml:"mergeRequestsEvents,omitempty"`
	// example:
	//
	// true
	NoteEvents *bool `json:"noteEvents,omitempty" xml:"noteEvents,omitempty"`
	// example:
	//
	// 2369234
	ProjectId *int64 `json:"projectId,omitempty" xml:"projectId,omitempty"`
	// example:
	//
	// true
	PushEvents *bool `json:"pushEvents,omitempty" xml:"pushEvents,omitempty"`
	// example:
	//
	// xxxx
	SecretToken *string `json:"secretToken,omitempty" xml:"secretToken,omitempty"`
	// example:
	//
	// true
	TagPushEvents *bool `json:"tagPushEvents,omitempty" xml:"tagPushEvents,omitempty"`
	// example:
	//
	// ProjectHook
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// https://xxxxx
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s DeleteRepositoryWebhookResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryWebhookResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetBuildEvents(v bool) *DeleteRepositoryWebhookResponseBodyResult {
	s.BuildEvents = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetCreatedAt(v string) *DeleteRepositoryWebhookResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetDescription(v string) *DeleteRepositoryWebhookResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetEnableSslVerification(v bool) *DeleteRepositoryWebhookResponseBodyResult {
	s.EnableSslVerification = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetId(v int64) *DeleteRepositoryWebhookResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetIssuesEvents(v bool) *DeleteRepositoryWebhookResponseBodyResult {
	s.IssuesEvents = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetLastTestResult(v string) *DeleteRepositoryWebhookResponseBodyResult {
	s.LastTestResult = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetMergeRequestsEvents(v bool) *DeleteRepositoryWebhookResponseBodyResult {
	s.MergeRequestsEvents = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetNoteEvents(v bool) *DeleteRepositoryWebhookResponseBodyResult {
	s.NoteEvents = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetProjectId(v int64) *DeleteRepositoryWebhookResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetPushEvents(v bool) *DeleteRepositoryWebhookResponseBodyResult {
	s.PushEvents = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetSecretToken(v string) *DeleteRepositoryWebhookResponseBodyResult {
	s.SecretToken = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetTagPushEvents(v bool) *DeleteRepositoryWebhookResponseBodyResult {
	s.TagPushEvents = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetType(v string) *DeleteRepositoryWebhookResponseBodyResult {
	s.Type = &v
	return s
}

func (s *DeleteRepositoryWebhookResponseBodyResult) SetUrl(v string) *DeleteRepositoryWebhookResponseBodyResult {
	s.Url = &v
	return s
}

type DeleteRepositoryWebhookResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRepositoryWebhookResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRepositoryWebhookResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRepositoryWebhookResponse) GoString() string {
	return s.String()
}

func (s *DeleteRepositoryWebhookResponse) SetHeaders(v map[string]*string) *DeleteRepositoryWebhookResponse {
	s.Headers = v
	return s
}

func (s *DeleteRepositoryWebhookResponse) SetStatusCode(v int32) *DeleteRepositoryWebhookResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRepositoryWebhookResponse) SetBody(v *DeleteRepositoryWebhookResponseBody) *DeleteRepositoryWebhookResponse {
	s.Body = v
	return s
}

type DeleteResourceMemberResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteResourceMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceMemberResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteResourceMemberResponseBody) SetErrorCode(v string) *DeleteResourceMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteResourceMemberResponseBody) SetErrorMessage(v string) *DeleteResourceMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteResourceMemberResponseBody) SetRequestId(v string) *DeleteResourceMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteResourceMemberResponseBody) SetSuccess(v bool) *DeleteResourceMemberResponseBody {
	s.Success = &v
	return s
}

type DeleteResourceMemberResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteResourceMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteResourceMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceMemberResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceMemberResponse) SetHeaders(v map[string]*string) *DeleteResourceMemberResponse {
	s.Headers = v
	return s
}

func (s *DeleteResourceMemberResponse) SetStatusCode(v int32) *DeleteResourceMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteResourceMemberResponse) SetBody(v *DeleteResourceMemberResponseBody) *DeleteResourceMemberResponse {
	s.Body = v
	return s
}

type DeleteTagRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 609633ffd40eb063bac8165a
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// v1.0
	TagName *string `json:"tagName,omitempty" xml:"tagName,omitempty"`
}

func (s DeleteTagRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagRequest) GoString() string {
	return s.String()
}

func (s *DeleteTagRequest) SetAccessToken(v string) *DeleteTagRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteTagRequest) SetOrganizationId(v string) *DeleteTagRequest {
	s.OrganizationId = &v
	return s
}

func (s *DeleteTagRequest) SetTagName(v string) *DeleteTagRequest {
	s.TagName = &v
	return s
}

type DeleteTagResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 60945D4F-CF6D-5CFF-89ED-1D1F6657032C
	RequestId *string                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteTagResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTagResponseBody) SetErrorCode(v string) *DeleteTagResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteTagResponseBody) SetErrorMessage(v string) *DeleteTagResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteTagResponseBody) SetRequestId(v string) *DeleteTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTagResponseBody) SetResult(v *DeleteTagResponseBodyResult) *DeleteTagResponseBody {
	s.Result = v
	return s
}

func (s *DeleteTagResponseBody) SetSuccess(v bool) *DeleteTagResponseBody {
	s.Success = &v
	return s
}

type DeleteTagResponseBodyResult struct {
	// example:
	//
	// v1.0
	TagName *string `json:"tagName,omitempty" xml:"tagName,omitempty"`
}

func (s DeleteTagResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteTagResponseBodyResult) SetTagName(v string) *DeleteTagResponseBodyResult {
	s.TagName = &v
	return s
}

type DeleteTagResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTagResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagResponse) GoString() string {
	return s.String()
}

func (s *DeleteTagResponse) SetHeaders(v map[string]*string) *DeleteTagResponse {
	s.Headers = v
	return s
}

func (s *DeleteTagResponse) SetStatusCode(v int32) *DeleteTagResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTagResponse) SetBody(v *DeleteTagResponseBody) *DeleteTagResponse {
	s.Body = v
	return s
}

type DeleteUserKeyRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s DeleteUserKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserKeyRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserKeyRequest) SetAccessToken(v string) *DeleteUserKeyRequest {
	s.AccessToken = &v
	return s
}

func (s *DeleteUserKeyRequest) SetOrganizationId(v string) *DeleteUserKeyRequest {
	s.OrganizationId = &v
	return s
}

type DeleteUserKeyResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                          `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *DeleteUserKeyResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteUserKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserKeyResponseBody) SetErrorCode(v string) *DeleteUserKeyResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteUserKeyResponseBody) SetErrorMessage(v string) *DeleteUserKeyResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteUserKeyResponseBody) SetRequestId(v string) *DeleteUserKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteUserKeyResponseBody) SetResult(v *DeleteUserKeyResponseBodyResult) *DeleteUserKeyResponseBody {
	s.Result = v
	return s
}

func (s *DeleteUserKeyResponseBody) SetSuccess(v bool) *DeleteUserKeyResponseBody {
	s.Success = &v
	return s
}

type DeleteUserKeyResponseBodyResult struct {
	// example:
	//
	// xxx
	Context *string `json:"context,omitempty" xml:"context,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	ExpireTime *string `json:"expireTime,omitempty" xml:"expireTime,omitempty"`
	// example:
	//
	// xxx
	FingerPrint *string `json:"fingerPrint,omitempty" xml:"fingerPrint,omitempty"`
	// example:
	//
	// 50998
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ALL
	KeyScope *string `json:"keyScope,omitempty" xml:"keyScope,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	LastUsedTime *string `json:"lastUsedTime,omitempty" xml:"lastUsedTime,omitempty"`
	// example:
	//
	// xxx
	PublicKey *string `json:"publicKey,omitempty" xml:"publicKey,omitempty"`
	// example:
	//
	// xxx
	ShaContext *string `json:"shaContext,omitempty" xml:"shaContext,omitempty"`
	Title      *string `json:"title,omitempty" xml:"title,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
}

func (s DeleteUserKeyResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserKeyResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteUserKeyResponseBodyResult) SetContext(v string) *DeleteUserKeyResponseBodyResult {
	s.Context = &v
	return s
}

func (s *DeleteUserKeyResponseBodyResult) SetCreatedAt(v string) *DeleteUserKeyResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *DeleteUserKeyResponseBodyResult) SetExpireTime(v string) *DeleteUserKeyResponseBodyResult {
	s.ExpireTime = &v
	return s
}

func (s *DeleteUserKeyResponseBodyResult) SetFingerPrint(v string) *DeleteUserKeyResponseBodyResult {
	s.FingerPrint = &v
	return s
}

func (s *DeleteUserKeyResponseBodyResult) SetId(v int64) *DeleteUserKeyResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DeleteUserKeyResponseBodyResult) SetKeyScope(v string) *DeleteUserKeyResponseBodyResult {
	s.KeyScope = &v
	return s
}

func (s *DeleteUserKeyResponseBodyResult) SetLastUsedTime(v string) *DeleteUserKeyResponseBodyResult {
	s.LastUsedTime = &v
	return s
}

func (s *DeleteUserKeyResponseBodyResult) SetPublicKey(v string) *DeleteUserKeyResponseBodyResult {
	s.PublicKey = &v
	return s
}

func (s *DeleteUserKeyResponseBodyResult) SetShaContext(v string) *DeleteUserKeyResponseBodyResult {
	s.ShaContext = &v
	return s
}

func (s *DeleteUserKeyResponseBodyResult) SetTitle(v string) *DeleteUserKeyResponseBodyResult {
	s.Title = &v
	return s
}

func (s *DeleteUserKeyResponseBodyResult) SetUpdatedAt(v string) *DeleteUserKeyResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

type DeleteUserKeyResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteUserKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteUserKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserKeyResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserKeyResponse) SetHeaders(v map[string]*string) *DeleteUserKeyResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserKeyResponse) SetStatusCode(v int32) *DeleteUserKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteUserKeyResponse) SetBody(v *DeleteUserKeyResponseBody) *DeleteUserKeyResponse {
	s.Body = v
	return s
}

type DeleteVariableGroupResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteVariableGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVariableGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVariableGroupResponseBody) SetErrorCode(v string) *DeleteVariableGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteVariableGroupResponseBody) SetErrorMessage(v string) *DeleteVariableGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteVariableGroupResponseBody) SetRequestId(v string) *DeleteVariableGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteVariableGroupResponseBody) SetSuccess(v bool) *DeleteVariableGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteVariableGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteVariableGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteVariableGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVariableGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteVariableGroupResponse) SetHeaders(v map[string]*string) *DeleteVariableGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteVariableGroupResponse) SetStatusCode(v int32) *DeleteVariableGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVariableGroupResponse) SetBody(v *DeleteVariableGroupResponseBody) *DeleteVariableGroupResponse {
	s.Body = v
	return s
}

type DeleteWorkitemRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 3ef2ef6018d254d660e65f87a6
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
}

func (s DeleteWorkitemRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkitemRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkitemRequest) SetIdentifier(v string) *DeleteWorkitemRequest {
	s.Identifier = &v
	return s
}

type DeleteWorkitemResponseBody struct {
	// example:
	//
	// true/false
	DeleteFlag *bool `json:"deleteFlag,omitempty" xml:"deleteFlag,omitempty"`
	// example:
	//
	// InvalidTagGroup.IdNotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// true/false
	//
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteWorkitemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkitemResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWorkitemResponseBody) SetDeleteFlag(v bool) *DeleteWorkitemResponseBody {
	s.DeleteFlag = &v
	return s
}

func (s *DeleteWorkitemResponseBody) SetErrorCode(v string) *DeleteWorkitemResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteWorkitemResponseBody) SetErrorMsg(v string) *DeleteWorkitemResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *DeleteWorkitemResponseBody) SetRequestId(v string) *DeleteWorkitemResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteWorkitemResponseBody) SetSuccess(v bool) *DeleteWorkitemResponseBody {
	s.Success = &v
	return s
}

type DeleteWorkitemResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteWorkitemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWorkitemResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkitemResponse) GoString() string {
	return s.String()
}

func (s *DeleteWorkitemResponse) SetHeaders(v map[string]*string) *DeleteWorkitemResponse {
	s.Headers = v
	return s
}

func (s *DeleteWorkitemResponse) SetStatusCode(v int32) *DeleteWorkitemResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWorkitemResponse) SetBody(v *DeleteWorkitemResponseBody) *DeleteWorkitemResponse {
	s.Body = v
	return s
}

type DeleteWorkitemAllCommentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// deafe5f33xxxxx6a259d8dafd
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
}

func (s DeleteWorkitemAllCommentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkitemAllCommentRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkitemAllCommentRequest) SetIdentifier(v string) *DeleteWorkitemAllCommentRequest {
	s.Identifier = &v
	return s
}

type DeleteWorkitemAllCommentResponseBody struct {
	// example:
	//
	// true/false
	DeleteFlag *bool `json:"deleteFlag,omitempty" xml:"deleteFlag,omitempty"`
	// example:
	//
	// success
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// A7586FEB-E48D-5579-983F-74981FBFF627
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteWorkitemAllCommentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkitemAllCommentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWorkitemAllCommentResponseBody) SetDeleteFlag(v bool) *DeleteWorkitemAllCommentResponseBody {
	s.DeleteFlag = &v
	return s
}

func (s *DeleteWorkitemAllCommentResponseBody) SetErrorCode(v string) *DeleteWorkitemAllCommentResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteWorkitemAllCommentResponseBody) SetErrorMsg(v string) *DeleteWorkitemAllCommentResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *DeleteWorkitemAllCommentResponseBody) SetRequestId(v string) *DeleteWorkitemAllCommentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteWorkitemAllCommentResponseBody) SetSuccess(v string) *DeleteWorkitemAllCommentResponseBody {
	s.Success = &v
	return s
}

type DeleteWorkitemAllCommentResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteWorkitemAllCommentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWorkitemAllCommentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkitemAllCommentResponse) GoString() string {
	return s.String()
}

func (s *DeleteWorkitemAllCommentResponse) SetHeaders(v map[string]*string) *DeleteWorkitemAllCommentResponse {
	s.Headers = v
	return s
}

func (s *DeleteWorkitemAllCommentResponse) SetStatusCode(v int32) *DeleteWorkitemAllCommentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWorkitemAllCommentResponse) SetBody(v *DeleteWorkitemAllCommentResponseBody) *DeleteWorkitemAllCommentResponse {
	s.Body = v
	return s
}

type DeleteWorkitemCommentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 12xx34
	CommentId *int64 `json:"commentId,omitempty" xml:"commentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e8b2xxxxxx2abdxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
}

func (s DeleteWorkitemCommentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkitemCommentRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkitemCommentRequest) SetCommentId(v int64) *DeleteWorkitemCommentRequest {
	s.CommentId = &v
	return s
}

func (s *DeleteWorkitemCommentRequest) SetIdentifier(v string) *DeleteWorkitemCommentRequest {
	s.Identifier = &v
	return s
}

type DeleteWorkitemCommentResponseBody struct {
	// example:
	//
	// true/false
	DeleteFlag *bool `json:"deleteFlag,omitempty" xml:"deleteFlag,omitempty"`
	// example:
	//
	// success
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteWorkitemCommentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkitemCommentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWorkitemCommentResponseBody) SetDeleteFlag(v bool) *DeleteWorkitemCommentResponseBody {
	s.DeleteFlag = &v
	return s
}

func (s *DeleteWorkitemCommentResponseBody) SetErrorCode(v string) *DeleteWorkitemCommentResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteWorkitemCommentResponseBody) SetErrorMsg(v string) *DeleteWorkitemCommentResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *DeleteWorkitemCommentResponseBody) SetRequestId(v string) *DeleteWorkitemCommentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteWorkitemCommentResponseBody) SetSuccess(v string) *DeleteWorkitemCommentResponseBody {
	s.Success = &v
	return s
}

type DeleteWorkitemCommentResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteWorkitemCommentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWorkitemCommentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkitemCommentResponse) GoString() string {
	return s.String()
}

func (s *DeleteWorkitemCommentResponse) SetHeaders(v map[string]*string) *DeleteWorkitemCommentResponse {
	s.Headers = v
	return s
}

func (s *DeleteWorkitemCommentResponse) SetStatusCode(v int32) *DeleteWorkitemCommentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWorkitemCommentResponse) SetBody(v *DeleteWorkitemCommentResponseBody) *DeleteWorkitemCommentResponse {
	s.Body = v
	return s
}

type EnableDeployKeyRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s EnableDeployKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableDeployKeyRequest) GoString() string {
	return s.String()
}

func (s *EnableDeployKeyRequest) SetAccessToken(v string) *EnableDeployKeyRequest {
	s.AccessToken = &v
	return s
}

func (s *EnableDeployKeyRequest) SetOrganizationId(v string) *EnableDeployKeyRequest {
	s.OrganizationId = &v
	return s
}

type EnableDeployKeyResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *EnableDeployKeyResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s EnableDeployKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableDeployKeyResponseBody) GoString() string {
	return s.String()
}

func (s *EnableDeployKeyResponseBody) SetErrorCode(v string) *EnableDeployKeyResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *EnableDeployKeyResponseBody) SetErrorMessage(v string) *EnableDeployKeyResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *EnableDeployKeyResponseBody) SetRequestId(v string) *EnableDeployKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableDeployKeyResponseBody) SetResult(v *EnableDeployKeyResponseBodyResult) *EnableDeployKeyResponseBody {
	s.Result = v
	return s
}

func (s *EnableDeployKeyResponseBody) SetSuccess(v bool) *EnableDeployKeyResponseBody {
	s.Success = &v
	return s
}

type EnableDeployKeyResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s EnableDeployKeyResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s EnableDeployKeyResponseBodyResult) GoString() string {
	return s.String()
}

func (s *EnableDeployKeyResponseBodyResult) SetResult(v bool) *EnableDeployKeyResponseBodyResult {
	s.Result = &v
	return s
}

type EnableDeployKeyResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableDeployKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableDeployKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableDeployKeyResponse) GoString() string {
	return s.String()
}

func (s *EnableDeployKeyResponse) SetHeaders(v map[string]*string) *EnableDeployKeyResponse {
	s.Headers = v
	return s
}

func (s *EnableDeployKeyResponse) SetStatusCode(v int32) *EnableDeployKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableDeployKeyResponse) SetBody(v *EnableDeployKeyResponseBody) *EnableDeployKeyResponse {
	s.Body = v
	return s
}

type ExecuteChangeRequestReleaseStageRequest struct {
	Params map[string]interface{} `json:"params,omitempty" xml:"params,omitempty"`
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ExecuteChangeRequestReleaseStageRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecuteChangeRequestReleaseStageRequest) GoString() string {
	return s.String()
}

func (s *ExecuteChangeRequestReleaseStageRequest) SetParams(v map[string]interface{}) *ExecuteChangeRequestReleaseStageRequest {
	s.Params = v
	return s
}

func (s *ExecuteChangeRequestReleaseStageRequest) SetOrganizationId(v string) *ExecuteChangeRequestReleaseStageRequest {
	s.OrganizationId = &v
	return s
}

type ExecuteChangeRequestReleaseStageResponseBody struct {
	// example:
	//
	// 1
	Object *int64 `json:"object,omitempty" xml:"object,omitempty"`
	// example:
	//
	// 3259***
	PipelineId *int64 `json:"pipelineId,omitempty" xml:"pipelineId,omitempty"`
	// example:
	//
	// 1
	PipelineRunId *int64 `json:"pipelineRunId,omitempty" xml:"pipelineRunId,omitempty"`
}

func (s ExecuteChangeRequestReleaseStageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExecuteChangeRequestReleaseStageResponseBody) GoString() string {
	return s.String()
}

func (s *ExecuteChangeRequestReleaseStageResponseBody) SetObject(v int64) *ExecuteChangeRequestReleaseStageResponseBody {
	s.Object = &v
	return s
}

func (s *ExecuteChangeRequestReleaseStageResponseBody) SetPipelineId(v int64) *ExecuteChangeRequestReleaseStageResponseBody {
	s.PipelineId = &v
	return s
}

func (s *ExecuteChangeRequestReleaseStageResponseBody) SetPipelineRunId(v int64) *ExecuteChangeRequestReleaseStageResponseBody {
	s.PipelineRunId = &v
	return s
}

type ExecuteChangeRequestReleaseStageResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExecuteChangeRequestReleaseStageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExecuteChangeRequestReleaseStageResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecuteChangeRequestReleaseStageResponse) GoString() string {
	return s.String()
}

func (s *ExecuteChangeRequestReleaseStageResponse) SetHeaders(v map[string]*string) *ExecuteChangeRequestReleaseStageResponse {
	s.Headers = v
	return s
}

func (s *ExecuteChangeRequestReleaseStageResponse) SetStatusCode(v int32) *ExecuteChangeRequestReleaseStageResponse {
	s.StatusCode = &v
	return s
}

func (s *ExecuteChangeRequestReleaseStageResponse) SetBody(v *ExecuteChangeRequestReleaseStageResponseBody) *ExecuteChangeRequestReleaseStageResponse {
	s.Body = v
	return s
}

type ExportInsightCustomValueRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightCustomValueRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightCustomValueRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightCustomValueRequest) SetEndTime(v string) *ExportInsightCustomValueRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightCustomValueRequest) SetMaxResults(v int64) *ExportInsightCustomValueRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightCustomValueRequest) SetNextToken(v string) *ExportInsightCustomValueRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightCustomValueRequest) SetStartTime(v string) *ExportInsightCustomValueRequest {
	s.StartTime = &v
	return s
}

type ExportInsightCustomValueResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                       `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightCustomValueResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightCustomValueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightCustomValueResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightCustomValueResponseBody) SetMaxResults(v int64) *ExportInsightCustomValueResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightCustomValueResponseBody) SetNextToken(v string) *ExportInsightCustomValueResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightCustomValueResponseBody) SetResult(v []*ExportInsightCustomValueResponseBodyResult) *ExportInsightCustomValueResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightCustomValueResponseBody) SetTotalCount(v int64) *ExportInsightCustomValueResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightCustomValueResponseBodyResult struct {
	// example:
	//
	// 66.6
	DoubleValue *float64 `json:"doubleValue,omitempty" xml:"doubleValue,omitempty"`
	// example:
	//
	// 34dde3dfa5e3750151a7c4xxxx
	FieldId *string `json:"fieldId,omitempty" xml:"fieldId,omitempty"`
	// example:
	//
	// 1704950971000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1714669494000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 320737507
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 442d4a6a9980e841dc192a411080xxxx
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	// example:
	//
	// 66
	LongValue *int64 `json:"longValue,omitempty" xml:"longValue,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1ee00fcb1a18c2dc83dafdxxxx
	TargetId *string `json:"targetId,omitempty" xml:"targetId,omitempty"`
	// example:
	//
	// Workitem
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
	// example:
	//
	// string
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 66
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ExportInsightCustomValueResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightCustomValueResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightCustomValueResponseBodyResult) SetDoubleValue(v float64) *ExportInsightCustomValueResponseBodyResult {
	s.DoubleValue = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetFieldId(v string) *ExportInsightCustomValueResponseBodyResult {
	s.FieldId = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetGmtCreate(v int64) *ExportInsightCustomValueResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetGmtModified(v int64) *ExportInsightCustomValueResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetId(v int64) *ExportInsightCustomValueResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetIdentifier(v string) *ExportInsightCustomValueResponseBodyResult {
	s.Identifier = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetIsDeleted(v string) *ExportInsightCustomValueResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetLongValue(v int64) *ExportInsightCustomValueResponseBodyResult {
	s.LongValue = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetOrganizationId(v string) *ExportInsightCustomValueResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetTargetId(v string) *ExportInsightCustomValueResponseBodyResult {
	s.TargetId = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetTargetType(v string) *ExportInsightCustomValueResponseBodyResult {
	s.TargetType = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetType(v string) *ExportInsightCustomValueResponseBodyResult {
	s.Type = &v
	return s
}

func (s *ExportInsightCustomValueResponseBodyResult) SetValue(v string) *ExportInsightCustomValueResponseBodyResult {
	s.Value = &v
	return s
}

type ExportInsightCustomValueResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightCustomValueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightCustomValueResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightCustomValueResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightCustomValueResponse) SetHeaders(v map[string]*string) *ExportInsightCustomValueResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightCustomValueResponse) SetStatusCode(v int32) *ExportInsightCustomValueResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightCustomValueResponse) SetBody(v *ExportInsightCustomValueResponseBody) *ExportInsightCustomValueResponse {
	s.Body = v
	return s
}

type ExportInsightExpectedWorkTimeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightExpectedWorkTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightExpectedWorkTimeRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightExpectedWorkTimeRequest) SetEndTime(v string) *ExportInsightExpectedWorkTimeRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeRequest) SetMaxResults(v int64) *ExportInsightExpectedWorkTimeRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeRequest) SetNextToken(v string) *ExportInsightExpectedWorkTimeRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeRequest) SetStartTime(v string) *ExportInsightExpectedWorkTimeRequest {
	s.StartTime = &v
	return s
}

type ExportInsightExpectedWorkTimeResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                            `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightExpectedWorkTimeResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightExpectedWorkTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightExpectedWorkTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightExpectedWorkTimeResponseBody) SetMaxResults(v int64) *ExportInsightExpectedWorkTimeResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBody) SetNextToken(v string) *ExportInsightExpectedWorkTimeResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBody) SetResult(v []*ExportInsightExpectedWorkTimeResponseBodyResult) *ExportInsightExpectedWorkTimeResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBody) SetTotalCount(v int64) *ExportInsightExpectedWorkTimeResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightExpectedWorkTimeResponseBodyResult struct {
	// example:
	//
	// 1714976497000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1714976520000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 26281535
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// bd4ddc7b0ea0ef2ab52699xxxx
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	// example:
	//
	// 61db9af2148974246be6xxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 6c4687b0179e1d458fedf1xxxx
	ProjectId *string `json:"projectId,omitempty" xml:"projectId,omitempty"`
	// example:
	//
	// 63466a385dc8531eebd7xxxx
	RecorderId *string `json:"recorderId,omitempty" xml:"recorderId,omitempty"`
	// example:
	//
	// projex
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	Type   *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 180
	Value *float64 `json:"value,omitempty" xml:"value,omitempty"`
	// example:
	//
	// de7c6fd3bd4b53f4d9e279xxxx
	WorkitemId *string `json:"workitemId,omitempty" xml:"workitemId,omitempty"`
}

func (s ExportInsightExpectedWorkTimeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightExpectedWorkTimeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetGmtCreate(v int64) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetGmtModified(v int64) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetId(v int64) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetIdentifier(v string) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.Identifier = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetIsDeleted(v string) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetOrganizationId(v string) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetProjectId(v string) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetRecorderId(v string) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.RecorderId = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetSource(v string) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.Source = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetType(v string) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.Type = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetValue(v float64) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.Value = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponseBodyResult) SetWorkitemId(v string) *ExportInsightExpectedWorkTimeResponseBodyResult {
	s.WorkitemId = &v
	return s
}

type ExportInsightExpectedWorkTimeResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightExpectedWorkTimeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightExpectedWorkTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightExpectedWorkTimeResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightExpectedWorkTimeResponse) SetHeaders(v map[string]*string) *ExportInsightExpectedWorkTimeResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponse) SetStatusCode(v int32) *ExportInsightExpectedWorkTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightExpectedWorkTimeResponse) SetBody(v *ExportInsightExpectedWorkTimeResponseBody) *ExportInsightExpectedWorkTimeResponse {
	s.Body = v
	return s
}

type ExportInsightFieldRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightFieldRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightFieldRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightFieldRequest) SetEndTime(v string) *ExportInsightFieldRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightFieldRequest) SetMaxResults(v int64) *ExportInsightFieldRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightFieldRequest) SetNextToken(v string) *ExportInsightFieldRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightFieldRequest) SetStartTime(v string) *ExportInsightFieldRequest {
	s.StartTime = &v
	return s
}

type ExportInsightFieldResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                 `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightFieldResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightFieldResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightFieldResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightFieldResponseBody) SetMaxResults(v int64) *ExportInsightFieldResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightFieldResponseBody) SetNextToken(v string) *ExportInsightFieldResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightFieldResponseBody) SetResult(v []*ExportInsightFieldResponseBodyResult) *ExportInsightFieldResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightFieldResponseBody) SetTotalCount(v int64) *ExportInsightFieldResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightFieldResponseBodyResult struct {
	// example:
	//
	// 9798551
	FieldId   *string `json:"fieldId,omitempty" xml:"fieldId,omitempty"`
	FieldName *string `json:"fieldName,omitempty" xml:"fieldName,omitempty"`
	// example:
	//
	// 1713752162000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1714977502000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 666666
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// field-444153
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	// example:
	//
	// N
	IsSystem    *string `json:"isSystem,omitempty" xml:"isSystem,omitempty"`
	OptionValue *string `json:"optionValue,omitempty" xml:"optionValue,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 150
	Position *int32 `json:"position,omitempty" xml:"position,omitempty"`
	// example:
	//
	// global
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// projex
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	TargetId *string `json:"targetId,omitempty" xml:"targetId,omitempty"`
	// example:
	//
	// organization
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
	// example:
	//
	// string
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ExportInsightFieldResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightFieldResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightFieldResponseBodyResult) SetFieldId(v string) *ExportInsightFieldResponseBodyResult {
	s.FieldId = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetFieldName(v string) *ExportInsightFieldResponseBodyResult {
	s.FieldName = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetGmtCreate(v int64) *ExportInsightFieldResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetGmtModified(v int64) *ExportInsightFieldResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetId(v int64) *ExportInsightFieldResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetIdentifier(v string) *ExportInsightFieldResponseBodyResult {
	s.Identifier = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetIsDeleted(v string) *ExportInsightFieldResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetIsSystem(v string) *ExportInsightFieldResponseBodyResult {
	s.IsSystem = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetOptionValue(v string) *ExportInsightFieldResponseBodyResult {
	s.OptionValue = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetOrganizationId(v string) *ExportInsightFieldResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetPosition(v int32) *ExportInsightFieldResponseBodyResult {
	s.Position = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetScope(v string) *ExportInsightFieldResponseBodyResult {
	s.Scope = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetSource(v string) *ExportInsightFieldResponseBodyResult {
	s.Source = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetTargetId(v string) *ExportInsightFieldResponseBodyResult {
	s.TargetId = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetTargetType(v string) *ExportInsightFieldResponseBodyResult {
	s.TargetType = &v
	return s
}

func (s *ExportInsightFieldResponseBodyResult) SetType(v string) *ExportInsightFieldResponseBodyResult {
	s.Type = &v
	return s
}

type ExportInsightFieldResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightFieldResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightFieldResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightFieldResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightFieldResponse) SetHeaders(v map[string]*string) *ExportInsightFieldResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightFieldResponse) SetStatusCode(v int32) *ExportInsightFieldResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightFieldResponse) SetBody(v *ExportInsightFieldResponseBody) *ExportInsightFieldResponse {
	s.Body = v
	return s
}

type ExportInsightSpaceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightSpaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSpaceRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightSpaceRequest) SetEndTime(v string) *ExportInsightSpaceRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightSpaceRequest) SetMaxResults(v int64) *ExportInsightSpaceRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightSpaceRequest) SetNextToken(v string) *ExportInsightSpaceRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightSpaceRequest) SetStartTime(v string) *ExportInsightSpaceRequest {
	s.StartTime = &v
	return s
}

type ExportInsightSpaceResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                 `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightSpaceResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightSpaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSpaceResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightSpaceResponseBody) SetMaxResults(v int64) *ExportInsightSpaceResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightSpaceResponseBody) SetNextToken(v string) *ExportInsightSpaceResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightSpaceResponseBody) SetResult(v []*ExportInsightSpaceResponseBodyResult) *ExportInsightSpaceResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightSpaceResponseBody) SetTotalCount(v int64) *ExportInsightSpaceResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightSpaceResponseBodyResult struct {
	// example:
	//
	// Project
	Category    *string `json:"category,omitempty" xml:"category,omitempty"`
	CustomCode  *string `json:"customCode,omitempty" xml:"customCode,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1706510424000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1706511201000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 11034222
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 83a2861bbb43b270a04b42xxxx
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	Name      *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 61db9af2148974246be6xxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// projex
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// 10
	Stage  *string `json:"stage,omitempty" xml:"stage,omitempty"`
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// Project
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ExportInsightSpaceResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSpaceResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightSpaceResponseBodyResult) SetCategory(v string) *ExportInsightSpaceResponseBodyResult {
	s.Category = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetCustomCode(v string) *ExportInsightSpaceResponseBodyResult {
	s.CustomCode = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetDescription(v string) *ExportInsightSpaceResponseBodyResult {
	s.Description = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetGmtCreate(v int64) *ExportInsightSpaceResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetGmtModified(v int64) *ExportInsightSpaceResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetId(v int64) *ExportInsightSpaceResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetIdentifier(v string) *ExportInsightSpaceResponseBodyResult {
	s.Identifier = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetIsDeleted(v string) *ExportInsightSpaceResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetName(v string) *ExportInsightSpaceResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetOrganizationId(v string) *ExportInsightSpaceResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetSource(v string) *ExportInsightSpaceResponseBodyResult {
	s.Source = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetStage(v string) *ExportInsightSpaceResponseBodyResult {
	s.Stage = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetStatus(v string) *ExportInsightSpaceResponseBodyResult {
	s.Status = &v
	return s
}

func (s *ExportInsightSpaceResponseBodyResult) SetType(v string) *ExportInsightSpaceResponseBodyResult {
	s.Type = &v
	return s
}

type ExportInsightSpaceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightSpaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightSpaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSpaceResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightSpaceResponse) SetHeaders(v map[string]*string) *ExportInsightSpaceResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightSpaceResponse) SetStatusCode(v int32) *ExportInsightSpaceResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightSpaceResponse) SetBody(v *ExportInsightSpaceResponseBody) *ExportInsightSpaceResponse {
	s.Body = v
	return s
}

type ExportInsightSpaceRefRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightSpaceRefRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSpaceRefRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightSpaceRefRequest) SetEndTime(v string) *ExportInsightSpaceRefRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightSpaceRefRequest) SetMaxResults(v int64) *ExportInsightSpaceRefRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightSpaceRefRequest) SetNextToken(v string) *ExportInsightSpaceRefRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightSpaceRefRequest) SetStartTime(v string) *ExportInsightSpaceRefRequest {
	s.StartTime = &v
	return s
}

type ExportInsightSpaceRefResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                    `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightSpaceRefResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightSpaceRefResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSpaceRefResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightSpaceRefResponseBody) SetMaxResults(v int64) *ExportInsightSpaceRefResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBody) SetNextToken(v string) *ExportInsightSpaceRefResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBody) SetResult(v []*ExportInsightSpaceRefResponseBodyResult) *ExportInsightSpaceRefResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightSpaceRefResponseBody) SetTotalCount(v int64) *ExportInsightSpaceRefResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightSpaceRefResponseBodyResult struct {
	// example:
	//
	// 65659358c319d2a0f912xxxx
	CreatorId *string `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// 7bc2be989727d0d4c9801fxxxx
	FromId *string `json:"fromId,omitempty" xml:"fromId,omitempty"`
	// example:
	//
	// 1704267849000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1704267849000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 356525
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 49565
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	// example:
	//
	// 65659358c319d2a0f912xxxx
	ModifierId *string `json:"modifierId,omitempty" xml:"modifierId,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 732026500a48d7a74f8b43xxxx
	ToId *string `json:"toId,omitempty" xml:"toId,omitempty"`
	// example:
	//
	// ASSOCIATED
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ExportInsightSpaceRefResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSpaceRefResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetCreatorId(v string) *ExportInsightSpaceRefResponseBodyResult {
	s.CreatorId = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetFromId(v string) *ExportInsightSpaceRefResponseBodyResult {
	s.FromId = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetGmtCreate(v int64) *ExportInsightSpaceRefResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetGmtModified(v int64) *ExportInsightSpaceRefResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetId(v int64) *ExportInsightSpaceRefResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetIdentifier(v string) *ExportInsightSpaceRefResponseBodyResult {
	s.Identifier = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetIsDeleted(v string) *ExportInsightSpaceRefResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetModifierId(v string) *ExportInsightSpaceRefResponseBodyResult {
	s.ModifierId = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetOrganizationId(v string) *ExportInsightSpaceRefResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetToId(v string) *ExportInsightSpaceRefResponseBodyResult {
	s.ToId = &v
	return s
}

func (s *ExportInsightSpaceRefResponseBodyResult) SetType(v string) *ExportInsightSpaceRefResponseBodyResult {
	s.Type = &v
	return s
}

type ExportInsightSpaceRefResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightSpaceRefResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightSpaceRefResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSpaceRefResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightSpaceRefResponse) SetHeaders(v map[string]*string) *ExportInsightSpaceRefResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightSpaceRefResponse) SetStatusCode(v int32) *ExportInsightSpaceRefResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightSpaceRefResponse) SetBody(v *ExportInsightSpaceRefResponseBody) *ExportInsightSpaceRefResponse {
	s.Body = v
	return s
}

type ExportInsightSprintRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightSprintRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSprintRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightSprintRequest) SetEndTime(v string) *ExportInsightSprintRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightSprintRequest) SetMaxResults(v int64) *ExportInsightSprintRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightSprintRequest) SetNextToken(v string) *ExportInsightSprintRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightSprintRequest) SetStartTime(v string) *ExportInsightSprintRequest {
	s.StartTime = &v
	return s
}

type ExportInsightSprintResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                  `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightSprintResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightSprintResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSprintResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightSprintResponseBody) SetMaxResults(v int64) *ExportInsightSprintResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightSprintResponseBody) SetNextToken(v string) *ExportInsightSprintResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightSprintResponseBody) SetResult(v []*ExportInsightSprintResponseBodyResult) *ExportInsightSprintResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightSprintResponseBody) SetTotalCount(v int64) *ExportInsightSprintResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightSprintResponseBodyResult struct {
	// example:
	//
	// 1711936113000
	ActualEnd *int64 `json:"actualEnd,omitempty" xml:"actualEnd,omitempty"`
	// example:
	//
	// 1711936113000
	ActualStart *int64 `json:"actualStart,omitempty" xml:"actualStart,omitempty"`
	// example:
	//
	// 1710989643000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1711728000000
	GmtEnd *int64 `json:"gmtEnd,omitempty" xml:"gmtEnd,omitempty"`
	// example:
	//
	// 1711936113000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 1711936113000
	GmtStart *int64 `json:"gmtStart,omitempty" xml:"gmtStart,omitempty"`
	// example:
	//
	// 18471761
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// e4895cadc86632f34dfaa7xxxx
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	Name      *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 385e7e5a4be6791f0a5185xxxx
	ProjectId *string `json:"projectId,omitempty" xml:"projectId,omitempty"`
	// example:
	//
	// projex
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// 50
	Status *int32 `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 60.0
	WorkTimeCapacity *float64 `json:"workTimeCapacity,omitempty" xml:"workTimeCapacity,omitempty"`
}

func (s ExportInsightSprintResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSprintResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightSprintResponseBodyResult) SetActualEnd(v int64) *ExportInsightSprintResponseBodyResult {
	s.ActualEnd = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetActualStart(v int64) *ExportInsightSprintResponseBodyResult {
	s.ActualStart = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetGmtCreate(v int64) *ExportInsightSprintResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetGmtEnd(v int64) *ExportInsightSprintResponseBodyResult {
	s.GmtEnd = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetGmtModified(v int64) *ExportInsightSprintResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetGmtStart(v int64) *ExportInsightSprintResponseBodyResult {
	s.GmtStart = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetId(v int64) *ExportInsightSprintResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetIdentifier(v string) *ExportInsightSprintResponseBodyResult {
	s.Identifier = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetIsDeleted(v string) *ExportInsightSprintResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetName(v string) *ExportInsightSprintResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetOrganizationId(v string) *ExportInsightSprintResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetProjectId(v string) *ExportInsightSprintResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetSource(v string) *ExportInsightSprintResponseBodyResult {
	s.Source = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetStatus(v int32) *ExportInsightSprintResponseBodyResult {
	s.Status = &v
	return s
}

func (s *ExportInsightSprintResponseBodyResult) SetWorkTimeCapacity(v float64) *ExportInsightSprintResponseBodyResult {
	s.WorkTimeCapacity = &v
	return s
}

type ExportInsightSprintResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightSprintResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightSprintResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightSprintResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightSprintResponse) SetHeaders(v map[string]*string) *ExportInsightSprintResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightSprintResponse) SetStatusCode(v int32) *ExportInsightSprintResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightSprintResponse) SetBody(v *ExportInsightSprintResponseBody) *ExportInsightSprintResponse {
	s.Body = v
	return s
}

type ExportInsightTagRefRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightTagRefRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightTagRefRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightTagRefRequest) SetEndTime(v string) *ExportInsightTagRefRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightTagRefRequest) SetMaxResults(v int64) *ExportInsightTagRefRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightTagRefRequest) SetNextToken(v string) *ExportInsightTagRefRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightTagRefRequest) SetStartTime(v string) *ExportInsightTagRefRequest {
	s.StartTime = &v
	return s
}

type ExportInsightTagRefResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                  `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightTagRefResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightTagRefResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightTagRefResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightTagRefResponseBody) SetMaxResults(v int64) *ExportInsightTagRefResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightTagRefResponseBody) SetNextToken(v string) *ExportInsightTagRefResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightTagRefResponseBody) SetResult(v []*ExportInsightTagRefResponseBodyResult) *ExportInsightTagRefResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightTagRefResponseBody) SetTotalCount(v int64) *ExportInsightTagRefResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightTagRefResponseBodyResult struct {
	// example:
	//
	// 1696660187000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1696660187000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 41317426
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 8545272
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	// example:
	//
	// 1
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 19e0bc5348ccbe6c0d00fbxxxx
	TagId *string `json:"tagId,omitempty" xml:"tagId,omitempty"`
	// example:
	//
	// bde89961b5a4acc8cf54eaxxxx
	TargetId *string `json:"targetId,omitempty" xml:"targetId,omitempty"`
	// example:
	//
	// Workitem
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
}

func (s ExportInsightTagRefResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightTagRefResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightTagRefResponseBodyResult) SetGmtCreate(v int64) *ExportInsightTagRefResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightTagRefResponseBodyResult) SetGmtModified(v int64) *ExportInsightTagRefResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightTagRefResponseBodyResult) SetId(v int64) *ExportInsightTagRefResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightTagRefResponseBodyResult) SetIdentifier(v string) *ExportInsightTagRefResponseBodyResult {
	s.Identifier = &v
	return s
}

func (s *ExportInsightTagRefResponseBodyResult) SetIsDeleted(v string) *ExportInsightTagRefResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightTagRefResponseBodyResult) SetName(v string) *ExportInsightTagRefResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ExportInsightTagRefResponseBodyResult) SetOrganizationId(v string) *ExportInsightTagRefResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightTagRefResponseBodyResult) SetTagId(v string) *ExportInsightTagRefResponseBodyResult {
	s.TagId = &v
	return s
}

func (s *ExportInsightTagRefResponseBodyResult) SetTargetId(v string) *ExportInsightTagRefResponseBodyResult {
	s.TargetId = &v
	return s
}

func (s *ExportInsightTagRefResponseBodyResult) SetTargetType(v string) *ExportInsightTagRefResponseBodyResult {
	s.TargetType = &v
	return s
}

type ExportInsightTagRefResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightTagRefResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightTagRefResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightTagRefResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightTagRefResponse) SetHeaders(v map[string]*string) *ExportInsightTagRefResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightTagRefResponse) SetStatusCode(v int32) *ExportInsightTagRefResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightTagRefResponse) SetBody(v *ExportInsightTagRefResponseBody) *ExportInsightTagRefResponse {
	s.Body = v
	return s
}

type ExportInsightWorkTimeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightWorkTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkTimeRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkTimeRequest) SetEndTime(v string) *ExportInsightWorkTimeRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightWorkTimeRequest) SetMaxResults(v int64) *ExportInsightWorkTimeRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightWorkTimeRequest) SetNextToken(v string) *ExportInsightWorkTimeRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightWorkTimeRequest) SetStartTime(v string) *ExportInsightWorkTimeRequest {
	s.StartTime = &v
	return s
}

type ExportInsightWorkTimeResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                    `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightWorkTimeResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightWorkTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkTimeResponseBody) SetMaxResults(v int64) *ExportInsightWorkTimeResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBody) SetNextToken(v string) *ExportInsightWorkTimeResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBody) SetResult(v []*ExportInsightWorkTimeResponseBodyResult) *ExportInsightWorkTimeResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightWorkTimeResponseBody) SetTotalCount(v int64) *ExportInsightWorkTimeResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightWorkTimeResponseBodyResult struct {
	// example:
	//
	// 120
	ActualValue *float64 `json:"actualValue,omitempty" xml:"actualValue,omitempty"`
	Description *string  `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1714978610000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1715011199999
	GmtEnd *int64 `json:"gmtEnd,omitempty" xml:"gmtEnd,omitempty"`
	// example:
	//
	// 1714978610000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 1714924800000
	GmtStart *int64 `json:"gmtStart,omitempty" xml:"gmtStart,omitempty"`
	// example:
	//
	// 49506082
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// da70ce5824231ca3c04ef808e0
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 09670872890eb1a0bb998exxxx
	ProjectId *string `json:"projectId,omitempty" xml:"projectId,omitempty"`
	// example:
	//
	// 65659358c319d2a0f912xxxx
	RecorderId *string `json:"recorderId,omitempty" xml:"recorderId,omitempty"`
	// example:
	//
	// projex
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	Type   *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 000000000cd82d3df50d5e5a5c094094fd7b4461
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
	// example:
	//
	// 120
	Value *int64 `json:"value,omitempty" xml:"value,omitempty"`
	// example:
	//
	// 17bc1cf9a037a15fc9ce76xxxx
	WorkitemId *string `json:"workitemId,omitempty" xml:"workitemId,omitempty"`
}

func (s ExportInsightWorkTimeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkTimeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetActualValue(v float64) *ExportInsightWorkTimeResponseBodyResult {
	s.ActualValue = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetDescription(v string) *ExportInsightWorkTimeResponseBodyResult {
	s.Description = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetGmtCreate(v int64) *ExportInsightWorkTimeResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetGmtEnd(v int64) *ExportInsightWorkTimeResponseBodyResult {
	s.GmtEnd = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetGmtModified(v int64) *ExportInsightWorkTimeResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetGmtStart(v int64) *ExportInsightWorkTimeResponseBodyResult {
	s.GmtStart = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetId(v int64) *ExportInsightWorkTimeResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetIdentifier(v string) *ExportInsightWorkTimeResponseBodyResult {
	s.Identifier = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetIsDeleted(v string) *ExportInsightWorkTimeResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetOrganizationId(v string) *ExportInsightWorkTimeResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetProjectId(v string) *ExportInsightWorkTimeResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetRecorderId(v string) *ExportInsightWorkTimeResponseBodyResult {
	s.RecorderId = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetSource(v string) *ExportInsightWorkTimeResponseBodyResult {
	s.Source = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetType(v string) *ExportInsightWorkTimeResponseBodyResult {
	s.Type = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetUuid(v string) *ExportInsightWorkTimeResponseBodyResult {
	s.Uuid = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetValue(v int64) *ExportInsightWorkTimeResponseBodyResult {
	s.Value = &v
	return s
}

func (s *ExportInsightWorkTimeResponseBodyResult) SetWorkitemId(v string) *ExportInsightWorkTimeResponseBodyResult {
	s.WorkitemId = &v
	return s
}

type ExportInsightWorkTimeResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightWorkTimeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightWorkTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkTimeResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkTimeResponse) SetHeaders(v map[string]*string) *ExportInsightWorkTimeResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightWorkTimeResponse) SetStatusCode(v int32) *ExportInsightWorkTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightWorkTimeResponse) SetBody(v *ExportInsightWorkTimeResponseBody) *ExportInsightWorkTimeResponse {
	s.Body = v
	return s
}

type ExportInsightWorkitemStatusRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightWorkitemStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemStatusRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemStatusRequest) SetEndTime(v string) *ExportInsightWorkitemStatusRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightWorkitemStatusRequest) SetMaxResults(v int64) *ExportInsightWorkitemStatusRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightWorkitemStatusRequest) SetNextToken(v string) *ExportInsightWorkitemStatusRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightWorkitemStatusRequest) SetStartTime(v string) *ExportInsightWorkitemStatusRequest {
	s.StartTime = &v
	return s
}

type ExportInsightWorkitemStatusResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                          `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightWorkitemStatusResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightWorkitemStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemStatusResponseBody) SetMaxResults(v int64) *ExportInsightWorkitemStatusResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBody) SetNextToken(v string) *ExportInsightWorkitemStatusResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBody) SetResult(v []*ExportInsightWorkitemStatusResponseBodyResult) *ExportInsightWorkitemStatusResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBody) SetTotalCount(v int64) *ExportInsightWorkitemStatusResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightWorkitemStatusResponseBodyResult struct {
	// example:
	//
	// 65e836b981d758be7a25xxxx
	AssignedToId *string `json:"assignedToId,omitempty" xml:"assignedToId,omitempty"`
	// example:
	//
	// 65e836b981d758be7a25xxxx
	CreatorId *string `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// 10
	ExpectedWorkTime *int64 `json:"expectedWorkTime,omitempty" xml:"expectedWorkTime,omitempty"`
	// example:
	//
	// 33166339200000
	GmtClosed *int64 `json:"gmtClosed,omitempty" xml:"gmtClosed,omitempty"`
	// example:
	//
	// 1713430241000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 33166339200000
	GmtDue *int64 `json:"gmtDue,omitempty" xml:"gmtDue,omitempty"`
	// example:
	//
	// 1713430241000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 33166339200000
	GmtStart *int64 `json:"gmtStart,omitempty" xml:"gmtStart,omitempty"`
	// example:
	//
	// 33166339200000
	GmtTodo *int64 `json:"gmtTodo,omitempty" xml:"gmtTodo,omitempty"`
	// example:
	//
	// 701615370
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// N
	IsArchived *string `json:"isArchived,omitempty" xml:"isArchived,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	// example:
	//
	// Y
	IsDone *string `json:"isDone,omitempty" xml:"isDone,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// c3640ab6233fcc10a7e3aaxxxx
	ParentId *string `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// 6135b21fb383ef39551cxxxx,63466a385dc8531eebd7xxxx
	ParticipantIds *string `json:"participantIds,omitempty" xml:"participantIds,omitempty"`
	// example:
	//
	// 10
	Phase *int32 `json:"phase,omitempty" xml:"phase,omitempty"`
	// example:
	//
	// 0
	Priority  *int32  `json:"priority,omitempty" xml:"priority,omitempty"`
	ProductId *string `json:"productId,omitempty" xml:"productId,omitempty"`
	// example:
	//
	// 505ac6433dfbda8df0b08bxxxx
	ProjectId    *string `json:"projectId,omitempty" xml:"projectId,omitempty"`
	SerialNumber *int32  `json:"serialNumber,omitempty" xml:"serialNumber,omitempty"`
	// example:
	//
	// projex
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// 505ac6433dfbda8df0b08bxxxx
	SprintId *string `json:"sprintId,omitempty" xml:"sprintId,omitempty"`
	// example:
	//
	// 10
	Stage  *int32  `json:"stage,omitempty" xml:"stage,omitempty"`
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 100005
	StatusId *string `json:"statusId,omitempty" xml:"statusId,omitempty"`
	// example:
	//
	// 10.0
	StoryPoint *float32 `json:"storyPoint,omitempty" xml:"storyPoint,omitempty"`
	// example:
	//
	// 9uy29901re573f561d69xxxx
	SubType *string `json:"subType,omitempty" xml:"subType,omitempty"`
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// example:
	//
	// 1
	Type      *int32  `json:"type,omitempty" xml:"type,omitempty"`
	VersionId *string `json:"versionId,omitempty" xml:"versionId,omitempty"`
	// example:
	//
	// [6a8cdda167415bea1506c7262c]
	Versions *string `json:"versions,omitempty" xml:"versions,omitempty"`
	// example:
	//
	// 10
	WorkTime *int64 `json:"workTime,omitempty" xml:"workTime,omitempty"`
	// example:
	//
	// 636f661a612a945bbcdb4cxxxx
	WorkitemId *string `json:"workitemId,omitempty" xml:"workitemId,omitempty"`
}

func (s ExportInsightWorkitemStatusResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemStatusResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetAssignedToId(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.AssignedToId = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetCreatorId(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.CreatorId = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetExpectedWorkTime(v int64) *ExportInsightWorkitemStatusResponseBodyResult {
	s.ExpectedWorkTime = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetGmtClosed(v int64) *ExportInsightWorkitemStatusResponseBodyResult {
	s.GmtClosed = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetGmtCreate(v int64) *ExportInsightWorkitemStatusResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetGmtDue(v int64) *ExportInsightWorkitemStatusResponseBodyResult {
	s.GmtDue = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetGmtModified(v int64) *ExportInsightWorkitemStatusResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetGmtStart(v int64) *ExportInsightWorkitemStatusResponseBodyResult {
	s.GmtStart = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetGmtTodo(v int64) *ExportInsightWorkitemStatusResponseBodyResult {
	s.GmtTodo = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetId(v int64) *ExportInsightWorkitemStatusResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetIsArchived(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.IsArchived = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetIsDeleted(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetIsDone(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.IsDone = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetOrganizationId(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetParentId(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.ParentId = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetParticipantIds(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.ParticipantIds = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetPhase(v int32) *ExportInsightWorkitemStatusResponseBodyResult {
	s.Phase = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetPriority(v int32) *ExportInsightWorkitemStatusResponseBodyResult {
	s.Priority = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetProductId(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.ProductId = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetProjectId(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetSerialNumber(v int32) *ExportInsightWorkitemStatusResponseBodyResult {
	s.SerialNumber = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetSource(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.Source = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetSprintId(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.SprintId = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetStage(v int32) *ExportInsightWorkitemStatusResponseBodyResult {
	s.Stage = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetStatus(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.Status = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetStatusId(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.StatusId = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetStoryPoint(v float32) *ExportInsightWorkitemStatusResponseBodyResult {
	s.StoryPoint = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetSubType(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.SubType = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetSubject(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.Subject = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetType(v int32) *ExportInsightWorkitemStatusResponseBodyResult {
	s.Type = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetVersionId(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.VersionId = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetVersions(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.Versions = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetWorkTime(v int64) *ExportInsightWorkitemStatusResponseBodyResult {
	s.WorkTime = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponseBodyResult) SetWorkitemId(v string) *ExportInsightWorkitemStatusResponseBodyResult {
	s.WorkitemId = &v
	return s
}

type ExportInsightWorkitemStatusResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightWorkitemStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightWorkitemStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemStatusResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemStatusResponse) SetHeaders(v map[string]*string) *ExportInsightWorkitemStatusResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightWorkitemStatusResponse) SetStatusCode(v int32) *ExportInsightWorkitemStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightWorkitemStatusResponse) SetBody(v *ExportInsightWorkitemStatusResponseBody) *ExportInsightWorkitemStatusResponse {
	s.Body = v
	return s
}

type ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest) SetEndTime(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest) SetMaxResults(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest) SetNextToken(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest) SetStartTime(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest {
	s.StartTime = &v
	return s
}

type ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                                                 `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody) SetMaxResults(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody) SetNextToken(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody) SetResult(v []*ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody) SetTotalCount(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult struct {
	// example:
	//
	// 65e836b981d758be7a25xxxx
	AssignedToId *string `json:"assignedToId,omitempty" xml:"assignedToId,omitempty"`
	// example:
	//
	// 65e836b981d758be7a25xxxx
	CreatorId *string `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// 10
	ExpectedWorkTime *int64 `json:"expectedWorkTime,omitempty" xml:"expectedWorkTime,omitempty"`
	// example:
	//
	// 123
	ExtraId *int64 `json:"extraId,omitempty" xml:"extraId,omitempty"`
	// example:
	//
	// N
	ExtraIsDeleted *string `json:"extraIsDeleted,omitempty" xml:"extraIsDeleted,omitempty"`
	// example:
	//
	// 10
	FoundPhase *int32 `json:"foundPhase,omitempty" xml:"foundPhase,omitempty"`
	// example:
	//
	// 33166339200000
	GmtClosed *int64 `json:"gmtClosed,omitempty" xml:"gmtClosed,omitempty"`
	// example:
	//
	// 1713430241000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 33166339200000
	GmtDue   *int64  `json:"gmtDue,omitempty" xml:"gmtDue,omitempty"`
	GmtFixed *string `json:"gmtFixed,omitempty" xml:"gmtFixed,omitempty"`
	// example:
	//
	// 1714755985000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 33166339200000
	GmtStart *int64 `json:"gmtStart,omitempty" xml:"gmtStart,omitempty"`
	// example:
	//
	// 33166339200000
	GmtTodo *int64 `json:"gmtTodo,omitempty" xml:"gmtTodo,omitempty"`
	// example:
	//
	// 701615370
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// N
	IsArchived *string `json:"isArchived,omitempty" xml:"isArchived,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	// example:
	//
	// Y
	IsDone   *string `json:"isDone,omitempty" xml:"isDone,omitempty"`
	IsStupid *string `json:"isStupid,omitempty" xml:"isStupid,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// a80a203a9078a7a1b1f2c6xxxx
	ParentId *string `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// 6135b21fb383ef39551cf02e,63466a385dc8531eebd764e9
	ParticipantIds *string `json:"participantIds,omitempty" xml:"participantIds,omitempty"`
	// example:
	//
	// 10
	Phase *int32 `json:"phase,omitempty" xml:"phase,omitempty"`
	// example:
	//
	// 2
	Priority  *int32  `json:"priority,omitempty" xml:"priority,omitempty"`
	ProductId *string `json:"productId,omitempty" xml:"productId,omitempty"`
	// example:
	//
	// 6732a29d846bf998dc09e7xxxx
	ProjectId    *string `json:"projectId,omitempty" xml:"projectId,omitempty"`
	ReopenNum    *int32  `json:"reopenNum,omitempty" xml:"reopenNum,omitempty"`
	SerialNumber *int32  `json:"serialNumber,omitempty" xml:"serialNumber,omitempty"`
	SeriousLevel *int32  `json:"seriousLevel,omitempty" xml:"seriousLevel,omitempty"`
	Solution     *string `json:"solution,omitempty" xml:"solution,omitempty"`
	// example:
	//
	// projex
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// 731c83a40bbf3c2f080e07xxxx
	SprintId *string `json:"sprintId,omitempty" xml:"sprintId,omitempty"`
	// example:
	//
	// 10
	Stage  *int32  `json:"stage,omitempty" xml:"stage,omitempty"`
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 100005
	StatusId *string `json:"statusId,omitempty" xml:"statusId,omitempty"`
	// example:
	//
	// 10.0
	StoryPoint *float32 `json:"storyPoint,omitempty" xml:"storyPoint,omitempty"`
	// example:
	//
	// 9uy29901re573f561d69xxxx
	SubType *string `json:"subType,omitempty" xml:"subType,omitempty"`
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 65e836b981d758be7a25xxxx
	VerifierId *string `json:"verifierId,omitempty" xml:"verifierId,omitempty"`
	VersionId  *string `json:"versionId,omitempty" xml:"versionId,omitempty"`
	// example:
	//
	// {6a8cdda167415bea1506c7262c}
	Versions *string `json:"versions,omitempty" xml:"versions,omitempty"`
	// example:
	//
	// 10
	WorkTime *int64 `json:"workTime,omitempty" xml:"workTime,omitempty"`
	// example:
	//
	// 636f661a612a945bbcdb4cxxxx
	WorkitemId *string `json:"workitemId,omitempty" xml:"workitemId,omitempty"`
}

func (s ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetAssignedToId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.AssignedToId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetCreatorId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.CreatorId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetExpectedWorkTime(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.ExpectedWorkTime = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetExtraId(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.ExtraId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetExtraIsDeleted(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.ExtraIsDeleted = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetFoundPhase(v int32) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.FoundPhase = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetGmtClosed(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.GmtClosed = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetGmtCreate(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetGmtDue(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.GmtDue = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetGmtFixed(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.GmtFixed = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetGmtModified(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetGmtStart(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.GmtStart = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetGmtTodo(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.GmtTodo = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetId(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetIsArchived(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.IsArchived = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetIsDeleted(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetIsDone(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.IsDone = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetIsStupid(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.IsStupid = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetOrganizationId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetParentId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.ParentId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetParticipantIds(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.ParticipantIds = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetPhase(v int32) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.Phase = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetPriority(v int32) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.Priority = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetProductId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.ProductId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetProjectId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetReopenNum(v int32) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.ReopenNum = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetSerialNumber(v int32) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.SerialNumber = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetSeriousLevel(v int32) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.SeriousLevel = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetSolution(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.Solution = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetSource(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.Source = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetSprintId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.SprintId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetStage(v int32) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.Stage = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetStatus(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.Status = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetStatusId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.StatusId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetStoryPoint(v float32) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.StoryPoint = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetSubType(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.SubType = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetSubject(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.Subject = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetType(v int32) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.Type = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetVerifierId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.VerifierId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetVersionId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.VersionId = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetVersions(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.Versions = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetWorkTime(v int64) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.WorkTime = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult) SetWorkitemId(v string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBodyResult {
	s.WorkitemId = &v
	return s
}

type ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse struct {
	Headers    map[string]*string                                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse) SetHeaders(v map[string]*string) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse) SetStatusCode(v int32) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse) SetBody(v *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponseBody) *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse {
	s.Body = v
	return s
}

type ExportInsightWorkitemVersionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportInsightWorkitemVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemVersionRequest) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemVersionRequest) SetEndTime(v string) *ExportInsightWorkitemVersionRequest {
	s.EndTime = &v
	return s
}

func (s *ExportInsightWorkitemVersionRequest) SetMaxResults(v int64) *ExportInsightWorkitemVersionRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightWorkitemVersionRequest) SetNextToken(v string) *ExportInsightWorkitemVersionRequest {
	s.NextToken = &v
	return s
}

func (s *ExportInsightWorkitemVersionRequest) SetStartTime(v string) *ExportInsightWorkitemVersionRequest {
	s.StartTime = &v
	return s
}

type ExportInsightWorkitemVersionResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                           `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportInsightWorkitemVersionResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportInsightWorkitemVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemVersionResponseBody) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemVersionResponseBody) SetMaxResults(v int64) *ExportInsightWorkitemVersionResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBody) SetNextToken(v string) *ExportInsightWorkitemVersionResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBody) SetResult(v []*ExportInsightWorkitemVersionResponseBodyResult) *ExportInsightWorkitemVersionResponseBody {
	s.Result = v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBody) SetTotalCount(v int64) *ExportInsightWorkitemVersionResponseBody {
	s.TotalCount = &v
	return s
}

type ExportInsightWorkitemVersionResponseBodyResult struct {
	// example:
	//
	// 1704251228000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1704251228000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 1704902400000
	GmtPublish *int64 `json:"gmtPublish,omitempty" xml:"gmtPublish,omitempty"`
	// example:
	//
	// 1704297600000
	GmtStart *int64 `json:"gmtStart,omitempty" xml:"gmtStart,omitempty"`
	// example:
	//
	// 648131
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 7ba6e8261b973c976df76b7de1
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// N
	IsDeleted *string `json:"isDeleted,omitempty" xml:"isDeleted,omitempty"`
	// example:
	//
	// 0
	LockStatus *int32  `json:"lockStatus,omitempty" xml:"lockStatus,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// projex
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// 100
	Status *int32 `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 7eee44ec7f699d4e6980faxxxx
	TargetId *string `json:"targetId,omitempty" xml:"targetId,omitempty"`
	// example:
	//
	// Project
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
}

func (s ExportInsightWorkitemVersionResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemVersionResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetGmtCreate(v int64) *ExportInsightWorkitemVersionResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetGmtModified(v int64) *ExportInsightWorkitemVersionResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetGmtPublish(v int64) *ExportInsightWorkitemVersionResponseBodyResult {
	s.GmtPublish = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetGmtStart(v int64) *ExportInsightWorkitemVersionResponseBodyResult {
	s.GmtStart = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetId(v int64) *ExportInsightWorkitemVersionResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetIdentifier(v string) *ExportInsightWorkitemVersionResponseBodyResult {
	s.Identifier = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetIsDeleted(v string) *ExportInsightWorkitemVersionResponseBodyResult {
	s.IsDeleted = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetLockStatus(v int32) *ExportInsightWorkitemVersionResponseBodyResult {
	s.LockStatus = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetName(v string) *ExportInsightWorkitemVersionResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetOrganizationId(v string) *ExportInsightWorkitemVersionResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetSource(v string) *ExportInsightWorkitemVersionResponseBodyResult {
	s.Source = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetStatus(v int32) *ExportInsightWorkitemVersionResponseBodyResult {
	s.Status = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetTargetId(v string) *ExportInsightWorkitemVersionResponseBodyResult {
	s.TargetId = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponseBodyResult) SetTargetType(v string) *ExportInsightWorkitemVersionResponseBodyResult {
	s.TargetType = &v
	return s
}

type ExportInsightWorkitemVersionResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportInsightWorkitemVersionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportInsightWorkitemVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportInsightWorkitemVersionResponse) GoString() string {
	return s.String()
}

func (s *ExportInsightWorkitemVersionResponse) SetHeaders(v map[string]*string) *ExportInsightWorkitemVersionResponse {
	s.Headers = v
	return s
}

func (s *ExportInsightWorkitemVersionResponse) SetStatusCode(v int32) *ExportInsightWorkitemVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportInsightWorkitemVersionResponse) SetBody(v *ExportInsightWorkitemVersionResponseBody) *ExportInsightWorkitemVersionResponse {
	s.Body = v
	return s
}

type ExportWorkitemActivityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-06-01 00:00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 1
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-01 00:00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
}

func (s ExportWorkitemActivityRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportWorkitemActivityRequest) GoString() string {
	return s.String()
}

func (s *ExportWorkitemActivityRequest) SetEndTime(v string) *ExportWorkitemActivityRequest {
	s.EndTime = &v
	return s
}

func (s *ExportWorkitemActivityRequest) SetMaxResults(v int64) *ExportWorkitemActivityRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportWorkitemActivityRequest) SetNextToken(v string) *ExportWorkitemActivityRequest {
	s.NextToken = &v
	return s
}

func (s *ExportWorkitemActivityRequest) SetStartTime(v string) *ExportWorkitemActivityRequest {
	s.StartTime = &v
	return s
}

type ExportWorkitemActivityResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 2
	NextToken *string                                     `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Result    []*ExportWorkitemActivityResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ExportWorkitemActivityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportWorkitemActivityResponseBody) GoString() string {
	return s.String()
}

func (s *ExportWorkitemActivityResponseBody) SetMaxResults(v int64) *ExportWorkitemActivityResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ExportWorkitemActivityResponseBody) SetNextToken(v string) *ExportWorkitemActivityResponseBody {
	s.NextToken = &v
	return s
}

func (s *ExportWorkitemActivityResponseBody) SetResult(v []*ExportWorkitemActivityResponseBodyResult) *ExportWorkitemActivityResponseBody {
	s.Result = v
	return s
}

func (s *ExportWorkitemActivityResponseBody) SetTotalCount(v int64) *ExportWorkitemActivityResponseBody {
	s.TotalCount = &v
	return s
}

type ExportWorkitemActivityResponseBodyResult struct {
	// example:
	//
	// 1714961337000
	GmtEvent *int64 `json:"gmtEvent,omitempty" xml:"gmtEvent,omitempty"`
	// example:
	//
	// 4406380356
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 254662353
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 1
	NewValue *string `json:"newValue,omitempty" xml:"newValue,omitempty"`
	// example:
	//
	// 2
	OldValue *string `json:"oldValue,omitempty" xml:"oldValue,omitempty"`
	// example:
	//
	// 61db9af2148974246bexxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 2a62349afcbef7f23d8f31xxxx
	ProjectId *string `json:"projectId,omitempty" xml:"projectId,omitempty"`
	// example:
	//
	// projex
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// workitem.update.priority
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// ec69eae498acce08ff7260xxxx
	WorkitemId *string `json:"workitemId,omitempty" xml:"workitemId,omitempty"`
}

func (s ExportWorkitemActivityResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ExportWorkitemActivityResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ExportWorkitemActivityResponseBodyResult) SetGmtEvent(v int64) *ExportWorkitemActivityResponseBodyResult {
	s.GmtEvent = &v
	return s
}

func (s *ExportWorkitemActivityResponseBodyResult) SetId(v int64) *ExportWorkitemActivityResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ExportWorkitemActivityResponseBodyResult) SetIdentifier(v string) *ExportWorkitemActivityResponseBodyResult {
	s.Identifier = &v
	return s
}

func (s *ExportWorkitemActivityResponseBodyResult) SetNewValue(v string) *ExportWorkitemActivityResponseBodyResult {
	s.NewValue = &v
	return s
}

func (s *ExportWorkitemActivityResponseBodyResult) SetOldValue(v string) *ExportWorkitemActivityResponseBodyResult {
	s.OldValue = &v
	return s
}

func (s *ExportWorkitemActivityResponseBodyResult) SetOrganizationId(v string) *ExportWorkitemActivityResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ExportWorkitemActivityResponseBodyResult) SetProjectId(v string) *ExportWorkitemActivityResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *ExportWorkitemActivityResponseBodyResult) SetSource(v string) *ExportWorkitemActivityResponseBodyResult {
	s.Source = &v
	return s
}

func (s *ExportWorkitemActivityResponseBodyResult) SetType(v string) *ExportWorkitemActivityResponseBodyResult {
	s.Type = &v
	return s
}

func (s *ExportWorkitemActivityResponseBodyResult) SetWorkitemId(v string) *ExportWorkitemActivityResponseBodyResult {
	s.WorkitemId = &v
	return s
}

type ExportWorkitemActivityResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportWorkitemActivityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportWorkitemActivityResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportWorkitemActivityResponse) GoString() string {
	return s.String()
}

func (s *ExportWorkitemActivityResponse) SetHeaders(v map[string]*string) *ExportWorkitemActivityResponse {
	s.Headers = v
	return s
}

func (s *ExportWorkitemActivityResponse) SetStatusCode(v int32) *ExportWorkitemActivityResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportWorkitemActivityResponse) SetBody(v *ExportWorkitemActivityResponseBody) *ExportWorkitemActivityResponse {
	s.Body = v
	return s
}

type FrozenWorkspaceResponseBody struct {
	// example:
	//
	// InvalidWorkspace.NotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// The workspace is not found.
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s FrozenWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FrozenWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *FrozenWorkspaceResponseBody) SetErrorCode(v string) *FrozenWorkspaceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *FrozenWorkspaceResponseBody) SetErrorMessage(v string) *FrozenWorkspaceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *FrozenWorkspaceResponseBody) SetRequestId(v string) *FrozenWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *FrozenWorkspaceResponseBody) SetSuccess(v bool) *FrozenWorkspaceResponseBody {
	s.Success = &v
	return s
}

type FrozenWorkspaceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *FrozenWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s FrozenWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s FrozenWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *FrozenWorkspaceResponse) SetHeaders(v map[string]*string) *FrozenWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *FrozenWorkspaceResponse) SetStatusCode(v int32) *FrozenWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *FrozenWorkspaceResponse) SetBody(v *FrozenWorkspaceResponseBody) *FrozenWorkspaceResponse {
	s.Body = v
	return s
}

type GetApplicationRequest struct {
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationRequest) SetOrganizationId(v string) *GetApplicationRequest {
	s.OrganizationId = &v
	return s
}

type GetApplicationResponseBody struct {
	// example:
	//
	// 应用模版展示名称A
	AppTemplateDisplayName *string `json:"appTemplateDisplayName,omitempty" xml:"appTemplateDisplayName,omitempty"`
	// example:
	//
	// 应用模版名称A
	AppTemplateName *string `json:"appTemplateName,omitempty" xml:"appTemplateName,omitempty"`
	// example:
	//
	// 1332695887xxxxxx
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 2024-01-01T00:00:00.000+00:00
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// testApp
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// FC93CE1A-8D7A-13A9-8306-7465DE2E5C0F
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s GetApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *GetApplicationResponseBody) SetAppTemplateDisplayName(v string) *GetApplicationResponseBody {
	s.AppTemplateDisplayName = &v
	return s
}

func (s *GetApplicationResponseBody) SetAppTemplateName(v string) *GetApplicationResponseBody {
	s.AppTemplateName = &v
	return s
}

func (s *GetApplicationResponseBody) SetCreatorAccountId(v string) *GetApplicationResponseBody {
	s.CreatorAccountId = &v
	return s
}

func (s *GetApplicationResponseBody) SetDescription(v string) *GetApplicationResponseBody {
	s.Description = &v
	return s
}

func (s *GetApplicationResponseBody) SetGmtCreate(v string) *GetApplicationResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *GetApplicationResponseBody) SetName(v string) *GetApplicationResponseBody {
	s.Name = &v
	return s
}

func (s *GetApplicationResponseBody) SetRequestId(v string) *GetApplicationResponseBody {
	s.RequestId = &v
	return s
}

type GetApplicationResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationResponse) SetHeaders(v map[string]*string) *GetApplicationResponse {
	s.Headers = v
	return s
}

func (s *GetApplicationResponse) SetStatusCode(v int32) *GetApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetApplicationResponse) SetBody(v *GetApplicationResponseBody) *GetApplicationResponse {
	s.Body = v
	return s
}

type GetBranchInfoRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5fbe3118672533690be72b12
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetBranchInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBranchInfoRequest) GoString() string {
	return s.String()
}

func (s *GetBranchInfoRequest) SetAccessToken(v string) *GetBranchInfoRequest {
	s.AccessToken = &v
	return s
}

func (s *GetBranchInfoRequest) SetBranchName(v string) *GetBranchInfoRequest {
	s.BranchName = &v
	return s
}

func (s *GetBranchInfoRequest) SetOrganizationId(v string) *GetBranchInfoRequest {
	s.OrganizationId = &v
	return s
}

type GetBranchInfoResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 6177543A-8D54-5736-A93B-E0195A1512CB
	RequestId *string                          `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetBranchInfoResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetBranchInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBranchInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetBranchInfoResponseBody) SetErrorCode(v string) *GetBranchInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetBranchInfoResponseBody) SetErrorMessage(v string) *GetBranchInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetBranchInfoResponseBody) SetRequestId(v string) *GetBranchInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBranchInfoResponseBody) SetResult(v *GetBranchInfoResponseBodyResult) *GetBranchInfoResponseBody {
	s.Result = v
	return s
}

func (s *GetBranchInfoResponseBody) SetSuccess(v bool) *GetBranchInfoResponseBody {
	s.Success = &v
	return s
}

type GetBranchInfoResponseBodyResult struct {
	Commit *GetBranchInfoResponseBodyResultCommit `json:"commit,omitempty" xml:"commit,omitempty" type:"Struct"`
	// example:
	//
	// master
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// false
	Protected *string `json:"protected,omitempty" xml:"protected,omitempty"`
}

func (s GetBranchInfoResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetBranchInfoResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetBranchInfoResponseBodyResult) SetCommit(v *GetBranchInfoResponseBodyResultCommit) *GetBranchInfoResponseBodyResult {
	s.Commit = v
	return s
}

func (s *GetBranchInfoResponseBodyResult) SetName(v string) *GetBranchInfoResponseBodyResult {
	s.Name = &v
	return s
}

func (s *GetBranchInfoResponseBodyResult) SetProtected(v string) *GetBranchInfoResponseBodyResult {
	s.Protected = &v
	return s
}

type GetBranchInfoResponseBodyResultCommit struct {
	Author *GetBranchInfoResponseBodyResultCommitAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	AuthorName  *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2022-03-18 08:00:00
	AuthoredDate *string `json:"authoredDate,omitempty" xml:"authoredDate,omitempty"`
	// example:
	//
	// 0
	CommentsCount *int64 `json:"commentsCount,omitempty" xml:"commentsCount,omitempty"`
	// example:
	//
	// 2022-03-18 09:00:00
	CommittedDate *string                                         `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	Committer     *GetBranchInfoResponseBodyResultCommitCommitter `json:"committer,omitempty" xml:"committer,omitempty" type:"Struct"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	CommitterName  *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2022-03-18 10:00:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// e0297d8fb0393c833a8531e7cc8832739e3cba6d
	Id        *string   `json:"id,omitempty" xml:"id,omitempty"`
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// e0297d8f
	ShortId   *string                                         `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Signature *GetBranchInfoResponseBodyResultCommitSignature `json:"signature,omitempty" xml:"signature,omitempty" type:"Struct"`
	Title     *string                                         `json:"title,omitempty" xml:"title,omitempty"`
}

func (s GetBranchInfoResponseBodyResultCommit) String() string {
	return tea.Prettify(s)
}

func (s GetBranchInfoResponseBodyResultCommit) GoString() string {
	return s.String()
}

func (s *GetBranchInfoResponseBodyResultCommit) SetAuthor(v *GetBranchInfoResponseBodyResultCommitAuthor) *GetBranchInfoResponseBodyResultCommit {
	s.Author = v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetAuthorEmail(v string) *GetBranchInfoResponseBodyResultCommit {
	s.AuthorEmail = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetAuthorName(v string) *GetBranchInfoResponseBodyResultCommit {
	s.AuthorName = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetAuthoredDate(v string) *GetBranchInfoResponseBodyResultCommit {
	s.AuthoredDate = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetCommentsCount(v int64) *GetBranchInfoResponseBodyResultCommit {
	s.CommentsCount = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetCommittedDate(v string) *GetBranchInfoResponseBodyResultCommit {
	s.CommittedDate = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetCommitter(v *GetBranchInfoResponseBodyResultCommitCommitter) *GetBranchInfoResponseBodyResultCommit {
	s.Committer = v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetCommitterEmail(v string) *GetBranchInfoResponseBodyResultCommit {
	s.CommitterEmail = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetCommitterName(v string) *GetBranchInfoResponseBodyResultCommit {
	s.CommitterName = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetCreatedAt(v string) *GetBranchInfoResponseBodyResultCommit {
	s.CreatedAt = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetId(v string) *GetBranchInfoResponseBodyResultCommit {
	s.Id = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetMessage(v string) *GetBranchInfoResponseBodyResultCommit {
	s.Message = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetParentIds(v []*string) *GetBranchInfoResponseBodyResultCommit {
	s.ParentIds = v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetShortId(v string) *GetBranchInfoResponseBodyResultCommit {
	s.ShortId = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetSignature(v *GetBranchInfoResponseBodyResultCommitSignature) *GetBranchInfoResponseBodyResultCommit {
	s.Signature = v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommit) SetTitle(v string) *GetBranchInfoResponseBodyResultCommit {
	s.Title = &v
	return s
}

type GetBranchInfoResponseBodyResultCommitAuthor struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 28056
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup-test
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// testtest
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s GetBranchInfoResponseBodyResultCommitAuthor) String() string {
	return tea.Prettify(s)
}

func (s GetBranchInfoResponseBodyResultCommitAuthor) GoString() string {
	return s.String()
}

func (s *GetBranchInfoResponseBodyResultCommitAuthor) SetAvatarUrl(v string) *GetBranchInfoResponseBodyResultCommitAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitAuthor) SetEmail(v string) *GetBranchInfoResponseBodyResultCommitAuthor {
	s.Email = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitAuthor) SetId(v int64) *GetBranchInfoResponseBodyResultCommitAuthor {
	s.Id = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitAuthor) SetName(v string) *GetBranchInfoResponseBodyResultCommitAuthor {
	s.Name = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitAuthor) SetState(v string) *GetBranchInfoResponseBodyResultCommitAuthor {
	s.State = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitAuthor) SetUsername(v string) *GetBranchInfoResponseBodyResultCommitAuthor {
	s.Username = &v
	return s
}

type GetBranchInfoResponseBodyResultCommitCommitter struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 5035
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup-commit
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// commitcommit
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s GetBranchInfoResponseBodyResultCommitCommitter) String() string {
	return tea.Prettify(s)
}

func (s GetBranchInfoResponseBodyResultCommitCommitter) GoString() string {
	return s.String()
}

func (s *GetBranchInfoResponseBodyResultCommitCommitter) SetAvatarUrl(v string) *GetBranchInfoResponseBodyResultCommitCommitter {
	s.AvatarUrl = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitCommitter) SetEmail(v string) *GetBranchInfoResponseBodyResultCommitCommitter {
	s.Email = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitCommitter) SetId(v int64) *GetBranchInfoResponseBodyResultCommitCommitter {
	s.Id = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitCommitter) SetName(v string) *GetBranchInfoResponseBodyResultCommitCommitter {
	s.Name = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitCommitter) SetState(v string) *GetBranchInfoResponseBodyResultCommitCommitter {
	s.State = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitCommitter) SetUsername(v string) *GetBranchInfoResponseBodyResultCommitCommitter {
	s.Username = &v
	return s
}

type GetBranchInfoResponseBodyResultCommitSignature struct {
	// example:
	//
	// ""
	GpgKeyId *string `json:"gpgKeyId,omitempty" xml:"gpgKeyId,omitempty"`
	// example:
	//
	// verified
	VerificationStatus *string `json:"verificationStatus,omitempty" xml:"verificationStatus,omitempty"`
}

func (s GetBranchInfoResponseBodyResultCommitSignature) String() string {
	return tea.Prettify(s)
}

func (s GetBranchInfoResponseBodyResultCommitSignature) GoString() string {
	return s.String()
}

func (s *GetBranchInfoResponseBodyResultCommitSignature) SetGpgKeyId(v string) *GetBranchInfoResponseBodyResultCommitSignature {
	s.GpgKeyId = &v
	return s
}

func (s *GetBranchInfoResponseBodyResultCommitSignature) SetVerificationStatus(v string) *GetBranchInfoResponseBodyResultCommitSignature {
	s.VerificationStatus = &v
	return s
}

type GetBranchInfoResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBranchInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBranchInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBranchInfoResponse) GoString() string {
	return s.String()
}

func (s *GetBranchInfoResponse) SetHeaders(v map[string]*string) *GetBranchInfoResponse {
	s.Headers = v
	return s
}

func (s *GetBranchInfoResponse) SetStatusCode(v int32) *GetBranchInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBranchInfoResponse) SetBody(v *GetBranchInfoResponseBody) *GetBranchInfoResponse {
	s.Body = v
	return s
}

type GetCheckRunRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	CheckRunId *int64 `json:"checkRunId,omitempty" xml:"checkRunId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s GetCheckRunRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRunRequest) GoString() string {
	return s.String()
}

func (s *GetCheckRunRequest) SetAccessToken(v string) *GetCheckRunRequest {
	s.AccessToken = &v
	return s
}

func (s *GetCheckRunRequest) SetCheckRunId(v int64) *GetCheckRunRequest {
	s.CheckRunId = &v
	return s
}

func (s *GetCheckRunRequest) SetOrganizationId(v string) *GetCheckRunRequest {
	s.OrganizationId = &v
	return s
}

func (s *GetCheckRunRequest) SetRepositoryIdentity(v string) *GetCheckRunRequest {
	s.RepositoryIdentity = &v
	return s
}

type GetCheckRunResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetCheckRunResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetCheckRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRunResponseBody) GoString() string {
	return s.String()
}

func (s *GetCheckRunResponseBody) SetErrorCode(v string) *GetCheckRunResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetCheckRunResponseBody) SetErrorMessage(v string) *GetCheckRunResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetCheckRunResponseBody) SetRequestId(v string) *GetCheckRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCheckRunResponseBody) SetResult(v *GetCheckRunResponseBodyResult) *GetCheckRunResponseBody {
	s.Result = v
	return s
}

func (s *GetCheckRunResponseBody) SetSuccess(v bool) *GetCheckRunResponseBody {
	s.Success = &v
	return s
}

type GetCheckRunResponseBodyResult struct {
	Annotations []*GetCheckRunResponseBodyResultAnnotations `json:"annotations,omitempty" xml:"annotations,omitempty" type:"Repeated"`
	CheckSuite  *GetCheckRunResponseBodyResultCheckSuite    `json:"checkSuite,omitempty" xml:"checkSuite,omitempty" type:"Struct"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	CompletedAt *string `json:"completedAt,omitempty" xml:"completedAt,omitempty"`
	// example:
	//
	// success
	Conclusion *string `json:"conclusion,omitempty" xml:"conclusion,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// xxx
	DetailsUrl *string `json:"detailsUrl,omitempty" xml:"detailsUrl,omitempty"`
	// example:
	//
	// 42
	ExternalId *string `json:"externalId,omitempty" xml:"externalId,omitempty"`
	// example:
	//
	// 40f4ccfe019cdd4a62d4acb0c57130106fc7e1be
	HeadSha *string `json:"headSha,omitempty" xml:"headSha,omitempty"`
	// example:
	//
	// 5240
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// my-check-ci
	Name   *string                              `json:"name,omitempty" xml:"name,omitempty"`
	Output *GetCheckRunResponseBodyResultOutput `json:"output,omitempty" xml:"output,omitempty" type:"Struct"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	StartedAt *string `json:"startedAt,omitempty" xml:"startedAt,omitempty"`
	// example:
	//
	// completed
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	UpdatedAt *string                              `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	Writer    *GetCheckRunResponseBodyResultWriter `json:"writer,omitempty" xml:"writer,omitempty" type:"Struct"`
}

func (s GetCheckRunResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRunResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetCheckRunResponseBodyResult) SetAnnotations(v []*GetCheckRunResponseBodyResultAnnotations) *GetCheckRunResponseBodyResult {
	s.Annotations = v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetCheckSuite(v *GetCheckRunResponseBodyResultCheckSuite) *GetCheckRunResponseBodyResult {
	s.CheckSuite = v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetCompletedAt(v string) *GetCheckRunResponseBodyResult {
	s.CompletedAt = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetConclusion(v string) *GetCheckRunResponseBodyResult {
	s.Conclusion = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetCreatedAt(v string) *GetCheckRunResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetDetailsUrl(v string) *GetCheckRunResponseBodyResult {
	s.DetailsUrl = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetExternalId(v string) *GetCheckRunResponseBodyResult {
	s.ExternalId = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetHeadSha(v string) *GetCheckRunResponseBodyResult {
	s.HeadSha = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetId(v int64) *GetCheckRunResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetName(v string) *GetCheckRunResponseBodyResult {
	s.Name = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetOutput(v *GetCheckRunResponseBodyResultOutput) *GetCheckRunResponseBodyResult {
	s.Output = v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetStartedAt(v string) *GetCheckRunResponseBodyResult {
	s.StartedAt = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetStatus(v string) *GetCheckRunResponseBodyResult {
	s.Status = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetUpdatedAt(v string) *GetCheckRunResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

func (s *GetCheckRunResponseBodyResult) SetWriter(v *GetCheckRunResponseBodyResultWriter) *GetCheckRunResponseBodyResult {
	s.Writer = v
	return s
}

type GetCheckRunResponseBodyResultAnnotations struct {
	// example:
	//
	// warning
	AnnotationLevel *string `json:"annotationLevel,omitempty" xml:"annotationLevel,omitempty"`
	// example:
	//
	// 4
	EndColumn *int64 `json:"endColumn,omitempty" xml:"endColumn,omitempty"`
	// example:
	//
	// 2
	EndLine *int64 `json:"endLine,omitempty" xml:"endLine,omitempty"`
	// example:
	//
	// 1
	Id      *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// demo/test.txt
	Path       *string `json:"path,omitempty" xml:"path,omitempty"`
	RawDetails *string `json:"rawDetails,omitempty" xml:"rawDetails,omitempty"`
	// example:
	//
	// 3
	StartColumn *int64 `json:"startColumn,omitempty" xml:"startColumn,omitempty"`
	// example:
	//
	// 1
	StartLine *int64  `json:"startLine,omitempty" xml:"startLine,omitempty"`
	Title     *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s GetCheckRunResponseBodyResultAnnotations) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRunResponseBodyResultAnnotations) GoString() string {
	return s.String()
}

func (s *GetCheckRunResponseBodyResultAnnotations) SetAnnotationLevel(v string) *GetCheckRunResponseBodyResultAnnotations {
	s.AnnotationLevel = &v
	return s
}

func (s *GetCheckRunResponseBodyResultAnnotations) SetEndColumn(v int64) *GetCheckRunResponseBodyResultAnnotations {
	s.EndColumn = &v
	return s
}

func (s *GetCheckRunResponseBodyResultAnnotations) SetEndLine(v int64) *GetCheckRunResponseBodyResultAnnotations {
	s.EndLine = &v
	return s
}

func (s *GetCheckRunResponseBodyResultAnnotations) SetId(v int64) *GetCheckRunResponseBodyResultAnnotations {
	s.Id = &v
	return s
}

func (s *GetCheckRunResponseBodyResultAnnotations) SetMessage(v string) *GetCheckRunResponseBodyResultAnnotations {
	s.Message = &v
	return s
}

func (s *GetCheckRunResponseBodyResultAnnotations) SetPath(v string) *GetCheckRunResponseBodyResultAnnotations {
	s.Path = &v
	return s
}

func (s *GetCheckRunResponseBodyResultAnnotations) SetRawDetails(v string) *GetCheckRunResponseBodyResultAnnotations {
	s.RawDetails = &v
	return s
}

func (s *GetCheckRunResponseBodyResultAnnotations) SetStartColumn(v int64) *GetCheckRunResponseBodyResultAnnotations {
	s.StartColumn = &v
	return s
}

func (s *GetCheckRunResponseBodyResultAnnotations) SetStartLine(v int64) *GetCheckRunResponseBodyResultAnnotations {
	s.StartLine = &v
	return s
}

func (s *GetCheckRunResponseBodyResultAnnotations) SetTitle(v string) *GetCheckRunResponseBodyResultAnnotations {
	s.Title = &v
	return s
}

type GetCheckRunResponseBodyResultCheckSuite struct {
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
}

func (s GetCheckRunResponseBodyResultCheckSuite) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRunResponseBodyResultCheckSuite) GoString() string {
	return s.String()
}

func (s *GetCheckRunResponseBodyResultCheckSuite) SetId(v int64) *GetCheckRunResponseBodyResultCheckSuite {
	s.Id = &v
	return s
}

type GetCheckRunResponseBodyResultOutput struct {
	Images  []*GetCheckRunResponseBodyResultOutputImages `json:"images,omitempty" xml:"images,omitempty" type:"Repeated"`
	Summary *string                                      `json:"summary,omitempty" xml:"summary,omitempty"`
	Text    *string                                      `json:"text,omitempty" xml:"text,omitempty"`
	// example:
	//
	// Mighty Readme report
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s GetCheckRunResponseBodyResultOutput) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRunResponseBodyResultOutput) GoString() string {
	return s.String()
}

func (s *GetCheckRunResponseBodyResultOutput) SetImages(v []*GetCheckRunResponseBodyResultOutputImages) *GetCheckRunResponseBodyResultOutput {
	s.Images = v
	return s
}

func (s *GetCheckRunResponseBodyResultOutput) SetSummary(v string) *GetCheckRunResponseBodyResultOutput {
	s.Summary = &v
	return s
}

func (s *GetCheckRunResponseBodyResultOutput) SetText(v string) *GetCheckRunResponseBodyResultOutput {
	s.Text = &v
	return s
}

func (s *GetCheckRunResponseBodyResultOutput) SetTitle(v string) *GetCheckRunResponseBodyResultOutput {
	s.Title = &v
	return s
}

type GetCheckRunResponseBodyResultOutputImages struct {
	// example:
	//
	// test-image-alt
	Alt *string `json:"alt,omitempty" xml:"alt,omitempty"`
	// example:
	//
	// test
	Caption *string `json:"caption,omitempty" xml:"caption,omitempty"`
	// example:
	//
	// xxx
	ImageUrl *string `json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

func (s GetCheckRunResponseBodyResultOutputImages) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRunResponseBodyResultOutputImages) GoString() string {
	return s.String()
}

func (s *GetCheckRunResponseBodyResultOutputImages) SetAlt(v string) *GetCheckRunResponseBodyResultOutputImages {
	s.Alt = &v
	return s
}

func (s *GetCheckRunResponseBodyResultOutputImages) SetCaption(v string) *GetCheckRunResponseBodyResultOutputImages {
	s.Caption = &v
	return s
}

func (s *GetCheckRunResponseBodyResultOutputImages) SetImageUrl(v string) *GetCheckRunResponseBodyResultOutputImages {
	s.ImageUrl = &v
	return s
}

type GetCheckRunResponseBodyResultWriter struct {
	// example:
	//
	// xxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// xxx
	LogoUrl *string `json:"logoUrl,omitempty" xml:"logoUrl,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// test-codeup
	Slug *string `json:"slug,omitempty" xml:"slug,omitempty"`
	// example:
	//
	// User
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetCheckRunResponseBodyResultWriter) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRunResponseBodyResultWriter) GoString() string {
	return s.String()
}

func (s *GetCheckRunResponseBodyResultWriter) SetId(v string) *GetCheckRunResponseBodyResultWriter {
	s.Id = &v
	return s
}

func (s *GetCheckRunResponseBodyResultWriter) SetLogoUrl(v string) *GetCheckRunResponseBodyResultWriter {
	s.LogoUrl = &v
	return s
}

func (s *GetCheckRunResponseBodyResultWriter) SetName(v string) *GetCheckRunResponseBodyResultWriter {
	s.Name = &v
	return s
}

func (s *GetCheckRunResponseBodyResultWriter) SetSlug(v string) *GetCheckRunResponseBodyResultWriter {
	s.Slug = &v
	return s
}

func (s *GetCheckRunResponseBodyResultWriter) SetType(v string) *GetCheckRunResponseBodyResultWriter {
	s.Type = &v
	return s
}

type GetCheckRunResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCheckRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCheckRunResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCheckRunResponse) GoString() string {
	return s.String()
}

func (s *GetCheckRunResponse) SetHeaders(v map[string]*string) *GetCheckRunResponse {
	s.Headers = v
	return s
}

func (s *GetCheckRunResponse) SetStatusCode(v int32) *GetCheckRunResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCheckRunResponse) SetBody(v *GetCheckRunResponseBody) *GetCheckRunResponse {
	s.Body = v
	return s
}

type GetCodeupOrganizationRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
}

func (s GetCodeupOrganizationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCodeupOrganizationRequest) GoString() string {
	return s.String()
}

func (s *GetCodeupOrganizationRequest) SetAccessToken(v string) *GetCodeupOrganizationRequest {
	s.AccessToken = &v
	return s
}

type GetCodeupOrganizationResponseBody struct {
	// example:
	//
	// InvalidTagGroup.IdNotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetCodeupOrganizationResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetCodeupOrganizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCodeupOrganizationResponseBody) GoString() string {
	return s.String()
}

func (s *GetCodeupOrganizationResponseBody) SetErrorCode(v string) *GetCodeupOrganizationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetCodeupOrganizationResponseBody) SetErrorMessage(v string) *GetCodeupOrganizationResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetCodeupOrganizationResponseBody) SetRequestId(v string) *GetCodeupOrganizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCodeupOrganizationResponseBody) SetResult(v *GetCodeupOrganizationResponseBodyResult) *GetCodeupOrganizationResponseBody {
	s.Result = v
	return s
}

func (s *GetCodeupOrganizationResponseBody) SetSuccess(v bool) *GetCodeupOrganizationResponseBody {
	s.Success = &v
	return s
}

type GetCodeupOrganizationResponseBodyResult struct {
	// example:
	//
	// 2022-03-12 12:00:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 3624
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 100003
	NamespaceId *int64 `json:"namespaceId,omitempty" xml:"namespaceId,omitempty"`
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// test-codeup
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// ORG_MEMBER
	UserRole *string `json:"userRole,omitempty" xml:"userRole,omitempty"`
}

func (s GetCodeupOrganizationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetCodeupOrganizationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetCodeupOrganizationResponseBodyResult) SetCreatedAt(v string) *GetCodeupOrganizationResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *GetCodeupOrganizationResponseBodyResult) SetId(v int64) *GetCodeupOrganizationResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetCodeupOrganizationResponseBodyResult) SetNamespaceId(v int64) *GetCodeupOrganizationResponseBodyResult {
	s.NamespaceId = &v
	return s
}

func (s *GetCodeupOrganizationResponseBodyResult) SetOrganizationId(v string) *GetCodeupOrganizationResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *GetCodeupOrganizationResponseBodyResult) SetPath(v string) *GetCodeupOrganizationResponseBodyResult {
	s.Path = &v
	return s
}

func (s *GetCodeupOrganizationResponseBodyResult) SetUpdatedAt(v string) *GetCodeupOrganizationResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

func (s *GetCodeupOrganizationResponseBodyResult) SetUserRole(v string) *GetCodeupOrganizationResponseBodyResult {
	s.UserRole = &v
	return s
}

type GetCodeupOrganizationResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCodeupOrganizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCodeupOrganizationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCodeupOrganizationResponse) GoString() string {
	return s.String()
}

func (s *GetCodeupOrganizationResponse) SetHeaders(v map[string]*string) *GetCodeupOrganizationResponse {
	s.Headers = v
	return s
}

func (s *GetCodeupOrganizationResponse) SetStatusCode(v int32) *GetCodeupOrganizationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCodeupOrganizationResponse) SetBody(v *GetCodeupOrganizationResponseBody) *GetCodeupOrganizationResponse {
	s.Body = v
	return s
}

type GetCompareDetailRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c9fb781f3d66ef6ee60bdd5c414f5106454b1426
	From *string `json:"from,omitempty" xml:"from,omitempty"`
	// example:
	//
	// 24 	- 1024 	- 1024
	MaxDiffByte *int32 `json:"maxDiffByte,omitempty" xml:"maxDiffByte,omitempty"`
	// example:
	//
	// 5000
	MaxDiffFile *int32 `json:"maxDiffFile,omitempty" xml:"maxDiffFile,omitempty"`
	// example:
	//
	// false
	MergeBase *bool `json:"mergeBase,omitempty" xml:"mergeBase,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// b8f6f28520b1936aafe2e638373e19ccafa42b02
	To *string `json:"to,omitempty" xml:"to,omitempty"`
}

func (s GetCompareDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCompareDetailRequest) GoString() string {
	return s.String()
}

func (s *GetCompareDetailRequest) SetFrom(v string) *GetCompareDetailRequest {
	s.From = &v
	return s
}

func (s *GetCompareDetailRequest) SetMaxDiffByte(v int32) *GetCompareDetailRequest {
	s.MaxDiffByte = &v
	return s
}

func (s *GetCompareDetailRequest) SetMaxDiffFile(v int32) *GetCompareDetailRequest {
	s.MaxDiffFile = &v
	return s
}

func (s *GetCompareDetailRequest) SetMergeBase(v bool) *GetCompareDetailRequest {
	s.MergeBase = &v
	return s
}

func (s *GetCompareDetailRequest) SetOrganizationId(v string) *GetCompareDetailRequest {
	s.OrganizationId = &v
	return s
}

func (s *GetCompareDetailRequest) SetTo(v string) *GetCompareDetailRequest {
	s.To = &v
	return s
}

type GetCompareDetailResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetCompareDetailResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetCompareDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCompareDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetCompareDetailResponseBody) SetErrorCode(v string) *GetCompareDetailResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetCompareDetailResponseBody) SetErrorMessage(v string) *GetCompareDetailResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetCompareDetailResponseBody) SetRequestId(v string) *GetCompareDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCompareDetailResponseBody) SetResult(v *GetCompareDetailResponseBodyResult) *GetCompareDetailResponseBody {
	s.Result = v
	return s
}

func (s *GetCompareDetailResponseBody) SetSuccess(v bool) *GetCompareDetailResponseBody {
	s.Success = &v
	return s
}

type GetCompareDetailResponseBodyResult struct {
	Commits  []*GetCompareDetailResponseBodyResultCommits `json:"commits,omitempty" xml:"commits,omitempty" type:"Repeated"`
	Diffs    []*GetCompareDetailResponseBodyResultDiffs   `json:"diffs,omitempty" xml:"diffs,omitempty" type:"Repeated"`
	Messages []*string                                    `json:"messages,omitempty" xml:"messages,omitempty" type:"Repeated"`
}

func (s GetCompareDetailResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetCompareDetailResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetCompareDetailResponseBodyResult) SetCommits(v []*GetCompareDetailResponseBodyResultCommits) *GetCompareDetailResponseBodyResult {
	s.Commits = v
	return s
}

func (s *GetCompareDetailResponseBodyResult) SetDiffs(v []*GetCompareDetailResponseBodyResultDiffs) *GetCompareDetailResponseBodyResult {
	s.Diffs = v
	return s
}

func (s *GetCompareDetailResponseBodyResult) SetMessages(v []*string) *GetCompareDetailResponseBodyResult {
	s.Messages = v
	return s
}

type GetCompareDetailResponseBodyResultCommits struct {
	Author *GetCompareDetailResponseBodyResultCommitsAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	AuthorName  *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2023-01-03T15:41:26+08:00
	AuthoredDate *string `json:"authoredDate,omitempty" xml:"authoredDate,omitempty"`
	// example:
	//
	// 1
	CommentsCount *int64 `json:"commentsCount,omitempty" xml:"commentsCount,omitempty"`
	// example:
	//
	// 2023-01-03T15:41:26+08:00
	CommittedDate *string                                             `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	Committer     *GetCompareDetailResponseBodyResultCommitsCommitter `json:"committer,omitempty" xml:"committer,omitempty" type:"Struct"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	CommitterName  *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2023-01-03T15:41:26+08:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// b8f6f28520b1936aafe2e638373e19ccafa42b02
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ""
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// b8f6f285
	ShortId *string `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s GetCompareDetailResponseBodyResultCommits) String() string {
	return tea.Prettify(s)
}

func (s GetCompareDetailResponseBodyResultCommits) GoString() string {
	return s.String()
}

func (s *GetCompareDetailResponseBodyResultCommits) SetAuthor(v *GetCompareDetailResponseBodyResultCommitsAuthor) *GetCompareDetailResponseBodyResultCommits {
	s.Author = v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetAuthorEmail(v string) *GetCompareDetailResponseBodyResultCommits {
	s.AuthorEmail = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetAuthorName(v string) *GetCompareDetailResponseBodyResultCommits {
	s.AuthorName = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetAuthoredDate(v string) *GetCompareDetailResponseBodyResultCommits {
	s.AuthoredDate = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetCommentsCount(v int64) *GetCompareDetailResponseBodyResultCommits {
	s.CommentsCount = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetCommittedDate(v string) *GetCompareDetailResponseBodyResultCommits {
	s.CommittedDate = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetCommitter(v *GetCompareDetailResponseBodyResultCommitsCommitter) *GetCompareDetailResponseBodyResultCommits {
	s.Committer = v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetCommitterEmail(v string) *GetCompareDetailResponseBodyResultCommits {
	s.CommitterEmail = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetCommitterName(v string) *GetCompareDetailResponseBodyResultCommits {
	s.CommitterName = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetCreatedAt(v string) *GetCompareDetailResponseBodyResultCommits {
	s.CreatedAt = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetId(v string) *GetCompareDetailResponseBodyResultCommits {
	s.Id = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetMessage(v string) *GetCompareDetailResponseBodyResultCommits {
	s.Message = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetParentIds(v []*string) *GetCompareDetailResponseBodyResultCommits {
	s.ParentIds = v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetShortId(v string) *GetCompareDetailResponseBodyResultCommits {
	s.ShortId = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommits) SetTitle(v string) *GetCompareDetailResponseBodyResultCommits {
	s.Title = &v
	return s
}

type GetCompareDetailResponseBodyResultCommitsAuthor struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 21396
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// Codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s GetCompareDetailResponseBodyResultCommitsAuthor) String() string {
	return tea.Prettify(s)
}

func (s GetCompareDetailResponseBodyResultCommitsAuthor) GoString() string {
	return s.String()
}

func (s *GetCompareDetailResponseBodyResultCommitsAuthor) SetAvatarUrl(v string) *GetCompareDetailResponseBodyResultCommitsAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommitsAuthor) SetEmail(v string) *GetCompareDetailResponseBodyResultCommitsAuthor {
	s.Email = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommitsAuthor) SetId(v int64) *GetCompareDetailResponseBodyResultCommitsAuthor {
	s.Id = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommitsAuthor) SetName(v string) *GetCompareDetailResponseBodyResultCommitsAuthor {
	s.Name = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommitsAuthor) SetState(v string) *GetCompareDetailResponseBodyResultCommitsAuthor {
	s.State = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommitsAuthor) SetUsername(v string) *GetCompareDetailResponseBodyResultCommitsAuthor {
	s.Username = &v
	return s
}

type GetCompareDetailResponseBodyResultCommitsCommitter struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 43910
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// Codeup-commiter
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s GetCompareDetailResponseBodyResultCommitsCommitter) String() string {
	return tea.Prettify(s)
}

func (s GetCompareDetailResponseBodyResultCommitsCommitter) GoString() string {
	return s.String()
}

func (s *GetCompareDetailResponseBodyResultCommitsCommitter) SetAvatarUrl(v string) *GetCompareDetailResponseBodyResultCommitsCommitter {
	s.AvatarUrl = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommitsCommitter) SetEmail(v string) *GetCompareDetailResponseBodyResultCommitsCommitter {
	s.Email = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommitsCommitter) SetId(v int64) *GetCompareDetailResponseBodyResultCommitsCommitter {
	s.Id = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommitsCommitter) SetName(v string) *GetCompareDetailResponseBodyResultCommitsCommitter {
	s.Name = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommitsCommitter) SetState(v string) *GetCompareDetailResponseBodyResultCommitsCommitter {
	s.State = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultCommitsCommitter) SetUsername(v string) *GetCompareDetailResponseBodyResultCommitsCommitter {
	s.Username = &v
	return s
}

type GetCompareDetailResponseBodyResultDiffs struct {
	// example:
	//
	// 100644
	AMode *string `json:"aMode,omitempty" xml:"aMode,omitempty"`
	// example:
	//
	// 100644
	BMode *string `json:"bMode,omitempty" xml:"bMode,omitempty"`
	// example:
	//
	// false
	DeletedFile *bool   `json:"deletedFile,omitempty" xml:"deletedFile,omitempty"`
	Diff        *string `json:"diff,omitempty" xml:"diff,omitempty"`
	// example:
	//
	// false
	IsBinary *bool `json:"isBinary,omitempty" xml:"isBinary,omitempty"`
	// example:
	//
	// false
	IsNewLfs *bool `json:"isNewLfs,omitempty" xml:"isNewLfs,omitempty"`
	// example:
	//
	// false
	IsOldLfs *bool `json:"isOldLfs,omitempty" xml:"isOldLfs,omitempty"`
	// example:
	//
	// false
	NewFile *bool `json:"newFile,omitempty" xml:"newFile,omitempty"`
	// example:
	//
	// cb75846da2df3d3d7f290c3569236fcf3dd17224
	NewId *string `json:"newId,omitempty" xml:"newId,omitempty"`
	// example:
	//
	// new_test.txt
	NewPath *string `json:"newPath,omitempty" xml:"newPath,omitempty"`
	// example:
	//
	// 6c268061a546378276559c713d0ad377d4dsjfh
	OldId *string `json:"oldId,omitempty" xml:"oldId,omitempty"`
	// example:
	//
	// test.txt
	OldPath *string `json:"oldPath,omitempty" xml:"oldPath,omitempty"`
	// example:
	//
	// false
	RenamedFile *bool `json:"renamedFile,omitempty" xml:"renamedFile,omitempty"`
}

func (s GetCompareDetailResponseBodyResultDiffs) String() string {
	return tea.Prettify(s)
}

func (s GetCompareDetailResponseBodyResultDiffs) GoString() string {
	return s.String()
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetAMode(v string) *GetCompareDetailResponseBodyResultDiffs {
	s.AMode = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetBMode(v string) *GetCompareDetailResponseBodyResultDiffs {
	s.BMode = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetDeletedFile(v bool) *GetCompareDetailResponseBodyResultDiffs {
	s.DeletedFile = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetDiff(v string) *GetCompareDetailResponseBodyResultDiffs {
	s.Diff = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetIsBinary(v bool) *GetCompareDetailResponseBodyResultDiffs {
	s.IsBinary = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetIsNewLfs(v bool) *GetCompareDetailResponseBodyResultDiffs {
	s.IsNewLfs = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetIsOldLfs(v bool) *GetCompareDetailResponseBodyResultDiffs {
	s.IsOldLfs = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetNewFile(v bool) *GetCompareDetailResponseBodyResultDiffs {
	s.NewFile = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetNewId(v string) *GetCompareDetailResponseBodyResultDiffs {
	s.NewId = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetNewPath(v string) *GetCompareDetailResponseBodyResultDiffs {
	s.NewPath = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetOldId(v string) *GetCompareDetailResponseBodyResultDiffs {
	s.OldId = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetOldPath(v string) *GetCompareDetailResponseBodyResultDiffs {
	s.OldPath = &v
	return s
}

func (s *GetCompareDetailResponseBodyResultDiffs) SetRenamedFile(v bool) *GetCompareDetailResponseBodyResultDiffs {
	s.RenamedFile = &v
	return s
}

type GetCompareDetailResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCompareDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCompareDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCompareDetailResponse) GoString() string {
	return s.String()
}

func (s *GetCompareDetailResponse) SetHeaders(v map[string]*string) *GetCompareDetailResponse {
	s.Headers = v
	return s
}

func (s *GetCompareDetailResponse) SetStatusCode(v int32) *GetCompareDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCompareDetailResponse) SetBody(v *GetCompareDetailResponseBody) *GetCompareDetailResponse {
	s.Body = v
	return s
}

type GetCustomFieldOptionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Project
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 9uyxxxx1re573f561dxxxxx
	WorkitemTypeIdentifier *string `json:"workitemTypeIdentifier,omitempty" xml:"workitemTypeIdentifier,omitempty"`
}

func (s GetCustomFieldOptionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomFieldOptionRequest) GoString() string {
	return s.String()
}

func (s *GetCustomFieldOptionRequest) SetSpaceIdentifier(v string) *GetCustomFieldOptionRequest {
	s.SpaceIdentifier = &v
	return s
}

func (s *GetCustomFieldOptionRequest) SetSpaceType(v string) *GetCustomFieldOptionRequest {
	s.SpaceType = &v
	return s
}

func (s *GetCustomFieldOptionRequest) SetWorkitemTypeIdentifier(v string) *GetCustomFieldOptionRequest {
	s.WorkitemTypeIdentifier = &v
	return s
}

type GetCustomFieldOptionResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string                                   `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	Fileds   []*GetCustomFieldOptionResponseBodyFileds `json:"fileds,omitempty" xml:"fileds,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetCustomFieldOptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomFieldOptionResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomFieldOptionResponseBody) SetErrorCode(v string) *GetCustomFieldOptionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetCustomFieldOptionResponseBody) SetErrorMsg(v string) *GetCustomFieldOptionResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *GetCustomFieldOptionResponseBody) SetFileds(v []*GetCustomFieldOptionResponseBodyFileds) *GetCustomFieldOptionResponseBody {
	s.Fileds = v
	return s
}

func (s *GetCustomFieldOptionResponseBody) SetRequestId(v string) *GetCustomFieldOptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomFieldOptionResponseBody) SetSuccess(v bool) *GetCustomFieldOptionResponseBody {
	s.Success = &v
	return s
}

type GetCustomFieldOptionResponseBodyFileds struct {
	// example:
	//
	// 223
	DisplayValue *string `json:"displayValue,omitempty" xml:"displayValue,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	// example:
	//
	// 3345
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 1
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// example:
	//
	// 1
	Position *int64 `json:"position,omitempty" xml:"position,omitempty"`
	// example:
	//
	// 223
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// example:
	//
	// 223
	ValueEn *string `json:"valueEn,omitempty" xml:"valueEn,omitempty"`
}

func (s GetCustomFieldOptionResponseBodyFileds) String() string {
	return tea.Prettify(s)
}

func (s GetCustomFieldOptionResponseBodyFileds) GoString() string {
	return s.String()
}

func (s *GetCustomFieldOptionResponseBodyFileds) SetDisplayValue(v string) *GetCustomFieldOptionResponseBodyFileds {
	s.DisplayValue = &v
	return s
}

func (s *GetCustomFieldOptionResponseBodyFileds) SetFieldIdentifier(v string) *GetCustomFieldOptionResponseBodyFileds {
	s.FieldIdentifier = &v
	return s
}

func (s *GetCustomFieldOptionResponseBodyFileds) SetIdentifier(v string) *GetCustomFieldOptionResponseBodyFileds {
	s.Identifier = &v
	return s
}

func (s *GetCustomFieldOptionResponseBodyFileds) SetLevel(v int64) *GetCustomFieldOptionResponseBodyFileds {
	s.Level = &v
	return s
}

func (s *GetCustomFieldOptionResponseBodyFileds) SetPosition(v int64) *GetCustomFieldOptionResponseBodyFileds {
	s.Position = &v
	return s
}

func (s *GetCustomFieldOptionResponseBodyFileds) SetValue(v string) *GetCustomFieldOptionResponseBodyFileds {
	s.Value = &v
	return s
}

func (s *GetCustomFieldOptionResponseBodyFileds) SetValueEn(v string) *GetCustomFieldOptionResponseBodyFileds {
	s.ValueEn = &v
	return s
}

type GetCustomFieldOptionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomFieldOptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomFieldOptionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomFieldOptionResponse) GoString() string {
	return s.String()
}

func (s *GetCustomFieldOptionResponse) SetHeaders(v map[string]*string) *GetCustomFieldOptionResponse {
	s.Headers = v
	return s
}

func (s *GetCustomFieldOptionResponse) SetStatusCode(v int32) *GetCustomFieldOptionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomFieldOptionResponse) SetBody(v *GetCustomFieldOptionResponseBody) *GetCustomFieldOptionResponse {
	s.Body = v
	return s
}

type GetFileBlobsRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// src/Test.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// example:
	//
	// 10
	From *int64 `json:"from,omitempty" xml:"from,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master  / tag1.0 /  ecykhdd
	Ref *string `json:"ref,omitempty" xml:"ref,omitempty"`
	// example:
	//
	// 10
	To *int64 `json:"to,omitempty" xml:"to,omitempty"`
}

func (s GetFileBlobsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileBlobsRequest) GoString() string {
	return s.String()
}

func (s *GetFileBlobsRequest) SetAccessToken(v string) *GetFileBlobsRequest {
	s.AccessToken = &v
	return s
}

func (s *GetFileBlobsRequest) SetFilePath(v string) *GetFileBlobsRequest {
	s.FilePath = &v
	return s
}

func (s *GetFileBlobsRequest) SetFrom(v int64) *GetFileBlobsRequest {
	s.From = &v
	return s
}

func (s *GetFileBlobsRequest) SetOrganizationId(v string) *GetFileBlobsRequest {
	s.OrganizationId = &v
	return s
}

func (s *GetFileBlobsRequest) SetRef(v string) *GetFileBlobsRequest {
	s.Ref = &v
	return s
}

func (s *GetFileBlobsRequest) SetTo(v int64) *GetFileBlobsRequest {
	s.To = &v
	return s
}

type GetFileBlobsResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F590C9D8-E908-5B6C-95AC-56B7E8011FFA
	RequestId *string                         `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetFileBlobsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetFileBlobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileBlobsResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileBlobsResponseBody) SetErrorCode(v string) *GetFileBlobsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetFileBlobsResponseBody) SetErrorMessage(v string) *GetFileBlobsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetFileBlobsResponseBody) SetRequestId(v string) *GetFileBlobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFileBlobsResponseBody) SetResult(v *GetFileBlobsResponseBodyResult) *GetFileBlobsResponseBody {
	s.Result = v
	return s
}

func (s *GetFileBlobsResponseBody) SetSuccess(v bool) *GetFileBlobsResponseBody {
	s.Success = &v
	return s
}

type GetFileBlobsResponseBodyResult struct {
	// example:
	//
	// xxxx
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	Size    *int64  `json:"size,omitempty" xml:"size,omitempty"`
	// example:
	//
	// 65535
	TotalLines *int32 `json:"totalLines,omitempty" xml:"totalLines,omitempty"`
}

func (s GetFileBlobsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetFileBlobsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetFileBlobsResponseBodyResult) SetContent(v string) *GetFileBlobsResponseBodyResult {
	s.Content = &v
	return s
}

func (s *GetFileBlobsResponseBodyResult) SetSize(v int64) *GetFileBlobsResponseBodyResult {
	s.Size = &v
	return s
}

func (s *GetFileBlobsResponseBodyResult) SetTotalLines(v int32) *GetFileBlobsResponseBodyResult {
	s.TotalLines = &v
	return s
}

type GetFileBlobsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFileBlobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFileBlobsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileBlobsResponse) GoString() string {
	return s.String()
}

func (s *GetFileBlobsResponse) SetHeaders(v map[string]*string) *GetFileBlobsResponse {
	s.Headers = v
	return s
}

func (s *GetFileBlobsResponse) SetStatusCode(v int32) *GetFileBlobsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFileBlobsResponse) SetBody(v *GetFileBlobsResponseBody) *GetFileBlobsResponse {
	s.Body = v
	return s
}

type GetFileLastCommitRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// src/main/test.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master
	Sha *string `json:"sha,omitempty" xml:"sha,omitempty"`
	// example:
	//
	// false
	ShowSignature *bool `json:"showSignature,omitempty" xml:"showSignature,omitempty"`
}

func (s GetFileLastCommitRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileLastCommitRequest) GoString() string {
	return s.String()
}

func (s *GetFileLastCommitRequest) SetAccessToken(v string) *GetFileLastCommitRequest {
	s.AccessToken = &v
	return s
}

func (s *GetFileLastCommitRequest) SetFilePath(v string) *GetFileLastCommitRequest {
	s.FilePath = &v
	return s
}

func (s *GetFileLastCommitRequest) SetOrganizationId(v string) *GetFileLastCommitRequest {
	s.OrganizationId = &v
	return s
}

func (s *GetFileLastCommitRequest) SetSha(v string) *GetFileLastCommitRequest {
	s.Sha = &v
	return s
}

func (s *GetFileLastCommitRequest) SetShowSignature(v bool) *GetFileLastCommitRequest {
	s.ShowSignature = &v
	return s
}

type GetFileLastCommitResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetFileLastCommitResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetFileLastCommitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileLastCommitResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileLastCommitResponseBody) SetErrorCode(v string) *GetFileLastCommitResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetFileLastCommitResponseBody) SetErrorMessage(v string) *GetFileLastCommitResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetFileLastCommitResponseBody) SetRequestId(v string) *GetFileLastCommitResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFileLastCommitResponseBody) SetResult(v *GetFileLastCommitResponseBodyResult) *GetFileLastCommitResponseBody {
	s.Result = v
	return s
}

func (s *GetFileLastCommitResponseBody) SetSuccess(v bool) *GetFileLastCommitResponseBody {
	s.Success = &v
	return s
}

type GetFileLastCommitResponseBodyResult struct {
	// example:
	//
	// 2022-08-08 18:09:09
	AuthorDate *string `json:"authorDate,omitempty" xml:"authorDate,omitempty"`
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	// example:
	//
	// test-codeup
	AuthorName *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2022-03-18 15:00:02
	CommittedDate *string `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	// example:
	//
	// committer-codeup
	CommitterName *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// ff4fb5ac6d1f44f452654336d2dba468ae6c8d04
	Id        *string   `json:"id,omitempty" xml:"id,omitempty"`
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// ff4fb5ac
	ShortId   *string                                       `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Signature *GetFileLastCommitResponseBodyResultSignature `json:"signature,omitempty" xml:"signature,omitempty" type:"Struct"`
	Title     *string                                       `json:"title,omitempty" xml:"title,omitempty"`
}

func (s GetFileLastCommitResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetFileLastCommitResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetFileLastCommitResponseBodyResult) SetAuthorDate(v string) *GetFileLastCommitResponseBodyResult {
	s.AuthorDate = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetAuthorEmail(v string) *GetFileLastCommitResponseBodyResult {
	s.AuthorEmail = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetAuthorName(v string) *GetFileLastCommitResponseBodyResult {
	s.AuthorName = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetCommittedDate(v string) *GetFileLastCommitResponseBodyResult {
	s.CommittedDate = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetCommitterEmail(v string) *GetFileLastCommitResponseBodyResult {
	s.CommitterEmail = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetCommitterName(v string) *GetFileLastCommitResponseBodyResult {
	s.CommitterName = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetCreatedAt(v string) *GetFileLastCommitResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetId(v string) *GetFileLastCommitResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetMessage(v string) *GetFileLastCommitResponseBodyResult {
	s.Message = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetParentIds(v []*string) *GetFileLastCommitResponseBodyResult {
	s.ParentIds = v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetShortId(v string) *GetFileLastCommitResponseBodyResult {
	s.ShortId = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetSignature(v *GetFileLastCommitResponseBodyResultSignature) *GetFileLastCommitResponseBodyResult {
	s.Signature = v
	return s
}

func (s *GetFileLastCommitResponseBodyResult) SetTitle(v string) *GetFileLastCommitResponseBodyResult {
	s.Title = &v
	return s
}

type GetFileLastCommitResponseBodyResultSignature struct {
	// GPG密钥ID
	//
	// example:
	//
	// 34d2c47c7ce46a5c4639c5ffe208
	GpgKeyId *string `json:"gpgKeyId,omitempty" xml:"gpgKeyId,omitempty"`
	// example:
	//
	// verified
	VerificationStatus *string `json:"verificationStatus,omitempty" xml:"verificationStatus,omitempty"`
}

func (s GetFileLastCommitResponseBodyResultSignature) String() string {
	return tea.Prettify(s)
}

func (s GetFileLastCommitResponseBodyResultSignature) GoString() string {
	return s.String()
}

func (s *GetFileLastCommitResponseBodyResultSignature) SetGpgKeyId(v string) *GetFileLastCommitResponseBodyResultSignature {
	s.GpgKeyId = &v
	return s
}

func (s *GetFileLastCommitResponseBodyResultSignature) SetVerificationStatus(v string) *GetFileLastCommitResponseBodyResultSignature {
	s.VerificationStatus = &v
	return s
}

type GetFileLastCommitResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFileLastCommitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFileLastCommitResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileLastCommitResponse) GoString() string {
	return s.String()
}

func (s *GetFileLastCommitResponse) SetHeaders(v map[string]*string) *GetFileLastCommitResponse {
	s.Headers = v
	return s
}

func (s *GetFileLastCommitResponse) SetStatusCode(v int32) *GetFileLastCommitResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFileLastCommitResponse) SetBody(v *GetFileLastCommitResponseBody) *GetFileLastCommitResponse {
	s.Body = v
	return s
}

type GetFlowTagGroupResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string                                  `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	FlowTagGroup *GetFlowTagGroupResponseBodyFlowTagGroup `json:"flowTagGroup,omitempty" xml:"flowTagGroup,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetFlowTagGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFlowTagGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetFlowTagGroupResponseBody) SetErrorCode(v string) *GetFlowTagGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetFlowTagGroupResponseBody) SetErrorMessage(v string) *GetFlowTagGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetFlowTagGroupResponseBody) SetFlowTagGroup(v *GetFlowTagGroupResponseBodyFlowTagGroup) *GetFlowTagGroupResponseBody {
	s.FlowTagGroup = v
	return s
}

func (s *GetFlowTagGroupResponseBody) SetRequestId(v string) *GetFlowTagGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFlowTagGroupResponseBody) SetSuccess(v bool) *GetFlowTagGroupResponseBody {
	s.Success = &v
	return s
}

type GetFlowTagGroupResponseBodyFlowTagGroup struct {
	// example:
	//
	// 1111111111111
	CreatorAccountId *string                                               `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	FlowTagList      []*GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList `json:"flowTagList,omitempty" xml:"flowTagList,omitempty" type:"Repeated"`
	// example:
	//
	// 1111
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 1111111111111
	ModiferAccountId *string `json:"modiferAccountId,omitempty" xml:"modiferAccountId,omitempty"`
	Name             *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetFlowTagGroupResponseBodyFlowTagGroup) String() string {
	return tea.Prettify(s)
}

func (s GetFlowTagGroupResponseBodyFlowTagGroup) GoString() string {
	return s.String()
}

func (s *GetFlowTagGroupResponseBodyFlowTagGroup) SetCreatorAccountId(v string) *GetFlowTagGroupResponseBodyFlowTagGroup {
	s.CreatorAccountId = &v
	return s
}

func (s *GetFlowTagGroupResponseBodyFlowTagGroup) SetFlowTagList(v []*GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList) *GetFlowTagGroupResponseBodyFlowTagGroup {
	s.FlowTagList = v
	return s
}

func (s *GetFlowTagGroupResponseBodyFlowTagGroup) SetId(v int64) *GetFlowTagGroupResponseBodyFlowTagGroup {
	s.Id = &v
	return s
}

func (s *GetFlowTagGroupResponseBodyFlowTagGroup) SetModiferAccountId(v string) *GetFlowTagGroupResponseBodyFlowTagGroup {
	s.ModiferAccountId = &v
	return s
}

func (s *GetFlowTagGroupResponseBodyFlowTagGroup) SetName(v string) *GetFlowTagGroupResponseBodyFlowTagGroup {
	s.Name = &v
	return s
}

type GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList struct {
	// example:
	//
	// #1F9AEF
	Color *string `json:"color,omitempty" xml:"color,omitempty"`
	// example:
	//
	// 1111111111111
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 111
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 1111111111111
	ModiferAccountId *string `json:"modiferAccountId,omitempty" xml:"modiferAccountId,omitempty"`
	Name             *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList) String() string {
	return tea.Prettify(s)
}

func (s GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList) GoString() string {
	return s.String()
}

func (s *GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList) SetColor(v string) *GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList {
	s.Color = &v
	return s
}

func (s *GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList) SetCreatorAccountId(v string) *GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList {
	s.CreatorAccountId = &v
	return s
}

func (s *GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList) SetId(v int64) *GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList {
	s.Id = &v
	return s
}

func (s *GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList) SetModiferAccountId(v string) *GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList {
	s.ModiferAccountId = &v
	return s
}

func (s *GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList) SetName(v string) *GetFlowTagGroupResponseBodyFlowTagGroupFlowTagList {
	s.Name = &v
	return s
}

type GetFlowTagGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFlowTagGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFlowTagGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFlowTagGroupResponse) GoString() string {
	return s.String()
}

func (s *GetFlowTagGroupResponse) SetHeaders(v map[string]*string) *GetFlowTagGroupResponse {
	s.Headers = v
	return s
}

func (s *GetFlowTagGroupResponse) SetStatusCode(v int32) *GetFlowTagGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFlowTagGroupResponse) SetBody(v *GetFlowTagGroupResponseBody) *GetFlowTagGroupResponse {
	s.Body = v
	return s
}

type GetGroupByPathRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957/test-group
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetGroupByPathRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGroupByPathRequest) GoString() string {
	return s.String()
}

func (s *GetGroupByPathRequest) SetIdentity(v string) *GetGroupByPathRequest {
	s.Identity = &v
	return s
}

func (s *GetGroupByPathRequest) SetOrganizationId(v string) *GetGroupByPathRequest {
	s.OrganizationId = &v
	return s
}

type GetGroupByPathResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 6177543A-8D54-5736-A93B-E0195A1512CB
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetGroupByPathResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetGroupByPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGroupByPathResponseBody) GoString() string {
	return s.String()
}

func (s *GetGroupByPathResponseBody) SetErrorCode(v string) *GetGroupByPathResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetGroupByPathResponseBody) SetErrorMessage(v string) *GetGroupByPathResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetGroupByPathResponseBody) SetRequestId(v string) *GetGroupByPathResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGroupByPathResponseBody) SetResult(v *GetGroupByPathResponseBodyResult) *GetGroupByPathResponseBody {
	s.Result = v
	return s
}

func (s *GetGroupByPathResponseBody) SetSuccess(v bool) *GetGroupByPathResponseBody {
	s.Success = &v
	return s
}

type GetGroupByPathResponseBodyResult struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl   *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 30815
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-group
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// 19230
	OwnerId *string `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	// example:
	//
	// 26842
	ParentId *string `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// test-group
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// codeup-test-org/test-group
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// xxx
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s GetGroupByPathResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetGroupByPathResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetGroupByPathResponseBodyResult) SetAvatarUrl(v string) *GetGroupByPathResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *GetGroupByPathResponseBodyResult) SetDescription(v string) *GetGroupByPathResponseBodyResult {
	s.Description = &v
	return s
}

func (s *GetGroupByPathResponseBodyResult) SetId(v int64) *GetGroupByPathResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetGroupByPathResponseBodyResult) SetName(v string) *GetGroupByPathResponseBodyResult {
	s.Name = &v
	return s
}

func (s *GetGroupByPathResponseBodyResult) SetNameWithNamespace(v string) *GetGroupByPathResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *GetGroupByPathResponseBodyResult) SetOwnerId(v string) *GetGroupByPathResponseBodyResult {
	s.OwnerId = &v
	return s
}

func (s *GetGroupByPathResponseBodyResult) SetParentId(v string) *GetGroupByPathResponseBodyResult {
	s.ParentId = &v
	return s
}

func (s *GetGroupByPathResponseBodyResult) SetPath(v string) *GetGroupByPathResponseBodyResult {
	s.Path = &v
	return s
}

func (s *GetGroupByPathResponseBodyResult) SetPathWithNamespace(v string) *GetGroupByPathResponseBodyResult {
	s.PathWithNamespace = &v
	return s
}

func (s *GetGroupByPathResponseBodyResult) SetVisibilityLevel(v int32) *GetGroupByPathResponseBodyResult {
	s.VisibilityLevel = &v
	return s
}

func (s *GetGroupByPathResponseBodyResult) SetWebUrl(v string) *GetGroupByPathResponseBodyResult {
	s.WebUrl = &v
	return s
}

type GetGroupByPathResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetGroupByPathResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetGroupByPathResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGroupByPathResponse) GoString() string {
	return s.String()
}

func (s *GetGroupByPathResponse) SetHeaders(v map[string]*string) *GetGroupByPathResponse {
	s.Headers = v
	return s
}

func (s *GetGroupByPathResponse) SetStatusCode(v int32) *GetGroupByPathResponse {
	s.StatusCode = &v
	return s
}

func (s *GetGroupByPathResponse) SetBody(v *GetGroupByPathResponseBody) *GetGroupByPathResponse {
	s.Body = v
	return s
}

type GetGroupDetailRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 36612
	GroupId *int64 `json:"groupId,omitempty" xml:"groupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 6218766746d4d2ca636d0497
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetGroupDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGroupDetailRequest) GoString() string {
	return s.String()
}

func (s *GetGroupDetailRequest) SetAccessToken(v string) *GetGroupDetailRequest {
	s.AccessToken = &v
	return s
}

func (s *GetGroupDetailRequest) SetGroupId(v int64) *GetGroupDetailRequest {
	s.GroupId = &v
	return s
}

func (s *GetGroupDetailRequest) SetOrganizationId(v string) *GetGroupDetailRequest {
	s.OrganizationId = &v
	return s
}

type GetGroupDetailResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 4CA06B0B-5867-5DE6-A0FA-9F39C97B524C
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetGroupDetailResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetGroupDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGroupDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetGroupDetailResponseBody) SetErrorCode(v string) *GetGroupDetailResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetGroupDetailResponseBody) SetErrorMessage(v string) *GetGroupDetailResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetGroupDetailResponseBody) SetRequestId(v string) *GetGroupDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGroupDetailResponseBody) SetResult(v *GetGroupDetailResponseBodyResult) *GetGroupDetailResponseBody {
	s.Result = v
	return s
}

func (s *GetGroupDetailResponseBody) SetSuccess(v bool) *GetGroupDetailResponseBody {
	s.Success = &v
	return s
}

type GetGroupDetailResponseBodyResult struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl   *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 36612
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-group-detail
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// 19230
	OwnerId *int64 `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	// example:
	//
	// 26842
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// test-group-detail
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// codeup-test-org/test-group-detail
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// Group
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 10
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// ""
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s GetGroupDetailResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetGroupDetailResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetGroupDetailResponseBodyResult) SetAvatarUrl(v string) *GetGroupDetailResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetDescription(v string) *GetGroupDetailResponseBodyResult {
	s.Description = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetId(v int64) *GetGroupDetailResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetName(v string) *GetGroupDetailResponseBodyResult {
	s.Name = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetNameWithNamespace(v string) *GetGroupDetailResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetOwnerId(v int64) *GetGroupDetailResponseBodyResult {
	s.OwnerId = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetParentId(v int64) *GetGroupDetailResponseBodyResult {
	s.ParentId = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetPath(v string) *GetGroupDetailResponseBodyResult {
	s.Path = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetPathWithNamespace(v string) *GetGroupDetailResponseBodyResult {
	s.PathWithNamespace = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetType(v string) *GetGroupDetailResponseBodyResult {
	s.Type = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetVisibilityLevel(v int32) *GetGroupDetailResponseBodyResult {
	s.VisibilityLevel = &v
	return s
}

func (s *GetGroupDetailResponseBodyResult) SetWebUrl(v string) *GetGroupDetailResponseBodyResult {
	s.WebUrl = &v
	return s
}

type GetGroupDetailResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetGroupDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetGroupDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGroupDetailResponse) GoString() string {
	return s.String()
}

func (s *GetGroupDetailResponse) SetHeaders(v map[string]*string) *GetGroupDetailResponse {
	s.Headers = v
	return s
}

func (s *GetGroupDetailResponse) SetStatusCode(v int32) *GetGroupDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetGroupDetailResponse) SetBody(v *GetGroupDetailResponseBody) *GetGroupDetailResponse {
	s.Body = v
	return s
}

type GetHostGroupResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string                            `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	HostGroup    *GetHostGroupResponseBodyHostGroup `json:"hostGroup,omitempty" xml:"hostGroup,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetHostGroupResponseBody) SetErrorCode(v string) *GetHostGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetHostGroupResponseBody) SetErrorMessage(v string) *GetHostGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetHostGroupResponseBody) SetHostGroup(v *GetHostGroupResponseBodyHostGroup) *GetHostGroupResponseBody {
	s.HostGroup = v
	return s
}

func (s *GetHostGroupResponseBody) SetRequestId(v string) *GetHostGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHostGroupResponseBody) SetSuccess(v bool) *GetHostGroupResponseBody {
	s.Success = &v
	return s
}

type GetHostGroupResponseBodyHostGroup struct {
	// example:
	//
	// cn-bejing
	AliyunRegion *string `json:"aliyunRegion,omitempty" xml:"aliyunRegion,omitempty"`
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 111111
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	Description      *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// ecs
	EcsLabelKey *string `json:"ecsLabelKey,omitempty" xml:"ecsLabelKey,omitempty"`
	// example:
	//
	// ecs
	EcsLabelValue *string `json:"ecsLabelValue,omitempty" xml:"ecsLabelValue,omitempty"`
	// example:
	//
	// ECS_ALIYUN
	EcsType   *string                                       `json:"ecsType,omitempty" xml:"ecsType,omitempty"`
	HostInfos []*GetHostGroupResponseBodyHostGroupHostInfos `json:"hostInfos,omitempty" xml:"hostInfos,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	HostNum *int64 `json:"hostNum,omitempty" xml:"hostNum,omitempty"`
	// example:
	//
	// 1234
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 11111
	ModifierAccountId *string `json:"modifierAccountId,omitempty" xml:"modifierAccountId,omitempty"`
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 1234
	ServiceConnectionId *int64 `json:"serviceConnectionId,omitempty" xml:"serviceConnectionId,omitempty"`
	// example:
	//
	// ECS
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 1586863220000
	UpateTIme *int64 `json:"upateTIme,omitempty" xml:"upateTIme,omitempty"`
}

func (s GetHostGroupResponseBodyHostGroup) String() string {
	return tea.Prettify(s)
}

func (s GetHostGroupResponseBodyHostGroup) GoString() string {
	return s.String()
}

func (s *GetHostGroupResponseBodyHostGroup) SetAliyunRegion(v string) *GetHostGroupResponseBodyHostGroup {
	s.AliyunRegion = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetCreateTime(v int64) *GetHostGroupResponseBodyHostGroup {
	s.CreateTime = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetCreatorAccountId(v string) *GetHostGroupResponseBodyHostGroup {
	s.CreatorAccountId = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetDescription(v string) *GetHostGroupResponseBodyHostGroup {
	s.Description = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetEcsLabelKey(v string) *GetHostGroupResponseBodyHostGroup {
	s.EcsLabelKey = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetEcsLabelValue(v string) *GetHostGroupResponseBodyHostGroup {
	s.EcsLabelValue = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetEcsType(v string) *GetHostGroupResponseBodyHostGroup {
	s.EcsType = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetHostInfos(v []*GetHostGroupResponseBodyHostGroupHostInfos) *GetHostGroupResponseBodyHostGroup {
	s.HostInfos = v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetHostNum(v int64) *GetHostGroupResponseBodyHostGroup {
	s.HostNum = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetId(v int64) *GetHostGroupResponseBodyHostGroup {
	s.Id = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetModifierAccountId(v string) *GetHostGroupResponseBodyHostGroup {
	s.ModifierAccountId = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetName(v string) *GetHostGroupResponseBodyHostGroup {
	s.Name = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetServiceConnectionId(v int64) *GetHostGroupResponseBodyHostGroup {
	s.ServiceConnectionId = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetType(v string) *GetHostGroupResponseBodyHostGroup {
	s.Type = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroup) SetUpateTIme(v int64) *GetHostGroupResponseBodyHostGroup {
	s.UpateTIme = &v
	return s
}

type GetHostGroupResponseBodyHostGroupHostInfos struct {
	// example:
	//
	// cn-hangzhou
	AliyunRegionId *string `json:"aliyunRegionId,omitempty" xml:"aliyunRegionId,omitempty"`
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 11111
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// ceshi
	InstanceName *string `json:"instanceName,omitempty" xml:"instanceName,omitempty"`
	// example:
	//
	// 127.0.0.1
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// example:
	//
	// 1ssasa
	MachineSn *string `json:"machineSn,omitempty" xml:"machineSn,omitempty"`
	// example:
	//
	// 11111111111
	ModifierAccountId *string `json:"modifierAccountId,omitempty" xml:"modifierAccountId,omitempty"`
	// example:
	//
	// MachineInfo
	ObjectType *string `json:"objectType,omitempty" xml:"objectType,omitempty"`
	// example:
	//
	// 1586863220000
	UpdateTime *int64 `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s GetHostGroupResponseBodyHostGroupHostInfos) String() string {
	return tea.Prettify(s)
}

func (s GetHostGroupResponseBodyHostGroupHostInfos) GoString() string {
	return s.String()
}

func (s *GetHostGroupResponseBodyHostGroupHostInfos) SetAliyunRegionId(v string) *GetHostGroupResponseBodyHostGroupHostInfos {
	s.AliyunRegionId = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroupHostInfos) SetCreateTime(v int64) *GetHostGroupResponseBodyHostGroupHostInfos {
	s.CreateTime = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroupHostInfos) SetCreatorAccountId(v string) *GetHostGroupResponseBodyHostGroupHostInfos {
	s.CreatorAccountId = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroupHostInfos) SetInstanceName(v string) *GetHostGroupResponseBodyHostGroupHostInfos {
	s.InstanceName = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroupHostInfos) SetIp(v string) *GetHostGroupResponseBodyHostGroupHostInfos {
	s.Ip = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroupHostInfos) SetMachineSn(v string) *GetHostGroupResponseBodyHostGroupHostInfos {
	s.MachineSn = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroupHostInfos) SetModifierAccountId(v string) *GetHostGroupResponseBodyHostGroupHostInfos {
	s.ModifierAccountId = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroupHostInfos) SetObjectType(v string) *GetHostGroupResponseBodyHostGroupHostInfos {
	s.ObjectType = &v
	return s
}

func (s *GetHostGroupResponseBodyHostGroupHostInfos) SetUpdateTime(v int64) *GetHostGroupResponseBodyHostGroupHostInfos {
	s.UpdateTime = &v
	return s
}

type GetHostGroupResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHostGroupResponse) GoString() string {
	return s.String()
}

func (s *GetHostGroupResponse) SetHeaders(v map[string]*string) *GetHostGroupResponse {
	s.Headers = v
	return s
}

func (s *GetHostGroupResponse) SetStatusCode(v int32) *GetHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHostGroupResponse) SetBody(v *GetHostGroupResponseBody) *GetHostGroupResponse {
	s.Body = v
	return s
}

type GetMergeRequestRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetMergeRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestRequest) GoString() string {
	return s.String()
}

func (s *GetMergeRequestRequest) SetAccessToken(v string) *GetMergeRequestRequest {
	s.AccessToken = &v
	return s
}

func (s *GetMergeRequestRequest) SetOrganizationId(v string) *GetMergeRequestRequest {
	s.OrganizationId = &v
	return s
}

type GetMergeRequestResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetMergeRequestResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetMergeRequestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestResponseBody) GoString() string {
	return s.String()
}

func (s *GetMergeRequestResponseBody) SetErrorCode(v string) *GetMergeRequestResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMergeRequestResponseBody) SetErrorMessage(v string) *GetMergeRequestResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMergeRequestResponseBody) SetRequestId(v string) *GetMergeRequestResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMergeRequestResponseBody) SetResult(v *GetMergeRequestResponseBodyResult) *GetMergeRequestResponseBody {
	s.Result = v
	return s
}

func (s *GetMergeRequestResponseBody) SetSuccess(v bool) *GetMergeRequestResponseBody {
	s.Success = &v
	return s
}

type GetMergeRequestResponseBodyResult struct {
	// example:
	//
	// 1
	Ahead *int32 `json:"ahead,omitempty" xml:"ahead,omitempty"`
	// example:
	//
	// true
	AllRequirementsPass *bool                                    `json:"allRequirementsPass,omitempty" xml:"allRequirementsPass,omitempty"`
	Author              *GetMergeRequestResponseBodyResultAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// 1
	Behind *int32 `json:"behind,omitempty" xml:"behind,omitempty"`
	// example:
	//
	// WEB
	CreateFrom *string `json:"createFrom,omitempty" xml:"createFrom,omitempty"`
	// example:
	//
	// 2023-05-30T02:53:36Z
	CreateTime  *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// xxx
	DetailUrl *string `json:"detailUrl,omitempty" xml:"detailUrl,omitempty"`
	// example:
	//
	// 1
	LocalId        *int64  `json:"localId,omitempty" xml:"localId,omitempty"`
	MergedRevision *string `json:"mergedRevision,omitempty" xml:"mergedRevision,omitempty"`
	// example:
	//
	// bca90244c4b749e0b109df52ac0eb570
	MrBizId *string `json:"mrBizId,omitempty" xml:"mrBizId,omitempty"`
	// example:
	//
	// CODE_REVIEW
	MrType *string `json:"mrType,omitempty" xml:"mrType,omitempty"`
	// example:
	//
	// 2369234
	ProjectId *int64                                        `json:"projectId,omitempty" xml:"projectId,omitempty"`
	Reviewers []*GetMergeRequestResponseBodyResultReviewers `json:"reviewers,omitempty" xml:"reviewers,omitempty" type:"Repeated"`
	// example:
	//
	// test-merge-request
	SourceBranch *string `json:"sourceBranch,omitempty" xml:"sourceBranch,omitempty"`
	// example:
	//
	// 2369234
	SourceProjectId *int64 `json:"sourceProjectId,omitempty" xml:"sourceProjectId,omitempty"`
	// example:
	//
	// UNDER_REVIEW
	Status      *string                                         `json:"status,omitempty" xml:"status,omitempty"`
	Subscribers []*GetMergeRequestResponseBodyResultSubscribers `json:"subscribers,omitempty" xml:"subscribers,omitempty" type:"Repeated"`
	// example:
	//
	// true
	SupportMergeFastForwardOnly *bool `json:"supportMergeFastForwardOnly,omitempty" xml:"supportMergeFastForwardOnly,omitempty"`
	// example:
	//
	// master
	TargetBranch *string `json:"targetBranch,omitempty" xml:"targetBranch,omitempty"`
	// example:
	//
	// 2369234
	TargetProjectId                *int64  `json:"targetProjectId,omitempty" xml:"targetProjectId,omitempty"`
	TargetProjectNameWithNamespace *string `json:"targetProjectNameWithNamespace,omitempty" xml:"targetProjectNameWithNamespace,omitempty"`
	// example:
	//
	// orgId/test-group/test-target-repo
	TargetProjectPathWithNamespace *string                                    `json:"targetProjectPathWithNamespace,omitempty" xml:"targetProjectPathWithNamespace,omitempty"`
	Title                          *string                                    `json:"title,omitempty" xml:"title,omitempty"`
	TodoList                       *GetMergeRequestResponseBodyResultTodoList `json:"todoList,omitempty" xml:"todoList,omitempty" type:"Struct"`
	// example:
	//
	// 2023-05-30T02:53:36Z
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
	// example:
	//
	// xxx
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s GetMergeRequestResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetMergeRequestResponseBodyResult) SetAhead(v int32) *GetMergeRequestResponseBodyResult {
	s.Ahead = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetAllRequirementsPass(v bool) *GetMergeRequestResponseBodyResult {
	s.AllRequirementsPass = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetAuthor(v *GetMergeRequestResponseBodyResultAuthor) *GetMergeRequestResponseBodyResult {
	s.Author = v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetBehind(v int32) *GetMergeRequestResponseBodyResult {
	s.Behind = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetCreateFrom(v string) *GetMergeRequestResponseBodyResult {
	s.CreateFrom = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetCreateTime(v string) *GetMergeRequestResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetDescription(v string) *GetMergeRequestResponseBodyResult {
	s.Description = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetDetailUrl(v string) *GetMergeRequestResponseBodyResult {
	s.DetailUrl = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetLocalId(v int64) *GetMergeRequestResponseBodyResult {
	s.LocalId = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetMergedRevision(v string) *GetMergeRequestResponseBodyResult {
	s.MergedRevision = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetMrBizId(v string) *GetMergeRequestResponseBodyResult {
	s.MrBizId = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetMrType(v string) *GetMergeRequestResponseBodyResult {
	s.MrType = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetProjectId(v int64) *GetMergeRequestResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetReviewers(v []*GetMergeRequestResponseBodyResultReviewers) *GetMergeRequestResponseBodyResult {
	s.Reviewers = v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetSourceBranch(v string) *GetMergeRequestResponseBodyResult {
	s.SourceBranch = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetSourceProjectId(v int64) *GetMergeRequestResponseBodyResult {
	s.SourceProjectId = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetStatus(v string) *GetMergeRequestResponseBodyResult {
	s.Status = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetSubscribers(v []*GetMergeRequestResponseBodyResultSubscribers) *GetMergeRequestResponseBodyResult {
	s.Subscribers = v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetSupportMergeFastForwardOnly(v bool) *GetMergeRequestResponseBodyResult {
	s.SupportMergeFastForwardOnly = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetTargetBranch(v string) *GetMergeRequestResponseBodyResult {
	s.TargetBranch = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetTargetProjectId(v int64) *GetMergeRequestResponseBodyResult {
	s.TargetProjectId = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetTargetProjectNameWithNamespace(v string) *GetMergeRequestResponseBodyResult {
	s.TargetProjectNameWithNamespace = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetTargetProjectPathWithNamespace(v string) *GetMergeRequestResponseBodyResult {
	s.TargetProjectPathWithNamespace = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetTitle(v string) *GetMergeRequestResponseBodyResult {
	s.Title = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetTodoList(v *GetMergeRequestResponseBodyResultTodoList) *GetMergeRequestResponseBodyResult {
	s.TodoList = v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetUpdateTime(v string) *GetMergeRequestResponseBodyResult {
	s.UpdateTime = &v
	return s
}

func (s *GetMergeRequestResponseBodyResult) SetWebUrl(v string) *GetMergeRequestResponseBodyResult {
	s.WebUrl = &v
	return s
}

type GetMergeRequestResponseBodyResultAuthor struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 19927
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// root-test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s GetMergeRequestResponseBodyResultAuthor) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestResponseBodyResultAuthor) GoString() string {
	return s.String()
}

func (s *GetMergeRequestResponseBodyResultAuthor) SetAvatarUrl(v string) *GetMergeRequestResponseBodyResultAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultAuthor) SetEmail(v string) *GetMergeRequestResponseBodyResultAuthor {
	s.Email = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultAuthor) SetId(v int64) *GetMergeRequestResponseBodyResultAuthor {
	s.Id = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultAuthor) SetName(v string) *GetMergeRequestResponseBodyResultAuthor {
	s.Name = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultAuthor) SetState(v string) *GetMergeRequestResponseBodyResultAuthor {
	s.State = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultAuthor) SetUsername(v string) *GetMergeRequestResponseBodyResultAuthor {
	s.Username = &v
	return s
}

type GetMergeRequestResponseBodyResultReviewers struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email        *string `json:"email,omitempty" xml:"email,omitempty"`
	HasCommented *bool   `json:"hasCommented,omitempty" xml:"hasCommented,omitempty"`
	// example:
	//
	// false
	HasReviewed *bool `json:"hasReviewed,omitempty" xml:"hasReviewed,omitempty"`
	// example:
	//
	// 90452
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// NOT_PASS
	ReviewOpinionStatus *string `json:"reviewOpinionStatus,omitempty" xml:"reviewOpinionStatus,omitempty"`
	ReviewTime          *string `json:"reviewTime,omitempty" xml:"reviewTime,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// root-test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s GetMergeRequestResponseBodyResultReviewers) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestResponseBodyResultReviewers) GoString() string {
	return s.String()
}

func (s *GetMergeRequestResponseBodyResultReviewers) SetAvatarUrl(v string) *GetMergeRequestResponseBodyResultReviewers {
	s.AvatarUrl = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultReviewers) SetEmail(v string) *GetMergeRequestResponseBodyResultReviewers {
	s.Email = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultReviewers) SetHasCommented(v bool) *GetMergeRequestResponseBodyResultReviewers {
	s.HasCommented = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultReviewers) SetHasReviewed(v bool) *GetMergeRequestResponseBodyResultReviewers {
	s.HasReviewed = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultReviewers) SetId(v int64) *GetMergeRequestResponseBodyResultReviewers {
	s.Id = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultReviewers) SetName(v string) *GetMergeRequestResponseBodyResultReviewers {
	s.Name = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultReviewers) SetReviewOpinionStatus(v string) *GetMergeRequestResponseBodyResultReviewers {
	s.ReviewOpinionStatus = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultReviewers) SetReviewTime(v string) *GetMergeRequestResponseBodyResultReviewers {
	s.ReviewTime = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultReviewers) SetState(v string) *GetMergeRequestResponseBodyResultReviewers {
	s.State = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultReviewers) SetUsername(v string) *GetMergeRequestResponseBodyResultReviewers {
	s.Username = &v
	return s
}

type GetMergeRequestResponseBodyResultSubscribers struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 90452
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-subscriber
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-subscriber
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s GetMergeRequestResponseBodyResultSubscribers) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestResponseBodyResultSubscribers) GoString() string {
	return s.String()
}

func (s *GetMergeRequestResponseBodyResultSubscribers) SetAvatarUrl(v string) *GetMergeRequestResponseBodyResultSubscribers {
	s.AvatarUrl = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultSubscribers) SetEmail(v string) *GetMergeRequestResponseBodyResultSubscribers {
	s.Email = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultSubscribers) SetId(v int64) *GetMergeRequestResponseBodyResultSubscribers {
	s.Id = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultSubscribers) SetName(v string) *GetMergeRequestResponseBodyResultSubscribers {
	s.Name = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultSubscribers) SetState(v string) *GetMergeRequestResponseBodyResultSubscribers {
	s.State = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultSubscribers) SetUsername(v string) *GetMergeRequestResponseBodyResultSubscribers {
	s.Username = &v
	return s
}

type GetMergeRequestResponseBodyResultTodoList struct {
	RequirementCheckItems []*GetMergeRequestResponseBodyResultTodoListRequirementCheckItems `json:"requirementCheckItems,omitempty" xml:"requirementCheckItems,omitempty" type:"Repeated"`
}

func (s GetMergeRequestResponseBodyResultTodoList) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestResponseBodyResultTodoList) GoString() string {
	return s.String()
}

func (s *GetMergeRequestResponseBodyResultTodoList) SetRequirementCheckItems(v []*GetMergeRequestResponseBodyResultTodoListRequirementCheckItems) *GetMergeRequestResponseBodyResultTodoList {
	s.RequirementCheckItems = v
	return s
}

type GetMergeRequestResponseBodyResultTodoListRequirementCheckItems struct {
	// example:
	//
	// COMMENTS_CHECK
	ItemType *string `json:"itemType,omitempty" xml:"itemType,omitempty"`
	// example:
	//
	// true
	Pass *bool `json:"pass,omitempty" xml:"pass,omitempty"`
}

func (s GetMergeRequestResponseBodyResultTodoListRequirementCheckItems) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestResponseBodyResultTodoListRequirementCheckItems) GoString() string {
	return s.String()
}

func (s *GetMergeRequestResponseBodyResultTodoListRequirementCheckItems) SetItemType(v string) *GetMergeRequestResponseBodyResultTodoListRequirementCheckItems {
	s.ItemType = &v
	return s
}

func (s *GetMergeRequestResponseBodyResultTodoListRequirementCheckItems) SetPass(v bool) *GetMergeRequestResponseBodyResultTodoListRequirementCheckItems {
	s.Pass = &v
	return s
}

type GetMergeRequestResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMergeRequestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMergeRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestResponse) GoString() string {
	return s.String()
}

func (s *GetMergeRequestResponse) SetHeaders(v map[string]*string) *GetMergeRequestResponse {
	s.Headers = v
	return s
}

func (s *GetMergeRequestResponse) SetStatusCode(v int32) *GetMergeRequestResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMergeRequestResponse) SetBody(v *GetMergeRequestResponseBody) *GetMergeRequestResponse {
	s.Body = v
	return s
}

type GetMergeRequestChangeTreeRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5e733626d53f4b04a6aa0e23d4ff72b8
	FromPatchSetBizId *string `json:"fromPatchSetBizId,omitempty" xml:"fromPatchSetBizId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 7
	LocalId *int64 `json:"localId,omitempty" xml:"localId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 513fcfd81a9142d2bb0db4f72c0aa15b
	ToPatchSetBizId *string `json:"toPatchSetBizId,omitempty" xml:"toPatchSetBizId,omitempty"`
}

func (s GetMergeRequestChangeTreeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestChangeTreeRequest) GoString() string {
	return s.String()
}

func (s *GetMergeRequestChangeTreeRequest) SetAccessToken(v string) *GetMergeRequestChangeTreeRequest {
	s.AccessToken = &v
	return s
}

func (s *GetMergeRequestChangeTreeRequest) SetFromPatchSetBizId(v string) *GetMergeRequestChangeTreeRequest {
	s.FromPatchSetBizId = &v
	return s
}

func (s *GetMergeRequestChangeTreeRequest) SetLocalId(v int64) *GetMergeRequestChangeTreeRequest {
	s.LocalId = &v
	return s
}

func (s *GetMergeRequestChangeTreeRequest) SetOrganizationId(v string) *GetMergeRequestChangeTreeRequest {
	s.OrganizationId = &v
	return s
}

func (s *GetMergeRequestChangeTreeRequest) SetRepositoryIdentity(v string) *GetMergeRequestChangeTreeRequest {
	s.RepositoryIdentity = &v
	return s
}

func (s *GetMergeRequestChangeTreeRequest) SetToPatchSetBizId(v string) *GetMergeRequestChangeTreeRequest {
	s.ToPatchSetBizId = &v
	return s
}

type GetMergeRequestChangeTreeResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// HC93CE1A-8D7A-13A9-8306-7465DE2E5C0F
	RequestId *string                                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetMergeRequestChangeTreeResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetMergeRequestChangeTreeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestChangeTreeResponseBody) GoString() string {
	return s.String()
}

func (s *GetMergeRequestChangeTreeResponseBody) SetErrorCode(v string) *GetMergeRequestChangeTreeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBody) SetErrorMessage(v string) *GetMergeRequestChangeTreeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBody) SetRequestId(v string) *GetMergeRequestChangeTreeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBody) SetResult(v *GetMergeRequestChangeTreeResponseBodyResult) *GetMergeRequestChangeTreeResponseBody {
	s.Result = v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBody) SetSuccess(v bool) *GetMergeRequestChangeTreeResponseBody {
	s.Success = &v
	return s
}

type GetMergeRequestChangeTreeResponseBodyResult struct {
	// example:
	//
	// 20
	ChangedFilesCount *int64                                                          `json:"changedFilesCount,omitempty" xml:"changedFilesCount,omitempty"`
	ChangedFilesInfos []*GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos `json:"changedFilesInfos,omitempty" xml:"changedFilesInfos,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalAddLines *int64 `json:"totalAddLines,omitempty" xml:"totalAddLines,omitempty"`
	// example:
	//
	// 50
	TotalDelLines *int64 `json:"totalDelLines,omitempty" xml:"totalDelLines,omitempty"`
}

func (s GetMergeRequestChangeTreeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestChangeTreeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetMergeRequestChangeTreeResponseBodyResult) SetChangedFilesCount(v int64) *GetMergeRequestChangeTreeResponseBodyResult {
	s.ChangedFilesCount = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBodyResult) SetChangedFilesInfos(v []*GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) *GetMergeRequestChangeTreeResponseBodyResult {
	s.ChangedFilesInfos = v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBodyResult) SetTotalAddLines(v int64) *GetMergeRequestChangeTreeResponseBodyResult {
	s.TotalAddLines = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBodyResult) SetTotalDelLines(v int64) *GetMergeRequestChangeTreeResponseBodyResult {
	s.TotalDelLines = &v
	return s
}

type GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos struct {
	// example:
	//
	// 10
	AddLines *int64 `json:"addLines,omitempty" xml:"addLines,omitempty"`
	// example:
	//
	// false
	BinaryFile *bool `json:"binaryFile,omitempty" xml:"binaryFile,omitempty"`
	// example:
	//
	// 0
	DelLines *int64 `json:"delLines,omitempty" xml:"delLines,omitempty"`
	// example:
	//
	// false
	DeletedFile *bool `json:"deletedFile,omitempty" xml:"deletedFile,omitempty"`
	// example:
	//
	// true
	NewFile *bool `json:"newFile,omitempty" xml:"newFile,omitempty"`
	// example:
	//
	// test.txt
	NewPath *string `json:"newPath,omitempty" xml:"newPath,omitempty"`
	// example:
	//
	// test.txt
	OldPath *string `json:"oldPath,omitempty" xml:"oldPath,omitempty"`
	// example:
	//
	// false
	RenamedFile *bool `json:"renamedFile,omitempty" xml:"renamedFile,omitempty"`
}

func (s GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) GoString() string {
	return s.String()
}

func (s *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) SetAddLines(v int64) *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos {
	s.AddLines = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) SetBinaryFile(v bool) *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos {
	s.BinaryFile = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) SetDelLines(v int64) *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos {
	s.DelLines = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) SetDeletedFile(v bool) *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos {
	s.DeletedFile = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) SetNewFile(v bool) *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos {
	s.NewFile = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) SetNewPath(v string) *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos {
	s.NewPath = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) SetOldPath(v string) *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos {
	s.OldPath = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos) SetRenamedFile(v bool) *GetMergeRequestChangeTreeResponseBodyResultChangedFilesInfos {
	s.RenamedFile = &v
	return s
}

type GetMergeRequestChangeTreeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMergeRequestChangeTreeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMergeRequestChangeTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMergeRequestChangeTreeResponse) GoString() string {
	return s.String()
}

func (s *GetMergeRequestChangeTreeResponse) SetHeaders(v map[string]*string) *GetMergeRequestChangeTreeResponse {
	s.Headers = v
	return s
}

func (s *GetMergeRequestChangeTreeResponse) SetStatusCode(v int32) *GetMergeRequestChangeTreeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMergeRequestChangeTreeResponse) SetBody(v *GetMergeRequestChangeTreeResponseBody) *GetMergeRequestChangeTreeResponse {
	s.Body = v
	return s
}

type GetOrganizationMemberResponseBody struct {
	// example:
	//
	// null
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error info
	ErrorMessage *string                                  `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Member       *GetOrganizationMemberResponseBodyMember `json:"member,omitempty" xml:"member,omitempty" type:"Struct"`
	// example:
	//
	// HC93CE1A-8D7A-13A9-8306-7465DE2E5C0F
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetOrganizationMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOrganizationMemberResponseBody) GoString() string {
	return s.String()
}

func (s *GetOrganizationMemberResponseBody) SetErrorCode(v string) *GetOrganizationMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetOrganizationMemberResponseBody) SetErrorMessage(v string) *GetOrganizationMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetOrganizationMemberResponseBody) SetMember(v *GetOrganizationMemberResponseBodyMember) *GetOrganizationMemberResponseBody {
	s.Member = v
	return s
}

func (s *GetOrganizationMemberResponseBody) SetRequestId(v string) *GetOrganizationMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetOrganizationMemberResponseBody) SetSuccess(v bool) *GetOrganizationMemberResponseBody {
	s.Success = &v
	return s
}

type GetOrganizationMemberResponseBodyMember struct {
	// example:
	//
	// 123456677888
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	// example:
	//
	// 1631845101798
	Birthday  *int64    `json:"birthday,omitempty" xml:"birthday,omitempty"`
	DeptLists []*string `json:"deptLists,omitempty" xml:"deptLists,omitempty" type:"Repeated"`
	// example:
	//
	// 123@mail.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 1631845101798
	HiredDate  *int64                                             `json:"hiredDate,omitempty" xml:"hiredDate,omitempty"`
	Identities *GetOrganizationMemberResponseBodyMemberIdentities `json:"identities,omitempty" xml:"identities,omitempty" type:"Struct"`
	JobNumber  *string                                            `json:"jobNumber,omitempty" xml:"jobNumber,omitempty"`
	// example:
	//
	// 1631845101798
	JoinTime *int64 `json:"joinTime,omitempty" xml:"joinTime,omitempty"`
	// example:
	//
	// 1631845101798
	LastVisitTime *int64 `json:"lastVisitTime,omitempty" xml:"lastVisitTime,omitempty"`
	// example:
	//
	// 1390000****
	Mobile                 *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	OrganizationMemberName *string `json:"organizationMemberName,omitempty" xml:"organizationMemberName,omitempty"`
	// example:
	//
	// 8fc0c9ff039711dd64acd000
	OrganizationRoleId   *string `json:"organizationRoleId,omitempty" xml:"organizationRoleId,omitempty"`
	OrganizationRoleName *string `json:"organizationRoleName,omitempty" xml:"organizationRoleName,omitempty"`
	// example:
	//
	// normal
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s GetOrganizationMemberResponseBodyMember) String() string {
	return tea.Prettify(s)
}

func (s GetOrganizationMemberResponseBodyMember) GoString() string {
	return s.String()
}

func (s *GetOrganizationMemberResponseBodyMember) SetAccountId(v string) *GetOrganizationMemberResponseBodyMember {
	s.AccountId = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetBirthday(v int64) *GetOrganizationMemberResponseBodyMember {
	s.Birthday = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetDeptLists(v []*string) *GetOrganizationMemberResponseBodyMember {
	s.DeptLists = v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetEmail(v string) *GetOrganizationMemberResponseBodyMember {
	s.Email = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetHiredDate(v int64) *GetOrganizationMemberResponseBodyMember {
	s.HiredDate = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetIdentities(v *GetOrganizationMemberResponseBodyMemberIdentities) *GetOrganizationMemberResponseBodyMember {
	s.Identities = v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetJobNumber(v string) *GetOrganizationMemberResponseBodyMember {
	s.JobNumber = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetJoinTime(v int64) *GetOrganizationMemberResponseBodyMember {
	s.JoinTime = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetLastVisitTime(v int64) *GetOrganizationMemberResponseBodyMember {
	s.LastVisitTime = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetMobile(v string) *GetOrganizationMemberResponseBodyMember {
	s.Mobile = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetOrganizationMemberName(v string) *GetOrganizationMemberResponseBodyMember {
	s.OrganizationMemberName = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetOrganizationRoleId(v string) *GetOrganizationMemberResponseBodyMember {
	s.OrganizationRoleId = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetOrganizationRoleName(v string) *GetOrganizationMemberResponseBodyMember {
	s.OrganizationRoleName = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMember) SetState(v string) *GetOrganizationMemberResponseBodyMember {
	s.State = &v
	return s
}

type GetOrganizationMemberResponseBodyMemberIdentities struct {
	// example:
	//
	// 1236666
	ExternUid *string `json:"externUid,omitempty" xml:"externUid,omitempty"`
	// example:
	//
	// Dingtalk
	Provider *string `json:"provider,omitempty" xml:"provider,omitempty"`
}

func (s GetOrganizationMemberResponseBodyMemberIdentities) String() string {
	return tea.Prettify(s)
}

func (s GetOrganizationMemberResponseBodyMemberIdentities) GoString() string {
	return s.String()
}

func (s *GetOrganizationMemberResponseBodyMemberIdentities) SetExternUid(v string) *GetOrganizationMemberResponseBodyMemberIdentities {
	s.ExternUid = &v
	return s
}

func (s *GetOrganizationMemberResponseBodyMemberIdentities) SetProvider(v string) *GetOrganizationMemberResponseBodyMemberIdentities {
	s.Provider = &v
	return s
}

type GetOrganizationMemberResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetOrganizationMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetOrganizationMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOrganizationMemberResponse) GoString() string {
	return s.String()
}

func (s *GetOrganizationMemberResponse) SetHeaders(v map[string]*string) *GetOrganizationMemberResponse {
	s.Headers = v
	return s
}

func (s *GetOrganizationMemberResponse) SetStatusCode(v int32) *GetOrganizationMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOrganizationMemberResponse) SetBody(v *GetOrganizationMemberResponseBody) *GetOrganizationMemberResponse {
	s.Body = v
	return s
}

type GetPipelineResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string                          `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Pipeline     *GetPipelineResponseBodyPipeline `json:"pipeline,omitempty" xml:"pipeline,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBody) SetErrorCode(v string) *GetPipelineResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetPipelineResponseBody) SetErrorMessage(v string) *GetPipelineResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetPipelineResponseBody) SetPipeline(v *GetPipelineResponseBodyPipeline) *GetPipelineResponseBody {
	s.Pipeline = v
	return s
}

func (s *GetPipelineResponseBody) SetRequestId(v string) *GetPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPipelineResponseBody) SetSuccess(v bool) *GetPipelineResponseBody {
	s.Success = &v
	return s
}

type GetPipelineResponseBodyPipeline struct {
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 112222122
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 0
	EnvId *int32 `json:"envId,omitempty" xml:"envId,omitempty"`
	// example:
	//
	// 日常环境
	EnvName *string `json:"envName,omitempty" xml:"envName,omitempty"`
	// example:
	//
	// 1111
	GroupId *int64 `json:"groupId,omitempty" xml:"groupId,omitempty"`
	// example:
	//
	// 112222122
	ModifierAccountId *string `json:"modifierAccountId,omitempty" xml:"modifierAccountId,omitempty"`
	// example:
	//
	// 流水线
	Name           *string                                        `json:"name,omitempty" xml:"name,omitempty"`
	PipelineConfig *GetPipelineResponseBodyPipelinePipelineConfig `json:"pipelineConfig,omitempty" xml:"pipelineConfig,omitempty" type:"Struct"`
	TagList        []*GetPipelineResponseBodyPipelineTagList      `json:"tagList,omitempty" xml:"tagList,omitempty" type:"Repeated"`
	// example:
	//
	// 1586863220000
	UpdateTime *int64 `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s GetPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBodyPipeline) SetCreateTime(v int64) *GetPipelineResponseBodyPipeline {
	s.CreateTime = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetCreatorAccountId(v string) *GetPipelineResponseBodyPipeline {
	s.CreatorAccountId = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetEnvId(v int32) *GetPipelineResponseBodyPipeline {
	s.EnvId = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetEnvName(v string) *GetPipelineResponseBodyPipeline {
	s.EnvName = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetGroupId(v int64) *GetPipelineResponseBodyPipeline {
	s.GroupId = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetModifierAccountId(v string) *GetPipelineResponseBodyPipeline {
	s.ModifierAccountId = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetName(v string) *GetPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetPipelineConfig(v *GetPipelineResponseBodyPipelinePipelineConfig) *GetPipelineResponseBodyPipeline {
	s.PipelineConfig = v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetTagList(v []*GetPipelineResponseBodyPipelineTagList) *GetPipelineResponseBodyPipeline {
	s.TagList = v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetUpdateTime(v int64) *GetPipelineResponseBodyPipeline {
	s.UpdateTime = &v
	return s
}

type GetPipelineResponseBodyPipelinePipelineConfig struct {
	// example:
	//
	// schema: tb pipeline:   - name: 执行命令     stages:       - driven: AUTO         jobs:           - displayName: 执行命令             task: execution-component-production@10             identifier: \"10_1626147407245\"             templateType: task             templateSign: \"\"             templateBatchUpdate: \"N\"             extraInfo: \"\"             params:               version1: pre-jdk1.62               steps:                 - name: 执行命令                   stepType: exec-shell                   stepIdentifier: \"10_1626147407245__11_1626147407249\"                   command: |                     # input your command here                     echo hello,world!                   ARTIFACTS: \"\"                   JSONEncoding: true                   freeInTaskGroupModeFields:                     - ARTIFACTS                   source: 132504-sss_ddd_3mvJ               ENGINE_PIPELINE_NAME: \"${INPUTS.ENGINE_PIPELINE_NAME}\"               ENGINE_PIPELINE_ID: \"${INPUTS.ENGINE_PIPELINE_ID}\"               ENGINE_PIPELINE_INST_ID: \"${INPUTS.ENGINE_PIPELINE_INST_ID}\"               ENGINE_PIPELINE_INST_NUMBER: \"${INPUTS.ENGINE_PIPELINE_INST_NUMBER}\"               buildNodeGroup: K8S-4             plugins: []             output: []             freeInTaskGroupModeFields: []
	Flow *string `json:"flow,omitempty" xml:"flow,omitempty"`
	// example:
	//
	// {}
	Settings *string                                                 `json:"settings,omitempty" xml:"settings,omitempty"`
	Sources  []*GetPipelineResponseBodyPipelinePipelineConfigSources `json:"sources,omitempty" xml:"sources,omitempty" type:"Repeated"`
}

func (s GetPipelineResponseBodyPipelinePipelineConfig) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBodyPipelinePipelineConfig) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBodyPipelinePipelineConfig) SetFlow(v string) *GetPipelineResponseBodyPipelinePipelineConfig {
	s.Flow = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfig) SetSettings(v string) *GetPipelineResponseBodyPipelinePipelineConfig {
	s.Settings = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfig) SetSources(v []*GetPipelineResponseBodyPipelinePipelineConfigSources) *GetPipelineResponseBodyPipelinePipelineConfig {
	s.Sources = v
	return s
}

type GetPipelineResponseBodyPipelinePipelineConfigSources struct {
	Data *GetPipelineResponseBodyPipelinePipelineConfigSourcesData `json:"data,omitempty" xml:"data,omitempty" type:"Struct"`
	// example:
	//
	// xxsxsxs
	Sign *string `json:"sign,omitempty" xml:"sign,omitempty"`
	// example:
	//
	// Codeup
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetPipelineResponseBodyPipelinePipelineConfigSources) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBodyPipelinePipelineConfigSources) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSources) SetData(v *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) *GetPipelineResponseBodyPipelinePipelineConfigSources {
	s.Data = v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSources) SetSign(v string) *GetPipelineResponseBodyPipelinePipelineConfigSources {
	s.Sign = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSources) SetType(v string) *GetPipelineResponseBodyPipelinePipelineConfigSources {
	s.Type = &v
	return s
}

type GetPipelineResponseBodyPipelinePipelineConfigSourcesData struct {
	// example:
	//
	// master
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// 1
	CloneDepth *int64 `json:"cloneDepth,omitempty" xml:"cloneDepth,omitempty"`
	// Credential Id
	//
	// example:
	//
	// 222
	CredentialId *int64 `json:"credentialId,omitempty" xml:"credentialId,omitempty"`
	// Credential Label
	//
	// example:
	//
	// 企业公钥
	CredentialLabel *string `json:"credentialLabel,omitempty" xml:"credentialLabel,omitempty"`
	// Credential Type
	//
	// example:
	//
	// region-ssh
	CredentialType *string   `json:"credentialType,omitempty" xml:"credentialType,omitempty"`
	Events         []*string `json:"events,omitempty" xml:"events,omitempty" type:"Repeated"`
	// example:
	//
	// false
	IsBranchMode *bool `json:"isBranchMode,omitempty" xml:"isBranchMode,omitempty"`
	// example:
	//
	// true
	IsCloneDepth *bool `json:"isCloneDepth,omitempty" xml:"isCloneDepth,omitempty"`
	// example:
	//
	// false
	IsSubmodule *bool `json:"isSubmodule,omitempty" xml:"isSubmodule,omitempty"`
	// example:
	//
	// true
	IsTrigger *bool `json:"isTrigger,omitempty" xml:"isTrigger,omitempty"`
	// example:
	//
	// cdup/ss
	Label *string `json:"label,omitempty" xml:"label,omitempty"`
	// example:
	//
	// asasasas
	Namespace *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	// example:
	//
	// https://codeup.aliyun.com/test.git
	Repo *string `json:"repo,omitempty" xml:"repo,omitempty"`
	// example:
	//
	// 12
	ServiceConnectionId *int64 `json:"serviceConnectionId,omitempty" xml:"serviceConnectionId,omitempty"`
	// example:
	//
	// .*
	TriggerFilter *string `json:"triggerFilter,omitempty" xml:"triggerFilter,omitempty"`
	// example:
	//
	// https://flow.aliyun/webhook/asassasa
	Webhook *string `json:"webhook,omitempty" xml:"webhook,omitempty"`
}

func (s GetPipelineResponseBodyPipelinePipelineConfigSourcesData) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBodyPipelinePipelineConfigSourcesData) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetBranch(v string) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.Branch = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetCloneDepth(v int64) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.CloneDepth = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetCredentialId(v int64) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.CredentialId = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetCredentialLabel(v string) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.CredentialLabel = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetCredentialType(v string) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.CredentialType = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetEvents(v []*string) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.Events = v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetIsBranchMode(v bool) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.IsBranchMode = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetIsCloneDepth(v bool) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.IsCloneDepth = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetIsSubmodule(v bool) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.IsSubmodule = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetIsTrigger(v bool) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.IsTrigger = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetLabel(v string) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.Label = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetNamespace(v string) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.Namespace = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetRepo(v string) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.Repo = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetServiceConnectionId(v int64) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.ServiceConnectionId = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetTriggerFilter(v string) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.TriggerFilter = &v
	return s
}

func (s *GetPipelineResponseBodyPipelinePipelineConfigSourcesData) SetWebhook(v string) *GetPipelineResponseBodyPipelinePipelineConfigSourcesData {
	s.Webhook = &v
	return s
}

type GetPipelineResponseBodyPipelineTagList struct {
	// example:
	//
	// 22
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 标签1
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetPipelineResponseBodyPipelineTagList) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBodyPipelineTagList) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBodyPipelineTagList) SetId(v int64) *GetPipelineResponseBodyPipelineTagList {
	s.Id = &v
	return s
}

func (s *GetPipelineResponseBodyPipelineTagList) SetName(v string) *GetPipelineResponseBodyPipelineTagList {
	s.Name = &v
	return s
}

type GetPipelineResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponse) GoString() string {
	return s.String()
}

func (s *GetPipelineResponse) SetHeaders(v map[string]*string) *GetPipelineResponse {
	s.Headers = v
	return s
}

func (s *GetPipelineResponse) SetStatusCode(v int32) *GetPipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPipelineResponse) SetBody(v *GetPipelineResponseBody) *GetPipelineResponse {
	s.Body = v
	return s
}

type GetPipelineArtifactUrlRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test.tgz
	FileName *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// /test/test/test.tgz
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
}

func (s GetPipelineArtifactUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineArtifactUrlRequest) GoString() string {
	return s.String()
}

func (s *GetPipelineArtifactUrlRequest) SetFileName(v string) *GetPipelineArtifactUrlRequest {
	s.FileName = &v
	return s
}

func (s *GetPipelineArtifactUrlRequest) SetFilePath(v string) *GetPipelineArtifactUrlRequest {
	s.FilePath = &v
	return s
}

type GetPipelineArtifactUrlResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// http://aliyun.com/
	FileUrl *string `json:"fileUrl,omitempty" xml:"fileUrl,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetPipelineArtifactUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineArtifactUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetPipelineArtifactUrlResponseBody) SetErrorCode(v string) *GetPipelineArtifactUrlResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetPipelineArtifactUrlResponseBody) SetErrorMessage(v string) *GetPipelineArtifactUrlResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetPipelineArtifactUrlResponseBody) SetFileUrl(v string) *GetPipelineArtifactUrlResponseBody {
	s.FileUrl = &v
	return s
}

func (s *GetPipelineArtifactUrlResponseBody) SetRequestId(v string) *GetPipelineArtifactUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPipelineArtifactUrlResponseBody) SetSuccess(v bool) *GetPipelineArtifactUrlResponseBody {
	s.Success = &v
	return s
}

type GetPipelineArtifactUrlResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPipelineArtifactUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPipelineArtifactUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineArtifactUrlResponse) GoString() string {
	return s.String()
}

func (s *GetPipelineArtifactUrlResponse) SetHeaders(v map[string]*string) *GetPipelineArtifactUrlResponse {
	s.Headers = v
	return s
}

func (s *GetPipelineArtifactUrlResponse) SetStatusCode(v int32) *GetPipelineArtifactUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPipelineArtifactUrlResponse) SetBody(v *GetPipelineArtifactUrlResponseBody) *GetPipelineArtifactUrlResponse {
	s.Body = v
	return s
}

type GetPipelineEmasArtifactUrlRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 122
	ServiceConnectionId *int64 `json:"serviceConnectionId,omitempty" xml:"serviceConnectionId,omitempty"`
}

func (s GetPipelineEmasArtifactUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineEmasArtifactUrlRequest) GoString() string {
	return s.String()
}

func (s *GetPipelineEmasArtifactUrlRequest) SetServiceConnectionId(v int64) *GetPipelineEmasArtifactUrlRequest {
	s.ServiceConnectionId = &v
	return s
}

type GetPipelineEmasArtifactUrlResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// http://aliyun.com
	FileUrl *string `json:"fileUrl,omitempty" xml:"fileUrl,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetPipelineEmasArtifactUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineEmasArtifactUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetPipelineEmasArtifactUrlResponseBody) SetErrorCode(v string) *GetPipelineEmasArtifactUrlResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetPipelineEmasArtifactUrlResponseBody) SetErrorMessage(v string) *GetPipelineEmasArtifactUrlResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetPipelineEmasArtifactUrlResponseBody) SetFileUrl(v string) *GetPipelineEmasArtifactUrlResponseBody {
	s.FileUrl = &v
	return s
}

func (s *GetPipelineEmasArtifactUrlResponseBody) SetRequestId(v string) *GetPipelineEmasArtifactUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPipelineEmasArtifactUrlResponseBody) SetSuccess(v bool) *GetPipelineEmasArtifactUrlResponseBody {
	s.Success = &v
	return s
}

type GetPipelineEmasArtifactUrlResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPipelineEmasArtifactUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPipelineEmasArtifactUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineEmasArtifactUrlResponse) GoString() string {
	return s.String()
}

func (s *GetPipelineEmasArtifactUrlResponse) SetHeaders(v map[string]*string) *GetPipelineEmasArtifactUrlResponse {
	s.Headers = v
	return s
}

func (s *GetPipelineEmasArtifactUrlResponse) SetStatusCode(v int32) *GetPipelineEmasArtifactUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPipelineEmasArtifactUrlResponse) SetBody(v *GetPipelineEmasArtifactUrlResponseBody) *GetPipelineEmasArtifactUrlResponse {
	s.Body = v
	return s
}

type GetPipelineGroupResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage  *string                                    `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	PipelineGroup *GetPipelineGroupResponseBodyPipelineGroup `json:"pipelineGroup,omitempty" xml:"pipelineGroup,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetPipelineGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetPipelineGroupResponseBody) SetErrorCode(v string) *GetPipelineGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetPipelineGroupResponseBody) SetErrorMessage(v string) *GetPipelineGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetPipelineGroupResponseBody) SetPipelineGroup(v *GetPipelineGroupResponseBodyPipelineGroup) *GetPipelineGroupResponseBody {
	s.PipelineGroup = v
	return s
}

func (s *GetPipelineGroupResponseBody) SetRequestId(v string) *GetPipelineGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPipelineGroupResponseBody) SetSuccess(v bool) *GetPipelineGroupResponseBody {
	s.Success = &v
	return s
}

type GetPipelineGroupResponseBodyPipelineGroup struct {
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 111
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetPipelineGroupResponseBodyPipelineGroup) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineGroupResponseBodyPipelineGroup) GoString() string {
	return s.String()
}

func (s *GetPipelineGroupResponseBodyPipelineGroup) SetCreateTime(v int64) *GetPipelineGroupResponseBodyPipelineGroup {
	s.CreateTime = &v
	return s
}

func (s *GetPipelineGroupResponseBodyPipelineGroup) SetId(v int64) *GetPipelineGroupResponseBodyPipelineGroup {
	s.Id = &v
	return s
}

func (s *GetPipelineGroupResponseBodyPipelineGroup) SetName(v string) *GetPipelineGroupResponseBodyPipelineGroup {
	s.Name = &v
	return s
}

type GetPipelineGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPipelineGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPipelineGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineGroupResponse) GoString() string {
	return s.String()
}

func (s *GetPipelineGroupResponse) SetHeaders(v map[string]*string) *GetPipelineGroupResponse {
	s.Headers = v
	return s
}

func (s *GetPipelineGroupResponse) SetStatusCode(v int32) *GetPipelineGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPipelineGroupResponse) SetBody(v *GetPipelineGroupResponseBody) *GetPipelineGroupResponse {
	s.Body = v
	return s
}

type GetPipelineRunResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string                                `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	PipelineRun  *GetPipelineRunResponseBodyPipelineRun `json:"pipelineRun,omitempty" xml:"pipelineRun,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetPipelineRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBody) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBody) SetErrorCode(v string) *GetPipelineRunResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetPipelineRunResponseBody) SetErrorMessage(v string) *GetPipelineRunResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetPipelineRunResponseBody) SetPipelineRun(v *GetPipelineRunResponseBodyPipelineRun) *GetPipelineRunResponseBody {
	s.PipelineRun = v
	return s
}

func (s *GetPipelineRunResponseBody) SetRequestId(v string) *GetPipelineRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPipelineRunResponseBody) SetSuccess(v bool) *GetPipelineRunResponseBody {
	s.Success = &v
	return s
}

type GetPipelineRunResponseBodyPipelineRun struct {
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 1111111111
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 11111111111
	ModifierAccountId *string `json:"modifierAccountId,omitempty" xml:"modifierAccountId,omitempty"`
	// example:
	//
	// 1234
	PipelineId *int64 `json:"pipelineId,omitempty" xml:"pipelineId,omitempty"`
	// example:
	//
	// 1
	PipelineRunId *int64                                          `json:"pipelineRunId,omitempty" xml:"pipelineRunId,omitempty"`
	Sources       []*GetPipelineRunResponseBodyPipelineRunSources `json:"sources,omitempty" xml:"sources,omitempty" type:"Repeated"`
	StageGroup    [][]*string                                     `json:"stageGroup,omitempty" xml:"stageGroup,omitempty" type:"Repeated"`
	Stages        []*GetPipelineRunResponseBodyPipelineRunStages  `json:"stages,omitempty" xml:"stages,omitempty" type:"Repeated"`
	// example:
	//
	// SUCCESS
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 1
	TriggerMode *int32 `json:"triggerMode,omitempty" xml:"triggerMode,omitempty"`
	// example:
	//
	// 1586863220000
	UpdateTime *int64 `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s GetPipelineRunResponseBodyPipelineRun) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBodyPipelineRun) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetCreateTime(v int64) *GetPipelineRunResponseBodyPipelineRun {
	s.CreateTime = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetCreatorAccountId(v string) *GetPipelineRunResponseBodyPipelineRun {
	s.CreatorAccountId = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetModifierAccountId(v string) *GetPipelineRunResponseBodyPipelineRun {
	s.ModifierAccountId = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetPipelineId(v int64) *GetPipelineRunResponseBodyPipelineRun {
	s.PipelineId = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetPipelineRunId(v int64) *GetPipelineRunResponseBodyPipelineRun {
	s.PipelineRunId = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetSources(v []*GetPipelineRunResponseBodyPipelineRunSources) *GetPipelineRunResponseBodyPipelineRun {
	s.Sources = v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetStageGroup(v [][]*string) *GetPipelineRunResponseBodyPipelineRun {
	s.StageGroup = v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetStages(v []*GetPipelineRunResponseBodyPipelineRunStages) *GetPipelineRunResponseBodyPipelineRun {
	s.Stages = v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetStatus(v string) *GetPipelineRunResponseBodyPipelineRun {
	s.Status = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetTriggerMode(v int32) *GetPipelineRunResponseBodyPipelineRun {
	s.TriggerMode = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRun) SetUpdateTime(v int64) *GetPipelineRunResponseBodyPipelineRun {
	s.UpdateTime = &v
	return s
}

type GetPipelineRunResponseBodyPipelineRunSources struct {
	Data *GetPipelineRunResponseBodyPipelineRunSourcesData `json:"data,omitempty" xml:"data,omitempty" type:"Struct"`
	// example:
	//
	// assaaaaaasasasa
	Sign *string `json:"sign,omitempty" xml:"sign,omitempty"`
	// example:
	//
	// Codeup
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetPipelineRunResponseBodyPipelineRunSources) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBodyPipelineRunSources) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBodyPipelineRunSources) SetData(v *GetPipelineRunResponseBodyPipelineRunSourcesData) *GetPipelineRunResponseBodyPipelineRunSources {
	s.Data = v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunSources) SetSign(v string) *GetPipelineRunResponseBodyPipelineRunSources {
	s.Sign = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunSources) SetType(v string) *GetPipelineRunResponseBodyPipelineRunSources {
	s.Type = &v
	return s
}

type GetPipelineRunResponseBodyPipelineRunSourcesData struct {
	// example:
	//
	// master
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// {}
	Commint *string `json:"commint,omitempty" xml:"commint,omitempty"`
	// example:
	//
	// http://codeup.aliyun.com/a.git
	Repo *string `json:"repo,omitempty" xml:"repo,omitempty"`
}

func (s GetPipelineRunResponseBodyPipelineRunSourcesData) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBodyPipelineRunSourcesData) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBodyPipelineRunSourcesData) SetBranch(v string) *GetPipelineRunResponseBodyPipelineRunSourcesData {
	s.Branch = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunSourcesData) SetCommint(v string) *GetPipelineRunResponseBodyPipelineRunSourcesData {
	s.Commint = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunSourcesData) SetRepo(v string) *GetPipelineRunResponseBodyPipelineRunSourcesData {
	s.Repo = &v
	return s
}

type GetPipelineRunResponseBodyPipelineRunStages struct {
	// example:
	//
	// Java构建
	Name      *string                                               `json:"name,omitempty" xml:"name,omitempty"`
	StageInfo *GetPipelineRunResponseBodyPipelineRunStagesStageInfo `json:"stageInfo,omitempty" xml:"stageInfo,omitempty" type:"Struct"`
}

func (s GetPipelineRunResponseBodyPipelineRunStages) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBodyPipelineRunStages) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBodyPipelineRunStages) SetName(v string) *GetPipelineRunResponseBodyPipelineRunStages {
	s.Name = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStages) SetStageInfo(v *GetPipelineRunResponseBodyPipelineRunStagesStageInfo) *GetPipelineRunResponseBodyPipelineRunStages {
	s.StageInfo = v
	return s
}

type GetPipelineRunResponseBodyPipelineRunStagesStageInfo struct {
	// example:
	//
	// 1586863220000
	EndTime *int64                                                      `json:"endTime,omitempty" xml:"endTime,omitempty"`
	Jobs    []*GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs `json:"jobs,omitempty" xml:"jobs,omitempty" type:"Repeated"`
	// example:
	//
	// Java构建
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 1586863220000
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// example:
	//
	// RUNNING
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetPipelineRunResponseBodyPipelineRunStagesStageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBodyPipelineRunStagesStageInfo) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfo) SetEndTime(v int64) *GetPipelineRunResponseBodyPipelineRunStagesStageInfo {
	s.EndTime = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfo) SetJobs(v []*GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs) *GetPipelineRunResponseBodyPipelineRunStagesStageInfo {
	s.Jobs = v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfo) SetName(v string) *GetPipelineRunResponseBodyPipelineRunStagesStageInfo {
	s.Name = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfo) SetStartTime(v int64) *GetPipelineRunResponseBodyPipelineRunStagesStageInfo {
	s.StartTime = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfo) SetStatus(v string) *GetPipelineRunResponseBodyPipelineRunStagesStageInfo {
	s.Status = &v
	return s
}

type GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs struct {
	Actions []*GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions `json:"actions,omitempty" xml:"actions,omitempty" type:"Repeated"`
	// example:
	//
	// 1586863220000
	EndTime *int64 `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 21212
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// java构建
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// {}
	Params *string `json:"params,omitempty" xml:"params,omitempty"`
	// example:
	//
	// 1586863220000
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// example:
	//
	// RUNNING
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetActions(v []*GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.Actions = v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetEndTime(v int64) *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.EndTime = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetId(v int64) *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.Id = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetName(v string) *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.Name = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetParams(v string) *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.Params = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetStartTime(v int64) *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.StartTime = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetStatus(v string) *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.Status = &v
	return s
}

type GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions struct {
	// example:
	//
	// true
	Disable *bool `json:"disable,omitempty" xml:"disable,omitempty"`
	// example:
	//
	// {}
	Params map[string]interface{} `json:"params,omitempty" xml:"params,omitempty"`
	// example:
	//
	// PassPipelineValidate
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) SetDisable(v bool) *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions {
	s.Disable = &v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) SetParams(v map[string]interface{}) *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions {
	s.Params = v
	return s
}

func (s *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) SetType(v string) *GetPipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions {
	s.Type = &v
	return s
}

type GetPipelineRunResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPipelineRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPipelineRunResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRunResponse) GoString() string {
	return s.String()
}

func (s *GetPipelineRunResponse) SetHeaders(v map[string]*string) *GetPipelineRunResponse {
	s.Headers = v
	return s
}

func (s *GetPipelineRunResponse) SetStatusCode(v int32) *GetPipelineRunResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPipelineRunResponse) SetBody(v *GetPipelineRunResponseBody) *GetPipelineRunResponse {
	s.Body = v
	return s
}

type GetPipelineScanReportUrlRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// /test/test/test.html
	ReportPath *string `json:"reportPath,omitempty" xml:"reportPath,omitempty"`
}

func (s GetPipelineScanReportUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineScanReportUrlRequest) GoString() string {
	return s.String()
}

func (s *GetPipelineScanReportUrlRequest) SetReportPath(v string) *GetPipelineScanReportUrlRequest {
	s.ReportPath = &v
	return s
}

type GetPipelineScanReportUrlResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// http://aliyun.com
	ReportUrl *string `json:"reportUrl,omitempty" xml:"reportUrl,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetPipelineScanReportUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineScanReportUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetPipelineScanReportUrlResponseBody) SetErrorCode(v string) *GetPipelineScanReportUrlResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetPipelineScanReportUrlResponseBody) SetErrorMessage(v string) *GetPipelineScanReportUrlResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetPipelineScanReportUrlResponseBody) SetReportUrl(v string) *GetPipelineScanReportUrlResponseBody {
	s.ReportUrl = &v
	return s
}

func (s *GetPipelineScanReportUrlResponseBody) SetRequestId(v string) *GetPipelineScanReportUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPipelineScanReportUrlResponseBody) SetSuccess(v bool) *GetPipelineScanReportUrlResponseBody {
	s.Success = &v
	return s
}

type GetPipelineScanReportUrlResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPipelineScanReportUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPipelineScanReportUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineScanReportUrlResponse) GoString() string {
	return s.String()
}

func (s *GetPipelineScanReportUrlResponse) SetHeaders(v map[string]*string) *GetPipelineScanReportUrlResponse {
	s.Headers = v
	return s
}

func (s *GetPipelineScanReportUrlResponse) SetStatusCode(v int32) *GetPipelineScanReportUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPipelineScanReportUrlResponse) SetBody(v *GetPipelineScanReportUrlResponseBody) *GetPipelineScanReportUrlResponse {
	s.Body = v
	return s
}

type GetProjectInfoResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMessage *string                            `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Project      *GetProjectInfoResponseBodyProject `json:"project,omitempty" xml:"project,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetProjectInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProjectInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetProjectInfoResponseBody) SetErrorCode(v string) *GetProjectInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetProjectInfoResponseBody) SetErrorMessage(v string) *GetProjectInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetProjectInfoResponseBody) SetProject(v *GetProjectInfoResponseBodyProject) *GetProjectInfoResponseBody {
	s.Project = v
	return s
}

func (s *GetProjectInfoResponseBody) SetRequestId(v string) *GetProjectInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetProjectInfoResponseBody) SetSuccess(v bool) *GetProjectInfoResponseBody {
	s.Success = &v
	return s
}

type GetProjectInfoResponseBodyProject struct {
	// example:
	//
	// null
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// example:
	//
	// Project
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// OJAY
	CustomCode *string `json:"customCode,omitempty" xml:"customCode,omitempty"`
	// example:
	//
	// xxx
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1623916393000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// https://xxxxxx.png
	Icon *string `json:"icon,omitempty" xml:"icon,omitempty"`
	// example:
	//
	// https://xxxxxx.png
	IconBig *string `json:"iconBig,omitempty" xml:"iconBig,omitempty"`
	// example:
	//
	// {"small":"https://xxxxxx.png","big":"https://img.yyyyyy.png"}
	IconGroup *string `json:"iconGroup,omitempty" xml:"iconGroup,omitempty"`
	// example:
	//
	// https://img.yyyyyy.png
	IconSmall *string `json:"iconSmall,omitempty" xml:"iconSmall,omitempty"`
	// example:
	//
	// null
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// e8b2xxxxxx2abdxxxxxxxx23
	IdentifierPath *string `json:"identifierPath,omitempty" xml:"identifierPath,omitempty"`
	// example:
	//
	// NORMAL
	LogicalStatus *string `json:"logicalStatus,omitempty" xml:"logicalStatus,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	Name     *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 5e70xxxxxxcd000xxxxe96
	OrganizationIdentifier *string `json:"organizationIdentifier,omitempty" xml:"organizationIdentifier,omitempty"`
	// example:
	//
	// null
	ParentIdentifier *string `json:"parentIdentifier,omitempty" xml:"parentIdentifier,omitempty"`
	// example:
	//
	// public
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// 8a40xxxxxxxxxxxxx64
	StatusIdentifier *string `json:"statusIdentifier,omitempty" xml:"statusIdentifier,omitempty"`
	// example:
	//
	// 8a4058a71159b68254......
	StatusStageIdentifier *string `json:"statusStageIdentifier,omitempty" xml:"statusStageIdentifier,omitempty"`
	// example:
	//
	// null
	SubType *string `json:"subType,omitempty" xml:"subType,omitempty"`
	// example:
	//
	// CustomProject
	TypeIdentifier *string `json:"typeIdentifier,omitempty" xml:"typeIdentifier,omitempty"`
}

func (s GetProjectInfoResponseBodyProject) String() string {
	return tea.Prettify(s)
}

func (s GetProjectInfoResponseBodyProject) GoString() string {
	return s.String()
}

func (s *GetProjectInfoResponseBodyProject) SetCategory(v string) *GetProjectInfoResponseBodyProject {
	s.Category = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetCategoryIdentifier(v string) *GetProjectInfoResponseBodyProject {
	s.CategoryIdentifier = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetCreator(v string) *GetProjectInfoResponseBodyProject {
	s.Creator = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetCustomCode(v string) *GetProjectInfoResponseBodyProject {
	s.CustomCode = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetDescription(v string) *GetProjectInfoResponseBodyProject {
	s.Description = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetGmtCreate(v int64) *GetProjectInfoResponseBodyProject {
	s.GmtCreate = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetGmtModified(v int64) *GetProjectInfoResponseBodyProject {
	s.GmtModified = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetIcon(v string) *GetProjectInfoResponseBodyProject {
	s.Icon = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetIconBig(v string) *GetProjectInfoResponseBodyProject {
	s.IconBig = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetIconGroup(v string) *GetProjectInfoResponseBodyProject {
	s.IconGroup = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetIconSmall(v string) *GetProjectInfoResponseBodyProject {
	s.IconSmall = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetId(v string) *GetProjectInfoResponseBodyProject {
	s.Id = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetIdentifier(v string) *GetProjectInfoResponseBodyProject {
	s.Identifier = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetIdentifierPath(v string) *GetProjectInfoResponseBodyProject {
	s.IdentifierPath = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetLogicalStatus(v string) *GetProjectInfoResponseBodyProject {
	s.LogicalStatus = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetModifier(v string) *GetProjectInfoResponseBodyProject {
	s.Modifier = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetName(v string) *GetProjectInfoResponseBodyProject {
	s.Name = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetOrganizationIdentifier(v string) *GetProjectInfoResponseBodyProject {
	s.OrganizationIdentifier = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetParentIdentifier(v string) *GetProjectInfoResponseBodyProject {
	s.ParentIdentifier = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetScope(v string) *GetProjectInfoResponseBodyProject {
	s.Scope = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetStatusIdentifier(v string) *GetProjectInfoResponseBodyProject {
	s.StatusIdentifier = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetStatusStageIdentifier(v string) *GetProjectInfoResponseBodyProject {
	s.StatusStageIdentifier = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetSubType(v string) *GetProjectInfoResponseBodyProject {
	s.SubType = &v
	return s
}

func (s *GetProjectInfoResponseBodyProject) SetTypeIdentifier(v string) *GetProjectInfoResponseBodyProject {
	s.TypeIdentifier = &v
	return s
}

type GetProjectInfoResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetProjectInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetProjectInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProjectInfoResponse) GoString() string {
	return s.String()
}

func (s *GetProjectInfoResponse) SetHeaders(v map[string]*string) *GetProjectInfoResponse {
	s.Headers = v
	return s
}

func (s *GetProjectInfoResponse) SetStatusCode(v int32) *GetProjectInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetProjectInfoResponse) SetBody(v *GetProjectInfoResponseBody) *GetProjectInfoResponse {
	s.Body = v
	return s
}

type GetProjectMemberRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5eb53bb338076f00011bcfd5
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetProjectMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProjectMemberRequest) GoString() string {
	return s.String()
}

func (s *GetProjectMemberRequest) SetAccessToken(v string) *GetProjectMemberRequest {
	s.AccessToken = &v
	return s
}

func (s *GetProjectMemberRequest) SetOrganizationId(v string) *GetProjectMemberRequest {
	s.OrganizationId = &v
	return s
}

type GetProjectMemberResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 30C99C69-A340-5E2E-ACE4-8888FF50CF52
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetProjectMemberResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetProjectMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProjectMemberResponseBody) GoString() string {
	return s.String()
}

func (s *GetProjectMemberResponseBody) SetErrorCode(v string) *GetProjectMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetProjectMemberResponseBody) SetErrorMessage(v string) *GetProjectMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetProjectMemberResponseBody) SetRequestId(v string) *GetProjectMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetProjectMemberResponseBody) SetResult(v *GetProjectMemberResponseBodyResult) *GetProjectMemberResponseBody {
	s.Result = v
	return s
}

func (s *GetProjectMemberResponseBody) SetSuccess(v bool) *GetProjectMemberResponseBody {
	s.Success = &v
	return s
}

type GetProjectMemberResponseBodyResult struct {
	// example:
	//
	// 30
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c4ef67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	Email     *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 2959
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetProjectMemberResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetProjectMemberResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetProjectMemberResponseBodyResult) SetAccessLevel(v int32) *GetProjectMemberResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *GetProjectMemberResponseBodyResult) SetAvatarUrl(v string) *GetProjectMemberResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *GetProjectMemberResponseBodyResult) SetEmail(v string) *GetProjectMemberResponseBodyResult {
	s.Email = &v
	return s
}

func (s *GetProjectMemberResponseBodyResult) SetId(v int64) *GetProjectMemberResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetProjectMemberResponseBodyResult) SetName(v string) *GetProjectMemberResponseBodyResult {
	s.Name = &v
	return s
}

type GetProjectMemberResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetProjectMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetProjectMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProjectMemberResponse) GoString() string {
	return s.String()
}

func (s *GetProjectMemberResponse) SetHeaders(v map[string]*string) *GetProjectMemberResponse {
	s.Headers = v
	return s
}

func (s *GetProjectMemberResponse) SetStatusCode(v int32) *GetProjectMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *GetProjectMemberResponse) SetBody(v *GetProjectMemberResponseBody) *GetProjectMemberResponse {
	s.Body = v
	return s
}

type GetPushRuleRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetPushRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPushRuleRequest) GoString() string {
	return s.String()
}

func (s *GetPushRuleRequest) SetAccessToken(v string) *GetPushRuleRequest {
	s.AccessToken = &v
	return s
}

func (s *GetPushRuleRequest) SetOrganizationId(v string) *GetPushRuleRequest {
	s.OrganizationId = &v
	return s
}

type GetPushRuleResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetPushRuleResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetPushRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPushRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetPushRuleResponseBody) SetErrorCode(v string) *GetPushRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetPushRuleResponseBody) SetErrorMessage(v string) *GetPushRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetPushRuleResponseBody) SetRequestId(v string) *GetPushRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPushRuleResponseBody) SetResult(v *GetPushRuleResponseBodyResult) *GetPushRuleResponseBody {
	s.Result = v
	return s
}

func (s *GetPushRuleResponseBody) SetSuccess(v bool) *GetPushRuleResponseBody {
	s.Success = &v
	return s
}

type GetPushRuleResponseBodyResult struct {
	// example:
	//
	// 2023-09-03T18:20:06+08:00
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 2023-09-03T18:20:06+08:00
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 2077
	Id        *int64                                    `json:"id,omitempty" xml:"id,omitempty"`
	RuleInfos []*GetPushRuleResponseBodyResultRuleInfos `json:"ruleInfos,omitempty" xml:"ruleInfos,omitempty" type:"Repeated"`
}

func (s GetPushRuleResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetPushRuleResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetPushRuleResponseBodyResult) SetGmtCreate(v string) *GetPushRuleResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *GetPushRuleResponseBodyResult) SetGmtModified(v string) *GetPushRuleResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *GetPushRuleResponseBodyResult) SetId(v int64) *GetPushRuleResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetPushRuleResponseBodyResult) SetRuleInfos(v []*GetPushRuleResponseBodyResultRuleInfos) *GetPushRuleResponseBodyResult {
	s.RuleInfos = v
	return s
}

type GetPushRuleResponseBodyResultRuleInfos struct {
	// example:
	//
	// CommitAuthorChecker
	CheckerName *string `json:"checkerName,omitempty" xml:"checkerName,omitempty"`
	// example:
	//
	// warn
	CheckerType *string `json:"checkerType,omitempty" xml:"checkerType,omitempty"`
	// example:
	//
	// on
	ExtraMessage    *string   `json:"extraMessage,omitempty" xml:"extraMessage,omitempty"`
	FileRuleRegexes []*string `json:"fileRuleRegexes,omitempty" xml:"fileRuleRegexes,omitempty" type:"Repeated"`
}

func (s GetPushRuleResponseBodyResultRuleInfos) String() string {
	return tea.Prettify(s)
}

func (s GetPushRuleResponseBodyResultRuleInfos) GoString() string {
	return s.String()
}

func (s *GetPushRuleResponseBodyResultRuleInfos) SetCheckerName(v string) *GetPushRuleResponseBodyResultRuleInfos {
	s.CheckerName = &v
	return s
}

func (s *GetPushRuleResponseBodyResultRuleInfos) SetCheckerType(v string) *GetPushRuleResponseBodyResultRuleInfos {
	s.CheckerType = &v
	return s
}

func (s *GetPushRuleResponseBodyResultRuleInfos) SetExtraMessage(v string) *GetPushRuleResponseBodyResultRuleInfos {
	s.ExtraMessage = &v
	return s
}

func (s *GetPushRuleResponseBodyResultRuleInfos) SetFileRuleRegexes(v []*string) *GetPushRuleResponseBodyResultRuleInfos {
	s.FileRuleRegexes = v
	return s
}

type GetPushRuleResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPushRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPushRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPushRuleResponse) GoString() string {
	return s.String()
}

func (s *GetPushRuleResponse) SetHeaders(v map[string]*string) *GetPushRuleResponse {
	s.Headers = v
	return s
}

func (s *GetPushRuleResponse) SetStatusCode(v int32) *GetPushRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPushRuleResponse) SetBody(v *GetPushRuleResponseBody) *GetPushRuleResponse {
	s.Body = v
	return s
}

type GetReleaseStagePipelineRunRequest struct {
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetReleaseStagePipelineRunRequest) String() string {
	return tea.Prettify(s)
}

func (s GetReleaseStagePipelineRunRequest) GoString() string {
	return s.String()
}

func (s *GetReleaseStagePipelineRunRequest) SetOrganizationId(v string) *GetReleaseStagePipelineRunRequest {
	s.OrganizationId = &v
	return s
}

type GetReleaseStagePipelineRunResponseBody struct {
	PipelineRun *GetReleaseStagePipelineRunResponseBodyPipelineRun `json:"pipelineRun,omitempty" xml:"pipelineRun,omitempty" type:"Struct"`
}

func (s GetReleaseStagePipelineRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetReleaseStagePipelineRunResponseBody) GoString() string {
	return s.String()
}

func (s *GetReleaseStagePipelineRunResponseBody) SetPipelineRun(v *GetReleaseStagePipelineRunResponseBodyPipelineRun) *GetReleaseStagePipelineRunResponseBody {
	s.PipelineRun = v
	return s
}

type GetReleaseStagePipelineRunResponseBodyPipelineRun struct {
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 1111111111
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 11111111111
	ModifierAccountId *string `json:"modifierAccountId,omitempty" xml:"modifierAccountId,omitempty"`
	// example:
	//
	// 1234
	PipelineId *int64 `json:"pipelineId,omitempty" xml:"pipelineId,omitempty"`
	// example:
	//
	// 1
	PipelineRunId *int64                                                      `json:"pipelineRunId,omitempty" xml:"pipelineRunId,omitempty"`
	Sources       []*GetReleaseStagePipelineRunResponseBodyPipelineRunSources `json:"sources,omitempty" xml:"sources,omitempty" type:"Repeated"`
	StageGroup    [][]*string                                                 `json:"stageGroup,omitempty" xml:"stageGroup,omitempty" type:"Repeated"`
	Stages        []*GetReleaseStagePipelineRunResponseBodyPipelineRunStages  `json:"stages,omitempty" xml:"stages,omitempty" type:"Repeated"`
	// example:
	//
	// SUCCESS
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 1
	TriggerMode *int32 `json:"triggerMode,omitempty" xml:"triggerMode,omitempty"`
	// example:
	//
	// 1586863220000
	UpdateTime *int64 `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRun) String() string {
	return tea.Prettify(s)
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRun) GoString() string {
	return s.String()
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetCreateTime(v int64) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.CreateTime = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetCreatorAccountId(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.CreatorAccountId = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetModifierAccountId(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.ModifierAccountId = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetPipelineId(v int64) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.PipelineId = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetPipelineRunId(v int64) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.PipelineRunId = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetSources(v []*GetReleaseStagePipelineRunResponseBodyPipelineRunSources) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.Sources = v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetStageGroup(v [][]*string) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.StageGroup = v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetStages(v []*GetReleaseStagePipelineRunResponseBodyPipelineRunStages) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.Stages = v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetStatus(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.Status = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetTriggerMode(v int32) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.TriggerMode = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRun) SetUpdateTime(v int64) *GetReleaseStagePipelineRunResponseBodyPipelineRun {
	s.UpdateTime = &v
	return s
}

type GetReleaseStagePipelineRunResponseBodyPipelineRunSources struct {
	Data *GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData `json:"data,omitempty" xml:"data,omitempty" type:"Struct"`
	// example:
	//
	// assaaaaaasasasa
	Sign *string `json:"sign,omitempty" xml:"sign,omitempty"`
	// example:
	//
	// Codeup
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunSources) String() string {
	return tea.Prettify(s)
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunSources) GoString() string {
	return s.String()
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunSources) SetData(v *GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData) *GetReleaseStagePipelineRunResponseBodyPipelineRunSources {
	s.Data = v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunSources) SetSign(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunSources {
	s.Sign = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunSources) SetType(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunSources {
	s.Type = &v
	return s
}

type GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData struct {
	// example:
	//
	// master
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// {}
	Commit *string `json:"commit,omitempty" xml:"commit,omitempty"`
	// example:
	//
	// http://codeup.aliyun.com/a.git
	Repo *string `json:"repo,omitempty" xml:"repo,omitempty"`
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData) String() string {
	return tea.Prettify(s)
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData) GoString() string {
	return s.String()
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData) SetBranch(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData {
	s.Branch = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData) SetCommit(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData {
	s.Commit = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData) SetRepo(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunSourcesData {
	s.Repo = &v
	return s
}

type GetReleaseStagePipelineRunResponseBodyPipelineRunStages struct {
	Name      *string                                                           `json:"name,omitempty" xml:"name,omitempty"`
	StageInfo *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo `json:"stageInfo,omitempty" xml:"stageInfo,omitempty" type:"Struct"`
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunStages) String() string {
	return tea.Prettify(s)
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunStages) GoString() string {
	return s.String()
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStages) SetName(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunStages {
	s.Name = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStages) SetStageInfo(v *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo) *GetReleaseStagePipelineRunResponseBodyPipelineRunStages {
	s.StageInfo = v
	return s
}

type GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo struct {
	// example:
	//
	// 1586863220000
	EndTime *int64                                                                  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	Jobs    []*GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs `json:"jobs,omitempty" xml:"jobs,omitempty" type:"Repeated"`
	Name    *string                                                                 `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 1586863220000
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// example:
	//
	// RUNNING
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo) GoString() string {
	return s.String()
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo) SetEndTime(v int64) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo {
	s.EndTime = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo) SetJobs(v []*GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo {
	s.Jobs = v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo) SetName(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo {
	s.Name = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo) SetStartTime(v int64) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo {
	s.StartTime = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo) SetStatus(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfo {
	s.Status = &v
	return s
}

type GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs struct {
	Actions []*GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions `json:"actions,omitempty" xml:"actions,omitempty" type:"Repeated"`
	// example:
	//
	// 1586863220000
	EndTime *int64 `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 21212
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// {}
	Params *string `json:"params,omitempty" xml:"params,omitempty"`
	// example:
	//
	// 1586863220000
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// example:
	//
	// RUNNING
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs) String() string {
	return tea.Prettify(s)
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs) GoString() string {
	return s.String()
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetActions(v []*GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.Actions = v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetEndTime(v int64) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.EndTime = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetId(v int64) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.Id = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetName(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.Name = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetParams(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.Params = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetStartTime(v int64) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.StartTime = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs) SetStatus(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobs {
	s.Status = &v
	return s
}

type GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions struct {
	// example:
	//
	// true
	Disable *bool `json:"disable,omitempty" xml:"disable,omitempty"`
	// example:
	//
	// {}
	Params interface{} `json:"params,omitempty" xml:"params,omitempty"`
	// example:
	//
	// PassPipelineValidate
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) String() string {
	return tea.Prettify(s)
}

func (s GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) GoString() string {
	return s.String()
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) SetDisable(v bool) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions {
	s.Disable = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) SetParams(v interface{}) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions {
	s.Params = v
	return s
}

func (s *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions) SetType(v string) *GetReleaseStagePipelineRunResponseBodyPipelineRunStagesStageInfoJobsActions {
	s.Type = &v
	return s
}

type GetReleaseStagePipelineRunResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetReleaseStagePipelineRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetReleaseStagePipelineRunResponse) String() string {
	return tea.Prettify(s)
}

func (s GetReleaseStagePipelineRunResponse) GoString() string {
	return s.String()
}

func (s *GetReleaseStagePipelineRunResponse) SetHeaders(v map[string]*string) *GetReleaseStagePipelineRunResponse {
	s.Headers = v
	return s
}

func (s *GetReleaseStagePipelineRunResponse) SetStatusCode(v int32) *GetReleaseStagePipelineRunResponse {
	s.StatusCode = &v
	return s
}

func (s *GetReleaseStagePipelineRunResponse) SetBody(v *GetReleaseStagePipelineRunResponseBody) *GetReleaseStagePipelineRunResponse {
	s.Body = v
	return s
}

type GetRepositoryRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 100
	Identity *string `json:"identity,omitempty" xml:"identity,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetRepositoryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryRequest) GoString() string {
	return s.String()
}

func (s *GetRepositoryRequest) SetAccessToken(v string) *GetRepositoryRequest {
	s.AccessToken = &v
	return s
}

func (s *GetRepositoryRequest) SetIdentity(v string) *GetRepositoryRequest {
	s.Identity = &v
	return s
}

func (s *GetRepositoryRequest) SetOrganizationId(v string) *GetRepositoryRequest {
	s.OrganizationId = &v
	return s
}

type GetRepositoryResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string                              `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Repository   *GetRepositoryResponseBodyRepository `json:"repository,omitempty" xml:"repository,omitempty" type:"Struct"`
	// example:
	//
	// 37294673-00CA-5B8B-914F-A8B35511E90A
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetRepositoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryResponseBody) GoString() string {
	return s.String()
}

func (s *GetRepositoryResponseBody) SetErrorCode(v string) *GetRepositoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetRepositoryResponseBody) SetErrorMessage(v string) *GetRepositoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetRepositoryResponseBody) SetRepository(v *GetRepositoryResponseBodyRepository) *GetRepositoryResponseBody {
	s.Repository = v
	return s
}

func (s *GetRepositoryResponseBody) SetRequestId(v string) *GetRepositoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRepositoryResponseBody) SetSuccess(v bool) *GetRepositoryResponseBody {
	s.Success = &v
	return s
}

type GetRepositoryResponseBodyRepository struct {
	// example:
	//
	// false
	Archive *bool `json:"archive,omitempty" xml:"archive,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// 2020-06-19T04:02:00.744Z
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 19258
	CreatorId *int64 `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// master
	DefaultBranch *string `json:"defaultBranch,omitempty" xml:"defaultBranch,omitempty"`
	// example:
	//
	// false
	DemoProjectStatus *bool `json:"demoProjectStatus,omitempty" xml:"demoProjectStatus,omitempty"`
	// example:
	//
	// repo desc
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// https://codeup.aliyun.com/xxx/test/test.git
	HttpUrlToRepository *string `json:"httpUrlToRepository,omitempty" xml:"httpUrlToRepository,omitempty"`
	// example:
	//
	// 100
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 2020-06-19T04:02:00.744Z
	LastActivityAt *string `json:"lastActivityAt,omitempty" xml:"lastActivityAt,omitempty"`
	// example:
	//
	// test
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// test / test
	NameWithNamespace *string                                       `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	Namespace         *GetRepositoryResponseBodyRepositoryNamespace `json:"namespace,omitempty" xml:"namespace,omitempty" type:"Struct"`
	// example:
	//
	// test
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// test/test
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// git@codeup.aliyun.com:xxx/test/test.git
	SshUrlToRepository *string `json:"sshUrlToRepository,omitempty" xml:"sshUrlToRepository,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// https://codeup.aliyun.com/xxx/test/test
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s GetRepositoryResponseBodyRepository) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryResponseBodyRepository) GoString() string {
	return s.String()
}

func (s *GetRepositoryResponseBodyRepository) SetArchive(v bool) *GetRepositoryResponseBodyRepository {
	s.Archive = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetAvatarUrl(v string) *GetRepositoryResponseBodyRepository {
	s.AvatarUrl = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetCreatedAt(v string) *GetRepositoryResponseBodyRepository {
	s.CreatedAt = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetCreatorId(v int64) *GetRepositoryResponseBodyRepository {
	s.CreatorId = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetDefaultBranch(v string) *GetRepositoryResponseBodyRepository {
	s.DefaultBranch = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetDemoProjectStatus(v bool) *GetRepositoryResponseBodyRepository {
	s.DemoProjectStatus = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetDescription(v string) *GetRepositoryResponseBodyRepository {
	s.Description = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetHttpUrlToRepository(v string) *GetRepositoryResponseBodyRepository {
	s.HttpUrlToRepository = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetId(v int64) *GetRepositoryResponseBodyRepository {
	s.Id = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetLastActivityAt(v string) *GetRepositoryResponseBodyRepository {
	s.LastActivityAt = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetName(v string) *GetRepositoryResponseBodyRepository {
	s.Name = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetNameWithNamespace(v string) *GetRepositoryResponseBodyRepository {
	s.NameWithNamespace = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetNamespace(v *GetRepositoryResponseBodyRepositoryNamespace) *GetRepositoryResponseBodyRepository {
	s.Namespace = v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetPath(v string) *GetRepositoryResponseBodyRepository {
	s.Path = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetPathWithNamespace(v string) *GetRepositoryResponseBodyRepository {
	s.PathWithNamespace = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetSshUrlToRepository(v string) *GetRepositoryResponseBodyRepository {
	s.SshUrlToRepository = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetVisibilityLevel(v int32) *GetRepositoryResponseBodyRepository {
	s.VisibilityLevel = &v
	return s
}

func (s *GetRepositoryResponseBodyRepository) SetWebUrl(v string) *GetRepositoryResponseBodyRepository {
	s.WebUrl = &v
	return s
}

type GetRepositoryResponseBodyRepositoryNamespace struct {
	// example:
	//
	// https://xxx.jpg
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// 2020-06-19T04:02:00.744Z
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// repo desc
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// id
	//
	// example:
	//
	// 100
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// xxx
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 100
	OwnerId *int64 `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	// example:
	//
	// test
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// 2020-06-19T04:02:00.744Z
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
}

func (s GetRepositoryResponseBodyRepositoryNamespace) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryResponseBodyRepositoryNamespace) GoString() string {
	return s.String()
}

func (s *GetRepositoryResponseBodyRepositoryNamespace) SetAvatar(v string) *GetRepositoryResponseBodyRepositoryNamespace {
	s.Avatar = &v
	return s
}

func (s *GetRepositoryResponseBodyRepositoryNamespace) SetCreatedAt(v string) *GetRepositoryResponseBodyRepositoryNamespace {
	s.CreatedAt = &v
	return s
}

func (s *GetRepositoryResponseBodyRepositoryNamespace) SetDescription(v string) *GetRepositoryResponseBodyRepositoryNamespace {
	s.Description = &v
	return s
}

func (s *GetRepositoryResponseBodyRepositoryNamespace) SetId(v int64) *GetRepositoryResponseBodyRepositoryNamespace {
	s.Id = &v
	return s
}

func (s *GetRepositoryResponseBodyRepositoryNamespace) SetName(v string) *GetRepositoryResponseBodyRepositoryNamespace {
	s.Name = &v
	return s
}

func (s *GetRepositoryResponseBodyRepositoryNamespace) SetOwnerId(v int64) *GetRepositoryResponseBodyRepositoryNamespace {
	s.OwnerId = &v
	return s
}

func (s *GetRepositoryResponseBodyRepositoryNamespace) SetPath(v string) *GetRepositoryResponseBodyRepositoryNamespace {
	s.Path = &v
	return s
}

func (s *GetRepositoryResponseBodyRepositoryNamespace) SetUpdatedAt(v string) *GetRepositoryResponseBodyRepositoryNamespace {
	s.UpdatedAt = &v
	return s
}

func (s *GetRepositoryResponseBodyRepositoryNamespace) SetVisibilityLevel(v int32) *GetRepositoryResponseBodyRepositoryNamespace {
	s.VisibilityLevel = &v
	return s
}

type GetRepositoryResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRepositoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRepositoryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryResponse) GoString() string {
	return s.String()
}

func (s *GetRepositoryResponse) SetHeaders(v map[string]*string) *GetRepositoryResponse {
	s.Headers = v
	return s
}

func (s *GetRepositoryResponse) SetStatusCode(v int32) *GetRepositoryResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRepositoryResponse) SetBody(v *GetRepositoryResponseBody) *GetRepositoryResponse {
	s.Body = v
	return s
}

type GetRepositoryCommitRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// false
	ShowSignature *bool `json:"showSignature,omitempty" xml:"showSignature,omitempty"`
}

func (s GetRepositoryCommitRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryCommitRequest) GoString() string {
	return s.String()
}

func (s *GetRepositoryCommitRequest) SetAccessToken(v string) *GetRepositoryCommitRequest {
	s.AccessToken = &v
	return s
}

func (s *GetRepositoryCommitRequest) SetOrganizationId(v string) *GetRepositoryCommitRequest {
	s.OrganizationId = &v
	return s
}

func (s *GetRepositoryCommitRequest) SetShowSignature(v bool) *GetRepositoryCommitRequest {
	s.ShowSignature = &v
	return s
}

type GetRepositoryCommitResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// A7586FEB-E48D-5579-983F-74981FBFF627
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetRepositoryCommitResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetRepositoryCommitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryCommitResponseBody) GoString() string {
	return s.String()
}

func (s *GetRepositoryCommitResponseBody) SetErrorCode(v string) *GetRepositoryCommitResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetRepositoryCommitResponseBody) SetErrorMessage(v string) *GetRepositoryCommitResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetRepositoryCommitResponseBody) SetRequestId(v string) *GetRepositoryCommitResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRepositoryCommitResponseBody) SetResult(v *GetRepositoryCommitResponseBodyResult) *GetRepositoryCommitResponseBody {
	s.Result = v
	return s
}

func (s *GetRepositoryCommitResponseBody) SetSuccess(v bool) *GetRepositoryCommitResponseBody {
	s.Success = &v
	return s
}

type GetRepositoryCommitResponseBodyResult struct {
	Author *GetRepositoryCommitResponseBodyResultAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	// example:
	//
	// test-codeup
	AuthorName *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2022-03-18 15:00:00
	AuthoredDate *string `json:"authoredDate,omitempty" xml:"authoredDate,omitempty"`
	// example:
	//
	// 1
	CommentsCount *int64 `json:"commentsCount,omitempty" xml:"commentsCount,omitempty"`
	// example:
	//
	// 2022-03-18 15:00:02
	CommittedDate *string                                         `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	Committer     *GetRepositoryCommitResponseBodyResultCommitter `json:"committer,omitempty" xml:"committer,omitempty" type:"Struct"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	// example:
	//
	// committer-codeup
	CommitterName *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// ff4fb5ac6d1f44f452654336d2dba468ae6c8d04
	Id        *string   `json:"id,omitempty" xml:"id,omitempty"`
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// ff4fb5ac
	ShortId   *string                                         `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Signature *GetRepositoryCommitResponseBodyResultSignature `json:"signature,omitempty" xml:"signature,omitempty" type:"Struct"`
	Title     *string                                         `json:"title,omitempty" xml:"title,omitempty"`
}

func (s GetRepositoryCommitResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryCommitResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetRepositoryCommitResponseBodyResult) SetAuthor(v *GetRepositoryCommitResponseBodyResultAuthor) *GetRepositoryCommitResponseBodyResult {
	s.Author = v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetAuthorEmail(v string) *GetRepositoryCommitResponseBodyResult {
	s.AuthorEmail = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetAuthorName(v string) *GetRepositoryCommitResponseBodyResult {
	s.AuthorName = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetAuthoredDate(v string) *GetRepositoryCommitResponseBodyResult {
	s.AuthoredDate = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetCommentsCount(v int64) *GetRepositoryCommitResponseBodyResult {
	s.CommentsCount = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetCommittedDate(v string) *GetRepositoryCommitResponseBodyResult {
	s.CommittedDate = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetCommitter(v *GetRepositoryCommitResponseBodyResultCommitter) *GetRepositoryCommitResponseBodyResult {
	s.Committer = v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetCommitterEmail(v string) *GetRepositoryCommitResponseBodyResult {
	s.CommitterEmail = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetCommitterName(v string) *GetRepositoryCommitResponseBodyResult {
	s.CommitterName = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetCreatedAt(v string) *GetRepositoryCommitResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetId(v string) *GetRepositoryCommitResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetMessage(v string) *GetRepositoryCommitResponseBodyResult {
	s.Message = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetParentIds(v []*string) *GetRepositoryCommitResponseBodyResult {
	s.ParentIds = v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetShortId(v string) *GetRepositoryCommitResponseBodyResult {
	s.ShortId = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetSignature(v *GetRepositoryCommitResponseBodyResultSignature) *GetRepositoryCommitResponseBodyResult {
	s.Signature = v
	return s
}

func (s *GetRepositoryCommitResponseBodyResult) SetTitle(v string) *GetRepositoryCommitResponseBodyResult {
	s.Title = &v
	return s
}

type GetRepositoryCommitResponseBodyResultAuthor struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c4ef67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 19927
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-nickname
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
	// example:
	//
	// ""
	WebsiteUrl *string `json:"websiteUrl,omitempty" xml:"websiteUrl,omitempty"`
}

func (s GetRepositoryCommitResponseBodyResultAuthor) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryCommitResponseBodyResultAuthor) GoString() string {
	return s.String()
}

func (s *GetRepositoryCommitResponseBodyResultAuthor) SetAvatarUrl(v string) *GetRepositoryCommitResponseBodyResultAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultAuthor) SetEmail(v string) *GetRepositoryCommitResponseBodyResultAuthor {
	s.Email = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultAuthor) SetId(v int64) *GetRepositoryCommitResponseBodyResultAuthor {
	s.Id = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultAuthor) SetName(v string) *GetRepositoryCommitResponseBodyResultAuthor {
	s.Name = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultAuthor) SetState(v string) *GetRepositoryCommitResponseBodyResultAuthor {
	s.State = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultAuthor) SetUsername(v string) *GetRepositoryCommitResponseBodyResultAuthor {
	s.Username = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultAuthor) SetWebsiteUrl(v string) *GetRepositoryCommitResponseBodyResultAuthor {
	s.WebsiteUrl = &v
	return s
}

type GetRepositoryCommitResponseBodyResultCommitter struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c4ef67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 24661
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// committer-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// nickname
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
	// example:
	//
	// ""
	WebsiteUrl *string `json:"websiteUrl,omitempty" xml:"websiteUrl,omitempty"`
}

func (s GetRepositoryCommitResponseBodyResultCommitter) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryCommitResponseBodyResultCommitter) GoString() string {
	return s.String()
}

func (s *GetRepositoryCommitResponseBodyResultCommitter) SetAvatarUrl(v string) *GetRepositoryCommitResponseBodyResultCommitter {
	s.AvatarUrl = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultCommitter) SetEmail(v string) *GetRepositoryCommitResponseBodyResultCommitter {
	s.Email = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultCommitter) SetId(v int64) *GetRepositoryCommitResponseBodyResultCommitter {
	s.Id = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultCommitter) SetName(v string) *GetRepositoryCommitResponseBodyResultCommitter {
	s.Name = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultCommitter) SetState(v string) *GetRepositoryCommitResponseBodyResultCommitter {
	s.State = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultCommitter) SetUsername(v string) *GetRepositoryCommitResponseBodyResultCommitter {
	s.Username = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultCommitter) SetWebsiteUrl(v string) *GetRepositoryCommitResponseBodyResultCommitter {
	s.WebsiteUrl = &v
	return s
}

type GetRepositoryCommitResponseBodyResultSignature struct {
	// example:
	//
	// 34d2c47c7ce46a5c4639c5ffe208
	GpgKeyId *string `json:"gpgKeyId,omitempty" xml:"gpgKeyId,omitempty"`
	// example:
	//
	// verified
	VerificationStatus *string `json:"verificationStatus,omitempty" xml:"verificationStatus,omitempty"`
}

func (s GetRepositoryCommitResponseBodyResultSignature) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryCommitResponseBodyResultSignature) GoString() string {
	return s.String()
}

func (s *GetRepositoryCommitResponseBodyResultSignature) SetGpgKeyId(v string) *GetRepositoryCommitResponseBodyResultSignature {
	s.GpgKeyId = &v
	return s
}

func (s *GetRepositoryCommitResponseBodyResultSignature) SetVerificationStatus(v string) *GetRepositoryCommitResponseBodyResultSignature {
	s.VerificationStatus = &v
	return s
}

type GetRepositoryCommitResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRepositoryCommitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRepositoryCommitResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryCommitResponse) GoString() string {
	return s.String()
}

func (s *GetRepositoryCommitResponse) SetHeaders(v map[string]*string) *GetRepositoryCommitResponse {
	s.Headers = v
	return s
}

func (s *GetRepositoryCommitResponse) SetStatusCode(v int32) *GetRepositoryCommitResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRepositoryCommitResponse) SetBody(v *GetRepositoryCommitResponseBody) *GetRepositoryCommitResponse {
	s.Body = v
	return s
}

type GetRepositoryTagRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// tag v1.0
	TagName *string `json:"tagName,omitempty" xml:"tagName,omitempty"`
}

func (s GetRepositoryTagRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryTagRequest) GoString() string {
	return s.String()
}

func (s *GetRepositoryTagRequest) SetAccessToken(v string) *GetRepositoryTagRequest {
	s.AccessToken = &v
	return s
}

func (s *GetRepositoryTagRequest) SetOrganizationId(v string) *GetRepositoryTagRequest {
	s.OrganizationId = &v
	return s
}

func (s *GetRepositoryTagRequest) SetTagName(v string) *GetRepositoryTagRequest {
	s.TagName = &v
	return s
}

type GetRepositoryTagResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// CE7353E3-F989-56A9-B97C-897ABBDB9A01
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetRepositoryTagResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetRepositoryTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryTagResponseBody) GoString() string {
	return s.String()
}

func (s *GetRepositoryTagResponseBody) SetErrorCode(v string) *GetRepositoryTagResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetRepositoryTagResponseBody) SetErrorMessage(v string) *GetRepositoryTagResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetRepositoryTagResponseBody) SetRequestId(v string) *GetRepositoryTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRepositoryTagResponseBody) SetResult(v *GetRepositoryTagResponseBodyResult) *GetRepositoryTagResponseBody {
	s.Result = v
	return s
}

func (s *GetRepositoryTagResponseBody) SetSuccess(v bool) *GetRepositoryTagResponseBody {
	s.Success = &v
	return s
}

type GetRepositoryTagResponseBodyResult struct {
	Commit *GetRepositoryTagResponseBodyResultCommit `json:"commit,omitempty" xml:"commit,omitempty" type:"Struct"`
	// example:
	//
	// 9a494e7b88ca35cde00579af2df4ab46136c022e
	Id      *string `json:"id,omitempty" xml:"id,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// tag v1.0
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetRepositoryTagResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryTagResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetRepositoryTagResponseBodyResult) SetCommit(v *GetRepositoryTagResponseBodyResultCommit) *GetRepositoryTagResponseBodyResult {
	s.Commit = v
	return s
}

func (s *GetRepositoryTagResponseBodyResult) SetId(v string) *GetRepositoryTagResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResult) SetMessage(v string) *GetRepositoryTagResponseBodyResult {
	s.Message = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResult) SetName(v string) *GetRepositoryTagResponseBodyResult {
	s.Name = &v
	return s
}

type GetRepositoryTagResponseBodyResultCommit struct {
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	AuthorName  *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2022-03-18 08:00:00
	AuthoredDate *string `json:"authoredDate,omitempty" xml:"authoredDate,omitempty"`
	// example:
	//
	// 2022-03-18 09:00:00
	CommittedDate *string `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	CommitterName  *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2022-03-18 10:00:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// e0297d8fb0393c833a8531e7cc8832739e3cba6d
	Id        *string   `json:"id,omitempty" xml:"id,omitempty"`
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// e0297d8f
	ShortId   *string                                            `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Signature *GetRepositoryTagResponseBodyResultCommitSignature `json:"signature,omitempty" xml:"signature,omitempty" type:"Struct"`
	Title     *string                                            `json:"title,omitempty" xml:"title,omitempty"`
}

func (s GetRepositoryTagResponseBodyResultCommit) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryTagResponseBodyResultCommit) GoString() string {
	return s.String()
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetAuthorEmail(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.AuthorEmail = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetAuthorName(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.AuthorName = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetAuthoredDate(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.AuthoredDate = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetCommittedDate(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.CommittedDate = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetCommitterEmail(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.CommitterEmail = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetCommitterName(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.CommitterName = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetCreatedAt(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.CreatedAt = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetId(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.Id = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetMessage(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.Message = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetParentIds(v []*string) *GetRepositoryTagResponseBodyResultCommit {
	s.ParentIds = v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetShortId(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.ShortId = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetSignature(v *GetRepositoryTagResponseBodyResultCommitSignature) *GetRepositoryTagResponseBodyResultCommit {
	s.Signature = v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommit) SetTitle(v string) *GetRepositoryTagResponseBodyResultCommit {
	s.Title = &v
	return s
}

type GetRepositoryTagResponseBodyResultCommitSignature struct {
	// example:
	//
	// ""
	GpgKeyId *string `json:"gpgKeyId,omitempty" xml:"gpgKeyId,omitempty"`
	// example:
	//
	// verified
	VerificationStatus *string `json:"verificationStatus,omitempty" xml:"verificationStatus,omitempty"`
}

func (s GetRepositoryTagResponseBodyResultCommitSignature) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryTagResponseBodyResultCommitSignature) GoString() string {
	return s.String()
}

func (s *GetRepositoryTagResponseBodyResultCommitSignature) SetGpgKeyId(v string) *GetRepositoryTagResponseBodyResultCommitSignature {
	s.GpgKeyId = &v
	return s
}

func (s *GetRepositoryTagResponseBodyResultCommitSignature) SetVerificationStatus(v string) *GetRepositoryTagResponseBodyResultCommitSignature {
	s.VerificationStatus = &v
	return s
}

type GetRepositoryTagResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRepositoryTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRepositoryTagResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRepositoryTagResponse) GoString() string {
	return s.String()
}

func (s *GetRepositoryTagResponse) SetHeaders(v map[string]*string) *GetRepositoryTagResponse {
	s.Headers = v
	return s
}

func (s *GetRepositoryTagResponse) SetStatusCode(v int32) *GetRepositoryTagResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRepositoryTagResponse) SetBody(v *GetRepositoryTagResponseBody) *GetRepositoryTagResponse {
	s.Body = v
	return s
}

type GetSearchCodePreviewRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 60d54f3daccf2bbd6659f3ad/gitlabhq/master/config/environments/test.rb
	DocId *string `json:"docId,omitempty" xml:"docId,omitempty"`
	// example:
	//
	// false
	IsDsl *bool `json:"isDsl,omitempty" xml:"isDsl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// test
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 627475075b46541dd2ff01bc
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetSearchCodePreviewRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSearchCodePreviewRequest) GoString() string {
	return s.String()
}

func (s *GetSearchCodePreviewRequest) SetDocId(v string) *GetSearchCodePreviewRequest {
	s.DocId = &v
	return s
}

func (s *GetSearchCodePreviewRequest) SetIsDsl(v bool) *GetSearchCodePreviewRequest {
	s.IsDsl = &v
	return s
}

func (s *GetSearchCodePreviewRequest) SetKeyword(v string) *GetSearchCodePreviewRequest {
	s.Keyword = &v
	return s
}

func (s *GetSearchCodePreviewRequest) SetOrganizationId(v string) *GetSearchCodePreviewRequest {
	s.OrganizationId = &v
	return s
}

type GetSearchCodePreviewResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// A7586FEB-E48D-5579-983F-74981FBFF627
	RequestId *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetSearchCodePreviewResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetSearchCodePreviewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSearchCodePreviewResponseBody) GoString() string {
	return s.String()
}

func (s *GetSearchCodePreviewResponseBody) SetErrorCode(v string) *GetSearchCodePreviewResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetSearchCodePreviewResponseBody) SetErrorMessage(v string) *GetSearchCodePreviewResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetSearchCodePreviewResponseBody) SetRequestId(v string) *GetSearchCodePreviewResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSearchCodePreviewResponseBody) SetResult(v *GetSearchCodePreviewResponseBodyResult) *GetSearchCodePreviewResponseBody {
	s.Result = v
	return s
}

func (s *GetSearchCodePreviewResponseBody) SetSuccess(v bool) *GetSearchCodePreviewResponseBody {
	s.Success = &v
	return s
}

type GetSearchCodePreviewResponseBodyResult struct {
	// example:
	//
	// xxx
	DocId            *string                                                 `json:"docId,omitempty" xml:"docId,omitempty"`
	HighlightTextMap *GetSearchCodePreviewResponseBodyResultHighlightTextMap `json:"highlightTextMap,omitempty" xml:"highlightTextMap,omitempty" type:"Struct"`
	Source           *GetSearchCodePreviewResponseBodyResultSource           `json:"source,omitempty" xml:"source,omitempty" type:"Struct"`
}

func (s GetSearchCodePreviewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetSearchCodePreviewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetSearchCodePreviewResponseBodyResult) SetDocId(v string) *GetSearchCodePreviewResponseBodyResult {
	s.DocId = &v
	return s
}

func (s *GetSearchCodePreviewResponseBodyResult) SetHighlightTextMap(v *GetSearchCodePreviewResponseBodyResultHighlightTextMap) *GetSearchCodePreviewResponseBodyResult {
	s.HighlightTextMap = v
	return s
}

func (s *GetSearchCodePreviewResponseBodyResult) SetSource(v *GetSearchCodePreviewResponseBodyResultSource) *GetSearchCodePreviewResponseBodyResult {
	s.Source = v
	return s
}

type GetSearchCodePreviewResponseBodyResultHighlightTextMap struct {
	// example:
	//
	// xxx
	Clob *string `json:"clob,omitempty" xml:"clob,omitempty"`
	// example:
	//
	// test.rb
	FileName *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
	// example:
	//
	// 5ffd468b1e45db3c1cc26ad6
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetSearchCodePreviewResponseBodyResultHighlightTextMap) String() string {
	return tea.Prettify(s)
}

func (s GetSearchCodePreviewResponseBodyResultHighlightTextMap) GoString() string {
	return s.String()
}

func (s *GetSearchCodePreviewResponseBodyResultHighlightTextMap) SetClob(v string) *GetSearchCodePreviewResponseBodyResultHighlightTextMap {
	s.Clob = &v
	return s
}

func (s *GetSearchCodePreviewResponseBodyResultHighlightTextMap) SetFileName(v string) *GetSearchCodePreviewResponseBodyResultHighlightTextMap {
	s.FileName = &v
	return s
}

func (s *GetSearchCodePreviewResponseBodyResultHighlightTextMap) SetOrganizationId(v string) *GetSearchCodePreviewResponseBodyResultHighlightTextMap {
	s.OrganizationId = &v
	return s
}

type GetSearchCodePreviewResponseBodyResultSource struct {
	// example:
	//
	// master
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// 2022-12-12 12:12:12
	CheckinDate *string `json:"checkinDate,omitempty" xml:"checkinDate,omitempty"`
	// example:
	//
	// test.rb
	FileName *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
	// example:
	//
	// config/environments/test.rb
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// example:
	//
	// Ruby
	Language *string `json:"language,omitempty" xml:"language,omitempty"`
	// example:
	//
	// 5f9f9f6122a8c7ff3934f99a
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// codeup/test-repo
	RepoPath *string `json:"repoPath,omitempty" xml:"repoPath,omitempty"`
}

func (s GetSearchCodePreviewResponseBodyResultSource) String() string {
	return tea.Prettify(s)
}

func (s GetSearchCodePreviewResponseBodyResultSource) GoString() string {
	return s.String()
}

func (s *GetSearchCodePreviewResponseBodyResultSource) SetBranch(v string) *GetSearchCodePreviewResponseBodyResultSource {
	s.Branch = &v
	return s
}

func (s *GetSearchCodePreviewResponseBodyResultSource) SetCheckinDate(v string) *GetSearchCodePreviewResponseBodyResultSource {
	s.CheckinDate = &v
	return s
}

func (s *GetSearchCodePreviewResponseBodyResultSource) SetFileName(v string) *GetSearchCodePreviewResponseBodyResultSource {
	s.FileName = &v
	return s
}

func (s *GetSearchCodePreviewResponseBodyResultSource) SetFilePath(v string) *GetSearchCodePreviewResponseBodyResultSource {
	s.FilePath = &v
	return s
}

func (s *GetSearchCodePreviewResponseBodyResultSource) SetLanguage(v string) *GetSearchCodePreviewResponseBodyResultSource {
	s.Language = &v
	return s
}

func (s *GetSearchCodePreviewResponseBodyResultSource) SetOrganizationId(v string) *GetSearchCodePreviewResponseBodyResultSource {
	s.OrganizationId = &v
	return s
}

func (s *GetSearchCodePreviewResponseBodyResultSource) SetRepoPath(v string) *GetSearchCodePreviewResponseBodyResultSource {
	s.RepoPath = &v
	return s
}

type GetSearchCodePreviewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSearchCodePreviewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSearchCodePreviewResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSearchCodePreviewResponse) GoString() string {
	return s.String()
}

func (s *GetSearchCodePreviewResponse) SetHeaders(v map[string]*string) *GetSearchCodePreviewResponse {
	s.Headers = v
	return s
}

func (s *GetSearchCodePreviewResponse) SetStatusCode(v int32) *GetSearchCodePreviewResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSearchCodePreviewResponse) SetBody(v *GetSearchCodePreviewResponseBody) *GetSearchCodePreviewResponse {
	s.Body = v
	return s
}

type GetSprintInfoResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                          `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Sprint    *GetSprintInfoResponseBodySprint `json:"sprint,omitempty" xml:"sprint,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetSprintInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSprintInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetSprintInfoResponseBody) SetErrorCode(v string) *GetSprintInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetSprintInfoResponseBody) SetErrorMessage(v string) *GetSprintInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetSprintInfoResponseBody) SetRequestId(v string) *GetSprintInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSprintInfoResponseBody) SetSprint(v *GetSprintInfoResponseBodySprint) *GetSprintInfoResponseBody {
	s.Sprint = v
	return s
}

func (s *GetSprintInfoResponseBody) SetSuccess(v bool) *GetSprintInfoResponseBody {
	s.Success = &v
	return s
}

type GetSprintInfoResponseBodySprint struct {
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// xxx
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1623916393000
	EndDate *int64 `json:"endDate,omitempty" xml:"endDate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// demo示例项目
	Name   *string   `json:"name,omitempty" xml:"name,omitempty"`
	Owners []*string `json:"owners,omitempty" xml:"owners,omitempty" type:"Repeated"`
	// example:
	//
	// public
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// 5e70xxxxxxcd000xxxxe96
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// 1638403200000
	StartDate *int64 `json:"startDate,omitempty" xml:"startDate,omitempty"`
	// example:
	//
	// Todo
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s GetSprintInfoResponseBodySprint) String() string {
	return tea.Prettify(s)
}

func (s GetSprintInfoResponseBodySprint) GoString() string {
	return s.String()
}

func (s *GetSprintInfoResponseBodySprint) SetCreator(v string) *GetSprintInfoResponseBodySprint {
	s.Creator = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetDescription(v string) *GetSprintInfoResponseBodySprint {
	s.Description = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetEndDate(v int64) *GetSprintInfoResponseBodySprint {
	s.EndDate = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetGmtCreate(v int64) *GetSprintInfoResponseBodySprint {
	s.GmtCreate = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetGmtModified(v int64) *GetSprintInfoResponseBodySprint {
	s.GmtModified = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetIdentifier(v string) *GetSprintInfoResponseBodySprint {
	s.Identifier = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetModifier(v string) *GetSprintInfoResponseBodySprint {
	s.Modifier = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetName(v string) *GetSprintInfoResponseBodySprint {
	s.Name = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetOwners(v []*string) *GetSprintInfoResponseBodySprint {
	s.Owners = v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetScope(v string) *GetSprintInfoResponseBodySprint {
	s.Scope = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetSpaceIdentifier(v string) *GetSprintInfoResponseBodySprint {
	s.SpaceIdentifier = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetStartDate(v int64) *GetSprintInfoResponseBodySprint {
	s.StartDate = &v
	return s
}

func (s *GetSprintInfoResponseBodySprint) SetStatus(v string) *GetSprintInfoResponseBodySprint {
	s.Status = &v
	return s
}

type GetSprintInfoResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSprintInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSprintInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSprintInfoResponse) GoString() string {
	return s.String()
}

func (s *GetSprintInfoResponse) SetHeaders(v map[string]*string) *GetSprintInfoResponse {
	s.Headers = v
	return s
}

func (s *GetSprintInfoResponse) SetStatusCode(v int32) *GetSprintInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSprintInfoResponse) SetBody(v *GetSprintInfoResponseBody) *GetSprintInfoResponse {
	s.Body = v
	return s
}

type GetTestResultListRequest struct {
	// example:
	//
	// {\\"conditionGroups\\": [[{\\"fieldIdentifier\\": \\"gmtModified\\", \\"operator\\": \\"MORE_THAN_AND_EQUAL\\", \\"value\\": [\\"2023-04-20 18:03:12.442140\\"], \\"className\\": \\"dateTime\\", \\"format\\": \\"input\\"}]]}
	Conditions *string `json:"conditions,omitempty" xml:"conditions,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e27b8eace6501ce51cf5d56784
	DirectoryIdentifier *string `json:"directoryIdentifier,omitempty" xml:"directoryIdentifier,omitempty"`
}

func (s GetTestResultListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTestResultListRequest) GoString() string {
	return s.String()
}

func (s *GetTestResultListRequest) SetConditions(v string) *GetTestResultListRequest {
	s.Conditions = &v
	return s
}

func (s *GetTestResultListRequest) SetDirectoryIdentifier(v string) *GetTestResultListRequest {
	s.DirectoryIdentifier = &v
	return s
}

type GetTestResultListResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success    *bool                                      `json:"success,omitempty" xml:"success,omitempty"`
	TestResult []*GetTestResultListResponseBodyTestResult `json:"testResult,omitempty" xml:"testResult,omitempty" type:"Repeated"`
}

func (s GetTestResultListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTestResultListResponseBody) GoString() string {
	return s.String()
}

func (s *GetTestResultListResponseBody) SetErrorCode(v string) *GetTestResultListResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetTestResultListResponseBody) SetErrorMsg(v string) *GetTestResultListResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *GetTestResultListResponseBody) SetRequestId(v string) *GetTestResultListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTestResultListResponseBody) SetSuccess(v bool) *GetTestResultListResponseBody {
	s.Success = &v
	return s
}

func (s *GetTestResultListResponseBody) SetTestResult(v []*GetTestResultListResponseBodyTestResult) *GetTestResultListResponseBody {
	s.TestResult = v
	return s
}

type GetTestResultListResponseBodyTestResult struct {
	AssignedTo *GetTestResultListResponseBodyTestResultAssignedTo `json:"assignedTo,omitempty" xml:"assignedTo,omitempty" type:"Struct"`
	// example:
	//
	// 8
	BugCount *int64 `json:"bugCount,omitempty" xml:"bugCount,omitempty"`
	// example:
	//
	// Req
	CategoryIdentifier *string                                                `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	CustomFields       []*GetTestResultListResponseBodyTestResultCustomFields `json:"customFields,omitempty" xml:"customFields,omitempty" type:"Repeated"`
	GmtCreate          *int64                                                 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	SpaceIdentifier    *string                                                `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// 测试工作项
	Subject             *string                                                    `json:"subject,omitempty" xml:"subject,omitempty"`
	TestResultExecutor  *GetTestResultListResponseBodyTestResultTestResultExecutor `json:"testResultExecutor,omitempty" xml:"testResultExecutor,omitempty" type:"Struct"`
	TestResultGmtCreate *int64                                                     `json:"testResultGmtCreate,omitempty" xml:"testResultGmtCreate,omitempty"`
	// example:
	//
	// a8bxxxxxxxxxxxxxxxx54
	TestResultIdentifier *string `json:"testResultIdentifier,omitempty" xml:"testResultIdentifier,omitempty"`
	// example:
	//
	// TO DO
	TestResultStatus   *string `json:"testResultStatus,omitempty" xml:"testResultStatus,omitempty"`
	TestcaseIdentifier *string `json:"testcaseIdentifier,omitempty" xml:"testcaseIdentifier,omitempty"`
}

func (s GetTestResultListResponseBodyTestResult) String() string {
	return tea.Prettify(s)
}

func (s GetTestResultListResponseBodyTestResult) GoString() string {
	return s.String()
}

func (s *GetTestResultListResponseBodyTestResult) SetAssignedTo(v *GetTestResultListResponseBodyTestResultAssignedTo) *GetTestResultListResponseBodyTestResult {
	s.AssignedTo = v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetBugCount(v int64) *GetTestResultListResponseBodyTestResult {
	s.BugCount = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetCategoryIdentifier(v string) *GetTestResultListResponseBodyTestResult {
	s.CategoryIdentifier = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetCustomFields(v []*GetTestResultListResponseBodyTestResultCustomFields) *GetTestResultListResponseBodyTestResult {
	s.CustomFields = v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetGmtCreate(v int64) *GetTestResultListResponseBodyTestResult {
	s.GmtCreate = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetSpaceIdentifier(v string) *GetTestResultListResponseBodyTestResult {
	s.SpaceIdentifier = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetSubject(v string) *GetTestResultListResponseBodyTestResult {
	s.Subject = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetTestResultExecutor(v *GetTestResultListResponseBodyTestResultTestResultExecutor) *GetTestResultListResponseBodyTestResult {
	s.TestResultExecutor = v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetTestResultGmtCreate(v int64) *GetTestResultListResponseBodyTestResult {
	s.TestResultGmtCreate = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetTestResultIdentifier(v string) *GetTestResultListResponseBodyTestResult {
	s.TestResultIdentifier = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetTestResultStatus(v string) *GetTestResultListResponseBodyTestResult {
	s.TestResultStatus = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResult) SetTestcaseIdentifier(v string) *GetTestResultListResponseBodyTestResult {
	s.TestcaseIdentifier = &v
	return s
}

type GetTestResultListResponseBodyTestResultAssignedTo struct {
	AssignedToIdenttifier *string `json:"assignedToIdenttifier,omitempty" xml:"assignedToIdenttifier,omitempty"`
	Name                  *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetTestResultListResponseBodyTestResultAssignedTo) String() string {
	return tea.Prettify(s)
}

func (s GetTestResultListResponseBodyTestResultAssignedTo) GoString() string {
	return s.String()
}

func (s *GetTestResultListResponseBodyTestResultAssignedTo) SetAssignedToIdenttifier(v string) *GetTestResultListResponseBodyTestResultAssignedTo {
	s.AssignedToIdenttifier = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResultAssignedTo) SetName(v string) *GetTestResultListResponseBodyTestResultAssignedTo {
	s.Name = &v
	return s
}

type GetTestResultListResponseBodyTestResultCustomFields struct {
	FieldClassName  *string `json:"fieldClassName,omitempty" xml:"fieldClassName,omitempty"`
	FieldFormat     *string `json:"fieldFormat,omitempty" xml:"fieldFormat,omitempty"`
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	Value           *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s GetTestResultListResponseBodyTestResultCustomFields) String() string {
	return tea.Prettify(s)
}

func (s GetTestResultListResponseBodyTestResultCustomFields) GoString() string {
	return s.String()
}

func (s *GetTestResultListResponseBodyTestResultCustomFields) SetFieldClassName(v string) *GetTestResultListResponseBodyTestResultCustomFields {
	s.FieldClassName = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResultCustomFields) SetFieldFormat(v string) *GetTestResultListResponseBodyTestResultCustomFields {
	s.FieldFormat = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResultCustomFields) SetFieldIdentifier(v string) *GetTestResultListResponseBodyTestResultCustomFields {
	s.FieldIdentifier = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResultCustomFields) SetValue(v string) *GetTestResultListResponseBodyTestResultCustomFields {
	s.Value = &v
	return s
}

type GetTestResultListResponseBodyTestResultTestResultExecutor struct {
	ExecutorIdentifier *string `json:"executorIdentifier,omitempty" xml:"executorIdentifier,omitempty"`
	Name               *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetTestResultListResponseBodyTestResultTestResultExecutor) String() string {
	return tea.Prettify(s)
}

func (s GetTestResultListResponseBodyTestResultTestResultExecutor) GoString() string {
	return s.String()
}

func (s *GetTestResultListResponseBodyTestResultTestResultExecutor) SetExecutorIdentifier(v string) *GetTestResultListResponseBodyTestResultTestResultExecutor {
	s.ExecutorIdentifier = &v
	return s
}

func (s *GetTestResultListResponseBodyTestResultTestResultExecutor) SetName(v string) *GetTestResultListResponseBodyTestResultTestResultExecutor {
	s.Name = &v
	return s
}

type GetTestResultListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTestResultListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTestResultListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTestResultListResponse) GoString() string {
	return s.String()
}

func (s *GetTestResultListResponse) SetHeaders(v map[string]*string) *GetTestResultListResponse {
	s.Headers = v
	return s
}

func (s *GetTestResultListResponse) SetStatusCode(v int32) *GetTestResultListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTestResultListResponse) SetBody(v *GetTestResultListResponseBody) *GetTestResultListResponse {
	s.Body = v
	return s
}

type GetTestcaseListRequest struct {
	// example:
	//
	// {\\"conditionGroups\\":[[{\\"fieldIdentifier\\":\\"status\\",\\"operator\\":\\"CONTAINS\\",\\"value\\":[\\"cc961a18adf770c6e423ccc5\\"],\\"toValue\\":null,,\\"className\\":\\"status\\",\\"format\\":\\"list\\"}]]}
	Conditions *string `json:"conditions,omitempty" xml:"conditions,omitempty"`
	// example:
	//
	// e27b8eace6501ce51cf5d56784
	DirectoryIdentifier *string `json:"directoryIdentifier,omitempty" xml:"directoryIdentifier,omitempty"`
	// example:
	//
	// 20
	MaxResult *string `json:"maxResult,omitempty" xml:"maxResult,omitempty"`
	// example:
	//
	// 2591861102250c4522380b33a6
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 6d5984c7d92b23fa53d4743c37
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
}

func (s GetTestcaseListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTestcaseListRequest) GoString() string {
	return s.String()
}

func (s *GetTestcaseListRequest) SetConditions(v string) *GetTestcaseListRequest {
	s.Conditions = &v
	return s
}

func (s *GetTestcaseListRequest) SetDirectoryIdentifier(v string) *GetTestcaseListRequest {
	s.DirectoryIdentifier = &v
	return s
}

func (s *GetTestcaseListRequest) SetMaxResult(v string) *GetTestcaseListRequest {
	s.MaxResult = &v
	return s
}

func (s *GetTestcaseListRequest) SetNextToken(v string) *GetTestcaseListRequest {
	s.NextToken = &v
	return s
}

func (s *GetTestcaseListRequest) SetSpaceIdentifier(v string) *GetTestcaseListRequest {
	s.SpaceIdentifier = &v
	return s
}

type GetTestcaseListResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// ""
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success  *bool                                  `json:"success,omitempty" xml:"success,omitempty"`
	Testcase []*GetTestcaseListResponseBodyTestcase `json:"testcase,omitempty" xml:"testcase,omitempty" type:"Repeated"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s GetTestcaseListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTestcaseListResponseBody) GoString() string {
	return s.String()
}

func (s *GetTestcaseListResponseBody) SetErrorCode(v string) *GetTestcaseListResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetTestcaseListResponseBody) SetErrorMsg(v string) *GetTestcaseListResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *GetTestcaseListResponseBody) SetMaxResults(v int64) *GetTestcaseListResponseBody {
	s.MaxResults = &v
	return s
}

func (s *GetTestcaseListResponseBody) SetNextToken(v string) *GetTestcaseListResponseBody {
	s.NextToken = &v
	return s
}

func (s *GetTestcaseListResponseBody) SetRequestId(v string) *GetTestcaseListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTestcaseListResponseBody) SetSuccess(v bool) *GetTestcaseListResponseBody {
	s.Success = &v
	return s
}

func (s *GetTestcaseListResponseBody) SetTestcase(v []*GetTestcaseListResponseBodyTestcase) *GetTestcaseListResponseBody {
	s.Testcase = v
	return s
}

func (s *GetTestcaseListResponseBody) SetTotalCount(v int64) *GetTestcaseListResponseBody {
	s.TotalCount = &v
	return s
}

type GetTestcaseListResponseBodyTestcase struct {
	AssignedTo *GetTestcaseListResponseBodyTestcaseAssignedTo `json:"assignedTo,omitempty" xml:"assignedTo,omitempty" type:"Struct"`
	// example:
	//
	// Req
	CategoryIdentifier *string                                            `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	CustomFields       []*GetTestcaseListResponseBodyTestcaseCustomFields `json:"customFields,omitempty" xml:"customFields,omitempty" type:"Repeated"`
	// example:
	//
	// 1621578648000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string                                   `json:"identifier,omitempty" xml:"identifier,omitempty"`
	Space      *GetTestcaseListResponseBodyTestcaseSpace `json:"space,omitempty" xml:"space,omitempty" type:"Struct"`
	// example:
	//
	// 测试工作项
	Subject *string                                    `json:"subject,omitempty" xml:"subject,omitempty"`
	Tags    []*GetTestcaseListResponseBodyTestcaseTags `json:"tags,omitempty" xml:"tags,omitempty" type:"Repeated"`
}

func (s GetTestcaseListResponseBodyTestcase) String() string {
	return tea.Prettify(s)
}

func (s GetTestcaseListResponseBodyTestcase) GoString() string {
	return s.String()
}

func (s *GetTestcaseListResponseBodyTestcase) SetAssignedTo(v *GetTestcaseListResponseBodyTestcaseAssignedTo) *GetTestcaseListResponseBodyTestcase {
	s.AssignedTo = v
	return s
}

func (s *GetTestcaseListResponseBodyTestcase) SetCategoryIdentifier(v string) *GetTestcaseListResponseBodyTestcase {
	s.CategoryIdentifier = &v
	return s
}

func (s *GetTestcaseListResponseBodyTestcase) SetCustomFields(v []*GetTestcaseListResponseBodyTestcaseCustomFields) *GetTestcaseListResponseBodyTestcase {
	s.CustomFields = v
	return s
}

func (s *GetTestcaseListResponseBodyTestcase) SetGmtCreate(v int64) *GetTestcaseListResponseBodyTestcase {
	s.GmtCreate = &v
	return s
}

func (s *GetTestcaseListResponseBodyTestcase) SetIdentifier(v string) *GetTestcaseListResponseBodyTestcase {
	s.Identifier = &v
	return s
}

func (s *GetTestcaseListResponseBodyTestcase) SetSpace(v *GetTestcaseListResponseBodyTestcaseSpace) *GetTestcaseListResponseBodyTestcase {
	s.Space = v
	return s
}

func (s *GetTestcaseListResponseBodyTestcase) SetSubject(v string) *GetTestcaseListResponseBodyTestcase {
	s.Subject = &v
	return s
}

func (s *GetTestcaseListResponseBodyTestcase) SetTags(v []*GetTestcaseListResponseBodyTestcaseTags) *GetTestcaseListResponseBodyTestcase {
	s.Tags = v
	return s
}

type GetTestcaseListResponseBodyTestcaseAssignedTo struct {
	// example:
	//
	// 12xxxxx456
	AssignedToIdenttifier *string `json:"assignedToIdenttifier,omitempty" xml:"assignedToIdenttifier,omitempty"`
	Name                  *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetTestcaseListResponseBodyTestcaseAssignedTo) String() string {
	return tea.Prettify(s)
}

func (s GetTestcaseListResponseBodyTestcaseAssignedTo) GoString() string {
	return s.String()
}

func (s *GetTestcaseListResponseBodyTestcaseAssignedTo) SetAssignedToIdenttifier(v string) *GetTestcaseListResponseBodyTestcaseAssignedTo {
	s.AssignedToIdenttifier = &v
	return s
}

func (s *GetTestcaseListResponseBodyTestcaseAssignedTo) SetName(v string) *GetTestcaseListResponseBodyTestcaseAssignedTo {
	s.Name = &v
	return s
}

type GetTestcaseListResponseBodyTestcaseCustomFields struct {
	// example:
	//
	// User
	FieldClassName *string `json:"fieldClassName,omitempty" xml:"fieldClassName,omitempty"`
	// example:
	//
	// Input
	FieldFormat *string `json:"fieldFormat,omitempty" xml:"fieldFormat,omitempty"`
	// example:
	//
	// 85702b33f14bfa82cb458173ba
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	// example:
	//
	// d7f112f9d023e2108fa1b0d8
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s GetTestcaseListResponseBodyTestcaseCustomFields) String() string {
	return tea.Prettify(s)
}

func (s GetTestcaseListResponseBodyTestcaseCustomFields) GoString() string {
	return s.String()
}

func (s *GetTestcaseListResponseBodyTestcaseCustomFields) SetFieldClassName(v string) *GetTestcaseListResponseBodyTestcaseCustomFields {
	s.FieldClassName = &v
	return s
}

func (s *GetTestcaseListResponseBodyTestcaseCustomFields) SetFieldFormat(v string) *GetTestcaseListResponseBodyTestcaseCustomFields {
	s.FieldFormat = &v
	return s
}

func (s *GetTestcaseListResponseBodyTestcaseCustomFields) SetFieldIdentifier(v string) *GetTestcaseListResponseBodyTestcaseCustomFields {
	s.FieldIdentifier = &v
	return s
}

func (s *GetTestcaseListResponseBodyTestcaseCustomFields) SetValue(v string) *GetTestcaseListResponseBodyTestcaseCustomFields {
	s.Value = &v
	return s
}

type GetTestcaseListResponseBodyTestcaseSpace struct {
	// example:
	//
	// 22c32972b853cd703dbf0efe4c
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// TestRepo
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetTestcaseListResponseBodyTestcaseSpace) String() string {
	return tea.Prettify(s)
}

func (s GetTestcaseListResponseBodyTestcaseSpace) GoString() string {
	return s.String()
}

func (s *GetTestcaseListResponseBodyTestcaseSpace) SetSpaceIdentifier(v string) *GetTestcaseListResponseBodyTestcaseSpace {
	s.SpaceIdentifier = &v
	return s
}

func (s *GetTestcaseListResponseBodyTestcaseSpace) SetType(v string) *GetTestcaseListResponseBodyTestcaseSpace {
	s.Type = &v
	return s
}

type GetTestcaseListResponseBodyTestcaseTags struct {
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 85702b33f14bxxxxxx58173ba
	TagIdentifier *string `json:"tagIdentifier,omitempty" xml:"tagIdentifier,omitempty"`
}

func (s GetTestcaseListResponseBodyTestcaseTags) String() string {
	return tea.Prettify(s)
}

func (s GetTestcaseListResponseBodyTestcaseTags) GoString() string {
	return s.String()
}

func (s *GetTestcaseListResponseBodyTestcaseTags) SetName(v string) *GetTestcaseListResponseBodyTestcaseTags {
	s.Name = &v
	return s
}

func (s *GetTestcaseListResponseBodyTestcaseTags) SetTagIdentifier(v string) *GetTestcaseListResponseBodyTestcaseTags {
	s.TagIdentifier = &v
	return s
}

type GetTestcaseListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTestcaseListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTestcaseListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTestcaseListResponse) GoString() string {
	return s.String()
}

func (s *GetTestcaseListResponse) SetHeaders(v map[string]*string) *GetTestcaseListResponse {
	s.Headers = v
	return s
}

func (s *GetTestcaseListResponse) SetStatusCode(v int32) *GetTestcaseListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTestcaseListResponse) SetBody(v *GetTestcaseListResponseBody) *GetTestcaseListResponse {
	s.Body = v
	return s
}

type GetUserInfoRequest struct {
	// example:
	//
	// 61e54b0e0bb300d827e1ae27
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s GetUserInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserInfoRequest) GoString() string {
	return s.String()
}

func (s *GetUserInfoRequest) SetOrganizationId(v string) *GetUserInfoRequest {
	s.OrganizationId = &v
	return s
}

type GetUserInfoResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *GetUserInfoResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetUserInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserInfoResponseBody) SetErrorCode(v string) *GetUserInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetUserInfoResponseBody) SetErrorMessage(v string) *GetUserInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetUserInfoResponseBody) SetRequestId(v string) *GetUserInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserInfoResponseBody) SetResult(v *GetUserInfoResponseBodyResult) *GetUserInfoResponseBody {
	s.Result = v
	return s
}

func (s *GetUserInfoResponseBody) SetSuccess(v bool) *GetUserInfoResponseBody {
	s.Success = &v
	return s
}

type GetUserInfoResponseBodyResult struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 4205
	Id       *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name     *string `json:"name,omitempty" xml:"name,omitempty"`
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s GetUserInfoResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetUserInfoResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetUserInfoResponseBodyResult) SetAvatarUrl(v string) *GetUserInfoResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *GetUserInfoResponseBodyResult) SetEmail(v string) *GetUserInfoResponseBodyResult {
	s.Email = &v
	return s
}

func (s *GetUserInfoResponseBodyResult) SetId(v int64) *GetUserInfoResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetUserInfoResponseBodyResult) SetName(v string) *GetUserInfoResponseBodyResult {
	s.Name = &v
	return s
}

func (s *GetUserInfoResponseBodyResult) SetUsername(v string) *GetUserInfoResponseBodyResult {
	s.Username = &v
	return s
}

type GetUserInfoResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserInfoResponse) GoString() string {
	return s.String()
}

func (s *GetUserInfoResponse) SetHeaders(v map[string]*string) *GetUserInfoResponse {
	s.Headers = v
	return s
}

func (s *GetUserInfoResponse) SetStatusCode(v int32) *GetUserInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserInfoResponse) SetBody(v *GetUserInfoResponseBody) *GetUserInfoResponse {
	s.Body = v
	return s
}

type GetVMDeployOrderResponseBody struct {
	DeployOrder *GetVMDeployOrderResponseBodyDeployOrder `json:"deployOrder,omitempty" xml:"deployOrder,omitempty" type:"Struct"`
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetVMDeployOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVMDeployOrderResponseBody) GoString() string {
	return s.String()
}

func (s *GetVMDeployOrderResponseBody) SetDeployOrder(v *GetVMDeployOrderResponseBodyDeployOrder) *GetVMDeployOrderResponseBody {
	s.DeployOrder = v
	return s
}

func (s *GetVMDeployOrderResponseBody) SetErrorCode(v string) *GetVMDeployOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetVMDeployOrderResponseBody) SetErrorMessage(v string) *GetVMDeployOrderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetVMDeployOrderResponseBody) SetRequestId(v string) *GetVMDeployOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetVMDeployOrderResponseBody) SetSuccess(v bool) *GetVMDeployOrderResponseBody {
	s.Success = &v
	return s
}

type GetVMDeployOrderResponseBodyDeployOrder struct {
	Actions []*GetVMDeployOrderResponseBodyDeployOrderActions `json:"actions,omitempty" xml:"actions,omitempty" type:"Repeated"`
	// example:
	//
	// 111111111111
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// ssaassa
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// 2
	CurrentBatch      *int32                                                    `json:"currentBatch,omitempty" xml:"currentBatch,omitempty"`
	DeployMachineInfo *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo `json:"deployMachineInfo,omitempty" xml:"deployMachineInfo,omitempty" type:"Struct"`
	// example:
	//
	// 11111
	DeployOrderId *string `json:"deployOrderId,omitempty" xml:"deployOrderId,omitempty"`
	ExceptionCode *string `json:"exceptionCode,omitempty" xml:"exceptionCode,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 3
	TotalBatch *int32 `json:"totalBatch,omitempty" xml:"totalBatch,omitempty"`
	// example:
	//
	// 11111111111
	UpdateTime *int64 `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s GetVMDeployOrderResponseBodyDeployOrder) String() string {
	return tea.Prettify(s)
}

func (s GetVMDeployOrderResponseBodyDeployOrder) GoString() string {
	return s.String()
}

func (s *GetVMDeployOrderResponseBodyDeployOrder) SetActions(v []*GetVMDeployOrderResponseBodyDeployOrderActions) *GetVMDeployOrderResponseBodyDeployOrder {
	s.Actions = v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrder) SetCreateTime(v int64) *GetVMDeployOrderResponseBodyDeployOrder {
	s.CreateTime = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrder) SetCreator(v string) *GetVMDeployOrderResponseBodyDeployOrder {
	s.Creator = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrder) SetCurrentBatch(v int32) *GetVMDeployOrderResponseBodyDeployOrder {
	s.CurrentBatch = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrder) SetDeployMachineInfo(v *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo) *GetVMDeployOrderResponseBodyDeployOrder {
	s.DeployMachineInfo = v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrder) SetDeployOrderId(v string) *GetVMDeployOrderResponseBodyDeployOrder {
	s.DeployOrderId = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrder) SetExceptionCode(v string) *GetVMDeployOrderResponseBodyDeployOrder {
	s.ExceptionCode = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrder) SetStatus(v string) *GetVMDeployOrderResponseBodyDeployOrder {
	s.Status = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrder) SetTotalBatch(v int32) *GetVMDeployOrderResponseBodyDeployOrder {
	s.TotalBatch = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrder) SetUpdateTime(v int64) *GetVMDeployOrderResponseBodyDeployOrder {
	s.UpdateTime = &v
	return s
}

type GetVMDeployOrderResponseBodyDeployOrderActions struct {
	// example:
	//
	// true
	Disable *bool `json:"disable,omitempty" xml:"disable,omitempty"`
	// example:
	//
	// {}
	Params interface{} `json:"params,omitempty" xml:"params,omitempty"`
	// example:
	//
	// StopVMDeployOrder
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetVMDeployOrderResponseBodyDeployOrderActions) String() string {
	return tea.Prettify(s)
}

func (s GetVMDeployOrderResponseBodyDeployOrderActions) GoString() string {
	return s.String()
}

func (s *GetVMDeployOrderResponseBodyDeployOrderActions) SetDisable(v bool) *GetVMDeployOrderResponseBodyDeployOrderActions {
	s.Disable = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderActions) SetParams(v interface{}) *GetVMDeployOrderResponseBodyDeployOrderActions {
	s.Params = v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderActions) SetType(v string) *GetVMDeployOrderResponseBodyDeployOrderActions {
	s.Type = &v
	return s
}

type GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo struct {
	// example:
	//
	// 11
	BatchNum       *int32                                                                    `json:"batchNum,omitempty" xml:"batchNum,omitempty"`
	DeployMachines []*GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines `json:"deployMachines,omitempty" xml:"deployMachines,omitempty" type:"Repeated"`
	// example:
	//
	// 1111
	HostGroupId *int64 `json:"hostGroupId,omitempty" xml:"hostGroupId,omitempty"`
}

func (s GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo) String() string {
	return tea.Prettify(s)
}

func (s GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo) GoString() string {
	return s.String()
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo) SetBatchNum(v int32) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo {
	s.BatchNum = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo) SetDeployMachines(v []*GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo {
	s.DeployMachines = v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo) SetHostGroupId(v int64) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfo {
	s.HostGroupId = &v
	return s
}

type GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines struct {
	Actions []*GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions `json:"actions,omitempty" xml:"actions,omitempty" type:"Repeated"`
	// example:
	//
	// 22
	BatchNum *int32 `json:"batchNum,omitempty" xml:"batchNum,omitempty"`
	// example:
	//
	// ok
	ClientStatus *string `json:"clientStatus,omitempty" xml:"clientStatus,omitempty"`
	// example:
	//
	// 1111111111
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 127.0.0.1
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// example:
	//
	// sasssasa
	MachineSn *string `json:"machineSn,omitempty" xml:"machineSn,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 11111111
	UpdateTime *int64 `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) String() string {
	return tea.Prettify(s)
}

func (s GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) GoString() string {
	return s.String()
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) SetActions(v []*GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines {
	s.Actions = v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) SetBatchNum(v int32) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines {
	s.BatchNum = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) SetClientStatus(v string) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines {
	s.ClientStatus = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) SetCreateTime(v int64) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines {
	s.CreateTime = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) SetIp(v string) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines {
	s.Ip = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) SetMachineSn(v string) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines {
	s.MachineSn = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) SetStatus(v string) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines {
	s.Status = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines) SetUpdateTime(v int64) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachines {
	s.UpdateTime = &v
	return s
}

type GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions struct {
	// example:
	//
	// true
	Disable *bool `json:"disable,omitempty" xml:"disable,omitempty"`
	// example:
	//
	// {}
	Params interface{} `json:"params,omitempty" xml:"params,omitempty"`
	// example:
	//
	// RetryVMDeployMachine
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions) String() string {
	return tea.Prettify(s)
}

func (s GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions) GoString() string {
	return s.String()
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions) SetDisable(v bool) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions {
	s.Disable = &v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions) SetParams(v interface{}) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions {
	s.Params = v
	return s
}

func (s *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions) SetType(v string) *GetVMDeployOrderResponseBodyDeployOrderDeployMachineInfoDeployMachinesActions {
	s.Type = &v
	return s
}

type GetVMDeployOrderResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetVMDeployOrderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetVMDeployOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVMDeployOrderResponse) GoString() string {
	return s.String()
}

func (s *GetVMDeployOrderResponse) SetHeaders(v map[string]*string) *GetVMDeployOrderResponse {
	s.Headers = v
	return s
}

func (s *GetVMDeployOrderResponse) SetStatusCode(v int32) *GetVMDeployOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVMDeployOrderResponse) SetBody(v *GetVMDeployOrderResponseBody) *GetVMDeployOrderResponse {
	s.Body = v
	return s
}

type GetVariableGroupResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success       *bool                                      `json:"success,omitempty" xml:"success,omitempty"`
	VariableGroup *GetVariableGroupResponseBodyVariableGroup `json:"variableGroup,omitempty" xml:"variableGroup,omitempty" type:"Struct"`
}

func (s GetVariableGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVariableGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetVariableGroupResponseBody) SetErrorCode(v string) *GetVariableGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetVariableGroupResponseBody) SetErrorMessage(v string) *GetVariableGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetVariableGroupResponseBody) SetRequestId(v string) *GetVariableGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetVariableGroupResponseBody) SetSuccess(v bool) *GetVariableGroupResponseBody {
	s.Success = &v
	return s
}

func (s *GetVariableGroupResponseBody) SetVariableGroup(v *GetVariableGroupResponseBodyVariableGroup) *GetVariableGroupResponseBody {
	s.VariableGroup = v
	return s
}

type GetVariableGroupResponseBodyVariableGroup struct {
	// example:
	//
	// 13232343434343
	CcreatorAccountId *string `json:"ccreatorAccountId,omitempty" xml:"ccreatorAccountId,omitempty"`
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 变量组
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 12234
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 13232343434343
	ModifierAccountId *string `json:"modifierAccountId,omitempty" xml:"modifierAccountId,omitempty"`
	// example:
	//
	// 变量组
	Name             *string                                                      `json:"name,omitempty" xml:"name,omitempty"`
	RelatedPipelines []*GetVariableGroupResponseBodyVariableGroupRelatedPipelines `json:"relatedPipelines,omitempty" xml:"relatedPipelines,omitempty" type:"Repeated"`
	// example:
	//
	// 1586863220000
	UpdateTime *int64                                                `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
	Variables  []*GetVariableGroupResponseBodyVariableGroupVariables `json:"variables,omitempty" xml:"variables,omitempty" type:"Repeated"`
}

func (s GetVariableGroupResponseBodyVariableGroup) String() string {
	return tea.Prettify(s)
}

func (s GetVariableGroupResponseBodyVariableGroup) GoString() string {
	return s.String()
}

func (s *GetVariableGroupResponseBodyVariableGroup) SetCcreatorAccountId(v string) *GetVariableGroupResponseBodyVariableGroup {
	s.CcreatorAccountId = &v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroup) SetCreateTime(v int64) *GetVariableGroupResponseBodyVariableGroup {
	s.CreateTime = &v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroup) SetDescription(v string) *GetVariableGroupResponseBodyVariableGroup {
	s.Description = &v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroup) SetId(v int64) *GetVariableGroupResponseBodyVariableGroup {
	s.Id = &v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroup) SetModifierAccountId(v string) *GetVariableGroupResponseBodyVariableGroup {
	s.ModifierAccountId = &v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroup) SetName(v string) *GetVariableGroupResponseBodyVariableGroup {
	s.Name = &v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroup) SetRelatedPipelines(v []*GetVariableGroupResponseBodyVariableGroupRelatedPipelines) *GetVariableGroupResponseBodyVariableGroup {
	s.RelatedPipelines = v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroup) SetUpdateTime(v int64) *GetVariableGroupResponseBodyVariableGroup {
	s.UpdateTime = &v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroup) SetVariables(v []*GetVariableGroupResponseBodyVariableGroupVariables) *GetVariableGroupResponseBodyVariableGroup {
	s.Variables = v
	return s
}

type GetVariableGroupResponseBodyVariableGroupRelatedPipelines struct {
	// example:
	//
	// 1234
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 流水线
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetVariableGroupResponseBodyVariableGroupRelatedPipelines) String() string {
	return tea.Prettify(s)
}

func (s GetVariableGroupResponseBodyVariableGroupRelatedPipelines) GoString() string {
	return s.String()
}

func (s *GetVariableGroupResponseBodyVariableGroupRelatedPipelines) SetId(v int64) *GetVariableGroupResponseBodyVariableGroupRelatedPipelines {
	s.Id = &v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroupRelatedPipelines) SetName(v string) *GetVariableGroupResponseBodyVariableGroupRelatedPipelines {
	s.Name = &v
	return s
}

type GetVariableGroupResponseBodyVariableGroupVariables struct {
	// example:
	//
	// true
	IsEncrypted *bool `json:"isEncrypted,omitempty" xml:"isEncrypted,omitempty"`
	// example:
	//
	// name1
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// value1
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s GetVariableGroupResponseBodyVariableGroupVariables) String() string {
	return tea.Prettify(s)
}

func (s GetVariableGroupResponseBodyVariableGroupVariables) GoString() string {
	return s.String()
}

func (s *GetVariableGroupResponseBodyVariableGroupVariables) SetIsEncrypted(v bool) *GetVariableGroupResponseBodyVariableGroupVariables {
	s.IsEncrypted = &v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroupVariables) SetName(v string) *GetVariableGroupResponseBodyVariableGroupVariables {
	s.Name = &v
	return s
}

func (s *GetVariableGroupResponseBodyVariableGroupVariables) SetValue(v string) *GetVariableGroupResponseBodyVariableGroupVariables {
	s.Value = &v
	return s
}

type GetVariableGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetVariableGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetVariableGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVariableGroupResponse) GoString() string {
	return s.String()
}

func (s *GetVariableGroupResponse) SetHeaders(v map[string]*string) *GetVariableGroupResponse {
	s.Headers = v
	return s
}

func (s *GetVariableGroupResponse) SetStatusCode(v int32) *GetVariableGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVariableGroupResponse) SetBody(v *GetVariableGroupResponseBody) *GetVariableGroupResponse {
	s.Body = v
	return s
}

type GetWorkItemActivityResponseBody struct {
	Activities []*GetWorkItemActivityResponseBodyActivities `json:"activities,omitempty" xml:"activities,omitempty" type:"Repeated"`
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetWorkItemActivityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemActivityResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkItemActivityResponseBody) SetActivities(v []*GetWorkItemActivityResponseBodyActivities) *GetWorkItemActivityResponseBody {
	s.Activities = v
	return s
}

func (s *GetWorkItemActivityResponseBody) SetErrorCode(v string) *GetWorkItemActivityResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetWorkItemActivityResponseBody) SetErrorMsg(v string) *GetWorkItemActivityResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *GetWorkItemActivityResponseBody) SetRequestId(v string) *GetWorkItemActivityResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkItemActivityResponseBody) SetSuccess(v bool) *GetWorkItemActivityResponseBody {
	s.Success = &v
	return s
}

type GetWorkItemActivityResponseBodyActivities struct {
	// example:
	//
	// update
	ActionType *string `json:"actionType,omitempty" xml:"actionType,omitempty"`
	// example:
	//
	// 3201131
	EventId *int64 `json:"eventId,omitempty" xml:"eventId,omitempty"`
	// example:
	//
	// 1640867079624
	EventTime *int64 `json:"eventTime,omitempty" xml:"eventTime,omitempty"`
	// example:
	//
	// workitem.updated
	EventType *string                                              `json:"eventType,omitempty" xml:"eventType,omitempty"`
	NewValue  []*GetWorkItemActivityResponseBodyActivitiesNewValue `json:"newValue,omitempty" xml:"newValue,omitempty" type:"Repeated"`
	OldValue  []*GetWorkItemActivityResponseBodyActivitiesOldValue `json:"oldValue,omitempty" xml:"oldValue,omitempty" type:"Repeated"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// example:
	//
	// 3201132
	ParentEventId *int64 `json:"parentEventId,omitempty" xml:"parentEventId,omitempty"`
	// example:
	//
	// public
	Property *GetWorkItemActivityResponseBodyActivitiesProperty `json:"property,omitempty" xml:"property,omitempty" type:"Struct"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	ResourceIdentifier *string `json:"resourceIdentifier,omitempty" xml:"resourceIdentifier,omitempty"`
}

func (s GetWorkItemActivityResponseBodyActivities) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemActivityResponseBodyActivities) GoString() string {
	return s.String()
}

func (s *GetWorkItemActivityResponseBodyActivities) SetActionType(v string) *GetWorkItemActivityResponseBodyActivities {
	s.ActionType = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivities) SetEventId(v int64) *GetWorkItemActivityResponseBodyActivities {
	s.EventId = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivities) SetEventTime(v int64) *GetWorkItemActivityResponseBodyActivities {
	s.EventTime = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivities) SetEventType(v string) *GetWorkItemActivityResponseBodyActivities {
	s.EventType = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivities) SetNewValue(v []*GetWorkItemActivityResponseBodyActivitiesNewValue) *GetWorkItemActivityResponseBodyActivities {
	s.NewValue = v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivities) SetOldValue(v []*GetWorkItemActivityResponseBodyActivitiesOldValue) *GetWorkItemActivityResponseBodyActivities {
	s.OldValue = v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivities) SetOperator(v string) *GetWorkItemActivityResponseBodyActivities {
	s.Operator = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivities) SetParentEventId(v int64) *GetWorkItemActivityResponseBodyActivities {
	s.ParentEventId = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivities) SetProperty(v *GetWorkItemActivityResponseBodyActivitiesProperty) *GetWorkItemActivityResponseBodyActivities {
	s.Property = v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivities) SetResourceIdentifier(v string) *GetWorkItemActivityResponseBodyActivities {
	s.ResourceIdentifier = &v
	return s
}

type GetWorkItemActivityResponseBodyActivitiesNewValue struct {
	// example:
	//
	// Sprint-221124
	DisplayValue *string `json:"displayValue,omitempty" xml:"displayValue,omitempty"`
	// example:
	//
	// bed1cca179badeb501a72d1194
	PlainValue *string `json:"plainValue,omitempty" xml:"plainValue,omitempty"`
	// example:
	//
	// Sprint
	ResourceType *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
}

func (s GetWorkItemActivityResponseBodyActivitiesNewValue) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemActivityResponseBodyActivitiesNewValue) GoString() string {
	return s.String()
}

func (s *GetWorkItemActivityResponseBodyActivitiesNewValue) SetDisplayValue(v string) *GetWorkItemActivityResponseBodyActivitiesNewValue {
	s.DisplayValue = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivitiesNewValue) SetPlainValue(v string) *GetWorkItemActivityResponseBodyActivitiesNewValue {
	s.PlainValue = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivitiesNewValue) SetResourceType(v string) *GetWorkItemActivityResponseBodyActivitiesNewValue {
	s.ResourceType = &v
	return s
}

type GetWorkItemActivityResponseBodyActivitiesOldValue struct {
	// example:
	//
	// Sprint-221124
	DisplayValue *string `json:"displayValue,omitempty" xml:"displayValue,omitempty"`
	// example:
	//
	// bed1cca179badeb501a72d1194
	PlainValue *string `json:"plainValue,omitempty" xml:"plainValue,omitempty"`
	// example:
	//
	// Sprint
	ResourceType *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
}

func (s GetWorkItemActivityResponseBodyActivitiesOldValue) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemActivityResponseBodyActivitiesOldValue) GoString() string {
	return s.String()
}

func (s *GetWorkItemActivityResponseBodyActivitiesOldValue) SetDisplayValue(v string) *GetWorkItemActivityResponseBodyActivitiesOldValue {
	s.DisplayValue = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivitiesOldValue) SetPlainValue(v string) *GetWorkItemActivityResponseBodyActivitiesOldValue {
	s.PlainValue = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivitiesOldValue) SetResourceType(v string) *GetWorkItemActivityResponseBodyActivitiesOldValue {
	s.ResourceType = &v
	return s
}

type GetWorkItemActivityResponseBodyActivitiesProperty struct {
	// example:
	//
	// 标题
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	// example:
	//
	// subject
	PropertyIdentifier *string `json:"propertyIdentifier,omitempty" xml:"propertyIdentifier,omitempty"`
	// example:
	//
	// subject
	PropertyName *string `json:"propertyName,omitempty" xml:"propertyName,omitempty"`
	// example:
	//
	// null
	PropertyType *string `json:"propertyType,omitempty" xml:"propertyType,omitempty"`
}

func (s GetWorkItemActivityResponseBodyActivitiesProperty) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemActivityResponseBodyActivitiesProperty) GoString() string {
	return s.String()
}

func (s *GetWorkItemActivityResponseBodyActivitiesProperty) SetDisplayName(v string) *GetWorkItemActivityResponseBodyActivitiesProperty {
	s.DisplayName = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivitiesProperty) SetPropertyIdentifier(v string) *GetWorkItemActivityResponseBodyActivitiesProperty {
	s.PropertyIdentifier = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivitiesProperty) SetPropertyName(v string) *GetWorkItemActivityResponseBodyActivitiesProperty {
	s.PropertyName = &v
	return s
}

func (s *GetWorkItemActivityResponseBodyActivitiesProperty) SetPropertyType(v string) *GetWorkItemActivityResponseBodyActivitiesProperty {
	s.PropertyType = &v
	return s
}

type GetWorkItemActivityResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkItemActivityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkItemActivityResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemActivityResponse) GoString() string {
	return s.String()
}

func (s *GetWorkItemActivityResponse) SetHeaders(v map[string]*string) *GetWorkItemActivityResponse {
	s.Headers = v
	return s
}

func (s *GetWorkItemActivityResponse) SetStatusCode(v int32) *GetWorkItemActivityResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkItemActivityResponse) SetBody(v *GetWorkItemActivityResponseBody) *GetWorkItemActivityResponse {
	s.Body = v
	return s
}

type GetWorkItemInfoResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success  *bool                                `json:"success,omitempty" xml:"success,omitempty"`
	Workitem *GetWorkItemInfoResponseBodyWorkitem `json:"workitem,omitempty" xml:"workitem,omitempty" type:"Struct"`
}

func (s GetWorkItemInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkItemInfoResponseBody) SetErrorCode(v string) *GetWorkItemInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetWorkItemInfoResponseBody) SetErrorMessage(v string) *GetWorkItemInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetWorkItemInfoResponseBody) SetRequestId(v string) *GetWorkItemInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkItemInfoResponseBody) SetSuccess(v bool) *GetWorkItemInfoResponseBody {
	s.Success = &v
	return s
}

func (s *GetWorkItemInfoResponseBody) SetWorkitem(v *GetWorkItemInfoResponseBodyWorkitem) *GetWorkItemInfoResponseBody {
	s.Workitem = v
	return s
}

type GetWorkItemInfoResponseBodyWorkitem struct {
	// example:
	//
	// 19xx7043xxxxxxx914
	AssignedTo *string `json:"assignedTo,omitempty" xml:"assignedTo,omitempty"`
	// example:
	//
	// Req
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator      *string                                            `json:"creator,omitempty" xml:"creator,omitempty"`
	CustomFields []*GetWorkItemInfoResponseBodyWorkitemCustomFields `json:"customFields,omitempty" xml:"customFields,omitempty" type:"Repeated"`
	// example:
	//
	// html格式
	Document       *string `json:"document,omitempty" xml:"document,omitempty"`
	DocumentFormat *string `json:"documentFormat,omitempty" xml:"documentFormat,omitempty"`
	FinishTime     *int64  `json:"finishTime,omitempty" xml:"finishTime,omitempty"`
	// example:
	//
	// 1640850318000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1640850318000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// NORMAL
	LogicalStatus *string `json:"logicalStatus,omitempty" xml:"logicalStatus,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx24
	ParentIdentifier *string   `json:"parentIdentifier,omitempty" xml:"parentIdentifier,omitempty"`
	Participant      []*string `json:"participant,omitempty" xml:"participant,omitempty" type:"Repeated"`
	// example:
	//
	// ABCD-1
	SerialNumber *string `json:"serialNumber,omitempty" xml:"serialNumber,omitempty"`
	// example:
	//
	// e8b26xxxxx6e76aa20xxxxx23
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// 需求项目
	SpaceName *string `json:"spaceName,omitempty" xml:"spaceName,omitempty"`
	// example:
	//
	// Project
	SpaceType *string   `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	Sprint    []*string `json:"sprint,omitempty" xml:"sprint,omitempty" type:"Repeated"`
	// example:
	//
	// 待处理
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 例：100005
	StatusIdentifier *string `json:"statusIdentifier,omitempty" xml:"statusIdentifier,omitempty"`
	// example:
	//
	// 1
	StatusStageIdentifier *string `json:"statusStageIdentifier,omitempty" xml:"statusStageIdentifier,omitempty"`
	// example:
	//
	// 测试工作项
	Subject    *string                                          `json:"subject,omitempty" xml:"subject,omitempty"`
	Tag        []*string                                        `json:"tag,omitempty" xml:"tag,omitempty" type:"Repeated"`
	TagDetails []*GetWorkItemInfoResponseBodyWorkitemTagDetails `json:"tagDetails,omitempty" xml:"tagDetails,omitempty" type:"Repeated"`
	Tracker    []*string                                        `json:"tracker,omitempty" xml:"tracker,omitempty" type:"Repeated"`
	// example:
	//
	// 1640850328000
	UpdateStatusAt *int64    `json:"updateStatusAt,omitempty" xml:"updateStatusAt,omitempty"`
	Verifier       []*string `json:"verifier,omitempty" xml:"verifier,omitempty" type:"Repeated"`
	// example:
	//
	// 9uxxxxxxre573f5xxxxxx0
	WorkitemTypeIdentifier *string `json:"workitemTypeIdentifier,omitempty" xml:"workitemTypeIdentifier,omitempty"`
}

func (s GetWorkItemInfoResponseBodyWorkitem) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemInfoResponseBodyWorkitem) GoString() string {
	return s.String()
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetAssignedTo(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.AssignedTo = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetCategoryIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.CategoryIdentifier = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetCreator(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Creator = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetCustomFields(v []*GetWorkItemInfoResponseBodyWorkitemCustomFields) *GetWorkItemInfoResponseBodyWorkitem {
	s.CustomFields = v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetDocument(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Document = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetDocumentFormat(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.DocumentFormat = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetFinishTime(v int64) *GetWorkItemInfoResponseBodyWorkitem {
	s.FinishTime = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetGmtCreate(v int64) *GetWorkItemInfoResponseBodyWorkitem {
	s.GmtCreate = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetGmtModified(v int64) *GetWorkItemInfoResponseBodyWorkitem {
	s.GmtModified = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Identifier = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetLogicalStatus(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.LogicalStatus = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetModifier(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Modifier = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetParentIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.ParentIdentifier = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetParticipant(v []*string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Participant = v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetSerialNumber(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.SerialNumber = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetSpaceIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.SpaceIdentifier = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetSpaceName(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.SpaceName = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetSpaceType(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.SpaceType = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetSprint(v []*string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Sprint = v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetStatus(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Status = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetStatusIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.StatusIdentifier = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetStatusStageIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.StatusStageIdentifier = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetSubject(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Subject = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetTag(v []*string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Tag = v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetTagDetails(v []*GetWorkItemInfoResponseBodyWorkitemTagDetails) *GetWorkItemInfoResponseBodyWorkitem {
	s.TagDetails = v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetTracker(v []*string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Tracker = v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetUpdateStatusAt(v int64) *GetWorkItemInfoResponseBodyWorkitem {
	s.UpdateStatusAt = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetVerifier(v []*string) *GetWorkItemInfoResponseBodyWorkitem {
	s.Verifier = v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitem) SetWorkitemTypeIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitem {
	s.WorkitemTypeIdentifier = &v
	return s
}

type GetWorkItemInfoResponseBodyWorkitemCustomFields struct {
	// example:
	//
	// 例如：date
	FieldClassName *string `json:"fieldClassName,omitempty" xml:"fieldClassName,omitempty"`
	// example:
	//
	// 例：input
	FieldFormat *string `json:"fieldFormat,omitempty" xml:"fieldFormat,omitempty"`
	// example:
	//
	// 例：80
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	// example:
	//
	// 1
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// example:
	//
	// null
	ObjectValue *string `json:"objectValue,omitempty" xml:"objectValue,omitempty"`
	// example:
	//
	// 1
	Position *int64 `json:"position,omitempty" xml:"position,omitempty"`
	// example:
	//
	// 例：2022-01-06 00:00:00
	Value     *string                                                     `json:"value,omitempty" xml:"value,omitempty"`
	ValueList []*GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList `json:"valueList,omitempty" xml:"valueList,omitempty" type:"Repeated"`
	// example:
	//
	// 5daa9a15c7fd55523996......
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s GetWorkItemInfoResponseBodyWorkitemCustomFields) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemInfoResponseBodyWorkitemCustomFields) GoString() string {
	return s.String()
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFields) SetFieldClassName(v string) *GetWorkItemInfoResponseBodyWorkitemCustomFields {
	s.FieldClassName = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFields) SetFieldFormat(v string) *GetWorkItemInfoResponseBodyWorkitemCustomFields {
	s.FieldFormat = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFields) SetFieldIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitemCustomFields {
	s.FieldIdentifier = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFields) SetLevel(v int64) *GetWorkItemInfoResponseBodyWorkitemCustomFields {
	s.Level = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFields) SetObjectValue(v string) *GetWorkItemInfoResponseBodyWorkitemCustomFields {
	s.ObjectValue = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFields) SetPosition(v int64) *GetWorkItemInfoResponseBodyWorkitemCustomFields {
	s.Position = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFields) SetValue(v string) *GetWorkItemInfoResponseBodyWorkitemCustomFields {
	s.Value = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFields) SetValueList(v []*GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList) *GetWorkItemInfoResponseBodyWorkitemCustomFields {
	s.ValueList = v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFields) SetWorkitemIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitemCustomFields {
	s.WorkitemIdentifier = &v
	return s
}

type GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList struct {
	// example:
	//
	// 2022-02-01 00:00:00
	DisplayValue *string `json:"displayValue,omitempty" xml:"displayValue,omitempty"`
	// example:
	//
	// 2022-02-01 00:00:00
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 1
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// example:
	//
	// 2022-02-01 00:00:00
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// example:
	//
	// null
	ValueEn *string `json:"valueEn,omitempty" xml:"valueEn,omitempty"`
}

func (s GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList) GoString() string {
	return s.String()
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList) SetDisplayValue(v string) *GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList {
	s.DisplayValue = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList) SetIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList {
	s.Identifier = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList) SetLevel(v int64) *GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList {
	s.Level = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList) SetValue(v string) *GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList {
	s.Value = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList) SetValueEn(v string) *GetWorkItemInfoResponseBodyWorkitemCustomFieldsValueList {
	s.ValueEn = &v
	return s
}

type GetWorkItemInfoResponseBodyWorkitemTagDetails struct {
	Color      *string `json:"color,omitempty" xml:"color,omitempty"`
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetWorkItemInfoResponseBodyWorkitemTagDetails) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemInfoResponseBodyWorkitemTagDetails) GoString() string {
	return s.String()
}

func (s *GetWorkItemInfoResponseBodyWorkitemTagDetails) SetColor(v string) *GetWorkItemInfoResponseBodyWorkitemTagDetails {
	s.Color = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemTagDetails) SetIdentifier(v string) *GetWorkItemInfoResponseBodyWorkitemTagDetails {
	s.Identifier = &v
	return s
}

func (s *GetWorkItemInfoResponseBodyWorkitemTagDetails) SetName(v string) *GetWorkItemInfoResponseBodyWorkitemTagDetails {
	s.Name = &v
	return s
}

type GetWorkItemInfoResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkItemInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkItemInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemInfoResponse) GoString() string {
	return s.String()
}

func (s *GetWorkItemInfoResponse) SetHeaders(v map[string]*string) *GetWorkItemInfoResponse {
	s.Headers = v
	return s
}

func (s *GetWorkItemInfoResponse) SetStatusCode(v int32) *GetWorkItemInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkItemInfoResponse) SetBody(v *GetWorkItemInfoResponseBody) *GetWorkItemInfoResponse {
	s.Body = v
	return s
}

type GetWorkItemWorkFlowInfoRequest struct {
	// example:
	//
	// 711d33c738b9171c45fa......
	ConfigurationId *string `json:"configurationId,omitempty" xml:"configurationId,omitempty"`
}

func (s GetWorkItemWorkFlowInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemWorkFlowInfoRequest) GoString() string {
	return s.String()
}

func (s *GetWorkItemWorkFlowInfoRequest) SetConfigurationId(v string) *GetWorkItemWorkFlowInfoRequest {
	s.ConfigurationId = &v
	return s
}

type GetWorkItemWorkFlowInfoResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success  *bool                                        `json:"success,omitempty" xml:"success,omitempty"`
	Workflow *GetWorkItemWorkFlowInfoResponseBodyWorkflow `json:"workflow,omitempty" xml:"workflow,omitempty" type:"Struct"`
}

func (s GetWorkItemWorkFlowInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemWorkFlowInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkItemWorkFlowInfoResponseBody) SetErrorCode(v string) *GetWorkItemWorkFlowInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBody) SetErrorMessage(v string) *GetWorkItemWorkFlowInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBody) SetRequestId(v string) *GetWorkItemWorkFlowInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBody) SetSuccess(v bool) *GetWorkItemWorkFlowInfoResponseBody {
	s.Success = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBody) SetWorkflow(v *GetWorkItemWorkFlowInfoResponseBodyWorkflow) *GetWorkItemWorkFlowInfoResponseBody {
	s.Workflow = v
	return s
}

type GetWorkItemWorkFlowInfoResponseBodyWorkflow struct {
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// 100005
	DefaultStatusIdentifier *string `json:"defaultStatusIdentifier,omitempty" xml:"defaultStatusIdentifier,omitempty"`
	// example:
	//
	// 工作流的描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1640850318000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1640850318000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// 名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// e8b26xxxxx6e76aa20xxxxx23
	OwnerSpaceIdentifier *string `json:"ownerSpaceIdentifier,omitempty" xml:"ownerSpaceIdentifier,omitempty"`
	// example:
	//
	// null
	OwnerSpaceType *string `json:"ownerSpaceType,omitempty" xml:"ownerSpaceType,omitempty"`
	// example:
	//
	// Project
	ResourceType *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
	// example:
	//
	// system
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// null
	StatusOrder     *string                                                       `json:"statusOrder,omitempty" xml:"statusOrder,omitempty"`
	Statuses        []*GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses        `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	WorkflowActions []*GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions `json:"workflowActions,omitempty" xml:"workflowActions,omitempty" type:"Repeated"`
}

func (s GetWorkItemWorkFlowInfoResponseBodyWorkflow) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemWorkFlowInfoResponseBodyWorkflow) GoString() string {
	return s.String()
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetCreator(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.Creator = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetDefaultStatusIdentifier(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.DefaultStatusIdentifier = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetDescription(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.Description = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetGmtCreate(v int64) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.GmtCreate = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetGmtModified(v int64) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.GmtModified = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetIdentifier(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.Identifier = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetModifier(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.Modifier = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetName(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.Name = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetOwnerSpaceIdentifier(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.OwnerSpaceIdentifier = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetOwnerSpaceType(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.OwnerSpaceType = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetResourceType(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.ResourceType = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetSource(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.Source = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetStatusOrder(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.StatusOrder = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetStatuses(v []*GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.Statuses = v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflow) SetWorkflowActions(v []*GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions) *GetWorkItemWorkFlowInfoResponseBodyWorkflow {
	s.WorkflowActions = v
	return s
}

type GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses struct {
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// xxx
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1613805843000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1613805843000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 156603
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// 待处理
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// Workitem
	ResourceType *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
	// example:
	//
	// system
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// 1
	WorkflowStageIdentifier *string `json:"workflowStageIdentifier,omitempty" xml:"workflowStageIdentifier,omitempty"`
	// example:
	//
	// 确认阶段
	WorkflowStageName *string `json:"workflowStageName,omitempty" xml:"workflowStageName,omitempty"`
}

func (s GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) GoString() string {
	return s.String()
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetCreator(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.Creator = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetDescription(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.Description = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetGmtCreate(v int64) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.GmtCreate = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetGmtModified(v int64) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.GmtModified = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetIdentifier(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.Identifier = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetModifier(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.Modifier = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetName(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.Name = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetResourceType(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.ResourceType = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetSource(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.Source = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetWorkflowStageIdentifier(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.WorkflowStageIdentifier = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses) SetWorkflowStageName(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowStatuses {
	s.WorkflowStageName = &v
	return s
}

type GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions struct {
	// example:
	//
	// 16274887
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// xxx
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 100011
	NextWorkflowStatusIdentifier *string `json:"nextWorkflowStatusIdentifier,omitempty" xml:"nextWorkflowStatusIdentifier,omitempty"`
	// example:
	//
	// fd0xxxxxd00d355b05dxxxx26
	WorkflowIdentifier *string `json:"workflowIdentifier,omitempty" xml:"workflowIdentifier,omitempty"`
	// example:
	//
	// 100005
	WorkflowStatusIdentifier *string `json:"workflowStatusIdentifier,omitempty" xml:"workflowStatusIdentifier,omitempty"`
}

func (s GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions) GoString() string {
	return s.String()
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions) SetId(v int64) *GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions {
	s.Id = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions) SetName(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions {
	s.Name = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions) SetNextWorkflowStatusIdentifier(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions {
	s.NextWorkflowStatusIdentifier = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions) SetWorkflowIdentifier(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions {
	s.WorkflowIdentifier = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions) SetWorkflowStatusIdentifier(v string) *GetWorkItemWorkFlowInfoResponseBodyWorkflowWorkflowActions {
	s.WorkflowStatusIdentifier = &v
	return s
}

type GetWorkItemWorkFlowInfoResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkItemWorkFlowInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkItemWorkFlowInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkItemWorkFlowInfoResponse) GoString() string {
	return s.String()
}

func (s *GetWorkItemWorkFlowInfoResponse) SetHeaders(v map[string]*string) *GetWorkItemWorkFlowInfoResponse {
	s.Headers = v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponse) SetStatusCode(v int32) *GetWorkItemWorkFlowInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkItemWorkFlowInfoResponse) SetBody(v *GetWorkItemWorkFlowInfoResponseBody) *GetWorkItemWorkFlowInfoResponse {
	s.Body = v
	return s
}

type GetWorkitemAttachmentCreatemetaRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// application.jar
	FileName *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
}

func (s GetWorkitemAttachmentCreatemetaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemAttachmentCreatemetaRequest) GoString() string {
	return s.String()
}

func (s *GetWorkitemAttachmentCreatemetaRequest) SetFileName(v string) *GetWorkitemAttachmentCreatemetaRequest {
	s.FileName = &v
	return s
}

type GetWorkitemAttachmentCreatemetaResponseBody struct {
	// example:
	//
	// Invalid.IdNotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// Forbidden.UserNotInCurrentOrganization
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success    *string                                                `json:"success,omitempty" xml:"success,omitempty"`
	UploadInfo *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo `json:"uploadInfo,omitempty" xml:"uploadInfo,omitempty" type:"Struct"`
}

func (s GetWorkitemAttachmentCreatemetaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemAttachmentCreatemetaResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkitemAttachmentCreatemetaResponseBody) SetErrorCode(v string) *GetWorkitemAttachmentCreatemetaResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetWorkitemAttachmentCreatemetaResponseBody) SetErrorMessage(v string) *GetWorkitemAttachmentCreatemetaResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetWorkitemAttachmentCreatemetaResponseBody) SetRequestId(v string) *GetWorkitemAttachmentCreatemetaResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkitemAttachmentCreatemetaResponseBody) SetSuccess(v string) *GetWorkitemAttachmentCreatemetaResponseBody {
	s.Success = &v
	return s
}

func (s *GetWorkitemAttachmentCreatemetaResponseBody) SetUploadInfo(v *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo) *GetWorkitemAttachmentCreatemetaResponseBody {
	s.UploadInfo = v
	return s
}

type GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo struct {
	// example:
	//
	// xxxxxxx
	Accessid *string `json:"accessid,omitempty" xml:"accessid,omitempty"`
	// example:
	//
	// ddd/dddd
	Dir *string `json:"dir,omitempty" xml:"dir,omitempty"`
	// example:
	//
	// xxxxx
	Host *string `json:"host,omitempty" xml:"host,omitempty"`
	// example:
	//
	// xxxxxxx
	Policy *string `json:"policy,omitempty" xml:"policy,omitempty"`
	// example:
	//
	// xdWcrl/yTmIUA0kE7a3B0Ox4Vu8=
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
}

func (s GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo) GoString() string {
	return s.String()
}

func (s *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo) SetAccessid(v string) *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo {
	s.Accessid = &v
	return s
}

func (s *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo) SetDir(v string) *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo {
	s.Dir = &v
	return s
}

func (s *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo) SetHost(v string) *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo {
	s.Host = &v
	return s
}

func (s *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo) SetPolicy(v string) *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo {
	s.Policy = &v
	return s
}

func (s *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo) SetSignature(v string) *GetWorkitemAttachmentCreatemetaResponseBodyUploadInfo {
	s.Signature = &v
	return s
}

type GetWorkitemAttachmentCreatemetaResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkitemAttachmentCreatemetaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkitemAttachmentCreatemetaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemAttachmentCreatemetaResponse) GoString() string {
	return s.String()
}

func (s *GetWorkitemAttachmentCreatemetaResponse) SetHeaders(v map[string]*string) *GetWorkitemAttachmentCreatemetaResponse {
	s.Headers = v
	return s
}

func (s *GetWorkitemAttachmentCreatemetaResponse) SetStatusCode(v int32) *GetWorkitemAttachmentCreatemetaResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkitemAttachmentCreatemetaResponse) SetBody(v *GetWorkitemAttachmentCreatemetaResponseBody) *GetWorkitemAttachmentCreatemetaResponse {
	s.Body = v
	return s
}

type GetWorkitemCommentListResponseBody struct {
	CommentList []*GetWorkitemCommentListResponseBodyCommentList `json:"commentList,omitempty" xml:"commentList,omitempty" type:"Repeated"`
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Success   *string `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetWorkitemCommentListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemCommentListResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkitemCommentListResponseBody) SetCommentList(v []*GetWorkitemCommentListResponseBodyCommentList) *GetWorkitemCommentListResponseBody {
	s.CommentList = v
	return s
}

func (s *GetWorkitemCommentListResponseBody) SetErrorCode(v string) *GetWorkitemCommentListResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetWorkitemCommentListResponseBody) SetErrorMsg(v string) *GetWorkitemCommentListResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *GetWorkitemCommentListResponseBody) SetRequestId(v string) *GetWorkitemCommentListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkitemCommentListResponseBody) SetSuccess(v string) *GetWorkitemCommentListResponseBody {
	s.Success = &v
	return s
}

type GetWorkitemCommentListResponseBodyCommentList struct {
	// example:
	//
	// 066961
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// 1667205617061
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// RICHTEXT/MARKDOWN
	FormatType *string `json:"formatType,omitempty" xml:"formatType,omitempty"`
	// example:
	//
	// 6573
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true/false
	IsTop *bool `json:"isTop,omitempty" xml:"isTop,omitempty"`
	// example:
	//
	// 1646323200000
	ModifiedTime *int64 `json:"modifiedTime,omitempty" xml:"modifiedTime,omitempty"`
	// example:
	//
	// 1013131897677566
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// 9144ef6b72d8exxxxx9e61a4d0
	TargetIdentifier *string `json:"targetIdentifier,omitempty" xml:"targetIdentifier,omitempty"`
	// example:
	//
	// workitem
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
	// example:
	//
	// 1667205617089
	TopTime *int64                                             `json:"topTime,omitempty" xml:"topTime,omitempty"`
	User    *GetWorkitemCommentListResponseBodyCommentListUser `json:"user,omitempty" xml:"user,omitempty" type:"Struct"`
}

func (s GetWorkitemCommentListResponseBodyCommentList) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemCommentListResponseBodyCommentList) GoString() string {
	return s.String()
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetContent(v string) *GetWorkitemCommentListResponseBodyCommentList {
	s.Content = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetCreateTime(v int64) *GetWorkitemCommentListResponseBodyCommentList {
	s.CreateTime = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetFormatType(v string) *GetWorkitemCommentListResponseBodyCommentList {
	s.FormatType = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetId(v int64) *GetWorkitemCommentListResponseBodyCommentList {
	s.Id = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetIsTop(v bool) *GetWorkitemCommentListResponseBodyCommentList {
	s.IsTop = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetModifiedTime(v int64) *GetWorkitemCommentListResponseBodyCommentList {
	s.ModifiedTime = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetParentId(v int64) *GetWorkitemCommentListResponseBodyCommentList {
	s.ParentId = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetTargetIdentifier(v string) *GetWorkitemCommentListResponseBodyCommentList {
	s.TargetIdentifier = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetTargetType(v string) *GetWorkitemCommentListResponseBodyCommentList {
	s.TargetType = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetTopTime(v int64) *GetWorkitemCommentListResponseBodyCommentList {
	s.TopTime = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentList) SetUser(v *GetWorkitemCommentListResponseBodyCommentListUser) *GetWorkitemCommentListResponseBodyCommentList {
	s.User = v
	return s
}

type GetWorkitemCommentListResponseBodyCommentListUser struct {
	Account    *string `json:"account,omitempty" xml:"account,omitempty"`
	Avatar     *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	NickName   *string `json:"nickName,omitempty" xml:"nickName,omitempty"`
	RealName   *string `json:"realName,omitempty" xml:"realName,omitempty"`
}

func (s GetWorkitemCommentListResponseBodyCommentListUser) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemCommentListResponseBodyCommentListUser) GoString() string {
	return s.String()
}

func (s *GetWorkitemCommentListResponseBodyCommentListUser) SetAccount(v string) *GetWorkitemCommentListResponseBodyCommentListUser {
	s.Account = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentListUser) SetAvatar(v string) *GetWorkitemCommentListResponseBodyCommentListUser {
	s.Avatar = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentListUser) SetIdentifier(v string) *GetWorkitemCommentListResponseBodyCommentListUser {
	s.Identifier = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentListUser) SetNickName(v string) *GetWorkitemCommentListResponseBodyCommentListUser {
	s.NickName = &v
	return s
}

func (s *GetWorkitemCommentListResponseBodyCommentListUser) SetRealName(v string) *GetWorkitemCommentListResponseBodyCommentListUser {
	s.RealName = &v
	return s
}

type GetWorkitemCommentListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkitemCommentListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkitemCommentListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemCommentListResponse) GoString() string {
	return s.String()
}

func (s *GetWorkitemCommentListResponse) SetHeaders(v map[string]*string) *GetWorkitemCommentListResponse {
	s.Headers = v
	return s
}

func (s *GetWorkitemCommentListResponse) SetStatusCode(v int32) *GetWorkitemCommentListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkitemCommentListResponse) SetBody(v *GetWorkitemCommentListResponseBody) *GetWorkitemCommentListResponse {
	s.Body = v
	return s
}

type GetWorkitemFileResponseBody struct {
	// example:
	//
	// success
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success      *string                                  `json:"success,omitempty" xml:"success,omitempty"`
	WorkitemFile *GetWorkitemFileResponseBodyWorkitemFile `json:"workitemFile,omitempty" xml:"workitemFile,omitempty" type:"Struct"`
}

func (s GetWorkitemFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemFileResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkitemFileResponseBody) SetErrorCode(v string) *GetWorkitemFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetWorkitemFileResponseBody) SetErrorMsg(v string) *GetWorkitemFileResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *GetWorkitemFileResponseBody) SetRequestId(v string) *GetWorkitemFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkitemFileResponseBody) SetSuccess(v string) *GetWorkitemFileResponseBody {
	s.Success = &v
	return s
}

func (s *GetWorkitemFileResponseBody) SetWorkitemFile(v *GetWorkitemFileResponseBodyWorkitemFile) *GetWorkitemFileResponseBody {
	s.WorkitemFile = v
	return s
}

type GetWorkitemFileResponseBodyWorkitemFile struct {
	// example:
	//
	// sddrdfdf123df
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ddc.pdf
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 10001
	Size *int32 `json:"size,omitempty" xml:"size,omitempty"`
	// example:
	//
	// pdf
	Suffix *string `json:"suffix,omitempty" xml:"suffix,omitempty"`
	// example:
	//
	// http://tmaestro-oss.oss-cn-hongkong.aliyuncs.com/thread_1682129288279.log
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s GetWorkitemFileResponseBodyWorkitemFile) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemFileResponseBodyWorkitemFile) GoString() string {
	return s.String()
}

func (s *GetWorkitemFileResponseBodyWorkitemFile) SetId(v string) *GetWorkitemFileResponseBodyWorkitemFile {
	s.Id = &v
	return s
}

func (s *GetWorkitemFileResponseBodyWorkitemFile) SetName(v string) *GetWorkitemFileResponseBodyWorkitemFile {
	s.Name = &v
	return s
}

func (s *GetWorkitemFileResponseBodyWorkitemFile) SetSize(v int32) *GetWorkitemFileResponseBodyWorkitemFile {
	s.Size = &v
	return s
}

func (s *GetWorkitemFileResponseBodyWorkitemFile) SetSuffix(v string) *GetWorkitemFileResponseBodyWorkitemFile {
	s.Suffix = &v
	return s
}

func (s *GetWorkitemFileResponseBodyWorkitemFile) SetUrl(v string) *GetWorkitemFileResponseBodyWorkitemFile {
	s.Url = &v
	return s
}

type GetWorkitemFileResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkitemFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkitemFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemFileResponse) GoString() string {
	return s.String()
}

func (s *GetWorkitemFileResponse) SetHeaders(v map[string]*string) *GetWorkitemFileResponse {
	s.Headers = v
	return s
}

func (s *GetWorkitemFileResponse) SetStatusCode(v int32) *GetWorkitemFileResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkitemFileResponse) SetBody(v *GetWorkitemFileResponseBody) *GetWorkitemFileResponse {
	s.Body = v
	return s
}

type GetWorkitemRelationsRequest struct {
	// This parameter is required.
	RelationType *string `json:"relationType,omitempty" xml:"relationType,omitempty"`
}

func (s GetWorkitemRelationsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemRelationsRequest) GoString() string {
	return s.String()
}

func (s *GetWorkitemRelationsRequest) SetRelationType(v string) *GetWorkitemRelationsRequest {
	s.RelationType = &v
	return s
}

type GetWorkitemRelationsResponseBody struct {
	// example:
	//
	// InvalidGroup.IdNotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg     *string                                         `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	RelationList []*GetWorkitemRelationsResponseBodyRelationList `json:"relationList,omitempty" xml:"relationList,omitempty" type:"Repeated"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetWorkitemRelationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemRelationsResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkitemRelationsResponseBody) SetErrorCode(v string) *GetWorkitemRelationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetWorkitemRelationsResponseBody) SetErrorMsg(v string) *GetWorkitemRelationsResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *GetWorkitemRelationsResponseBody) SetRelationList(v []*GetWorkitemRelationsResponseBodyRelationList) *GetWorkitemRelationsResponseBody {
	s.RelationList = v
	return s
}

func (s *GetWorkitemRelationsResponseBody) SetRequestId(v string) *GetWorkitemRelationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkitemRelationsResponseBody) SetSuccess(v bool) *GetWorkitemRelationsResponseBody {
	s.Success = &v
	return s
}

type GetWorkitemRelationsResponseBodyRelationList struct {
	// example:
	//
	// aliyun_1384605
	AssignedTo *string `json:"assignedTo,omitempty" xml:"assignedTo,omitempty"`
	// example:
	//
	// Req
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 1667205617061
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1667205617089
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// deafe5f33xxxxx6a259d8dafd
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 2b856dxxxxxxb61d93676255ba
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	Subject         *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// example:
	//
	// 9uy29901re573f561d69jn40
	WorkitemTypeIdentifier *string `json:"workitemTypeIdentifier,omitempty" xml:"workitemTypeIdentifier,omitempty"`
}

func (s GetWorkitemRelationsResponseBodyRelationList) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemRelationsResponseBodyRelationList) GoString() string {
	return s.String()
}

func (s *GetWorkitemRelationsResponseBodyRelationList) SetAssignedTo(v string) *GetWorkitemRelationsResponseBodyRelationList {
	s.AssignedTo = &v
	return s
}

func (s *GetWorkitemRelationsResponseBodyRelationList) SetCategoryIdentifier(v string) *GetWorkitemRelationsResponseBodyRelationList {
	s.CategoryIdentifier = &v
	return s
}

func (s *GetWorkitemRelationsResponseBodyRelationList) SetGmtCreate(v string) *GetWorkitemRelationsResponseBodyRelationList {
	s.GmtCreate = &v
	return s
}

func (s *GetWorkitemRelationsResponseBodyRelationList) SetGmtModified(v string) *GetWorkitemRelationsResponseBodyRelationList {
	s.GmtModified = &v
	return s
}

func (s *GetWorkitemRelationsResponseBodyRelationList) SetIdentifier(v string) *GetWorkitemRelationsResponseBodyRelationList {
	s.Identifier = &v
	return s
}

func (s *GetWorkitemRelationsResponseBodyRelationList) SetSpaceIdentifier(v string) *GetWorkitemRelationsResponseBodyRelationList {
	s.SpaceIdentifier = &v
	return s
}

func (s *GetWorkitemRelationsResponseBodyRelationList) SetSubject(v string) *GetWorkitemRelationsResponseBodyRelationList {
	s.Subject = &v
	return s
}

func (s *GetWorkitemRelationsResponseBodyRelationList) SetWorkitemTypeIdentifier(v string) *GetWorkitemRelationsResponseBodyRelationList {
	s.WorkitemTypeIdentifier = &v
	return s
}

type GetWorkitemRelationsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkitemRelationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkitemRelationsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemRelationsResponse) GoString() string {
	return s.String()
}

func (s *GetWorkitemRelationsResponse) SetHeaders(v map[string]*string) *GetWorkitemRelationsResponse {
	s.Headers = v
	return s
}

func (s *GetWorkitemRelationsResponse) SetStatusCode(v int32) *GetWorkitemRelationsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkitemRelationsResponse) SetBody(v *GetWorkitemRelationsResponseBody) *GetWorkitemRelationsResponse {
	s.Body = v
	return s
}

type GetWorkitemTimeTypeListResponseBody struct {
	// example:
	//
	// Invalid.IdNotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// HC93CE1A-8D7A-13A9-8306-7465DE2E5C0F
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success  *string                                        `json:"success,omitempty" xml:"success,omitempty"`
	TimeType []*GetWorkitemTimeTypeListResponseBodyTimeType `json:"timeType,omitempty" xml:"timeType,omitempty" type:"Repeated"`
}

func (s GetWorkitemTimeTypeListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemTimeTypeListResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkitemTimeTypeListResponseBody) SetErrorCode(v string) *GetWorkitemTimeTypeListResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetWorkitemTimeTypeListResponseBody) SetErrorMsg(v string) *GetWorkitemTimeTypeListResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *GetWorkitemTimeTypeListResponseBody) SetRequestId(v string) *GetWorkitemTimeTypeListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkitemTimeTypeListResponseBody) SetSuccess(v string) *GetWorkitemTimeTypeListResponseBody {
	s.Success = &v
	return s
}

func (s *GetWorkitemTimeTypeListResponseBody) SetTimeType(v []*GetWorkitemTimeTypeListResponseBodyTimeType) *GetWorkitemTimeTypeListResponseBody {
	s.TimeType = v
	return s
}

type GetWorkitemTimeTypeListResponseBodyTimeType struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// deploy
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	// example:
	//
	// 67fb001005aac8d3d2a3372416
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 1
	Position *int64 `json:"position,omitempty" xml:"position,omitempty"`
}

func (s GetWorkitemTimeTypeListResponseBodyTimeType) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemTimeTypeListResponseBodyTimeType) GoString() string {
	return s.String()
}

func (s *GetWorkitemTimeTypeListResponseBodyTimeType) SetDescription(v string) *GetWorkitemTimeTypeListResponseBodyTimeType {
	s.Description = &v
	return s
}

func (s *GetWorkitemTimeTypeListResponseBodyTimeType) SetDisplayName(v string) *GetWorkitemTimeTypeListResponseBodyTimeType {
	s.DisplayName = &v
	return s
}

func (s *GetWorkitemTimeTypeListResponseBodyTimeType) SetIdentifier(v string) *GetWorkitemTimeTypeListResponseBodyTimeType {
	s.Identifier = &v
	return s
}

func (s *GetWorkitemTimeTypeListResponseBodyTimeType) SetName(v string) *GetWorkitemTimeTypeListResponseBodyTimeType {
	s.Name = &v
	return s
}

func (s *GetWorkitemTimeTypeListResponseBodyTimeType) SetPosition(v int64) *GetWorkitemTimeTypeListResponseBodyTimeType {
	s.Position = &v
	return s
}

type GetWorkitemTimeTypeListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkitemTimeTypeListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkitemTimeTypeListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkitemTimeTypeListResponse) GoString() string {
	return s.String()
}

func (s *GetWorkitemTimeTypeListResponse) SetHeaders(v map[string]*string) *GetWorkitemTimeTypeListResponse {
	s.Headers = v
	return s
}

func (s *GetWorkitemTimeTypeListResponse) SetStatusCode(v int32) *GetWorkitemTimeTypeListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkitemTimeTypeListResponse) SetBody(v *GetWorkitemTimeTypeListResponseBody) *GetWorkitemTimeTypeListResponse {
	s.Body = v
	return s
}

type GetWorkspaceResponseBody struct {
	// example:
	//
	// InvalidWorkspace.NotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// The workspace is not found.
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success   *bool                              `json:"success,omitempty" xml:"success,omitempty"`
	Workspace *GetWorkspaceResponseBodyWorkspace `json:"workspace,omitempty" xml:"workspace,omitempty" type:"Struct"`
}

func (s GetWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkspaceResponseBody) SetErrorCode(v string) *GetWorkspaceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetWorkspaceResponseBody) SetErrorMessage(v string) *GetWorkspaceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *GetWorkspaceResponseBody) SetRequestId(v string) *GetWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkspaceResponseBody) SetSuccess(v bool) *GetWorkspaceResponseBody {
	s.Success = &v
	return s
}

func (s *GetWorkspaceResponseBody) SetWorkspace(v *GetWorkspaceResponseBodyWorkspace) *GetWorkspaceResponseBody {
	s.Workspace = v
	return s
}

type GetWorkspaceResponseBodyWorkspace struct {
	// example:
	//
	// https://codeup.aliyun.com/demo/group/Codeup-Demo.git
	CodeUrl *string `json:"codeUrl,omitempty" xml:"codeUrl,omitempty"`
	// example:
	//
	// master
	CodeVersion *string `json:"codeVersion,omitempty" xml:"codeVersion,omitempty"`
	// example:
	//
	// 1628564442000
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 6ed82817-ab75-4563-865d-81e60dxxxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// Demo
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 2::4::60
	Spec *string `json:"spec,omitempty" xml:"spec,omitempty"`
	// example:
	//
	// SUCCESS
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// all-in-one
	Template *string `json:"template,omitempty" xml:"template,omitempty"`
	// example:
	//
	// 1470227819xxxxxx
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GetWorkspaceResponseBodyWorkspace) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceResponseBodyWorkspace) GoString() string {
	return s.String()
}

func (s *GetWorkspaceResponseBodyWorkspace) SetCodeUrl(v string) *GetWorkspaceResponseBodyWorkspace {
	s.CodeUrl = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetCodeVersion(v string) *GetWorkspaceResponseBodyWorkspace {
	s.CodeVersion = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetCreateTime(v string) *GetWorkspaceResponseBodyWorkspace {
	s.CreateTime = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetId(v string) *GetWorkspaceResponseBodyWorkspace {
	s.Id = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetName(v string) *GetWorkspaceResponseBodyWorkspace {
	s.Name = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetSpec(v string) *GetWorkspaceResponseBodyWorkspace {
	s.Spec = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetStatus(v string) *GetWorkspaceResponseBodyWorkspace {
	s.Status = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetTemplate(v string) *GetWorkspaceResponseBodyWorkspace {
	s.Template = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetUserId(v string) *GetWorkspaceResponseBodyWorkspace {
	s.UserId = &v
	return s
}

type GetWorkspaceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *GetWorkspaceResponse) SetHeaders(v map[string]*string) *GetWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *GetWorkspaceResponse) SetStatusCode(v int32) *GetWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkspaceResponse) SetBody(v *GetWorkspaceResponseBody) *GetWorkspaceResponse {
	s.Body = v
	return s
}

type JoinPipelineGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 11
	GroupId *int64 `json:"groupId,omitempty" xml:"groupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 122,122
	PipelineIds *string `json:"pipelineIds,omitempty" xml:"pipelineIds,omitempty"`
}

func (s JoinPipelineGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinPipelineGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinPipelineGroupRequest) SetGroupId(v int64) *JoinPipelineGroupRequest {
	s.GroupId = &v
	return s
}

func (s *JoinPipelineGroupRequest) SetPipelineIds(v string) *JoinPipelineGroupRequest {
	s.PipelineIds = &v
	return s
}

type JoinPipelineGroupResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s JoinPipelineGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinPipelineGroupResponseBody) GoString() string {
	return s.String()
}

func (s *JoinPipelineGroupResponseBody) SetErrorCode(v string) *JoinPipelineGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *JoinPipelineGroupResponseBody) SetErrorMessage(v string) *JoinPipelineGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *JoinPipelineGroupResponseBody) SetRequestId(v string) *JoinPipelineGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *JoinPipelineGroupResponseBody) SetSuccess(v bool) *JoinPipelineGroupResponseBody {
	s.Success = &v
	return s
}

type JoinPipelineGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *JoinPipelineGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s JoinPipelineGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinPipelineGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinPipelineGroupResponse) SetHeaders(v map[string]*string) *JoinPipelineGroupResponse {
	s.Headers = v
	return s
}

func (s *JoinPipelineGroupResponse) SetStatusCode(v int32) *JoinPipelineGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinPipelineGroupResponse) SetBody(v *JoinPipelineGroupResponseBody) *JoinPipelineGroupResponse {
	s.Body = v
	return s
}

type LinkMergeRequestLabelRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	LabelIds []*string `json:"labelIds,omitempty" xml:"labelIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	LocalId *int64 `json:"localId,omitempty" xml:"localId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s LinkMergeRequestLabelRequest) String() string {
	return tea.Prettify(s)
}

func (s LinkMergeRequestLabelRequest) GoString() string {
	return s.String()
}

func (s *LinkMergeRequestLabelRequest) SetAccessToken(v string) *LinkMergeRequestLabelRequest {
	s.AccessToken = &v
	return s
}

func (s *LinkMergeRequestLabelRequest) SetLabelIds(v []*string) *LinkMergeRequestLabelRequest {
	s.LabelIds = v
	return s
}

func (s *LinkMergeRequestLabelRequest) SetLocalId(v int64) *LinkMergeRequestLabelRequest {
	s.LocalId = &v
	return s
}

func (s *LinkMergeRequestLabelRequest) SetOrganizationId(v string) *LinkMergeRequestLabelRequest {
	s.OrganizationId = &v
	return s
}

func (s *LinkMergeRequestLabelRequest) SetRepositoryIdentity(v string) *LinkMergeRequestLabelRequest {
	s.RepositoryIdentity = &v
	return s
}

type LinkMergeRequestLabelResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *LinkMergeRequestLabelResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s LinkMergeRequestLabelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LinkMergeRequestLabelResponseBody) GoString() string {
	return s.String()
}

func (s *LinkMergeRequestLabelResponseBody) SetErrorCode(v string) *LinkMergeRequestLabelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *LinkMergeRequestLabelResponseBody) SetErrorMessage(v string) *LinkMergeRequestLabelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *LinkMergeRequestLabelResponseBody) SetRequestId(v string) *LinkMergeRequestLabelResponseBody {
	s.RequestId = &v
	return s
}

func (s *LinkMergeRequestLabelResponseBody) SetResult(v *LinkMergeRequestLabelResponseBodyResult) *LinkMergeRequestLabelResponseBody {
	s.Result = v
	return s
}

func (s *LinkMergeRequestLabelResponseBody) SetSuccess(v bool) *LinkMergeRequestLabelResponseBody {
	s.Success = &v
	return s
}

type LinkMergeRequestLabelResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s LinkMergeRequestLabelResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s LinkMergeRequestLabelResponseBodyResult) GoString() string {
	return s.String()
}

func (s *LinkMergeRequestLabelResponseBodyResult) SetResult(v bool) *LinkMergeRequestLabelResponseBodyResult {
	s.Result = &v
	return s
}

type LinkMergeRequestLabelResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *LinkMergeRequestLabelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s LinkMergeRequestLabelResponse) String() string {
	return tea.Prettify(s)
}

func (s LinkMergeRequestLabelResponse) GoString() string {
	return s.String()
}

func (s *LinkMergeRequestLabelResponse) SetHeaders(v map[string]*string) *LinkMergeRequestLabelResponse {
	s.Headers = v
	return s
}

func (s *LinkMergeRequestLabelResponse) SetStatusCode(v int32) *LinkMergeRequestLabelResponse {
	s.StatusCode = &v
	return s
}

func (s *LinkMergeRequestLabelResponse) SetBody(v *LinkMergeRequestLabelResponseBody) *LinkMergeRequestLabelResponse {
	s.Body = v
	return s
}

type ListAllReleaseWorkflowsRequest struct {
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListAllReleaseWorkflowsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAllReleaseWorkflowsRequest) GoString() string {
	return s.String()
}

func (s *ListAllReleaseWorkflowsRequest) SetOrganizationId(v string) *ListAllReleaseWorkflowsRequest {
	s.OrganizationId = &v
	return s
}

type ListAllReleaseWorkflowsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       []*ListAllReleaseWorkflowsResponseBody `json:"body,omitempty" xml:"body,omitempty" type:"Repeated"`
}

func (s ListAllReleaseWorkflowsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAllReleaseWorkflowsResponse) GoString() string {
	return s.String()
}

func (s *ListAllReleaseWorkflowsResponse) SetHeaders(v map[string]*string) *ListAllReleaseWorkflowsResponse {
	s.Headers = v
	return s
}

func (s *ListAllReleaseWorkflowsResponse) SetStatusCode(v int32) *ListAllReleaseWorkflowsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponse) SetBody(v []*ListAllReleaseWorkflowsResponseBody) *ListAllReleaseWorkflowsResponse {
	s.Body = v
	return s
}

type ListAllReleaseWorkflowsResponseBody struct {
	// example:
	//
	// testApp
	AppName *string `json:"appName,omitempty" xml:"appName,omitempty"`
	// example:
	//
	// ce51b31b996246ecaf874736838360b2
	Sn   *string `json:"sn,omitempty" xml:"sn,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 1
	Order         *string                                             `json:"order,omitempty" xml:"order,omitempty"`
	ReleaseStages []*ListAllReleaseWorkflowsResponseBodyReleaseStages `json:"releaseStages,omitempty" xml:"releaseStages,omitempty" type:"Repeated"`
	// example:
	//
	// ""
	Note *string `json:"note,omitempty" xml:"note,omitempty"`
}

func (s ListAllReleaseWorkflowsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAllReleaseWorkflowsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAllReleaseWorkflowsResponseBody) SetAppName(v string) *ListAllReleaseWorkflowsResponseBody {
	s.AppName = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBody) SetSn(v string) *ListAllReleaseWorkflowsResponseBody {
	s.Sn = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBody) SetName(v string) *ListAllReleaseWorkflowsResponseBody {
	s.Name = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBody) SetOrder(v string) *ListAllReleaseWorkflowsResponseBody {
	s.Order = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBody) SetReleaseStages(v []*ListAllReleaseWorkflowsResponseBodyReleaseStages) *ListAllReleaseWorkflowsResponseBody {
	s.ReleaseStages = v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBody) SetNote(v string) *ListAllReleaseWorkflowsResponseBody {
	s.Note = &v
	return s
}

type ListAllReleaseWorkflowsResponseBodyReleaseStages struct {
	// example:
	//
	// testApp
	AppName *string `json:"appName,omitempty" xml:"appName,omitempty"`
	Name    *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 5aa8cc67e75e41bf9dddeb708775bcc3
	Sn *string `json:"sn,omitempty" xml:"sn,omitempty"`
	// example:
	//
	// ce51b31b996246ecaf874736838360b2
	ReleaseWorkflowSn *string `json:"releaseWorkflowSn,omitempty" xml:"releaseWorkflowSn,omitempty"`
	// example:
	//
	// 1
	Order          *string                                                           `json:"order,omitempty" xml:"order,omitempty"`
	VariableGroups []*ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups `json:"variableGroups,omitempty" xml:"variableGroups,omitempty" type:"Repeated"`
}

func (s ListAllReleaseWorkflowsResponseBodyReleaseStages) String() string {
	return tea.Prettify(s)
}

func (s ListAllReleaseWorkflowsResponseBodyReleaseStages) GoString() string {
	return s.String()
}

func (s *ListAllReleaseWorkflowsResponseBodyReleaseStages) SetAppName(v string) *ListAllReleaseWorkflowsResponseBodyReleaseStages {
	s.AppName = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBodyReleaseStages) SetName(v string) *ListAllReleaseWorkflowsResponseBodyReleaseStages {
	s.Name = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBodyReleaseStages) SetSn(v string) *ListAllReleaseWorkflowsResponseBodyReleaseStages {
	s.Sn = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBodyReleaseStages) SetReleaseWorkflowSn(v string) *ListAllReleaseWorkflowsResponseBodyReleaseStages {
	s.ReleaseWorkflowSn = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBodyReleaseStages) SetOrder(v string) *ListAllReleaseWorkflowsResponseBodyReleaseStages {
	s.Order = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBodyReleaseStages) SetVariableGroups(v []*ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups) *ListAllReleaseWorkflowsResponseBodyReleaseStages {
	s.VariableGroups = v
	return s
}

type ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups struct {
	// example:
	//
	// dev
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	// example:
	//
	// APP
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups) String() string {
	return tea.Prettify(s)
}

func (s ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups) GoString() string {
	return s.String()
}

func (s *ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups) SetName(v string) *ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups {
	s.Name = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups) SetDisplayName(v string) *ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups {
	s.DisplayName = &v
	return s
}

func (s *ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups) SetType(v string) *ListAllReleaseWorkflowsResponseBodyReleaseStagesVariableGroups {
	s.Type = &v
	return s
}

type ListAppReleaseStageExecutionIntegratedMetadataRequest struct {
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListAppReleaseStageExecutionIntegratedMetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppReleaseStageExecutionIntegratedMetadataRequest) GoString() string {
	return s.String()
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataRequest) SetOrganizationId(v string) *ListAppReleaseStageExecutionIntegratedMetadataRequest {
	s.OrganizationId = &v
	return s
}

type ListAppReleaseStageExecutionIntegratedMetadataResponse struct {
	Headers    map[string]*string                                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       []*ListAppReleaseStageExecutionIntegratedMetadataResponseBody `json:"body,omitempty" xml:"body,omitempty" type:"Repeated"`
}

func (s ListAppReleaseStageExecutionIntegratedMetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppReleaseStageExecutionIntegratedMetadataResponse) GoString() string {
	return s.String()
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponse) SetHeaders(v map[string]*string) *ListAppReleaseStageExecutionIntegratedMetadataResponse {
	s.Headers = v
	return s
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponse) SetStatusCode(v int32) *ListAppReleaseStageExecutionIntegratedMetadataResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponse) SetBody(v []*ListAppReleaseStageExecutionIntegratedMetadataResponseBody) *ListAppReleaseStageExecutionIntegratedMetadataResponse {
	s.Body = v
	return s
}

type ListAppReleaseStageExecutionIntegratedMetadataResponseBody struct {
	// example:
	//
	// release/20240625-152603220321211_release_3252057_1
	ReleaseBranch *string `json:"releaseBranch,omitempty" xml:"releaseBranch,omitempty"`
	// example:
	//
	// a66cfa8c6869b96bb7d111ba2144c9c764d556b7
	ReleaseRevision *string `json:"releaseRevision,omitempty" xml:"releaseRevision,omitempty"`
	// example:
	//
	// https://codeup.aliyun.com/60d54f3daccf2bbd6659f3ad/auto-test.git
	RepoUrl *string `json:"repoUrl,omitempty" xml:"repoUrl,omitempty"`
	// example:
	//
	// CODEUP
	RepoType       *string                                                                     `json:"repoType,omitempty" xml:"repoType,omitempty"`
	ChangeRequests []*ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests `json:"changeRequests,omitempty" xml:"changeRequests,omitempty" type:"Repeated"`
}

func (s ListAppReleaseStageExecutionIntegratedMetadataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAppReleaseStageExecutionIntegratedMetadataResponseBody) GoString() string {
	return s.String()
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponseBody) SetReleaseBranch(v string) *ListAppReleaseStageExecutionIntegratedMetadataResponseBody {
	s.ReleaseBranch = &v
	return s
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponseBody) SetReleaseRevision(v string) *ListAppReleaseStageExecutionIntegratedMetadataResponseBody {
	s.ReleaseRevision = &v
	return s
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponseBody) SetRepoUrl(v string) *ListAppReleaseStageExecutionIntegratedMetadataResponseBody {
	s.RepoUrl = &v
	return s
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponseBody) SetRepoType(v string) *ListAppReleaseStageExecutionIntegratedMetadataResponseBody {
	s.RepoType = &v
	return s
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponseBody) SetChangeRequests(v []*ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests) *ListAppReleaseStageExecutionIntegratedMetadataResponseBody {
	s.ChangeRequests = v
	return s
}

type ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests struct {
	// example:
	//
	// fcd37726a6f84c60b7eb9c5856007c2f
	Sn   *string `json:"sn,omitempty" xml:"sn,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// feature/20240625
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// example:
	//
	// a66cfa8c6869b96bb7d111ba2144c9c764d556b7
	CommitId *string `json:"commitId,omitempty" xml:"commitId,omitempty"`
	// example:
	//
	// 262579140573491041
	OwnerAccountId *string `json:"ownerAccountId,omitempty" xml:"ownerAccountId,omitempty"`
}

func (s ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests) String() string {
	return tea.Prettify(s)
}

func (s ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests) GoString() string {
	return s.String()
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests) SetSn(v string) *ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests {
	s.Sn = &v
	return s
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests) SetName(v string) *ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests {
	s.Name = &v
	return s
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests) SetBranchName(v string) *ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests {
	s.BranchName = &v
	return s
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests) SetCommitId(v string) *ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests {
	s.CommitId = &v
	return s
}

func (s *ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests) SetOwnerAccountId(v string) *ListAppReleaseStageExecutionIntegratedMetadataResponseBodyChangeRequests {
	s.OwnerAccountId = &v
	return s
}

type ListAppReleaseStageExecutionsRequest struct {
	// example:
	//
	// ""
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// gmtCreate
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int32 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// keyset
	Pagination *string `json:"pagination,omitempty" xml:"pagination,omitempty"`
	// example:
	//
	// 20
	PerPage *int32 `json:"perPage,omitempty" xml:"perPage,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
}

func (s ListAppReleaseStageExecutionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAppReleaseStageExecutionsRequest) GoString() string {
	return s.String()
}

func (s *ListAppReleaseStageExecutionsRequest) SetNextToken(v string) *ListAppReleaseStageExecutionsRequest {
	s.NextToken = &v
	return s
}

func (s *ListAppReleaseStageExecutionsRequest) SetOrderBy(v string) *ListAppReleaseStageExecutionsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListAppReleaseStageExecutionsRequest) SetOrganizationId(v string) *ListAppReleaseStageExecutionsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListAppReleaseStageExecutionsRequest) SetPage(v int32) *ListAppReleaseStageExecutionsRequest {
	s.Page = &v
	return s
}

func (s *ListAppReleaseStageExecutionsRequest) SetPagination(v string) *ListAppReleaseStageExecutionsRequest {
	s.Pagination = &v
	return s
}

func (s *ListAppReleaseStageExecutionsRequest) SetPerPage(v int32) *ListAppReleaseStageExecutionsRequest {
	s.PerPage = &v
	return s
}

func (s *ListAppReleaseStageExecutionsRequest) SetSort(v string) *ListAppReleaseStageExecutionsRequest {
	s.Sort = &v
	return s
}

type ListAppReleaseStageExecutionsResponseBody struct {
	// example:
	//
	// 1
	Current *int64                                           `json:"current,omitempty" xml:"current,omitempty"`
	Data    []*ListAppReleaseStageExecutionsResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// vxc2341gfssad12
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// 1
	Pages *int64 `json:"pages,omitempty" xml:"pages,omitempty"`
	// example:
	//
	// 20
	PerPage *int64 `json:"perPage,omitempty" xml:"perPage,omitempty"`
	// example:
	//
	// 2
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListAppReleaseStageExecutionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAppReleaseStageExecutionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAppReleaseStageExecutionsResponseBody) SetCurrent(v int64) *ListAppReleaseStageExecutionsResponseBody {
	s.Current = &v
	return s
}

func (s *ListAppReleaseStageExecutionsResponseBody) SetData(v []*ListAppReleaseStageExecutionsResponseBodyData) *ListAppReleaseStageExecutionsResponseBody {
	s.Data = v
	return s
}

func (s *ListAppReleaseStageExecutionsResponseBody) SetNextToken(v string) *ListAppReleaseStageExecutionsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListAppReleaseStageExecutionsResponseBody) SetPages(v int64) *ListAppReleaseStageExecutionsResponseBody {
	s.Pages = &v
	return s
}

func (s *ListAppReleaseStageExecutionsResponseBody) SetPerPage(v int64) *ListAppReleaseStageExecutionsResponseBody {
	s.PerPage = &v
	return s
}

func (s *ListAppReleaseStageExecutionsResponseBody) SetTotal(v int64) *ListAppReleaseStageExecutionsResponseBody {
	s.Total = &v
	return s
}

type ListAppReleaseStageExecutionsResponseBodyData struct {
	// example:
	//
	// 2024-06-25T07:26:18.000+00:00
	EndTime *string `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 1
	Number *string `json:"number,omitempty" xml:"number,omitempty"`
	// example:
	//
	// 2024-06-25T07:25:54.000+00:00
	StartTime *string `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// example:
	//
	// SUCCESS
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// MANUAL
	TriggerMode *string `json:"triggerMode,omitempty" xml:"triggerMode,omitempty"`
}

func (s ListAppReleaseStageExecutionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAppReleaseStageExecutionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAppReleaseStageExecutionsResponseBodyData) SetEndTime(v string) *ListAppReleaseStageExecutionsResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *ListAppReleaseStageExecutionsResponseBodyData) SetNumber(v string) *ListAppReleaseStageExecutionsResponseBodyData {
	s.Number = &v
	return s
}

func (s *ListAppReleaseStageExecutionsResponseBodyData) SetStartTime(v string) *ListAppReleaseStageExecutionsResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *ListAppReleaseStageExecutionsResponseBodyData) SetState(v string) *ListAppReleaseStageExecutionsResponseBodyData {
	s.State = &v
	return s
}

func (s *ListAppReleaseStageExecutionsResponseBodyData) SetTriggerMode(v string) *ListAppReleaseStageExecutionsResponseBodyData {
	s.TriggerMode = &v
	return s
}

type ListAppReleaseStageExecutionsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAppReleaseStageExecutionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAppReleaseStageExecutionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAppReleaseStageExecutionsResponse) GoString() string {
	return s.String()
}

func (s *ListAppReleaseStageExecutionsResponse) SetHeaders(v map[string]*string) *ListAppReleaseStageExecutionsResponse {
	s.Headers = v
	return s
}

func (s *ListAppReleaseStageExecutionsResponse) SetStatusCode(v int32) *ListAppReleaseStageExecutionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAppReleaseStageExecutionsResponse) SetBody(v *ListAppReleaseStageExecutionsResponseBody) *ListAppReleaseStageExecutionsResponse {
	s.Body = v
	return s
}

type ListApplicationMembersRequest struct {
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListApplicationMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationMembersRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationMembersRequest) SetOrganizationId(v string) *ListApplicationMembersRequest {
	s.OrganizationId = &v
	return s
}

type ListApplicationMembersResponseBody struct {
	// example:
	//
	// 1
	Current *int64 `json:"current,omitempty" xml:"current,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// 10
	Pages   *int64                                       `json:"pages,omitempty" xml:"pages,omitempty"`
	Records []*ListApplicationMembersResponseBodyRecords `json:"records,omitempty" xml:"records,omitempty" type:"Repeated"`
	// example:
	//
	// FC93CE1A-8D7A-13A9-8306-7465DE2E5C0F
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 100
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListApplicationMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationMembersResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplicationMembersResponseBody) SetCurrent(v int64) *ListApplicationMembersResponseBody {
	s.Current = &v
	return s
}

func (s *ListApplicationMembersResponseBody) SetPageSize(v int64) *ListApplicationMembersResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListApplicationMembersResponseBody) SetPages(v int64) *ListApplicationMembersResponseBody {
	s.Pages = &v
	return s
}

func (s *ListApplicationMembersResponseBody) SetRecords(v []*ListApplicationMembersResponseBodyRecords) *ListApplicationMembersResponseBody {
	s.Records = v
	return s
}

func (s *ListApplicationMembersResponseBody) SetRequestId(v string) *ListApplicationMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListApplicationMembersResponseBody) SetTotal(v int64) *ListApplicationMembersResponseBody {
	s.Total = &v
	return s
}

type ListApplicationMembersResponseBodyRecords struct {
	// example:
	//
	// http://
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// 成语描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 成员1
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	// example:
	//
	// 1332695887xxxxxx
	Id       *string                                              `json:"id,omitempty" xml:"id,omitempty"`
	RoleList []*ListApplicationMembersResponseBodyRecordsRoleList `json:"roleList,omitempty" xml:"roleList,omitempty" type:"Repeated"`
	// example:
	//
	// User
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListApplicationMembersResponseBodyRecords) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationMembersResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *ListApplicationMembersResponseBodyRecords) SetAvatar(v string) *ListApplicationMembersResponseBodyRecords {
	s.Avatar = &v
	return s
}

func (s *ListApplicationMembersResponseBodyRecords) SetDescription(v string) *ListApplicationMembersResponseBodyRecords {
	s.Description = &v
	return s
}

func (s *ListApplicationMembersResponseBodyRecords) SetDisplayName(v string) *ListApplicationMembersResponseBodyRecords {
	s.DisplayName = &v
	return s
}

func (s *ListApplicationMembersResponseBodyRecords) SetId(v string) *ListApplicationMembersResponseBodyRecords {
	s.Id = &v
	return s
}

func (s *ListApplicationMembersResponseBodyRecords) SetRoleList(v []*ListApplicationMembersResponseBodyRecordsRoleList) *ListApplicationMembersResponseBodyRecords {
	s.RoleList = v
	return s
}

func (s *ListApplicationMembersResponseBodyRecords) SetType(v string) *ListApplicationMembersResponseBodyRecords {
	s.Type = &v
	return s
}

type ListApplicationMembersResponseBodyRecordsRoleList struct {
	// example:
	//
	// 开发者
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	// example:
	//
	// developer
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListApplicationMembersResponseBodyRecordsRoleList) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationMembersResponseBodyRecordsRoleList) GoString() string {
	return s.String()
}

func (s *ListApplicationMembersResponseBodyRecordsRoleList) SetDisplayName(v string) *ListApplicationMembersResponseBodyRecordsRoleList {
	s.DisplayName = &v
	return s
}

func (s *ListApplicationMembersResponseBodyRecordsRoleList) SetName(v string) *ListApplicationMembersResponseBodyRecordsRoleList {
	s.Name = &v
	return s
}

type ListApplicationMembersResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListApplicationMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListApplicationMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationMembersResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationMembersResponse) SetHeaders(v map[string]*string) *ListApplicationMembersResponse {
	s.Headers = v
	return s
}

func (s *ListApplicationMembersResponse) SetStatusCode(v int32) *ListApplicationMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListApplicationMembersResponse) SetBody(v *ListApplicationMembersResponseBody) *ListApplicationMembersResponse {
	s.Body = v
	return s
}

type ListApplicationsRequest struct {
	// example:
	//
	// vxc2341gfssad12
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// asc
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// keyset
	Pagination *string `json:"pagination,omitempty" xml:"pagination,omitempty"`
	// example:
	//
	// 20
	PerPage *int32 `json:"perPage,omitempty" xml:"perPage,omitempty"`
	// example:
	//
	// id
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
}

func (s ListApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationsRequest) SetNextToken(v string) *ListApplicationsRequest {
	s.NextToken = &v
	return s
}

func (s *ListApplicationsRequest) SetOrderBy(v string) *ListApplicationsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListApplicationsRequest) SetOrganizationId(v string) *ListApplicationsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListApplicationsRequest) SetPagination(v string) *ListApplicationsRequest {
	s.Pagination = &v
	return s
}

func (s *ListApplicationsRequest) SetPerPage(v int32) *ListApplicationsRequest {
	s.PerPage = &v
	return s
}

func (s *ListApplicationsRequest) SetSort(v string) *ListApplicationsRequest {
	s.Sort = &v
	return s
}

type ListApplicationsResponseBody struct {
	Data []*ListApplicationsResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// vxc2341gfssad12
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// FC93CE1A-8D7A-13A9-8306-7465DE2E5C0F
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s ListApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBody) SetData(v []*ListApplicationsResponseBodyData) *ListApplicationsResponseBody {
	s.Data = v
	return s
}

func (s *ListApplicationsResponseBody) SetNextToken(v string) *ListApplicationsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListApplicationsResponseBody) SetRequestId(v string) *ListApplicationsResponseBody {
	s.RequestId = &v
	return s
}

type ListApplicationsResponseBodyData struct {
	// example:
	//
	// 1332695887xxxxxx
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 2024-01-01T00:00:00.000+00:00
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// testApp
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListApplicationsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyData) SetCreatorAccountId(v string) *ListApplicationsResponseBodyData {
	s.CreatorAccountId = &v
	return s
}

func (s *ListApplicationsResponseBodyData) SetDescription(v string) *ListApplicationsResponseBodyData {
	s.Description = &v
	return s
}

func (s *ListApplicationsResponseBodyData) SetGmtCreate(v string) *ListApplicationsResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *ListApplicationsResponseBodyData) SetName(v string) *ListApplicationsResponseBodyData {
	s.Name = &v
	return s
}

type ListApplicationsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponse) SetHeaders(v map[string]*string) *ListApplicationsResponse {
	s.Headers = v
	return s
}

func (s *ListApplicationsResponse) SetStatusCode(v int32) *ListApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListApplicationsResponse) SetBody(v *ListApplicationsResponseBody) *ListApplicationsResponse {
	s.Body = v
	return s
}

type ListChangeRequestWorkflowExecutionsRequest struct {
	// example:
	//
	// id
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 20
	PerPage *int64 `json:"perPage,omitempty" xml:"perPage,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e173f3c11db5445eb426ca33c92207c8
	ReleaseStageSn *string `json:"releaseStageSn,omitempty" xml:"releaseStageSn,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ce51b31b996246ecaf874736838360b2
	ReleaseWorkflowSn *string `json:"releaseWorkflowSn,omitempty" xml:"releaseWorkflowSn,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
}

func (s ListChangeRequestWorkflowExecutionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListChangeRequestWorkflowExecutionsRequest) GoString() string {
	return s.String()
}

func (s *ListChangeRequestWorkflowExecutionsRequest) SetOrderBy(v string) *ListChangeRequestWorkflowExecutionsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsRequest) SetOrganizationId(v string) *ListChangeRequestWorkflowExecutionsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsRequest) SetPage(v int64) *ListChangeRequestWorkflowExecutionsRequest {
	s.Page = &v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsRequest) SetPerPage(v int64) *ListChangeRequestWorkflowExecutionsRequest {
	s.PerPage = &v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsRequest) SetReleaseStageSn(v string) *ListChangeRequestWorkflowExecutionsRequest {
	s.ReleaseStageSn = &v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsRequest) SetReleaseWorkflowSn(v string) *ListChangeRequestWorkflowExecutionsRequest {
	s.ReleaseWorkflowSn = &v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsRequest) SetSort(v string) *ListChangeRequestWorkflowExecutionsRequest {
	s.Sort = &v
	return s
}

type ListChangeRequestWorkflowExecutionsResponseBody struct {
	// example:
	//
	// 1
	Current *int64 `json:"current,omitempty" xml:"current,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// 10
	Pages   *int64        `json:"pages,omitempty" xml:"pages,omitempty"`
	Records []interface{} `json:"records,omitempty" xml:"records,omitempty" type:"Repeated"`
	// example:
	//
	// 200
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListChangeRequestWorkflowExecutionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListChangeRequestWorkflowExecutionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListChangeRequestWorkflowExecutionsResponseBody) SetCurrent(v int64) *ListChangeRequestWorkflowExecutionsResponseBody {
	s.Current = &v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsResponseBody) SetPageSize(v int64) *ListChangeRequestWorkflowExecutionsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsResponseBody) SetPages(v int64) *ListChangeRequestWorkflowExecutionsResponseBody {
	s.Pages = &v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsResponseBody) SetRecords(v []interface{}) *ListChangeRequestWorkflowExecutionsResponseBody {
	s.Records = v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsResponseBody) SetTotal(v int64) *ListChangeRequestWorkflowExecutionsResponseBody {
	s.Total = &v
	return s
}

type ListChangeRequestWorkflowExecutionsResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListChangeRequestWorkflowExecutionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListChangeRequestWorkflowExecutionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListChangeRequestWorkflowExecutionsResponse) GoString() string {
	return s.String()
}

func (s *ListChangeRequestWorkflowExecutionsResponse) SetHeaders(v map[string]*string) *ListChangeRequestWorkflowExecutionsResponse {
	s.Headers = v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsResponse) SetStatusCode(v int32) *ListChangeRequestWorkflowExecutionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListChangeRequestWorkflowExecutionsResponse) SetBody(v *ListChangeRequestWorkflowExecutionsResponseBody) *ListChangeRequestWorkflowExecutionsResponse {
	s.Body = v
	return s
}

type ListChangeRequestsRequest struct {
	AppNameList []*string `json:"appNameList,omitempty" xml:"appNameList,omitempty" type:"Repeated"`
	// example:
	//
	// change1
	DisplayNameKeyword *string `json:"displayNameKeyword,omitempty" xml:"displayNameKeyword,omitempty"`
	// example:
	//
	// 4dc150725770510122396e2476
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// id
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string   `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	OwnerIdList    []*string `json:"ownerIdList,omitempty" xml:"ownerIdList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Page *int32 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// keyset
	Pagination *string `json:"pagination,omitempty" xml:"pagination,omitempty"`
	// example:
	//
	// 20
	PerPage *int32 `json:"perPage,omitempty" xml:"perPage,omitempty"`
	// example:
	//
	// desc
	Sort      *string   `json:"sort,omitempty" xml:"sort,omitempty"`
	StateList []*string `json:"stateList,omitempty" xml:"stateList,omitempty" type:"Repeated"`
}

func (s ListChangeRequestsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListChangeRequestsRequest) GoString() string {
	return s.String()
}

func (s *ListChangeRequestsRequest) SetAppNameList(v []*string) *ListChangeRequestsRequest {
	s.AppNameList = v
	return s
}

func (s *ListChangeRequestsRequest) SetDisplayNameKeyword(v string) *ListChangeRequestsRequest {
	s.DisplayNameKeyword = &v
	return s
}

func (s *ListChangeRequestsRequest) SetNextToken(v string) *ListChangeRequestsRequest {
	s.NextToken = &v
	return s
}

func (s *ListChangeRequestsRequest) SetOrderBy(v string) *ListChangeRequestsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListChangeRequestsRequest) SetOrganizationId(v string) *ListChangeRequestsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListChangeRequestsRequest) SetOwnerIdList(v []*string) *ListChangeRequestsRequest {
	s.OwnerIdList = v
	return s
}

func (s *ListChangeRequestsRequest) SetPage(v int32) *ListChangeRequestsRequest {
	s.Page = &v
	return s
}

func (s *ListChangeRequestsRequest) SetPagination(v string) *ListChangeRequestsRequest {
	s.Pagination = &v
	return s
}

func (s *ListChangeRequestsRequest) SetPerPage(v int32) *ListChangeRequestsRequest {
	s.PerPage = &v
	return s
}

func (s *ListChangeRequestsRequest) SetSort(v string) *ListChangeRequestsRequest {
	s.Sort = &v
	return s
}

func (s *ListChangeRequestsRequest) SetStateList(v []*string) *ListChangeRequestsRequest {
	s.StateList = v
	return s
}

type ListChangeRequestsShrinkRequest struct {
	AppNameListShrink *string `json:"appNameList,omitempty" xml:"appNameList,omitempty"`
	// example:
	//
	// change1
	DisplayNameKeyword *string `json:"displayNameKeyword,omitempty" xml:"displayNameKeyword,omitempty"`
	// example:
	//
	// 4dc150725770510122396e2476
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// id
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId    *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	OwnerIdListShrink *string `json:"ownerIdList,omitempty" xml:"ownerIdList,omitempty"`
	// example:
	//
	// 1
	Page *int32 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// keyset
	Pagination *string `json:"pagination,omitempty" xml:"pagination,omitempty"`
	// example:
	//
	// 20
	PerPage *int32 `json:"perPage,omitempty" xml:"perPage,omitempty"`
	// example:
	//
	// desc
	Sort            *string `json:"sort,omitempty" xml:"sort,omitempty"`
	StateListShrink *string `json:"stateList,omitempty" xml:"stateList,omitempty"`
}

func (s ListChangeRequestsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListChangeRequestsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListChangeRequestsShrinkRequest) SetAppNameListShrink(v string) *ListChangeRequestsShrinkRequest {
	s.AppNameListShrink = &v
	return s
}

func (s *ListChangeRequestsShrinkRequest) SetDisplayNameKeyword(v string) *ListChangeRequestsShrinkRequest {
	s.DisplayNameKeyword = &v
	return s
}

func (s *ListChangeRequestsShrinkRequest) SetNextToken(v string) *ListChangeRequestsShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListChangeRequestsShrinkRequest) SetOrderBy(v string) *ListChangeRequestsShrinkRequest {
	s.OrderBy = &v
	return s
}

func (s *ListChangeRequestsShrinkRequest) SetOrganizationId(v string) *ListChangeRequestsShrinkRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListChangeRequestsShrinkRequest) SetOwnerIdListShrink(v string) *ListChangeRequestsShrinkRequest {
	s.OwnerIdListShrink = &v
	return s
}

func (s *ListChangeRequestsShrinkRequest) SetPage(v int32) *ListChangeRequestsShrinkRequest {
	s.Page = &v
	return s
}

func (s *ListChangeRequestsShrinkRequest) SetPagination(v string) *ListChangeRequestsShrinkRequest {
	s.Pagination = &v
	return s
}

func (s *ListChangeRequestsShrinkRequest) SetPerPage(v int32) *ListChangeRequestsShrinkRequest {
	s.PerPage = &v
	return s
}

func (s *ListChangeRequestsShrinkRequest) SetSort(v string) *ListChangeRequestsShrinkRequest {
	s.Sort = &v
	return s
}

func (s *ListChangeRequestsShrinkRequest) SetStateListShrink(v string) *ListChangeRequestsShrinkRequest {
	s.StateListShrink = &v
	return s
}

type ListChangeRequestsResponseBody struct {
	// example:
	//
	// 1
	Current *int64        `json:"current,omitempty" xml:"current,omitempty"`
	Data    []interface{} `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// eb13ac6049d3d78159d60f84af
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// 5
	Pages *int64 `json:"pages,omitempty" xml:"pages,omitempty"`
	// example:
	//
	// 20
	PerPage *int64 `json:"perPage,omitempty" xml:"perPage,omitempty"`
	// example:
	//
	// 100
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListChangeRequestsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListChangeRequestsResponseBody) GoString() string {
	return s.String()
}

func (s *ListChangeRequestsResponseBody) SetCurrent(v int64) *ListChangeRequestsResponseBody {
	s.Current = &v
	return s
}

func (s *ListChangeRequestsResponseBody) SetData(v []interface{}) *ListChangeRequestsResponseBody {
	s.Data = v
	return s
}

func (s *ListChangeRequestsResponseBody) SetNextToken(v string) *ListChangeRequestsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListChangeRequestsResponseBody) SetPages(v int64) *ListChangeRequestsResponseBody {
	s.Pages = &v
	return s
}

func (s *ListChangeRequestsResponseBody) SetPerPage(v int64) *ListChangeRequestsResponseBody {
	s.PerPage = &v
	return s
}

func (s *ListChangeRequestsResponseBody) SetTotal(v int64) *ListChangeRequestsResponseBody {
	s.Total = &v
	return s
}

type ListChangeRequestsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListChangeRequestsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListChangeRequestsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListChangeRequestsResponse) GoString() string {
	return s.String()
}

func (s *ListChangeRequestsResponse) SetHeaders(v map[string]*string) *ListChangeRequestsResponse {
	s.Headers = v
	return s
}

func (s *ListChangeRequestsResponse) SetStatusCode(v int32) *ListChangeRequestsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListChangeRequestsResponse) SetBody(v *ListChangeRequestsResponseBody) *ListChangeRequestsResponse {
	s.Body = v
	return s
}

type ListCheckRunsRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 40f4ccfe019cdd4a62d4acb0c57130106fc7e1be
	Ref *string `json:"ref,omitempty" xml:"ref,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s ListCheckRunsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCheckRunsRequest) GoString() string {
	return s.String()
}

func (s *ListCheckRunsRequest) SetAccessToken(v string) *ListCheckRunsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListCheckRunsRequest) SetOrganizationId(v string) *ListCheckRunsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListCheckRunsRequest) SetPage(v int64) *ListCheckRunsRequest {
	s.Page = &v
	return s
}

func (s *ListCheckRunsRequest) SetPageSize(v int64) *ListCheckRunsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCheckRunsRequest) SetRef(v string) *ListCheckRunsRequest {
	s.Ref = &v
	return s
}

func (s *ListCheckRunsRequest) SetRepositoryIdentity(v string) *ListCheckRunsRequest {
	s.RepositoryIdentity = &v
	return s
}

type ListCheckRunsResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListCheckRunsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListCheckRunsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCheckRunsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCheckRunsResponseBody) SetErrorCode(v string) *ListCheckRunsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListCheckRunsResponseBody) SetErrorMessage(v string) *ListCheckRunsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListCheckRunsResponseBody) SetRequestId(v string) *ListCheckRunsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCheckRunsResponseBody) SetResult(v []*ListCheckRunsResponseBodyResult) *ListCheckRunsResponseBody {
	s.Result = v
	return s
}

func (s *ListCheckRunsResponseBody) SetSuccess(v bool) *ListCheckRunsResponseBody {
	s.Success = &v
	return s
}

type ListCheckRunsResponseBodyResult struct {
	Annotations []*ListCheckRunsResponseBodyResultAnnotations `json:"annotations,omitempty" xml:"annotations,omitempty" type:"Repeated"`
	CheckSuite  *ListCheckRunsResponseBodyResultCheckSuite    `json:"checkSuite,omitempty" xml:"checkSuite,omitempty" type:"Struct"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	CompletedAt *string `json:"completedAt,omitempty" xml:"completedAt,omitempty"`
	// example:
	//
	// success
	Conclusion *string `json:"conclusion,omitempty" xml:"conclusion,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// xxx
	DetailsUrl *string `json:"detailsUrl,omitempty" xml:"detailsUrl,omitempty"`
	// example:
	//
	// 42
	ExternalId *string `json:"externalId,omitempty" xml:"externalId,omitempty"`
	// example:
	//
	// 40f4ccfe019cdd4a62d4acb0c57130106fc7e1be
	HeadSha *string `json:"headSha,omitempty" xml:"headSha,omitempty"`
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// my-check-ci
	Name   *string                                `json:"name,omitempty" xml:"name,omitempty"`
	Output *ListCheckRunsResponseBodyResultOutput `json:"output,omitempty" xml:"output,omitempty" type:"Struct"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	StartedAt *string `json:"startedAt,omitempty" xml:"startedAt,omitempty"`
	// example:
	//
	// completed
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	UpdatedAt *string                                `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	Writer    *ListCheckRunsResponseBodyResultWriter `json:"writer,omitempty" xml:"writer,omitempty" type:"Struct"`
}

func (s ListCheckRunsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListCheckRunsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListCheckRunsResponseBodyResult) SetAnnotations(v []*ListCheckRunsResponseBodyResultAnnotations) *ListCheckRunsResponseBodyResult {
	s.Annotations = v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetCheckSuite(v *ListCheckRunsResponseBodyResultCheckSuite) *ListCheckRunsResponseBodyResult {
	s.CheckSuite = v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetCompletedAt(v string) *ListCheckRunsResponseBodyResult {
	s.CompletedAt = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetConclusion(v string) *ListCheckRunsResponseBodyResult {
	s.Conclusion = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetCreatedAt(v string) *ListCheckRunsResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetDetailsUrl(v string) *ListCheckRunsResponseBodyResult {
	s.DetailsUrl = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetExternalId(v string) *ListCheckRunsResponseBodyResult {
	s.ExternalId = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetHeadSha(v string) *ListCheckRunsResponseBodyResult {
	s.HeadSha = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetId(v int64) *ListCheckRunsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetName(v string) *ListCheckRunsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetOutput(v *ListCheckRunsResponseBodyResultOutput) *ListCheckRunsResponseBodyResult {
	s.Output = v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetStartedAt(v string) *ListCheckRunsResponseBodyResult {
	s.StartedAt = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetStatus(v string) *ListCheckRunsResponseBodyResult {
	s.Status = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetUpdatedAt(v string) *ListCheckRunsResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

func (s *ListCheckRunsResponseBodyResult) SetWriter(v *ListCheckRunsResponseBodyResultWriter) *ListCheckRunsResponseBodyResult {
	s.Writer = v
	return s
}

type ListCheckRunsResponseBodyResultAnnotations struct {
	// example:
	//
	// warning
	AnnotationLevel *string `json:"annotationLevel,omitempty" xml:"annotationLevel,omitempty"`
	// example:
	//
	// 5
	EndColumn *int64 `json:"endColumn,omitempty" xml:"endColumn,omitempty"`
	// example:
	//
	// 2
	EndLine *int64 `json:"endLine,omitempty" xml:"endLine,omitempty"`
	// example:
	//
	// 11806
	Id      *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// demo/test.txt
	Path       *string `json:"path,omitempty" xml:"path,omitempty"`
	RawDetails *string `json:"rawDetails,omitempty" xml:"rawDetails,omitempty"`
	// example:
	//
	// 3
	StartColumn *int64 `json:"startColumn,omitempty" xml:"startColumn,omitempty"`
	// example:
	//
	// 1
	StartLine *int64  `json:"startLine,omitempty" xml:"startLine,omitempty"`
	Title     *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ListCheckRunsResponseBodyResultAnnotations) String() string {
	return tea.Prettify(s)
}

func (s ListCheckRunsResponseBodyResultAnnotations) GoString() string {
	return s.String()
}

func (s *ListCheckRunsResponseBodyResultAnnotations) SetAnnotationLevel(v string) *ListCheckRunsResponseBodyResultAnnotations {
	s.AnnotationLevel = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultAnnotations) SetEndColumn(v int64) *ListCheckRunsResponseBodyResultAnnotations {
	s.EndColumn = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultAnnotations) SetEndLine(v int64) *ListCheckRunsResponseBodyResultAnnotations {
	s.EndLine = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultAnnotations) SetId(v int64) *ListCheckRunsResponseBodyResultAnnotations {
	s.Id = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultAnnotations) SetMessage(v string) *ListCheckRunsResponseBodyResultAnnotations {
	s.Message = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultAnnotations) SetPath(v string) *ListCheckRunsResponseBodyResultAnnotations {
	s.Path = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultAnnotations) SetRawDetails(v string) *ListCheckRunsResponseBodyResultAnnotations {
	s.RawDetails = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultAnnotations) SetStartColumn(v int64) *ListCheckRunsResponseBodyResultAnnotations {
	s.StartColumn = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultAnnotations) SetStartLine(v int64) *ListCheckRunsResponseBodyResultAnnotations {
	s.StartLine = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultAnnotations) SetTitle(v string) *ListCheckRunsResponseBodyResultAnnotations {
	s.Title = &v
	return s
}

type ListCheckRunsResponseBodyResultCheckSuite struct {
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
}

func (s ListCheckRunsResponseBodyResultCheckSuite) String() string {
	return tea.Prettify(s)
}

func (s ListCheckRunsResponseBodyResultCheckSuite) GoString() string {
	return s.String()
}

func (s *ListCheckRunsResponseBodyResultCheckSuite) SetId(v int64) *ListCheckRunsResponseBodyResultCheckSuite {
	s.Id = &v
	return s
}

type ListCheckRunsResponseBodyResultOutput struct {
	Images  []*ListCheckRunsResponseBodyResultOutputImages `json:"images,omitempty" xml:"images,omitempty" type:"Repeated"`
	Summary *string                                        `json:"summary,omitempty" xml:"summary,omitempty"`
	Text    *string                                        `json:"text,omitempty" xml:"text,omitempty"`
	// example:
	//
	// Mighty Readme report
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ListCheckRunsResponseBodyResultOutput) String() string {
	return tea.Prettify(s)
}

func (s ListCheckRunsResponseBodyResultOutput) GoString() string {
	return s.String()
}

func (s *ListCheckRunsResponseBodyResultOutput) SetImages(v []*ListCheckRunsResponseBodyResultOutputImages) *ListCheckRunsResponseBodyResultOutput {
	s.Images = v
	return s
}

func (s *ListCheckRunsResponseBodyResultOutput) SetSummary(v string) *ListCheckRunsResponseBodyResultOutput {
	s.Summary = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultOutput) SetText(v string) *ListCheckRunsResponseBodyResultOutput {
	s.Text = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultOutput) SetTitle(v string) *ListCheckRunsResponseBodyResultOutput {
	s.Title = &v
	return s
}

type ListCheckRunsResponseBodyResultOutputImages struct {
	// example:
	//
	// test-image-alt
	Alt *string `json:"alt,omitempty" xml:"alt,omitempty"`
	// example:
	//
	// test
	Caption *string `json:"caption,omitempty" xml:"caption,omitempty"`
	// example:
	//
	// xxx
	ImageUrl *string `json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

func (s ListCheckRunsResponseBodyResultOutputImages) String() string {
	return tea.Prettify(s)
}

func (s ListCheckRunsResponseBodyResultOutputImages) GoString() string {
	return s.String()
}

func (s *ListCheckRunsResponseBodyResultOutputImages) SetAlt(v string) *ListCheckRunsResponseBodyResultOutputImages {
	s.Alt = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultOutputImages) SetCaption(v string) *ListCheckRunsResponseBodyResultOutputImages {
	s.Caption = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultOutputImages) SetImageUrl(v string) *ListCheckRunsResponseBodyResultOutputImages {
	s.ImageUrl = &v
	return s
}

type ListCheckRunsResponseBodyResultWriter struct {
	// example:
	//
	// xxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// xxx
	LogoUrl *string `json:"logoUrl,omitempty" xml:"logoUrl,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// test-codeup
	Slug *string `json:"slug,omitempty" xml:"slug,omitempty"`
	// example:
	//
	// User
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListCheckRunsResponseBodyResultWriter) String() string {
	return tea.Prettify(s)
}

func (s ListCheckRunsResponseBodyResultWriter) GoString() string {
	return s.String()
}

func (s *ListCheckRunsResponseBodyResultWriter) SetId(v string) *ListCheckRunsResponseBodyResultWriter {
	s.Id = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultWriter) SetLogoUrl(v string) *ListCheckRunsResponseBodyResultWriter {
	s.LogoUrl = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultWriter) SetName(v string) *ListCheckRunsResponseBodyResultWriter {
	s.Name = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultWriter) SetSlug(v string) *ListCheckRunsResponseBodyResultWriter {
	s.Slug = &v
	return s
}

func (s *ListCheckRunsResponseBodyResultWriter) SetType(v string) *ListCheckRunsResponseBodyResultWriter {
	s.Type = &v
	return s
}

type ListCheckRunsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCheckRunsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCheckRunsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCheckRunsResponse) GoString() string {
	return s.String()
}

func (s *ListCheckRunsResponse) SetHeaders(v map[string]*string) *ListCheckRunsResponse {
	s.Headers = v
	return s
}

func (s *ListCheckRunsResponse) SetStatusCode(v int32) *ListCheckRunsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCheckRunsResponse) SetBody(v *ListCheckRunsResponseBody) *ListCheckRunsResponse {
	s.Body = v
	return s
}

type ListCommitStatusesRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61cc69557962d29f737a91730b3e86f497f083a3
	Sha *string `json:"sha,omitempty" xml:"sha,omitempty"`
}

func (s ListCommitStatusesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCommitStatusesRequest) GoString() string {
	return s.String()
}

func (s *ListCommitStatusesRequest) SetAccessToken(v string) *ListCommitStatusesRequest {
	s.AccessToken = &v
	return s
}

func (s *ListCommitStatusesRequest) SetOrganizationId(v string) *ListCommitStatusesRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListCommitStatusesRequest) SetPage(v int64) *ListCommitStatusesRequest {
	s.Page = &v
	return s
}

func (s *ListCommitStatusesRequest) SetPageSize(v int64) *ListCommitStatusesRequest {
	s.PageSize = &v
	return s
}

func (s *ListCommitStatusesRequest) SetRepositoryIdentity(v string) *ListCommitStatusesRequest {
	s.RepositoryIdentity = &v
	return s
}

func (s *ListCommitStatusesRequest) SetSha(v string) *ListCommitStatusesRequest {
	s.Sha = &v
	return s
}

type ListCommitStatusesResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListCommitStatusesResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 28
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListCommitStatusesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCommitStatusesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCommitStatusesResponseBody) SetErrorCode(v string) *ListCommitStatusesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListCommitStatusesResponseBody) SetErrorMessage(v string) *ListCommitStatusesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListCommitStatusesResponseBody) SetRequestId(v string) *ListCommitStatusesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCommitStatusesResponseBody) SetResult(v []*ListCommitStatusesResponseBodyResult) *ListCommitStatusesResponseBody {
	s.Result = v
	return s
}

func (s *ListCommitStatusesResponseBody) SetSuccess(v bool) *ListCommitStatusesResponseBody {
	s.Success = &v
	return s
}

func (s *ListCommitStatusesResponseBody) SetTotal(v int64) *ListCommitStatusesResponseBody {
	s.Total = &v
	return s
}

type ListCommitStatusesResponseBodyResult struct {
	// example:
	//
	// test-commit-status-context
	Context     *string                                      `json:"context,omitempty" xml:"context,omitempty"`
	Creator     *ListCommitStatusesResponseBodyResultCreator `json:"creator,omitempty" xml:"creator,omitempty" type:"Struct"`
	Description *string                                      `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 19285
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 61cc69557962d29f737a91730b3e86f497f083a3
	Sha *string `json:"sha,omitempty" xml:"sha,omitempty"`
	// example:
	//
	// success
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// xxx
	TargetUrl *string `json:"targetUrl,omitempty" xml:"targetUrl,omitempty"`
}

func (s ListCommitStatusesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListCommitStatusesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListCommitStatusesResponseBodyResult) SetContext(v string) *ListCommitStatusesResponseBodyResult {
	s.Context = &v
	return s
}

func (s *ListCommitStatusesResponseBodyResult) SetCreator(v *ListCommitStatusesResponseBodyResultCreator) *ListCommitStatusesResponseBodyResult {
	s.Creator = v
	return s
}

func (s *ListCommitStatusesResponseBodyResult) SetDescription(v string) *ListCommitStatusesResponseBodyResult {
	s.Description = &v
	return s
}

func (s *ListCommitStatusesResponseBodyResult) SetId(v int64) *ListCommitStatusesResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListCommitStatusesResponseBodyResult) SetSha(v string) *ListCommitStatusesResponseBodyResult {
	s.Sha = &v
	return s
}

func (s *ListCommitStatusesResponseBodyResult) SetState(v string) *ListCommitStatusesResponseBodyResult {
	s.State = &v
	return s
}

func (s *ListCommitStatusesResponseBodyResult) SetTargetUrl(v string) *ListCommitStatusesResponseBodyResult {
	s.TargetUrl = &v
	return s
}

type ListCommitStatusesResponseBodyResultCreator struct {
	// example:
	//
	// 235671547828975455
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// codeup
	Login *string `json:"login,omitempty" xml:"login,omitempty"`
	// example:
	//
	// User
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListCommitStatusesResponseBodyResultCreator) String() string {
	return tea.Prettify(s)
}

func (s ListCommitStatusesResponseBodyResultCreator) GoString() string {
	return s.String()
}

func (s *ListCommitStatusesResponseBodyResultCreator) SetAliyunPk(v string) *ListCommitStatusesResponseBodyResultCreator {
	s.AliyunPk = &v
	return s
}

func (s *ListCommitStatusesResponseBodyResultCreator) SetAvatarUrl(v string) *ListCommitStatusesResponseBodyResultCreator {
	s.AvatarUrl = &v
	return s
}

func (s *ListCommitStatusesResponseBodyResultCreator) SetLogin(v string) *ListCommitStatusesResponseBodyResultCreator {
	s.Login = &v
	return s
}

func (s *ListCommitStatusesResponseBodyResultCreator) SetType(v string) *ListCommitStatusesResponseBodyResultCreator {
	s.Type = &v
	return s
}

type ListCommitStatusesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCommitStatusesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCommitStatusesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCommitStatusesResponse) GoString() string {
	return s.String()
}

func (s *ListCommitStatusesResponse) SetHeaders(v map[string]*string) *ListCommitStatusesResponse {
	s.Headers = v
	return s
}

func (s *ListCommitStatusesResponse) SetStatusCode(v int32) *ListCommitStatusesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCommitStatusesResponse) SetBody(v *ListCommitStatusesResponseBody) *ListCommitStatusesResponse {
	s.Body = v
	return s
}

type ListFlowTagGroupsResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage  *string                                       `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	FlowTagGroups []*ListFlowTagGroupsResponseBodyFlowTagGroups `json:"flowTagGroups,omitempty" xml:"flowTagGroups,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListFlowTagGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowTagGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowTagGroupsResponseBody) SetErrorCode(v string) *ListFlowTagGroupsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListFlowTagGroupsResponseBody) SetErrorMessage(v string) *ListFlowTagGroupsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListFlowTagGroupsResponseBody) SetFlowTagGroups(v []*ListFlowTagGroupsResponseBodyFlowTagGroups) *ListFlowTagGroupsResponseBody {
	s.FlowTagGroups = v
	return s
}

func (s *ListFlowTagGroupsResponseBody) SetRequestId(v string) *ListFlowTagGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowTagGroupsResponseBody) SetSuccess(v bool) *ListFlowTagGroupsResponseBody {
	s.Success = &v
	return s
}

type ListFlowTagGroupsResponseBodyFlowTagGroups struct {
	// example:
	//
	// 111111111
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 111
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 11111111
	ModiferAccountId *string `json:"modiferAccountId,omitempty" xml:"modiferAccountId,omitempty"`
	// example:
	//
	// 标签名称
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListFlowTagGroupsResponseBodyFlowTagGroups) String() string {
	return tea.Prettify(s)
}

func (s ListFlowTagGroupsResponseBodyFlowTagGroups) GoString() string {
	return s.String()
}

func (s *ListFlowTagGroupsResponseBodyFlowTagGroups) SetCreatorAccountId(v string) *ListFlowTagGroupsResponseBodyFlowTagGroups {
	s.CreatorAccountId = &v
	return s
}

func (s *ListFlowTagGroupsResponseBodyFlowTagGroups) SetId(v int64) *ListFlowTagGroupsResponseBodyFlowTagGroups {
	s.Id = &v
	return s
}

func (s *ListFlowTagGroupsResponseBodyFlowTagGroups) SetModiferAccountId(v string) *ListFlowTagGroupsResponseBodyFlowTagGroups {
	s.ModiferAccountId = &v
	return s
}

func (s *ListFlowTagGroupsResponseBodyFlowTagGroups) SetName(v string) *ListFlowTagGroupsResponseBodyFlowTagGroups {
	s.Name = &v
	return s
}

type ListFlowTagGroupsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowTagGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowTagGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowTagGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListFlowTagGroupsResponse) SetHeaders(v map[string]*string) *ListFlowTagGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListFlowTagGroupsResponse) SetStatusCode(v int32) *ListFlowTagGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowTagGroupsResponse) SetBody(v *ListFlowTagGroupsResponseBody) *ListFlowTagGroupsResponse {
	s.Body = v
	return s
}

type ListGroupMemberRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 632bbfdf419338aaa2b1360a
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListGroupMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s ListGroupMemberRequest) GoString() string {
	return s.String()
}

func (s *ListGroupMemberRequest) SetAccessToken(v string) *ListGroupMemberRequest {
	s.AccessToken = &v
	return s
}

func (s *ListGroupMemberRequest) SetOrganizationId(v string) *ListGroupMemberRequest {
	s.OrganizationId = &v
	return s
}

type ListGroupMemberResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// C8F8B434-B006-59FB-8B9C-0382CF3D5680
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListGroupMemberResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListGroupMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListGroupMemberResponseBody) GoString() string {
	return s.String()
}

func (s *ListGroupMemberResponseBody) SetErrorCode(v string) *ListGroupMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListGroupMemberResponseBody) SetErrorMessage(v string) *ListGroupMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListGroupMemberResponseBody) SetRequestId(v string) *ListGroupMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListGroupMemberResponseBody) SetResult(v []*ListGroupMemberResponseBodyResult) *ListGroupMemberResponseBody {
	s.Result = v
	return s
}

func (s *ListGroupMemberResponseBody) SetSuccess(v bool) *ListGroupMemberResponseBody {
	s.Success = &v
	return s
}

type ListGroupMemberResponseBodyResult struct {
	// example:
	//
	// 30
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 123456
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// USERS
	MemberType *string `json:"memberType,omitempty" xml:"memberType,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 223241
	SourceId *int64 `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup-nickname
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListGroupMemberResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListGroupMemberResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListGroupMemberResponseBodyResult) SetAccessLevel(v int32) *ListGroupMemberResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *ListGroupMemberResponseBodyResult) SetAvatarUrl(v string) *ListGroupMemberResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *ListGroupMemberResponseBodyResult) SetEmail(v string) *ListGroupMemberResponseBodyResult {
	s.Email = &v
	return s
}

func (s *ListGroupMemberResponseBodyResult) SetId(v int64) *ListGroupMemberResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListGroupMemberResponseBodyResult) SetMemberType(v string) *ListGroupMemberResponseBodyResult {
	s.MemberType = &v
	return s
}

func (s *ListGroupMemberResponseBodyResult) SetName(v string) *ListGroupMemberResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ListGroupMemberResponseBodyResult) SetSourceId(v int64) *ListGroupMemberResponseBodyResult {
	s.SourceId = &v
	return s
}

func (s *ListGroupMemberResponseBodyResult) SetState(v string) *ListGroupMemberResponseBodyResult {
	s.State = &v
	return s
}

func (s *ListGroupMemberResponseBodyResult) SetUsername(v string) *ListGroupMemberResponseBodyResult {
	s.Username = &v
	return s
}

type ListGroupMemberResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListGroupMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListGroupMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s ListGroupMemberResponse) GoString() string {
	return s.String()
}

func (s *ListGroupMemberResponse) SetHeaders(v map[string]*string) *ListGroupMemberResponse {
	s.Headers = v
	return s
}

func (s *ListGroupMemberResponse) SetStatusCode(v int32) *ListGroupMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *ListGroupMemberResponse) SetBody(v *ListGroupMemberResponseBody) *ListGroupMemberResponse {
	s.Body = v
	return s
}

type ListGroupRepositoriesRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60ee8a814690c27532d412f8
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// Demo
	Search *string `json:"search,omitempty" xml:"search,omitempty"`
}

func (s ListGroupRepositoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListGroupRepositoriesRequest) GoString() string {
	return s.String()
}

func (s *ListGroupRepositoriesRequest) SetAccessToken(v string) *ListGroupRepositoriesRequest {
	s.AccessToken = &v
	return s
}

func (s *ListGroupRepositoriesRequest) SetOrganizationId(v string) *ListGroupRepositoriesRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListGroupRepositoriesRequest) SetPage(v int64) *ListGroupRepositoriesRequest {
	s.Page = &v
	return s
}

func (s *ListGroupRepositoriesRequest) SetPageSize(v int64) *ListGroupRepositoriesRequest {
	s.PageSize = &v
	return s
}

func (s *ListGroupRepositoriesRequest) SetSearch(v string) *ListGroupRepositoriesRequest {
	s.Search = &v
	return s
}

type ListGroupRepositoriesResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 9293CBDA-B5BC-5AD6-A8F4-C7873AC7A3DF
	RequestId *string                                    `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListGroupRepositoriesResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 2
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListGroupRepositoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListGroupRepositoriesResponseBody) GoString() string {
	return s.String()
}

func (s *ListGroupRepositoriesResponseBody) SetErrorCode(v string) *ListGroupRepositoriesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListGroupRepositoriesResponseBody) SetErrorMessage(v string) *ListGroupRepositoriesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListGroupRepositoriesResponseBody) SetRequestId(v string) *ListGroupRepositoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListGroupRepositoriesResponseBody) SetResult(v []*ListGroupRepositoriesResponseBodyResult) *ListGroupRepositoriesResponseBody {
	s.Result = v
	return s
}

func (s *ListGroupRepositoriesResponseBody) SetSuccess(v bool) *ListGroupRepositoriesResponseBody {
	s.Success = &v
	return s
}

func (s *ListGroupRepositoriesResponseBody) SetTotal(v int64) *ListGroupRepositoriesResponseBody {
	s.Total = &v
	return s
}

type ListGroupRepositoriesResponseBodyResult struct {
	// example:
	//
	// false
	Archived *bool `json:"archived,omitempty" xml:"archived,omitempty"`
	// example:
	//
	// 10
	CommitCount *int64 `json:"commitCount,omitempty" xml:"commitCount,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 19238
	CreatorId   *int64  `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// https://xxx/test/test
	HttpUrl *string `json:"httpUrl,omitempty" xml:"httpUrl,omitempty"`
	// example:
	//
	// 89616
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// http://xxx/x
	ImportUrl *string `json:"importUrl,omitempty" xml:"importUrl,omitempty"`
	// example:
	//
	// true
	IsStared *bool `json:"isStared,omitempty" xml:"isStared,omitempty"`
	// example:
	//
	// true
	IssuesEnabled *bool `json:"issuesEnabled,omitempty" xml:"issuesEnabled,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	LastActivityAt *string `json:"lastActivityAt,omitempty" xml:"lastActivityAt,omitempty"`
	// example:
	//
	// true
	MergeRequestsEnabled *bool `json:"mergeRequestsEnabled,omitempty" xml:"mergeRequestsEnabled,omitempty"`
	// example:
	//
	// test-group-repo
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// 100003
	NamespaceId *bool `json:"namespaceId,omitempty" xml:"namespaceId,omitempty"`
	// example:
	//
	// test-group-repo
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// codeup-test-org/test-group-repo
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// true
	PrivateFlag *bool `json:"privateFlag,omitempty" xml:"privateFlag,omitempty"`
	// example:
	//
	// false
	SnippetsEnabled *bool `json:"snippetsEnabled,omitempty" xml:"snippetsEnabled,omitempty"`
	// example:
	//
	// git@xxx:xxx/test/test.git
	SshUrl *string `json:"sshUrl,omitempty" xml:"sshUrl,omitempty"`
	// example:
	//
	// 0
	StarCount *int32 `json:"starCount,omitempty" xml:"starCount,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// ""
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
	// example:
	//
	// true
	WikiEnabled *bool `json:"wikiEnabled,omitempty" xml:"wikiEnabled,omitempty"`
}

func (s ListGroupRepositoriesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListGroupRepositoriesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListGroupRepositoriesResponseBodyResult) SetArchived(v bool) *ListGroupRepositoriesResponseBodyResult {
	s.Archived = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetCommitCount(v int64) *ListGroupRepositoriesResponseBodyResult {
	s.CommitCount = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetCreatedAt(v string) *ListGroupRepositoriesResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetCreatorId(v int64) *ListGroupRepositoriesResponseBodyResult {
	s.CreatorId = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetDescription(v string) *ListGroupRepositoriesResponseBodyResult {
	s.Description = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetHttpUrl(v string) *ListGroupRepositoriesResponseBodyResult {
	s.HttpUrl = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetId(v int64) *ListGroupRepositoriesResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetImportUrl(v string) *ListGroupRepositoriesResponseBodyResult {
	s.ImportUrl = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetIsStared(v bool) *ListGroupRepositoriesResponseBodyResult {
	s.IsStared = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetIssuesEnabled(v bool) *ListGroupRepositoriesResponseBodyResult {
	s.IssuesEnabled = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetLastActivityAt(v string) *ListGroupRepositoriesResponseBodyResult {
	s.LastActivityAt = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetMergeRequestsEnabled(v bool) *ListGroupRepositoriesResponseBodyResult {
	s.MergeRequestsEnabled = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetName(v string) *ListGroupRepositoriesResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetNameWithNamespace(v string) *ListGroupRepositoriesResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetNamespaceId(v bool) *ListGroupRepositoriesResponseBodyResult {
	s.NamespaceId = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetPath(v string) *ListGroupRepositoriesResponseBodyResult {
	s.Path = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetPathWithNamespace(v string) *ListGroupRepositoriesResponseBodyResult {
	s.PathWithNamespace = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetPrivateFlag(v bool) *ListGroupRepositoriesResponseBodyResult {
	s.PrivateFlag = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetSnippetsEnabled(v bool) *ListGroupRepositoriesResponseBodyResult {
	s.SnippetsEnabled = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetSshUrl(v string) *ListGroupRepositoriesResponseBodyResult {
	s.SshUrl = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetStarCount(v int32) *ListGroupRepositoriesResponseBodyResult {
	s.StarCount = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetUpdatedAt(v string) *ListGroupRepositoriesResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetVisibilityLevel(v int32) *ListGroupRepositoriesResponseBodyResult {
	s.VisibilityLevel = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetWebUrl(v string) *ListGroupRepositoriesResponseBodyResult {
	s.WebUrl = &v
	return s
}

func (s *ListGroupRepositoriesResponseBodyResult) SetWikiEnabled(v bool) *ListGroupRepositoriesResponseBodyResult {
	s.WikiEnabled = &v
	return s
}

type ListGroupRepositoriesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListGroupRepositoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListGroupRepositoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListGroupRepositoriesResponse) GoString() string {
	return s.String()
}

func (s *ListGroupRepositoriesResponse) SetHeaders(v map[string]*string) *ListGroupRepositoriesResponse {
	s.Headers = v
	return s
}

func (s *ListGroupRepositoriesResponse) SetStatusCode(v int32) *ListGroupRepositoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListGroupRepositoriesResponse) SetBody(v *ListGroupRepositoriesResponseBody) *ListGroupRepositoriesResponse {
	s.Body = v
	return s
}

type ListHostGroupsRequest struct {
	// example:
	//
	// 1586863220000
	CreateEndTime *int64 `json:"createEndTime,omitempty" xml:"createEndTime,omitempty"`
	// example:
	//
	// 1586863220000
	CreateStartTime *int64 `json:"createStartTime,omitempty" xml:"createStartTime,omitempty"`
	// example:
	//
	// 1112122121,3223332
	CreatorAccountIds *string `json:"creatorAccountIds,omitempty" xml:"creatorAccountIds,omitempty"`
	// example:
	//
	// 121,1212121232
	Ids *string `json:"ids,omitempty" xml:"ids,omitempty"`
	// example:
	//
	// 30
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 主机组
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 221212221
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// DESC
	PageOrder *string `json:"pageOrder,omitempty" xml:"pageOrder,omitempty"`
	// example:
	//
	// ID
	PageSort *string `json:"pageSort,omitempty" xml:"pageSort,omitempty"`
}

func (s ListHostGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListHostGroupsRequest) SetCreateEndTime(v int64) *ListHostGroupsRequest {
	s.CreateEndTime = &v
	return s
}

func (s *ListHostGroupsRequest) SetCreateStartTime(v int64) *ListHostGroupsRequest {
	s.CreateStartTime = &v
	return s
}

func (s *ListHostGroupsRequest) SetCreatorAccountIds(v string) *ListHostGroupsRequest {
	s.CreatorAccountIds = &v
	return s
}

func (s *ListHostGroupsRequest) SetIds(v string) *ListHostGroupsRequest {
	s.Ids = &v
	return s
}

func (s *ListHostGroupsRequest) SetMaxResults(v int64) *ListHostGroupsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListHostGroupsRequest) SetName(v string) *ListHostGroupsRequest {
	s.Name = &v
	return s
}

func (s *ListHostGroupsRequest) SetNextToken(v string) *ListHostGroupsRequest {
	s.NextToken = &v
	return s
}

func (s *ListHostGroupsRequest) SetPageOrder(v string) *ListHostGroupsRequest {
	s.PageOrder = &v
	return s
}

func (s *ListHostGroupsRequest) SetPageSort(v string) *ListHostGroupsRequest {
	s.PageSort = &v
	return s
}

type ListHostGroupsResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string                                 `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	HostGroups   []*ListHostGroupsResponseBodyHostGroups `json:"hostGroups,omitempty" xml:"hostGroups,omitempty" type:"Repeated"`
	// example:
	//
	// asassasassa
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 50
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ListHostGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListHostGroupsResponseBody) SetErrorCode(v string) *ListHostGroupsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListHostGroupsResponseBody) SetErrorMessage(v string) *ListHostGroupsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListHostGroupsResponseBody) SetHostGroups(v []*ListHostGroupsResponseBodyHostGroups) *ListHostGroupsResponseBody {
	s.HostGroups = v
	return s
}

func (s *ListHostGroupsResponseBody) SetNextToken(v string) *ListHostGroupsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListHostGroupsResponseBody) SetRequestId(v string) *ListHostGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHostGroupsResponseBody) SetSuccess(v bool) *ListHostGroupsResponseBody {
	s.Success = &v
	return s
}

func (s *ListHostGroupsResponseBody) SetTotalCount(v int64) *ListHostGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type ListHostGroupsResponseBodyHostGroups struct {
	// example:
	//
	// cn-beijing
	AliyunRegion *string `json:"aliyunRegion,omitempty" xml:"aliyunRegion,omitempty"`
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 2222222222222
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 主机组
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// ecs
	EcsLabelKey *string `json:"ecsLabelKey,omitempty" xml:"ecsLabelKey,omitempty"`
	// example:
	//
	// value
	EcsLabelValue *string `json:"ecsLabelValue,omitempty" xml:"ecsLabelValue,omitempty"`
	// example:
	//
	// ECS_ALIYUN
	EcsType *string `json:"ecsType,omitempty" xml:"ecsType,omitempty"`
	// example:
	//
	// 3
	HostNum *int64 `json:"hostNum,omitempty" xml:"hostNum,omitempty"`
	// 323232
	//
	// example:
	//
	// 部署组Id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 211111111
	ModifierAccountId *string `json:"modifierAccountId,omitempty" xml:"modifierAccountId,omitempty"`
	// example:
	//
	// 部署组
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 1212122
	ServiceConnectionId *int64 `json:"serviceConnectionId,omitempty" xml:"serviceConnectionId,omitempty"`
	// example:
	//
	// ECS
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 1586863220000
	UpdateTime *int64 `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s ListHostGroupsResponseBodyHostGroups) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsResponseBodyHostGroups) GoString() string {
	return s.String()
}

func (s *ListHostGroupsResponseBodyHostGroups) SetAliyunRegion(v string) *ListHostGroupsResponseBodyHostGroups {
	s.AliyunRegion = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetCreateTime(v int64) *ListHostGroupsResponseBodyHostGroups {
	s.CreateTime = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetCreatorAccountId(v string) *ListHostGroupsResponseBodyHostGroups {
	s.CreatorAccountId = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetDescription(v string) *ListHostGroupsResponseBodyHostGroups {
	s.Description = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetEcsLabelKey(v string) *ListHostGroupsResponseBodyHostGroups {
	s.EcsLabelKey = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetEcsLabelValue(v string) *ListHostGroupsResponseBodyHostGroups {
	s.EcsLabelValue = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetEcsType(v string) *ListHostGroupsResponseBodyHostGroups {
	s.EcsType = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetHostNum(v int64) *ListHostGroupsResponseBodyHostGroups {
	s.HostNum = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetId(v int64) *ListHostGroupsResponseBodyHostGroups {
	s.Id = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetModifierAccountId(v string) *ListHostGroupsResponseBodyHostGroups {
	s.ModifierAccountId = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetName(v string) *ListHostGroupsResponseBodyHostGroups {
	s.Name = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetServiceConnectionId(v int64) *ListHostGroupsResponseBodyHostGroups {
	s.ServiceConnectionId = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetType(v string) *ListHostGroupsResponseBodyHostGroups {
	s.Type = &v
	return s
}

func (s *ListHostGroupsResponseBodyHostGroups) SetUpdateTime(v int64) *ListHostGroupsResponseBodyHostGroups {
	s.UpdateTime = &v
	return s
}

type ListHostGroupsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListHostGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListHostGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHostGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListHostGroupsResponse) SetHeaders(v map[string]*string) *ListHostGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListHostGroupsResponse) SetStatusCode(v int32) *ListHostGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListHostGroupsResponse) SetBody(v *ListHostGroupsResponseBody) *ListHostGroupsResponse {
	s.Body = v
	return s
}

type ListJoinedOrganizationsResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage  *string                                             `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Organizations []*ListJoinedOrganizationsResponseBodyOrganizations `json:"organizations,omitempty" xml:"organizations,omitempty" type:"Repeated"`
	// example:
	//
	// 11D0EE6E-5803-5D4C-A652-E672BE1F3D8E
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListJoinedOrganizationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJoinedOrganizationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListJoinedOrganizationsResponseBody) SetErrorCode(v string) *ListJoinedOrganizationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListJoinedOrganizationsResponseBody) SetErrorMessage(v string) *ListJoinedOrganizationsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListJoinedOrganizationsResponseBody) SetOrganizations(v []*ListJoinedOrganizationsResponseBodyOrganizations) *ListJoinedOrganizationsResponseBody {
	s.Organizations = v
	return s
}

func (s *ListJoinedOrganizationsResponseBody) SetRequestId(v string) *ListJoinedOrganizationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJoinedOrganizationsResponseBody) SetSuccess(v bool) *ListJoinedOrganizationsResponseBody {
	s.Success = &v
	return s
}

type ListJoinedOrganizationsResponseBodyOrganizations struct {
	// example:
	//
	// 65f25d0fa54c216dcf6b1dbd
	Id         *string `json:"id,omitempty" xml:"id,omitempty"`
	IsOrgAdmin *bool   `json:"isOrgAdmin,omitempty" xml:"isOrgAdmin,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListJoinedOrganizationsResponseBodyOrganizations) String() string {
	return tea.Prettify(s)
}

func (s ListJoinedOrganizationsResponseBodyOrganizations) GoString() string {
	return s.String()
}

func (s *ListJoinedOrganizationsResponseBodyOrganizations) SetId(v string) *ListJoinedOrganizationsResponseBodyOrganizations {
	s.Id = &v
	return s
}

func (s *ListJoinedOrganizationsResponseBodyOrganizations) SetIsOrgAdmin(v bool) *ListJoinedOrganizationsResponseBodyOrganizations {
	s.IsOrgAdmin = &v
	return s
}

func (s *ListJoinedOrganizationsResponseBodyOrganizations) SetName(v string) *ListJoinedOrganizationsResponseBodyOrganizations {
	s.Name = &v
	return s
}

type ListJoinedOrganizationsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListJoinedOrganizationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListJoinedOrganizationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJoinedOrganizationsResponse) GoString() string {
	return s.String()
}

func (s *ListJoinedOrganizationsResponse) SetHeaders(v map[string]*string) *ListJoinedOrganizationsResponse {
	s.Headers = v
	return s
}

func (s *ListJoinedOrganizationsResponse) SetStatusCode(v int32) *ListJoinedOrganizationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListJoinedOrganizationsResponse) SetBody(v *ListJoinedOrganizationsResponseBody) *ListJoinedOrganizationsResponse {
	s.Body = v
	return s
}

type ListMergeRequestCommentsRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// GLOBAL_COMMENT
	CommentType *string `json:"commentType,omitempty" xml:"commentType,omitempty"`
	// example:
	//
	// /src/main/test.java
	FilePath       *string   `json:"filePath,omitempty" xml:"filePath,omitempty"`
	PatchSetBizIds []*string `json:"patchSetBizIds,omitempty" xml:"patchSetBizIds,omitempty" type:"Repeated"`
	// example:
	//
	// false
	Resolved *bool `json:"resolved,omitempty" xml:"resolved,omitempty"`
	// example:
	//
	// OPENED
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	LocalId *int64 `json:"localId,omitempty" xml:"localId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s ListMergeRequestCommentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsRequest) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsRequest) SetAccessToken(v string) *ListMergeRequestCommentsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListMergeRequestCommentsRequest) SetCommentType(v string) *ListMergeRequestCommentsRequest {
	s.CommentType = &v
	return s
}

func (s *ListMergeRequestCommentsRequest) SetFilePath(v string) *ListMergeRequestCommentsRequest {
	s.FilePath = &v
	return s
}

func (s *ListMergeRequestCommentsRequest) SetPatchSetBizIds(v []*string) *ListMergeRequestCommentsRequest {
	s.PatchSetBizIds = v
	return s
}

func (s *ListMergeRequestCommentsRequest) SetResolved(v bool) *ListMergeRequestCommentsRequest {
	s.Resolved = &v
	return s
}

func (s *ListMergeRequestCommentsRequest) SetState(v string) *ListMergeRequestCommentsRequest {
	s.State = &v
	return s
}

func (s *ListMergeRequestCommentsRequest) SetLocalId(v int64) *ListMergeRequestCommentsRequest {
	s.LocalId = &v
	return s
}

func (s *ListMergeRequestCommentsRequest) SetOrganizationId(v string) *ListMergeRequestCommentsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListMergeRequestCommentsRequest) SetRepositoryIdentity(v string) *ListMergeRequestCommentsRequest {
	s.RepositoryIdentity = &v
	return s
}

type ListMergeRequestCommentsResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 56C33A95-C04F-59F0-B3CD-E2A2EB9FADBB
	RequestId *string                                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListMergeRequestCommentsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListMergeRequestCommentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponseBody) SetErrorCode(v string) *ListMergeRequestCommentsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBody) SetErrorMessage(v string) *ListMergeRequestCommentsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBody) SetRequestId(v string) *ListMergeRequestCommentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBody) SetResult(v []*ListMergeRequestCommentsResponseBodyResult) *ListMergeRequestCommentsResponseBody {
	s.Result = v
	return s
}

func (s *ListMergeRequestCommentsResponseBody) SetSuccess(v bool) *ListMergeRequestCommentsResponseBody {
	s.Success = &v
	return s
}

type ListMergeRequestCommentsResponseBodyResult struct {
	Author        *ListMergeRequestCommentsResponseBodyResultAuthor          `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	ChildComments []*ListMergeRequestCommentsResponseBodyResultChildComments `json:"childComments,omitempty" xml:"childComments,omitempty" type:"Repeated"`
	// example:
	//
	// 5c399e3685e542a28db16d93e9f82abb
	CommentBizId *string `json:"commentBizId,omitempty" xml:"commentBizId,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CommentTime *string `json:"commentTime,omitempty" xml:"commentTime,omitempty"`
	// example:
	//
	// GLOBAL_COMMENT
	CommentType *string `json:"commentType,omitempty" xml:"commentType,omitempty"`
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// false
	Deleted *bool `json:"deleted,omitempty" xml:"deleted,omitempty"`
	// example:
	//
	// src/main/test.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	LastEditTime *string `json:"lastEditTime,omitempty" xml:"lastEditTime,omitempty"`
	// example:
	//
	// 3
	LineNumber *string `json:"lineNumber,omitempty" xml:"lineNumber,omitempty"`
	// example:
	//
	// 4c5dcec6a8dc41e69c369737dadc1841
	ParentCommentBizId *string                                                    `json:"parentCommentBizId,omitempty" xml:"parentCommentBizId,omitempty"`
	RelatedPatchSet    *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet `json:"relatedPatchSet,omitempty" xml:"relatedPatchSet,omitempty" type:"Struct"`
	// example:
	//
	// false
	Resolved *bool `json:"resolved,omitempty" xml:"resolved,omitempty"`
	// example:
	//
	// dcf2b23cebfc418f98dbd35e423d9fd3
	RootCommentBizId *string `json:"rootCommentBizId,omitempty" xml:"rootCommentBizId,omitempty"`
	// example:
	//
	// OPENED
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ListMergeRequestCommentsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetAuthor(v *ListMergeRequestCommentsResponseBodyResultAuthor) *ListMergeRequestCommentsResponseBodyResult {
	s.Author = v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetChildComments(v []*ListMergeRequestCommentsResponseBodyResultChildComments) *ListMergeRequestCommentsResponseBodyResult {
	s.ChildComments = v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetCommentBizId(v string) *ListMergeRequestCommentsResponseBodyResult {
	s.CommentBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetCommentTime(v string) *ListMergeRequestCommentsResponseBodyResult {
	s.CommentTime = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetCommentType(v string) *ListMergeRequestCommentsResponseBodyResult {
	s.CommentType = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetContent(v string) *ListMergeRequestCommentsResponseBodyResult {
	s.Content = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetDeleted(v bool) *ListMergeRequestCommentsResponseBodyResult {
	s.Deleted = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetFilePath(v string) *ListMergeRequestCommentsResponseBodyResult {
	s.FilePath = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetLastEditTime(v string) *ListMergeRequestCommentsResponseBodyResult {
	s.LastEditTime = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetLineNumber(v string) *ListMergeRequestCommentsResponseBodyResult {
	s.LineNumber = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetParentCommentBizId(v string) *ListMergeRequestCommentsResponseBodyResult {
	s.ParentCommentBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetRelatedPatchSet(v *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet) *ListMergeRequestCommentsResponseBodyResult {
	s.RelatedPatchSet = v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetResolved(v bool) *ListMergeRequestCommentsResponseBodyResult {
	s.Resolved = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetRootCommentBizId(v string) *ListMergeRequestCommentsResponseBodyResult {
	s.RootCommentBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResult) SetState(v string) *ListMergeRequestCommentsResponseBodyResult {
	s.State = &v
	return s
}

type ListMergeRequestCommentsResponseBodyResultAuthor struct {
	// example:
	//
	// 284692704493684695
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListMergeRequestCommentsResponseBodyResultAuthor) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponseBodyResultAuthor) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponseBodyResultAuthor) SetAliyunPk(v string) *ListMergeRequestCommentsResponseBodyResultAuthor {
	s.AliyunPk = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultAuthor) SetAvatarUrl(v string) *ListMergeRequestCommentsResponseBodyResultAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultAuthor) SetEmail(v string) *ListMergeRequestCommentsResponseBodyResultAuthor {
	s.Email = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultAuthor) SetId(v int64) *ListMergeRequestCommentsResponseBodyResultAuthor {
	s.Id = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultAuthor) SetName(v string) *ListMergeRequestCommentsResponseBodyResultAuthor {
	s.Name = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultAuthor) SetState(v string) *ListMergeRequestCommentsResponseBodyResultAuthor {
	s.State = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultAuthor) SetUsername(v string) *ListMergeRequestCommentsResponseBodyResultAuthor {
	s.Username = &v
	return s
}

type ListMergeRequestCommentsResponseBodyResultChildComments struct {
	Author *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// 63f0e293357f48f9846ddc4dbbebd0e3
	CommentBizId *string `json:"commentBizId,omitempty" xml:"commentBizId,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CommentTime *string `json:"commentTime,omitempty" xml:"commentTime,omitempty"`
	// example:
	//
	// GLOBAL_COMMENT
	CommentType *string `json:"commentType,omitempty" xml:"commentType,omitempty"`
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// false
	Deleted *bool `json:"deleted,omitempty" xml:"deleted,omitempty"`
	// example:
	//
	// src/main/test.java
	FilePath           *string                                                                      `json:"filePath,omitempty" xml:"filePath,omitempty"`
	FinalChildComments []*ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments `json:"finalChildComments,omitempty" xml:"finalChildComments,omitempty" type:"Repeated"`
	// example:
	//
	// 2022-03-18 14:24:54
	LastEditTime *string `json:"lastEditTime,omitempty" xml:"lastEditTime,omitempty"`
	// example:
	//
	// 3
	LineNumber *string `json:"lineNumber,omitempty" xml:"lineNumber,omitempty"`
	// example:
	//
	// 5c399e3685e542a28db16d93e9f82abb
	ParentCommentBizId *string                                                                 `json:"parentCommentBizId,omitempty" xml:"parentCommentBizId,omitempty"`
	RelatedPatchSet    *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet `json:"relatedPatchSet,omitempty" xml:"relatedPatchSet,omitempty" type:"Struct"`
	// example:
	//
	// false
	Resolved *bool `json:"resolved,omitempty" xml:"resolved,omitempty"`
	// example:
	//
	// dcf2b23cebfc418f98dbd35e423d9fd3
	RootCommentBizId *string `json:"rootCommentBizId,omitempty" xml:"rootCommentBizId,omitempty"`
	// example:
	//
	// OPENED
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ListMergeRequestCommentsResponseBodyResultChildComments) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponseBodyResultChildComments) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetAuthor(v *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.Author = v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetCommentBizId(v string) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.CommentBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetCommentTime(v string) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.CommentTime = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetCommentType(v string) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.CommentType = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetContent(v string) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.Content = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetDeleted(v bool) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.Deleted = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetFilePath(v string) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.FilePath = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetFinalChildComments(v []*ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.FinalChildComments = v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetLastEditTime(v string) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.LastEditTime = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetLineNumber(v string) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.LineNumber = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetParentCommentBizId(v string) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.ParentCommentBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetRelatedPatchSet(v *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.RelatedPatchSet = v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetResolved(v bool) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.Resolved = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetRootCommentBizId(v string) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.RootCommentBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildComments) SetState(v string) *ListMergeRequestCommentsResponseBodyResultChildComments {
	s.State = &v
	return s
}

type ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor struct {
	// example:
	//
	// 204485087002425236
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor) SetAliyunPk(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor {
	s.AliyunPk = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor) SetAvatarUrl(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor) SetEmail(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor {
	s.Email = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor) SetId(v int64) *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor {
	s.Id = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor) SetName(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor {
	s.Name = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor) SetState(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor {
	s.State = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor) SetUsername(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsAuthor {
	s.Username = &v
	return s
}

type ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments struct {
	Author *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// 5c399e3685e542a28db16d93e9f82abb
	CommentBizId *string `json:"commentBizId,omitempty" xml:"commentBizId,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CommentTime *string `json:"commentTime,omitempty" xml:"commentTime,omitempty"`
	// example:
	//
	// GLOBAL_COMMENT
	CommentType *string `json:"commentType,omitempty" xml:"commentType,omitempty"`
	Content     *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// false
	Deleted *bool `json:"deleted,omitempty" xml:"deleted,omitempty"`
	// example:
	//
	// src/main/test.java
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	LastEditTime *string `json:"lastEditTime,omitempty" xml:"lastEditTime,omitempty"`
	// example:
	//
	// 3
	LineNumber *string `json:"lineNumber,omitempty" xml:"lineNumber,omitempty"`
	// example:
	//
	// 4c5dcec6a8dc41e69c369737dadc1841
	ParentCommentBizId *string                                                                                   `json:"parentCommentBizId,omitempty" xml:"parentCommentBizId,omitempty"`
	RelatedPatchSet    *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet `json:"relatedPatchSet,omitempty" xml:"relatedPatchSet,omitempty" type:"Struct"`
	// example:
	//
	// false
	Resolved *bool `json:"resolved,omitempty" xml:"resolved,omitempty"`
	// example:
	//
	// dcf2b23cebfc418f98dbd35e423d9fd3
	RootCommentBizId *string `json:"rootCommentBizId,omitempty" xml:"rootCommentBizId,omitempty"`
	// example:
	//
	// OPENED
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetAuthor(v *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.Author = v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetCommentBizId(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.CommentBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetCommentTime(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.CommentTime = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetCommentType(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.CommentType = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetContent(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.Content = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetDeleted(v bool) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.Deleted = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetFilePath(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.FilePath = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetLastEditTime(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.LastEditTime = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetLineNumber(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.LineNumber = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetParentCommentBizId(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.ParentCommentBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetRelatedPatchSet(v *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.RelatedPatchSet = v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetResolved(v bool) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.Resolved = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetRootCommentBizId(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.RootCommentBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments) SetState(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildComments {
	s.State = &v
	return s
}

type ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor struct {
	// example:
	//
	// 235671547828975455
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	Id    *int64  `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor) SetAliyunPk(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor {
	s.AliyunPk = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor) SetAvatarUrl(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor) SetEmail(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor {
	s.Email = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor) SetId(v int64) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor {
	s.Id = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor) SetName(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor {
	s.Name = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor) SetState(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor {
	s.State = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor) SetUsername(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsAuthor {
	s.Username = &v
	return s
}

type ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet struct {
	// example:
	//
	// 1a072f5367c21f9de3464b8c0ee8546e47764d2d
	CommitId *string `json:"commitId,omitempty" xml:"commitId,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 513fcfd81a9142d2bb0db4f72c0aa15b
	PatchSetBizId *string `json:"patchSetBizId,omitempty" xml:"patchSetBizId,omitempty"`
	PatchSetName  *string `json:"patchSetName,omitempty" xml:"patchSetName,omitempty"`
	// example:
	//
	// 1
	PatchSetNo *string `json:"patchSetNo,omitempty" xml:"patchSetNo,omitempty"`
	// example:
	//
	// MERGE_SOURCE
	RelatedMergeItemType *string `json:"relatedMergeItemType,omitempty" xml:"relatedMergeItemType,omitempty"`
	// example:
	//
	// 1a072f53
	ShortId *string `json:"shortId,omitempty" xml:"shortId,omitempty"`
}

func (s ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet) SetCommitId(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet {
	s.CommitId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet) SetCreatedAt(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet {
	s.CreatedAt = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet) SetPatchSetBizId(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet {
	s.PatchSetBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet) SetPatchSetName(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet {
	s.PatchSetName = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet) SetPatchSetNo(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet {
	s.PatchSetNo = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet) SetRelatedMergeItemType(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet {
	s.RelatedMergeItemType = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet) SetShortId(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsFinalChildCommentsRelatedPatchSet {
	s.ShortId = &v
	return s
}

type ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet struct {
	// example:
	//
	// 1a072f5367c21f9de3464b8c0ee8546e47764d2d
	CommitId *string `json:"commitId,omitempty" xml:"commitId,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 513fcfd81a9142d2bb0db4f72c0aa15b
	PatchSetBizId *string `json:"patchSetBizId,omitempty" xml:"patchSetBizId,omitempty"`
	PatchSetName  *string `json:"patchSetName,omitempty" xml:"patchSetName,omitempty"`
	// example:
	//
	// 1
	PatchSetNo *string `json:"patchSetNo,omitempty" xml:"patchSetNo,omitempty"`
	// example:
	//
	// MERGE_SOURCE
	RelatedMergeItemType *string `json:"relatedMergeItemType,omitempty" xml:"relatedMergeItemType,omitempty"`
	// example:
	//
	// 1a072f53
	ShortId *string `json:"shortId,omitempty" xml:"shortId,omitempty"`
}

func (s ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet) SetCommitId(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet {
	s.CommitId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet) SetCreatedAt(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet {
	s.CreatedAt = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet) SetPatchSetBizId(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet {
	s.PatchSetBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet) SetPatchSetName(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet {
	s.PatchSetName = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet) SetPatchSetNo(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet {
	s.PatchSetNo = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet) SetRelatedMergeItemType(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet {
	s.RelatedMergeItemType = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet) SetShortId(v string) *ListMergeRequestCommentsResponseBodyResultChildCommentsRelatedPatchSet {
	s.ShortId = &v
	return s
}

type ListMergeRequestCommentsResponseBodyResultRelatedPatchSet struct {
	// example:
	//
	// 1a072f5367c21f9de3464b8c0ee8546e47764d2d
	CommitId *string `json:"commitId,omitempty" xml:"commitId,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 513fcfd81a9142d2bb0db4f72c0aa15b
	PatchSetBizId *string `json:"patchSetBizId,omitempty" xml:"patchSetBizId,omitempty"`
	PatchSetName  *string `json:"patchSetName,omitempty" xml:"patchSetName,omitempty"`
	// example:
	//
	// 1
	PatchSetNo *string `json:"patchSetNo,omitempty" xml:"patchSetNo,omitempty"`
	// example:
	//
	// MERGE_SOURCE
	RelatedMergeItemType *string `json:"relatedMergeItemType,omitempty" xml:"relatedMergeItemType,omitempty"`
	// example:
	//
	// 1a072f53
	ShortId *string `json:"shortId,omitempty" xml:"shortId,omitempty"`
}

func (s ListMergeRequestCommentsResponseBodyResultRelatedPatchSet) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponseBodyResultRelatedPatchSet) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet) SetCommitId(v string) *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet {
	s.CommitId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet) SetCreatedAt(v string) *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet {
	s.CreatedAt = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet) SetPatchSetBizId(v string) *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet {
	s.PatchSetBizId = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet) SetPatchSetName(v string) *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet {
	s.PatchSetName = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet) SetPatchSetNo(v string) *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet {
	s.PatchSetNo = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet) SetRelatedMergeItemType(v string) *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet {
	s.RelatedMergeItemType = &v
	return s
}

func (s *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet) SetShortId(v string) *ListMergeRequestCommentsResponseBodyResultRelatedPatchSet {
	s.ShortId = &v
	return s
}

type ListMergeRequestCommentsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMergeRequestCommentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMergeRequestCommentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestCommentsResponse) GoString() string {
	return s.String()
}

func (s *ListMergeRequestCommentsResponse) SetHeaders(v map[string]*string) *ListMergeRequestCommentsResponse {
	s.Headers = v
	return s
}

func (s *ListMergeRequestCommentsResponse) SetStatusCode(v int32) *ListMergeRequestCommentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMergeRequestCommentsResponse) SetBody(v *ListMergeRequestCommentsResponseBody) *ListMergeRequestCommentsResponse {
	s.Body = v
	return s
}

type ListMergeRequestFilesReadsRequest struct {
	// example:
	//
	// agp_4d57a6796b3626f52064ab1fba5384a5
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5e733626d53f4b04a6aa0e23d4ff72b8
	FromPatchSetBizId *string `json:"fromPatchSetBizId,omitempty" xml:"fromPatchSetBizId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5
	LocalId *int64 `json:"localId,omitempty" xml:"localId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 513fcfd81a9142d2bb0db4f72c0aa15b
	ToPatchSetBizId *string `json:"toPatchSetBizId,omitempty" xml:"toPatchSetBizId,omitempty"`
}

func (s ListMergeRequestFilesReadsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestFilesReadsRequest) GoString() string {
	return s.String()
}

func (s *ListMergeRequestFilesReadsRequest) SetAccessToken(v string) *ListMergeRequestFilesReadsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListMergeRequestFilesReadsRequest) SetFromPatchSetBizId(v string) *ListMergeRequestFilesReadsRequest {
	s.FromPatchSetBizId = &v
	return s
}

func (s *ListMergeRequestFilesReadsRequest) SetLocalId(v int64) *ListMergeRequestFilesReadsRequest {
	s.LocalId = &v
	return s
}

func (s *ListMergeRequestFilesReadsRequest) SetOrganizationId(v string) *ListMergeRequestFilesReadsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListMergeRequestFilesReadsRequest) SetRepositoryIdentity(v string) *ListMergeRequestFilesReadsRequest {
	s.RepositoryIdentity = &v
	return s
}

func (s *ListMergeRequestFilesReadsRequest) SetToPatchSetBizId(v string) *ListMergeRequestFilesReadsRequest {
	s.ToPatchSetBizId = &v
	return s
}

type ListMergeRequestFilesReadsResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                                         `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListMergeRequestFilesReadsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListMergeRequestFilesReadsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestFilesReadsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMergeRequestFilesReadsResponseBody) SetErrorCode(v string) *ListMergeRequestFilesReadsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBody) SetErrorMessage(v string) *ListMergeRequestFilesReadsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBody) SetRequestId(v string) *ListMergeRequestFilesReadsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBody) SetResult(v []*ListMergeRequestFilesReadsResponseBodyResult) *ListMergeRequestFilesReadsResponseBody {
	s.Result = v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBody) SetSuccess(v bool) *ListMergeRequestFilesReadsResponseBody {
	s.Success = &v
	return s
}

type ListMergeRequestFilesReadsResponseBodyResult struct {
	// example:
	//
	// false
	DeletedFile *string `json:"deletedFile,omitempty" xml:"deletedFile,omitempty"`
	// example:
	//
	// true
	NewFile *bool `json:"newFile,omitempty" xml:"newFile,omitempty"`
	// example:
	//
	// text.txt
	NewFilePath *string `json:"newFilePath,omitempty" xml:"newFilePath,omitempty"`
	// example:
	//
	// text.txt
	OldFilePath *string                                                  `json:"oldFilePath,omitempty" xml:"oldFilePath,omitempty"`
	ReadUsers   []*ListMergeRequestFilesReadsResponseBodyResultReadUsers `json:"readUsers,omitempty" xml:"readUsers,omitempty" type:"Repeated"`
	// example:
	//
	// false
	RenamedFile *string `json:"renamedFile,omitempty" xml:"renamedFile,omitempty"`
}

func (s ListMergeRequestFilesReadsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestFilesReadsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListMergeRequestFilesReadsResponseBodyResult) SetDeletedFile(v string) *ListMergeRequestFilesReadsResponseBodyResult {
	s.DeletedFile = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBodyResult) SetNewFile(v bool) *ListMergeRequestFilesReadsResponseBodyResult {
	s.NewFile = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBodyResult) SetNewFilePath(v string) *ListMergeRequestFilesReadsResponseBodyResult {
	s.NewFilePath = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBodyResult) SetOldFilePath(v string) *ListMergeRequestFilesReadsResponseBodyResult {
	s.OldFilePath = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBodyResult) SetReadUsers(v []*ListMergeRequestFilesReadsResponseBodyResultReadUsers) *ListMergeRequestFilesReadsResponseBodyResult {
	s.ReadUsers = v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBodyResult) SetRenamedFile(v string) *ListMergeRequestFilesReadsResponseBodyResult {
	s.RenamedFile = &v
	return s
}

type ListMergeRequestFilesReadsResponseBodyResultReadUsers struct {
	// example:
	//
	// 204485087002425236
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListMergeRequestFilesReadsResponseBodyResultReadUsers) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestFilesReadsResponseBodyResultReadUsers) GoString() string {
	return s.String()
}

func (s *ListMergeRequestFilesReadsResponseBodyResultReadUsers) SetAliyunPk(v string) *ListMergeRequestFilesReadsResponseBodyResultReadUsers {
	s.AliyunPk = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBodyResultReadUsers) SetAvatarUrl(v string) *ListMergeRequestFilesReadsResponseBodyResultReadUsers {
	s.AvatarUrl = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBodyResultReadUsers) SetEmail(v string) *ListMergeRequestFilesReadsResponseBodyResultReadUsers {
	s.Email = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBodyResultReadUsers) SetName(v string) *ListMergeRequestFilesReadsResponseBodyResultReadUsers {
	s.Name = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBodyResultReadUsers) SetState(v string) *ListMergeRequestFilesReadsResponseBodyResultReadUsers {
	s.State = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponseBodyResultReadUsers) SetUsername(v string) *ListMergeRequestFilesReadsResponseBodyResultReadUsers {
	s.Username = &v
	return s
}

type ListMergeRequestFilesReadsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMergeRequestFilesReadsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMergeRequestFilesReadsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestFilesReadsResponse) GoString() string {
	return s.String()
}

func (s *ListMergeRequestFilesReadsResponse) SetHeaders(v map[string]*string) *ListMergeRequestFilesReadsResponse {
	s.Headers = v
	return s
}

func (s *ListMergeRequestFilesReadsResponse) SetStatusCode(v int32) *ListMergeRequestFilesReadsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMergeRequestFilesReadsResponse) SetBody(v *ListMergeRequestFilesReadsResponseBody) *ListMergeRequestFilesReadsResponse {
	s.Body = v
	return s
}

type ListMergeRequestLabelsRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	LocalId *int64 `json:"localId,omitempty" xml:"localId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s ListMergeRequestLabelsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestLabelsRequest) GoString() string {
	return s.String()
}

func (s *ListMergeRequestLabelsRequest) SetAccessToken(v string) *ListMergeRequestLabelsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListMergeRequestLabelsRequest) SetLocalId(v int64) *ListMergeRequestLabelsRequest {
	s.LocalId = &v
	return s
}

func (s *ListMergeRequestLabelsRequest) SetOrganizationId(v string) *ListMergeRequestLabelsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListMergeRequestLabelsRequest) SetRepositoryIdentity(v string) *ListMergeRequestLabelsRequest {
	s.RepositoryIdentity = &v
	return s
}

type ListMergeRequestLabelsResponseBody struct {
	// example:
	//
	// Invalid.IdNotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 4D6AF7CC-B43B-5454-86AB-023D25E44868
	RequestId *string                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListMergeRequestLabelsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListMergeRequestLabelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestLabelsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMergeRequestLabelsResponseBody) SetErrorCode(v string) *ListMergeRequestLabelsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListMergeRequestLabelsResponseBody) SetErrorMessage(v string) *ListMergeRequestLabelsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListMergeRequestLabelsResponseBody) SetRequestId(v string) *ListMergeRequestLabelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMergeRequestLabelsResponseBody) SetResult(v []*ListMergeRequestLabelsResponseBodyResult) *ListMergeRequestLabelsResponseBody {
	s.Result = v
	return s
}

func (s *ListMergeRequestLabelsResponseBody) SetSuccess(v bool) *ListMergeRequestLabelsResponseBody {
	s.Success = &v
	return s
}

type ListMergeRequestLabelsResponseBodyResult struct {
	// example:
	//
	// #A16AD7
	Color       *string `json:"color,omitempty" xml:"color,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// f2bf0e0b4ce34a348b2d971c69a1d11f
	Id   *string `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListMergeRequestLabelsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestLabelsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListMergeRequestLabelsResponseBodyResult) SetColor(v string) *ListMergeRequestLabelsResponseBodyResult {
	s.Color = &v
	return s
}

func (s *ListMergeRequestLabelsResponseBodyResult) SetDescription(v string) *ListMergeRequestLabelsResponseBodyResult {
	s.Description = &v
	return s
}

func (s *ListMergeRequestLabelsResponseBodyResult) SetId(v string) *ListMergeRequestLabelsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListMergeRequestLabelsResponseBodyResult) SetName(v string) *ListMergeRequestLabelsResponseBodyResult {
	s.Name = &v
	return s
}

type ListMergeRequestLabelsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMergeRequestLabelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMergeRequestLabelsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestLabelsResponse) GoString() string {
	return s.String()
}

func (s *ListMergeRequestLabelsResponse) SetHeaders(v map[string]*string) *ListMergeRequestLabelsResponse {
	s.Headers = v
	return s
}

func (s *ListMergeRequestLabelsResponse) SetStatusCode(v int32) *ListMergeRequestLabelsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMergeRequestLabelsResponse) SetBody(v *ListMergeRequestLabelsResponseBody) *ListMergeRequestLabelsResponse {
	s.Body = v
	return s
}

type ListMergeRequestPatchSetsRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 4
	LocalId *int64 `json:"localId,omitempty" xml:"localId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s ListMergeRequestPatchSetsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestPatchSetsRequest) GoString() string {
	return s.String()
}

func (s *ListMergeRequestPatchSetsRequest) SetAccessToken(v string) *ListMergeRequestPatchSetsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListMergeRequestPatchSetsRequest) SetLocalId(v int64) *ListMergeRequestPatchSetsRequest {
	s.LocalId = &v
	return s
}

func (s *ListMergeRequestPatchSetsRequest) SetOrganizationId(v string) *ListMergeRequestPatchSetsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListMergeRequestPatchSetsRequest) SetRepositoryIdentity(v string) *ListMergeRequestPatchSetsRequest {
	s.RepositoryIdentity = &v
	return s
}

type ListMergeRequestPatchSetsResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListMergeRequestPatchSetsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListMergeRequestPatchSetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestPatchSetsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMergeRequestPatchSetsResponseBody) SetErrorCode(v string) *ListMergeRequestPatchSetsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListMergeRequestPatchSetsResponseBody) SetErrorMessage(v string) *ListMergeRequestPatchSetsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListMergeRequestPatchSetsResponseBody) SetRequestId(v string) *ListMergeRequestPatchSetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMergeRequestPatchSetsResponseBody) SetResult(v []*ListMergeRequestPatchSetsResponseBodyResult) *ListMergeRequestPatchSetsResponseBody {
	s.Result = v
	return s
}

func (s *ListMergeRequestPatchSetsResponseBody) SetSuccess(v bool) *ListMergeRequestPatchSetsResponseBody {
	s.Success = &v
	return s
}

type ListMergeRequestPatchSetsResponseBodyResult struct {
	// example:
	//
	// 1a072f5367c21f9de3464b8c0ee8546e47764d2d
	CommitId *string `json:"commitId,omitempty" xml:"commitId,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 513fcfd81a9142d2bb0db4f72c0aa15b
	PatchSetBizId *string `json:"patchSetBizId,omitempty" xml:"patchSetBizId,omitempty"`
	PatchSetName  *string `json:"patchSetName,omitempty" xml:"patchSetName,omitempty"`
	// example:
	//
	// 1
	PatchSetNo *int64 `json:"patchSetNo,omitempty" xml:"patchSetNo,omitempty"`
	// example:
	//
	// MERGE_SOURCE
	RelatedMergeItemType *string `json:"relatedMergeItemType,omitempty" xml:"relatedMergeItemType,omitempty"`
	// example:
	//
	// 1a072f53
	ShortCommitId *string `json:"shortCommitId,omitempty" xml:"shortCommitId,omitempty"`
}

func (s ListMergeRequestPatchSetsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestPatchSetsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListMergeRequestPatchSetsResponseBodyResult) SetCommitId(v string) *ListMergeRequestPatchSetsResponseBodyResult {
	s.CommitId = &v
	return s
}

func (s *ListMergeRequestPatchSetsResponseBodyResult) SetCreatedAt(v string) *ListMergeRequestPatchSetsResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *ListMergeRequestPatchSetsResponseBodyResult) SetPatchSetBizId(v string) *ListMergeRequestPatchSetsResponseBodyResult {
	s.PatchSetBizId = &v
	return s
}

func (s *ListMergeRequestPatchSetsResponseBodyResult) SetPatchSetName(v string) *ListMergeRequestPatchSetsResponseBodyResult {
	s.PatchSetName = &v
	return s
}

func (s *ListMergeRequestPatchSetsResponseBodyResult) SetPatchSetNo(v int64) *ListMergeRequestPatchSetsResponseBodyResult {
	s.PatchSetNo = &v
	return s
}

func (s *ListMergeRequestPatchSetsResponseBodyResult) SetRelatedMergeItemType(v string) *ListMergeRequestPatchSetsResponseBodyResult {
	s.RelatedMergeItemType = &v
	return s
}

func (s *ListMergeRequestPatchSetsResponseBodyResult) SetShortCommitId(v string) *ListMergeRequestPatchSetsResponseBodyResult {
	s.ShortCommitId = &v
	return s
}

type ListMergeRequestPatchSetsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMergeRequestPatchSetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMergeRequestPatchSetsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestPatchSetsResponse) GoString() string {
	return s.String()
}

func (s *ListMergeRequestPatchSetsResponse) SetHeaders(v map[string]*string) *ListMergeRequestPatchSetsResponse {
	s.Headers = v
	return s
}

func (s *ListMergeRequestPatchSetsResponse) SetStatusCode(v int32) *ListMergeRequestPatchSetsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMergeRequestPatchSetsResponse) SetBody(v *ListMergeRequestPatchSetsResponseBody) *ListMergeRequestPatchSetsResponse {
	s.Body = v
	return s
}

type ListMergeRequestsRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// 1234567890
	AuthorIds     *string `json:"authorIds,omitempty" xml:"authorIds,omitempty"`
	CreatedAfter  *string `json:"createdAfter,omitempty" xml:"createdAfter,omitempty"`
	CreatedBefore *string `json:"createdBefore,omitempty" xml:"createdBefore,omitempty"`
	// example:
	//
	// new
	Filter *string `json:"filter,omitempty" xml:"filter,omitempty"`
	// example:
	//
	// 889910, 889911
	GroupIds *string `json:"groupIds,omitempty" xml:"groupIds,omitempty"`
	LabelIds *string `json:"labelIds,omitempty" xml:"labelIds,omitempty"`
	// example:
	//
	// updated_at
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// 2308912, 2308913
	ProjectIds *string `json:"projectIds,omitempty" xml:"projectIds,omitempty"`
	// example:
	//
	// 1234567890123
	ReviewerIds *string `json:"reviewerIds,omitempty" xml:"reviewerIds,omitempty"`
	// example:
	//
	// test-search
	Search *string `json:"search,omitempty" xml:"search,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
	// example:
	//
	// opened
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ListMergeRequestsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestsRequest) GoString() string {
	return s.String()
}

func (s *ListMergeRequestsRequest) SetAccessToken(v string) *ListMergeRequestsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListMergeRequestsRequest) SetAuthorIds(v string) *ListMergeRequestsRequest {
	s.AuthorIds = &v
	return s
}

func (s *ListMergeRequestsRequest) SetCreatedAfter(v string) *ListMergeRequestsRequest {
	s.CreatedAfter = &v
	return s
}

func (s *ListMergeRequestsRequest) SetCreatedBefore(v string) *ListMergeRequestsRequest {
	s.CreatedBefore = &v
	return s
}

func (s *ListMergeRequestsRequest) SetFilter(v string) *ListMergeRequestsRequest {
	s.Filter = &v
	return s
}

func (s *ListMergeRequestsRequest) SetGroupIds(v string) *ListMergeRequestsRequest {
	s.GroupIds = &v
	return s
}

func (s *ListMergeRequestsRequest) SetLabelIds(v string) *ListMergeRequestsRequest {
	s.LabelIds = &v
	return s
}

func (s *ListMergeRequestsRequest) SetOrderBy(v string) *ListMergeRequestsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListMergeRequestsRequest) SetOrganizationId(v string) *ListMergeRequestsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListMergeRequestsRequest) SetPage(v int64) *ListMergeRequestsRequest {
	s.Page = &v
	return s
}

func (s *ListMergeRequestsRequest) SetPageSize(v int64) *ListMergeRequestsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMergeRequestsRequest) SetProjectIds(v string) *ListMergeRequestsRequest {
	s.ProjectIds = &v
	return s
}

func (s *ListMergeRequestsRequest) SetReviewerIds(v string) *ListMergeRequestsRequest {
	s.ReviewerIds = &v
	return s
}

func (s *ListMergeRequestsRequest) SetSearch(v string) *ListMergeRequestsRequest {
	s.Search = &v
	return s
}

func (s *ListMergeRequestsRequest) SetSort(v string) *ListMergeRequestsRequest {
	s.Sort = &v
	return s
}

func (s *ListMergeRequestsRequest) SetState(v string) *ListMergeRequestsRequest {
	s.State = &v
	return s
}

type ListMergeRequestsResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListMergeRequestsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 30
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListMergeRequestsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMergeRequestsResponseBody) SetErrorCode(v string) *ListMergeRequestsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListMergeRequestsResponseBody) SetErrorMessage(v string) *ListMergeRequestsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListMergeRequestsResponseBody) SetRequestId(v string) *ListMergeRequestsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMergeRequestsResponseBody) SetResult(v []*ListMergeRequestsResponseBodyResult) *ListMergeRequestsResponseBody {
	s.Result = v
	return s
}

func (s *ListMergeRequestsResponseBody) SetSuccess(v bool) *ListMergeRequestsResponseBody {
	s.Success = &v
	return s
}

func (s *ListMergeRequestsResponseBody) SetTotal(v int64) *ListMergeRequestsResponseBody {
	s.Total = &v
	return s
}

type ListMergeRequestsResponseBodyResult struct {
	Author *ListMergeRequestsResponseBodyResultAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// WEB
	CreationMethod *string `json:"creationMethod,omitempty" xml:"creationMethod,omitempty"`
	Description    *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// xxx
	DetailUrl *string `json:"detailUrl,omitempty" xml:"detailUrl,omitempty"`
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 1
	Iid    *int64                                       `json:"iid,omitempty" xml:"iid,omitempty"`
	Labels []*ListMergeRequestsResponseBodyResultLabels `json:"labels,omitempty" xml:"labels,omitempty" type:"Repeated"`
	// example:
	//
	// 2
	LocalId        *int64  `json:"localId,omitempty" xml:"localId,omitempty"`
	MergedRevision *string `json:"mergedRevision,omitempty" xml:"mergedRevision,omitempty"`
	// example:
	//
	// bca90244c4b749e0b109df52ac0eb570
	MrBizId           *string `json:"mrBizId,omitempty" xml:"mrBizId,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// true
	NewMergeRequestIdentifier *bool `json:"newMergeRequestIdentifier,omitempty" xml:"newMergeRequestIdentifier,omitempty"`
	// example:
	//
	// UNDER_REVIEW
	NewVersionState *string `json:"newVersionState,omitempty" xml:"newVersionState,omitempty"`
	// example:
	//
	// 2369234
	ProjectId *int64                                          `json:"projectId,omitempty" xml:"projectId,omitempty"`
	Reviewers []*ListMergeRequestsResponseBodyResultReviewers `json:"reviewers,omitempty" xml:"reviewers,omitempty" type:"Repeated"`
	// example:
	//
	// test-merge-source-branch
	SourceBranch *string `json:"sourceBranch,omitempty" xml:"sourceBranch,omitempty"`
	// example:
	//
	// 2876119
	SourceProjectId *int64 `json:"sourceProjectId,omitempty" xml:"sourceProjectId,omitempty"`
	// example:
	//
	// BRANCH
	SourceType *string `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	// example:
	//
	// git@xxx:xxx/test/test.git
	SshUrl *string `json:"sshUrl,omitempty" xml:"sshUrl,omitempty"`
	// example:
	//
	// opened
	State       *string                                           `json:"state,omitempty" xml:"state,omitempty"`
	Subscribers []*ListMergeRequestsResponseBodyResultSubscribers `json:"subscribers,omitempty" xml:"subscribers,omitempty" type:"Repeated"`
	// example:
	//
	// true
	SupportMergeFFOnly *bool `json:"supportMergeFFOnly,omitempty" xml:"supportMergeFFOnly,omitempty"`
	// example:
	//
	// test-merge-target-branch
	TargetBranch *string `json:"targetBranch,omitempty" xml:"targetBranch,omitempty"`
	// example:
	//
	// 2876119
	TargetProjectId *int64 `json:"targetProjectId,omitempty" xml:"targetProjectId,omitempty"`
	// example:
	//
	// BRANCH
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
	Title      *string `json:"title,omitempty" xml:"title,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// ""
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
	// example:
	//
	// false
	WorkInProgress *bool `json:"workInProgress,omitempty" xml:"workInProgress,omitempty"`
}

func (s ListMergeRequestsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListMergeRequestsResponseBodyResult) SetAuthor(v *ListMergeRequestsResponseBodyResultAuthor) *ListMergeRequestsResponseBodyResult {
	s.Author = v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetCreatedAt(v string) *ListMergeRequestsResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetCreationMethod(v string) *ListMergeRequestsResponseBodyResult {
	s.CreationMethod = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetDescription(v string) *ListMergeRequestsResponseBodyResult {
	s.Description = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetDetailUrl(v string) *ListMergeRequestsResponseBodyResult {
	s.DetailUrl = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetId(v int64) *ListMergeRequestsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetIid(v int64) *ListMergeRequestsResponseBodyResult {
	s.Iid = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetLabels(v []*ListMergeRequestsResponseBodyResultLabels) *ListMergeRequestsResponseBodyResult {
	s.Labels = v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetLocalId(v int64) *ListMergeRequestsResponseBodyResult {
	s.LocalId = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetMergedRevision(v string) *ListMergeRequestsResponseBodyResult {
	s.MergedRevision = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetMrBizId(v string) *ListMergeRequestsResponseBodyResult {
	s.MrBizId = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetNameWithNamespace(v string) *ListMergeRequestsResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetNewMergeRequestIdentifier(v bool) *ListMergeRequestsResponseBodyResult {
	s.NewMergeRequestIdentifier = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetNewVersionState(v string) *ListMergeRequestsResponseBodyResult {
	s.NewVersionState = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetProjectId(v int64) *ListMergeRequestsResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetReviewers(v []*ListMergeRequestsResponseBodyResultReviewers) *ListMergeRequestsResponseBodyResult {
	s.Reviewers = v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetSourceBranch(v string) *ListMergeRequestsResponseBodyResult {
	s.SourceBranch = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetSourceProjectId(v int64) *ListMergeRequestsResponseBodyResult {
	s.SourceProjectId = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetSourceType(v string) *ListMergeRequestsResponseBodyResult {
	s.SourceType = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetSshUrl(v string) *ListMergeRequestsResponseBodyResult {
	s.SshUrl = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetState(v string) *ListMergeRequestsResponseBodyResult {
	s.State = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetSubscribers(v []*ListMergeRequestsResponseBodyResultSubscribers) *ListMergeRequestsResponseBodyResult {
	s.Subscribers = v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetSupportMergeFFOnly(v bool) *ListMergeRequestsResponseBodyResult {
	s.SupportMergeFFOnly = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetTargetBranch(v string) *ListMergeRequestsResponseBodyResult {
	s.TargetBranch = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetTargetProjectId(v int64) *ListMergeRequestsResponseBodyResult {
	s.TargetProjectId = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetTargetType(v string) *ListMergeRequestsResponseBodyResult {
	s.TargetType = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetTitle(v string) *ListMergeRequestsResponseBodyResult {
	s.Title = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetUpdatedAt(v string) *ListMergeRequestsResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetWebUrl(v string) *ListMergeRequestsResponseBodyResult {
	s.WebUrl = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResult) SetWorkInProgress(v bool) *ListMergeRequestsResponseBodyResult {
	s.WorkInProgress = &v
	return s
}

type ListMergeRequestsResponseBodyResultAuthor struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 19927
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// root-test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListMergeRequestsResponseBodyResultAuthor) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestsResponseBodyResultAuthor) GoString() string {
	return s.String()
}

func (s *ListMergeRequestsResponseBodyResultAuthor) SetAvatarUrl(v string) *ListMergeRequestsResponseBodyResultAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultAuthor) SetEmail(v string) *ListMergeRequestsResponseBodyResultAuthor {
	s.Email = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultAuthor) SetId(v int64) *ListMergeRequestsResponseBodyResultAuthor {
	s.Id = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultAuthor) SetName(v string) *ListMergeRequestsResponseBodyResultAuthor {
	s.Name = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultAuthor) SetState(v string) *ListMergeRequestsResponseBodyResultAuthor {
	s.State = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultAuthor) SetUsername(v string) *ListMergeRequestsResponseBodyResultAuthor {
	s.Username = &v
	return s
}

type ListMergeRequestsResponseBodyResultLabels struct {
	Color       *string `json:"color,omitempty" xml:"color,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	Id          *string `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListMergeRequestsResponseBodyResultLabels) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestsResponseBodyResultLabels) GoString() string {
	return s.String()
}

func (s *ListMergeRequestsResponseBodyResultLabels) SetColor(v string) *ListMergeRequestsResponseBodyResultLabels {
	s.Color = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultLabels) SetDescription(v string) *ListMergeRequestsResponseBodyResultLabels {
	s.Description = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultLabels) SetId(v string) *ListMergeRequestsResponseBodyResultLabels {
	s.Id = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultLabels) SetName(v string) *ListMergeRequestsResponseBodyResultLabels {
	s.Name = &v
	return s
}

type ListMergeRequestsResponseBodyResultReviewers struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email        *string `json:"email,omitempty" xml:"email,omitempty"`
	HasCommented *bool   `json:"hasCommented,omitempty" xml:"hasCommented,omitempty"`
	HasReviewed  *bool   `json:"hasReviewed,omitempty" xml:"hasReviewed,omitempty"`
	// example:
	//
	// 43127
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-review-user
	Name                *string `json:"name,omitempty" xml:"name,omitempty"`
	ReviewOpinionStatus *string `json:"reviewOpinionStatus,omitempty" xml:"reviewOpinionStatus,omitempty"`
	ReviewTime          *string `json:"reviewTime,omitempty" xml:"reviewTime,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// approved
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// root-test-review-user
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListMergeRequestsResponseBodyResultReviewers) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestsResponseBodyResultReviewers) GoString() string {
	return s.String()
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetAvatarUrl(v string) *ListMergeRequestsResponseBodyResultReviewers {
	s.AvatarUrl = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetEmail(v string) *ListMergeRequestsResponseBodyResultReviewers {
	s.Email = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetHasCommented(v bool) *ListMergeRequestsResponseBodyResultReviewers {
	s.HasCommented = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetHasReviewed(v bool) *ListMergeRequestsResponseBodyResultReviewers {
	s.HasReviewed = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetId(v int64) *ListMergeRequestsResponseBodyResultReviewers {
	s.Id = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetName(v string) *ListMergeRequestsResponseBodyResultReviewers {
	s.Name = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetReviewOpinionStatus(v string) *ListMergeRequestsResponseBodyResultReviewers {
	s.ReviewOpinionStatus = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetReviewTime(v string) *ListMergeRequestsResponseBodyResultReviewers {
	s.ReviewTime = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetState(v string) *ListMergeRequestsResponseBodyResultReviewers {
	s.State = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetStatus(v string) *ListMergeRequestsResponseBodyResultReviewers {
	s.Status = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultReviewers) SetUsername(v string) *ListMergeRequestsResponseBodyResultReviewers {
	s.Username = &v
	return s
}

type ListMergeRequestsResponseBodyResultSubscribers struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 1876119
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-subscriber
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// root-test-subscriber
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListMergeRequestsResponseBodyResultSubscribers) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestsResponseBodyResultSubscribers) GoString() string {
	return s.String()
}

func (s *ListMergeRequestsResponseBodyResultSubscribers) SetAvatarUrl(v string) *ListMergeRequestsResponseBodyResultSubscribers {
	s.AvatarUrl = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultSubscribers) SetEmail(v string) *ListMergeRequestsResponseBodyResultSubscribers {
	s.Email = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultSubscribers) SetId(v int64) *ListMergeRequestsResponseBodyResultSubscribers {
	s.Id = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultSubscribers) SetName(v string) *ListMergeRequestsResponseBodyResultSubscribers {
	s.Name = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultSubscribers) SetState(v string) *ListMergeRequestsResponseBodyResultSubscribers {
	s.State = &v
	return s
}

func (s *ListMergeRequestsResponseBodyResultSubscribers) SetUsername(v string) *ListMergeRequestsResponseBodyResultSubscribers {
	s.Username = &v
	return s
}

type ListMergeRequestsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMergeRequestsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMergeRequestsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMergeRequestsResponse) GoString() string {
	return s.String()
}

func (s *ListMergeRequestsResponse) SetHeaders(v map[string]*string) *ListMergeRequestsResponse {
	s.Headers = v
	return s
}

func (s *ListMergeRequestsResponse) SetStatusCode(v int32) *ListMergeRequestsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMergeRequestsResponse) SetBody(v *ListMergeRequestsResponseBody) *ListMergeRequestsResponse {
	s.Body = v
	return s
}

type ListOrganizationMembersRequest struct {
	// 返回信息中是否包含第三方信息，默认不包含。
	ContainsExternInfo *bool `json:"containsExternInfo,omitempty" xml:"containsExternInfo,omitempty"`
	// example:
	//
	// 1236666
	ExternUid *string `json:"externUid,omitempty" xml:"externUid,omitempty"`
	// example:
	//
	// 1631845101798
	JoinTimeFrom *int64 `json:"joinTimeFrom,omitempty" xml:"joinTimeFrom,omitempty"`
	// example:
	//
	// 1631845101798
	JoinTimeTo *int64 `json:"joinTimeTo,omitempty" xml:"joinTimeTo,omitempty"`
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// ""
	NextToken              *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	OrganizationMemberName *string `json:"organizationMemberName,omitempty" xml:"organizationMemberName,omitempty"`
	// example:
	//
	// Dingtalk
	Provider *string `json:"provider,omitempty" xml:"provider,omitempty"`
	// example:
	//
	// normal
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ListOrganizationMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOrganizationMembersRequest) GoString() string {
	return s.String()
}

func (s *ListOrganizationMembersRequest) SetContainsExternInfo(v bool) *ListOrganizationMembersRequest {
	s.ContainsExternInfo = &v
	return s
}

func (s *ListOrganizationMembersRequest) SetExternUid(v string) *ListOrganizationMembersRequest {
	s.ExternUid = &v
	return s
}

func (s *ListOrganizationMembersRequest) SetJoinTimeFrom(v int64) *ListOrganizationMembersRequest {
	s.JoinTimeFrom = &v
	return s
}

func (s *ListOrganizationMembersRequest) SetJoinTimeTo(v int64) *ListOrganizationMembersRequest {
	s.JoinTimeTo = &v
	return s
}

func (s *ListOrganizationMembersRequest) SetMaxResults(v int64) *ListOrganizationMembersRequest {
	s.MaxResults = &v
	return s
}

func (s *ListOrganizationMembersRequest) SetNextToken(v string) *ListOrganizationMembersRequest {
	s.NextToken = &v
	return s
}

func (s *ListOrganizationMembersRequest) SetOrganizationMemberName(v string) *ListOrganizationMembersRequest {
	s.OrganizationMemberName = &v
	return s
}

func (s *ListOrganizationMembersRequest) SetProvider(v string) *ListOrganizationMembersRequest {
	s.Provider = &v
	return s
}

func (s *ListOrganizationMembersRequest) SetState(v string) *ListOrganizationMembersRequest {
	s.State = &v
	return s
}

type ListOrganizationMembersResponseBody struct {
	// example:
	//
	// null
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error info
	ErrorMessage *string                                       `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Members      []*ListOrganizationMembersResponseBodyMembers `json:"members,omitempty" xml:"members,omitempty" type:"Repeated"`
	// example:
	//
	// ""
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// FC93CE1A-8D7A-13A9-8306-7465DE2E5C0F
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 15
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ListOrganizationMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOrganizationMembersResponseBody) GoString() string {
	return s.String()
}

func (s *ListOrganizationMembersResponseBody) SetErrorCode(v string) *ListOrganizationMembersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListOrganizationMembersResponseBody) SetErrorMessage(v string) *ListOrganizationMembersResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListOrganizationMembersResponseBody) SetMembers(v []*ListOrganizationMembersResponseBodyMembers) *ListOrganizationMembersResponseBody {
	s.Members = v
	return s
}

func (s *ListOrganizationMembersResponseBody) SetNextToken(v string) *ListOrganizationMembersResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListOrganizationMembersResponseBody) SetRequestId(v string) *ListOrganizationMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOrganizationMembersResponseBody) SetSuccess(v bool) *ListOrganizationMembersResponseBody {
	s.Success = &v
	return s
}

func (s *ListOrganizationMembersResponseBody) SetTotalCount(v int64) *ListOrganizationMembersResponseBody {
	s.TotalCount = &v
	return s
}

type ListOrganizationMembersResponseBodyMembers struct {
	// example:
	//
	// 123456677888
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	// example:
	//
	// 1631845101798
	Birthday  *int64    `json:"birthday,omitempty" xml:"birthday,omitempty"`
	DeptLists []*string `json:"deptLists,omitempty" xml:"deptLists,omitempty" type:"Repeated"`
	// example:
	//
	// 123@mail.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 1631845101798
	HiredDate  *int64                                                `json:"hiredDate,omitempty" xml:"hiredDate,omitempty"`
	Identities *ListOrganizationMembersResponseBodyMembersIdentities `json:"identities,omitempty" xml:"identities,omitempty" type:"Struct"`
	JobNumber  *string                                               `json:"jobNumber,omitempty" xml:"jobNumber,omitempty"`
	// example:
	//
	// 1631845101798
	JoinTime *int64 `json:"joinTime,omitempty" xml:"joinTime,omitempty"`
	// example:
	//
	// 1631845101798
	LastVisitTime *int64 `json:"lastVisitTime,omitempty" xml:"lastVisitTime,omitempty"`
	// example:
	//
	// 1390000****
	Mobile                 *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	OrganizationMemberName *string `json:"organizationMemberName,omitempty" xml:"organizationMemberName,omitempty"`
	// example:
	//
	// 8fc0c9ff039711dd64acd000
	OrganizationRoleId   *string `json:"organizationRoleId,omitempty" xml:"organizationRoleId,omitempty"`
	OrganizationRoleName *string `json:"organizationRoleName,omitempty" xml:"organizationRoleName,omitempty"`
	// example:
	//
	// normal
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s ListOrganizationMembersResponseBodyMembers) String() string {
	return tea.Prettify(s)
}

func (s ListOrganizationMembersResponseBodyMembers) GoString() string {
	return s.String()
}

func (s *ListOrganizationMembersResponseBodyMembers) SetAccountId(v string) *ListOrganizationMembersResponseBodyMembers {
	s.AccountId = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetBirthday(v int64) *ListOrganizationMembersResponseBodyMembers {
	s.Birthday = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetDeptLists(v []*string) *ListOrganizationMembersResponseBodyMembers {
	s.DeptLists = v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetEmail(v string) *ListOrganizationMembersResponseBodyMembers {
	s.Email = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetHiredDate(v int64) *ListOrganizationMembersResponseBodyMembers {
	s.HiredDate = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetIdentities(v *ListOrganizationMembersResponseBodyMembersIdentities) *ListOrganizationMembersResponseBodyMembers {
	s.Identities = v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetJobNumber(v string) *ListOrganizationMembersResponseBodyMembers {
	s.JobNumber = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetJoinTime(v int64) *ListOrganizationMembersResponseBodyMembers {
	s.JoinTime = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetLastVisitTime(v int64) *ListOrganizationMembersResponseBodyMembers {
	s.LastVisitTime = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetMobile(v string) *ListOrganizationMembersResponseBodyMembers {
	s.Mobile = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetOrganizationMemberName(v string) *ListOrganizationMembersResponseBodyMembers {
	s.OrganizationMemberName = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetOrganizationRoleId(v string) *ListOrganizationMembersResponseBodyMembers {
	s.OrganizationRoleId = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetOrganizationRoleName(v string) *ListOrganizationMembersResponseBodyMembers {
	s.OrganizationRoleName = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembers) SetState(v string) *ListOrganizationMembersResponseBodyMembers {
	s.State = &v
	return s
}

type ListOrganizationMembersResponseBodyMembersIdentities struct {
	// example:
	//
	// 1236666
	ExternUid *string `json:"externUid,omitempty" xml:"externUid,omitempty"`
	// example:
	//
	// Dingtalk
	Provider *string `json:"provider,omitempty" xml:"provider,omitempty"`
}

func (s ListOrganizationMembersResponseBodyMembersIdentities) String() string {
	return tea.Prettify(s)
}

func (s ListOrganizationMembersResponseBodyMembersIdentities) GoString() string {
	return s.String()
}

func (s *ListOrganizationMembersResponseBodyMembersIdentities) SetExternUid(v string) *ListOrganizationMembersResponseBodyMembersIdentities {
	s.ExternUid = &v
	return s
}

func (s *ListOrganizationMembersResponseBodyMembersIdentities) SetProvider(v string) *ListOrganizationMembersResponseBodyMembersIdentities {
	s.Provider = &v
	return s
}

type ListOrganizationMembersResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOrganizationMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOrganizationMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOrganizationMembersResponse) GoString() string {
	return s.String()
}

func (s *ListOrganizationMembersResponse) SetHeaders(v map[string]*string) *ListOrganizationMembersResponse {
	s.Headers = v
	return s
}

func (s *ListOrganizationMembersResponse) SetStatusCode(v int32) *ListOrganizationMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOrganizationMembersResponse) SetBody(v *ListOrganizationMembersResponseBody) *ListOrganizationMembersResponse {
	s.Body = v
	return s
}

type ListOrganizationsRequest struct {
	// example:
	//
	// 5
	AccessLevel *int32  `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// 60
	MinAccessLevel *int32 `json:"minAccessLevel,omitempty" xml:"minAccessLevel,omitempty"`
}

func (s ListOrganizationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOrganizationsRequest) GoString() string {
	return s.String()
}

func (s *ListOrganizationsRequest) SetAccessLevel(v int32) *ListOrganizationsRequest {
	s.AccessLevel = &v
	return s
}

func (s *ListOrganizationsRequest) SetAccessToken(v string) *ListOrganizationsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListOrganizationsRequest) SetMinAccessLevel(v int32) *ListOrganizationsRequest {
	s.MinAccessLevel = &v
	return s
}

type ListOrganizationsResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 95FE5953-FF5B-5F80-94AD-FFF97D990FE0
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListOrganizationsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 2
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListOrganizationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOrganizationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListOrganizationsResponseBody) SetErrorCode(v string) *ListOrganizationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListOrganizationsResponseBody) SetErrorMessage(v string) *ListOrganizationsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListOrganizationsResponseBody) SetRequestId(v string) *ListOrganizationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOrganizationsResponseBody) SetResult(v []*ListOrganizationsResponseBodyResult) *ListOrganizationsResponseBody {
	s.Result = v
	return s
}

func (s *ListOrganizationsResponseBody) SetSuccess(v bool) *ListOrganizationsResponseBody {
	s.Success = &v
	return s
}

func (s *ListOrganizationsResponseBody) SetTotal(v int64) *ListOrganizationsResponseBody {
	s.Total = &v
	return s
}

type ListOrganizationsResponseBodyResult struct {
	// example:
	//
	// 60
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// 5240
	Id                *int64  `json:"id,omitempty" xml:"id,omitempty"`
	NamespaceId       *string `json:"namespaceId,omitempty" xml:"namespaceId,omitempty"`
	OrganizationAlias *string `json:"organizationAlias,omitempty" xml:"organizationAlias,omitempty"`
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId   *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	OrganizationName *string `json:"organizationName,omitempty" xml:"organizationName,omitempty"`
	// example:
	//
	// ORG_ADMIN
	OrganizationRole *string `json:"organizationRole,omitempty" xml:"organizationRole,omitempty"`
}

func (s ListOrganizationsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListOrganizationsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListOrganizationsResponseBodyResult) SetAccessLevel(v int32) *ListOrganizationsResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *ListOrganizationsResponseBodyResult) SetId(v int64) *ListOrganizationsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListOrganizationsResponseBodyResult) SetNamespaceId(v string) *ListOrganizationsResponseBodyResult {
	s.NamespaceId = &v
	return s
}

func (s *ListOrganizationsResponseBodyResult) SetOrganizationAlias(v string) *ListOrganizationsResponseBodyResult {
	s.OrganizationAlias = &v
	return s
}

func (s *ListOrganizationsResponseBodyResult) SetOrganizationId(v string) *ListOrganizationsResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ListOrganizationsResponseBodyResult) SetOrganizationName(v string) *ListOrganizationsResponseBodyResult {
	s.OrganizationName = &v
	return s
}

func (s *ListOrganizationsResponseBodyResult) SetOrganizationRole(v string) *ListOrganizationsResponseBodyResult {
	s.OrganizationRole = &v
	return s
}

type ListOrganizationsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOrganizationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOrganizationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOrganizationsResponse) GoString() string {
	return s.String()
}

func (s *ListOrganizationsResponse) SetHeaders(v map[string]*string) *ListOrganizationsResponse {
	s.Headers = v
	return s
}

func (s *ListOrganizationsResponse) SetStatusCode(v int32) *ListOrganizationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOrganizationsResponse) SetBody(v *ListOrganizationsResponseBody) *ListOrganizationsResponse {
	s.Body = v
	return s
}

type ListPipelineGroupPipelinesRequest struct {
	// example:
	//
	// 1586863220000
	CreateEndTime *int64 `json:"createEndTime,omitempty" xml:"createEndTime,omitempty"`
	// example:
	//
	// 1586863220000
	CreateStartTime *int64 `json:"createStartTime,omitempty" xml:"createStartTime,omitempty"`
	// example:
	//
	// 1586863220000
	ExecuteEndTime *int64 `json:"executeEndTime,omitempty" xml:"executeEndTime,omitempty"`
	// example:
	//
	// 1586863220000
	ExecuteStartTime *int64 `json:"executeStartTime,omitempty" xml:"executeStartTime,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// aaaa
	NextToken    *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	PipelineName *string `json:"pipelineName,omitempty" xml:"pipelineName,omitempty"`
	// example:
	//
	// RUNNING,SUCCESS
	ResultStatusList *string `json:"resultStatusList,omitempty" xml:"resultStatusList,omitempty"`
}

func (s ListPipelineGroupPipelinesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineGroupPipelinesRequest) GoString() string {
	return s.String()
}

func (s *ListPipelineGroupPipelinesRequest) SetCreateEndTime(v int64) *ListPipelineGroupPipelinesRequest {
	s.CreateEndTime = &v
	return s
}

func (s *ListPipelineGroupPipelinesRequest) SetCreateStartTime(v int64) *ListPipelineGroupPipelinesRequest {
	s.CreateStartTime = &v
	return s
}

func (s *ListPipelineGroupPipelinesRequest) SetExecuteEndTime(v int64) *ListPipelineGroupPipelinesRequest {
	s.ExecuteEndTime = &v
	return s
}

func (s *ListPipelineGroupPipelinesRequest) SetExecuteStartTime(v int64) *ListPipelineGroupPipelinesRequest {
	s.ExecuteStartTime = &v
	return s
}

func (s *ListPipelineGroupPipelinesRequest) SetMaxResults(v int64) *ListPipelineGroupPipelinesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListPipelineGroupPipelinesRequest) SetNextToken(v string) *ListPipelineGroupPipelinesRequest {
	s.NextToken = &v
	return s
}

func (s *ListPipelineGroupPipelinesRequest) SetPipelineName(v string) *ListPipelineGroupPipelinesRequest {
	s.PipelineName = &v
	return s
}

func (s *ListPipelineGroupPipelinesRequest) SetResultStatusList(v string) *ListPipelineGroupPipelinesRequest {
	s.ResultStatusList = &v
	return s
}

type ListPipelineGroupPipelinesResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// aaaa
	NextToken *string                                            `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Pipelines []*ListPipelineGroupPipelinesResponseBodyPipelines `json:"pipelines,omitempty" xml:"pipelines,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 20
	TotalCount *int32 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ListPipelineGroupPipelinesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineGroupPipelinesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelineGroupPipelinesResponseBody) SetErrorCode(v string) *ListPipelineGroupPipelinesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListPipelineGroupPipelinesResponseBody) SetErrorMessage(v string) *ListPipelineGroupPipelinesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListPipelineGroupPipelinesResponseBody) SetNextToken(v string) *ListPipelineGroupPipelinesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListPipelineGroupPipelinesResponseBody) SetPipelines(v []*ListPipelineGroupPipelinesResponseBodyPipelines) *ListPipelineGroupPipelinesResponseBody {
	s.Pipelines = v
	return s
}

func (s *ListPipelineGroupPipelinesResponseBody) SetRequestId(v string) *ListPipelineGroupPipelinesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPipelineGroupPipelinesResponseBody) SetSuccess(v bool) *ListPipelineGroupPipelinesResponseBody {
	s.Success = &v
	return s
}

func (s *ListPipelineGroupPipelinesResponseBody) SetTotalCount(v int32) *ListPipelineGroupPipelinesResponseBody {
	s.TotalCount = &v
	return s
}

type ListPipelineGroupPipelinesResponseBodyPipelines struct {
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 1111
	PipelineId   *int64  `json:"pipelineId,omitempty" xml:"pipelineId,omitempty"`
	PipelineName *string `json:"pipelineName,omitempty" xml:"pipelineName,omitempty"`
}

func (s ListPipelineGroupPipelinesResponseBodyPipelines) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineGroupPipelinesResponseBodyPipelines) GoString() string {
	return s.String()
}

func (s *ListPipelineGroupPipelinesResponseBodyPipelines) SetCreateTime(v int64) *ListPipelineGroupPipelinesResponseBodyPipelines {
	s.CreateTime = &v
	return s
}

func (s *ListPipelineGroupPipelinesResponseBodyPipelines) SetPipelineId(v int64) *ListPipelineGroupPipelinesResponseBodyPipelines {
	s.PipelineId = &v
	return s
}

func (s *ListPipelineGroupPipelinesResponseBodyPipelines) SetPipelineName(v string) *ListPipelineGroupPipelinesResponseBodyPipelines {
	s.PipelineName = &v
	return s
}

type ListPipelineGroupPipelinesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelineGroupPipelinesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelineGroupPipelinesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineGroupPipelinesResponse) GoString() string {
	return s.String()
}

func (s *ListPipelineGroupPipelinesResponse) SetHeaders(v map[string]*string) *ListPipelineGroupPipelinesResponse {
	s.Headers = v
	return s
}

func (s *ListPipelineGroupPipelinesResponse) SetStatusCode(v int32) *ListPipelineGroupPipelinesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelineGroupPipelinesResponse) SetBody(v *ListPipelineGroupPipelinesResponseBody) *ListPipelineGroupPipelinesResponse {
	s.Body = v
	return s
}

type ListPipelineGroupsRequest struct {
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// aaaaaaaaaa
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
}

func (s ListPipelineGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListPipelineGroupsRequest) SetMaxResults(v int64) *ListPipelineGroupsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListPipelineGroupsRequest) SetNextToken(v string) *ListPipelineGroupsRequest {
	s.NextToken = &v
	return s
}

type ListPipelineGroupsResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ssaassasass
	NextToken      *string                                         `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	PipelineGroups []*ListPipelineGroupsResponseBodyPipelineGroups `json:"pipelineGroups,omitempty" xml:"pipelineGroups,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 50
	TotalCount *int32 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ListPipelineGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelineGroupsResponseBody) SetErrorCode(v string) *ListPipelineGroupsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListPipelineGroupsResponseBody) SetErrorMessage(v string) *ListPipelineGroupsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListPipelineGroupsResponseBody) SetNextToken(v string) *ListPipelineGroupsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListPipelineGroupsResponseBody) SetPipelineGroups(v []*ListPipelineGroupsResponseBodyPipelineGroups) *ListPipelineGroupsResponseBody {
	s.PipelineGroups = v
	return s
}

func (s *ListPipelineGroupsResponseBody) SetRequestId(v string) *ListPipelineGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPipelineGroupsResponseBody) SetSuccess(v bool) *ListPipelineGroupsResponseBody {
	s.Success = &v
	return s
}

func (s *ListPipelineGroupsResponseBody) SetTotalCount(v int32) *ListPipelineGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type ListPipelineGroupsResponseBodyPipelineGroups struct {
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 111
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListPipelineGroupsResponseBodyPipelineGroups) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineGroupsResponseBodyPipelineGroups) GoString() string {
	return s.String()
}

func (s *ListPipelineGroupsResponseBodyPipelineGroups) SetCreateTime(v int64) *ListPipelineGroupsResponseBodyPipelineGroups {
	s.CreateTime = &v
	return s
}

func (s *ListPipelineGroupsResponseBodyPipelineGroups) SetId(v int64) *ListPipelineGroupsResponseBodyPipelineGroups {
	s.Id = &v
	return s
}

func (s *ListPipelineGroupsResponseBodyPipelineGroups) SetName(v string) *ListPipelineGroupsResponseBodyPipelineGroups {
	s.Name = &v
	return s
}

type ListPipelineGroupsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelineGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelineGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListPipelineGroupsResponse) SetHeaders(v map[string]*string) *ListPipelineGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListPipelineGroupsResponse) SetStatusCode(v int32) *ListPipelineGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelineGroupsResponse) SetBody(v *ListPipelineGroupsResponseBody) *ListPipelineGroupsResponse {
	s.Body = v
	return s
}

type ListPipelineJobHistorysRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// DEPLOY
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10_ssasasa
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// xsaxsa
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
}

func (s ListPipelineJobHistorysRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineJobHistorysRequest) GoString() string {
	return s.String()
}

func (s *ListPipelineJobHistorysRequest) SetCategory(v string) *ListPipelineJobHistorysRequest {
	s.Category = &v
	return s
}

func (s *ListPipelineJobHistorysRequest) SetIdentifier(v string) *ListPipelineJobHistorysRequest {
	s.Identifier = &v
	return s
}

func (s *ListPipelineJobHistorysRequest) SetMaxResults(v int64) *ListPipelineJobHistorysRequest {
	s.MaxResults = &v
	return s
}

func (s *ListPipelineJobHistorysRequest) SetNextToken(v string) *ListPipelineJobHistorysRequest {
	s.NextToken = &v
	return s
}

type ListPipelineJobHistorysResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string                                    `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Jobs         []*ListPipelineJobHistorysResponseBodyJobs `json:"jobs,omitempty" xml:"jobs,omitempty" type:"Repeated"`
	// example:
	//
	// xsxxs
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 20
	TotalCount *int32 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ListPipelineJobHistorysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineJobHistorysResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelineJobHistorysResponseBody) SetErrorCode(v string) *ListPipelineJobHistorysResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBody) SetErrorMessage(v string) *ListPipelineJobHistorysResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBody) SetJobs(v []*ListPipelineJobHistorysResponseBodyJobs) *ListPipelineJobHistorysResponseBody {
	s.Jobs = v
	return s
}

func (s *ListPipelineJobHistorysResponseBody) SetNextToken(v string) *ListPipelineJobHistorysResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBody) SetRequestId(v string) *ListPipelineJobHistorysResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBody) SetSuccess(v bool) *ListPipelineJobHistorysResponseBody {
	s.Success = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBody) SetTotalCount(v int32) *ListPipelineJobHistorysResponseBody {
	s.TotalCount = &v
	return s
}

type ListPipelineJobHistorysResponseBodyJobs struct {
	// example:
	//
	// 1
	ExecuteNumber *int32 `json:"executeNumber,omitempty" xml:"executeNumber,omitempty"`
	// example:
	//
	// 10_xaxxsxa
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 123
	JobId   *int64  `json:"jobId,omitempty" xml:"jobId,omitempty"`
	JobName *string `json:"jobName,omitempty" xml:"jobName,omitempty"`
	// example:
	//
	// ssaasssa
	OperatorAccountId *string `json:"operatorAccountId,omitempty" xml:"operatorAccountId,omitempty"`
	// example:
	//
	// 123
	PipelineId *int64 `json:"pipelineId,omitempty" xml:"pipelineId,omitempty"`
	// example:
	//
	// 123
	PipelineRunId *int64 `json:"pipelineRunId,omitempty" xml:"pipelineRunId,omitempty"`
	// example:
	//
	// {}
	Sources *string `json:"sources,omitempty" xml:"sources,omitempty"`
	// example:
	//
	// SUCCESS
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ListPipelineJobHistorysResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineJobHistorysResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListPipelineJobHistorysResponseBodyJobs) SetExecuteNumber(v int32) *ListPipelineJobHistorysResponseBodyJobs {
	s.ExecuteNumber = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBodyJobs) SetIdentifier(v string) *ListPipelineJobHistorysResponseBodyJobs {
	s.Identifier = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBodyJobs) SetJobId(v int64) *ListPipelineJobHistorysResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBodyJobs) SetJobName(v string) *ListPipelineJobHistorysResponseBodyJobs {
	s.JobName = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBodyJobs) SetOperatorAccountId(v string) *ListPipelineJobHistorysResponseBodyJobs {
	s.OperatorAccountId = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBodyJobs) SetPipelineId(v int64) *ListPipelineJobHistorysResponseBodyJobs {
	s.PipelineId = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBodyJobs) SetPipelineRunId(v int64) *ListPipelineJobHistorysResponseBodyJobs {
	s.PipelineRunId = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBodyJobs) SetSources(v string) *ListPipelineJobHistorysResponseBodyJobs {
	s.Sources = &v
	return s
}

func (s *ListPipelineJobHistorysResponseBodyJobs) SetStatus(v string) *ListPipelineJobHistorysResponseBodyJobs {
	s.Status = &v
	return s
}

type ListPipelineJobHistorysResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelineJobHistorysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelineJobHistorysResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineJobHistorysResponse) GoString() string {
	return s.String()
}

func (s *ListPipelineJobHistorysResponse) SetHeaders(v map[string]*string) *ListPipelineJobHistorysResponse {
	s.Headers = v
	return s
}

func (s *ListPipelineJobHistorysResponse) SetStatusCode(v int32) *ListPipelineJobHistorysResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelineJobHistorysResponse) SetBody(v *ListPipelineJobHistorysResponseBody) *ListPipelineJobHistorysResponse {
	s.Body = v
	return s
}

type ListPipelineJobsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// DEPLOY
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
}

func (s ListPipelineJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineJobsRequest) GoString() string {
	return s.String()
}

func (s *ListPipelineJobsRequest) SetCategory(v string) *ListPipelineJobsRequest {
	s.Category = &v
	return s
}

type ListPipelineJobsResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string                             `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Jobs         []*ListPipelineJobsResponseBodyJobs `json:"jobs,omitempty" xml:"jobs,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListPipelineJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelineJobsResponseBody) SetErrorCode(v string) *ListPipelineJobsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListPipelineJobsResponseBody) SetErrorMessage(v string) *ListPipelineJobsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListPipelineJobsResponseBody) SetJobs(v []*ListPipelineJobsResponseBodyJobs) *ListPipelineJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListPipelineJobsResponseBody) SetRequestId(v string) *ListPipelineJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPipelineJobsResponseBody) SetSuccess(v bool) *ListPipelineJobsResponseBody {
	s.Success = &v
	return s
}

type ListPipelineJobsResponseBodyJobs struct {
	// example:
	//
	// ss_saxsxsxs
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	JobName    *string `json:"jobName,omitempty" xml:"jobName,omitempty"`
	// example:
	//
	// 123
	LastJobId *int64 `json:"lastJobId,omitempty" xml:"lastJobId,omitempty"`
	// example:
	//
	// {}
	LastJobParams *string `json:"lastJobParams,omitempty" xml:"lastJobParams,omitempty"`
}

func (s ListPipelineJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListPipelineJobsResponseBodyJobs) SetIdentifier(v string) *ListPipelineJobsResponseBodyJobs {
	s.Identifier = &v
	return s
}

func (s *ListPipelineJobsResponseBodyJobs) SetJobName(v string) *ListPipelineJobsResponseBodyJobs {
	s.JobName = &v
	return s
}

func (s *ListPipelineJobsResponseBodyJobs) SetLastJobId(v int64) *ListPipelineJobsResponseBodyJobs {
	s.LastJobId = &v
	return s
}

func (s *ListPipelineJobsResponseBodyJobs) SetLastJobParams(v string) *ListPipelineJobsResponseBodyJobs {
	s.LastJobParams = &v
	return s
}

type ListPipelineJobsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelineJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelineJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineJobsResponse) GoString() string {
	return s.String()
}

func (s *ListPipelineJobsResponse) SetHeaders(v map[string]*string) *ListPipelineJobsResponse {
	s.Headers = v
	return s
}

func (s *ListPipelineJobsResponse) SetStatusCode(v int32) *ListPipelineJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelineJobsResponse) SetBody(v *ListPipelineJobsResponseBody) *ListPipelineJobsResponse {
	s.Body = v
	return s
}

type ListPipelineRelationsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// VARIABLE_GROUP
	RelObjectType *string `json:"relObjectType,omitempty" xml:"relObjectType,omitempty"`
}

func (s ListPipelineRelationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRelationsRequest) GoString() string {
	return s.String()
}

func (s *ListPipelineRelationsRequest) SetRelObjectType(v string) *ListPipelineRelationsRequest {
	s.RelObjectType = &v
	return s
}

type ListPipelineRelationsResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage      *string                                               `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	PipelineRelations []*ListPipelineRelationsResponseBodyPipelineRelations `json:"pipelineRelations,omitempty" xml:"pipelineRelations,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListPipelineRelationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRelationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelineRelationsResponseBody) SetErrorCode(v string) *ListPipelineRelationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListPipelineRelationsResponseBody) SetErrorMessage(v string) *ListPipelineRelationsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListPipelineRelationsResponseBody) SetPipelineRelations(v []*ListPipelineRelationsResponseBodyPipelineRelations) *ListPipelineRelationsResponseBody {
	s.PipelineRelations = v
	return s
}

func (s *ListPipelineRelationsResponseBody) SetRequestId(v string) *ListPipelineRelationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPipelineRelationsResponseBody) SetSuccess(v bool) *ListPipelineRelationsResponseBody {
	s.Success = &v
	return s
}

type ListPipelineRelationsResponseBodyPipelineRelations struct {
	// example:
	//
	// 12234
	RefObjectId *int64 `json:"refObjectId,omitempty" xml:"refObjectId,omitempty"`
}

func (s ListPipelineRelationsResponseBodyPipelineRelations) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRelationsResponseBodyPipelineRelations) GoString() string {
	return s.String()
}

func (s *ListPipelineRelationsResponseBodyPipelineRelations) SetRefObjectId(v int64) *ListPipelineRelationsResponseBodyPipelineRelations {
	s.RefObjectId = &v
	return s
}

type ListPipelineRelationsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelineRelationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelineRelationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRelationsResponse) GoString() string {
	return s.String()
}

func (s *ListPipelineRelationsResponse) SetHeaders(v map[string]*string) *ListPipelineRelationsResponse {
	s.Headers = v
	return s
}

func (s *ListPipelineRelationsResponse) SetStatusCode(v int32) *ListPipelineRelationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelineRelationsResponse) SetBody(v *ListPipelineRelationsResponseBody) *ListPipelineRelationsResponse {
	s.Body = v
	return s
}

type ListPipelineRunsRequest struct {
	// example:
	//
	// 1586863220000
	EndTime *int64 `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// aaaaaa
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// 1586863220000
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// example:
	//
	// RUNNING
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 1
	TriggerMode *int32 `json:"triggerMode,omitempty" xml:"triggerMode,omitempty"`
}

func (s ListPipelineRunsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunsRequest) GoString() string {
	return s.String()
}

func (s *ListPipelineRunsRequest) SetEndTime(v int64) *ListPipelineRunsRequest {
	s.EndTime = &v
	return s
}

func (s *ListPipelineRunsRequest) SetMaxResults(v int64) *ListPipelineRunsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListPipelineRunsRequest) SetNextToken(v string) *ListPipelineRunsRequest {
	s.NextToken = &v
	return s
}

func (s *ListPipelineRunsRequest) SetStartTime(v int64) *ListPipelineRunsRequest {
	s.StartTime = &v
	return s
}

func (s *ListPipelineRunsRequest) SetStatus(v string) *ListPipelineRunsRequest {
	s.Status = &v
	return s
}

func (s *ListPipelineRunsRequest) SetTriggerMode(v int32) *ListPipelineRunsRequest {
	s.TriggerMode = &v
	return s
}

type ListPipelineRunsResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// xzxsasasaas
	NextToken    *string                                     `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	PipelineRuns []*ListPipelineRunsResponseBodyPipelineRuns `json:"pipelineRuns,omitempty" xml:"pipelineRuns,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 50
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ListPipelineRunsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelineRunsResponseBody) SetErrorCode(v string) *ListPipelineRunsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListPipelineRunsResponseBody) SetErrorMessage(v string) *ListPipelineRunsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListPipelineRunsResponseBody) SetNextToken(v string) *ListPipelineRunsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListPipelineRunsResponseBody) SetPipelineRuns(v []*ListPipelineRunsResponseBodyPipelineRuns) *ListPipelineRunsResponseBody {
	s.PipelineRuns = v
	return s
}

func (s *ListPipelineRunsResponseBody) SetRequestId(v string) *ListPipelineRunsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPipelineRunsResponseBody) SetSuccess(v bool) *ListPipelineRunsResponseBody {
	s.Success = &v
	return s
}

func (s *ListPipelineRunsResponseBody) SetTotalCount(v int64) *ListPipelineRunsResponseBody {
	s.TotalCount = &v
	return s
}

type ListPipelineRunsResponseBodyPipelineRuns struct {
	// example:
	//
	// 1222222222
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 1586863220000
	EndTime *int64 `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// 1234
	PipelineId *int64 `json:"pipelineId,omitempty" xml:"pipelineId,omitempty"`
	// example:
	//
	// 11
	PipelineRunId *int64 `json:"pipelineRunId,omitempty" xml:"pipelineRunId,omitempty"`
	// example:
	//
	// 1586863220000
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// example:
	//
	// 状态 FAIL 运行失败 SUCCESS 运行成功 RUNNING 运行中
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 1
	TriggerMode *int64 `json:"triggerMode,omitempty" xml:"triggerMode,omitempty"`
}

func (s ListPipelineRunsResponseBodyPipelineRuns) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunsResponseBodyPipelineRuns) GoString() string {
	return s.String()
}

func (s *ListPipelineRunsResponseBodyPipelineRuns) SetCreatorAccountId(v string) *ListPipelineRunsResponseBodyPipelineRuns {
	s.CreatorAccountId = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPipelineRuns) SetEndTime(v int64) *ListPipelineRunsResponseBodyPipelineRuns {
	s.EndTime = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPipelineRuns) SetPipelineId(v int64) *ListPipelineRunsResponseBodyPipelineRuns {
	s.PipelineId = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPipelineRuns) SetPipelineRunId(v int64) *ListPipelineRunsResponseBodyPipelineRuns {
	s.PipelineRunId = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPipelineRuns) SetStartTime(v int64) *ListPipelineRunsResponseBodyPipelineRuns {
	s.StartTime = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPipelineRuns) SetStatus(v string) *ListPipelineRunsResponseBodyPipelineRuns {
	s.Status = &v
	return s
}

func (s *ListPipelineRunsResponseBodyPipelineRuns) SetTriggerMode(v int64) *ListPipelineRunsResponseBodyPipelineRuns {
	s.TriggerMode = &v
	return s
}

type ListPipelineRunsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelineRunsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelineRunsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelineRunsResponse) GoString() string {
	return s.String()
}

func (s *ListPipelineRunsResponse) SetHeaders(v map[string]*string) *ListPipelineRunsResponse {
	s.Headers = v
	return s
}

func (s *ListPipelineRunsResponse) SetStatusCode(v int32) *ListPipelineRunsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelineRunsResponse) SetBody(v *ListPipelineRunsResponseBody) *ListPipelineRunsResponse {
	s.Body = v
	return s
}

type ListPipelinesRequest struct {
	// example:
	//
	// 1586863220000
	CreateEndTime *int64 `json:"createEndTime,omitempty" xml:"createEndTime,omitempty"`
	// example:
	//
	// 1586863220000
	CreateStartTime *int64 `json:"createStartTime,omitempty" xml:"createStartTime,omitempty"`
	// example:
	//
	// 112122121
	CreatorAccountIds *string `json:"creatorAccountIds,omitempty" xml:"creatorAccountIds,omitempty"`
	// example:
	//
	// 1111111
	ExecuteAccountIds *string `json:"executeAccountIds,omitempty" xml:"executeAccountIds,omitempty"`
	// example:
	//
	// 1586863220000
	ExecuteEndTime *int64 `json:"executeEndTime,omitempty" xml:"executeEndTime,omitempty"`
	// example:
	//
	// 1586863220000
	ExecuteStartTime *int64 `json:"executeStartTime,omitempty" xml:"executeStartTime,omitempty"`
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// aaaaaaaaaa
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// 流水线
	PipelineName *string `json:"pipelineName,omitempty" xml:"pipelineName,omitempty"`
	// example:
	//
	// RUNNING,SUCCESS
	StatusList *string `json:"statusList,omitempty" xml:"statusList,omitempty"`
}

func (s ListPipelinesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesRequest) GoString() string {
	return s.String()
}

func (s *ListPipelinesRequest) SetCreateEndTime(v int64) *ListPipelinesRequest {
	s.CreateEndTime = &v
	return s
}

func (s *ListPipelinesRequest) SetCreateStartTime(v int64) *ListPipelinesRequest {
	s.CreateStartTime = &v
	return s
}

func (s *ListPipelinesRequest) SetCreatorAccountIds(v string) *ListPipelinesRequest {
	s.CreatorAccountIds = &v
	return s
}

func (s *ListPipelinesRequest) SetExecuteAccountIds(v string) *ListPipelinesRequest {
	s.ExecuteAccountIds = &v
	return s
}

func (s *ListPipelinesRequest) SetExecuteEndTime(v int64) *ListPipelinesRequest {
	s.ExecuteEndTime = &v
	return s
}

func (s *ListPipelinesRequest) SetExecuteStartTime(v int64) *ListPipelinesRequest {
	s.ExecuteStartTime = &v
	return s
}

func (s *ListPipelinesRequest) SetMaxResults(v int64) *ListPipelinesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListPipelinesRequest) SetNextToken(v string) *ListPipelinesRequest {
	s.NextToken = &v
	return s
}

func (s *ListPipelinesRequest) SetPipelineName(v string) *ListPipelinesRequest {
	s.PipelineName = &v
	return s
}

func (s *ListPipelinesRequest) SetStatusList(v string) *ListPipelinesRequest {
	s.StatusList = &v
	return s
}

type ListPipelinesResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ssaassasass
	NextToken *string                               `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Pipelines []*ListPipelinesResponseBodyPipelines `json:"pipelines,omitempty" xml:"pipelines,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 50
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ListPipelinesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponseBody) SetErrorCode(v string) *ListPipelinesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListPipelinesResponseBody) SetErrorMessage(v string) *ListPipelinesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListPipelinesResponseBody) SetNextToken(v string) *ListPipelinesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListPipelinesResponseBody) SetPipelines(v []*ListPipelinesResponseBodyPipelines) *ListPipelinesResponseBody {
	s.Pipelines = v
	return s
}

func (s *ListPipelinesResponseBody) SetRequestId(v string) *ListPipelinesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPipelinesResponseBody) SetSuccess(v bool) *ListPipelinesResponseBody {
	s.Success = &v
	return s
}

func (s *ListPipelinesResponseBody) SetTotalCount(v int64) *ListPipelinesResponseBody {
	s.TotalCount = &v
	return s
}

type ListPipelinesResponseBodyPipelines struct {
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 22121222
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	GroupId          *int64  `json:"groupId,omitempty" xml:"groupId,omitempty"`
	// example:
	//
	// 124
	PipelineId *int64 `json:"pipelineId,omitempty" xml:"pipelineId,omitempty"`
	// example:
	//
	// 流水线
	PipelineName *string `json:"pipelineName,omitempty" xml:"pipelineName,omitempty"`
}

func (s ListPipelinesResponseBodyPipelines) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponseBodyPipelines) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponseBodyPipelines) SetCreateTime(v int64) *ListPipelinesResponseBodyPipelines {
	s.CreateTime = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelines) SetCreatorAccountId(v string) *ListPipelinesResponseBodyPipelines {
	s.CreatorAccountId = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelines) SetGroupId(v int64) *ListPipelinesResponseBodyPipelines {
	s.GroupId = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelines) SetPipelineId(v int64) *ListPipelinesResponseBodyPipelines {
	s.PipelineId = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelines) SetPipelineName(v string) *ListPipelinesResponseBodyPipelines {
	s.PipelineName = &v
	return s
}

type ListPipelinesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelinesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelinesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponse) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponse) SetHeaders(v map[string]*string) *ListPipelinesResponse {
	s.Headers = v
	return s
}

func (s *ListPipelinesResponse) SetStatusCode(v int32) *ListPipelinesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelinesResponse) SetBody(v *ListPipelinesResponseBody) *ListPipelinesResponse {
	s.Body = v
	return s
}

type ListProjectLabelsRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// label_name
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int32 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
	// example:
	//
	// TEST
	Search *string `json:"search,omitempty" xml:"search,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
	// example:
	//
	// false
	WithCounts *bool `json:"withCounts,omitempty" xml:"withCounts,omitempty"`
}

func (s ListProjectLabelsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectLabelsRequest) GoString() string {
	return s.String()
}

func (s *ListProjectLabelsRequest) SetAccessToken(v string) *ListProjectLabelsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListProjectLabelsRequest) SetOrderBy(v string) *ListProjectLabelsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListProjectLabelsRequest) SetOrganizationId(v string) *ListProjectLabelsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListProjectLabelsRequest) SetPage(v int32) *ListProjectLabelsRequest {
	s.Page = &v
	return s
}

func (s *ListProjectLabelsRequest) SetPageSize(v int64) *ListProjectLabelsRequest {
	s.PageSize = &v
	return s
}

func (s *ListProjectLabelsRequest) SetRepositoryIdentity(v string) *ListProjectLabelsRequest {
	s.RepositoryIdentity = &v
	return s
}

func (s *ListProjectLabelsRequest) SetSearch(v string) *ListProjectLabelsRequest {
	s.Search = &v
	return s
}

func (s *ListProjectLabelsRequest) SetSort(v string) *ListProjectLabelsRequest {
	s.Sort = &v
	return s
}

func (s *ListProjectLabelsRequest) SetWithCounts(v bool) *ListProjectLabelsRequest {
	s.WithCounts = &v
	return s
}

type ListProjectLabelsResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListProjectLabelsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 30
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListProjectLabelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectLabelsResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectLabelsResponseBody) SetErrorCode(v string) *ListProjectLabelsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListProjectLabelsResponseBody) SetErrorMessage(v string) *ListProjectLabelsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListProjectLabelsResponseBody) SetRequestId(v string) *ListProjectLabelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProjectLabelsResponseBody) SetResult(v []*ListProjectLabelsResponseBodyResult) *ListProjectLabelsResponseBody {
	s.Result = v
	return s
}

func (s *ListProjectLabelsResponseBody) SetSuccess(v bool) *ListProjectLabelsResponseBody {
	s.Success = &v
	return s
}

func (s *ListProjectLabelsResponseBody) SetTotal(v int64) *ListProjectLabelsResponseBody {
	s.Total = &v
	return s
}

type ListProjectLabelsResponseBodyResult struct {
	// example:
	//
	// #A16AD7
	Color       *string `json:"color,omitempty" xml:"color,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// f2bf0e0b4ce34a348b2d971c69a1d11f
	Id   *string `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 1
	OpenMergeRequestsCount *int64 `json:"openMergeRequestsCount,omitempty" xml:"openMergeRequestsCount,omitempty"`
}

func (s ListProjectLabelsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListProjectLabelsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListProjectLabelsResponseBodyResult) SetColor(v string) *ListProjectLabelsResponseBodyResult {
	s.Color = &v
	return s
}

func (s *ListProjectLabelsResponseBodyResult) SetDescription(v string) *ListProjectLabelsResponseBodyResult {
	s.Description = &v
	return s
}

func (s *ListProjectLabelsResponseBodyResult) SetId(v string) *ListProjectLabelsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListProjectLabelsResponseBodyResult) SetName(v string) *ListProjectLabelsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ListProjectLabelsResponseBodyResult) SetOpenMergeRequestsCount(v int64) *ListProjectLabelsResponseBodyResult {
	s.OpenMergeRequestsCount = &v
	return s
}

type ListProjectLabelsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectLabelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectLabelsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectLabelsResponse) GoString() string {
	return s.String()
}

func (s *ListProjectLabelsResponse) SetHeaders(v map[string]*string) *ListProjectLabelsResponse {
	s.Headers = v
	return s
}

func (s *ListProjectLabelsResponse) SetStatusCode(v int32) *ListProjectLabelsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectLabelsResponse) SetBody(v *ListProjectLabelsResponseBody) *ListProjectLabelsResponse {
	s.Body = v
	return s
}

type ListProjectMembersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Space
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
}

func (s ListProjectMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersRequest) GoString() string {
	return s.String()
}

func (s *ListProjectMembersRequest) SetTargetType(v string) *ListProjectMembersRequest {
	s.TargetType = &v
	return s
}

type ListProjectMembersResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string                                  `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	Members  []*ListProjectMembersResponseBodyMembers `json:"members,omitempty" xml:"members,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListProjectMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBody) SetErrorCode(v string) *ListProjectMembersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListProjectMembersResponseBody) SetErrorMsg(v string) *ListProjectMembersResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListProjectMembersResponseBody) SetMembers(v []*ListProjectMembersResponseBodyMembers) *ListProjectMembersResponseBody {
	s.Members = v
	return s
}

func (s *ListProjectMembersResponseBody) SetRequestId(v string) *ListProjectMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProjectMembersResponseBody) SetSuccess(v bool) *ListProjectMembersResponseBody {
	s.Success = &v
	return s
}

type ListProjectMembersResponseBodyMembers struct {
	// example:
	//
	// null
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// example:
	//
	// https://xxxxxx.png
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// null
	DingTalkId *string `json:"dingTalkId,omitempty" xml:"dingTalkId,omitempty"`
	// example:
	//
	// 名称
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	// example:
	//
	// mingcheng
	DisplayNickName *string `json:"displayNickName,omitempty" xml:"displayNickName,omitempty"`
	// example:
	//
	// 名称
	DisplayRealName *string                                        `json:"displayRealName,omitempty" xml:"displayRealName,omitempty"`
	Division        *ListProjectMembersResponseBodyMembersDivision `json:"division,omitempty" xml:"division,omitempty" type:"Struct"`
	// example:
	//
	// accountsxxxx@mail.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// null
	Gender *string `json:"gender,omitempty" xml:"gender,omitempty"`
	// example:
	//
	// 19xxxx31947xxxx
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 135xxxxxxxxx
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// example:
	//
	// name
	NameEn *string `json:"nameEn,omitempty" xml:"nameEn,omitempty"`
	// example:
	//
	// 昵称
	NickName *string `json:"nickName,omitempty" xml:"nickName,omitempty"`
	// example:
	//
	// nicheng
	NickNamePinyin       *string                                                    `json:"nickNamePinyin,omitempty" xml:"nickNamePinyin,omitempty"`
	OrganizationUserInfo *ListProjectMembersResponseBodyMembersOrganizationUserInfo `json:"organizationUserInfo,omitempty" xml:"organizationUserInfo,omitempty" type:"Struct"`
	// example:
	//
	// xxx
	RealName *string `json:"realName,omitempty" xml:"realName,omitempty"`
	// example:
	//
	// xxx
	RealNamePinyin *string `json:"realNamePinyin,omitempty" xml:"realNamePinyin,omitempty"`
	// 角色名称
	RoleName *string `json:"roleName,omitempty" xml:"roleName,omitempty"`
	// example:
	//
	// User
	Stamp *string `json:"stamp,omitempty" xml:"stamp,omitempty"`
	// example:
	//
	// null
	TbRoleId *string `json:"tbRoleId,omitempty" xml:"tbRoleId,omitempty"`
}

func (s ListProjectMembersResponseBodyMembers) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBodyMembers) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBodyMembers) SetAccount(v string) *ListProjectMembersResponseBodyMembers {
	s.Account = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetAvatar(v string) *ListProjectMembersResponseBodyMembers {
	s.Avatar = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetDingTalkId(v string) *ListProjectMembersResponseBodyMembers {
	s.DingTalkId = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetDisplayName(v string) *ListProjectMembersResponseBodyMembers {
	s.DisplayName = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetDisplayNickName(v string) *ListProjectMembersResponseBodyMembers {
	s.DisplayNickName = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetDisplayRealName(v string) *ListProjectMembersResponseBodyMembers {
	s.DisplayRealName = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetDivision(v *ListProjectMembersResponseBodyMembersDivision) *ListProjectMembersResponseBodyMembers {
	s.Division = v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetEmail(v string) *ListProjectMembersResponseBodyMembers {
	s.Email = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetGender(v string) *ListProjectMembersResponseBodyMembers {
	s.Gender = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetIdentifier(v string) *ListProjectMembersResponseBodyMembers {
	s.Identifier = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetMobile(v string) *ListProjectMembersResponseBodyMembers {
	s.Mobile = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetNameEn(v string) *ListProjectMembersResponseBodyMembers {
	s.NameEn = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetNickName(v string) *ListProjectMembersResponseBodyMembers {
	s.NickName = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetNickNamePinyin(v string) *ListProjectMembersResponseBodyMembers {
	s.NickNamePinyin = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetOrganizationUserInfo(v *ListProjectMembersResponseBodyMembersOrganizationUserInfo) *ListProjectMembersResponseBodyMembers {
	s.OrganizationUserInfo = v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetRealName(v string) *ListProjectMembersResponseBodyMembers {
	s.RealName = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetRealNamePinyin(v string) *ListProjectMembersResponseBodyMembers {
	s.RealNamePinyin = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetRoleName(v string) *ListProjectMembersResponseBodyMembers {
	s.RoleName = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetStamp(v string) *ListProjectMembersResponseBodyMembers {
	s.Stamp = &v
	return s
}

func (s *ListProjectMembersResponseBodyMembers) SetTbRoleId(v string) *ListProjectMembersResponseBodyMembers {
	s.TbRoleId = &v
	return s
}

type ListProjectMembersResponseBodyMembersDivision struct {
	// example:
	//
	// 1345xxxxxxx947xxxx
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
}

func (s ListProjectMembersResponseBodyMembersDivision) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBodyMembersDivision) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBodyMembersDivision) SetIdentifier(v string) *ListProjectMembersResponseBodyMembersDivision {
	s.Identifier = &v
	return s
}

type ListProjectMembersResponseBodyMembersOrganizationUserInfo struct {
	// example:
	//
	// 5e7xxxxb3cd3711dd6xxx2c
	OrganizationIdentifier *string `json:"organizationIdentifier,omitempty" xml:"organizationIdentifier,omitempty"`
}

func (s ListProjectMembersResponseBodyMembersOrganizationUserInfo) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponseBodyMembersOrganizationUserInfo) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponseBodyMembersOrganizationUserInfo) SetOrganizationIdentifier(v string) *ListProjectMembersResponseBodyMembersOrganizationUserInfo {
	s.OrganizationIdentifier = &v
	return s
}

type ListProjectMembersResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectMembersResponse) GoString() string {
	return s.String()
}

func (s *ListProjectMembersResponse) SetHeaders(v map[string]*string) *ListProjectMembersResponse {
	s.Headers = v
	return s
}

func (s *ListProjectMembersResponse) SetStatusCode(v int32) *ListProjectMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectMembersResponse) SetBody(v *ListProjectMembersResponseBody) *ListProjectMembersResponse {
	s.Body = v
	return s
}

type ListProjectTemplatesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Project
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
}

func (s ListProjectTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListProjectTemplatesRequest) SetCategory(v string) *ListProjectTemplatesRequest {
	s.Category = &v
	return s
}

type ListProjectTemplatesResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success   *bool                                        `json:"success,omitempty" xml:"success,omitempty"`
	Templates []*ListProjectTemplatesResponseBodyTemplates `json:"templates,omitempty" xml:"templates,omitempty" type:"Repeated"`
}

func (s ListProjectTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectTemplatesResponseBody) SetErrorCode(v string) *ListProjectTemplatesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListProjectTemplatesResponseBody) SetErrorMsg(v string) *ListProjectTemplatesResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListProjectTemplatesResponseBody) SetRequestId(v string) *ListProjectTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProjectTemplatesResponseBody) SetSuccess(v bool) *ListProjectTemplatesResponseBody {
	s.Success = &v
	return s
}

func (s *ListProjectTemplatesResponseBody) SetTemplates(v []*ListProjectTemplatesResponseBodyTemplates) *ListProjectTemplatesResponseBody {
	s.Templates = v
	return s
}

type ListProjectTemplatesResponseBodyTemplates struct {
	// example:
	//
	// null
	CopyFrom *string `json:"copyFrom,omitempty" xml:"copyFrom,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// 迭代的具体信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1623916393000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// https://img.xxxx.png
	Icon *string `json:"icon,omitempty" xml:"icon,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// 专用模板
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// Test Template
	NameEn *string `json:"nameEn,omitempty" xml:"nameEn,omitempty"`
	// example:
	//
	// Project
	ResourceCategory *string `json:"resourceCategory,omitempty" xml:"resourceCategory,omitempty"`
	// example:
	//
	// null
	ResourceType *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
	// example:
	//
	// null
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// null
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	// example:
	//
	// 4
	Type *int64 `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListProjectTemplatesResponseBodyTemplates) String() string {
	return tea.Prettify(s)
}

func (s ListProjectTemplatesResponseBodyTemplates) GoString() string {
	return s.String()
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetCopyFrom(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.CopyFrom = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetCreator(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.Creator = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetDescription(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.Description = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetGmtCreate(v int64) *ListProjectTemplatesResponseBodyTemplates {
	s.GmtCreate = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetGmtModified(v int64) *ListProjectTemplatesResponseBodyTemplates {
	s.GmtModified = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetIcon(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.Icon = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetIdentifier(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.Identifier = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetModifier(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.Modifier = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetName(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.Name = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetNameEn(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.NameEn = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetResourceCategory(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.ResourceCategory = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetResourceType(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.ResourceType = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetSpaceIdentifier(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.SpaceIdentifier = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetSpaceType(v string) *ListProjectTemplatesResponseBodyTemplates {
	s.SpaceType = &v
	return s
}

func (s *ListProjectTemplatesResponseBodyTemplates) SetType(v int64) *ListProjectTemplatesResponseBodyTemplates {
	s.Type = &v
	return s
}

type ListProjectTemplatesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListProjectTemplatesResponse) SetHeaders(v map[string]*string) *ListProjectTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListProjectTemplatesResponse) SetStatusCode(v int32) *ListProjectTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectTemplatesResponse) SetBody(v *ListProjectTemplatesResponseBody) *ListProjectTemplatesResponse {
	s.Body = v
	return s
}

type ListProjectWorkitemTypesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Req
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Project
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
}

func (s ListProjectWorkitemTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectWorkitemTypesRequest) GoString() string {
	return s.String()
}

func (s *ListProjectWorkitemTypesRequest) SetCategory(v string) *ListProjectWorkitemTypesRequest {
	s.Category = &v
	return s
}

func (s *ListProjectWorkitemTypesRequest) SetSpaceType(v string) *ListProjectWorkitemTypesRequest {
	s.SpaceType = &v
	return s
}

type ListProjectWorkitemTypesResponseBody struct {
	// example:
	//
	// 例：Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// errormessage
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true或者false
	Success       *bool                                                `json:"success,omitempty" xml:"success,omitempty"`
	WorkitemTypes []*ListProjectWorkitemTypesResponseBodyWorkitemTypes `json:"workitemTypes,omitempty" xml:"workitemTypes,omitempty" type:"Repeated"`
}

func (s ListProjectWorkitemTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectWorkitemTypesResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectWorkitemTypesResponseBody) SetErrorCode(v string) *ListProjectWorkitemTypesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBody) SetErrorMessage(v string) *ListProjectWorkitemTypesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBody) SetRequestId(v string) *ListProjectWorkitemTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBody) SetSuccess(v bool) *ListProjectWorkitemTypesResponseBody {
	s.Success = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBody) SetWorkitemTypes(v []*ListProjectWorkitemTypesResponseBodyWorkitemTypes) *ListProjectWorkitemTypesResponseBody {
	s.WorkitemTypes = v
	return s
}

type ListProjectWorkitemTypesResponseBodyWorkitemTypes struct {
	// example:
	//
	// 用户阿里云pk，例如19xxxx31947xxxx
	AddUser *string `json:"addUser,omitempty" xml:"addUser,omitempty"`
	// example:
	//
	// Req
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 用户阿里云pk，例如19xxxx31947xxxx
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// true或者false
	DefaultType *bool `json:"defaultType,omitempty" xml:"defaultType,omitempty"`
	// example:
	//
	// 该类型的具体信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// true或者false
	Enable *bool `json:"enable,omitempty" xml:"enable,omitempty"`
	// example:
	//
	// 1641870287000
	GmtAdd *int64 `json:"gmtAdd,omitempty" xml:"gmtAdd,omitempty"`
	// example:
	//
	// 1620455467000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// dfexxxxxf4fee18xxxxx36
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 例：业务类需求
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 例：Business Requirement
	NameEn *string `json:"nameEn,omitempty" xml:"nameEn,omitempty"`
	// example:
	//
	// true
	SystemDefault *bool `json:"systemDefault,omitempty" xml:"systemDefault,omitempty"`
}

func (s ListProjectWorkitemTypesResponseBodyWorkitemTypes) String() string {
	return tea.Prettify(s)
}

func (s ListProjectWorkitemTypesResponseBodyWorkitemTypes) GoString() string {
	return s.String()
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetAddUser(v string) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.AddUser = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetCategoryIdentifier(v string) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.CategoryIdentifier = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetCreator(v string) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.Creator = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetDefaultType(v bool) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.DefaultType = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetDescription(v string) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.Description = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetEnable(v bool) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.Enable = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetGmtAdd(v int64) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.GmtAdd = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetGmtCreate(v int64) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.GmtCreate = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetIdentifier(v string) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.Identifier = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetName(v string) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.Name = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetNameEn(v string) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.NameEn = &v
	return s
}

func (s *ListProjectWorkitemTypesResponseBodyWorkitemTypes) SetSystemDefault(v bool) *ListProjectWorkitemTypesResponseBodyWorkitemTypes {
	s.SystemDefault = &v
	return s
}

type ListProjectWorkitemTypesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectWorkitemTypesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectWorkitemTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectWorkitemTypesResponse) GoString() string {
	return s.String()
}

func (s *ListProjectWorkitemTypesResponse) SetHeaders(v map[string]*string) *ListProjectWorkitemTypesResponse {
	s.Headers = v
	return s
}

func (s *ListProjectWorkitemTypesResponse) SetStatusCode(v int32) *ListProjectWorkitemTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectWorkitemTypesResponse) SetBody(v *ListProjectWorkitemTypesResponseBody) *ListProjectWorkitemTypesResponse {
	s.Body = v
	return s
}

type ListProjectsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Project
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// {"conditionGroups":[[]]}
	Conditions      *string `json:"conditions,omitempty" xml:"conditions,omitempty"`
	ExtraConditions *string `json:"extraConditions,omitempty" xml:"extraConditions,omitempty"`
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// ""
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// public
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
}

func (s ListProjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsRequest) GoString() string {
	return s.String()
}

func (s *ListProjectsRequest) SetCategory(v string) *ListProjectsRequest {
	s.Category = &v
	return s
}

func (s *ListProjectsRequest) SetConditions(v string) *ListProjectsRequest {
	s.Conditions = &v
	return s
}

func (s *ListProjectsRequest) SetExtraConditions(v string) *ListProjectsRequest {
	s.ExtraConditions = &v
	return s
}

func (s *ListProjectsRequest) SetMaxResults(v int64) *ListProjectsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListProjectsRequest) SetNextToken(v string) *ListProjectsRequest {
	s.NextToken = &v
	return s
}

func (s *ListProjectsRequest) SetScope(v string) *ListProjectsRequest {
	s.Scope = &v
	return s
}

type ListProjectsResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// ""
	NextToken *string                             `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Projects  []*ListProjectsResponseBodyProjects `json:"projects,omitempty" xml:"projects,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ListProjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBody) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBody) SetErrorCode(v string) *ListProjectsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListProjectsResponseBody) SetErrorMsg(v string) *ListProjectsResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListProjectsResponseBody) SetMaxResults(v int64) *ListProjectsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListProjectsResponseBody) SetNextToken(v string) *ListProjectsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListProjectsResponseBody) SetProjects(v []*ListProjectsResponseBodyProjects) *ListProjectsResponseBody {
	s.Projects = v
	return s
}

func (s *ListProjectsResponseBody) SetRequestId(v string) *ListProjectsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProjectsResponseBody) SetSuccess(v bool) *ListProjectsResponseBody {
	s.Success = &v
	return s
}

func (s *ListProjectsResponseBody) SetTotalCount(v int64) *ListProjectsResponseBody {
	s.TotalCount = &v
	return s
}

type ListProjectsResponseBodyProjects struct {
	// example:
	//
	// Project
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// OJAY
	CustomCode *string `json:"customCode,omitempty" xml:"customCode,omitempty"`
	// example:
	//
	// null
	DeleteTime *int64 `json:"deleteTime,omitempty" xml:"deleteTime,omitempty"`
	// example:
	//
	// xxx
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1640778694000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// https://xxxxxx.png
	Icon *string `json:"icon,omitempty" xml:"icon,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// null
	LogicalStatus *string `json:"logicalStatus,omitempty" xml:"logicalStatus,omitempty"`
	// example:
	//
	// xxxx
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// public
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// null
	StatusStageIdentifier *string `json:"statusStageIdentifier,omitempty" xml:"statusStageIdentifier,omitempty"`
	// example:
	//
	// null
	TypeIdentifier *string `json:"typeIdentifier,omitempty" xml:"typeIdentifier,omitempty"`
}

func (s ListProjectsResponseBodyProjects) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponseBodyProjects) GoString() string {
	return s.String()
}

func (s *ListProjectsResponseBodyProjects) SetCategoryIdentifier(v string) *ListProjectsResponseBodyProjects {
	s.CategoryIdentifier = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetCreator(v string) *ListProjectsResponseBodyProjects {
	s.Creator = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetCustomCode(v string) *ListProjectsResponseBodyProjects {
	s.CustomCode = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetDeleteTime(v int64) *ListProjectsResponseBodyProjects {
	s.DeleteTime = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetDescription(v string) *ListProjectsResponseBodyProjects {
	s.Description = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetGmtCreate(v int64) *ListProjectsResponseBodyProjects {
	s.GmtCreate = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetIcon(v string) *ListProjectsResponseBodyProjects {
	s.Icon = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetIdentifier(v string) *ListProjectsResponseBodyProjects {
	s.Identifier = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetLogicalStatus(v string) *ListProjectsResponseBodyProjects {
	s.LogicalStatus = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetName(v string) *ListProjectsResponseBodyProjects {
	s.Name = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetScope(v string) *ListProjectsResponseBodyProjects {
	s.Scope = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetStatusStageIdentifier(v string) *ListProjectsResponseBodyProjects {
	s.StatusStageIdentifier = &v
	return s
}

func (s *ListProjectsResponseBodyProjects) SetTypeIdentifier(v string) *ListProjectsResponseBodyProjects {
	s.TypeIdentifier = &v
	return s
}

type ListProjectsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProjectsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProjectsResponse) GoString() string {
	return s.String()
}

func (s *ListProjectsResponse) SetHeaders(v map[string]*string) *ListProjectsResponse {
	s.Headers = v
	return s
}

func (s *ListProjectsResponse) SetStatusCode(v int32) *ListProjectsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProjectsResponse) SetBody(v *ListProjectsResponseBody) *ListProjectsResponse {
	s.Body = v
	return s
}

type ListProtectedBranchesRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListProtectedBranchesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesRequest) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesRequest) SetAccessToken(v string) *ListProtectedBranchesRequest {
	s.AccessToken = &v
	return s
}

func (s *ListProtectedBranchesRequest) SetOrganizationId(v string) *ListProtectedBranchesRequest {
	s.OrganizationId = &v
	return s
}

type ListProtectedBranchesResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 313A1BF6-63B7-52D4-A098-952221A65254
	RequestId *string                                    `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListProtectedBranchesResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListProtectedBranchesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBody) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBody) SetErrorCode(v string) *ListProtectedBranchesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListProtectedBranchesResponseBody) SetErrorMessage(v string) *ListProtectedBranchesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListProtectedBranchesResponseBody) SetRequestId(v string) *ListProtectedBranchesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListProtectedBranchesResponseBody) SetResult(v []*ListProtectedBranchesResponseBodyResult) *ListProtectedBranchesResponseBody {
	s.Result = v
	return s
}

func (s *ListProtectedBranchesResponseBody) SetSuccess(v bool) *ListProtectedBranchesResponseBody {
	s.Success = &v
	return s
}

type ListProtectedBranchesResponseBodyResult struct {
	AllowMergeRoles   []*int32                                                  `json:"allowMergeRoles,omitempty" xml:"allowMergeRoles,omitempty" type:"Repeated"`
	AllowMergeUserIds []*int64                                                  `json:"allowMergeUserIds,omitempty" xml:"allowMergeUserIds,omitempty" type:"Repeated"`
	AllowMergeUsers   []*ListProtectedBranchesResponseBodyResultAllowMergeUsers `json:"allowMergeUsers,omitempty" xml:"allowMergeUsers,omitempty" type:"Repeated"`
	AllowPushRoles    []*int32                                                  `json:"allowPushRoles,omitempty" xml:"allowPushRoles,omitempty" type:"Repeated"`
	AllowPushUserIds  []*int64                                                  `json:"allowPushUserIds,omitempty" xml:"allowPushUserIds,omitempty" type:"Repeated"`
	AllowPushUsers    []*ListProtectedBranchesResponseBodyResultAllowPushUsers  `json:"allowPushUsers,omitempty" xml:"allowPushUsers,omitempty" type:"Repeated"`
	// example:
	//
	// protectedBranch
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 19285
	Id                  *int64                                                      `json:"id,omitempty" xml:"id,omitempty"`
	Matches             []*string                                                   `json:"matches,omitempty" xml:"matches,omitempty" type:"Repeated"`
	MergeRequestSetting *ListProtectedBranchesResponseBodyResultMergeRequestSetting `json:"mergeRequestSetting,omitempty" xml:"mergeRequestSetting,omitempty" type:"Struct"`
	TestSettingDTO      *ListProtectedBranchesResponseBodyResultTestSettingDTO      `json:"testSettingDTO,omitempty" xml:"testSettingDTO,omitempty" type:"Struct"`
	// example:
	//
	// 2022-03-18 14:24:54
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
}

func (s ListProtectedBranchesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResult) SetAllowMergeRoles(v []*int32) *ListProtectedBranchesResponseBodyResult {
	s.AllowMergeRoles = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetAllowMergeUserIds(v []*int64) *ListProtectedBranchesResponseBodyResult {
	s.AllowMergeUserIds = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetAllowMergeUsers(v []*ListProtectedBranchesResponseBodyResultAllowMergeUsers) *ListProtectedBranchesResponseBodyResult {
	s.AllowMergeUsers = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetAllowPushRoles(v []*int32) *ListProtectedBranchesResponseBodyResult {
	s.AllowPushRoles = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetAllowPushUserIds(v []*int64) *ListProtectedBranchesResponseBodyResult {
	s.AllowPushUserIds = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetAllowPushUsers(v []*ListProtectedBranchesResponseBodyResultAllowPushUsers) *ListProtectedBranchesResponseBodyResult {
	s.AllowPushUsers = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetBranch(v string) *ListProtectedBranchesResponseBodyResult {
	s.Branch = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetCreatedAt(v string) *ListProtectedBranchesResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetId(v int64) *ListProtectedBranchesResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetMatches(v []*string) *ListProtectedBranchesResponseBodyResult {
	s.Matches = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetMergeRequestSetting(v *ListProtectedBranchesResponseBodyResultMergeRequestSetting) *ListProtectedBranchesResponseBodyResult {
	s.MergeRequestSetting = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetTestSettingDTO(v *ListProtectedBranchesResponseBodyResultTestSettingDTO) *ListProtectedBranchesResponseBodyResult {
	s.TestSettingDTO = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResult) SetUpdatedAt(v string) *ListProtectedBranchesResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

type ListProtectedBranchesResponseBodyResultAllowMergeUsers struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 19238
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// codeup-test
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListProtectedBranchesResponseBodyResultAllowMergeUsers) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResultAllowMergeUsers) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResultAllowMergeUsers) SetAvatar(v string) *ListProtectedBranchesResponseBodyResultAllowMergeUsers {
	s.Avatar = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultAllowMergeUsers) SetEmail(v string) *ListProtectedBranchesResponseBodyResultAllowMergeUsers {
	s.Email = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultAllowMergeUsers) SetId(v int64) *ListProtectedBranchesResponseBodyResultAllowMergeUsers {
	s.Id = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultAllowMergeUsers) SetName(v string) *ListProtectedBranchesResponseBodyResultAllowMergeUsers {
	s.Name = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultAllowMergeUsers) SetUsername(v string) *ListProtectedBranchesResponseBodyResultAllowMergeUsers {
	s.Username = &v
	return s
}

type ListProtectedBranchesResponseBodyResultAllowPushUsers struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 19238
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// codeup-test
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListProtectedBranchesResponseBodyResultAllowPushUsers) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResultAllowPushUsers) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResultAllowPushUsers) SetAvatar(v string) *ListProtectedBranchesResponseBodyResultAllowPushUsers {
	s.Avatar = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultAllowPushUsers) SetEmail(v string) *ListProtectedBranchesResponseBodyResultAllowPushUsers {
	s.Email = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultAllowPushUsers) SetId(v int64) *ListProtectedBranchesResponseBodyResultAllowPushUsers {
	s.Id = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultAllowPushUsers) SetName(v string) *ListProtectedBranchesResponseBodyResultAllowPushUsers {
	s.Name = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultAllowPushUsers) SetUsername(v string) *ListProtectedBranchesResponseBodyResultAllowPushUsers {
	s.Username = &v
	return s
}

type ListProtectedBranchesResponseBodyResultMergeRequestSetting struct {
	AllowMergeRequestRoles []*int32                                                                      `json:"allowMergeRequestRoles,omitempty" xml:"allowMergeRequestRoles,omitempty" type:"Repeated"`
	DefaultAssignees       []*ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees `json:"defaultAssignees,omitempty" xml:"defaultAssignees,omitempty" type:"Repeated"`
	// example:
	//
	// true
	IsAllowSelfApproval *bool `json:"isAllowSelfApproval,omitempty" xml:"isAllowSelfApproval,omitempty"`
	// example:
	//
	// true
	IsRequireDiscussionProcessed *bool `json:"isRequireDiscussionProcessed,omitempty" xml:"isRequireDiscussionProcessed,omitempty"`
	// example:
	//
	// true
	IsRequired *bool `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	// example:
	//
	// false
	IsResetApprovalWhenNewPush *bool `json:"isResetApprovalWhenNewPush,omitempty" xml:"isResetApprovalWhenNewPush,omitempty"`
	// example:
	//
	// 1
	MinimumApproval *int32 `json:"minimumApproval,omitempty" xml:"minimumApproval,omitempty"`
	// example:
	//
	// general
	MrMode *string `json:"mrMode,omitempty" xml:"mrMode,omitempty"`
	// example:
	//
	// **.java
	WhiteList *string `json:"whiteList,omitempty" xml:"whiteList,omitempty"`
}

func (s ListProtectedBranchesResponseBodyResultMergeRequestSetting) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResultMergeRequestSetting) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSetting) SetAllowMergeRequestRoles(v []*int32) *ListProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.AllowMergeRequestRoles = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSetting) SetDefaultAssignees(v []*ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees) *ListProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.DefaultAssignees = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSetting) SetIsAllowSelfApproval(v bool) *ListProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.IsAllowSelfApproval = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSetting) SetIsRequireDiscussionProcessed(v bool) *ListProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.IsRequireDiscussionProcessed = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSetting) SetIsRequired(v bool) *ListProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.IsRequired = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSetting) SetIsResetApprovalWhenNewPush(v bool) *ListProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.IsResetApprovalWhenNewPush = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSetting) SetMinimumApproval(v int32) *ListProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.MinimumApproval = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSetting) SetMrMode(v string) *ListProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.MrMode = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSetting) SetWhiteList(v string) *ListProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.WhiteList = &v
	return s
}

type ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 19238
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// codeup-test
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees) SetAvatar(v string) *ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees {
	s.Avatar = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees) SetEmail(v string) *ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees {
	s.Email = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees) SetId(v int64) *ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees {
	s.Id = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees) SetName(v string) *ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees {
	s.Name = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees) SetUsername(v string) *ListProtectedBranchesResponseBodyResultMergeRequestSettingDefaultAssignees {
	s.Username = &v
	return s
}

type ListProtectedBranchesResponseBodyResultTestSettingDTO struct {
	CheckConfig             *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig             `json:"checkConfig,omitempty" xml:"checkConfig,omitempty" type:"Struct"`
	CheckTaskQualityConfig  *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig  `json:"checkTaskQualityConfig,omitempty" xml:"checkTaskQualityConfig,omitempty" type:"Struct"`
	CodeGuidelinesDetection *ListProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection `json:"codeGuidelinesDetection,omitempty" xml:"codeGuidelinesDetection,omitempty" type:"Struct"`
	// example:
	//
	// false
	IsRequired             *bool                                                                        `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	SensitiveInfoDetection *ListProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection `json:"sensitiveInfoDetection,omitempty" xml:"sensitiveInfoDetection,omitempty" type:"Struct"`
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTO) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTO) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTO) SetCheckConfig(v *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig) *ListProtectedBranchesResponseBodyResultTestSettingDTO {
	s.CheckConfig = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTO) SetCheckTaskQualityConfig(v *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) *ListProtectedBranchesResponseBodyResultTestSettingDTO {
	s.CheckTaskQualityConfig = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTO) SetCodeGuidelinesDetection(v *ListProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection) *ListProtectedBranchesResponseBodyResultTestSettingDTO {
	s.CodeGuidelinesDetection = v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTO) SetIsRequired(v bool) *ListProtectedBranchesResponseBodyResultTestSettingDTO {
	s.IsRequired = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTO) SetSensitiveInfoDetection(v *ListProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection) *ListProtectedBranchesResponseBodyResultTestSettingDTO {
	s.SensitiveInfoDetection = v
	return s
}

type ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig struct {
	CheckItems []*ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems `json:"checkItems,omitempty" xml:"checkItems,omitempty" type:"Repeated"`
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig) SetCheckItems(v []*ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems) *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig {
	s.CheckItems = v
	return s
}

type ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems struct {
	// example:
	//
	// false
	IsRequired *bool   `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems) SetIsRequired(v bool) *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems {
	s.IsRequired = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems) SetName(v string) *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems {
	s.Name = &v
	return s
}

type ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig struct {
	// example:
	//
	// 123456
	BizNo *string `json:"bizNo,omitempty" xml:"bizNo,omitempty"`
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_task_quality
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// biz-task-quality
	TaskName *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetBizNo(v string) *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.BizNo = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetEnabled(v bool) *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.Enabled = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetMessage(v string) *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.Message = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetTaskName(v string) *ListProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.TaskName = &v
	return s
}

type ListProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection struct {
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_code_guide_lines
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection) SetEnabled(v bool) *ListProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection {
	s.Enabled = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection) SetMessage(v string) *ListProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection {
	s.Message = &v
	return s
}

type ListProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection struct {
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_code_sensitive_info
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection) SetEnabled(v bool) *ListProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection {
	s.Enabled = &v
	return s
}

func (s *ListProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection) SetMessage(v string) *ListProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection {
	s.Message = &v
	return s
}

type ListProtectedBranchesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProtectedBranchesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProtectedBranchesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProtectedBranchesResponse) GoString() string {
	return s.String()
}

func (s *ListProtectedBranchesResponse) SetHeaders(v map[string]*string) *ListProtectedBranchesResponse {
	s.Headers = v
	return s
}

func (s *ListProtectedBranchesResponse) SetStatusCode(v int32) *ListProtectedBranchesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProtectedBranchesResponse) SetBody(v *ListProtectedBranchesResponseBody) *ListProtectedBranchesResponse {
	s.Body = v
	return s
}

type ListPushRulesRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60d54f3daccf2bbd6659f3ad
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListPushRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPushRulesRequest) GoString() string {
	return s.String()
}

func (s *ListPushRulesRequest) SetAccessToken(v string) *ListPushRulesRequest {
	s.AccessToken = &v
	return s
}

func (s *ListPushRulesRequest) SetOrganizationId(v string) *ListPushRulesRequest {
	s.OrganizationId = &v
	return s
}

type ListPushRulesResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListPushRulesResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 2
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListPushRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPushRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPushRulesResponseBody) SetErrorCode(v string) *ListPushRulesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListPushRulesResponseBody) SetErrorMessage(v string) *ListPushRulesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListPushRulesResponseBody) SetRequestId(v string) *ListPushRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPushRulesResponseBody) SetResult(v []*ListPushRulesResponseBodyResult) *ListPushRulesResponseBody {
	s.Result = v
	return s
}

func (s *ListPushRulesResponseBody) SetSuccess(v bool) *ListPushRulesResponseBody {
	s.Success = &v
	return s
}

func (s *ListPushRulesResponseBody) SetTotal(v int64) *ListPushRulesResponseBody {
	s.Total = &v
	return s
}

type ListPushRulesResponseBodyResult struct {
	// example:
	//
	// 2023-09-03T18:20:06+08:00
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 2023-09-03T18:20:06+08:00
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 2077
	Id        *int64                                      `json:"id,omitempty" xml:"id,omitempty"`
	RuleInfos []*ListPushRulesResponseBodyResultRuleInfos `json:"ruleInfos,omitempty" xml:"ruleInfos,omitempty" type:"Repeated"`
}

func (s ListPushRulesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListPushRulesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListPushRulesResponseBodyResult) SetGmtCreate(v string) *ListPushRulesResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *ListPushRulesResponseBodyResult) SetGmtModified(v string) *ListPushRulesResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *ListPushRulesResponseBodyResult) SetId(v int64) *ListPushRulesResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListPushRulesResponseBodyResult) SetRuleInfos(v []*ListPushRulesResponseBodyResultRuleInfos) *ListPushRulesResponseBodyResult {
	s.RuleInfos = v
	return s
}

type ListPushRulesResponseBodyResultRuleInfos struct {
	// example:
	//
	// CommitFilesChecker
	CheckerName *string `json:"checkerName,omitempty" xml:"checkerName,omitempty"`
	// example:
	//
	// warn
	CheckerType *string `json:"checkerType,omitempty" xml:"checkerType,omitempty"`
	// example:
	//
	// ""
	ExtraMessage    *string   `json:"extraMessage,omitempty" xml:"extraMessage,omitempty"`
	FileRuleRegexes []*string `json:"fileRuleRegexes,omitempty" xml:"fileRuleRegexes,omitempty" type:"Repeated"`
}

func (s ListPushRulesResponseBodyResultRuleInfos) String() string {
	return tea.Prettify(s)
}

func (s ListPushRulesResponseBodyResultRuleInfos) GoString() string {
	return s.String()
}

func (s *ListPushRulesResponseBodyResultRuleInfos) SetCheckerName(v string) *ListPushRulesResponseBodyResultRuleInfos {
	s.CheckerName = &v
	return s
}

func (s *ListPushRulesResponseBodyResultRuleInfos) SetCheckerType(v string) *ListPushRulesResponseBodyResultRuleInfos {
	s.CheckerType = &v
	return s
}

func (s *ListPushRulesResponseBodyResultRuleInfos) SetExtraMessage(v string) *ListPushRulesResponseBodyResultRuleInfos {
	s.ExtraMessage = &v
	return s
}

func (s *ListPushRulesResponseBodyResultRuleInfos) SetFileRuleRegexes(v []*string) *ListPushRulesResponseBodyResultRuleInfos {
	s.FileRuleRegexes = v
	return s
}

type ListPushRulesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPushRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPushRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPushRulesResponse) GoString() string {
	return s.String()
}

func (s *ListPushRulesResponse) SetHeaders(v map[string]*string) *ListPushRulesResponse {
	s.Headers = v
	return s
}

func (s *ListPushRulesResponse) SetStatusCode(v int32) *ListPushRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPushRulesResponse) SetBody(v *ListPushRulesResponseBody) *ListPushRulesResponse {
	s.Body = v
	return s
}

type ListRepositoriesRequest struct {
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// false
	Archived       *bool  `json:"archived,omitempty" xml:"archived,omitempty"`
	MinAccessLevel *int32 `json:"minAccessLevel,omitempty" xml:"minAccessLevel,omitempty"`
	// example:
	//
	// created_at
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 2
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 20
	PerPage *int64 `json:"perPage,omitempty" xml:"perPage,omitempty"`
	// example:
	//
	// Demo
	Search *string `json:"search,omitempty" xml:"search,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
}

func (s ListRepositoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoriesRequest) GoString() string {
	return s.String()
}

func (s *ListRepositoriesRequest) SetAccessToken(v string) *ListRepositoriesRequest {
	s.AccessToken = &v
	return s
}

func (s *ListRepositoriesRequest) SetArchived(v bool) *ListRepositoriesRequest {
	s.Archived = &v
	return s
}

func (s *ListRepositoriesRequest) SetMinAccessLevel(v int32) *ListRepositoriesRequest {
	s.MinAccessLevel = &v
	return s
}

func (s *ListRepositoriesRequest) SetOrderBy(v string) *ListRepositoriesRequest {
	s.OrderBy = &v
	return s
}

func (s *ListRepositoriesRequest) SetOrganizationId(v string) *ListRepositoriesRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListRepositoriesRequest) SetPage(v int64) *ListRepositoriesRequest {
	s.Page = &v
	return s
}

func (s *ListRepositoriesRequest) SetPerPage(v int64) *ListRepositoriesRequest {
	s.PerPage = &v
	return s
}

func (s *ListRepositoriesRequest) SetSearch(v string) *ListRepositoriesRequest {
	s.Search = &v
	return s
}

func (s *ListRepositoriesRequest) SetSort(v string) *ListRepositoriesRequest {
	s.Sort = &v
	return s
}

type ListRepositoriesResponseBody struct {
	ErrorCode *int32 `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 4D6AF7CC-B43B-5454-86AB-023D25E44868
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListRepositoriesResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 149
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListRepositoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoriesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRepositoriesResponseBody) SetErrorCode(v int32) *ListRepositoriesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListRepositoriesResponseBody) SetErrorMessage(v string) *ListRepositoriesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRepositoriesResponseBody) SetRequestId(v string) *ListRepositoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRepositoriesResponseBody) SetResult(v []*ListRepositoriesResponseBodyResult) *ListRepositoriesResponseBody {
	s.Result = v
	return s
}

func (s *ListRepositoriesResponseBody) SetSuccess(v bool) *ListRepositoriesResponseBody {
	s.Success = &v
	return s
}

func (s *ListRepositoriesResponseBody) SetTotal(v int64) *ListRepositoriesResponseBody {
	s.Total = &v
	return s
}

type ListRepositoriesResponseBodyResult struct {
	// example:
	//
	// 1
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 40
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// false
	Archive   *bool   `json:"archive,omitempty" xml:"archive,omitempty"`
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	CreatedAt    *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Description  *string `json:"description,omitempty" xml:"description,omitempty"`
	ImportStatus *string `json:"importStatus,omitempty" xml:"importStatus,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	LastActivityAt *string `json:"lastActivityAt,omitempty" xml:"lastActivityAt,omitempty"`
	// example:
	//
	// codeupTest
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// 745
	NamespaceId *int64 `json:"namespaceId,omitempty" xml:"namespaceId,omitempty"`
	// example:
	//
	// test-codeup
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// codeup-test-org/test-codeup
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// false
	Star *bool `json:"star,omitempty" xml:"star,omitempty"`
	// example:
	//
	// 0
	StarCount *int64 `json:"starCount,omitempty" xml:"starCount,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *string `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// ""
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s ListRepositoriesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoriesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListRepositoriesResponseBodyResult) SetId(v int64) *ListRepositoriesResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetAccessLevel(v int32) *ListRepositoriesResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetArchive(v bool) *ListRepositoriesResponseBodyResult {
	s.Archive = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetAvatarUrl(v string) *ListRepositoriesResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetCreatedAt(v string) *ListRepositoriesResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetDescription(v string) *ListRepositoriesResponseBodyResult {
	s.Description = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetImportStatus(v string) *ListRepositoriesResponseBodyResult {
	s.ImportStatus = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetLastActivityAt(v string) *ListRepositoriesResponseBodyResult {
	s.LastActivityAt = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetName(v string) *ListRepositoriesResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetNameWithNamespace(v string) *ListRepositoriesResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetNamespaceId(v int64) *ListRepositoriesResponseBodyResult {
	s.NamespaceId = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetPath(v string) *ListRepositoriesResponseBodyResult {
	s.Path = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetPathWithNamespace(v string) *ListRepositoriesResponseBodyResult {
	s.PathWithNamespace = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetStar(v bool) *ListRepositoriesResponseBodyResult {
	s.Star = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetStarCount(v int64) *ListRepositoriesResponseBodyResult {
	s.StarCount = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetUpdatedAt(v string) *ListRepositoriesResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetVisibilityLevel(v string) *ListRepositoriesResponseBodyResult {
	s.VisibilityLevel = &v
	return s
}

func (s *ListRepositoriesResponseBodyResult) SetWebUrl(v string) *ListRepositoriesResponseBodyResult {
	s.WebUrl = &v
	return s
}

type ListRepositoriesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRepositoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRepositoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoriesResponse) GoString() string {
	return s.String()
}

func (s *ListRepositoriesResponse) SetHeaders(v map[string]*string) *ListRepositoriesResponse {
	s.Headers = v
	return s
}

func (s *ListRepositoriesResponse) SetStatusCode(v int32) *ListRepositoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRepositoriesResponse) SetBody(v *ListRepositoriesResponseBody) *ListRepositoriesResponse {
	s.Body = v
	return s
}

type ListRepositoryBranchesRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// Demo
	Search *string `json:"search,omitempty" xml:"search,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
}

func (s ListRepositoryBranchesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryBranchesRequest) GoString() string {
	return s.String()
}

func (s *ListRepositoryBranchesRequest) SetAccessToken(v string) *ListRepositoryBranchesRequest {
	s.AccessToken = &v
	return s
}

func (s *ListRepositoryBranchesRequest) SetOrganizationId(v string) *ListRepositoryBranchesRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListRepositoryBranchesRequest) SetPage(v int64) *ListRepositoryBranchesRequest {
	s.Page = &v
	return s
}

func (s *ListRepositoryBranchesRequest) SetPageSize(v int64) *ListRepositoryBranchesRequest {
	s.PageSize = &v
	return s
}

func (s *ListRepositoryBranchesRequest) SetSearch(v string) *ListRepositoryBranchesRequest {
	s.Search = &v
	return s
}

func (s *ListRepositoryBranchesRequest) SetSort(v string) *ListRepositoryBranchesRequest {
	s.Sort = &v
	return s
}

type ListRepositoryBranchesResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 1F4F342D-493A-5B2C-B133-BA78B30FF834
	RequestId *string                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListRepositoryBranchesResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 100
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListRepositoryBranchesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryBranchesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRepositoryBranchesResponseBody) SetErrorCode(v string) *ListRepositoryBranchesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListRepositoryBranchesResponseBody) SetErrorMessage(v string) *ListRepositoryBranchesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRepositoryBranchesResponseBody) SetRequestId(v string) *ListRepositoryBranchesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRepositoryBranchesResponseBody) SetResult(v []*ListRepositoryBranchesResponseBodyResult) *ListRepositoryBranchesResponseBody {
	s.Result = v
	return s
}

func (s *ListRepositoryBranchesResponseBody) SetSuccess(v bool) *ListRepositoryBranchesResponseBody {
	s.Success = &v
	return s
}

func (s *ListRepositoryBranchesResponseBody) SetTotal(v int64) *ListRepositoryBranchesResponseBody {
	s.Total = &v
	return s
}

type ListRepositoryBranchesResponseBodyResult struct {
	Commit *ListRepositoryBranchesResponseBodyResultCommit `json:"commit,omitempty" xml:"commit,omitempty" type:"Struct"`
	// example:
	//
	// testBranch
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// false
	Protected *string `json:"protected,omitempty" xml:"protected,omitempty"`
}

func (s ListRepositoryBranchesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryBranchesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListRepositoryBranchesResponseBodyResult) SetCommit(v *ListRepositoryBranchesResponseBodyResultCommit) *ListRepositoryBranchesResponseBodyResult {
	s.Commit = v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResult) SetName(v string) *ListRepositoryBranchesResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResult) SetProtected(v string) *ListRepositoryBranchesResponseBodyResult {
	s.Protected = &v
	return s
}

type ListRepositoryBranchesResponseBodyResultCommit struct {
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	// example:
	//
	// test-codeup
	AuthorName *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2022-03-18 10:00:00
	AuthoredDate *string `json:"authoredDate,omitempty" xml:"authoredDate,omitempty"`
	// example:
	//
	// 2022-03-18 11:00:00
	CommittedDate *string `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	// example:
	//
	// commit-codeup
	CommitterName *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2022-03-18 10:00:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// de02b625ba8488f92eb204bcb3773a40c1b4ddac
	Id        *string   `json:"id,omitempty" xml:"id,omitempty"`
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// e0297d8f
	ShortId *string `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Title   *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ListRepositoryBranchesResponseBodyResultCommit) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryBranchesResponseBodyResultCommit) GoString() string {
	return s.String()
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetAuthorEmail(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.AuthorEmail = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetAuthorName(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.AuthorName = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetAuthoredDate(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.AuthoredDate = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetCommittedDate(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.CommittedDate = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetCommitterEmail(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.CommitterEmail = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetCommitterName(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.CommitterName = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetCreatedAt(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.CreatedAt = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetId(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.Id = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetMessage(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.Message = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetParentIds(v []*string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.ParentIds = v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetShortId(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.ShortId = &v
	return s
}

func (s *ListRepositoryBranchesResponseBodyResultCommit) SetTitle(v string) *ListRepositoryBranchesResponseBodyResultCommit {
	s.Title = &v
	return s
}

type ListRepositoryBranchesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRepositoryBranchesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRepositoryBranchesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryBranchesResponse) GoString() string {
	return s.String()
}

func (s *ListRepositoryBranchesResponse) SetHeaders(v map[string]*string) *ListRepositoryBranchesResponse {
	s.Headers = v
	return s
}

func (s *ListRepositoryBranchesResponse) SetStatusCode(v int32) *ListRepositoryBranchesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRepositoryBranchesResponse) SetBody(v *ListRepositoryBranchesResponseBody) *ListRepositoryBranchesResponse {
	s.Body = v
	return s
}

type ListRepositoryCommitDiffRequest struct {
	// accessToken
	//
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// 3
	ContextLine *int32 `json:"contextLine,omitempty" xml:"contextLine,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListRepositoryCommitDiffRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitDiffRequest) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitDiffRequest) SetAccessToken(v string) *ListRepositoryCommitDiffRequest {
	s.AccessToken = &v
	return s
}

func (s *ListRepositoryCommitDiffRequest) SetContextLine(v int32) *ListRepositoryCommitDiffRequest {
	s.ContextLine = &v
	return s
}

func (s *ListRepositoryCommitDiffRequest) SetOrganizationId(v string) *ListRepositoryCommitDiffRequest {
	s.OrganizationId = &v
	return s
}

type ListRepositoryCommitDiffResponseBody struct {
	// example:
	//
	// success
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 0EE38A4E-8991-532A-8E8B-5C22B5D2E058
	RequestId *string                                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListRepositoryCommitDiffResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListRepositoryCommitDiffResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitDiffResponseBody) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitDiffResponseBody) SetErrorCode(v string) *ListRepositoryCommitDiffResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBody) SetErrorMessage(v string) *ListRepositoryCommitDiffResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBody) SetRequestId(v string) *ListRepositoryCommitDiffResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBody) SetResult(v []*ListRepositoryCommitDiffResponseBodyResult) *ListRepositoryCommitDiffResponseBody {
	s.Result = v
	return s
}

func (s *ListRepositoryCommitDiffResponseBody) SetSuccess(v bool) *ListRepositoryCommitDiffResponseBody {
	s.Success = &v
	return s
}

type ListRepositoryCommitDiffResponseBodyResult struct {
	// example:
	//
	// 100644
	AMode *string `json:"aMode,omitempty" xml:"aMode,omitempty"`
	// example:
	//
	// 100755
	BMode       *string `json:"bMode,omitempty" xml:"bMode,omitempty"`
	DeletedFile *bool   `json:"deletedFile,omitempty" xml:"deletedFile,omitempty"`
	// example:
	//
	// --- /dev/null\\n+++ b/src/test/java/com/aliyun/codeupdemo/CodeupDemoApplicationTests.java\\n@@ -0,0 +1,13 @@\\n+package com.aliyun.codeupdemo;\\n+\\n+import org.junit.jupiter.api.Test;\\n+import org.springframework.boot.test.context.SpringBootTest;\\n+\\n+@SpringBootTest\\n+class CodeupDemoApplicationTest {\\n+\\n+ @Test\\n+ void contextLoads() {\\n+ }\\n+\\n+}\\n
	Diff     *string `json:"diff,omitempty" xml:"diff,omitempty"`
	IsBinary *bool   `json:"isBinary,omitempty" xml:"isBinary,omitempty"`
	IsNewLfs *bool   `json:"isNewLfs,omitempty" xml:"isNewLfs,omitempty"`
	IsOldLfs *bool   `json:"isOldLfs,omitempty" xml:"isOldLfs,omitempty"`
	NewFile  *bool   `json:"newFile,omitempty" xml:"newFile,omitempty"`
	// example:
	//
	// 6c268061a546378276559c713d0ad377d4xxxxxx
	NewId *string `json:"newId,omitempty" xml:"newId,omitempty"`
	// example:
	//
	// src/test/java/com/aliyun/codeupdemo/CodeupDemoApplicationTests.java
	NewPath *string `json:"newPath,omitempty" xml:"newPath,omitempty"`
	// example:
	//
	// 0000000000000000000000000000000000000000
	OldId *string `json:"oldId,omitempty" xml:"oldId,omitempty"`
	// example:
	//
	// src/test/java/com/aliyun/codeupdemo/CodeupDemoApplicationTests.java
	OldPath     *string `json:"oldPath,omitempty" xml:"oldPath,omitempty"`
	RenamedFile *bool   `json:"renamedFile,omitempty" xml:"renamedFile,omitempty"`
}

func (s ListRepositoryCommitDiffResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitDiffResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetAMode(v string) *ListRepositoryCommitDiffResponseBodyResult {
	s.AMode = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetBMode(v string) *ListRepositoryCommitDiffResponseBodyResult {
	s.BMode = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetDeletedFile(v bool) *ListRepositoryCommitDiffResponseBodyResult {
	s.DeletedFile = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetDiff(v string) *ListRepositoryCommitDiffResponseBodyResult {
	s.Diff = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetIsBinary(v bool) *ListRepositoryCommitDiffResponseBodyResult {
	s.IsBinary = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetIsNewLfs(v bool) *ListRepositoryCommitDiffResponseBodyResult {
	s.IsNewLfs = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetIsOldLfs(v bool) *ListRepositoryCommitDiffResponseBodyResult {
	s.IsOldLfs = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetNewFile(v bool) *ListRepositoryCommitDiffResponseBodyResult {
	s.NewFile = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetNewId(v string) *ListRepositoryCommitDiffResponseBodyResult {
	s.NewId = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetNewPath(v string) *ListRepositoryCommitDiffResponseBodyResult {
	s.NewPath = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetOldId(v string) *ListRepositoryCommitDiffResponseBodyResult {
	s.OldId = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetOldPath(v string) *ListRepositoryCommitDiffResponseBodyResult {
	s.OldPath = &v
	return s
}

func (s *ListRepositoryCommitDiffResponseBodyResult) SetRenamedFile(v bool) *ListRepositoryCommitDiffResponseBodyResult {
	s.RenamedFile = &v
	return s
}

type ListRepositoryCommitDiffResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRepositoryCommitDiffResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRepositoryCommitDiffResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitDiffResponse) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitDiffResponse) SetHeaders(v map[string]*string) *ListRepositoryCommitDiffResponse {
	s.Headers = v
	return s
}

func (s *ListRepositoryCommitDiffResponse) SetStatusCode(v int32) *ListRepositoryCommitDiffResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRepositoryCommitDiffResponse) SetBody(v *ListRepositoryCommitDiffResponseBody) *ListRepositoryCommitDiffResponse {
	s.Body = v
	return s
}

type ListRepositoryCommitsRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// 2022-08-18 08:00:00
	End *string `json:"end,omitempty" xml:"end,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// src/cpp/main.cpp
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// This parameter is required.
	RefName *string `json:"refName,omitempty" xml:"refName,omitempty"`
	// example:
	//
	// search
	Search *string `json:"search,omitempty" xml:"search,omitempty"`
	// example:
	//
	// false
	ShowCommentsCount *bool `json:"showCommentsCount,omitempty" xml:"showCommentsCount,omitempty"`
	// example:
	//
	// false
	ShowSignature *bool `json:"showSignature,omitempty" xml:"showSignature,omitempty"`
	// example:
	//
	// 2022-03-18 08:00:00
	Start *string `json:"start,omitempty" xml:"start,omitempty"`
}

func (s ListRepositoryCommitsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitsRequest) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitsRequest) SetAccessToken(v string) *ListRepositoryCommitsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListRepositoryCommitsRequest) SetEnd(v string) *ListRepositoryCommitsRequest {
	s.End = &v
	return s
}

func (s *ListRepositoryCommitsRequest) SetOrganizationId(v string) *ListRepositoryCommitsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListRepositoryCommitsRequest) SetPage(v int64) *ListRepositoryCommitsRequest {
	s.Page = &v
	return s
}

func (s *ListRepositoryCommitsRequest) SetPageSize(v int64) *ListRepositoryCommitsRequest {
	s.PageSize = &v
	return s
}

func (s *ListRepositoryCommitsRequest) SetPath(v string) *ListRepositoryCommitsRequest {
	s.Path = &v
	return s
}

func (s *ListRepositoryCommitsRequest) SetRefName(v string) *ListRepositoryCommitsRequest {
	s.RefName = &v
	return s
}

func (s *ListRepositoryCommitsRequest) SetSearch(v string) *ListRepositoryCommitsRequest {
	s.Search = &v
	return s
}

func (s *ListRepositoryCommitsRequest) SetShowCommentsCount(v bool) *ListRepositoryCommitsRequest {
	s.ShowCommentsCount = &v
	return s
}

func (s *ListRepositoryCommitsRequest) SetShowSignature(v bool) *ListRepositoryCommitsRequest {
	s.ShowSignature = &v
	return s
}

func (s *ListRepositoryCommitsRequest) SetStart(v string) *ListRepositoryCommitsRequest {
	s.Start = &v
	return s
}

type ListRepositoryCommitsResponseBody struct {
	// example:
	//
	// OpenApi.error
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F1138237-CF7F-56BF-95D4-9AA937CCE8E5
	RequestId *string                                    `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListRepositoryCommitsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 145
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListRepositoryCommitsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitsResponseBody) SetErrorCode(v string) *ListRepositoryCommitsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListRepositoryCommitsResponseBody) SetErrorMessage(v string) *ListRepositoryCommitsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRepositoryCommitsResponseBody) SetRequestId(v string) *ListRepositoryCommitsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRepositoryCommitsResponseBody) SetResult(v []*ListRepositoryCommitsResponseBodyResult) *ListRepositoryCommitsResponseBody {
	s.Result = v
	return s
}

func (s *ListRepositoryCommitsResponseBody) SetSuccess(v bool) *ListRepositoryCommitsResponseBody {
	s.Success = &v
	return s
}

func (s *ListRepositoryCommitsResponseBody) SetTotal(v int64) *ListRepositoryCommitsResponseBody {
	s.Total = &v
	return s
}

type ListRepositoryCommitsResponseBodyResult struct {
	Author *ListRepositoryCommitsResponseBodyResultAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	// example:
	//
	// test-codeup
	AuthorName *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2022-03-18 15:00:00
	AuthoredDate *string `json:"authoredDate,omitempty" xml:"authoredDate,omitempty"`
	// example:
	//
	// 1
	CommentsCount *int64 `json:"commentsCount,omitempty" xml:"commentsCount,omitempty"`
	// example:
	//
	// 2022-03-18 16:00:00
	CommittedDate *string                                           `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	Committer     *ListRepositoryCommitsResponseBodyResultCommitter `json:"committer,omitempty" xml:"committer,omitempty" type:"Struct"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	// example:
	//
	// committer-codeup
	CommitterName *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// de02b625ba8488f92eb204bcb3773a40c1b4ddac
	Id        *string   `json:"id,omitempty" xml:"id,omitempty"`
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// de02b625
	ShortId   *string                                           `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Signature *ListRepositoryCommitsResponseBodyResultSignature `json:"signature,omitempty" xml:"signature,omitempty" type:"Struct"`
	Title     *string                                           `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ListRepositoryCommitsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitsResponseBodyResult) SetAuthor(v *ListRepositoryCommitsResponseBodyResultAuthor) *ListRepositoryCommitsResponseBodyResult {
	s.Author = v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetAuthorEmail(v string) *ListRepositoryCommitsResponseBodyResult {
	s.AuthorEmail = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetAuthorName(v string) *ListRepositoryCommitsResponseBodyResult {
	s.AuthorName = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetAuthoredDate(v string) *ListRepositoryCommitsResponseBodyResult {
	s.AuthoredDate = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetCommentsCount(v int64) *ListRepositoryCommitsResponseBodyResult {
	s.CommentsCount = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetCommittedDate(v string) *ListRepositoryCommitsResponseBodyResult {
	s.CommittedDate = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetCommitter(v *ListRepositoryCommitsResponseBodyResultCommitter) *ListRepositoryCommitsResponseBodyResult {
	s.Committer = v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetCommitterEmail(v string) *ListRepositoryCommitsResponseBodyResult {
	s.CommitterEmail = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetCommitterName(v string) *ListRepositoryCommitsResponseBodyResult {
	s.CommitterName = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetCreatedAt(v string) *ListRepositoryCommitsResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetId(v string) *ListRepositoryCommitsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetMessage(v string) *ListRepositoryCommitsResponseBodyResult {
	s.Message = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetParentIds(v []*string) *ListRepositoryCommitsResponseBodyResult {
	s.ParentIds = v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetShortId(v string) *ListRepositoryCommitsResponseBodyResult {
	s.ShortId = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetSignature(v *ListRepositoryCommitsResponseBodyResultSignature) *ListRepositoryCommitsResponseBodyResult {
	s.Signature = v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResult) SetTitle(v string) *ListRepositoryCommitsResponseBodyResult {
	s.Title = &v
	return s
}

type ListRepositoryCommitsResponseBodyResultAuthor struct {
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 7914
	Id   *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// nickname
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
	// example:
	//
	// ""
	WebsiteUrl *string `json:"websiteUrl,omitempty" xml:"websiteUrl,omitempty"`
}

func (s ListRepositoryCommitsResponseBodyResultAuthor) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitsResponseBodyResultAuthor) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitsResponseBodyResultAuthor) SetAvatarUrl(v string) *ListRepositoryCommitsResponseBodyResultAuthor {
	s.AvatarUrl = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultAuthor) SetEmail(v string) *ListRepositoryCommitsResponseBodyResultAuthor {
	s.Email = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultAuthor) SetId(v int64) *ListRepositoryCommitsResponseBodyResultAuthor {
	s.Id = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultAuthor) SetName(v string) *ListRepositoryCommitsResponseBodyResultAuthor {
	s.Name = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultAuthor) SetState(v string) *ListRepositoryCommitsResponseBodyResultAuthor {
	s.State = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultAuthor) SetUsername(v string) *ListRepositoryCommitsResponseBodyResultAuthor {
	s.Username = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultAuthor) SetWebsiteUrl(v string) *ListRepositoryCommitsResponseBodyResultAuthor {
	s.WebsiteUrl = &v
	return s
}

type ListRepositoryCommitsResponseBodyResultCommitter struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 41031
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// committer-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// nickname
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
	// example:
	//
	// ""
	WebsiteUrl *string `json:"websiteUrl,omitempty" xml:"websiteUrl,omitempty"`
}

func (s ListRepositoryCommitsResponseBodyResultCommitter) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitsResponseBodyResultCommitter) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitsResponseBodyResultCommitter) SetAvatarUrl(v string) *ListRepositoryCommitsResponseBodyResultCommitter {
	s.AvatarUrl = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultCommitter) SetEmail(v string) *ListRepositoryCommitsResponseBodyResultCommitter {
	s.Email = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultCommitter) SetId(v int64) *ListRepositoryCommitsResponseBodyResultCommitter {
	s.Id = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultCommitter) SetName(v string) *ListRepositoryCommitsResponseBodyResultCommitter {
	s.Name = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultCommitter) SetState(v string) *ListRepositoryCommitsResponseBodyResultCommitter {
	s.State = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultCommitter) SetUsername(v string) *ListRepositoryCommitsResponseBodyResultCommitter {
	s.Username = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultCommitter) SetWebsiteUrl(v string) *ListRepositoryCommitsResponseBodyResultCommitter {
	s.WebsiteUrl = &v
	return s
}

type ListRepositoryCommitsResponseBodyResultSignature struct {
	// example:
	//
	// ”“
	GpgKeyId *string `json:"gpgKeyId,omitempty" xml:"gpgKeyId,omitempty"`
	// example:
	//
	// verified
	VerificationStatus *string `json:"verificationStatus,omitempty" xml:"verificationStatus,omitempty"`
}

func (s ListRepositoryCommitsResponseBodyResultSignature) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitsResponseBodyResultSignature) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitsResponseBodyResultSignature) SetGpgKeyId(v string) *ListRepositoryCommitsResponseBodyResultSignature {
	s.GpgKeyId = &v
	return s
}

func (s *ListRepositoryCommitsResponseBodyResultSignature) SetVerificationStatus(v string) *ListRepositoryCommitsResponseBodyResultSignature {
	s.VerificationStatus = &v
	return s
}

type ListRepositoryCommitsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRepositoryCommitsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRepositoryCommitsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryCommitsResponse) GoString() string {
	return s.String()
}

func (s *ListRepositoryCommitsResponse) SetHeaders(v map[string]*string) *ListRepositoryCommitsResponse {
	s.Headers = v
	return s
}

func (s *ListRepositoryCommitsResponse) SetStatusCode(v int32) *ListRepositoryCommitsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRepositoryCommitsResponse) SetBody(v *ListRepositoryCommitsResponseBody) *ListRepositoryCommitsResponse {
	s.Body = v
	return s
}

type ListRepositoryGroupsRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// false
	IncludePersonal *bool `json:"includePersonal,omitempty" xml:"includePersonal,omitempty"`
	// example:
	//
	// updated_at
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 26842
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// Demo
	Search *string `json:"search,omitempty" xml:"search,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
}

func (s ListRepositoryGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListRepositoryGroupsRequest) SetAccessToken(v string) *ListRepositoryGroupsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListRepositoryGroupsRequest) SetIncludePersonal(v bool) *ListRepositoryGroupsRequest {
	s.IncludePersonal = &v
	return s
}

func (s *ListRepositoryGroupsRequest) SetOrderBy(v string) *ListRepositoryGroupsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListRepositoryGroupsRequest) SetOrganizationId(v string) *ListRepositoryGroupsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListRepositoryGroupsRequest) SetPage(v int64) *ListRepositoryGroupsRequest {
	s.Page = &v
	return s
}

func (s *ListRepositoryGroupsRequest) SetPageSize(v int64) *ListRepositoryGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListRepositoryGroupsRequest) SetParentId(v int64) *ListRepositoryGroupsRequest {
	s.ParentId = &v
	return s
}

func (s *ListRepositoryGroupsRequest) SetSearch(v string) *ListRepositoryGroupsRequest {
	s.Search = &v
	return s
}

func (s *ListRepositoryGroupsRequest) SetSort(v string) *ListRepositoryGroupsRequest {
	s.Sort = &v
	return s
}

type ListRepositoryGroupsResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListRepositoryGroupsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 100
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListRepositoryGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRepositoryGroupsResponseBody) SetErrorCode(v string) *ListRepositoryGroupsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListRepositoryGroupsResponseBody) SetErrorMessage(v string) *ListRepositoryGroupsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRepositoryGroupsResponseBody) SetRequestId(v string) *ListRepositoryGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRepositoryGroupsResponseBody) SetResult(v []*ListRepositoryGroupsResponseBodyResult) *ListRepositoryGroupsResponseBody {
	s.Result = v
	return s
}

func (s *ListRepositoryGroupsResponseBody) SetSuccess(v bool) *ListRepositoryGroupsResponseBody {
	s.Success = &v
	return s
}

func (s *ListRepositoryGroupsResponseBody) SetTotal(v int64) *ListRepositoryGroupsResponseBody {
	s.Total = &v
	return s
}

type ListRepositoryGroupsResponseBodyResult struct {
	// example:
	//
	// 40
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt   *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 10
	GroupCount *int64 `json:"groupCount,omitempty" xml:"groupCount,omitempty"`
	// example:
	//
	// 19285
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-codeup
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// 19230
	OwnerId *int64 `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	// example:
	//
	// 26842
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// test-codeup
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// 60de7a6852743a5162b5f957/test-codeup
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// 10
	ProjectCount *int64 `json:"projectCount,omitempty" xml:"projectCount,omitempty"`
	// example:
	//
	// Group
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// ""
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s ListRepositoryGroupsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryGroupsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListRepositoryGroupsResponseBodyResult) SetAccessLevel(v int32) *ListRepositoryGroupsResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetAvatarUrl(v string) *ListRepositoryGroupsResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetCreatedAt(v string) *ListRepositoryGroupsResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetDescription(v string) *ListRepositoryGroupsResponseBodyResult {
	s.Description = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetGroupCount(v int64) *ListRepositoryGroupsResponseBodyResult {
	s.GroupCount = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetId(v int64) *ListRepositoryGroupsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetName(v string) *ListRepositoryGroupsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetNameWithNamespace(v string) *ListRepositoryGroupsResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetOwnerId(v int64) *ListRepositoryGroupsResponseBodyResult {
	s.OwnerId = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetParentId(v int64) *ListRepositoryGroupsResponseBodyResult {
	s.ParentId = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetPath(v string) *ListRepositoryGroupsResponseBodyResult {
	s.Path = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetPathWithNamespace(v string) *ListRepositoryGroupsResponseBodyResult {
	s.PathWithNamespace = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetProjectCount(v int64) *ListRepositoryGroupsResponseBodyResult {
	s.ProjectCount = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetType(v string) *ListRepositoryGroupsResponseBodyResult {
	s.Type = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetUpdatedAt(v string) *ListRepositoryGroupsResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetVisibilityLevel(v int32) *ListRepositoryGroupsResponseBodyResult {
	s.VisibilityLevel = &v
	return s
}

func (s *ListRepositoryGroupsResponseBodyResult) SetWebUrl(v string) *ListRepositoryGroupsResponseBodyResult {
	s.WebUrl = &v
	return s
}

type ListRepositoryGroupsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRepositoryGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRepositoryGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListRepositoryGroupsResponse) SetHeaders(v map[string]*string) *ListRepositoryGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListRepositoryGroupsResponse) SetStatusCode(v int32) *ListRepositoryGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRepositoryGroupsResponse) SetBody(v *ListRepositoryGroupsResponseBody) *ListRepositoryGroupsResponse {
	s.Body = v
	return s
}

type ListRepositoryMemberWithInheritedRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListRepositoryMemberWithInheritedRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryMemberWithInheritedRequest) GoString() string {
	return s.String()
}

func (s *ListRepositoryMemberWithInheritedRequest) SetAccessToken(v string) *ListRepositoryMemberWithInheritedRequest {
	s.AccessToken = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedRequest) SetOrganizationId(v string) *ListRepositoryMemberWithInheritedRequest {
	s.OrganizationId = &v
	return s
}

type ListRepositoryMemberWithInheritedResponseBody struct {
	ErrorCode    *string                                                `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	ErrorMessage *string                                                `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	RequestId    *string                                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result       []*ListRepositoryMemberWithInheritedResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	Success      *bool                                                  `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListRepositoryMemberWithInheritedResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryMemberWithInheritedResponseBody) GoString() string {
	return s.String()
}

func (s *ListRepositoryMemberWithInheritedResponseBody) SetErrorCode(v string) *ListRepositoryMemberWithInheritedResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBody) SetErrorMessage(v string) *ListRepositoryMemberWithInheritedResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBody) SetRequestId(v string) *ListRepositoryMemberWithInheritedResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBody) SetResult(v []*ListRepositoryMemberWithInheritedResponseBodyResult) *ListRepositoryMemberWithInheritedResponseBody {
	s.Result = v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBody) SetSuccess(v bool) *ListRepositoryMemberWithInheritedResponseBody {
	s.Success = &v
	return s
}

type ListRepositoryMemberWithInheritedResponseBodyResult struct {
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string                                                       `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	Email     *string                                                       `json:"email,omitempty" xml:"email,omitempty"`
	Id        *int64                                                        `json:"id,omitempty" xml:"id,omitempty"`
	Inherited *ListRepositoryMemberWithInheritedResponseBodyResultInherited `json:"inherited,omitempty" xml:"inherited,omitempty" type:"Struct"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// yunxiao
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListRepositoryMemberWithInheritedResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryMemberWithInheritedResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResult) SetAccessLevel(v int32) *ListRepositoryMemberWithInheritedResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResult) SetAvatarUrl(v string) *ListRepositoryMemberWithInheritedResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResult) SetEmail(v string) *ListRepositoryMemberWithInheritedResponseBodyResult {
	s.Email = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResult) SetId(v int64) *ListRepositoryMemberWithInheritedResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResult) SetInherited(v *ListRepositoryMemberWithInheritedResponseBodyResultInherited) *ListRepositoryMemberWithInheritedResponseBodyResult {
	s.Inherited = v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResult) SetName(v string) *ListRepositoryMemberWithInheritedResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResult) SetState(v string) *ListRepositoryMemberWithInheritedResponseBodyResult {
	s.State = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResult) SetUsername(v string) *ListRepositoryMemberWithInheritedResponseBodyResult {
	s.Username = &v
	return s
}

type ListRepositoryMemberWithInheritedResponseBodyResultInherited struct {
	// id
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// codeup
	Path              *string `json:"path,omitempty" xml:"path,omitempty"`
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	Type              *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *string `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
}

func (s ListRepositoryMemberWithInheritedResponseBodyResultInherited) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryMemberWithInheritedResponseBodyResultInherited) GoString() string {
	return s.String()
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResultInherited) SetId(v int64) *ListRepositoryMemberWithInheritedResponseBodyResultInherited {
	s.Id = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResultInherited) SetName(v string) *ListRepositoryMemberWithInheritedResponseBodyResultInherited {
	s.Name = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResultInherited) SetNameWithNamespace(v string) *ListRepositoryMemberWithInheritedResponseBodyResultInherited {
	s.NameWithNamespace = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResultInherited) SetPath(v string) *ListRepositoryMemberWithInheritedResponseBodyResultInherited {
	s.Path = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResultInherited) SetPathWithNamespace(v string) *ListRepositoryMemberWithInheritedResponseBodyResultInherited {
	s.PathWithNamespace = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResultInherited) SetType(v string) *ListRepositoryMemberWithInheritedResponseBodyResultInherited {
	s.Type = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponseBodyResultInherited) SetVisibilityLevel(v string) *ListRepositoryMemberWithInheritedResponseBodyResultInherited {
	s.VisibilityLevel = &v
	return s
}

type ListRepositoryMemberWithInheritedResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRepositoryMemberWithInheritedResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRepositoryMemberWithInheritedResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryMemberWithInheritedResponse) GoString() string {
	return s.String()
}

func (s *ListRepositoryMemberWithInheritedResponse) SetHeaders(v map[string]*string) *ListRepositoryMemberWithInheritedResponse {
	s.Headers = v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponse) SetStatusCode(v int32) *ListRepositoryMemberWithInheritedResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRepositoryMemberWithInheritedResponse) SetBody(v *ListRepositoryMemberWithInheritedResponseBody) *ListRepositoryMemberWithInheritedResponse {
	s.Body = v
	return s
}

type ListRepositoryTagsRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 611b75680fc7bf0dbe1dce55
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 2
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// Demo
	Search *string `json:"search,omitempty" xml:"search,omitempty"`
	// example:
	//
	// updated_desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
}

func (s ListRepositoryTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryTagsRequest) GoString() string {
	return s.String()
}

func (s *ListRepositoryTagsRequest) SetAccessToken(v string) *ListRepositoryTagsRequest {
	s.AccessToken = &v
	return s
}

func (s *ListRepositoryTagsRequest) SetOrganizationId(v string) *ListRepositoryTagsRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListRepositoryTagsRequest) SetPage(v int64) *ListRepositoryTagsRequest {
	s.Page = &v
	return s
}

func (s *ListRepositoryTagsRequest) SetPageSize(v int64) *ListRepositoryTagsRequest {
	s.PageSize = &v
	return s
}

func (s *ListRepositoryTagsRequest) SetSearch(v string) *ListRepositoryTagsRequest {
	s.Search = &v
	return s
}

func (s *ListRepositoryTagsRequest) SetSort(v string) *ListRepositoryTagsRequest {
	s.Sort = &v
	return s
}

type ListRepositoryTagsResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListRepositoryTagsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 30
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListRepositoryTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRepositoryTagsResponseBody) SetErrorCode(v string) *ListRepositoryTagsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListRepositoryTagsResponseBody) SetErrorMessage(v string) *ListRepositoryTagsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRepositoryTagsResponseBody) SetRequestId(v string) *ListRepositoryTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRepositoryTagsResponseBody) SetResult(v []*ListRepositoryTagsResponseBodyResult) *ListRepositoryTagsResponseBody {
	s.Result = v
	return s
}

func (s *ListRepositoryTagsResponseBody) SetSuccess(v bool) *ListRepositoryTagsResponseBody {
	s.Success = &v
	return s
}

func (s *ListRepositoryTagsResponseBody) SetTotal(v int64) *ListRepositoryTagsResponseBody {
	s.Total = &v
	return s
}

type ListRepositoryTagsResponseBodyResult struct {
	Commit *ListRepositoryTagsResponseBodyResultCommit `json:"commit,omitempty" xml:"commit,omitempty" type:"Struct"`
	// example:
	//
	// 9a494e7b88ca35cde00579af2df4ab46136c022e
	Id      *string `json:"id,omitempty" xml:"id,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// tag v1.0
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListRepositoryTagsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryTagsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListRepositoryTagsResponseBodyResult) SetCommit(v *ListRepositoryTagsResponseBodyResultCommit) *ListRepositoryTagsResponseBodyResult {
	s.Commit = v
	return s
}

func (s *ListRepositoryTagsResponseBodyResult) SetId(v string) *ListRepositoryTagsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResult) SetMessage(v string) *ListRepositoryTagsResponseBodyResult {
	s.Message = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResult) SetName(v string) *ListRepositoryTagsResponseBodyResult {
	s.Name = &v
	return s
}

type ListRepositoryTagsResponseBodyResultCommit struct {
	// example:
	//
	// username@example.com
	AuthorEmail *string `json:"authorEmail,omitempty" xml:"authorEmail,omitempty"`
	AuthorName  *string `json:"authorName,omitempty" xml:"authorName,omitempty"`
	// example:
	//
	// 2022-03-18 10:00:00
	AuthoredDate *string `json:"authoredDate,omitempty" xml:"authoredDate,omitempty"`
	// example:
	//
	// 2022-03-18 09:00:00
	CommittedDate *string `json:"committedDate,omitempty" xml:"committedDate,omitempty"`
	// example:
	//
	// username@example.com
	CommitterEmail *string `json:"committerEmail,omitempty" xml:"committerEmail,omitempty"`
	CommitterName  *string `json:"committerName,omitempty" xml:"committerName,omitempty"`
	// example:
	//
	// 2022-03-18 10:00:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// de02b625ba8488f92eb204bcb3773a40c1b4ddac
	Id        *string   `json:"id,omitempty" xml:"id,omitempty"`
	Message   *string   `json:"message,omitempty" xml:"message,omitempty"`
	ParentIds []*string `json:"parentIds,omitempty" xml:"parentIds,omitempty" type:"Repeated"`
	// example:
	//
	// de02b625
	ShortId   *string                                              `json:"shortId,omitempty" xml:"shortId,omitempty"`
	Signature *ListRepositoryTagsResponseBodyResultCommitSignature `json:"signature,omitempty" xml:"signature,omitempty" type:"Struct"`
	Title     *string                                              `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ListRepositoryTagsResponseBodyResultCommit) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryTagsResponseBodyResultCommit) GoString() string {
	return s.String()
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetAuthorEmail(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.AuthorEmail = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetAuthorName(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.AuthorName = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetAuthoredDate(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.AuthoredDate = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetCommittedDate(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.CommittedDate = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetCommitterEmail(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.CommitterEmail = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetCommitterName(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.CommitterName = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetCreatedAt(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.CreatedAt = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetId(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.Id = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetMessage(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.Message = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetParentIds(v []*string) *ListRepositoryTagsResponseBodyResultCommit {
	s.ParentIds = v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetShortId(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.ShortId = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetSignature(v *ListRepositoryTagsResponseBodyResultCommitSignature) *ListRepositoryTagsResponseBodyResultCommit {
	s.Signature = v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommit) SetTitle(v string) *ListRepositoryTagsResponseBodyResultCommit {
	s.Title = &v
	return s
}

type ListRepositoryTagsResponseBodyResultCommitSignature struct {
	// example:
	//
	// ""
	GpgKeyId *string `json:"gpgKeyId,omitempty" xml:"gpgKeyId,omitempty"`
	// example:
	//
	// verified
	VerificationStatus *string `json:"verificationStatus,omitempty" xml:"verificationStatus,omitempty"`
}

func (s ListRepositoryTagsResponseBodyResultCommitSignature) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryTagsResponseBodyResultCommitSignature) GoString() string {
	return s.String()
}

func (s *ListRepositoryTagsResponseBodyResultCommitSignature) SetGpgKeyId(v string) *ListRepositoryTagsResponseBodyResultCommitSignature {
	s.GpgKeyId = &v
	return s
}

func (s *ListRepositoryTagsResponseBodyResultCommitSignature) SetVerificationStatus(v string) *ListRepositoryTagsResponseBodyResultCommitSignature {
	s.VerificationStatus = &v
	return s
}

type ListRepositoryTagsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRepositoryTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRepositoryTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryTagsResponse) GoString() string {
	return s.String()
}

func (s *ListRepositoryTagsResponse) SetHeaders(v map[string]*string) *ListRepositoryTagsResponse {
	s.Headers = v
	return s
}

func (s *ListRepositoryTagsResponse) SetStatusCode(v int32) *ListRepositoryTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRepositoryTagsResponse) SetBody(v *ListRepositoryTagsResponseBody) *ListRepositoryTagsResponse {
	s.Body = v
	return s
}

type ListRepositoryTreeRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 624666bd54d036291ae13a36
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// module
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// master / tag1.0 / sjjfssa
	RefName *string `json:"refName,omitempty" xml:"refName,omitempty"`
	// example:
	//
	// RECURSIVE
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListRepositoryTreeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryTreeRequest) GoString() string {
	return s.String()
}

func (s *ListRepositoryTreeRequest) SetAccessToken(v string) *ListRepositoryTreeRequest {
	s.AccessToken = &v
	return s
}

func (s *ListRepositoryTreeRequest) SetOrganizationId(v string) *ListRepositoryTreeRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListRepositoryTreeRequest) SetPath(v string) *ListRepositoryTreeRequest {
	s.Path = &v
	return s
}

func (s *ListRepositoryTreeRequest) SetRefName(v string) *ListRepositoryTreeRequest {
	s.RefName = &v
	return s
}

func (s *ListRepositoryTreeRequest) SetType(v string) *ListRepositoryTreeRequest {
	s.Type = &v
	return s
}

type ListRepositoryTreeResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 6557983C-FB08-51A9-AC5A-A7A0D0950A07
	RequestId *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListRepositoryTreeResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListRepositoryTreeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryTreeResponseBody) GoString() string {
	return s.String()
}

func (s *ListRepositoryTreeResponseBody) SetErrorCode(v string) *ListRepositoryTreeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListRepositoryTreeResponseBody) SetErrorMessage(v string) *ListRepositoryTreeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRepositoryTreeResponseBody) SetRequestId(v string) *ListRepositoryTreeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRepositoryTreeResponseBody) SetResult(v []*ListRepositoryTreeResponseBodyResult) *ListRepositoryTreeResponseBody {
	s.Result = v
	return s
}

func (s *ListRepositoryTreeResponseBody) SetSuccess(v bool) *ListRepositoryTreeResponseBody {
	s.Success = &v
	return s
}

type ListRepositoryTreeResponseBodyResult struct {
	// example:
	//
	// 76c3f251f414ac31f2e01faf6f2008a9d756a437
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// false
	IsLFS *bool `json:"isLFS,omitempty" xml:"isLFS,omitempty"`
	// example:
	//
	// 100644
	Mode *string `json:"mode,omitempty" xml:"mode,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// test-codeup
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// blob
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListRepositoryTreeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryTreeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListRepositoryTreeResponseBodyResult) SetId(v string) *ListRepositoryTreeResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListRepositoryTreeResponseBodyResult) SetIsLFS(v bool) *ListRepositoryTreeResponseBodyResult {
	s.IsLFS = &v
	return s
}

func (s *ListRepositoryTreeResponseBodyResult) SetMode(v string) *ListRepositoryTreeResponseBodyResult {
	s.Mode = &v
	return s
}

func (s *ListRepositoryTreeResponseBodyResult) SetName(v string) *ListRepositoryTreeResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ListRepositoryTreeResponseBodyResult) SetPath(v string) *ListRepositoryTreeResponseBodyResult {
	s.Path = &v
	return s
}

func (s *ListRepositoryTreeResponseBodyResult) SetType(v string) *ListRepositoryTreeResponseBodyResult {
	s.Type = &v
	return s
}

type ListRepositoryTreeResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRepositoryTreeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRepositoryTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryTreeResponse) GoString() string {
	return s.String()
}

func (s *ListRepositoryTreeResponse) SetHeaders(v map[string]*string) *ListRepositoryTreeResponse {
	s.Headers = v
	return s
}

func (s *ListRepositoryTreeResponse) SetStatusCode(v int32) *ListRepositoryTreeResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRepositoryTreeResponse) SetBody(v *ListRepositoryTreeResponseBody) *ListRepositoryTreeResponse {
	s.Body = v
	return s
}

type ListRepositoryWebhookRequest struct {
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
}

func (s ListRepositoryWebhookRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryWebhookRequest) GoString() string {
	return s.String()
}

func (s *ListRepositoryWebhookRequest) SetAccessToken(v string) *ListRepositoryWebhookRequest {
	s.AccessToken = &v
	return s
}

func (s *ListRepositoryWebhookRequest) SetOrganizationId(v string) *ListRepositoryWebhookRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListRepositoryWebhookRequest) SetPage(v int64) *ListRepositoryWebhookRequest {
	s.Page = &v
	return s
}

func (s *ListRepositoryWebhookRequest) SetPageSize(v int64) *ListRepositoryWebhookRequest {
	s.PageSize = &v
	return s
}

type ListRepositoryWebhookResponseBody struct {
	ErrorCode    *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// HC93CE1A-8D7A-13A9-8306-7465DE2E5C0F
	RequestId *string                                    `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListRepositoryWebhookResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 100
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListRepositoryWebhookResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryWebhookResponseBody) GoString() string {
	return s.String()
}

func (s *ListRepositoryWebhookResponseBody) SetErrorCode(v string) *ListRepositoryWebhookResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListRepositoryWebhookResponseBody) SetErrorMessage(v string) *ListRepositoryWebhookResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListRepositoryWebhookResponseBody) SetRequestId(v string) *ListRepositoryWebhookResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRepositoryWebhookResponseBody) SetResult(v []*ListRepositoryWebhookResponseBodyResult) *ListRepositoryWebhookResponseBody {
	s.Result = v
	return s
}

func (s *ListRepositoryWebhookResponseBody) SetSuccess(v bool) *ListRepositoryWebhookResponseBody {
	s.Success = &v
	return s
}

func (s *ListRepositoryWebhookResponseBody) SetTotal(v int64) *ListRepositoryWebhookResponseBody {
	s.Total = &v
	return s
}

type ListRepositoryWebhookResponseBodyResult struct {
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt   *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// false
	EnableSslVerification *bool `json:"enableSslVerification,omitempty" xml:"enableSslVerification,omitempty"`
	// example:
	//
	// 16776
	Id             *int64  `json:"id,omitempty" xml:"id,omitempty"`
	LastTestResult *string `json:"lastTestResult,omitempty" xml:"lastTestResult,omitempty"`
	// example:
	//
	// true
	MergeRequestsEvents *bool `json:"mergeRequestsEvents,omitempty" xml:"mergeRequestsEvents,omitempty"`
	// example:
	//
	// false
	NoteEvents *bool  `json:"noteEvents,omitempty" xml:"noteEvents,omitempty"`
	ProjectId  *int64 `json:"projectId,omitempty" xml:"projectId,omitempty"`
	// example:
	//
	// false
	PushEvents *bool `json:"pushEvents,omitempty" xml:"pushEvents,omitempty"`
	// example:
	//
	// xxxx
	SecretToken *string `json:"secretToken,omitempty" xml:"secretToken,omitempty"`
	// example:
	//
	// false
	TagPushEvents *bool `json:"tagPushEvents,omitempty" xml:"tagPushEvents,omitempty"`
	// example:
	//
	// https://xxxx
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s ListRepositoryWebhookResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryWebhookResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListRepositoryWebhookResponseBodyResult) SetCreatedAt(v string) *ListRepositoryWebhookResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetDescription(v string) *ListRepositoryWebhookResponseBodyResult {
	s.Description = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetEnableSslVerification(v bool) *ListRepositoryWebhookResponseBodyResult {
	s.EnableSslVerification = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetId(v int64) *ListRepositoryWebhookResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetLastTestResult(v string) *ListRepositoryWebhookResponseBodyResult {
	s.LastTestResult = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetMergeRequestsEvents(v bool) *ListRepositoryWebhookResponseBodyResult {
	s.MergeRequestsEvents = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetNoteEvents(v bool) *ListRepositoryWebhookResponseBodyResult {
	s.NoteEvents = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetProjectId(v int64) *ListRepositoryWebhookResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetPushEvents(v bool) *ListRepositoryWebhookResponseBodyResult {
	s.PushEvents = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetSecretToken(v string) *ListRepositoryWebhookResponseBodyResult {
	s.SecretToken = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetTagPushEvents(v bool) *ListRepositoryWebhookResponseBodyResult {
	s.TagPushEvents = &v
	return s
}

func (s *ListRepositoryWebhookResponseBodyResult) SetUrl(v string) *ListRepositoryWebhookResponseBodyResult {
	s.Url = &v
	return s
}

type ListRepositoryWebhookResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRepositoryWebhookResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRepositoryWebhookResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRepositoryWebhookResponse) GoString() string {
	return s.String()
}

func (s *ListRepositoryWebhookResponse) SetHeaders(v map[string]*string) *ListRepositoryWebhookResponse {
	s.Headers = v
	return s
}

func (s *ListRepositoryWebhookResponse) SetStatusCode(v int32) *ListRepositoryWebhookResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRepositoryWebhookResponse) SetBody(v *ListRepositoryWebhookResponseBody) *ListRepositoryWebhookResponse {
	s.Body = v
	return s
}

type ListResourceMembersResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId       *string                                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ResourceMembers []*ListResourceMembersResponseBodyResourceMembers `json:"resourceMembers,omitempty" xml:"resourceMembers,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListResourceMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListResourceMembersResponseBody) GoString() string {
	return s.String()
}

func (s *ListResourceMembersResponseBody) SetErrorCode(v string) *ListResourceMembersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListResourceMembersResponseBody) SetErrorMessage(v string) *ListResourceMembersResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListResourceMembersResponseBody) SetRequestId(v string) *ListResourceMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListResourceMembersResponseBody) SetResourceMembers(v []*ListResourceMembersResponseBodyResourceMembers) *ListResourceMembersResponseBody {
	s.ResourceMembers = v
	return s
}

func (s *ListResourceMembersResponseBody) SetSuccess(v bool) *ListResourceMembersResponseBody {
	s.Success = &v
	return s
}

type ListResourceMembersResponseBodyResourceMembers struct {
	// example:
	//
	// 22212212
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	// example:
	//
	// admin
	RoleName *string `json:"roleName,omitempty" xml:"roleName,omitempty"`
	// example:
	//
	// 张三
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListResourceMembersResponseBodyResourceMembers) String() string {
	return tea.Prettify(s)
}

func (s ListResourceMembersResponseBodyResourceMembers) GoString() string {
	return s.String()
}

func (s *ListResourceMembersResponseBodyResourceMembers) SetAccountId(v string) *ListResourceMembersResponseBodyResourceMembers {
	s.AccountId = &v
	return s
}

func (s *ListResourceMembersResponseBodyResourceMembers) SetRoleName(v string) *ListResourceMembersResponseBodyResourceMembers {
	s.RoleName = &v
	return s
}

func (s *ListResourceMembersResponseBodyResourceMembers) SetUsername(v string) *ListResourceMembersResponseBodyResourceMembers {
	s.Username = &v
	return s
}

type ListResourceMembersResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListResourceMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListResourceMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourceMembersResponse) GoString() string {
	return s.String()
}

func (s *ListResourceMembersResponse) SetHeaders(v map[string]*string) *ListResourceMembersResponse {
	s.Headers = v
	return s
}

func (s *ListResourceMembersResponse) SetStatusCode(v int32) *ListResourceMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListResourceMembersResponse) SetBody(v *ListResourceMembersResponseBody) *ListResourceMembersResponse {
	s.Body = v
	return s
}

type ListSearchCommitRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// example:
	//
	// default
	Order *string `json:"order,omitempty" xml:"order,omitempty"`
	// example:
	//
	// 1
	Page *int32 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 10
	PageSize *int32                           `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RepoPath *ListSearchCommitRequestRepoPath `json:"repoPath,omitempty" xml:"repoPath,omitempty" type:"Struct"`
	// example:
	//
	// all
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60d54f3daccf2bbd6659f3ad
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListSearchCommitRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSearchCommitRequest) GoString() string {
	return s.String()
}

func (s *ListSearchCommitRequest) SetKeyword(v string) *ListSearchCommitRequest {
	s.Keyword = &v
	return s
}

func (s *ListSearchCommitRequest) SetOrder(v string) *ListSearchCommitRequest {
	s.Order = &v
	return s
}

func (s *ListSearchCommitRequest) SetPage(v int32) *ListSearchCommitRequest {
	s.Page = &v
	return s
}

func (s *ListSearchCommitRequest) SetPageSize(v int32) *ListSearchCommitRequest {
	s.PageSize = &v
	return s
}

func (s *ListSearchCommitRequest) SetRepoPath(v *ListSearchCommitRequestRepoPath) *ListSearchCommitRequest {
	s.RepoPath = v
	return s
}

func (s *ListSearchCommitRequest) SetScope(v string) *ListSearchCommitRequest {
	s.Scope = &v
	return s
}

func (s *ListSearchCommitRequest) SetSort(v string) *ListSearchCommitRequest {
	s.Sort = &v
	return s
}

func (s *ListSearchCommitRequest) SetOrganizationId(v string) *ListSearchCommitRequest {
	s.OrganizationId = &v
	return s
}

type ListSearchCommitRequestRepoPath struct {
	// example:
	//
	// term
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty"`
	// example:
	//
	// equal
	OperatorType *string `json:"operatorType,omitempty" xml:"operatorType,omitempty"`
	// example:
	//
	// orgId/test-group/spring-boot-demo
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ListSearchCommitRequestRepoPath) String() string {
	return tea.Prettify(s)
}

func (s ListSearchCommitRequestRepoPath) GoString() string {
	return s.String()
}

func (s *ListSearchCommitRequestRepoPath) SetMatchType(v string) *ListSearchCommitRequestRepoPath {
	s.MatchType = &v
	return s
}

func (s *ListSearchCommitRequestRepoPath) SetOperatorType(v string) *ListSearchCommitRequestRepoPath {
	s.OperatorType = &v
	return s
}

func (s *ListSearchCommitRequestRepoPath) SetValue(v string) *ListSearchCommitRequestRepoPath {
	s.Value = &v
	return s
}

type ListSearchCommitResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListSearchCommitResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 10
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListSearchCommitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSearchCommitResponseBody) GoString() string {
	return s.String()
}

func (s *ListSearchCommitResponseBody) SetErrorCode(v string) *ListSearchCommitResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListSearchCommitResponseBody) SetErrorMessage(v string) *ListSearchCommitResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListSearchCommitResponseBody) SetRequestId(v string) *ListSearchCommitResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSearchCommitResponseBody) SetResult(v []*ListSearchCommitResponseBodyResult) *ListSearchCommitResponseBody {
	s.Result = v
	return s
}

func (s *ListSearchCommitResponseBody) SetSuccess(v bool) *ListSearchCommitResponseBody {
	s.Success = &v
	return s
}

func (s *ListSearchCommitResponseBody) SetTotal(v int64) *ListSearchCommitResponseBody {
	s.Total = &v
	return s
}

type ListSearchCommitResponseBodyResult struct {
	// example:
	//
	// 60d54f3daccf2bbd6659f3ad/gitlabhq/master/config/environments/test.rb
	DocId            *string                                             `json:"docId,omitempty" xml:"docId,omitempty"`
	HighlightTextMap *ListSearchCommitResponseBodyResultHighlightTextMap `json:"highlightTextMap,omitempty" xml:"highlightTextMap,omitempty" type:"Struct"`
	Source           *ListSearchCommitResponseBodyResultSource           `json:"source,omitempty" xml:"source,omitempty" type:"Struct"`
}

func (s ListSearchCommitResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListSearchCommitResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListSearchCommitResponseBodyResult) SetDocId(v string) *ListSearchCommitResponseBodyResult {
	s.DocId = &v
	return s
}

func (s *ListSearchCommitResponseBodyResult) SetHighlightTextMap(v *ListSearchCommitResponseBodyResultHighlightTextMap) *ListSearchCommitResponseBodyResult {
	s.HighlightTextMap = v
	return s
}

func (s *ListSearchCommitResponseBodyResult) SetSource(v *ListSearchCommitResponseBodyResultSource) *ListSearchCommitResponseBodyResult {
	s.Source = v
	return s
}

type ListSearchCommitResponseBodyResultHighlightTextMap struct {
	// example:
	//
	// df1b701cb0f3f7ca92320d49d31995821f2d045c
	CommitId      *string `json:"commitId,omitempty" xml:"commitId,omitempty"`
	CommitMessage *string `json:"commitMessage,omitempty" xml:"commitMessage,omitempty"`
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	Title          *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ListSearchCommitResponseBodyResultHighlightTextMap) String() string {
	return tea.Prettify(s)
}

func (s ListSearchCommitResponseBodyResultHighlightTextMap) GoString() string {
	return s.String()
}

func (s *ListSearchCommitResponseBodyResultHighlightTextMap) SetCommitId(v string) *ListSearchCommitResponseBodyResultHighlightTextMap {
	s.CommitId = &v
	return s
}

func (s *ListSearchCommitResponseBodyResultHighlightTextMap) SetCommitMessage(v string) *ListSearchCommitResponseBodyResultHighlightTextMap {
	s.CommitMessage = &v
	return s
}

func (s *ListSearchCommitResponseBodyResultHighlightTextMap) SetOrganizationId(v string) *ListSearchCommitResponseBodyResultHighlightTextMap {
	s.OrganizationId = &v
	return s
}

func (s *ListSearchCommitResponseBodyResultHighlightTextMap) SetTitle(v string) *ListSearchCommitResponseBodyResultHighlightTextMap {
	s.Title = &v
	return s
}

type ListSearchCommitResponseBodyResultSource struct {
	Author *ListSearchCommitResponseBodyResultSourceAuthor `json:"author,omitempty" xml:"author,omitempty" type:"Struct"`
	// example:
	//
	// 2022-11-11 11:11:11
	AuthorTime *string `json:"authorTime,omitempty" xml:"authorTime,omitempty"`
	// example:
	//
	// a748f5ecb17a93900d4808944bfcc96dc158ee2d
	CommitId      *string `json:"commitId,omitempty" xml:"commitId,omitempty"`
	CommitMessage *string `json:"commitMessage,omitempty" xml:"commitMessage,omitempty"`
	// example:
	//
	// 61133b011bd96aa110f1b500
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// codeup/test-repo
	RepoPath *string `json:"repoPath,omitempty" xml:"repoPath,omitempty"`
	Title    *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ListSearchCommitResponseBodyResultSource) String() string {
	return tea.Prettify(s)
}

func (s ListSearchCommitResponseBodyResultSource) GoString() string {
	return s.String()
}

func (s *ListSearchCommitResponseBodyResultSource) SetAuthor(v *ListSearchCommitResponseBodyResultSourceAuthor) *ListSearchCommitResponseBodyResultSource {
	s.Author = v
	return s
}

func (s *ListSearchCommitResponseBodyResultSource) SetAuthorTime(v string) *ListSearchCommitResponseBodyResultSource {
	s.AuthorTime = &v
	return s
}

func (s *ListSearchCommitResponseBodyResultSource) SetCommitId(v string) *ListSearchCommitResponseBodyResultSource {
	s.CommitId = &v
	return s
}

func (s *ListSearchCommitResponseBodyResultSource) SetCommitMessage(v string) *ListSearchCommitResponseBodyResultSource {
	s.CommitMessage = &v
	return s
}

func (s *ListSearchCommitResponseBodyResultSource) SetOrganizationId(v string) *ListSearchCommitResponseBodyResultSource {
	s.OrganizationId = &v
	return s
}

func (s *ListSearchCommitResponseBodyResultSource) SetRepoPath(v string) *ListSearchCommitResponseBodyResultSource {
	s.RepoPath = &v
	return s
}

func (s *ListSearchCommitResponseBodyResultSource) SetTitle(v string) *ListSearchCommitResponseBodyResultSource {
	s.Title = &v
	return s
}

type ListSearchCommitResponseBodyResultSourceAuthor struct {
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	Name  *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListSearchCommitResponseBodyResultSourceAuthor) String() string {
	return tea.Prettify(s)
}

func (s ListSearchCommitResponseBodyResultSourceAuthor) GoString() string {
	return s.String()
}

func (s *ListSearchCommitResponseBodyResultSourceAuthor) SetEmail(v string) *ListSearchCommitResponseBodyResultSourceAuthor {
	s.Email = &v
	return s
}

func (s *ListSearchCommitResponseBodyResultSourceAuthor) SetName(v string) *ListSearchCommitResponseBodyResultSourceAuthor {
	s.Name = &v
	return s
}

type ListSearchCommitResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSearchCommitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSearchCommitResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSearchCommitResponse) GoString() string {
	return s.String()
}

func (s *ListSearchCommitResponse) SetHeaders(v map[string]*string) *ListSearchCommitResponse {
	s.Headers = v
	return s
}

func (s *ListSearchCommitResponse) SetStatusCode(v int32) *ListSearchCommitResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSearchCommitResponse) SetBody(v *ListSearchCommitResponseBody) *ListSearchCommitResponse {
	s.Body = v
	return s
}

type ListSearchRepositoryRequest struct {
	// example:
	//
	// 1840004904455497
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// test
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// example:
	//
	// default
	Order *string `json:"order,omitempty" xml:"order,omitempty"`
	// example:
	//
	// 1
	Page *int32 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 10
	PageSize *int32                               `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RepoPath *ListSearchRepositoryRequestRepoPath `json:"repoPath,omitempty" xml:"repoPath,omitempty" type:"Struct"`
	// example:
	//
	// all
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61e54b0e0bb300d827e1ae27
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListSearchRepositoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSearchRepositoryRequest) GoString() string {
	return s.String()
}

func (s *ListSearchRepositoryRequest) SetAliyunPk(v string) *ListSearchRepositoryRequest {
	s.AliyunPk = &v
	return s
}

func (s *ListSearchRepositoryRequest) SetKeyword(v string) *ListSearchRepositoryRequest {
	s.Keyword = &v
	return s
}

func (s *ListSearchRepositoryRequest) SetOrder(v string) *ListSearchRepositoryRequest {
	s.Order = &v
	return s
}

func (s *ListSearchRepositoryRequest) SetPage(v int32) *ListSearchRepositoryRequest {
	s.Page = &v
	return s
}

func (s *ListSearchRepositoryRequest) SetPageSize(v int32) *ListSearchRepositoryRequest {
	s.PageSize = &v
	return s
}

func (s *ListSearchRepositoryRequest) SetRepoPath(v *ListSearchRepositoryRequestRepoPath) *ListSearchRepositoryRequest {
	s.RepoPath = v
	return s
}

func (s *ListSearchRepositoryRequest) SetScope(v string) *ListSearchRepositoryRequest {
	s.Scope = &v
	return s
}

func (s *ListSearchRepositoryRequest) SetSort(v string) *ListSearchRepositoryRequest {
	s.Sort = &v
	return s
}

func (s *ListSearchRepositoryRequest) SetVisibilityLevel(v int32) *ListSearchRepositoryRequest {
	s.VisibilityLevel = &v
	return s
}

func (s *ListSearchRepositoryRequest) SetOrganizationId(v string) *ListSearchRepositoryRequest {
	s.OrganizationId = &v
	return s
}

type ListSearchRepositoryRequestRepoPath struct {
	// example:
	//
	// term
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty"`
	// example:
	//
	// equal
	OperatorType *string `json:"operatorType,omitempty" xml:"operatorType,omitempty"`
	// example:
	//
	// orgId/test-group/spring-boot-demo
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ListSearchRepositoryRequestRepoPath) String() string {
	return tea.Prettify(s)
}

func (s ListSearchRepositoryRequestRepoPath) GoString() string {
	return s.String()
}

func (s *ListSearchRepositoryRequestRepoPath) SetMatchType(v string) *ListSearchRepositoryRequestRepoPath {
	s.MatchType = &v
	return s
}

func (s *ListSearchRepositoryRequestRepoPath) SetOperatorType(v string) *ListSearchRepositoryRequestRepoPath {
	s.OperatorType = &v
	return s
}

func (s *ListSearchRepositoryRequestRepoPath) SetValue(v string) *ListSearchRepositoryRequestRepoPath {
	s.Value = &v
	return s
}

type ListSearchRepositoryResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListSearchRepositoryResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 30
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListSearchRepositoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSearchRepositoryResponseBody) GoString() string {
	return s.String()
}

func (s *ListSearchRepositoryResponseBody) SetErrorCode(v string) *ListSearchRepositoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListSearchRepositoryResponseBody) SetErrorMessage(v string) *ListSearchRepositoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListSearchRepositoryResponseBody) SetRequestId(v string) *ListSearchRepositoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSearchRepositoryResponseBody) SetResult(v []*ListSearchRepositoryResponseBodyResult) *ListSearchRepositoryResponseBody {
	s.Result = v
	return s
}

func (s *ListSearchRepositoryResponseBody) SetSuccess(v bool) *ListSearchRepositoryResponseBody {
	s.Success = &v
	return s
}

func (s *ListSearchRepositoryResponseBody) SetTotal(v int64) *ListSearchRepositoryResponseBody {
	s.Total = &v
	return s
}

type ListSearchRepositoryResponseBodyResult struct {
	// example:
	//
	// 60d54f3daccf2bbd6659f3ad/gitlabhq/master/config/environments/test.rb
	DocId            *string                                                 `json:"docId,omitempty" xml:"docId,omitempty"`
	HighlightTextMap *ListSearchRepositoryResponseBodyResultHighlightTextMap `json:"highlightTextMap,omitempty" xml:"highlightTextMap,omitempty" type:"Struct"`
	Source           *ListSearchRepositoryResponseBodyResultSource           `json:"source,omitempty" xml:"source,omitempty" type:"Struct"`
}

func (s ListSearchRepositoryResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListSearchRepositoryResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListSearchRepositoryResponseBodyResult) SetDocId(v string) *ListSearchRepositoryResponseBodyResult {
	s.DocId = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResult) SetHighlightTextMap(v *ListSearchRepositoryResponseBodyResultHighlightTextMap) *ListSearchRepositoryResponseBodyResult {
	s.HighlightTextMap = v
	return s
}

func (s *ListSearchRepositoryResponseBodyResult) SetSource(v *ListSearchRepositoryResponseBodyResultSource) *ListSearchRepositoryResponseBodyResult {
	s.Source = v
	return s
}

type ListSearchRepositoryResponseBodyResultHighlightTextMap struct {
	// example:
	//
	// xxx
	CreatorUserId *string `json:"creatorUserId,omitempty" xml:"creatorUserId,omitempty"`
	Description   *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// xx
	ReadMe *string `json:"readMe,omitempty" xml:"readMe,omitempty"`
	// example:
	//
	// codeup/test-repo
	RepoNameWithNamespace *string `json:"repoNameWithNamespace,omitempty" xml:"repoNameWithNamespace,omitempty"`
	// example:
	//
	// codeup/test-repo
	RepoPath *string `json:"repoPath,omitempty" xml:"repoPath,omitempty"`
}

func (s ListSearchRepositoryResponseBodyResultHighlightTextMap) String() string {
	return tea.Prettify(s)
}

func (s ListSearchRepositoryResponseBodyResultHighlightTextMap) GoString() string {
	return s.String()
}

func (s *ListSearchRepositoryResponseBodyResultHighlightTextMap) SetCreatorUserId(v string) *ListSearchRepositoryResponseBodyResultHighlightTextMap {
	s.CreatorUserId = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultHighlightTextMap) SetDescription(v string) *ListSearchRepositoryResponseBodyResultHighlightTextMap {
	s.Description = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultHighlightTextMap) SetOrganizationId(v string) *ListSearchRepositoryResponseBodyResultHighlightTextMap {
	s.OrganizationId = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultHighlightTextMap) SetReadMe(v string) *ListSearchRepositoryResponseBodyResultHighlightTextMap {
	s.ReadMe = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultHighlightTextMap) SetRepoNameWithNamespace(v string) *ListSearchRepositoryResponseBodyResultHighlightTextMap {
	s.RepoNameWithNamespace = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultHighlightTextMap) SetRepoPath(v string) *ListSearchRepositoryResponseBodyResultHighlightTextMap {
	s.RepoPath = &v
	return s
}

type ListSearchRepositoryResponseBodyResultSource struct {
	// example:
	//
	// 2022-10-10 10:10:10
	CreateTime  *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 2022-11-11 11:11:11
	LastActivityTime *string `json:"lastActivityTime,omitempty" xml:"lastActivityTime,omitempty"`
	// example:
	//
	// 62a94a8611fc0f0c9e2a7bc1
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// xxx
	ReadMe *string `json:"readMe,omitempty" xml:"readMe,omitempty"`
	// example:
	//
	// test-repo
	RepoName *string `json:"repoName,omitempty" xml:"repoName,omitempty"`
	// example:
	//
	// codeup/test-repo
	RepoPath *string `json:"repoPath,omitempty" xml:"repoPath,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
}

func (s ListSearchRepositoryResponseBodyResultSource) String() string {
	return tea.Prettify(s)
}

func (s ListSearchRepositoryResponseBodyResultSource) GoString() string {
	return s.String()
}

func (s *ListSearchRepositoryResponseBodyResultSource) SetCreateTime(v string) *ListSearchRepositoryResponseBodyResultSource {
	s.CreateTime = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultSource) SetDescription(v string) *ListSearchRepositoryResponseBodyResultSource {
	s.Description = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultSource) SetLastActivityTime(v string) *ListSearchRepositoryResponseBodyResultSource {
	s.LastActivityTime = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultSource) SetOrganizationId(v string) *ListSearchRepositoryResponseBodyResultSource {
	s.OrganizationId = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultSource) SetReadMe(v string) *ListSearchRepositoryResponseBodyResultSource {
	s.ReadMe = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultSource) SetRepoName(v string) *ListSearchRepositoryResponseBodyResultSource {
	s.RepoName = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultSource) SetRepoPath(v string) *ListSearchRepositoryResponseBodyResultSource {
	s.RepoPath = &v
	return s
}

func (s *ListSearchRepositoryResponseBodyResultSource) SetVisibilityLevel(v int32) *ListSearchRepositoryResponseBodyResultSource {
	s.VisibilityLevel = &v
	return s
}

type ListSearchRepositoryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSearchRepositoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSearchRepositoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSearchRepositoryResponse) GoString() string {
	return s.String()
}

func (s *ListSearchRepositoryResponse) SetHeaders(v map[string]*string) *ListSearchRepositoryResponse {
	s.Headers = v
	return s
}

func (s *ListSearchRepositoryResponse) SetStatusCode(v int32) *ListSearchRepositoryResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSearchRepositoryResponse) SetBody(v *ListSearchRepositoryResponseBody) *ListSearchRepositoryResponse {
	s.Body = v
	return s
}

type ListSearchSourceCodeRequest struct {
	FilePath *ListSearchSourceCodeRequestFilePath `json:"filePath,omitempty" xml:"filePath,omitempty" type:"Struct"`
	// example:
	//
	// false
	IsCodeBlock *bool `json:"isCodeBlock,omitempty" xml:"isCodeBlock,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// test
	Keyword *string `json:"keyword,omitempty" xml:"keyword,omitempty"`
	// example:
	//
	// Java
	Language *string `json:"language,omitempty" xml:"language,omitempty"`
	// example:
	//
	// default
	Order *string `json:"order,omitempty" xml:"order,omitempty"`
	// example:
	//
	// 1
	Page *int32 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 20
	PageSize *int32                               `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	RepoPath *ListSearchSourceCodeRequestRepoPath `json:"repoPath,omitempty" xml:"repoPath,omitempty" type:"Struct"`
	// example:
	//
	// all
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListSearchSourceCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSearchSourceCodeRequest) GoString() string {
	return s.String()
}

func (s *ListSearchSourceCodeRequest) SetFilePath(v *ListSearchSourceCodeRequestFilePath) *ListSearchSourceCodeRequest {
	s.FilePath = v
	return s
}

func (s *ListSearchSourceCodeRequest) SetIsCodeBlock(v bool) *ListSearchSourceCodeRequest {
	s.IsCodeBlock = &v
	return s
}

func (s *ListSearchSourceCodeRequest) SetKeyword(v string) *ListSearchSourceCodeRequest {
	s.Keyword = &v
	return s
}

func (s *ListSearchSourceCodeRequest) SetLanguage(v string) *ListSearchSourceCodeRequest {
	s.Language = &v
	return s
}

func (s *ListSearchSourceCodeRequest) SetOrder(v string) *ListSearchSourceCodeRequest {
	s.Order = &v
	return s
}

func (s *ListSearchSourceCodeRequest) SetPage(v int32) *ListSearchSourceCodeRequest {
	s.Page = &v
	return s
}

func (s *ListSearchSourceCodeRequest) SetPageSize(v int32) *ListSearchSourceCodeRequest {
	s.PageSize = &v
	return s
}

func (s *ListSearchSourceCodeRequest) SetRepoPath(v *ListSearchSourceCodeRequestRepoPath) *ListSearchSourceCodeRequest {
	s.RepoPath = v
	return s
}

func (s *ListSearchSourceCodeRequest) SetScope(v string) *ListSearchSourceCodeRequest {
	s.Scope = &v
	return s
}

func (s *ListSearchSourceCodeRequest) SetSort(v string) *ListSearchSourceCodeRequest {
	s.Sort = &v
	return s
}

func (s *ListSearchSourceCodeRequest) SetOrganizationId(v string) *ListSearchSourceCodeRequest {
	s.OrganizationId = &v
	return s
}

type ListSearchSourceCodeRequestFilePath struct {
	// example:
	//
	// term
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty"`
	// example:
	//
	// equal
	OperatorType *string `json:"operatorType,omitempty" xml:"operatorType,omitempty"`
	// example:
	//
	// orgId/test-group/spring-boot-demo/test.java
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ListSearchSourceCodeRequestFilePath) String() string {
	return tea.Prettify(s)
}

func (s ListSearchSourceCodeRequestFilePath) GoString() string {
	return s.String()
}

func (s *ListSearchSourceCodeRequestFilePath) SetMatchType(v string) *ListSearchSourceCodeRequestFilePath {
	s.MatchType = &v
	return s
}

func (s *ListSearchSourceCodeRequestFilePath) SetOperatorType(v string) *ListSearchSourceCodeRequestFilePath {
	s.OperatorType = &v
	return s
}

func (s *ListSearchSourceCodeRequestFilePath) SetValue(v string) *ListSearchSourceCodeRequestFilePath {
	s.Value = &v
	return s
}

type ListSearchSourceCodeRequestRepoPath struct {
	// example:
	//
	// term
	MatchType *string `json:"matchType,omitempty" xml:"matchType,omitempty"`
	// example:
	//
	// equal
	OperatorType *string `json:"operatorType,omitempty" xml:"operatorType,omitempty"`
	// example:
	//
	// xxx
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ListSearchSourceCodeRequestRepoPath) String() string {
	return tea.Prettify(s)
}

func (s ListSearchSourceCodeRequestRepoPath) GoString() string {
	return s.String()
}

func (s *ListSearchSourceCodeRequestRepoPath) SetMatchType(v string) *ListSearchSourceCodeRequestRepoPath {
	s.MatchType = &v
	return s
}

func (s *ListSearchSourceCodeRequestRepoPath) SetOperatorType(v string) *ListSearchSourceCodeRequestRepoPath {
	s.OperatorType = &v
	return s
}

func (s *ListSearchSourceCodeRequestRepoPath) SetValue(v string) *ListSearchSourceCodeRequestRepoPath {
	s.Value = &v
	return s
}

type ListSearchSourceCodeResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListSearchSourceCodeResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 2
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListSearchSourceCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSearchSourceCodeResponseBody) GoString() string {
	return s.String()
}

func (s *ListSearchSourceCodeResponseBody) SetErrorCode(v string) *ListSearchSourceCodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListSearchSourceCodeResponseBody) SetErrorMessage(v string) *ListSearchSourceCodeResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListSearchSourceCodeResponseBody) SetRequestId(v string) *ListSearchSourceCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSearchSourceCodeResponseBody) SetResult(v []*ListSearchSourceCodeResponseBodyResult) *ListSearchSourceCodeResponseBody {
	s.Result = v
	return s
}

func (s *ListSearchSourceCodeResponseBody) SetSuccess(v bool) *ListSearchSourceCodeResponseBody {
	s.Success = &v
	return s
}

func (s *ListSearchSourceCodeResponseBody) SetTotal(v int64) *ListSearchSourceCodeResponseBody {
	s.Total = &v
	return s
}

type ListSearchSourceCodeResponseBodyResult struct {
	// example:
	//
	// 60d54f3daccf2bbd6659f3ad/gitlabhq/master/spec/frontend/snippets/test_utils.js
	DocId            *string                                                 `json:"docId,omitempty" xml:"docId,omitempty"`
	HighlightTextMap *ListSearchSourceCodeResponseBodyResultHighlightTextMap `json:"highlightTextMap,omitempty" xml:"highlightTextMap,omitempty" type:"Struct"`
	Source           *ListSearchSourceCodeResponseBodyResultSource           `json:"source,omitempty" xml:"source,omitempty" type:"Struct"`
}

func (s ListSearchSourceCodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListSearchSourceCodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListSearchSourceCodeResponseBodyResult) SetDocId(v string) *ListSearchSourceCodeResponseBodyResult {
	s.DocId = &v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResult) SetHighlightTextMap(v *ListSearchSourceCodeResponseBodyResultHighlightTextMap) *ListSearchSourceCodeResponseBodyResult {
	s.HighlightTextMap = v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResult) SetSource(v *ListSearchSourceCodeResponseBodyResultSource) *ListSearchSourceCodeResponseBodyResult {
	s.Source = v
	return s
}

type ListSearchSourceCodeResponseBodyResultHighlightTextMap struct {
	// example:
	//
	// xxx
	Clob *string `json:"clob,omitempty" xml:"clob,omitempty"`
	// example:
	//
	// test.java
	FileName *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
	// example:
	//
	// java
	Language *string `json:"language,omitempty" xml:"language,omitempty"`
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ListSearchSourceCodeResponseBodyResultHighlightTextMap) String() string {
	return tea.Prettify(s)
}

func (s ListSearchSourceCodeResponseBodyResultHighlightTextMap) GoString() string {
	return s.String()
}

func (s *ListSearchSourceCodeResponseBodyResultHighlightTextMap) SetClob(v string) *ListSearchSourceCodeResponseBodyResultHighlightTextMap {
	s.Clob = &v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResultHighlightTextMap) SetFileName(v string) *ListSearchSourceCodeResponseBodyResultHighlightTextMap {
	s.FileName = &v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResultHighlightTextMap) SetLanguage(v string) *ListSearchSourceCodeResponseBodyResultHighlightTextMap {
	s.Language = &v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResultHighlightTextMap) SetOrganizationId(v string) *ListSearchSourceCodeResponseBodyResultHighlightTextMap {
	s.OrganizationId = &v
	return s
}

type ListSearchSourceCodeResponseBodyResultSource struct {
	// example:
	//
	// master
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// 2022-10-10 10:00:00
	CheckinDate *string `json:"checkinDate,omitempty" xml:"checkinDate,omitempty"`
	// example:
	//
	// test_utils.js
	FileName *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
	// example:
	//
	// spec/frontend/snippets/test_utils.js
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
	// example:
	//
	// JavaScript
	Language *string `json:"language,omitempty" xml:"language,omitempty"`
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// codeup/test-repo
	RepoPath *string `json:"repoPath,omitempty" xml:"repoPath,omitempty"`
}

func (s ListSearchSourceCodeResponseBodyResultSource) String() string {
	return tea.Prettify(s)
}

func (s ListSearchSourceCodeResponseBodyResultSource) GoString() string {
	return s.String()
}

func (s *ListSearchSourceCodeResponseBodyResultSource) SetBranch(v string) *ListSearchSourceCodeResponseBodyResultSource {
	s.Branch = &v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResultSource) SetCheckinDate(v string) *ListSearchSourceCodeResponseBodyResultSource {
	s.CheckinDate = &v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResultSource) SetFileName(v string) *ListSearchSourceCodeResponseBodyResultSource {
	s.FileName = &v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResultSource) SetFilePath(v string) *ListSearchSourceCodeResponseBodyResultSource {
	s.FilePath = &v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResultSource) SetLanguage(v string) *ListSearchSourceCodeResponseBodyResultSource {
	s.Language = &v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResultSource) SetOrganizationId(v string) *ListSearchSourceCodeResponseBodyResultSource {
	s.OrganizationId = &v
	return s
}

func (s *ListSearchSourceCodeResponseBodyResultSource) SetRepoPath(v string) *ListSearchSourceCodeResponseBodyResultSource {
	s.RepoPath = &v
	return s
}

type ListSearchSourceCodeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSearchSourceCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSearchSourceCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSearchSourceCodeResponse) GoString() string {
	return s.String()
}

func (s *ListSearchSourceCodeResponse) SetHeaders(v map[string]*string) *ListSearchSourceCodeResponse {
	s.Headers = v
	return s
}

func (s *ListSearchSourceCodeResponse) SetStatusCode(v int32) *ListSearchSourceCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSearchSourceCodeResponse) SetBody(v *ListSearchSourceCodeResponseBody) *ListSearchSourceCodeResponse {
	s.Body = v
	return s
}

type ListServiceAuthsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// RAM
	ServiceAuthType *string `json:"serviceAuthType,omitempty" xml:"serviceAuthType,omitempty"`
}

func (s ListServiceAuthsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListServiceAuthsRequest) GoString() string {
	return s.String()
}

func (s *ListServiceAuthsRequest) SetServiceAuthType(v string) *ListServiceAuthsRequest {
	s.ServiceAuthType = &v
	return s
}

type ListServiceAuthsResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId    *string                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ServiceAuths []*ListServiceAuthsResponseBodyServiceAuths `json:"serviceAuths,omitempty" xml:"serviceAuths,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListServiceAuthsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListServiceAuthsResponseBody) GoString() string {
	return s.String()
}

func (s *ListServiceAuthsResponseBody) SetErrorCode(v string) *ListServiceAuthsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListServiceAuthsResponseBody) SetErrorMessage(v string) *ListServiceAuthsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListServiceAuthsResponseBody) SetRequestId(v string) *ListServiceAuthsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListServiceAuthsResponseBody) SetServiceAuths(v []*ListServiceAuthsResponseBodyServiceAuths) *ListServiceAuthsResponseBody {
	s.ServiceAuths = v
	return s
}

func (s *ListServiceAuthsResponseBody) SetSuccess(v bool) *ListServiceAuthsResponseBody {
	s.Success = &v
	return s
}

type ListServiceAuthsResponseBodyServiceAuths struct {
	// example:
	//
	// 123
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 张三
	OwnerName *string `json:"ownerName,omitempty" xml:"ownerName,omitempty"`
	// example:
	//
	// 123456789
	OwnerStaffId *string `json:"ownerStaffId,omitempty" xml:"ownerStaffId,omitempty"`
	// example:
	//
	// Codeup
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListServiceAuthsResponseBodyServiceAuths) String() string {
	return tea.Prettify(s)
}

func (s ListServiceAuthsResponseBodyServiceAuths) GoString() string {
	return s.String()
}

func (s *ListServiceAuthsResponseBodyServiceAuths) SetId(v int64) *ListServiceAuthsResponseBodyServiceAuths {
	s.Id = &v
	return s
}

func (s *ListServiceAuthsResponseBodyServiceAuths) SetOwnerName(v string) *ListServiceAuthsResponseBodyServiceAuths {
	s.OwnerName = &v
	return s
}

func (s *ListServiceAuthsResponseBodyServiceAuths) SetOwnerStaffId(v string) *ListServiceAuthsResponseBodyServiceAuths {
	s.OwnerStaffId = &v
	return s
}

func (s *ListServiceAuthsResponseBodyServiceAuths) SetType(v string) *ListServiceAuthsResponseBodyServiceAuths {
	s.Type = &v
	return s
}

type ListServiceAuthsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListServiceAuthsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListServiceAuthsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListServiceAuthsResponse) GoString() string {
	return s.String()
}

func (s *ListServiceAuthsResponse) SetHeaders(v map[string]*string) *ListServiceAuthsResponse {
	s.Headers = v
	return s
}

func (s *ListServiceAuthsResponse) SetStatusCode(v int32) *ListServiceAuthsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListServiceAuthsResponse) SetBody(v *ListServiceAuthsResponseBody) *ListServiceAuthsResponse {
	s.Body = v
	return s
}

type ListServiceConnectionsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// codeup
	SericeConnectionType *string `json:"sericeConnectionType,omitempty" xml:"sericeConnectionType,omitempty"`
}

func (s ListServiceConnectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListServiceConnectionsRequest) GoString() string {
	return s.String()
}

func (s *ListServiceConnectionsRequest) SetSericeConnectionType(v string) *ListServiceConnectionsRequest {
	s.SericeConnectionType = &v
	return s
}

type ListServiceConnectionsResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId          *string                                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ServiceConnections []*ListServiceConnectionsResponseBodyServiceConnections `json:"serviceConnections,omitempty" xml:"serviceConnections,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListServiceConnectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListServiceConnectionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListServiceConnectionsResponseBody) SetErrorCode(v string) *ListServiceConnectionsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListServiceConnectionsResponseBody) SetErrorMessage(v string) *ListServiceConnectionsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListServiceConnectionsResponseBody) SetRequestId(v string) *ListServiceConnectionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListServiceConnectionsResponseBody) SetServiceConnections(v []*ListServiceConnectionsResponseBodyServiceConnections) *ListServiceConnectionsResponseBody {
	s.ServiceConnections = v
	return s
}

func (s *ListServiceConnectionsResponseBody) SetSuccess(v bool) *ListServiceConnectionsResponseBody {
	s.Success = &v
	return s
}

type ListServiceConnectionsResponseBodyServiceConnections struct {
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 123
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 张三的oss服务连接
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 1212123212121212
	OwnerAccountId *int64 `json:"ownerAccountId,omitempty" xml:"ownerAccountId,omitempty"`
	// example:
	//
	// oss
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
}

func (s ListServiceConnectionsResponseBodyServiceConnections) String() string {
	return tea.Prettify(s)
}

func (s ListServiceConnectionsResponseBodyServiceConnections) GoString() string {
	return s.String()
}

func (s *ListServiceConnectionsResponseBodyServiceConnections) SetCreateTime(v int64) *ListServiceConnectionsResponseBodyServiceConnections {
	s.CreateTime = &v
	return s
}

func (s *ListServiceConnectionsResponseBodyServiceConnections) SetId(v int64) *ListServiceConnectionsResponseBodyServiceConnections {
	s.Id = &v
	return s
}

func (s *ListServiceConnectionsResponseBodyServiceConnections) SetName(v string) *ListServiceConnectionsResponseBodyServiceConnections {
	s.Name = &v
	return s
}

func (s *ListServiceConnectionsResponseBodyServiceConnections) SetOwnerAccountId(v int64) *ListServiceConnectionsResponseBodyServiceConnections {
	s.OwnerAccountId = &v
	return s
}

func (s *ListServiceConnectionsResponseBodyServiceConnections) SetType(v string) *ListServiceConnectionsResponseBodyServiceConnections {
	s.Type = &v
	return s
}

func (s *ListServiceConnectionsResponseBodyServiceConnections) SetUuid(v string) *ListServiceConnectionsResponseBodyServiceConnections {
	s.Uuid = &v
	return s
}

type ListServiceConnectionsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListServiceConnectionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListServiceConnectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListServiceConnectionsResponse) GoString() string {
	return s.String()
}

func (s *ListServiceConnectionsResponse) SetHeaders(v map[string]*string) *ListServiceConnectionsResponse {
	s.Headers = v
	return s
}

func (s *ListServiceConnectionsResponse) SetStatusCode(v int32) *ListServiceConnectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListServiceConnectionsResponse) SetBody(v *ListServiceConnectionsResponseBody) *ListServiceConnectionsResponse {
	s.Body = v
	return s
}

type ListServiceCredentialsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// username_password
	ServiceCredentialType *string `json:"serviceCredentialType,omitempty" xml:"serviceCredentialType,omitempty"`
}

func (s ListServiceCredentialsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListServiceCredentialsRequest) GoString() string {
	return s.String()
}

func (s *ListServiceCredentialsRequest) SetServiceCredentialType(v string) *ListServiceCredentialsRequest {
	s.ServiceCredentialType = &v
	return s
}

type ListServiceCredentialsResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId          *string                                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ServiceCredentials []*ListServiceCredentialsResponseBodyServiceCredentials `json:"serviceCredentials,omitempty" xml:"serviceCredentials,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListServiceCredentialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListServiceCredentialsResponseBody) GoString() string {
	return s.String()
}

func (s *ListServiceCredentialsResponseBody) SetErrorCode(v string) *ListServiceCredentialsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListServiceCredentialsResponseBody) SetErrorMessage(v string) *ListServiceCredentialsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListServiceCredentialsResponseBody) SetRequestId(v string) *ListServiceCredentialsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListServiceCredentialsResponseBody) SetServiceCredentials(v []*ListServiceCredentialsResponseBodyServiceCredentials) *ListServiceCredentialsResponseBody {
	s.ServiceCredentials = v
	return s
}

func (s *ListServiceCredentialsResponseBody) SetSuccess(v bool) *ListServiceCredentialsResponseBody {
	s.Success = &v
	return s
}

type ListServiceCredentialsResponseBodyServiceCredentials struct {
	// example:
	//
	// 123
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 张三
	OwnerName *string `json:"ownerName,omitempty" xml:"ownerName,omitempty"`
	// example:
	//
	// 123456789
	OwnerStaffId *string `json:"ownerStaffId,omitempty" xml:"ownerStaffId,omitempty"`
	// example:
	//
	// Codeup
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListServiceCredentialsResponseBodyServiceCredentials) String() string {
	return tea.Prettify(s)
}

func (s ListServiceCredentialsResponseBodyServiceCredentials) GoString() string {
	return s.String()
}

func (s *ListServiceCredentialsResponseBodyServiceCredentials) SetId(v int64) *ListServiceCredentialsResponseBodyServiceCredentials {
	s.Id = &v
	return s
}

func (s *ListServiceCredentialsResponseBodyServiceCredentials) SetOwnerName(v string) *ListServiceCredentialsResponseBodyServiceCredentials {
	s.OwnerName = &v
	return s
}

func (s *ListServiceCredentialsResponseBodyServiceCredentials) SetOwnerStaffId(v string) *ListServiceCredentialsResponseBodyServiceCredentials {
	s.OwnerStaffId = &v
	return s
}

func (s *ListServiceCredentialsResponseBodyServiceCredentials) SetType(v string) *ListServiceCredentialsResponseBodyServiceCredentials {
	s.Type = &v
	return s
}

type ListServiceCredentialsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListServiceCredentialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListServiceCredentialsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListServiceCredentialsResponse) GoString() string {
	return s.String()
}

func (s *ListServiceCredentialsResponse) SetHeaders(v map[string]*string) *ListServiceCredentialsResponse {
	s.Headers = v
	return s
}

func (s *ListServiceCredentialsResponse) SetStatusCode(v int32) *ListServiceCredentialsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListServiceCredentialsResponse) SetBody(v *ListServiceCredentialsResponseBody) *ListServiceCredentialsResponse {
	s.Body = v
	return s
}

type ListSprintsRequest struct {
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// ""
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Project
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
}

func (s ListSprintsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSprintsRequest) GoString() string {
	return s.String()
}

func (s *ListSprintsRequest) SetMaxResults(v int64) *ListSprintsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListSprintsRequest) SetNextToken(v string) *ListSprintsRequest {
	s.NextToken = &v
	return s
}

func (s *ListSprintsRequest) SetSpaceIdentifier(v string) *ListSprintsRequest {
	s.SpaceIdentifier = &v
	return s
}

func (s *ListSprintsRequest) SetSpaceType(v string) *ListSprintsRequest {
	s.SpaceType = &v
	return s
}

type ListSprintsResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// ""
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Sprints   []*ListSprintsResponseBodySprints `json:"sprints,omitempty" xml:"sprints,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s ListSprintsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSprintsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSprintsResponseBody) SetErrorCode(v string) *ListSprintsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListSprintsResponseBody) SetErrorMsg(v string) *ListSprintsResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListSprintsResponseBody) SetMaxResults(v int64) *ListSprintsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListSprintsResponseBody) SetNextToken(v string) *ListSprintsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListSprintsResponseBody) SetRequestId(v string) *ListSprintsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSprintsResponseBody) SetSprints(v []*ListSprintsResponseBodySprints) *ListSprintsResponseBody {
	s.Sprints = v
	return s
}

func (s *ListSprintsResponseBody) SetSuccess(v bool) *ListSprintsResponseBody {
	s.Success = &v
	return s
}

func (s *ListSprintsResponseBody) SetTotalCount(v int64) *ListSprintsResponseBody {
	s.TotalCount = &v
	return s
}

type ListSprintsResponseBodySprints struct {
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// xxx
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1623916393000
	EndDate *int64 `json:"endDate,omitempty" xml:"endDate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// demo示例项目
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// public
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// 5e70xxxxxxcd000xxxxe96
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// 1638403200000
	StartDate *int64 `json:"startDate,omitempty" xml:"startDate,omitempty"`
	// example:
	//
	// TODO
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s ListSprintsResponseBodySprints) String() string {
	return tea.Prettify(s)
}

func (s ListSprintsResponseBodySprints) GoString() string {
	return s.String()
}

func (s *ListSprintsResponseBodySprints) SetCreator(v string) *ListSprintsResponseBodySprints {
	s.Creator = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetDescription(v string) *ListSprintsResponseBodySprints {
	s.Description = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetEndDate(v int64) *ListSprintsResponseBodySprints {
	s.EndDate = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetGmtCreate(v int64) *ListSprintsResponseBodySprints {
	s.GmtCreate = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetGmtModified(v int64) *ListSprintsResponseBodySprints {
	s.GmtModified = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetIdentifier(v string) *ListSprintsResponseBodySprints {
	s.Identifier = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetModifier(v string) *ListSprintsResponseBodySprints {
	s.Modifier = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetName(v string) *ListSprintsResponseBodySprints {
	s.Name = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetScope(v string) *ListSprintsResponseBodySprints {
	s.Scope = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetSpaceIdentifier(v string) *ListSprintsResponseBodySprints {
	s.SpaceIdentifier = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetStartDate(v int64) *ListSprintsResponseBodySprints {
	s.StartDate = &v
	return s
}

func (s *ListSprintsResponseBodySprints) SetStatus(v string) *ListSprintsResponseBodySprints {
	s.Status = &v
	return s
}

type ListSprintsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSprintsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSprintsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSprintsResponse) GoString() string {
	return s.String()
}

func (s *ListSprintsResponse) SetHeaders(v map[string]*string) *ListSprintsResponse {
	s.Headers = v
	return s
}

func (s *ListSprintsResponse) SetStatusCode(v int32) *ListSprintsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSprintsResponse) SetBody(v *ListSprintsResponseBody) *ListSprintsResponse {
	s.Body = v
	return s
}

type ListTestCaseFieldsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
}

func (s ListTestCaseFieldsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTestCaseFieldsRequest) GoString() string {
	return s.String()
}

func (s *ListTestCaseFieldsRequest) SetSpaceIdentifier(v string) *ListTestCaseFieldsRequest {
	s.SpaceIdentifier = &v
	return s
}

type ListTestCaseFieldsResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string                                 `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	Fields   []*ListTestCaseFieldsResponseBodyFields `json:"fields,omitempty" xml:"fields,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListTestCaseFieldsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTestCaseFieldsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTestCaseFieldsResponseBody) SetErrorCode(v string) *ListTestCaseFieldsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListTestCaseFieldsResponseBody) SetErrorMsg(v string) *ListTestCaseFieldsResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListTestCaseFieldsResponseBody) SetFields(v []*ListTestCaseFieldsResponseBodyFields) *ListTestCaseFieldsResponseBody {
	s.Fields = v
	return s
}

func (s *ListTestCaseFieldsResponseBody) SetRequestId(v string) *ListTestCaseFieldsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTestCaseFieldsResponseBody) SetSuccess(v bool) *ListTestCaseFieldsResponseBody {
	s.Success = &v
	return s
}

type ListTestCaseFieldsResponseBodyFields struct {
	// example:
	//
	// 例：date
	ClassName *string `json:"className,omitempty" xml:"className,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// 123
	DefaultValue *string `json:"defaultValue,omitempty" xml:"defaultValue,omitempty"`
	// example:
	//
	// 字段的具体信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// list
	Format *string `json:"format,omitempty" xml:"format,omitempty"`
	// example:
	//
	// 1623916393000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// false
	IsRequired *bool `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	// example:
	//
	// false
	IsShowWhenCreate *bool `json:"isShowWhenCreate,omitempty" xml:"isShowWhenCreate,omitempty"`
	// example:
	//
	// false
	IsSystemRequired *bool `json:"isSystemRequired,omitempty" xml:"isSystemRequired,omitempty"`
	// example:
	//
	// null
	LinkWithService *string `json:"linkWithService,omitempty" xml:"linkWithService,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// 负责人
	Name    *string                                        `json:"name,omitempty" xml:"name,omitempty"`
	Options []*ListTestCaseFieldsResponseBodyFieldsOptions `json:"options,omitempty" xml:"options,omitempty" type:"Repeated"`
	// example:
	//
	// 例：Workitem
	ResourceType *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
	// example:
	//
	// NativeField
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListTestCaseFieldsResponseBodyFields) String() string {
	return tea.Prettify(s)
}

func (s ListTestCaseFieldsResponseBodyFields) GoString() string {
	return s.String()
}

func (s *ListTestCaseFieldsResponseBodyFields) SetClassName(v string) *ListTestCaseFieldsResponseBodyFields {
	s.ClassName = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetCreator(v string) *ListTestCaseFieldsResponseBodyFields {
	s.Creator = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetDefaultValue(v string) *ListTestCaseFieldsResponseBodyFields {
	s.DefaultValue = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetDescription(v string) *ListTestCaseFieldsResponseBodyFields {
	s.Description = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetFormat(v string) *ListTestCaseFieldsResponseBodyFields {
	s.Format = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetGmtCreate(v int64) *ListTestCaseFieldsResponseBodyFields {
	s.GmtCreate = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetGmtModified(v int64) *ListTestCaseFieldsResponseBodyFields {
	s.GmtModified = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetIdentifier(v string) *ListTestCaseFieldsResponseBodyFields {
	s.Identifier = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetIsRequired(v bool) *ListTestCaseFieldsResponseBodyFields {
	s.IsRequired = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetIsShowWhenCreate(v bool) *ListTestCaseFieldsResponseBodyFields {
	s.IsShowWhenCreate = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetIsSystemRequired(v bool) *ListTestCaseFieldsResponseBodyFields {
	s.IsSystemRequired = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetLinkWithService(v string) *ListTestCaseFieldsResponseBodyFields {
	s.LinkWithService = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetModifier(v string) *ListTestCaseFieldsResponseBodyFields {
	s.Modifier = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetName(v string) *ListTestCaseFieldsResponseBodyFields {
	s.Name = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetOptions(v []*ListTestCaseFieldsResponseBodyFieldsOptions) *ListTestCaseFieldsResponseBodyFields {
	s.Options = v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetResourceType(v string) *ListTestCaseFieldsResponseBodyFields {
	s.ResourceType = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFields) SetType(v string) *ListTestCaseFieldsResponseBodyFields {
	s.Type = &v
	return s
}

type ListTestCaseFieldsResponseBodyFieldsOptions struct {
	// example:
	//
	// 重复的缺陷
	DisplayValue *string `json:"displayValue,omitempty" xml:"displayValue,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	// example:
	//
	// 重复的缺陷
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 1
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// example:
	//
	// null
	Position *int64 `json:"position,omitempty" xml:"position,omitempty"`
	// example:
	//
	// 重复的缺陷
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// example:
	//
	// null
	ValueEn *string `json:"valueEn,omitempty" xml:"valueEn,omitempty"`
}

func (s ListTestCaseFieldsResponseBodyFieldsOptions) String() string {
	return tea.Prettify(s)
}

func (s ListTestCaseFieldsResponseBodyFieldsOptions) GoString() string {
	return s.String()
}

func (s *ListTestCaseFieldsResponseBodyFieldsOptions) SetDisplayValue(v string) *ListTestCaseFieldsResponseBodyFieldsOptions {
	s.DisplayValue = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFieldsOptions) SetFieldIdentifier(v string) *ListTestCaseFieldsResponseBodyFieldsOptions {
	s.FieldIdentifier = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFieldsOptions) SetIdentifier(v string) *ListTestCaseFieldsResponseBodyFieldsOptions {
	s.Identifier = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFieldsOptions) SetLevel(v int64) *ListTestCaseFieldsResponseBodyFieldsOptions {
	s.Level = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFieldsOptions) SetPosition(v int64) *ListTestCaseFieldsResponseBodyFieldsOptions {
	s.Position = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFieldsOptions) SetValue(v string) *ListTestCaseFieldsResponseBodyFieldsOptions {
	s.Value = &v
	return s
}

func (s *ListTestCaseFieldsResponseBodyFieldsOptions) SetValueEn(v string) *ListTestCaseFieldsResponseBodyFieldsOptions {
	s.ValueEn = &v
	return s
}

type ListTestCaseFieldsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTestCaseFieldsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTestCaseFieldsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTestCaseFieldsResponse) GoString() string {
	return s.String()
}

func (s *ListTestCaseFieldsResponse) SetHeaders(v map[string]*string) *ListTestCaseFieldsResponse {
	s.Headers = v
	return s
}

func (s *ListTestCaseFieldsResponse) SetStatusCode(v int32) *ListTestCaseFieldsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTestCaseFieldsResponse) SetBody(v *ListTestCaseFieldsResponseBody) *ListTestCaseFieldsResponse {
	s.Body = v
	return s
}

type ListUserDrawRecordByPkRequest struct {
	// example:
	//
	// 1789095186553536
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// example:
	//
	// task_group_0000
	DrawGroup *string `json:"drawGroup,omitempty" xml:"drawGroup,omitempty"`
	// example:
	//
	// developer-award-draw-pool_123
	DrawPoolName *string `json:"drawPoolName,omitempty" xml:"drawPoolName,omitempty"`
}

func (s ListUserDrawRecordByPkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserDrawRecordByPkRequest) GoString() string {
	return s.String()
}

func (s *ListUserDrawRecordByPkRequest) SetAliyunPk(v string) *ListUserDrawRecordByPkRequest {
	s.AliyunPk = &v
	return s
}

func (s *ListUserDrawRecordByPkRequest) SetDrawGroup(v string) *ListUserDrawRecordByPkRequest {
	s.DrawGroup = &v
	return s
}

func (s *ListUserDrawRecordByPkRequest) SetDrawPoolName(v string) *ListUserDrawRecordByPkRequest {
	s.DrawPoolName = &v
	return s
}

type ListUserDrawRecordByPkResponseBody struct {
	// example:
	//
	// 200
	Code *string                                   `json:"code,omitempty" xml:"code,omitempty"`
	Data []*ListUserDrawRecordByPkResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// None
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListUserDrawRecordByPkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserDrawRecordByPkResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserDrawRecordByPkResponseBody) SetCode(v string) *ListUserDrawRecordByPkResponseBody {
	s.Code = &v
	return s
}

func (s *ListUserDrawRecordByPkResponseBody) SetData(v []*ListUserDrawRecordByPkResponseBodyData) *ListUserDrawRecordByPkResponseBody {
	s.Data = v
	return s
}

func (s *ListUserDrawRecordByPkResponseBody) SetMessage(v string) *ListUserDrawRecordByPkResponseBody {
	s.Message = &v
	return s
}

func (s *ListUserDrawRecordByPkResponseBody) SetRequestId(v string) *ListUserDrawRecordByPkResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUserDrawRecordByPkResponseBody) SetSuccess(v bool) *ListUserDrawRecordByPkResponseBody {
	s.Success = &v
	return s
}

type ListUserDrawRecordByPkResponseBodyData struct {
	// example:
	//
	// 1401072305438324
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// example:
	//
	// dsadsadsadas
	DrawGroup *string `json:"drawGroup,omitempty" xml:"drawGroup,omitempty"`
	// example:
	//
	// dasdsadasdas
	DrawPoolName *string `json:"drawPoolName,omitempty" xml:"drawPoolName,omitempty"`
	// example:
	//
	// 2
	DrawResult *string `json:"drawResult,omitempty" xml:"drawResult,omitempty"`
	// example:
	//
	// 1545726028000
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// null
	TaskGroupId *string `json:"taskGroupId,omitempty" xml:"taskGroupId,omitempty"`
	// example:
	//
	// dsadsadasd
	UccId *string `json:"uccId,omitempty" xml:"uccId,omitempty"`
}

func (s ListUserDrawRecordByPkResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListUserDrawRecordByPkResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListUserDrawRecordByPkResponseBodyData) SetAliyunPk(v string) *ListUserDrawRecordByPkResponseBodyData {
	s.AliyunPk = &v
	return s
}

func (s *ListUserDrawRecordByPkResponseBodyData) SetDrawGroup(v string) *ListUserDrawRecordByPkResponseBodyData {
	s.DrawGroup = &v
	return s
}

func (s *ListUserDrawRecordByPkResponseBodyData) SetDrawPoolName(v string) *ListUserDrawRecordByPkResponseBodyData {
	s.DrawPoolName = &v
	return s
}

func (s *ListUserDrawRecordByPkResponseBodyData) SetDrawResult(v string) *ListUserDrawRecordByPkResponseBodyData {
	s.DrawResult = &v
	return s
}

func (s *ListUserDrawRecordByPkResponseBodyData) SetGmtCreate(v string) *ListUserDrawRecordByPkResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *ListUserDrawRecordByPkResponseBodyData) SetTaskGroupId(v string) *ListUserDrawRecordByPkResponseBodyData {
	s.TaskGroupId = &v
	return s
}

func (s *ListUserDrawRecordByPkResponseBodyData) SetUccId(v string) *ListUserDrawRecordByPkResponseBodyData {
	s.UccId = &v
	return s
}

type ListUserDrawRecordByPkResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUserDrawRecordByPkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUserDrawRecordByPkResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserDrawRecordByPkResponse) GoString() string {
	return s.String()
}

func (s *ListUserDrawRecordByPkResponse) SetHeaders(v map[string]*string) *ListUserDrawRecordByPkResponse {
	s.Headers = v
	return s
}

func (s *ListUserDrawRecordByPkResponse) SetStatusCode(v int32) *ListUserDrawRecordByPkResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUserDrawRecordByPkResponse) SetBody(v *ListUserDrawRecordByPkResponseBody) *ListUserDrawRecordByPkResponse {
	s.Body = v
	return s
}

type ListUserKeysRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// created_at
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// desc
	Sort *string `json:"sort,omitempty" xml:"sort,omitempty"`
}

func (s ListUserKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserKeysRequest) GoString() string {
	return s.String()
}

func (s *ListUserKeysRequest) SetAccessToken(v string) *ListUserKeysRequest {
	s.AccessToken = &v
	return s
}

func (s *ListUserKeysRequest) SetOrderBy(v string) *ListUserKeysRequest {
	s.OrderBy = &v
	return s
}

func (s *ListUserKeysRequest) SetOrganizationId(v string) *ListUserKeysRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListUserKeysRequest) SetPage(v int64) *ListUserKeysRequest {
	s.Page = &v
	return s
}

func (s *ListUserKeysRequest) SetPageSize(v int64) *ListUserKeysRequest {
	s.PageSize = &v
	return s
}

func (s *ListUserKeysRequest) SetSort(v string) *ListUserKeysRequest {
	s.Sort = &v
	return s
}

type ListUserKeysResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// Openapi.RequestError
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListUserKeysResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListUserKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserKeysResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserKeysResponseBody) SetErrorCode(v string) *ListUserKeysResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListUserKeysResponseBody) SetErrorMessage(v string) *ListUserKeysResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListUserKeysResponseBody) SetRequestId(v string) *ListUserKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUserKeysResponseBody) SetResult(v []*ListUserKeysResponseBodyResult) *ListUserKeysResponseBody {
	s.Result = v
	return s
}

func (s *ListUserKeysResponseBody) SetSuccess(v bool) *ListUserKeysResponseBody {
	s.Success = &v
	return s
}

type ListUserKeysResponseBodyResult struct {
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	ExpireTime *string `json:"expireTime,omitempty" xml:"expireTime,omitempty"`
	// example:
	//
	// xxx
	FingerPrint *string `json:"fingerPrint,omitempty" xml:"fingerPrint,omitempty"`
	// example:
	//
	// 5240
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// ALL
	KeyScope *string `json:"keyScope,omitempty" xml:"keyScope,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	LastUsedTime *string `json:"lastUsedTime,omitempty" xml:"lastUsedTime,omitempty"`
	// example:
	//
	// xxx
	PublicKey *string `json:"publicKey,omitempty" xml:"publicKey,omitempty"`
	Title     *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s ListUserKeysResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListUserKeysResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListUserKeysResponseBodyResult) SetCreatedAt(v string) *ListUserKeysResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *ListUserKeysResponseBodyResult) SetExpireTime(v string) *ListUserKeysResponseBodyResult {
	s.ExpireTime = &v
	return s
}

func (s *ListUserKeysResponseBodyResult) SetFingerPrint(v string) *ListUserKeysResponseBodyResult {
	s.FingerPrint = &v
	return s
}

func (s *ListUserKeysResponseBodyResult) SetId(v int64) *ListUserKeysResponseBodyResult {
	s.Id = &v
	return s
}

func (s *ListUserKeysResponseBodyResult) SetKeyScope(v string) *ListUserKeysResponseBodyResult {
	s.KeyScope = &v
	return s
}

func (s *ListUserKeysResponseBodyResult) SetLastUsedTime(v string) *ListUserKeysResponseBodyResult {
	s.LastUsedTime = &v
	return s
}

func (s *ListUserKeysResponseBodyResult) SetPublicKey(v string) *ListUserKeysResponseBodyResult {
	s.PublicKey = &v
	return s
}

func (s *ListUserKeysResponseBodyResult) SetTitle(v string) *ListUserKeysResponseBodyResult {
	s.Title = &v
	return s
}

type ListUserKeysResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUserKeysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUserKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserKeysResponse) GoString() string {
	return s.String()
}

func (s *ListUserKeysResponse) SetHeaders(v map[string]*string) *ListUserKeysResponse {
	s.Headers = v
	return s
}

func (s *ListUserKeysResponse) SetStatusCode(v int32) *ListUserKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUserKeysResponse) SetBody(v *ListUserKeysResponseBody) *ListUserKeysResponse {
	s.Body = v
	return s
}

type ListUserResourcesRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// 1
	Page *int64 `json:"page,omitempty" xml:"page,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// example:
	//
	// 1,2,3
	UserIds *string `json:"userIds,omitempty" xml:"userIds,omitempty"`
}

func (s ListUserResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListUserResourcesRequest) SetAccessToken(v string) *ListUserResourcesRequest {
	s.AccessToken = &v
	return s
}

func (s *ListUserResourcesRequest) SetOrganizationId(v string) *ListUserResourcesRequest {
	s.OrganizationId = &v
	return s
}

func (s *ListUserResourcesRequest) SetPage(v int64) *ListUserResourcesRequest {
	s.Page = &v
	return s
}

func (s *ListUserResourcesRequest) SetPageSize(v int64) *ListUserResourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListUserResourcesRequest) SetUserIds(v string) *ListUserResourcesRequest {
	s.UserIds = &v
	return s
}

type ListUserResourcesResponseBody struct {
	// example:
	//
	// success
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// A35869D5-BB29-5F84-A4DD-B09985EA2AFA
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListUserResourcesResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 2
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s ListUserResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserResourcesResponseBody) SetErrorCode(v string) *ListUserResourcesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListUserResourcesResponseBody) SetErrorMessage(v string) *ListUserResourcesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListUserResourcesResponseBody) SetRequestId(v string) *ListUserResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUserResourcesResponseBody) SetResult(v []*ListUserResourcesResponseBodyResult) *ListUserResourcesResponseBody {
	s.Result = v
	return s
}

func (s *ListUserResourcesResponseBody) SetSuccess(v bool) *ListUserResourcesResponseBody {
	s.Success = &v
	return s
}

func (s *ListUserResourcesResponseBody) SetTotal(v int64) *ListUserResourcesResponseBody {
	s.Total = &v
	return s
}

type ListUserResourcesResponseBodyResult struct {
	GroupInfos      []*ListUserResourcesResponseBodyResultGroupInfos      `json:"groupInfos,omitempty" xml:"groupInfos,omitempty" type:"Repeated"`
	RepositoryInfos []*ListUserResourcesResponseBodyResultRepositoryInfos `json:"repositoryInfos,omitempty" xml:"repositoryInfos,omitempty" type:"Repeated"`
	UserInfo        *ListUserResourcesResponseBodyResultUserInfo          `json:"userInfo,omitempty" xml:"userInfo,omitempty" type:"Struct"`
}

func (s ListUserResourcesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListUserResourcesResponseBodyResult) SetGroupInfos(v []*ListUserResourcesResponseBodyResultGroupInfos) *ListUserResourcesResponseBodyResult {
	s.GroupInfos = v
	return s
}

func (s *ListUserResourcesResponseBodyResult) SetRepositoryInfos(v []*ListUserResourcesResponseBodyResultRepositoryInfos) *ListUserResourcesResponseBodyResult {
	s.RepositoryInfos = v
	return s
}

func (s *ListUserResourcesResponseBodyResult) SetUserInfo(v *ListUserResourcesResponseBodyResultUserInfo) *ListUserResourcesResponseBodyResult {
	s.UserInfo = v
	return s
}

type ListUserResourcesResponseBodyResultGroupInfos struct {
	GroupInfo *ListUserResourcesResponseBodyResultGroupInfosGroupInfo `json:"groupInfo,omitempty" xml:"groupInfo,omitempty" type:"Struct"`
	GroupRole *ListUserResourcesResponseBodyResultGroupInfosGroupRole `json:"groupRole,omitempty" xml:"groupRole,omitempty" type:"Struct"`
}

func (s ListUserResourcesResponseBodyResultGroupInfos) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesResponseBodyResultGroupInfos) GoString() string {
	return s.String()
}

func (s *ListUserResourcesResponseBodyResultGroupInfos) SetGroupInfo(v *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) *ListUserResourcesResponseBodyResultGroupInfos {
	s.GroupInfo = v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfos) SetGroupRole(v *ListUserResourcesResponseBodyResultGroupInfosGroupRole) *ListUserResourcesResponseBodyResultGroupInfos {
	s.GroupRole = v
	return s
}

type ListUserResourcesResponseBodyResultGroupInfosGroupInfo struct {
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// test-group
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 35268
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-group
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// 1234
	OwnerId *int64 `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	// example:
	//
	// 1183319
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// test-group
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// test-org/test-group
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
}

func (s ListUserResourcesResponseBodyResultGroupInfosGroupInfo) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesResponseBodyResultGroupInfosGroupInfo) GoString() string {
	return s.String()
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetCreatedAt(v string) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.CreatedAt = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetDescription(v string) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.Description = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetId(v int64) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.Id = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetName(v string) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.Name = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetNameWithNamespace(v string) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.NameWithNamespace = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetOwnerId(v int64) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.OwnerId = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetParentId(v int64) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.ParentId = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetPath(v string) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.Path = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetPathWithNamespace(v string) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.PathWithNamespace = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetUpdatedAt(v string) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.UpdatedAt = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupInfo) SetVisibilityLevel(v int32) *ListUserResourcesResponseBodyResultGroupInfosGroupInfo {
	s.VisibilityLevel = &v
	return s
}

type ListUserResourcesResponseBodyResultGroupInfosGroupRole struct {
	// example:
	//
	// 40
	AccessLevel *int32  `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	CnRoleName  *string `json:"cnRoleName,omitempty" xml:"cnRoleName,omitempty"`
	// example:
	//
	// Admin
	EnRoleName *string `json:"enRoleName,omitempty" xml:"enRoleName,omitempty"`
	// example:
	//
	// 35268
	SourceId *int64 `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// Namespace
	SourceType *string `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
}

func (s ListUserResourcesResponseBodyResultGroupInfosGroupRole) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesResponseBodyResultGroupInfosGroupRole) GoString() string {
	return s.String()
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupRole) SetAccessLevel(v int32) *ListUserResourcesResponseBodyResultGroupInfosGroupRole {
	s.AccessLevel = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupRole) SetCnRoleName(v string) *ListUserResourcesResponseBodyResultGroupInfosGroupRole {
	s.CnRoleName = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupRole) SetEnRoleName(v string) *ListUserResourcesResponseBodyResultGroupInfosGroupRole {
	s.EnRoleName = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupRole) SetSourceId(v int64) *ListUserResourcesResponseBodyResultGroupInfosGroupRole {
	s.SourceId = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultGroupInfosGroupRole) SetSourceType(v string) *ListUserResourcesResponseBodyResultGroupInfosGroupRole {
	s.SourceType = &v
	return s
}

type ListUserResourcesResponseBodyResultRepositoryInfos struct {
	RepositoryInfo *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo `json:"repositoryInfo,omitempty" xml:"repositoryInfo,omitempty" type:"Struct"`
	RepositoryRole *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole `json:"repositoryRole,omitempty" xml:"repositoryRole,omitempty" type:"Struct"`
}

func (s ListUserResourcesResponseBodyResultRepositoryInfos) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesResponseBodyResultRepositoryInfos) GoString() string {
	return s.String()
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfos) SetRepositoryInfo(v *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) *ListUserResourcesResponseBodyResultRepositoryInfos {
	s.RepositoryInfo = v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfos) SetRepositoryRole(v *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole) *ListUserResourcesResponseBodyResultRepositoryInfos {
	s.RepositoryRole = v
	return s
}

type ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo struct {
	// example:
	//
	// 40
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// false
	Archived *bool `json:"archived,omitempty" xml:"archived,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 12679
	CreatorId   *int64  `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// false
	Encrypted *bool `json:"encrypted,omitempty" xml:"encrypted,omitempty"`
	// example:
	//
	// 37229
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	LastActivityAt *string `json:"lastActivityAt,omitempty" xml:"lastActivityAt,omitempty"`
	// example:
	//
	// test-repo
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// 600002
	NamespaceId *int64 `json:"namespaceId,omitempty" xml:"namespaceId,omitempty"`
	// example:
	//
	// test-repo
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// test-org/test-group/test-repo
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
}

func (s ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) GoString() string {
	return s.String()
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetAccessLevel(v int32) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.AccessLevel = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetArchived(v bool) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.Archived = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetCreatedAt(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.CreatedAt = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetCreatorId(v int64) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.CreatorId = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetDescription(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.Description = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetEncrypted(v bool) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.Encrypted = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetId(v int64) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.Id = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetLastActivityAt(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.LastActivityAt = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetName(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.Name = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetNameWithNamespace(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.NameWithNamespace = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetNamespaceId(v int64) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.NamespaceId = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetPath(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.Path = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetPathWithNamespace(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.PathWithNamespace = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetUpdatedAt(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.UpdatedAt = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo) SetVisibilityLevel(v int32) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryInfo {
	s.VisibilityLevel = &v
	return s
}

type ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole struct {
	// example:
	//
	// 40
	AccessLevel *int32  `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	CnRoleName  *string `json:"cnRoleName,omitempty" xml:"cnRoleName,omitempty"`
	// example:
	//
	// Admin
	EnRoleName *string `json:"enRoleName,omitempty" xml:"enRoleName,omitempty"`
	// example:
	//
	// 37229
	SourceId *int64 `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// Project
	SourceType *string `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
}

func (s ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole) GoString() string {
	return s.String()
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole) SetAccessLevel(v int32) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole {
	s.AccessLevel = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole) SetCnRoleName(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole {
	s.CnRoleName = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole) SetEnRoleName(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole {
	s.EnRoleName = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole) SetSourceId(v int64) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole {
	s.SourceId = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole) SetSourceType(v string) *ListUserResourcesResponseBodyResultRepositoryInfosRepositoryRole {
	s.SourceType = &v
	return s
}

type ListUserResourcesResponseBodyResultUserInfo struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 19230
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s ListUserResourcesResponseBodyResultUserInfo) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesResponseBodyResultUserInfo) GoString() string {
	return s.String()
}

func (s *ListUserResourcesResponseBodyResultUserInfo) SetAvatarUrl(v string) *ListUserResourcesResponseBodyResultUserInfo {
	s.AvatarUrl = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultUserInfo) SetEmail(v string) *ListUserResourcesResponseBodyResultUserInfo {
	s.Email = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultUserInfo) SetId(v int64) *ListUserResourcesResponseBodyResultUserInfo {
	s.Id = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultUserInfo) SetName(v string) *ListUserResourcesResponseBodyResultUserInfo {
	s.Name = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultUserInfo) SetState(v string) *ListUserResourcesResponseBodyResultUserInfo {
	s.State = &v
	return s
}

func (s *ListUserResourcesResponseBodyResultUserInfo) SetUsername(v string) *ListUserResourcesResponseBodyResultUserInfo {
	s.Username = &v
	return s
}

type ListUserResourcesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUserResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUserResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListUserResourcesResponse) SetHeaders(v map[string]*string) *ListUserResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListUserResourcesResponse) SetStatusCode(v int32) *ListUserResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUserResourcesResponse) SetBody(v *ListUserResourcesResponseBody) *ListUserResourcesResponse {
	s.Body = v
	return s
}

type ListVariableGroupsRequest struct {
	// example:
	//
	// 20
	MaxResults *int32 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// aaaaaa
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// DESC
	PageOrder *string `json:"pageOrder,omitempty" xml:"pageOrder,omitempty"`
	// example:
	//
	// ID
	PageSort *string `json:"pageSort,omitempty" xml:"pageSort,omitempty"`
}

func (s ListVariableGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVariableGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListVariableGroupsRequest) SetMaxResults(v int32) *ListVariableGroupsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListVariableGroupsRequest) SetNextToken(v string) *ListVariableGroupsRequest {
	s.NextToken = &v
	return s
}

func (s *ListVariableGroupsRequest) SetPageOrder(v string) *ListVariableGroupsRequest {
	s.PageOrder = &v
	return s
}

func (s *ListVariableGroupsRequest) SetPageSort(v string) *ListVariableGroupsRequest {
	s.PageSort = &v
	return s
}

type ListVariableGroupsResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// assassa
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 30
	TotalCount     *int64                                          `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	VariableGroups []*ListVariableGroupsResponseBodyVariableGroups `json:"variableGroups,omitempty" xml:"variableGroups,omitempty" type:"Repeated"`
}

func (s ListVariableGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVariableGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListVariableGroupsResponseBody) SetErrorCode(v string) *ListVariableGroupsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListVariableGroupsResponseBody) SetErrorMessage(v string) *ListVariableGroupsResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListVariableGroupsResponseBody) SetNextToken(v string) *ListVariableGroupsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListVariableGroupsResponseBody) SetRequestId(v string) *ListVariableGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListVariableGroupsResponseBody) SetSuccess(v bool) *ListVariableGroupsResponseBody {
	s.Success = &v
	return s
}

func (s *ListVariableGroupsResponseBody) SetTotalCount(v int64) *ListVariableGroupsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListVariableGroupsResponseBody) SetVariableGroups(v []*ListVariableGroupsResponseBodyVariableGroups) *ListVariableGroupsResponseBody {
	s.VariableGroups = v
	return s
}

type ListVariableGroupsResponseBodyVariableGroups struct {
	// example:
	//
	// 1586863220000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 13232343434343
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 变量组
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 12234
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 13232343434343
	ModifierAccountId *string `json:"modifierAccountId,omitempty" xml:"modifierAccountId,omitempty"`
	// example:
	//
	// 变量组
	Name             *string                                                         `json:"name,omitempty" xml:"name,omitempty"`
	RelatedPipelines []*ListVariableGroupsResponseBodyVariableGroupsRelatedPipelines `json:"relatedPipelines,omitempty" xml:"relatedPipelines,omitempty" type:"Repeated"`
	// example:
	//
	// 1586863220000
	UpdateTime *int64                                                   `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
	Variables  []*ListVariableGroupsResponseBodyVariableGroupsVariables `json:"variables,omitempty" xml:"variables,omitempty" type:"Repeated"`
}

func (s ListVariableGroupsResponseBodyVariableGroups) String() string {
	return tea.Prettify(s)
}

func (s ListVariableGroupsResponseBodyVariableGroups) GoString() string {
	return s.String()
}

func (s *ListVariableGroupsResponseBodyVariableGroups) SetCreateTime(v int64) *ListVariableGroupsResponseBodyVariableGroups {
	s.CreateTime = &v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroups) SetCreatorAccountId(v string) *ListVariableGroupsResponseBodyVariableGroups {
	s.CreatorAccountId = &v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroups) SetDescription(v string) *ListVariableGroupsResponseBodyVariableGroups {
	s.Description = &v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroups) SetId(v int64) *ListVariableGroupsResponseBodyVariableGroups {
	s.Id = &v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroups) SetModifierAccountId(v string) *ListVariableGroupsResponseBodyVariableGroups {
	s.ModifierAccountId = &v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroups) SetName(v string) *ListVariableGroupsResponseBodyVariableGroups {
	s.Name = &v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroups) SetRelatedPipelines(v []*ListVariableGroupsResponseBodyVariableGroupsRelatedPipelines) *ListVariableGroupsResponseBodyVariableGroups {
	s.RelatedPipelines = v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroups) SetUpdateTime(v int64) *ListVariableGroupsResponseBodyVariableGroups {
	s.UpdateTime = &v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroups) SetVariables(v []*ListVariableGroupsResponseBodyVariableGroupsVariables) *ListVariableGroupsResponseBodyVariableGroups {
	s.Variables = v
	return s
}

type ListVariableGroupsResponseBodyVariableGroupsRelatedPipelines struct {
	// example:
	//
	// 1234
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 流水线
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListVariableGroupsResponseBodyVariableGroupsRelatedPipelines) String() string {
	return tea.Prettify(s)
}

func (s ListVariableGroupsResponseBodyVariableGroupsRelatedPipelines) GoString() string {
	return s.String()
}

func (s *ListVariableGroupsResponseBodyVariableGroupsRelatedPipelines) SetId(v int64) *ListVariableGroupsResponseBodyVariableGroupsRelatedPipelines {
	s.Id = &v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroupsRelatedPipelines) SetName(v string) *ListVariableGroupsResponseBodyVariableGroupsRelatedPipelines {
	s.Name = &v
	return s
}

type ListVariableGroupsResponseBodyVariableGroupsVariables struct {
	// example:
	//
	// true
	IsEncrypted *bool `json:"isEncrypted,omitempty" xml:"isEncrypted,omitempty"`
	// example:
	//
	// name1
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// value1
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s ListVariableGroupsResponseBodyVariableGroupsVariables) String() string {
	return tea.Prettify(s)
}

func (s ListVariableGroupsResponseBodyVariableGroupsVariables) GoString() string {
	return s.String()
}

func (s *ListVariableGroupsResponseBodyVariableGroupsVariables) SetIsEncrypted(v bool) *ListVariableGroupsResponseBodyVariableGroupsVariables {
	s.IsEncrypted = &v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroupsVariables) SetName(v string) *ListVariableGroupsResponseBodyVariableGroupsVariables {
	s.Name = &v
	return s
}

func (s *ListVariableGroupsResponseBodyVariableGroupsVariables) SetValue(v string) *ListVariableGroupsResponseBodyVariableGroupsVariables {
	s.Value = &v
	return s
}

type ListVariableGroupsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListVariableGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListVariableGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVariableGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListVariableGroupsResponse) SetHeaders(v map[string]*string) *ListVariableGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListVariableGroupsResponse) SetStatusCode(v int32) *ListVariableGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListVariableGroupsResponse) SetBody(v *ListVariableGroupsResponseBody) *ListVariableGroupsResponse {
	s.Body = v
	return s
}

type ListWorkItemAllFieldsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Project
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// dfexxxxxf4fee18xxxxx36
	WorkitemTypeIdentifier *string `json:"workitemTypeIdentifier,omitempty" xml:"workitemTypeIdentifier,omitempty"`
}

func (s ListWorkItemAllFieldsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkItemAllFieldsRequest) GoString() string {
	return s.String()
}

func (s *ListWorkItemAllFieldsRequest) SetSpaceIdentifier(v string) *ListWorkItemAllFieldsRequest {
	s.SpaceIdentifier = &v
	return s
}

func (s *ListWorkItemAllFieldsRequest) SetSpaceType(v string) *ListWorkItemAllFieldsRequest {
	s.SpaceType = &v
	return s
}

func (s *ListWorkItemAllFieldsRequest) SetWorkitemTypeIdentifier(v string) *ListWorkItemAllFieldsRequest {
	s.WorkitemTypeIdentifier = &v
	return s
}

type ListWorkItemAllFieldsResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string                                    `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	Fields   []*ListWorkItemAllFieldsResponseBodyFields `json:"fields,omitempty" xml:"fields,omitempty" type:"Repeated"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListWorkItemAllFieldsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkItemAllFieldsResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkItemAllFieldsResponseBody) SetErrorCode(v string) *ListWorkItemAllFieldsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBody) SetErrorMsg(v string) *ListWorkItemAllFieldsResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBody) SetFields(v []*ListWorkItemAllFieldsResponseBodyFields) *ListWorkItemAllFieldsResponseBody {
	s.Fields = v
	return s
}

func (s *ListWorkItemAllFieldsResponseBody) SetRequestId(v string) *ListWorkItemAllFieldsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBody) SetSuccess(v bool) *ListWorkItemAllFieldsResponseBody {
	s.Success = &v
	return s
}

type ListWorkItemAllFieldsResponseBodyFields struct {
	// example:
	//
	// 例：date
	ClassName *string `json:"className,omitempty" xml:"className,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// 123
	DefaultValue *string `json:"defaultValue,omitempty" xml:"defaultValue,omitempty"`
	// example:
	//
	// 字段的具体信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// list
	Format *string `json:"format,omitempty" xml:"format,omitempty"`
	// example:
	//
	// 1623916393000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// false
	IsRequired *bool `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	// example:
	//
	// false
	IsShowWhenCreate *bool `json:"isShowWhenCreate,omitempty" xml:"isShowWhenCreate,omitempty"`
	// example:
	//
	// false
	IsSystemRequired *bool `json:"isSystemRequired,omitempty" xml:"isSystemRequired,omitempty"`
	// example:
	//
	// null
	LinkWithService *string `json:"linkWithService,omitempty" xml:"linkWithService,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// 负责人
	Name    *string                                           `json:"name,omitempty" xml:"name,omitempty"`
	Options []*ListWorkItemAllFieldsResponseBodyFieldsOptions `json:"options,omitempty" xml:"options,omitempty" type:"Repeated"`
	// example:
	//
	// 例：Workitem
	ResourceType *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
	// example:
	//
	// NativeField
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s ListWorkItemAllFieldsResponseBodyFields) String() string {
	return tea.Prettify(s)
}

func (s ListWorkItemAllFieldsResponseBodyFields) GoString() string {
	return s.String()
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetClassName(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.ClassName = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetCreator(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.Creator = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetDefaultValue(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.DefaultValue = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetDescription(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.Description = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetFormat(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.Format = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetGmtCreate(v int64) *ListWorkItemAllFieldsResponseBodyFields {
	s.GmtCreate = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetGmtModified(v int64) *ListWorkItemAllFieldsResponseBodyFields {
	s.GmtModified = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetIdentifier(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.Identifier = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetIsRequired(v bool) *ListWorkItemAllFieldsResponseBodyFields {
	s.IsRequired = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetIsShowWhenCreate(v bool) *ListWorkItemAllFieldsResponseBodyFields {
	s.IsShowWhenCreate = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetIsSystemRequired(v bool) *ListWorkItemAllFieldsResponseBodyFields {
	s.IsSystemRequired = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetLinkWithService(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.LinkWithService = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetModifier(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.Modifier = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetName(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.Name = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetOptions(v []*ListWorkItemAllFieldsResponseBodyFieldsOptions) *ListWorkItemAllFieldsResponseBodyFields {
	s.Options = v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetResourceType(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.ResourceType = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFields) SetType(v string) *ListWorkItemAllFieldsResponseBodyFields {
	s.Type = &v
	return s
}

type ListWorkItemAllFieldsResponseBodyFieldsOptions struct {
	// example:
	//
	// 重复的缺陷
	DisplayValue *string `json:"displayValue,omitempty" xml:"displayValue,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	// example:
	//
	// 重复的缺陷
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 1
	Level *int64 `json:"level,omitempty" xml:"level,omitempty"`
	// example:
	//
	// 1
	Position *int64 `json:"position,omitempty" xml:"position,omitempty"`
	// example:
	//
	// 重复的缺陷
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// example:
	//
	// null
	ValueEn *string `json:"valueEn,omitempty" xml:"valueEn,omitempty"`
}

func (s ListWorkItemAllFieldsResponseBodyFieldsOptions) String() string {
	return tea.Prettify(s)
}

func (s ListWorkItemAllFieldsResponseBodyFieldsOptions) GoString() string {
	return s.String()
}

func (s *ListWorkItemAllFieldsResponseBodyFieldsOptions) SetDisplayValue(v string) *ListWorkItemAllFieldsResponseBodyFieldsOptions {
	s.DisplayValue = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFieldsOptions) SetFieldIdentifier(v string) *ListWorkItemAllFieldsResponseBodyFieldsOptions {
	s.FieldIdentifier = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFieldsOptions) SetIdentifier(v string) *ListWorkItemAllFieldsResponseBodyFieldsOptions {
	s.Identifier = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFieldsOptions) SetLevel(v int64) *ListWorkItemAllFieldsResponseBodyFieldsOptions {
	s.Level = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFieldsOptions) SetPosition(v int64) *ListWorkItemAllFieldsResponseBodyFieldsOptions {
	s.Position = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFieldsOptions) SetValue(v string) *ListWorkItemAllFieldsResponseBodyFieldsOptions {
	s.Value = &v
	return s
}

func (s *ListWorkItemAllFieldsResponseBodyFieldsOptions) SetValueEn(v string) *ListWorkItemAllFieldsResponseBodyFieldsOptions {
	s.ValueEn = &v
	return s
}

type ListWorkItemAllFieldsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkItemAllFieldsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkItemAllFieldsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkItemAllFieldsResponse) GoString() string {
	return s.String()
}

func (s *ListWorkItemAllFieldsResponse) SetHeaders(v map[string]*string) *ListWorkItemAllFieldsResponse {
	s.Headers = v
	return s
}

func (s *ListWorkItemAllFieldsResponse) SetStatusCode(v int32) *ListWorkItemAllFieldsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkItemAllFieldsResponse) SetBody(v *ListWorkItemAllFieldsResponseBody) *ListWorkItemAllFieldsResponse {
	s.Body = v
	return s
}

type ListWorkItemWorkFlowStatusRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 例：5e70xxxxxxcd000xxxxe96
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Project
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Req
	WorkitemCategoryIdentifier *string `json:"workitemCategoryIdentifier,omitempty" xml:"workitemCategoryIdentifier,omitempty"`
	// example:
	//
	// 例：5e7xxxxb3cd3711dd6xxx2c
	WorkitemTypeIdentifier *string `json:"workitemTypeIdentifier,omitempty" xml:"workitemTypeIdentifier,omitempty"`
}

func (s ListWorkItemWorkFlowStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkItemWorkFlowStatusRequest) GoString() string {
	return s.String()
}

func (s *ListWorkItemWorkFlowStatusRequest) SetSpaceIdentifier(v string) *ListWorkItemWorkFlowStatusRequest {
	s.SpaceIdentifier = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusRequest) SetSpaceType(v string) *ListWorkItemWorkFlowStatusRequest {
	s.SpaceType = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusRequest) SetWorkitemCategoryIdentifier(v string) *ListWorkItemWorkFlowStatusRequest {
	s.WorkitemCategoryIdentifier = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusRequest) SetWorkitemTypeIdentifier(v string) *ListWorkItemWorkFlowStatusRequest {
	s.WorkitemTypeIdentifier = &v
	return s
}

type ListWorkItemWorkFlowStatusResponseBody struct {
	// example:
	//
	// 例：Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// errormessage
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Statuses  []*ListWorkItemWorkFlowStatusResponseBodyStatuses `json:"statuses,omitempty" xml:"statuses,omitempty" type:"Repeated"`
	// example:
	//
	// true或者false
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListWorkItemWorkFlowStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkItemWorkFlowStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkItemWorkFlowStatusResponseBody) SetErrorCode(v string) *ListWorkItemWorkFlowStatusResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBody) SetErrorMessage(v string) *ListWorkItemWorkFlowStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBody) SetRequestId(v string) *ListWorkItemWorkFlowStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBody) SetStatuses(v []*ListWorkItemWorkFlowStatusResponseBodyStatuses) *ListWorkItemWorkFlowStatusResponseBody {
	s.Statuses = v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBody) SetSuccess(v bool) *ListWorkItemWorkFlowStatusResponseBody {
	s.Success = &v
	return s
}

type ListWorkItemWorkFlowStatusResponseBodyStatuses struct {
	// example:
	//
	// 用户阿里云pk，例如19xxxx31947xxxx
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// 该状态的具体信息
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1620455467000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1641870287000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// dfexxxxxf4fee18xxxxx36
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 用户阿里云pk，例如19xxxx31947xxxx
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// 例：待处理
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// Workitem
	ResourceType *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
	// example:
	//
	// system
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// 例如：1
	WorkflowStageIdentifier *string `json:"workflowStageIdentifier,omitempty" xml:"workflowStageIdentifier,omitempty"`
	// example:
	//
	// 例：确认阶段
	WorkflowStageName *string `json:"workflowStageName,omitempty" xml:"workflowStageName,omitempty"`
}

func (s ListWorkItemWorkFlowStatusResponseBodyStatuses) String() string {
	return tea.Prettify(s)
}

func (s ListWorkItemWorkFlowStatusResponseBodyStatuses) GoString() string {
	return s.String()
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetCreator(v string) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.Creator = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetDescription(v string) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.Description = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetGmtCreate(v int64) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.GmtCreate = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetGmtModified(v int64) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.GmtModified = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetIdentifier(v string) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.Identifier = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetModifier(v string) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.Modifier = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetName(v string) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.Name = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetResourceType(v string) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.ResourceType = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetSource(v string) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.Source = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetWorkflowStageIdentifier(v string) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.WorkflowStageIdentifier = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponseBodyStatuses) SetWorkflowStageName(v string) *ListWorkItemWorkFlowStatusResponseBodyStatuses {
	s.WorkflowStageName = &v
	return s
}

type ListWorkItemWorkFlowStatusResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkItemWorkFlowStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkItemWorkFlowStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkItemWorkFlowStatusResponse) GoString() string {
	return s.String()
}

func (s *ListWorkItemWorkFlowStatusResponse) SetHeaders(v map[string]*string) *ListWorkItemWorkFlowStatusResponse {
	s.Headers = v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponse) SetStatusCode(v int32) *ListWorkItemWorkFlowStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkItemWorkFlowStatusResponse) SetBody(v *ListWorkItemWorkFlowStatusResponseBody) *ListWorkItemWorkFlowStatusResponse {
	s.Body = v
	return s
}

type ListWorkitemAttachmentsResponseBody struct {
	Attachments []*ListWorkitemAttachmentsResponseBodyAttachments `json:"attachments,omitempty" xml:"attachments,omitempty" type:"Repeated"`
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ListWorkitemAttachmentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemAttachmentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkitemAttachmentsResponseBody) SetAttachments(v []*ListWorkitemAttachmentsResponseBodyAttachments) *ListWorkitemAttachmentsResponseBody {
	s.Attachments = v
	return s
}

func (s *ListWorkitemAttachmentsResponseBody) SetErrorCode(v string) *ListWorkitemAttachmentsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListWorkitemAttachmentsResponseBody) SetErrorMsg(v string) *ListWorkitemAttachmentsResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListWorkitemAttachmentsResponseBody) SetRequestId(v string) *ListWorkitemAttachmentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListWorkitemAttachmentsResponseBody) SetSuccess(v bool) *ListWorkitemAttachmentsResponseBody {
	s.Success = &v
	return s
}

type ListWorkitemAttachmentsResponseBodyAttachments struct {
	// example:
	//
	// 237109
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// dflkjlsdddsdl234lkjfg
	FileIdentifier *string `json:"fileIdentifier,omitempty" xml:"fileIdentifier,omitempty"`
	// example:
	//
	// Artifacts_1565193_1.tgz
	FileName *string `json:"fileName,omitempty" xml:"fileName,omitempty"`
	// example:
	//
	// tgz
	FileSuffix *string `json:"fileSuffix,omitempty" xml:"fileSuffix,omitempty"`
	// example:
	//
	// 1545726028000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 50
	Size *string `json:"size,omitempty" xml:"size,omitempty"`
	// example:
	//
	// http://grace-share.oss-cn-hangzhou.aliyuncs.com/qf%2Fheap.bin?Expires=1675750082&OSSAccessKeyId=LTAI5t8irN2Wu3BGrBpffZue&Signature=RqRUEuHiwW8wuahYz6CenHaWWs4%3D
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s ListWorkitemAttachmentsResponseBodyAttachments) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemAttachmentsResponseBodyAttachments) GoString() string {
	return s.String()
}

func (s *ListWorkitemAttachmentsResponseBodyAttachments) SetCreator(v string) *ListWorkitemAttachmentsResponseBodyAttachments {
	s.Creator = &v
	return s
}

func (s *ListWorkitemAttachmentsResponseBodyAttachments) SetFileIdentifier(v string) *ListWorkitemAttachmentsResponseBodyAttachments {
	s.FileIdentifier = &v
	return s
}

func (s *ListWorkitemAttachmentsResponseBodyAttachments) SetFileName(v string) *ListWorkitemAttachmentsResponseBodyAttachments {
	s.FileName = &v
	return s
}

func (s *ListWorkitemAttachmentsResponseBodyAttachments) SetFileSuffix(v string) *ListWorkitemAttachmentsResponseBodyAttachments {
	s.FileSuffix = &v
	return s
}

func (s *ListWorkitemAttachmentsResponseBodyAttachments) SetGmtCreate(v int64) *ListWorkitemAttachmentsResponseBodyAttachments {
	s.GmtCreate = &v
	return s
}

func (s *ListWorkitemAttachmentsResponseBodyAttachments) SetSize(v string) *ListWorkitemAttachmentsResponseBodyAttachments {
	s.Size = &v
	return s
}

func (s *ListWorkitemAttachmentsResponseBodyAttachments) SetUrl(v string) *ListWorkitemAttachmentsResponseBodyAttachments {
	s.Url = &v
	return s
}

type ListWorkitemAttachmentsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkitemAttachmentsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkitemAttachmentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemAttachmentsResponse) GoString() string {
	return s.String()
}

func (s *ListWorkitemAttachmentsResponse) SetHeaders(v map[string]*string) *ListWorkitemAttachmentsResponse {
	s.Headers = v
	return s
}

func (s *ListWorkitemAttachmentsResponse) SetStatusCode(v int32) *ListWorkitemAttachmentsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkitemAttachmentsResponse) SetBody(v *ListWorkitemAttachmentsResponseBody) *ListWorkitemAttachmentsResponse {
	s.Body = v
	return s
}

type ListWorkitemEstimateResponseBody struct {
	// example:
	//
	// 200
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success              *bool                                                   `json:"success,omitempty" xml:"success,omitempty"`
	WorkitemTimeEstimate []*ListWorkitemEstimateResponseBodyWorkitemTimeEstimate `json:"workitemTimeEstimate,omitempty" xml:"workitemTimeEstimate,omitempty" type:"Repeated"`
}

func (s ListWorkitemEstimateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemEstimateResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkitemEstimateResponseBody) SetCode(v int64) *ListWorkitemEstimateResponseBody {
	s.Code = &v
	return s
}

func (s *ListWorkitemEstimateResponseBody) SetErrorCode(v string) *ListWorkitemEstimateResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListWorkitemEstimateResponseBody) SetErrorMsg(v string) *ListWorkitemEstimateResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListWorkitemEstimateResponseBody) SetRequestId(v string) *ListWorkitemEstimateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListWorkitemEstimateResponseBody) SetSuccess(v bool) *ListWorkitemEstimateResponseBody {
	s.Success = &v
	return s
}

func (s *ListWorkitemEstimateResponseBody) SetWorkitemTimeEstimate(v []*ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) *ListWorkitemEstimateResponseBody {
	s.WorkitemTimeEstimate = v
	return s
}

type ListWorkitemEstimateResponseBodyWorkitemTimeEstimate struct {
	// example:
	//
	// 开发代码等
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1653235200000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1653235200000
	GmtEnd *int64 `json:"gmtEnd,omitempty" xml:"gmtEnd,omitempty"`
	// example:
	//
	// 1653235200000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 1653235200000
	GmtStart *int64 `json:"gmtStart,omitempty" xml:"gmtStart,omitempty"`
	// example:
	//
	// a4ac3a81e90217db32b7......
	Identifier *string                                                         `json:"identifier,omitempty" xml:"identifier,omitempty"`
	RecordUser *ListWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser `json:"recordUser,omitempty" xml:"recordUser,omitempty" type:"Struct"`
	// example:
	//
	// 8
	SpentTime *float32 `json:"spentTime,omitempty" xml:"spentTime,omitempty"`
	// example:
	//
	// 研发
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 5daa9a15c7fd55523996......
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) GoString() string {
	return s.String()
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetDescription(v string) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.Description = &v
	return s
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetGmtCreate(v int64) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.GmtCreate = &v
	return s
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetGmtEnd(v int64) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.GmtEnd = &v
	return s
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetGmtModified(v int64) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.GmtModified = &v
	return s
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetGmtStart(v int64) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.GmtStart = &v
	return s
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetIdentifier(v string) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.Identifier = &v
	return s
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetRecordUser(v *ListWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.RecordUser = v
	return s
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetSpentTime(v float32) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.SpentTime = &v
	return s
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetType(v string) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.Type = &v
	return s
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate) SetWorkitemIdentifier(v string) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimate {
	s.WorkitemIdentifier = &v
	return s
}

type ListWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser struct {
	// example:
	//
	// 132xxxx123
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s ListWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) GoString() string {
	return s.String()
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetIdentifier(v string) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.Identifier = &v
	return s
}

func (s *ListWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser) SetName(v string) *ListWorkitemEstimateResponseBodyWorkitemTimeEstimateRecordUser {
	s.Name = &v
	return s
}

type ListWorkitemEstimateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkitemEstimateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkitemEstimateResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemEstimateResponse) GoString() string {
	return s.String()
}

func (s *ListWorkitemEstimateResponse) SetHeaders(v map[string]*string) *ListWorkitemEstimateResponse {
	s.Headers = v
	return s
}

func (s *ListWorkitemEstimateResponse) SetStatusCode(v int32) *ListWorkitemEstimateResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkitemEstimateResponse) SetBody(v *ListWorkitemEstimateResponseBody) *ListWorkitemEstimateResponse {
	s.Body = v
	return s
}

type ListWorkitemTimeResponseBody struct {
	// example:
	//
	// 200
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success      *bool                                       `json:"success,omitempty" xml:"success,omitempty"`
	WorkitemTime []*ListWorkitemTimeResponseBodyWorkitemTime `json:"workitemTime,omitempty" xml:"workitemTime,omitempty" type:"Repeated"`
}

func (s ListWorkitemTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkitemTimeResponseBody) SetCode(v int64) *ListWorkitemTimeResponseBody {
	s.Code = &v
	return s
}

func (s *ListWorkitemTimeResponseBody) SetErrorCode(v string) *ListWorkitemTimeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListWorkitemTimeResponseBody) SetErrorMsg(v string) *ListWorkitemTimeResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListWorkitemTimeResponseBody) SetRequestId(v string) *ListWorkitemTimeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListWorkitemTimeResponseBody) SetSuccess(v bool) *ListWorkitemTimeResponseBody {
	s.Success = &v
	return s
}

func (s *ListWorkitemTimeResponseBody) SetWorkitemTime(v []*ListWorkitemTimeResponseBodyWorkitemTime) *ListWorkitemTimeResponseBody {
	s.WorkitemTime = v
	return s
}

type ListWorkitemTimeResponseBodyWorkitemTime struct {
	// example:
	//
	// 1
	ActualTime *float32 `json:"actualTime,omitempty" xml:"actualTime,omitempty"`
	// example:
	//
	// 开发代码等
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 1653235200000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1653235200000
	GmtEnd *int64 `json:"gmtEnd,omitempty" xml:"gmtEnd,omitempty"`
	// example:
	//
	// 1653235200000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 1653235200000
	GmtStart *int64 `json:"gmtStart,omitempty" xml:"gmtStart,omitempty"`
	// example:
	//
	// a4ac3a81e90217db32b7......
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// 1967043931......
	RecordUser *string `json:"recordUser,omitempty" xml:"recordUser,omitempty"`
	// example:
	//
	// 研发
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 5daa9a15c7fd55523996......
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s ListWorkitemTimeResponseBodyWorkitemTime) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemTimeResponseBodyWorkitemTime) GoString() string {
	return s.String()
}

func (s *ListWorkitemTimeResponseBodyWorkitemTime) SetActualTime(v float32) *ListWorkitemTimeResponseBodyWorkitemTime {
	s.ActualTime = &v
	return s
}

func (s *ListWorkitemTimeResponseBodyWorkitemTime) SetDescription(v string) *ListWorkitemTimeResponseBodyWorkitemTime {
	s.Description = &v
	return s
}

func (s *ListWorkitemTimeResponseBodyWorkitemTime) SetGmtCreate(v int64) *ListWorkitemTimeResponseBodyWorkitemTime {
	s.GmtCreate = &v
	return s
}

func (s *ListWorkitemTimeResponseBodyWorkitemTime) SetGmtEnd(v int64) *ListWorkitemTimeResponseBodyWorkitemTime {
	s.GmtEnd = &v
	return s
}

func (s *ListWorkitemTimeResponseBodyWorkitemTime) SetGmtModified(v int64) *ListWorkitemTimeResponseBodyWorkitemTime {
	s.GmtModified = &v
	return s
}

func (s *ListWorkitemTimeResponseBodyWorkitemTime) SetGmtStart(v int64) *ListWorkitemTimeResponseBodyWorkitemTime {
	s.GmtStart = &v
	return s
}

func (s *ListWorkitemTimeResponseBodyWorkitemTime) SetIdentifier(v string) *ListWorkitemTimeResponseBodyWorkitemTime {
	s.Identifier = &v
	return s
}

func (s *ListWorkitemTimeResponseBodyWorkitemTime) SetRecordUser(v string) *ListWorkitemTimeResponseBodyWorkitemTime {
	s.RecordUser = &v
	return s
}

func (s *ListWorkitemTimeResponseBodyWorkitemTime) SetType(v string) *ListWorkitemTimeResponseBodyWorkitemTime {
	s.Type = &v
	return s
}

func (s *ListWorkitemTimeResponseBodyWorkitemTime) SetWorkitemIdentifier(v string) *ListWorkitemTimeResponseBodyWorkitemTime {
	s.WorkitemIdentifier = &v
	return s
}

type ListWorkitemTimeResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkitemTimeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkitemTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemTimeResponse) GoString() string {
	return s.String()
}

func (s *ListWorkitemTimeResponse) SetHeaders(v map[string]*string) *ListWorkitemTimeResponse {
	s.Headers = v
	return s
}

func (s *ListWorkitemTimeResponse) SetStatusCode(v int32) *ListWorkitemTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkitemTimeResponse) SetBody(v *ListWorkitemTimeResponseBody) *ListWorkitemTimeResponse {
	s.Body = v
	return s
}

type ListWorkitemsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Req
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// example:
	//
	// {"conditionGroups":[]}
	Conditions *string `json:"conditions,omitempty" xml:"conditions,omitempty"`
	// example:
	//
	// {"conditionGroups":[]}
	ExtraConditions *string `json:"extraConditions,omitempty" xml:"extraConditions,omitempty"`
	// example:
	//
	// {"fieldIdentifier":"tag","className":"tag","format":"multiList","value":["c76e0e4bf64801cfad73......"],"operator":"EQUALS"}
	GroupCondition *string `json:"groupCondition,omitempty" xml:"groupCondition,omitempty"`
	// example:
	//
	// 20
	MaxResults *string `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// ""
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// {"fieldIdentifier":"status","format":"list","order":"desc","className":"status"}
	OrderBy *string `json:"orderBy,omitempty" xml:"orderBy,omitempty"`
	// example:
	//
	// LIST
	SearchType *string `json:"searchType,omitempty" xml:"searchType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 8fb83debd69a6c7c6626......
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Project
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
}

func (s ListWorkitemsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemsRequest) GoString() string {
	return s.String()
}

func (s *ListWorkitemsRequest) SetCategory(v string) *ListWorkitemsRequest {
	s.Category = &v
	return s
}

func (s *ListWorkitemsRequest) SetConditions(v string) *ListWorkitemsRequest {
	s.Conditions = &v
	return s
}

func (s *ListWorkitemsRequest) SetExtraConditions(v string) *ListWorkitemsRequest {
	s.ExtraConditions = &v
	return s
}

func (s *ListWorkitemsRequest) SetGroupCondition(v string) *ListWorkitemsRequest {
	s.GroupCondition = &v
	return s
}

func (s *ListWorkitemsRequest) SetMaxResults(v string) *ListWorkitemsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListWorkitemsRequest) SetNextToken(v string) *ListWorkitemsRequest {
	s.NextToken = &v
	return s
}

func (s *ListWorkitemsRequest) SetOrderBy(v string) *ListWorkitemsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListWorkitemsRequest) SetSearchType(v string) *ListWorkitemsRequest {
	s.SearchType = &v
	return s
}

func (s *ListWorkitemsRequest) SetSpaceIdentifier(v string) *ListWorkitemsRequest {
	s.SpaceIdentifier = &v
	return s
}

func (s *ListWorkitemsRequest) SetSpaceType(v string) *ListWorkitemsRequest {
	s.SpaceType = &v
	return s
}

type ListWorkitemsResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// ""
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64                                `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	Workitems  []*ListWorkitemsResponseBodyWorkitems `json:"workitems,omitempty" xml:"workitems,omitempty" type:"Repeated"`
}

func (s ListWorkitemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemsResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkitemsResponseBody) SetErrorCode(v string) *ListWorkitemsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListWorkitemsResponseBody) SetErrorMsg(v string) *ListWorkitemsResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListWorkitemsResponseBody) SetMaxResults(v int64) *ListWorkitemsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListWorkitemsResponseBody) SetNextToken(v string) *ListWorkitemsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListWorkitemsResponseBody) SetRequestId(v string) *ListWorkitemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListWorkitemsResponseBody) SetSuccess(v bool) *ListWorkitemsResponseBody {
	s.Success = &v
	return s
}

func (s *ListWorkitemsResponseBody) SetTotalCount(v int64) *ListWorkitemsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListWorkitemsResponseBody) SetWorkitems(v []*ListWorkitemsResponseBodyWorkitems) *ListWorkitemsResponseBody {
	s.Workitems = v
	return s
}

type ListWorkitemsResponseBodyWorkitems struct {
	// example:
	//
	// 19xx7043xxxxxxx914
	AssignedTo *string `json:"assignedTo,omitempty" xml:"assignedTo,omitempty"`
	// example:
	//
	// Req
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// html格式
	Document   *string `json:"document,omitempty" xml:"document,omitempty"`
	FinishTime *int64  `json:"finishTime,omitempty" xml:"finishTime,omitempty"`
	// example:
	//
	// 1640850318000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1640850318000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// NORMAL
	LogicalStatus *string `json:"logicalStatus,omitempty" xml:"logicalStatus,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx24
	ParentIdentifier *string `json:"parentIdentifier,omitempty" xml:"parentIdentifier,omitempty"`
	// example:
	//
	// ABCD-1
	SerialNumber *string `json:"serialNumber,omitempty" xml:"serialNumber,omitempty"`
	// example:
	//
	// e8b26xxxxx6e76aa20xxxxx23
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// 需求项目
	SpaceName *string `json:"spaceName,omitempty" xml:"spaceName,omitempty"`
	// example:
	//
	// Project
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	// example:
	//
	// 75528f17703e92e5a568......
	SprintIdentifier *string `json:"sprintIdentifier,omitempty" xml:"sprintIdentifier,omitempty"`
	// example:
	//
	// 待处理
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 100005
	StatusIdentifier *string `json:"statusIdentifier,omitempty" xml:"statusIdentifier,omitempty"`
	// example:
	//
	// 1
	StatusStageIdentifier *string `json:"statusStageIdentifier,omitempty" xml:"statusStageIdentifier,omitempty"`
	// example:
	//
	// 测试工作项
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// example:
	//
	// 1640850328000
	UpdateStatusAt *int64 `json:"updateStatusAt,omitempty" xml:"updateStatusAt,omitempty"`
	// example:
	//
	// 9uxxxxxxre573f5xxxxxx0
	WorkitemTypeIdentifier *string `json:"workitemTypeIdentifier,omitempty" xml:"workitemTypeIdentifier,omitempty"`
}

func (s ListWorkitemsResponseBodyWorkitems) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemsResponseBodyWorkitems) GoString() string {
	return s.String()
}

func (s *ListWorkitemsResponseBodyWorkitems) SetAssignedTo(v string) *ListWorkitemsResponseBodyWorkitems {
	s.AssignedTo = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetCategoryIdentifier(v string) *ListWorkitemsResponseBodyWorkitems {
	s.CategoryIdentifier = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetCreator(v string) *ListWorkitemsResponseBodyWorkitems {
	s.Creator = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetDocument(v string) *ListWorkitemsResponseBodyWorkitems {
	s.Document = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetFinishTime(v int64) *ListWorkitemsResponseBodyWorkitems {
	s.FinishTime = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetGmtCreate(v int64) *ListWorkitemsResponseBodyWorkitems {
	s.GmtCreate = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetGmtModified(v int64) *ListWorkitemsResponseBodyWorkitems {
	s.GmtModified = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetIdentifier(v string) *ListWorkitemsResponseBodyWorkitems {
	s.Identifier = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetLogicalStatus(v string) *ListWorkitemsResponseBodyWorkitems {
	s.LogicalStatus = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetModifier(v string) *ListWorkitemsResponseBodyWorkitems {
	s.Modifier = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetParentIdentifier(v string) *ListWorkitemsResponseBodyWorkitems {
	s.ParentIdentifier = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetSerialNumber(v string) *ListWorkitemsResponseBodyWorkitems {
	s.SerialNumber = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetSpaceIdentifier(v string) *ListWorkitemsResponseBodyWorkitems {
	s.SpaceIdentifier = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetSpaceName(v string) *ListWorkitemsResponseBodyWorkitems {
	s.SpaceName = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetSpaceType(v string) *ListWorkitemsResponseBodyWorkitems {
	s.SpaceType = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetSprintIdentifier(v string) *ListWorkitemsResponseBodyWorkitems {
	s.SprintIdentifier = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetStatus(v string) *ListWorkitemsResponseBodyWorkitems {
	s.Status = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetStatusIdentifier(v string) *ListWorkitemsResponseBodyWorkitems {
	s.StatusIdentifier = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetStatusStageIdentifier(v string) *ListWorkitemsResponseBodyWorkitems {
	s.StatusStageIdentifier = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetSubject(v string) *ListWorkitemsResponseBodyWorkitems {
	s.Subject = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetUpdateStatusAt(v int64) *ListWorkitemsResponseBodyWorkitems {
	s.UpdateStatusAt = &v
	return s
}

func (s *ListWorkitemsResponseBodyWorkitems) SetWorkitemTypeIdentifier(v string) *ListWorkitemsResponseBodyWorkitems {
	s.WorkitemTypeIdentifier = &v
	return s
}

type ListWorkitemsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkitemsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkitemsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkitemsResponse) GoString() string {
	return s.String()
}

func (s *ListWorkitemsResponse) SetHeaders(v map[string]*string) *ListWorkitemsResponse {
	s.Headers = v
	return s
}

func (s *ListWorkitemsResponse) SetStatusCode(v int32) *ListWorkitemsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkitemsResponse) SetBody(v *ListWorkitemsResponseBody) *ListWorkitemsResponse {
	s.Body = v
	return s
}

type ListWorkspacesRequest struct {
	// example:
	//
	// 10
	MaxResults *int32 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// beb1eff55bf03a13cf321a395dxxxxxx
	NextToken             *string   `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	StatusList            []*string `json:"statusList,omitempty" xml:"statusList,omitempty" type:"Repeated"`
	WorkspaceTemplateList []*string `json:"workspaceTemplateList,omitempty" xml:"workspaceTemplateList,omitempty" type:"Repeated"`
}

func (s ListWorkspacesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesRequest) GoString() string {
	return s.String()
}

func (s *ListWorkspacesRequest) SetMaxResults(v int32) *ListWorkspacesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListWorkspacesRequest) SetNextToken(v string) *ListWorkspacesRequest {
	s.NextToken = &v
	return s
}

func (s *ListWorkspacesRequest) SetStatusList(v []*string) *ListWorkspacesRequest {
	s.StatusList = v
	return s
}

func (s *ListWorkspacesRequest) SetWorkspaceTemplateList(v []*string) *ListWorkspacesRequest {
	s.WorkspaceTemplateList = v
	return s
}

type ListWorkspacesShrinkRequest struct {
	// example:
	//
	// 10
	MaxResults *int32 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// beb1eff55bf03a13cf321a395dxxxxxx
	NextToken                   *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	StatusListShrink            *string `json:"statusList,omitempty" xml:"statusList,omitempty"`
	WorkspaceTemplateListShrink *string `json:"workspaceTemplateList,omitempty" xml:"workspaceTemplateList,omitempty"`
}

func (s ListWorkspacesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListWorkspacesShrinkRequest) SetMaxResults(v int32) *ListWorkspacesShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListWorkspacesShrinkRequest) SetNextToken(v string) *ListWorkspacesShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListWorkspacesShrinkRequest) SetStatusListShrink(v string) *ListWorkspacesShrinkRequest {
	s.StatusListShrink = &v
	return s
}

func (s *ListWorkspacesShrinkRequest) SetWorkspaceTemplateListShrink(v string) *ListWorkspacesShrinkRequest {
	s.WorkspaceTemplateListShrink = &v
	return s
}

type ListWorkspacesResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 10
	MaxResults *int32 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// beb1eff55bf03a13cf321a395dxxxxxx
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 100
	TotalCount *int32                                  `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	Workspaces []*ListWorkspacesResponseBodyWorkspaces `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s ListWorkspacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkspacesResponseBody) SetErrorCode(v string) *ListWorkspacesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListWorkspacesResponseBody) SetErrorMessage(v string) *ListWorkspacesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ListWorkspacesResponseBody) SetMaxResults(v int32) *ListWorkspacesResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListWorkspacesResponseBody) SetNextToken(v string) *ListWorkspacesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListWorkspacesResponseBody) SetRequestId(v string) *ListWorkspacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListWorkspacesResponseBody) SetSuccess(v bool) *ListWorkspacesResponseBody {
	s.Success = &v
	return s
}

func (s *ListWorkspacesResponseBody) SetTotalCount(v int32) *ListWorkspacesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListWorkspacesResponseBody) SetWorkspaces(v []*ListWorkspacesResponseBodyWorkspaces) *ListWorkspacesResponseBody {
	s.Workspaces = v
	return s
}

type ListWorkspacesResponseBodyWorkspaces struct {
	// example:
	//
	// https://codeup.aliyun.com/demo/group/Codeup-Demo.git
	CodeUrl *string `json:"codeUrl,omitempty" xml:"codeUrl,omitempty"`
	// example:
	//
	// master
	CodeVersion *string `json:"codeVersion,omitempty" xml:"codeVersion,omitempty"`
	// example:
	//
	// 1628564442000
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 6ed82817-ab75-4563-865d-81e60dxxxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// Demo
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 2::4::60
	Spec *string `json:"spec,omitempty" xml:"spec,omitempty"`
	// example:
	//
	// SUCCESS
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// all-in-one
	Template *string `json:"template,omitempty" xml:"template,omitempty"`
	// example:
	//
	// 1470227819xxxxxx
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s ListWorkspacesResponseBodyWorkspaces) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesResponseBodyWorkspaces) GoString() string {
	return s.String()
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetCodeUrl(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.CodeUrl = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetCodeVersion(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.CodeVersion = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetCreateTime(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.CreateTime = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetId(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.Id = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetName(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.Name = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetSpec(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.Spec = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetStatus(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.Status = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetTemplate(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.Template = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetUserId(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.UserId = &v
	return s
}

type ListWorkspacesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkspacesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkspacesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesResponse) GoString() string {
	return s.String()
}

func (s *ListWorkspacesResponse) SetHeaders(v map[string]*string) *ListWorkspacesResponse {
	s.Headers = v
	return s
}

func (s *ListWorkspacesResponse) SetStatusCode(v int32) *ListWorkspacesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkspacesResponse) SetBody(v *ListWorkspacesResponseBody) *ListWorkspacesResponse {
	s.Body = v
	return s
}

type LogPipelineJobRunResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string                           `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Log          *LogPipelineJobRunResponseBodyLog `json:"log,omitempty" xml:"log,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s LogPipelineJobRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LogPipelineJobRunResponseBody) GoString() string {
	return s.String()
}

func (s *LogPipelineJobRunResponseBody) SetErrorCode(v string) *LogPipelineJobRunResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *LogPipelineJobRunResponseBody) SetErrorMessage(v string) *LogPipelineJobRunResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *LogPipelineJobRunResponseBody) SetLog(v *LogPipelineJobRunResponseBodyLog) *LogPipelineJobRunResponseBody {
	s.Log = v
	return s
}

func (s *LogPipelineJobRunResponseBody) SetRequestId(v string) *LogPipelineJobRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *LogPipelineJobRunResponseBody) SetSuccess(v bool) *LogPipelineJobRunResponseBody {
	s.Success = &v
	return s
}

type LogPipelineJobRunResponseBodyLog struct {
	// example:
	//
	// success
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// true
	More *bool `json:"more,omitempty" xml:"more,omitempty"`
}

func (s LogPipelineJobRunResponseBodyLog) String() string {
	return tea.Prettify(s)
}

func (s LogPipelineJobRunResponseBodyLog) GoString() string {
	return s.String()
}

func (s *LogPipelineJobRunResponseBodyLog) SetContent(v string) *LogPipelineJobRunResponseBodyLog {
	s.Content = &v
	return s
}

func (s *LogPipelineJobRunResponseBodyLog) SetMore(v bool) *LogPipelineJobRunResponseBodyLog {
	s.More = &v
	return s
}

type LogPipelineJobRunResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *LogPipelineJobRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s LogPipelineJobRunResponse) String() string {
	return tea.Prettify(s)
}

func (s LogPipelineJobRunResponse) GoString() string {
	return s.String()
}

func (s *LogPipelineJobRunResponse) SetHeaders(v map[string]*string) *LogPipelineJobRunResponse {
	s.Headers = v
	return s
}

func (s *LogPipelineJobRunResponse) SetStatusCode(v int32) *LogPipelineJobRunResponse {
	s.StatusCode = &v
	return s
}

func (s *LogPipelineJobRunResponse) SetBody(v *LogPipelineJobRunResponseBody) *LogPipelineJobRunResponse {
	s.Body = v
	return s
}

type LogVMDeployMachineResponseBody struct {
	DeployMachineLog *LogVMDeployMachineResponseBodyDeployMachineLog `json:"deployMachineLog,omitempty" xml:"deployMachineLog,omitempty" type:"Struct"`
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s LogVMDeployMachineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LogVMDeployMachineResponseBody) GoString() string {
	return s.String()
}

func (s *LogVMDeployMachineResponseBody) SetDeployMachineLog(v *LogVMDeployMachineResponseBodyDeployMachineLog) *LogVMDeployMachineResponseBody {
	s.DeployMachineLog = v
	return s
}

func (s *LogVMDeployMachineResponseBody) SetErrorCode(v string) *LogVMDeployMachineResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *LogVMDeployMachineResponseBody) SetErrorMessage(v string) *LogVMDeployMachineResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *LogVMDeployMachineResponseBody) SetRequestId(v string) *LogVMDeployMachineResponseBody {
	s.RequestId = &v
	return s
}

func (s *LogVMDeployMachineResponseBody) SetSuccess(v bool) *LogVMDeployMachineResponseBody {
	s.Success = &v
	return s
}

type LogVMDeployMachineResponseBodyDeployMachineLog struct {
	// example:
	//
	// cn-hangzhou
	AliyunRegion *string `json:"aliyunRegion,omitempty" xml:"aliyunRegion,omitempty"`
	// example:
	//
	// 11111111111
	DeployBeginTime *int64 `json:"deployBeginTime,omitempty" xml:"deployBeginTime,omitempty"`
	// example:
	//
	// 12222222
	DeployEndTime *int64 `json:"deployEndTime,omitempty" xml:"deployEndTime,omitempty"`
	// example:
	//
	// success
	DeployLog *string `json:"deployLog,omitempty" xml:"deployLog,omitempty"`
	// example:
	//
	// /tmp/log
	DeployLogPath *string `json:"deployLogPath,omitempty" xml:"deployLogPath,omitempty"`
}

func (s LogVMDeployMachineResponseBodyDeployMachineLog) String() string {
	return tea.Prettify(s)
}

func (s LogVMDeployMachineResponseBodyDeployMachineLog) GoString() string {
	return s.String()
}

func (s *LogVMDeployMachineResponseBodyDeployMachineLog) SetAliyunRegion(v string) *LogVMDeployMachineResponseBodyDeployMachineLog {
	s.AliyunRegion = &v
	return s
}

func (s *LogVMDeployMachineResponseBodyDeployMachineLog) SetDeployBeginTime(v int64) *LogVMDeployMachineResponseBodyDeployMachineLog {
	s.DeployBeginTime = &v
	return s
}

func (s *LogVMDeployMachineResponseBodyDeployMachineLog) SetDeployEndTime(v int64) *LogVMDeployMachineResponseBodyDeployMachineLog {
	s.DeployEndTime = &v
	return s
}

func (s *LogVMDeployMachineResponseBodyDeployMachineLog) SetDeployLog(v string) *LogVMDeployMachineResponseBodyDeployMachineLog {
	s.DeployLog = &v
	return s
}

func (s *LogVMDeployMachineResponseBodyDeployMachineLog) SetDeployLogPath(v string) *LogVMDeployMachineResponseBodyDeployMachineLog {
	s.DeployLogPath = &v
	return s
}

type LogVMDeployMachineResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *LogVMDeployMachineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s LogVMDeployMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s LogVMDeployMachineResponse) GoString() string {
	return s.String()
}

func (s *LogVMDeployMachineResponse) SetHeaders(v map[string]*string) *LogVMDeployMachineResponse {
	s.Headers = v
	return s
}

func (s *LogVMDeployMachineResponse) SetStatusCode(v int32) *LogVMDeployMachineResponse {
	s.StatusCode = &v
	return s
}

func (s *LogVMDeployMachineResponse) SetBody(v *LogVMDeployMachineResponseBody) *LogVMDeployMachineResponse {
	s.Body = v
	return s
}

type MergeMergeRequestRequest struct {
	// example:
	//
	// 0cf2c8458ac44d9481aab2dd6ec10596v3
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// ""
	MergeMessage *string `json:"mergeMessage,omitempty" xml:"mergeMessage,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// no-fast-forward
	MergeType *string `json:"mergeType,omitempty" xml:"mergeType,omitempty"`
	// example:
	//
	// true
	RemoveSourceBranch *bool `json:"removeSourceBranch,omitempty" xml:"removeSourceBranch,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s MergeMergeRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s MergeMergeRequestRequest) GoString() string {
	return s.String()
}

func (s *MergeMergeRequestRequest) SetAccessToken(v string) *MergeMergeRequestRequest {
	s.AccessToken = &v
	return s
}

func (s *MergeMergeRequestRequest) SetMergeMessage(v string) *MergeMergeRequestRequest {
	s.MergeMessage = &v
	return s
}

func (s *MergeMergeRequestRequest) SetMergeType(v string) *MergeMergeRequestRequest {
	s.MergeType = &v
	return s
}

func (s *MergeMergeRequestRequest) SetRemoveSourceBranch(v bool) *MergeMergeRequestRequest {
	s.RemoveSourceBranch = &v
	return s
}

func (s *MergeMergeRequestRequest) SetOrganizationId(v string) *MergeMergeRequestRequest {
	s.OrganizationId = &v
	return s
}

type MergeMergeRequestResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 9ED5E382-3A58-51E4-8A81-CE25D1756025
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *MergeMergeRequestResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s MergeMergeRequestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MergeMergeRequestResponseBody) GoString() string {
	return s.String()
}

func (s *MergeMergeRequestResponseBody) SetErrorCode(v string) *MergeMergeRequestResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *MergeMergeRequestResponseBody) SetErrorMessage(v string) *MergeMergeRequestResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *MergeMergeRequestResponseBody) SetRequestId(v string) *MergeMergeRequestResponseBody {
	s.RequestId = &v
	return s
}

func (s *MergeMergeRequestResponseBody) SetResult(v *MergeMergeRequestResponseBodyResult) *MergeMergeRequestResponseBody {
	s.Result = v
	return s
}

func (s *MergeMergeRequestResponseBody) SetSuccess(v bool) *MergeMergeRequestResponseBody {
	s.Success = &v
	return s
}

type MergeMergeRequestResponseBodyResult struct {
	BizId          *string `json:"bizId,omitempty" xml:"bizId,omitempty"`
	LocalId        *int64  `json:"localId,omitempty" xml:"localId,omitempty"`
	MergedRevision *string `json:"mergedRevision,omitempty" xml:"mergedRevision,omitempty"`
	ProjectId      *int64  `json:"projectId,omitempty" xml:"projectId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s MergeMergeRequestResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s MergeMergeRequestResponseBodyResult) GoString() string {
	return s.String()
}

func (s *MergeMergeRequestResponseBodyResult) SetBizId(v string) *MergeMergeRequestResponseBodyResult {
	s.BizId = &v
	return s
}

func (s *MergeMergeRequestResponseBodyResult) SetLocalId(v int64) *MergeMergeRequestResponseBodyResult {
	s.LocalId = &v
	return s
}

func (s *MergeMergeRequestResponseBodyResult) SetMergedRevision(v string) *MergeMergeRequestResponseBodyResult {
	s.MergedRevision = &v
	return s
}

func (s *MergeMergeRequestResponseBodyResult) SetProjectId(v int64) *MergeMergeRequestResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *MergeMergeRequestResponseBodyResult) SetResult(v bool) *MergeMergeRequestResponseBodyResult {
	s.Result = &v
	return s
}

type MergeMergeRequestResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MergeMergeRequestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MergeMergeRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s MergeMergeRequestResponse) GoString() string {
	return s.String()
}

func (s *MergeMergeRequestResponse) SetHeaders(v map[string]*string) *MergeMergeRequestResponse {
	s.Headers = v
	return s
}

func (s *MergeMergeRequestResponse) SetStatusCode(v int32) *MergeMergeRequestResponse {
	s.StatusCode = &v
	return s
}

func (s *MergeMergeRequestResponse) SetBody(v *MergeMergeRequestResponseBody) *MergeMergeRequestResponse {
	s.Body = v
	return s
}

type PassPipelineValidateResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s PassPipelineValidateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PassPipelineValidateResponseBody) GoString() string {
	return s.String()
}

func (s *PassPipelineValidateResponseBody) SetErrorCode(v string) *PassPipelineValidateResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *PassPipelineValidateResponseBody) SetErrorMessage(v string) *PassPipelineValidateResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *PassPipelineValidateResponseBody) SetRequestId(v string) *PassPipelineValidateResponseBody {
	s.RequestId = &v
	return s
}

func (s *PassPipelineValidateResponseBody) SetSuccess(v bool) *PassPipelineValidateResponseBody {
	s.Success = &v
	return s
}

type PassPipelineValidateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PassPipelineValidateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PassPipelineValidateResponse) String() string {
	return tea.Prettify(s)
}

func (s PassPipelineValidateResponse) GoString() string {
	return s.String()
}

func (s *PassPipelineValidateResponse) SetHeaders(v map[string]*string) *PassPipelineValidateResponse {
	s.Headers = v
	return s
}

func (s *PassPipelineValidateResponse) SetStatusCode(v int32) *PassPipelineValidateResponse {
	s.StatusCode = &v
	return s
}

func (s *PassPipelineValidateResponse) SetBody(v *PassPipelineValidateResponseBody) *PassPipelineValidateResponse {
	s.Body = v
	return s
}

type PassReleaseStagePipelineValidateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 226241***
	JobId *string `json:"jobId,omitempty" xml:"jobId,omitempty"`
	// example:
	//
	// 66c0c9fffeb86b450c199***
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s PassReleaseStagePipelineValidateRequest) String() string {
	return tea.Prettify(s)
}

func (s PassReleaseStagePipelineValidateRequest) GoString() string {
	return s.String()
}

func (s *PassReleaseStagePipelineValidateRequest) SetJobId(v string) *PassReleaseStagePipelineValidateRequest {
	s.JobId = &v
	return s
}

func (s *PassReleaseStagePipelineValidateRequest) SetOrganizationId(v string) *PassReleaseStagePipelineValidateRequest {
	s.OrganizationId = &v
	return s
}

type PassReleaseStagePipelineValidateResponseBody struct {
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s PassReleaseStagePipelineValidateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PassReleaseStagePipelineValidateResponseBody) GoString() string {
	return s.String()
}

func (s *PassReleaseStagePipelineValidateResponseBody) SetSuccess(v bool) *PassReleaseStagePipelineValidateResponseBody {
	s.Success = &v
	return s
}

type PassReleaseStagePipelineValidateResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PassReleaseStagePipelineValidateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PassReleaseStagePipelineValidateResponse) String() string {
	return tea.Prettify(s)
}

func (s PassReleaseStagePipelineValidateResponse) GoString() string {
	return s.String()
}

func (s *PassReleaseStagePipelineValidateResponse) SetHeaders(v map[string]*string) *PassReleaseStagePipelineValidateResponse {
	s.Headers = v
	return s
}

func (s *PassReleaseStagePipelineValidateResponse) SetStatusCode(v int32) *PassReleaseStagePipelineValidateResponse {
	s.StatusCode = &v
	return s
}

func (s *PassReleaseStagePipelineValidateResponse) SetBody(v *PassReleaseStagePipelineValidateResponseBody) *PassReleaseStagePipelineValidateResponse {
	s.Body = v
	return s
}

type RefusePipelineValidateResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s RefusePipelineValidateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefusePipelineValidateResponseBody) GoString() string {
	return s.String()
}

func (s *RefusePipelineValidateResponseBody) SetErrorCode(v string) *RefusePipelineValidateResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RefusePipelineValidateResponseBody) SetErrorMessage(v string) *RefusePipelineValidateResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *RefusePipelineValidateResponseBody) SetRequestId(v string) *RefusePipelineValidateResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefusePipelineValidateResponseBody) SetSuccess(v bool) *RefusePipelineValidateResponseBody {
	s.Success = &v
	return s
}

type RefusePipelineValidateResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RefusePipelineValidateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RefusePipelineValidateResponse) String() string {
	return tea.Prettify(s)
}

func (s RefusePipelineValidateResponse) GoString() string {
	return s.String()
}

func (s *RefusePipelineValidateResponse) SetHeaders(v map[string]*string) *RefusePipelineValidateResponse {
	s.Headers = v
	return s
}

func (s *RefusePipelineValidateResponse) SetStatusCode(v int32) *RefusePipelineValidateResponse {
	s.StatusCode = &v
	return s
}

func (s *RefusePipelineValidateResponse) SetBody(v *RefusePipelineValidateResponseBody) *RefusePipelineValidateResponse {
	s.Body = v
	return s
}

type RefuseReleaseStagePipelineValidateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 226241***
	JobId *string `json:"jobId,omitempty" xml:"jobId,omitempty"`
	// example:
	//
	// 66c0c9fffeb86b450c19****
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s RefuseReleaseStagePipelineValidateRequest) String() string {
	return tea.Prettify(s)
}

func (s RefuseReleaseStagePipelineValidateRequest) GoString() string {
	return s.String()
}

func (s *RefuseReleaseStagePipelineValidateRequest) SetJobId(v string) *RefuseReleaseStagePipelineValidateRequest {
	s.JobId = &v
	return s
}

func (s *RefuseReleaseStagePipelineValidateRequest) SetOrganizationId(v string) *RefuseReleaseStagePipelineValidateRequest {
	s.OrganizationId = &v
	return s
}

type RefuseReleaseStagePipelineValidateResponseBody struct {
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s RefuseReleaseStagePipelineValidateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefuseReleaseStagePipelineValidateResponseBody) GoString() string {
	return s.String()
}

func (s *RefuseReleaseStagePipelineValidateResponseBody) SetSuccess(v bool) *RefuseReleaseStagePipelineValidateResponseBody {
	s.Success = &v
	return s
}

type RefuseReleaseStagePipelineValidateResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RefuseReleaseStagePipelineValidateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RefuseReleaseStagePipelineValidateResponse) String() string {
	return tea.Prettify(s)
}

func (s RefuseReleaseStagePipelineValidateResponse) GoString() string {
	return s.String()
}

func (s *RefuseReleaseStagePipelineValidateResponse) SetHeaders(v map[string]*string) *RefuseReleaseStagePipelineValidateResponse {
	s.Headers = v
	return s
}

func (s *RefuseReleaseStagePipelineValidateResponse) SetStatusCode(v int32) *RefuseReleaseStagePipelineValidateResponse {
	s.StatusCode = &v
	return s
}

func (s *RefuseReleaseStagePipelineValidateResponse) SetBody(v *RefuseReleaseStagePipelineValidateResponseBody) *RefuseReleaseStagePipelineValidateResponse {
	s.Body = v
	return s
}

type ReleaseWorkspaceResponseBody struct {
	// example:
	//
	// Forbidden.AccessDenied
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// The user is not authorized to perform the operation.
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ReleaseWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseWorkspaceResponseBody) SetErrorCode(v string) *ReleaseWorkspaceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ReleaseWorkspaceResponseBody) SetErrorMessage(v string) *ReleaseWorkspaceResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ReleaseWorkspaceResponseBody) SetRequestId(v string) *ReleaseWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReleaseWorkspaceResponseBody) SetSuccess(v bool) *ReleaseWorkspaceResponseBody {
	s.Success = &v
	return s
}

type ReleaseWorkspaceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *ReleaseWorkspaceResponse) SetHeaders(v map[string]*string) *ReleaseWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *ReleaseWorkspaceResponse) SetStatusCode(v int32) *ReleaseWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseWorkspaceResponse) SetBody(v *ReleaseWorkspaceResponseBody) *ReleaseWorkspaceResponse {
	s.Body = v
	return s
}

type ReopenMergeRequestRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ReopenMergeRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s ReopenMergeRequestRequest) GoString() string {
	return s.String()
}

func (s *ReopenMergeRequestRequest) SetAccessToken(v string) *ReopenMergeRequestRequest {
	s.AccessToken = &v
	return s
}

func (s *ReopenMergeRequestRequest) SetOrganizationId(v string) *ReopenMergeRequestRequest {
	s.OrganizationId = &v
	return s
}

type ReopenMergeRequestResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 313A1BF6-63B7-52D4-A098-952221A65254
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *ReopenMergeRequestResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ReopenMergeRequestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReopenMergeRequestResponseBody) GoString() string {
	return s.String()
}

func (s *ReopenMergeRequestResponseBody) SetErrorCode(v string) *ReopenMergeRequestResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ReopenMergeRequestResponseBody) SetErrorMessage(v string) *ReopenMergeRequestResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ReopenMergeRequestResponseBody) SetRequestId(v string) *ReopenMergeRequestResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReopenMergeRequestResponseBody) SetResult(v *ReopenMergeRequestResponseBodyResult) *ReopenMergeRequestResponseBody {
	s.Result = v
	return s
}

func (s *ReopenMergeRequestResponseBody) SetSuccess(v bool) *ReopenMergeRequestResponseBody {
	s.Success = &v
	return s
}

type ReopenMergeRequestResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ReopenMergeRequestResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ReopenMergeRequestResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ReopenMergeRequestResponseBodyResult) SetResult(v bool) *ReopenMergeRequestResponseBodyResult {
	s.Result = &v
	return s
}

type ReopenMergeRequestResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReopenMergeRequestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReopenMergeRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s ReopenMergeRequestResponse) GoString() string {
	return s.String()
}

func (s *ReopenMergeRequestResponse) SetHeaders(v map[string]*string) *ReopenMergeRequestResponse {
	s.Headers = v
	return s
}

func (s *ReopenMergeRequestResponse) SetStatusCode(v int32) *ReopenMergeRequestResponse {
	s.StatusCode = &v
	return s
}

func (s *ReopenMergeRequestResponse) SetBody(v *ReopenMergeRequestResponseBody) *ReopenMergeRequestResponse {
	s.Body = v
	return s
}

type ResetSshKeyResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	SshKey    *ResetSshKeyResponseBodySshKey `json:"sshKey,omitempty" xml:"sshKey,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ResetSshKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetSshKeyResponseBody) GoString() string {
	return s.String()
}

func (s *ResetSshKeyResponseBody) SetErrorCode(v string) *ResetSshKeyResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ResetSshKeyResponseBody) SetErrorMessage(v string) *ResetSshKeyResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ResetSshKeyResponseBody) SetRequestId(v string) *ResetSshKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetSshKeyResponseBody) SetSshKey(v *ResetSshKeyResponseBodySshKey) *ResetSshKeyResponseBody {
	s.SshKey = v
	return s
}

func (s *ResetSshKeyResponseBody) SetSuccess(v bool) *ResetSshKeyResponseBody {
	s.Success = &v
	return s
}

type ResetSshKeyResponseBodySshKey struct {
	// example:
	//
	// 1212
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// saaaaaaaaaaaaaaaa
	PublicKey *string `json:"publicKey,omitempty" xml:"publicKey,omitempty"`
}

func (s ResetSshKeyResponseBodySshKey) String() string {
	return tea.Prettify(s)
}

func (s ResetSshKeyResponseBodySshKey) GoString() string {
	return s.String()
}

func (s *ResetSshKeyResponseBodySshKey) SetId(v int64) *ResetSshKeyResponseBodySshKey {
	s.Id = &v
	return s
}

func (s *ResetSshKeyResponseBodySshKey) SetPublicKey(v string) *ResetSshKeyResponseBodySshKey {
	s.PublicKey = &v
	return s
}

type ResetSshKeyResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetSshKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetSshKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetSshKeyResponse) GoString() string {
	return s.String()
}

func (s *ResetSshKeyResponse) SetHeaders(v map[string]*string) *ResetSshKeyResponse {
	s.Headers = v
	return s
}

func (s *ResetSshKeyResponse) SetStatusCode(v int32) *ResetSshKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetSshKeyResponse) SetBody(v *ResetSshKeyResponseBody) *ResetSshKeyResponse {
	s.Body = v
	return s
}

type ResumeVMDeployOrderResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ResumeVMDeployOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeVMDeployOrderResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeVMDeployOrderResponseBody) SetErrorCode(v string) *ResumeVMDeployOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ResumeVMDeployOrderResponseBody) SetErrorMessage(v string) *ResumeVMDeployOrderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ResumeVMDeployOrderResponseBody) SetRequestId(v string) *ResumeVMDeployOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResumeVMDeployOrderResponseBody) SetSuccess(v bool) *ResumeVMDeployOrderResponseBody {
	s.Success = &v
	return s
}

type ResumeVMDeployOrderResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeVMDeployOrderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeVMDeployOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeVMDeployOrderResponse) GoString() string {
	return s.String()
}

func (s *ResumeVMDeployOrderResponse) SetHeaders(v map[string]*string) *ResumeVMDeployOrderResponse {
	s.Headers = v
	return s
}

func (s *ResumeVMDeployOrderResponse) SetStatusCode(v int32) *ResumeVMDeployOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeVMDeployOrderResponse) SetBody(v *ResumeVMDeployOrderResponseBody) *ResumeVMDeployOrderResponse {
	s.Body = v
	return s
}

type RetryPipelineJobRunResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s RetryPipelineJobRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RetryPipelineJobRunResponseBody) GoString() string {
	return s.String()
}

func (s *RetryPipelineJobRunResponseBody) SetErrorCode(v string) *RetryPipelineJobRunResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RetryPipelineJobRunResponseBody) SetErrorMessage(v string) *RetryPipelineJobRunResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *RetryPipelineJobRunResponseBody) SetRequestId(v string) *RetryPipelineJobRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *RetryPipelineJobRunResponseBody) SetSuccess(v bool) *RetryPipelineJobRunResponseBody {
	s.Success = &v
	return s
}

type RetryPipelineJobRunResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RetryPipelineJobRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RetryPipelineJobRunResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryPipelineJobRunResponse) GoString() string {
	return s.String()
}

func (s *RetryPipelineJobRunResponse) SetHeaders(v map[string]*string) *RetryPipelineJobRunResponse {
	s.Headers = v
	return s
}

func (s *RetryPipelineJobRunResponse) SetStatusCode(v int32) *RetryPipelineJobRunResponse {
	s.StatusCode = &v
	return s
}

func (s *RetryPipelineJobRunResponse) SetBody(v *RetryPipelineJobRunResponseBody) *RetryPipelineJobRunResponse {
	s.Body = v
	return s
}

type RetryVMDeployMachineResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s RetryVMDeployMachineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RetryVMDeployMachineResponseBody) GoString() string {
	return s.String()
}

func (s *RetryVMDeployMachineResponseBody) SetErrorCode(v string) *RetryVMDeployMachineResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RetryVMDeployMachineResponseBody) SetErrorMessage(v string) *RetryVMDeployMachineResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *RetryVMDeployMachineResponseBody) SetRequestId(v string) *RetryVMDeployMachineResponseBody {
	s.RequestId = &v
	return s
}

func (s *RetryVMDeployMachineResponseBody) SetSuccess(v bool) *RetryVMDeployMachineResponseBody {
	s.Success = &v
	return s
}

type RetryVMDeployMachineResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RetryVMDeployMachineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RetryVMDeployMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryVMDeployMachineResponse) GoString() string {
	return s.String()
}

func (s *RetryVMDeployMachineResponse) SetHeaders(v map[string]*string) *RetryVMDeployMachineResponse {
	s.Headers = v
	return s
}

func (s *RetryVMDeployMachineResponse) SetStatusCode(v int32) *RetryVMDeployMachineResponse {
	s.StatusCode = &v
	return s
}

func (s *RetryVMDeployMachineResponse) SetBody(v *RetryVMDeployMachineResponseBody) *RetryVMDeployMachineResponse {
	s.Body = v
	return s
}

type ReviewMergeRequestRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken     *string   `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	DraftCommentIds []*string `json:"draftCommentIds,omitempty" xml:"draftCommentIds,omitempty" type:"Repeated"`
	ReviewComment   *string   `json:"reviewComment,omitempty" xml:"reviewComment,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// PASS
	ReviewOpinion *string `json:"reviewOpinion,omitempty" xml:"reviewOpinion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s ReviewMergeRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s ReviewMergeRequestRequest) GoString() string {
	return s.String()
}

func (s *ReviewMergeRequestRequest) SetAccessToken(v string) *ReviewMergeRequestRequest {
	s.AccessToken = &v
	return s
}

func (s *ReviewMergeRequestRequest) SetDraftCommentIds(v []*string) *ReviewMergeRequestRequest {
	s.DraftCommentIds = v
	return s
}

func (s *ReviewMergeRequestRequest) SetReviewComment(v string) *ReviewMergeRequestRequest {
	s.ReviewComment = &v
	return s
}

func (s *ReviewMergeRequestRequest) SetReviewOpinion(v string) *ReviewMergeRequestRequest {
	s.ReviewOpinion = &v
	return s
}

func (s *ReviewMergeRequestRequest) SetOrganizationId(v string) *ReviewMergeRequestRequest {
	s.OrganizationId = &v
	return s
}

type ReviewMergeRequestResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *ReviewMergeRequestResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s ReviewMergeRequestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReviewMergeRequestResponseBody) GoString() string {
	return s.String()
}

func (s *ReviewMergeRequestResponseBody) SetErrorCode(v string) *ReviewMergeRequestResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ReviewMergeRequestResponseBody) SetErrorMessage(v string) *ReviewMergeRequestResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *ReviewMergeRequestResponseBody) SetRequestId(v string) *ReviewMergeRequestResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReviewMergeRequestResponseBody) SetResult(v *ReviewMergeRequestResponseBodyResult) *ReviewMergeRequestResponseBody {
	s.Result = v
	return s
}

func (s *ReviewMergeRequestResponseBody) SetSuccess(v bool) *ReviewMergeRequestResponseBody {
	s.Success = &v
	return s
}

type ReviewMergeRequestResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s ReviewMergeRequestResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ReviewMergeRequestResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ReviewMergeRequestResponseBodyResult) SetResult(v bool) *ReviewMergeRequestResponseBodyResult {
	s.Result = &v
	return s
}

type ReviewMergeRequestResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReviewMergeRequestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReviewMergeRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s ReviewMergeRequestResponse) GoString() string {
	return s.String()
}

func (s *ReviewMergeRequestResponse) SetHeaders(v map[string]*string) *ReviewMergeRequestResponse {
	s.Headers = v
	return s
}

func (s *ReviewMergeRequestResponse) SetStatusCode(v int32) *ReviewMergeRequestResponse {
	s.StatusCode = &v
	return s
}

func (s *ReviewMergeRequestResponse) SetBody(v *ReviewMergeRequestResponseBody) *ReviewMergeRequestResponse {
	s.Body = v
	return s
}

type SkipPipelineJobRunResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s SkipPipelineJobRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SkipPipelineJobRunResponseBody) GoString() string {
	return s.String()
}

func (s *SkipPipelineJobRunResponseBody) SetErrorCode(v string) *SkipPipelineJobRunResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SkipPipelineJobRunResponseBody) SetErrorMessage(v string) *SkipPipelineJobRunResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SkipPipelineJobRunResponseBody) SetRequestId(v string) *SkipPipelineJobRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *SkipPipelineJobRunResponseBody) SetSuccess(v bool) *SkipPipelineJobRunResponseBody {
	s.Success = &v
	return s
}

type SkipPipelineJobRunResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SkipPipelineJobRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SkipPipelineJobRunResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipPipelineJobRunResponse) GoString() string {
	return s.String()
}

func (s *SkipPipelineJobRunResponse) SetHeaders(v map[string]*string) *SkipPipelineJobRunResponse {
	s.Headers = v
	return s
}

func (s *SkipPipelineJobRunResponse) SetStatusCode(v int32) *SkipPipelineJobRunResponse {
	s.StatusCode = &v
	return s
}

func (s *SkipPipelineJobRunResponse) SetBody(v *SkipPipelineJobRunResponseBody) *SkipPipelineJobRunResponse {
	s.Body = v
	return s
}

type SkipVMDeployMachineResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s SkipVMDeployMachineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SkipVMDeployMachineResponseBody) GoString() string {
	return s.String()
}

func (s *SkipVMDeployMachineResponseBody) SetErrorCode(v string) *SkipVMDeployMachineResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SkipVMDeployMachineResponseBody) SetErrorMessage(v string) *SkipVMDeployMachineResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SkipVMDeployMachineResponseBody) SetRequestId(v string) *SkipVMDeployMachineResponseBody {
	s.RequestId = &v
	return s
}

func (s *SkipVMDeployMachineResponseBody) SetSuccess(v bool) *SkipVMDeployMachineResponseBody {
	s.Success = &v
	return s
}

type SkipVMDeployMachineResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SkipVMDeployMachineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SkipVMDeployMachineResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipVMDeployMachineResponse) GoString() string {
	return s.String()
}

func (s *SkipVMDeployMachineResponse) SetHeaders(v map[string]*string) *SkipVMDeployMachineResponse {
	s.Headers = v
	return s
}

func (s *SkipVMDeployMachineResponse) SetStatusCode(v int32) *SkipVMDeployMachineResponse {
	s.StatusCode = &v
	return s
}

func (s *SkipVMDeployMachineResponse) SetBody(v *SkipVMDeployMachineResponseBody) *SkipVMDeployMachineResponse {
	s.Body = v
	return s
}

type StartPipelineRunRequest struct {
	// example:
	//
	// {     "branchModeBranchs":[         "branch1",         "branch2"     ],     "envs":{         "k1":"v1",         "k2":"v2",         "k3":"v3"     },     "runningBranchs":{         "https://codeup.aliyun.com/60c1abb32c5969c370c5fcd0/Codeup-Demo.git":"master1"     },     "runningTags":{         "https://codeup.aliyun.com/60c1abb32c5969c370c5fcd0/Codeup-Demo.git":"1.0"     } }
	Params *string `json:"params,omitempty" xml:"params,omitempty"`
}

func (s StartPipelineRunRequest) String() string {
	return tea.Prettify(s)
}

func (s StartPipelineRunRequest) GoString() string {
	return s.String()
}

func (s *StartPipelineRunRequest) SetParams(v string) *StartPipelineRunRequest {
	s.Params = &v
	return s
}

type StartPipelineRunResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 1
	PipelineRunId *int64 `json:"pipelineRunId,omitempty" xml:"pipelineRunId,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s StartPipelineRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartPipelineRunResponseBody) GoString() string {
	return s.String()
}

func (s *StartPipelineRunResponseBody) SetErrorCode(v string) *StartPipelineRunResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *StartPipelineRunResponseBody) SetErrorMessage(v string) *StartPipelineRunResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *StartPipelineRunResponseBody) SetPipelineRunId(v int64) *StartPipelineRunResponseBody {
	s.PipelineRunId = &v
	return s
}

func (s *StartPipelineRunResponseBody) SetRequestId(v string) *StartPipelineRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartPipelineRunResponseBody) SetSuccess(v bool) *StartPipelineRunResponseBody {
	s.Success = &v
	return s
}

type StartPipelineRunResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartPipelineRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartPipelineRunResponse) String() string {
	return tea.Prettify(s)
}

func (s StartPipelineRunResponse) GoString() string {
	return s.String()
}

func (s *StartPipelineRunResponse) SetHeaders(v map[string]*string) *StartPipelineRunResponse {
	s.Headers = v
	return s
}

func (s *StartPipelineRunResponse) SetStatusCode(v int32) *StartPipelineRunResponse {
	s.StatusCode = &v
	return s
}

func (s *StartPipelineRunResponse) SetBody(v *StartPipelineRunResponseBody) *StartPipelineRunResponse {
	s.Body = v
	return s
}

type StopPipelineJobRunResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// "\\"
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s StopPipelineJobRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopPipelineJobRunResponseBody) GoString() string {
	return s.String()
}

func (s *StopPipelineJobRunResponseBody) SetErrorCode(v string) *StopPipelineJobRunResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *StopPipelineJobRunResponseBody) SetErrorMessage(v string) *StopPipelineJobRunResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *StopPipelineJobRunResponseBody) SetRequestId(v string) *StopPipelineJobRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopPipelineJobRunResponseBody) SetSuccess(v bool) *StopPipelineJobRunResponseBody {
	s.Success = &v
	return s
}

type StopPipelineJobRunResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopPipelineJobRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopPipelineJobRunResponse) String() string {
	return tea.Prettify(s)
}

func (s StopPipelineJobRunResponse) GoString() string {
	return s.String()
}

func (s *StopPipelineJobRunResponse) SetHeaders(v map[string]*string) *StopPipelineJobRunResponse {
	s.Headers = v
	return s
}

func (s *StopPipelineJobRunResponse) SetStatusCode(v int32) *StopPipelineJobRunResponse {
	s.StatusCode = &v
	return s
}

func (s *StopPipelineJobRunResponse) SetBody(v *StopPipelineJobRunResponseBody) *StopPipelineJobRunResponse {
	s.Body = v
	return s
}

type StopPipelineRunResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s StopPipelineRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopPipelineRunResponseBody) GoString() string {
	return s.String()
}

func (s *StopPipelineRunResponseBody) SetErrorCode(v string) *StopPipelineRunResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *StopPipelineRunResponseBody) SetErrorMessage(v string) *StopPipelineRunResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *StopPipelineRunResponseBody) SetRequestId(v string) *StopPipelineRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopPipelineRunResponseBody) SetSuccess(v bool) *StopPipelineRunResponseBody {
	s.Success = &v
	return s
}

type StopPipelineRunResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopPipelineRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopPipelineRunResponse) String() string {
	return tea.Prettify(s)
}

func (s StopPipelineRunResponse) GoString() string {
	return s.String()
}

func (s *StopPipelineRunResponse) SetHeaders(v map[string]*string) *StopPipelineRunResponse {
	s.Headers = v
	return s
}

func (s *StopPipelineRunResponse) SetStatusCode(v int32) *StopPipelineRunResponse {
	s.StatusCode = &v
	return s
}

func (s *StopPipelineRunResponse) SetBody(v *StopPipelineRunResponseBody) *StopPipelineRunResponse {
	s.Body = v
	return s
}

type StopVMDeployOrderResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s StopVMDeployOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopVMDeployOrderResponseBody) GoString() string {
	return s.String()
}

func (s *StopVMDeployOrderResponseBody) SetErrorCode(v string) *StopVMDeployOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *StopVMDeployOrderResponseBody) SetErrorMessage(v string) *StopVMDeployOrderResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *StopVMDeployOrderResponseBody) SetRequestId(v string) *StopVMDeployOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopVMDeployOrderResponseBody) SetSuccess(v bool) *StopVMDeployOrderResponseBody {
	s.Success = &v
	return s
}

type StopVMDeployOrderResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopVMDeployOrderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopVMDeployOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s StopVMDeployOrderResponse) GoString() string {
	return s.String()
}

func (s *StopVMDeployOrderResponse) SetHeaders(v map[string]*string) *StopVMDeployOrderResponse {
	s.Headers = v
	return s
}

func (s *StopVMDeployOrderResponse) SetStatusCode(v int32) *StopVMDeployOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *StopVMDeployOrderResponse) SetBody(v *StopVMDeployOrderResponseBody) *StopVMDeployOrderResponse {
	s.Body = v
	return s
}

type TransferRepositoryRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	GroupId *string `json:"groupId,omitempty" xml:"groupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryId *string `json:"repositoryId,omitempty" xml:"repositoryId,omitempty"`
}

func (s TransferRepositoryRequest) String() string {
	return tea.Prettify(s)
}

func (s TransferRepositoryRequest) GoString() string {
	return s.String()
}

func (s *TransferRepositoryRequest) SetAccessToken(v string) *TransferRepositoryRequest {
	s.AccessToken = &v
	return s
}

func (s *TransferRepositoryRequest) SetGroupId(v string) *TransferRepositoryRequest {
	s.GroupId = &v
	return s
}

func (s *TransferRepositoryRequest) SetOrganizationId(v string) *TransferRepositoryRequest {
	s.OrganizationId = &v
	return s
}

func (s *TransferRepositoryRequest) SetRepositoryId(v string) *TransferRepositoryRequest {
	s.RepositoryId = &v
	return s
}

type TransferRepositoryResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *TransferRepositoryResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s TransferRepositoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TransferRepositoryResponseBody) GoString() string {
	return s.String()
}

func (s *TransferRepositoryResponseBody) SetErrorCode(v string) *TransferRepositoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *TransferRepositoryResponseBody) SetErrorMessage(v string) *TransferRepositoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *TransferRepositoryResponseBody) SetRequestId(v string) *TransferRepositoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *TransferRepositoryResponseBody) SetResult(v *TransferRepositoryResponseBodyResult) *TransferRepositoryResponseBody {
	s.Result = v
	return s
}

func (s *TransferRepositoryResponseBody) SetSuccess(v bool) *TransferRepositoryResponseBody {
	s.Success = &v
	return s
}

type TransferRepositoryResponseBodyResult struct {
	// example:
	//
	// 30
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// false
	Archived *bool `json:"archived,omitempty" xml:"archived,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 19238
	CreatorId *int64 `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// false
	DemoProject *bool   `json:"demoProject,omitempty" xml:"demoProject,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// false
	Encrypted *bool `json:"encrypted,omitempty" xml:"encrypted,omitempty"`
	// example:
	//
	// 19285
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	LastActivityAt *string `json:"lastActivityAt,omitempty" xml:"lastActivityAt,omitempty"`
	// example:
	//
	// test-repo
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// 100003
	NamespaceId *int64 `json:"namespaceId,omitempty" xml:"namespaceId,omitempty"`
	// example:
	//
	// test-repo
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// codeup-test-org/test-create-codeup
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// 0
	StarCount *int64 `json:"starCount,omitempty" xml:"starCount,omitempty"`
	// example:
	//
	// true
	Starred *bool `json:"starred,omitempty" xml:"starred,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// ""
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s TransferRepositoryResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s TransferRepositoryResponseBodyResult) GoString() string {
	return s.String()
}

func (s *TransferRepositoryResponseBodyResult) SetAccessLevel(v int32) *TransferRepositoryResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetArchived(v bool) *TransferRepositoryResponseBodyResult {
	s.Archived = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetCreatedAt(v string) *TransferRepositoryResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetCreatorId(v int64) *TransferRepositoryResponseBodyResult {
	s.CreatorId = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetDemoProject(v bool) *TransferRepositoryResponseBodyResult {
	s.DemoProject = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetDescription(v string) *TransferRepositoryResponseBodyResult {
	s.Description = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetEncrypted(v bool) *TransferRepositoryResponseBodyResult {
	s.Encrypted = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetId(v int64) *TransferRepositoryResponseBodyResult {
	s.Id = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetLastActivityAt(v string) *TransferRepositoryResponseBodyResult {
	s.LastActivityAt = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetName(v string) *TransferRepositoryResponseBodyResult {
	s.Name = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetNameWithNamespace(v string) *TransferRepositoryResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetNamespaceId(v int64) *TransferRepositoryResponseBodyResult {
	s.NamespaceId = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetPath(v string) *TransferRepositoryResponseBodyResult {
	s.Path = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetPathWithNamespace(v string) *TransferRepositoryResponseBodyResult {
	s.PathWithNamespace = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetStarCount(v int64) *TransferRepositoryResponseBodyResult {
	s.StarCount = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetStarred(v bool) *TransferRepositoryResponseBodyResult {
	s.Starred = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetUpdatedAt(v string) *TransferRepositoryResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetVisibilityLevel(v int32) *TransferRepositoryResponseBodyResult {
	s.VisibilityLevel = &v
	return s
}

func (s *TransferRepositoryResponseBodyResult) SetWebUrl(v string) *TransferRepositoryResponseBodyResult {
	s.WebUrl = &v
	return s
}

type TransferRepositoryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TransferRepositoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TransferRepositoryResponse) String() string {
	return tea.Prettify(s)
}

func (s TransferRepositoryResponse) GoString() string {
	return s.String()
}

func (s *TransferRepositoryResponse) SetHeaders(v map[string]*string) *TransferRepositoryResponse {
	s.Headers = v
	return s
}

func (s *TransferRepositoryResponse) SetStatusCode(v int32) *TransferRepositoryResponse {
	s.StatusCode = &v
	return s
}

func (s *TransferRepositoryResponse) SetBody(v *TransferRepositoryResponseBody) *TransferRepositoryResponse {
	s.Body = v
	return s
}

type TriggerRepositoryMirrorSyncRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// test-account
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// example:
	//
	// asd12e44827fe2444f952e931e51xxxx
	Token *string `json:"token,omitempty" xml:"token,omitempty"`
}

func (s TriggerRepositoryMirrorSyncRequest) String() string {
	return tea.Prettify(s)
}

func (s TriggerRepositoryMirrorSyncRequest) GoString() string {
	return s.String()
}

func (s *TriggerRepositoryMirrorSyncRequest) SetAccessToken(v string) *TriggerRepositoryMirrorSyncRequest {
	s.AccessToken = &v
	return s
}

func (s *TriggerRepositoryMirrorSyncRequest) SetAccount(v string) *TriggerRepositoryMirrorSyncRequest {
	s.Account = &v
	return s
}

func (s *TriggerRepositoryMirrorSyncRequest) SetOrganizationId(v string) *TriggerRepositoryMirrorSyncRequest {
	s.OrganizationId = &v
	return s
}

func (s *TriggerRepositoryMirrorSyncRequest) SetToken(v string) *TriggerRepositoryMirrorSyncRequest {
	s.Token = &v
	return s
}

type TriggerRepositoryMirrorSyncResponseBody struct {
	// example:
	//
	// SYSTEM_ILLEGAL_ARGUMENT_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// 企业不存在
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 37294673-00CA-5B8B-914F-A8B35511E90A
	RequestId *string                                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *TriggerRepositoryMirrorSyncResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s TriggerRepositoryMirrorSyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TriggerRepositoryMirrorSyncResponseBody) GoString() string {
	return s.String()
}

func (s *TriggerRepositoryMirrorSyncResponseBody) SetErrorCode(v string) *TriggerRepositoryMirrorSyncResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *TriggerRepositoryMirrorSyncResponseBody) SetErrorMessage(v string) *TriggerRepositoryMirrorSyncResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *TriggerRepositoryMirrorSyncResponseBody) SetRequestId(v string) *TriggerRepositoryMirrorSyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *TriggerRepositoryMirrorSyncResponseBody) SetResult(v *TriggerRepositoryMirrorSyncResponseBodyResult) *TriggerRepositoryMirrorSyncResponseBody {
	s.Result = v
	return s
}

func (s *TriggerRepositoryMirrorSyncResponseBody) SetSuccess(v bool) *TriggerRepositoryMirrorSyncResponseBody {
	s.Success = &v
	return s
}

type TriggerRepositoryMirrorSyncResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s TriggerRepositoryMirrorSyncResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s TriggerRepositoryMirrorSyncResponseBodyResult) GoString() string {
	return s.String()
}

func (s *TriggerRepositoryMirrorSyncResponseBodyResult) SetResult(v bool) *TriggerRepositoryMirrorSyncResponseBodyResult {
	s.Result = &v
	return s
}

type TriggerRepositoryMirrorSyncResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TriggerRepositoryMirrorSyncResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TriggerRepositoryMirrorSyncResponse) String() string {
	return tea.Prettify(s)
}

func (s TriggerRepositoryMirrorSyncResponse) GoString() string {
	return s.String()
}

func (s *TriggerRepositoryMirrorSyncResponse) SetHeaders(v map[string]*string) *TriggerRepositoryMirrorSyncResponse {
	s.Headers = v
	return s
}

func (s *TriggerRepositoryMirrorSyncResponse) SetStatusCode(v int32) *TriggerRepositoryMirrorSyncResponse {
	s.StatusCode = &v
	return s
}

func (s *TriggerRepositoryMirrorSyncResponse) SetBody(v *TriggerRepositoryMirrorSyncResponseBody) *TriggerRepositoryMirrorSyncResponse {
	s.Body = v
	return s
}

type UpdateAppMemberRequest struct {
	Player    *UpdateAppMemberRequestPlayer `json:"player,omitempty" xml:"player,omitempty" type:"Struct"`
	RoleNames []*string                     `json:"roleNames,omitempty" xml:"roleNames,omitempty" type:"Repeated"`
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdateAppMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppMemberRequest) GoString() string {
	return s.String()
}

func (s *UpdateAppMemberRequest) SetPlayer(v *UpdateAppMemberRequestPlayer) *UpdateAppMemberRequest {
	s.Player = v
	return s
}

func (s *UpdateAppMemberRequest) SetRoleNames(v []*string) *UpdateAppMemberRequest {
	s.RoleNames = v
	return s
}

func (s *UpdateAppMemberRequest) SetOrganizationId(v string) *UpdateAppMemberRequest {
	s.OrganizationId = &v
	return s
}

type UpdateAppMemberRequestPlayer struct {
	// example:
	//
	// 1332695887xxxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// User
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s UpdateAppMemberRequestPlayer) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppMemberRequestPlayer) GoString() string {
	return s.String()
}

func (s *UpdateAppMemberRequestPlayer) SetId(v string) *UpdateAppMemberRequestPlayer {
	s.Id = &v
	return s
}

func (s *UpdateAppMemberRequestPlayer) SetType(v string) *UpdateAppMemberRequestPlayer {
	s.Type = &v
	return s
}

type UpdateAppMemberResponse struct {
	Headers    map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *string            `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAppMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAppMemberResponse) GoString() string {
	return s.String()
}

func (s *UpdateAppMemberResponse) SetHeaders(v map[string]*string) *UpdateAppMemberResponse {
	s.Headers = v
	return s
}

func (s *UpdateAppMemberResponse) SetStatusCode(v int32) *UpdateAppMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAppMemberResponse) SetBody(v string) *UpdateAppMemberResponse {
	s.Body = &v
	return s
}

type UpdateApplicationRequest struct {
	// example:
	//
	// 1332695887xxxxxx
	OwnerAccountId *string `json:"ownerAccountId,omitempty" xml:"ownerAccountId,omitempty"`
	// example:
	//
	// 66c0c9fffeb86b450c199fcd
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdateApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplicationRequest) SetOwnerAccountId(v string) *UpdateApplicationRequest {
	s.OwnerAccountId = &v
	return s
}

func (s *UpdateApplicationRequest) SetOrganizationId(v string) *UpdateApplicationRequest {
	s.OrganizationId = &v
	return s
}

type UpdateApplicationResponseBody struct {
	// example:
	//
	// 1332695887xxxxxx
	CreatorAccountId *string `json:"creatorAccountId,omitempty" xml:"creatorAccountId,omitempty"`
	// example:
	//
	// 应用描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 2024-01-01T00:00:00.000+00:00
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// testApp
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// FC93CE1A-8D7A-13A9-8306-7465DE2E5C0F
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s UpdateApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateApplicationResponseBody) SetCreatorAccountId(v string) *UpdateApplicationResponseBody {
	s.CreatorAccountId = &v
	return s
}

func (s *UpdateApplicationResponseBody) SetDescription(v string) *UpdateApplicationResponseBody {
	s.Description = &v
	return s
}

func (s *UpdateApplicationResponseBody) SetGmtCreate(v string) *UpdateApplicationResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *UpdateApplicationResponseBody) SetName(v string) *UpdateApplicationResponseBody {
	s.Name = &v
	return s
}

func (s *UpdateApplicationResponseBody) SetRequestId(v string) *UpdateApplicationResponseBody {
	s.RequestId = &v
	return s
}

type UpdateApplicationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplicationResponse) SetHeaders(v map[string]*string) *UpdateApplicationResponse {
	s.Headers = v
	return s
}

func (s *UpdateApplicationResponse) SetStatusCode(v int32) *UpdateApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateApplicationResponse) SetBody(v *UpdateApplicationResponseBody) *UpdateApplicationResponse {
	s.Body = v
	return s
}

type UpdateCheckRunRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string                             `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	Annotations []*UpdateCheckRunRequestAnnotations `json:"annotations,omitempty" xml:"annotations,omitempty" type:"Repeated"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	CompletedAt *string `json:"completedAt,omitempty" xml:"completedAt,omitempty"`
	// example:
	//
	// success
	Conclusion *string `json:"conclusion,omitempty" xml:"conclusion,omitempty"`
	// example:
	//
	// xx
	DetailsUrl *string `json:"detailsUrl,omitempty" xml:"detailsUrl,omitempty"`
	// example:
	//
	// 42
	ExternalId *string `json:"externalId,omitempty" xml:"externalId,omitempty"`
	// example:
	//
	// my-check-ci
	Name   *string                      `json:"name,omitempty" xml:"name,omitempty"`
	Output *UpdateCheckRunRequestOutput `json:"output,omitempty" xml:"output,omitempty" type:"Struct"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	StartedAt *string `json:"startedAt,omitempty" xml:"startedAt,omitempty"`
	// example:
	//
	// completed
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2
	CheckRunId *int64 `json:"checkRunId,omitempty" xml:"checkRunId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s UpdateCheckRunRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunRequest) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunRequest) SetAccessToken(v string) *UpdateCheckRunRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateCheckRunRequest) SetAnnotations(v []*UpdateCheckRunRequestAnnotations) *UpdateCheckRunRequest {
	s.Annotations = v
	return s
}

func (s *UpdateCheckRunRequest) SetCompletedAt(v string) *UpdateCheckRunRequest {
	s.CompletedAt = &v
	return s
}

func (s *UpdateCheckRunRequest) SetConclusion(v string) *UpdateCheckRunRequest {
	s.Conclusion = &v
	return s
}

func (s *UpdateCheckRunRequest) SetDetailsUrl(v string) *UpdateCheckRunRequest {
	s.DetailsUrl = &v
	return s
}

func (s *UpdateCheckRunRequest) SetExternalId(v string) *UpdateCheckRunRequest {
	s.ExternalId = &v
	return s
}

func (s *UpdateCheckRunRequest) SetName(v string) *UpdateCheckRunRequest {
	s.Name = &v
	return s
}

func (s *UpdateCheckRunRequest) SetOutput(v *UpdateCheckRunRequestOutput) *UpdateCheckRunRequest {
	s.Output = v
	return s
}

func (s *UpdateCheckRunRequest) SetStartedAt(v string) *UpdateCheckRunRequest {
	s.StartedAt = &v
	return s
}

func (s *UpdateCheckRunRequest) SetStatus(v string) *UpdateCheckRunRequest {
	s.Status = &v
	return s
}

func (s *UpdateCheckRunRequest) SetCheckRunId(v int64) *UpdateCheckRunRequest {
	s.CheckRunId = &v
	return s
}

func (s *UpdateCheckRunRequest) SetOrganizationId(v string) *UpdateCheckRunRequest {
	s.OrganizationId = &v
	return s
}

func (s *UpdateCheckRunRequest) SetRepositoryIdentity(v string) *UpdateCheckRunRequest {
	s.RepositoryIdentity = &v
	return s
}

type UpdateCheckRunRequestAnnotations struct {
	// This parameter is required.
	//
	// example:
	//
	// failure
	AnnotationLevel *string `json:"annotationLevel,omitempty" xml:"annotationLevel,omitempty"`
	// example:
	//
	// 5
	EndColumn *int64 `json:"endColumn,omitempty" xml:"endColumn,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2
	EndLine *int64 `json:"endLine,omitempty" xml:"endLine,omitempty"`
	// This parameter is required.
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// demo/test.txt
	Path       *string `json:"path,omitempty" xml:"path,omitempty"`
	RawDetails *string `json:"rawDetails,omitempty" xml:"rawDetails,omitempty"`
	// example:
	//
	// 3
	StartColumn *int64 `json:"startColumn,omitempty" xml:"startColumn,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	StartLine *int64  `json:"startLine,omitempty" xml:"startLine,omitempty"`
	Title     *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s UpdateCheckRunRequestAnnotations) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunRequestAnnotations) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunRequestAnnotations) SetAnnotationLevel(v string) *UpdateCheckRunRequestAnnotations {
	s.AnnotationLevel = &v
	return s
}

func (s *UpdateCheckRunRequestAnnotations) SetEndColumn(v int64) *UpdateCheckRunRequestAnnotations {
	s.EndColumn = &v
	return s
}

func (s *UpdateCheckRunRequestAnnotations) SetEndLine(v int64) *UpdateCheckRunRequestAnnotations {
	s.EndLine = &v
	return s
}

func (s *UpdateCheckRunRequestAnnotations) SetMessage(v string) *UpdateCheckRunRequestAnnotations {
	s.Message = &v
	return s
}

func (s *UpdateCheckRunRequestAnnotations) SetPath(v string) *UpdateCheckRunRequestAnnotations {
	s.Path = &v
	return s
}

func (s *UpdateCheckRunRequestAnnotations) SetRawDetails(v string) *UpdateCheckRunRequestAnnotations {
	s.RawDetails = &v
	return s
}

func (s *UpdateCheckRunRequestAnnotations) SetStartColumn(v int64) *UpdateCheckRunRequestAnnotations {
	s.StartColumn = &v
	return s
}

func (s *UpdateCheckRunRequestAnnotations) SetStartLine(v int64) *UpdateCheckRunRequestAnnotations {
	s.StartLine = &v
	return s
}

func (s *UpdateCheckRunRequestAnnotations) SetTitle(v string) *UpdateCheckRunRequestAnnotations {
	s.Title = &v
	return s
}

type UpdateCheckRunRequestOutput struct {
	Images []*UpdateCheckRunRequestOutputImages `json:"images,omitempty" xml:"images,omitempty" type:"Repeated"`
	// This parameter is required.
	Summary *string `json:"summary,omitempty" xml:"summary,omitempty"`
	Text    *string `json:"text,omitempty" xml:"text,omitempty"`
	// example:
	//
	// Mighty Readme report
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s UpdateCheckRunRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunRequestOutput) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunRequestOutput) SetImages(v []*UpdateCheckRunRequestOutputImages) *UpdateCheckRunRequestOutput {
	s.Images = v
	return s
}

func (s *UpdateCheckRunRequestOutput) SetSummary(v string) *UpdateCheckRunRequestOutput {
	s.Summary = &v
	return s
}

func (s *UpdateCheckRunRequestOutput) SetText(v string) *UpdateCheckRunRequestOutput {
	s.Text = &v
	return s
}

func (s *UpdateCheckRunRequestOutput) SetTitle(v string) *UpdateCheckRunRequestOutput {
	s.Title = &v
	return s
}

type UpdateCheckRunRequestOutputImages struct {
	// This parameter is required.
	//
	// example:
	//
	// test-image-alt
	Alt *string `json:"alt,omitempty" xml:"alt,omitempty"`
	// example:
	//
	// test
	Caption *string `json:"caption,omitempty" xml:"caption,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	ImageUrl *string `json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

func (s UpdateCheckRunRequestOutputImages) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunRequestOutputImages) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunRequestOutputImages) SetAlt(v string) *UpdateCheckRunRequestOutputImages {
	s.Alt = &v
	return s
}

func (s *UpdateCheckRunRequestOutputImages) SetCaption(v string) *UpdateCheckRunRequestOutputImages {
	s.Caption = &v
	return s
}

func (s *UpdateCheckRunRequestOutputImages) SetImageUrl(v string) *UpdateCheckRunRequestOutputImages {
	s.ImageUrl = &v
	return s
}

type UpdateCheckRunResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdateCheckRunResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateCheckRunResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunResponseBody) SetErrorCode(v string) *UpdateCheckRunResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateCheckRunResponseBody) SetErrorMessage(v string) *UpdateCheckRunResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateCheckRunResponseBody) SetRequestId(v string) *UpdateCheckRunResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCheckRunResponseBody) SetResult(v *UpdateCheckRunResponseBodyResult) *UpdateCheckRunResponseBody {
	s.Result = v
	return s
}

func (s *UpdateCheckRunResponseBody) SetSuccess(v bool) *UpdateCheckRunResponseBody {
	s.Success = &v
	return s
}

type UpdateCheckRunResponseBodyResult struct {
	Annotations []*UpdateCheckRunResponseBodyResultAnnotations `json:"annotations,omitempty" xml:"annotations,omitempty" type:"Repeated"`
	CheckSuite  *UpdateCheckRunResponseBodyResultCheckSuite    `json:"checkSuite,omitempty" xml:"checkSuite,omitempty" type:"Struct"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	CompletedAt *string `json:"completedAt,omitempty" xml:"completedAt,omitempty"`
	// example:
	//
	// success
	Conclusion *string `json:"conclusion,omitempty" xml:"conclusion,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// xxx
	DetailsUrl *string `json:"detailsUrl,omitempty" xml:"detailsUrl,omitempty"`
	// example:
	//
	// 42
	ExternalId *string `json:"externalId,omitempty" xml:"externalId,omitempty"`
	// example:
	//
	// 40f4ccfe019cdd4a62d4acb0c57130106fc7e1be
	HeadSha *string `json:"headSha,omitempty" xml:"headSha,omitempty"`
	// example:
	//
	// 524836
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// my-check-ci
	Name   *string                                 `json:"name,omitempty" xml:"name,omitempty"`
	Output *UpdateCheckRunResponseBodyResultOutput `json:"output,omitempty" xml:"output,omitempty" type:"Struct"`
	// example:
	//
	// 2023-03-15T08:00:00Z
	StartedAt *string `json:"startedAt,omitempty" xml:"startedAt,omitempty"`
	// example:
	//
	// completed
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 2022-01-14T21:08:26+08:00
	UpdatedAt *string                                 `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	Writer    *UpdateCheckRunResponseBodyResultWriter `json:"writer,omitempty" xml:"writer,omitempty" type:"Struct"`
}

func (s UpdateCheckRunResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunResponseBodyResult) SetAnnotations(v []*UpdateCheckRunResponseBodyResultAnnotations) *UpdateCheckRunResponseBodyResult {
	s.Annotations = v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetCheckSuite(v *UpdateCheckRunResponseBodyResultCheckSuite) *UpdateCheckRunResponseBodyResult {
	s.CheckSuite = v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetCompletedAt(v string) *UpdateCheckRunResponseBodyResult {
	s.CompletedAt = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetConclusion(v string) *UpdateCheckRunResponseBodyResult {
	s.Conclusion = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetCreatedAt(v string) *UpdateCheckRunResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetDetailsUrl(v string) *UpdateCheckRunResponseBodyResult {
	s.DetailsUrl = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetExternalId(v string) *UpdateCheckRunResponseBodyResult {
	s.ExternalId = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetHeadSha(v string) *UpdateCheckRunResponseBodyResult {
	s.HeadSha = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetId(v int64) *UpdateCheckRunResponseBodyResult {
	s.Id = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetName(v string) *UpdateCheckRunResponseBodyResult {
	s.Name = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetOutput(v *UpdateCheckRunResponseBodyResultOutput) *UpdateCheckRunResponseBodyResult {
	s.Output = v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetStartedAt(v string) *UpdateCheckRunResponseBodyResult {
	s.StartedAt = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetStatus(v string) *UpdateCheckRunResponseBodyResult {
	s.Status = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetUpdatedAt(v string) *UpdateCheckRunResponseBodyResult {
	s.UpdatedAt = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResult) SetWriter(v *UpdateCheckRunResponseBodyResultWriter) *UpdateCheckRunResponseBodyResult {
	s.Writer = v
	return s
}

type UpdateCheckRunResponseBodyResultAnnotations struct {
	// example:
	//
	// warning
	AnnotationLevel *string `json:"annotationLevel,omitempty" xml:"annotationLevel,omitempty"`
	// example:
	//
	// 5
	EndColumn *int64 `json:"endColumn,omitempty" xml:"endColumn,omitempty"`
	// example:
	//
	// 2
	EndLine *int64 `json:"endLine,omitempty" xml:"endLine,omitempty"`
	// example:
	//
	// 1
	Id      *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// demo/test.txt
	Path       *string `json:"path,omitempty" xml:"path,omitempty"`
	RawDetails *string `json:"rawDetails,omitempty" xml:"rawDetails,omitempty"`
	// example:
	//
	// 3
	StartColumn *int64 `json:"startColumn,omitempty" xml:"startColumn,omitempty"`
	// example:
	//
	// 1
	StartLine *int64  `json:"startLine,omitempty" xml:"startLine,omitempty"`
	Title     *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s UpdateCheckRunResponseBodyResultAnnotations) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunResponseBodyResultAnnotations) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunResponseBodyResultAnnotations) SetAnnotationLevel(v string) *UpdateCheckRunResponseBodyResultAnnotations {
	s.AnnotationLevel = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultAnnotations) SetEndColumn(v int64) *UpdateCheckRunResponseBodyResultAnnotations {
	s.EndColumn = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultAnnotations) SetEndLine(v int64) *UpdateCheckRunResponseBodyResultAnnotations {
	s.EndLine = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultAnnotations) SetId(v int64) *UpdateCheckRunResponseBodyResultAnnotations {
	s.Id = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultAnnotations) SetMessage(v string) *UpdateCheckRunResponseBodyResultAnnotations {
	s.Message = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultAnnotations) SetPath(v string) *UpdateCheckRunResponseBodyResultAnnotations {
	s.Path = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultAnnotations) SetRawDetails(v string) *UpdateCheckRunResponseBodyResultAnnotations {
	s.RawDetails = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultAnnotations) SetStartColumn(v int64) *UpdateCheckRunResponseBodyResultAnnotations {
	s.StartColumn = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultAnnotations) SetStartLine(v int64) *UpdateCheckRunResponseBodyResultAnnotations {
	s.StartLine = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultAnnotations) SetTitle(v string) *UpdateCheckRunResponseBodyResultAnnotations {
	s.Title = &v
	return s
}

type UpdateCheckRunResponseBodyResultCheckSuite struct {
	// example:
	//
	// 1
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
}

func (s UpdateCheckRunResponseBodyResultCheckSuite) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunResponseBodyResultCheckSuite) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunResponseBodyResultCheckSuite) SetId(v int64) *UpdateCheckRunResponseBodyResultCheckSuite {
	s.Id = &v
	return s
}

type UpdateCheckRunResponseBodyResultOutput struct {
	Images  []*UpdateCheckRunResponseBodyResultOutputImages `json:"images,omitempty" xml:"images,omitempty" type:"Repeated"`
	Summary *string                                         `json:"summary,omitempty" xml:"summary,omitempty"`
	Text    *string                                         `json:"text,omitempty" xml:"text,omitempty"`
	// example:
	//
	// Mighty Readme report
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
}

func (s UpdateCheckRunResponseBodyResultOutput) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunResponseBodyResultOutput) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunResponseBodyResultOutput) SetImages(v []*UpdateCheckRunResponseBodyResultOutputImages) *UpdateCheckRunResponseBodyResultOutput {
	s.Images = v
	return s
}

func (s *UpdateCheckRunResponseBodyResultOutput) SetSummary(v string) *UpdateCheckRunResponseBodyResultOutput {
	s.Summary = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultOutput) SetText(v string) *UpdateCheckRunResponseBodyResultOutput {
	s.Text = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultOutput) SetTitle(v string) *UpdateCheckRunResponseBodyResultOutput {
	s.Title = &v
	return s
}

type UpdateCheckRunResponseBodyResultOutputImages struct {
	// example:
	//
	// test-image-alt
	Alt *string `json:"alt,omitempty" xml:"alt,omitempty"`
	// example:
	//
	// test
	Caption *string `json:"caption,omitempty" xml:"caption,omitempty"`
	// example:
	//
	// xxx
	ImageUrl *string `json:"imageUrl,omitempty" xml:"imageUrl,omitempty"`
}

func (s UpdateCheckRunResponseBodyResultOutputImages) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunResponseBodyResultOutputImages) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunResponseBodyResultOutputImages) SetAlt(v string) *UpdateCheckRunResponseBodyResultOutputImages {
	s.Alt = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultOutputImages) SetCaption(v string) *UpdateCheckRunResponseBodyResultOutputImages {
	s.Caption = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultOutputImages) SetImageUrl(v string) *UpdateCheckRunResponseBodyResultOutputImages {
	s.ImageUrl = &v
	return s
}

type UpdateCheckRunResponseBodyResultWriter struct {
	// example:
	//
	// xxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// xxx
	LogoUrl *string `json:"logoUrl,omitempty" xml:"logoUrl,omitempty"`
	// example:
	//
	// test-codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// test-codeup
	Slug *string `json:"slug,omitempty" xml:"slug,omitempty"`
	// example:
	//
	// User
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s UpdateCheckRunResponseBodyResultWriter) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunResponseBodyResultWriter) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunResponseBodyResultWriter) SetId(v string) *UpdateCheckRunResponseBodyResultWriter {
	s.Id = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultWriter) SetLogoUrl(v string) *UpdateCheckRunResponseBodyResultWriter {
	s.LogoUrl = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultWriter) SetName(v string) *UpdateCheckRunResponseBodyResultWriter {
	s.Name = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultWriter) SetSlug(v string) *UpdateCheckRunResponseBodyResultWriter {
	s.Slug = &v
	return s
}

func (s *UpdateCheckRunResponseBodyResultWriter) SetType(v string) *UpdateCheckRunResponseBodyResultWriter {
	s.Type = &v
	return s
}

type UpdateCheckRunResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCheckRunResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCheckRunResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCheckRunResponse) GoString() string {
	return s.String()
}

func (s *UpdateCheckRunResponse) SetHeaders(v map[string]*string) *UpdateCheckRunResponse {
	s.Headers = v
	return s
}

func (s *UpdateCheckRunResponse) SetStatusCode(v int32) *UpdateCheckRunResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCheckRunResponse) SetBody(v *UpdateCheckRunResponseBody) *UpdateCheckRunResponse {
	s.Body = v
	return s
}

type UpdateFileRequest struct {
	// example:
	//
	// 0cf2c8458ac44d9481aab2dd6ec10596v3
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// master
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// This parameter is required.
	CommitMessage *string `json:"commitMessage,omitempty" xml:"commitMessage,omitempty"`
	// This parameter is required.
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// text
	Encoding *string `json:"encoding,omitempty" xml:"encoding,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// src/main/update.txt
	NewPath *string `json:"newPath,omitempty" xml:"newPath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// src/main/update.txt
	OldPath *string `json:"oldPath,omitempty" xml:"oldPath,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdateFileRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileRequest) GoString() string {
	return s.String()
}

func (s *UpdateFileRequest) SetAccessToken(v string) *UpdateFileRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateFileRequest) SetBranchName(v string) *UpdateFileRequest {
	s.BranchName = &v
	return s
}

func (s *UpdateFileRequest) SetCommitMessage(v string) *UpdateFileRequest {
	s.CommitMessage = &v
	return s
}

func (s *UpdateFileRequest) SetContent(v string) *UpdateFileRequest {
	s.Content = &v
	return s
}

func (s *UpdateFileRequest) SetEncoding(v string) *UpdateFileRequest {
	s.Encoding = &v
	return s
}

func (s *UpdateFileRequest) SetNewPath(v string) *UpdateFileRequest {
	s.NewPath = &v
	return s
}

func (s *UpdateFileRequest) SetOldPath(v string) *UpdateFileRequest {
	s.OldPath = &v
	return s
}

func (s *UpdateFileRequest) SetOrganizationId(v string) *UpdateFileRequest {
	s.OrganizationId = &v
	return s
}

type UpdateFileResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// C2F153F6-BB43-50C4-9F4F-40593203E19A
	RequestId *string                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdateFileResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFileResponseBody) SetErrorCode(v string) *UpdateFileResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateFileResponseBody) SetErrorMessage(v string) *UpdateFileResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateFileResponseBody) SetRequestId(v string) *UpdateFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateFileResponseBody) SetResult(v *UpdateFileResponseBodyResult) *UpdateFileResponseBody {
	s.Result = v
	return s
}

func (s *UpdateFileResponseBody) SetSuccess(v bool) *UpdateFileResponseBody {
	s.Success = &v
	return s
}

type UpdateFileResponseBodyResult struct {
	// example:
	//
	// master
	BranchName *string `json:"branchName,omitempty" xml:"branchName,omitempty"`
	// example:
	//
	// src/main/update.txt
	FilePath *string `json:"filePath,omitempty" xml:"filePath,omitempty"`
}

func (s UpdateFileResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateFileResponseBodyResult) SetBranchName(v string) *UpdateFileResponseBodyResult {
	s.BranchName = &v
	return s
}

func (s *UpdateFileResponseBodyResult) SetFilePath(v string) *UpdateFileResponseBodyResult {
	s.FilePath = &v
	return s
}

type UpdateFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateFileResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFileResponse) GoString() string {
	return s.String()
}

func (s *UpdateFileResponse) SetHeaders(v map[string]*string) *UpdateFileResponse {
	s.Headers = v
	return s
}

func (s *UpdateFileResponse) SetStatusCode(v int32) *UpdateFileResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateFileResponse) SetBody(v *UpdateFileResponseBody) *UpdateFileResponse {
	s.Body = v
	return s
}

type UpdateFlowTagRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// #1F9AEF
	Color *string `json:"color,omitempty" xml:"color,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 11
	FlowTagGroupId *int64 `json:"flowTagGroupId,omitempty" xml:"flowTagGroupId,omitempty"`
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s UpdateFlowTagRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowTagRequest) GoString() string {
	return s.String()
}

func (s *UpdateFlowTagRequest) SetColor(v string) *UpdateFlowTagRequest {
	s.Color = &v
	return s
}

func (s *UpdateFlowTagRequest) SetFlowTagGroupId(v int64) *UpdateFlowTagRequest {
	s.FlowTagGroupId = &v
	return s
}

func (s *UpdateFlowTagRequest) SetName(v string) *UpdateFlowTagRequest {
	s.Name = &v
	return s
}

type UpdateFlowTagResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateFlowTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowTagResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFlowTagResponseBody) SetErrorCode(v string) *UpdateFlowTagResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateFlowTagResponseBody) SetErrorMessage(v string) *UpdateFlowTagResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateFlowTagResponseBody) SetRequestId(v string) *UpdateFlowTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateFlowTagResponseBody) SetSuccess(v bool) *UpdateFlowTagResponseBody {
	s.Success = &v
	return s
}

type UpdateFlowTagResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateFlowTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateFlowTagResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowTagResponse) GoString() string {
	return s.String()
}

func (s *UpdateFlowTagResponse) SetHeaders(v map[string]*string) *UpdateFlowTagResponse {
	s.Headers = v
	return s
}

func (s *UpdateFlowTagResponse) SetStatusCode(v int32) *UpdateFlowTagResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateFlowTagResponse) SetBody(v *UpdateFlowTagResponseBody) *UpdateFlowTagResponse {
	s.Body = v
	return s
}

type UpdateFlowTagGroupRequest struct {
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s UpdateFlowTagGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowTagGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateFlowTagGroupRequest) SetName(v string) *UpdateFlowTagGroupRequest {
	s.Name = &v
	return s
}

type UpdateFlowTagGroupResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateFlowTagGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowTagGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFlowTagGroupResponseBody) SetErrorCode(v string) *UpdateFlowTagGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateFlowTagGroupResponseBody) SetErrorMessage(v string) *UpdateFlowTagGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateFlowTagGroupResponseBody) SetRequestId(v string) *UpdateFlowTagGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateFlowTagGroupResponseBody) SetSuccess(v bool) *UpdateFlowTagGroupResponseBody {
	s.Success = &v
	return s
}

type UpdateFlowTagGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateFlowTagGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateFlowTagGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowTagGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateFlowTagGroupResponse) SetHeaders(v map[string]*string) *UpdateFlowTagGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateFlowTagGroupResponse) SetStatusCode(v int32) *UpdateFlowTagGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateFlowTagGroupResponse) SetBody(v *UpdateFlowTagGroupResponseBody) *UpdateFlowTagGroupResponse {
	s.Body = v
	return s
}

type UpdateGroupRequest struct {
	// example:
	//
	// f0b1e61dxxxxxxx975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl   *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// codeup_group
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// codeup_group
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// org/group/subgroup/here
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// 10
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1e9903d8b3f1xxxxxf9286ef5
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdateGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateGroupRequest) SetAccessToken(v string) *UpdateGroupRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateGroupRequest) SetAvatarUrl(v string) *UpdateGroupRequest {
	s.AvatarUrl = &v
	return s
}

func (s *UpdateGroupRequest) SetDescription(v string) *UpdateGroupRequest {
	s.Description = &v
	return s
}

func (s *UpdateGroupRequest) SetName(v string) *UpdateGroupRequest {
	s.Name = &v
	return s
}

func (s *UpdateGroupRequest) SetPath(v string) *UpdateGroupRequest {
	s.Path = &v
	return s
}

func (s *UpdateGroupRequest) SetPathWithNamespace(v string) *UpdateGroupRequest {
	s.PathWithNamespace = &v
	return s
}

func (s *UpdateGroupRequest) SetVisibilityLevel(v int32) *UpdateGroupRequest {
	s.VisibilityLevel = &v
	return s
}

func (s *UpdateGroupRequest) SetOrganizationId(v string) *UpdateGroupRequest {
	s.OrganizationId = &v
	return s
}

type UpdateGroupResponseBody struct {
	// example:
	//
	// success
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// InvalidParam.NoPermission
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdateGroupResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateGroupResponseBody) SetErrorCode(v string) *UpdateGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateGroupResponseBody) SetErrorMessage(v string) *UpdateGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateGroupResponseBody) SetRequestId(v string) *UpdateGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateGroupResponseBody) SetResult(v *UpdateGroupResponseBodyResult) *UpdateGroupResponseBody {
	s.Result = v
	return s
}

func (s *UpdateGroupResponseBody) SetSuccess(v bool) *UpdateGroupResponseBody {
	s.Success = &v
	return s
}

type UpdateGroupResponseBodyResult struct {
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c4ef67f1bea827c4/w/100/h/100
	AvatarUrl   *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 30815
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup
	Name              *string `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	// example:
	//
	// 19230
	OwnerId *int64 `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	// example:
	//
	// 26842
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// test-codeup
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// codeup-test-org/test-codeup
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// Group
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
	// example:
	//
	// 10
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// ""
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s UpdateGroupResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateGroupResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateGroupResponseBodyResult) SetAvatarUrl(v string) *UpdateGroupResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetDescription(v string) *UpdateGroupResponseBodyResult {
	s.Description = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetId(v int64) *UpdateGroupResponseBodyResult {
	s.Id = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetName(v string) *UpdateGroupResponseBodyResult {
	s.Name = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetNameWithNamespace(v string) *UpdateGroupResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetOwnerId(v int64) *UpdateGroupResponseBodyResult {
	s.OwnerId = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetParentId(v int64) *UpdateGroupResponseBodyResult {
	s.ParentId = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetPath(v string) *UpdateGroupResponseBodyResult {
	s.Path = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetPathWithNamespace(v string) *UpdateGroupResponseBodyResult {
	s.PathWithNamespace = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetType(v string) *UpdateGroupResponseBodyResult {
	s.Type = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetVisibilityLevel(v int32) *UpdateGroupResponseBodyResult {
	s.VisibilityLevel = &v
	return s
}

func (s *UpdateGroupResponseBodyResult) SetWebUrl(v string) *UpdateGroupResponseBodyResult {
	s.WebUrl = &v
	return s
}

type UpdateGroupResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateGroupResponse) SetHeaders(v map[string]*string) *UpdateGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateGroupResponse) SetStatusCode(v int32) *UpdateGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateGroupResponse) SetBody(v *UpdateGroupResponseBody) *UpdateGroupResponse {
	s.Body = v
	return s
}

type UpdateGroupMemberRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1789095186553536
	AliyunPk *string `json:"aliyunPk,omitempty" xml:"aliyunPk,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 30
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// USERS
	MemberType *string `json:"memberType,omitempty" xml:"memberType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 632bbfdf419338aaa2b1360a
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdateGroupMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateGroupMemberRequest) GoString() string {
	return s.String()
}

func (s *UpdateGroupMemberRequest) SetAccessToken(v string) *UpdateGroupMemberRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateGroupMemberRequest) SetAliyunPk(v string) *UpdateGroupMemberRequest {
	s.AliyunPk = &v
	return s
}

func (s *UpdateGroupMemberRequest) SetAccessLevel(v int32) *UpdateGroupMemberRequest {
	s.AccessLevel = &v
	return s
}

func (s *UpdateGroupMemberRequest) SetMemberType(v string) *UpdateGroupMemberRequest {
	s.MemberType = &v
	return s
}

func (s *UpdateGroupMemberRequest) SetOrganizationId(v string) *UpdateGroupMemberRequest {
	s.OrganizationId = &v
	return s
}

type UpdateGroupMemberResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdateGroupMemberResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateGroupMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateGroupMemberResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateGroupMemberResponseBody) SetErrorCode(v string) *UpdateGroupMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateGroupMemberResponseBody) SetErrorMessage(v string) *UpdateGroupMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateGroupMemberResponseBody) SetRequestId(v string) *UpdateGroupMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateGroupMemberResponseBody) SetResult(v *UpdateGroupMemberResponseBodyResult) *UpdateGroupMemberResponseBody {
	s.Result = v
	return s
}

func (s *UpdateGroupMemberResponseBody) SetSuccess(v bool) *UpdateGroupMemberResponseBody {
	s.Success = &v
	return s
}

type UpdateGroupMemberResponseBodyResult struct {
	// example:
	//
	// 30
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// username@example.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 24661
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// USERS
	MemberType *string `json:"memberType,omitempty" xml:"memberType,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 223241
	SourceId *int64 `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// active
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// test-codeup
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s UpdateGroupMemberResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateGroupMemberResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateGroupMemberResponseBodyResult) SetAccessLevel(v int32) *UpdateGroupMemberResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *UpdateGroupMemberResponseBodyResult) SetAvatarUrl(v string) *UpdateGroupMemberResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *UpdateGroupMemberResponseBodyResult) SetEmail(v string) *UpdateGroupMemberResponseBodyResult {
	s.Email = &v
	return s
}

func (s *UpdateGroupMemberResponseBodyResult) SetId(v int64) *UpdateGroupMemberResponseBodyResult {
	s.Id = &v
	return s
}

func (s *UpdateGroupMemberResponseBodyResult) SetMemberType(v string) *UpdateGroupMemberResponseBodyResult {
	s.MemberType = &v
	return s
}

func (s *UpdateGroupMemberResponseBodyResult) SetName(v string) *UpdateGroupMemberResponseBodyResult {
	s.Name = &v
	return s
}

func (s *UpdateGroupMemberResponseBodyResult) SetSourceId(v int64) *UpdateGroupMemberResponseBodyResult {
	s.SourceId = &v
	return s
}

func (s *UpdateGroupMemberResponseBodyResult) SetState(v string) *UpdateGroupMemberResponseBodyResult {
	s.State = &v
	return s
}

func (s *UpdateGroupMemberResponseBodyResult) SetUsername(v string) *UpdateGroupMemberResponseBodyResult {
	s.Username = &v
	return s
}

type UpdateGroupMemberResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateGroupMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateGroupMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateGroupMemberResponse) GoString() string {
	return s.String()
}

func (s *UpdateGroupMemberResponse) SetHeaders(v map[string]*string) *UpdateGroupMemberResponse {
	s.Headers = v
	return s
}

func (s *UpdateGroupMemberResponse) SetStatusCode(v int32) *UpdateGroupMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateGroupMemberResponse) SetBody(v *UpdateGroupMemberResponseBody) *UpdateGroupMemberResponse {
	s.Body = v
	return s
}

type UpdateHostGroupRequest struct {
	// example:
	//
	// cn-hangzhou
	AliyunRegion *string `json:"aliyunRegion,omitempty" xml:"aliyunRegion,omitempty"`
	// example:
	//
	// ecs
	EcsLabelKey *string `json:"ecsLabelKey,omitempty" xml:"ecsLabelKey,omitempty"`
	// example:
	//
	// ecs
	EcsLabelValue *string `json:"ecsLabelValue,omitempty" xml:"ecsLabelValue,omitempty"`
	// example:
	//
	// ECS_ALIYUN
	EcsType *string `json:"ecsType,omitempty" xml:"ecsType,omitempty"`
	// example:
	//
	// 0
	EnvId *string `json:"envId,omitempty" xml:"envId,omitempty"`
	// example:
	//
	// [{"aliyunRegionId":"cn-beijing","machineSn":"i-sssssss","instanceName":"ceshi","ip":"120.0.0.0"}]
	MachineInfos *string `json:"machineInfos,omitempty" xml:"machineInfos,omitempty"`
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	ServiceConnectionId *int64 `json:"serviceConnectionId,omitempty" xml:"serviceConnectionId,omitempty"`
	// example:
	//
	// 12,23
	TagIds *string `json:"tagIds,omitempty" xml:"tagIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ECS
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s UpdateHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHostGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateHostGroupRequest) SetAliyunRegion(v string) *UpdateHostGroupRequest {
	s.AliyunRegion = &v
	return s
}

func (s *UpdateHostGroupRequest) SetEcsLabelKey(v string) *UpdateHostGroupRequest {
	s.EcsLabelKey = &v
	return s
}

func (s *UpdateHostGroupRequest) SetEcsLabelValue(v string) *UpdateHostGroupRequest {
	s.EcsLabelValue = &v
	return s
}

func (s *UpdateHostGroupRequest) SetEcsType(v string) *UpdateHostGroupRequest {
	s.EcsType = &v
	return s
}

func (s *UpdateHostGroupRequest) SetEnvId(v string) *UpdateHostGroupRequest {
	s.EnvId = &v
	return s
}

func (s *UpdateHostGroupRequest) SetMachineInfos(v string) *UpdateHostGroupRequest {
	s.MachineInfos = &v
	return s
}

func (s *UpdateHostGroupRequest) SetName(v string) *UpdateHostGroupRequest {
	s.Name = &v
	return s
}

func (s *UpdateHostGroupRequest) SetServiceConnectionId(v int64) *UpdateHostGroupRequest {
	s.ServiceConnectionId = &v
	return s
}

func (s *UpdateHostGroupRequest) SetTagIds(v string) *UpdateHostGroupRequest {
	s.TagIds = &v
	return s
}

func (s *UpdateHostGroupRequest) SetType(v string) *UpdateHostGroupRequest {
	s.Type = &v
	return s
}

type UpdateHostGroupResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHostGroupResponseBody) SetErrorCode(v string) *UpdateHostGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateHostGroupResponseBody) SetErrorMessage(v string) *UpdateHostGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateHostGroupResponseBody) SetRequestId(v string) *UpdateHostGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateHostGroupResponseBody) SetSuccess(v bool) *UpdateHostGroupResponseBody {
	s.Success = &v
	return s
}

type UpdateHostGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHostGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateHostGroupResponse) SetHeaders(v map[string]*string) *UpdateHostGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateHostGroupResponse) SetStatusCode(v int32) *UpdateHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateHostGroupResponse) SetBody(v *UpdateHostGroupResponseBody) *UpdateHostGroupResponse {
	s.Body = v
	return s
}

type UpdateMergeRequestRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	Title       *string `json:"title,omitempty" xml:"title,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdateMergeRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMergeRequestRequest) GoString() string {
	return s.String()
}

func (s *UpdateMergeRequestRequest) SetAccessToken(v string) *UpdateMergeRequestRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateMergeRequestRequest) SetDescription(v string) *UpdateMergeRequestRequest {
	s.Description = &v
	return s
}

func (s *UpdateMergeRequestRequest) SetTitle(v string) *UpdateMergeRequestRequest {
	s.Title = &v
	return s
}

func (s *UpdateMergeRequestRequest) SetOrganizationId(v string) *UpdateMergeRequestRequest {
	s.OrganizationId = &v
	return s
}

type UpdateMergeRequestResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdateMergeRequestResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateMergeRequestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMergeRequestResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMergeRequestResponseBody) SetErrorCode(v string) *UpdateMergeRequestResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateMergeRequestResponseBody) SetErrorMessage(v string) *UpdateMergeRequestResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateMergeRequestResponseBody) SetRequestId(v string) *UpdateMergeRequestResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMergeRequestResponseBody) SetResult(v *UpdateMergeRequestResponseBodyResult) *UpdateMergeRequestResponseBody {
	s.Result = v
	return s
}

func (s *UpdateMergeRequestResponseBody) SetSuccess(v bool) *UpdateMergeRequestResponseBody {
	s.Success = &v
	return s
}

type UpdateMergeRequestResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateMergeRequestResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateMergeRequestResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateMergeRequestResponseBodyResult) SetResult(v bool) *UpdateMergeRequestResponseBodyResult {
	s.Result = &v
	return s
}

type UpdateMergeRequestResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMergeRequestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMergeRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMergeRequestResponse) GoString() string {
	return s.String()
}

func (s *UpdateMergeRequestResponse) SetHeaders(v map[string]*string) *UpdateMergeRequestResponse {
	s.Headers = v
	return s
}

func (s *UpdateMergeRequestResponse) SetStatusCode(v int32) *UpdateMergeRequestResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMergeRequestResponse) SetBody(v *UpdateMergeRequestResponseBody) *UpdateMergeRequestResponse {
	s.Body = v
	return s
}

type UpdateMergeRequestPersonnelRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken   *string   `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	NewUserIdList []*string `json:"newUserIdList,omitempty" xml:"newUserIdList,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdateMergeRequestPersonnelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMergeRequestPersonnelRequest) GoString() string {
	return s.String()
}

func (s *UpdateMergeRequestPersonnelRequest) SetAccessToken(v string) *UpdateMergeRequestPersonnelRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateMergeRequestPersonnelRequest) SetNewUserIdList(v []*string) *UpdateMergeRequestPersonnelRequest {
	s.NewUserIdList = v
	return s
}

func (s *UpdateMergeRequestPersonnelRequest) SetOrganizationId(v string) *UpdateMergeRequestPersonnelRequest {
	s.OrganizationId = &v
	return s
}

type UpdateMergeRequestPersonnelResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 4D6AF7CC-B43B-5454-86AB-023D25E44868
	RequestId *string                                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdateMergeRequestPersonnelResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateMergeRequestPersonnelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMergeRequestPersonnelResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMergeRequestPersonnelResponseBody) SetErrorCode(v string) *UpdateMergeRequestPersonnelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateMergeRequestPersonnelResponseBody) SetErrorMessage(v string) *UpdateMergeRequestPersonnelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateMergeRequestPersonnelResponseBody) SetRequestId(v string) *UpdateMergeRequestPersonnelResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMergeRequestPersonnelResponseBody) SetResult(v *UpdateMergeRequestPersonnelResponseBodyResult) *UpdateMergeRequestPersonnelResponseBody {
	s.Result = v
	return s
}

func (s *UpdateMergeRequestPersonnelResponseBody) SetSuccess(v bool) *UpdateMergeRequestPersonnelResponseBody {
	s.Success = &v
	return s
}

type UpdateMergeRequestPersonnelResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateMergeRequestPersonnelResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateMergeRequestPersonnelResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateMergeRequestPersonnelResponseBodyResult) SetResult(v bool) *UpdateMergeRequestPersonnelResponseBodyResult {
	s.Result = &v
	return s
}

type UpdateMergeRequestPersonnelResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMergeRequestPersonnelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMergeRequestPersonnelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMergeRequestPersonnelResponse) GoString() string {
	return s.String()
}

func (s *UpdateMergeRequestPersonnelResponse) SetHeaders(v map[string]*string) *UpdateMergeRequestPersonnelResponse {
	s.Headers = v
	return s
}

func (s *UpdateMergeRequestPersonnelResponse) SetStatusCode(v int32) *UpdateMergeRequestPersonnelResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMergeRequestPersonnelResponse) SetBody(v *UpdateMergeRequestPersonnelResponseBody) *UpdateMergeRequestPersonnelResponse {
	s.Body = v
	return s
}

type UpdateOrganizationMemberRequest struct {
	// This parameter is required.
	OrganizationMemberName *string `json:"organizationMemberName,omitempty" xml:"organizationMemberName,omitempty"`
}

func (s UpdateOrganizationMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateOrganizationMemberRequest) GoString() string {
	return s.String()
}

func (s *UpdateOrganizationMemberRequest) SetOrganizationMemberName(v string) *UpdateOrganizationMemberRequest {
	s.OrganizationMemberName = &v
	return s
}

type UpdateOrganizationMemberResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string                                     `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Member       *UpdateOrganizationMemberResponseBodyMember `json:"member,omitempty" xml:"member,omitempty" type:"Struct"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateOrganizationMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateOrganizationMemberResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateOrganizationMemberResponseBody) SetErrorCode(v string) *UpdateOrganizationMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateOrganizationMemberResponseBody) SetErrorMessage(v string) *UpdateOrganizationMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateOrganizationMemberResponseBody) SetMember(v *UpdateOrganizationMemberResponseBodyMember) *UpdateOrganizationMemberResponseBody {
	s.Member = v
	return s
}

func (s *UpdateOrganizationMemberResponseBody) SetRequestId(v string) *UpdateOrganizationMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateOrganizationMemberResponseBody) SetSuccess(v bool) *UpdateOrganizationMemberResponseBody {
	s.Success = &v
	return s
}

type UpdateOrganizationMemberResponseBodyMember struct {
	// example:
	//
	// 292035769476261xxx
	AccountId              *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	OrganizationMemberName *string `json:"organizationMemberName,omitempty" xml:"organizationMemberName,omitempty"`
}

func (s UpdateOrganizationMemberResponseBodyMember) String() string {
	return tea.Prettify(s)
}

func (s UpdateOrganizationMemberResponseBodyMember) GoString() string {
	return s.String()
}

func (s *UpdateOrganizationMemberResponseBodyMember) SetAccountId(v string) *UpdateOrganizationMemberResponseBodyMember {
	s.AccountId = &v
	return s
}

func (s *UpdateOrganizationMemberResponseBodyMember) SetOrganizationMemberName(v string) *UpdateOrganizationMemberResponseBodyMember {
	s.OrganizationMemberName = &v
	return s
}

type UpdateOrganizationMemberResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateOrganizationMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateOrganizationMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateOrganizationMemberResponse) GoString() string {
	return s.String()
}

func (s *UpdateOrganizationMemberResponse) SetHeaders(v map[string]*string) *UpdateOrganizationMemberResponse {
	s.Headers = v
	return s
}

func (s *UpdateOrganizationMemberResponse) SetStatusCode(v int32) *UpdateOrganizationMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateOrganizationMemberResponse) SetBody(v *UpdateOrganizationMemberResponseBody) *UpdateOrganizationMemberResponse {
	s.Body = v
	return s
}

type UpdatePipelineRequest struct {
	// This parameter is required.
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 111xxx
	PipelineId *string `json:"pipelineId,omitempty" xml:"pipelineId,omitempty"`
}

func (s UpdatePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdatePipelineRequest) SetContent(v string) *UpdatePipelineRequest {
	s.Content = &v
	return s
}

func (s *UpdatePipelineRequest) SetName(v string) *UpdatePipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdatePipelineRequest) SetPipelineId(v string) *UpdatePipelineRequest {
	s.PipelineId = &v
	return s
}

type UpdatePipelineResponseBody struct {
	ErrorCode    *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdatePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponseBody) SetErrorCode(v string) *UpdatePipelineResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdatePipelineResponseBody) SetErrorMessage(v string) *UpdatePipelineResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdatePipelineResponseBody) SetRequestId(v string) *UpdatePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePipelineResponseBody) SetSuccess(v bool) *UpdatePipelineResponseBody {
	s.Success = &v
	return s
}

type UpdatePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponse) SetHeaders(v map[string]*string) *UpdatePipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdatePipelineResponse) SetStatusCode(v int32) *UpdatePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePipelineResponse) SetBody(v *UpdatePipelineResponseBody) *UpdatePipelineResponse {
	s.Body = v
	return s
}

type UpdatePipelineBaseInfoRequest struct {
	// example:
	//
	// 0
	EnvId *int64 `json:"envId,omitempty" xml:"envId,omitempty"`
	// This parameter is required.
	PipelineName *string `json:"pipelineName,omitempty" xml:"pipelineName,omitempty"`
	// example:
	//
	// "11,222,33"
	TagList *string `json:"tagList,omitempty" xml:"tagList,omitempty"`
}

func (s UpdatePipelineBaseInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineBaseInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdatePipelineBaseInfoRequest) SetEnvId(v int64) *UpdatePipelineBaseInfoRequest {
	s.EnvId = &v
	return s
}

func (s *UpdatePipelineBaseInfoRequest) SetPipelineName(v string) *UpdatePipelineBaseInfoRequest {
	s.PipelineName = &v
	return s
}

func (s *UpdatePipelineBaseInfoRequest) SetTagList(v string) *UpdatePipelineBaseInfoRequest {
	s.TagList = &v
	return s
}

type UpdatePipelineBaseInfoResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true 接口调用成功，false 接口调用失败
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdatePipelineBaseInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineBaseInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePipelineBaseInfoResponseBody) SetErrorCode(v string) *UpdatePipelineBaseInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdatePipelineBaseInfoResponseBody) SetErrorMessage(v string) *UpdatePipelineBaseInfoResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdatePipelineBaseInfoResponseBody) SetRequestId(v string) *UpdatePipelineBaseInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePipelineBaseInfoResponseBody) SetSuccess(v bool) *UpdatePipelineBaseInfoResponseBody {
	s.Success = &v
	return s
}

type UpdatePipelineBaseInfoResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePipelineBaseInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePipelineBaseInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineBaseInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdatePipelineBaseInfoResponse) SetHeaders(v map[string]*string) *UpdatePipelineBaseInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdatePipelineBaseInfoResponse) SetStatusCode(v int32) *UpdatePipelineBaseInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePipelineBaseInfoResponse) SetBody(v *UpdatePipelineBaseInfoResponseBody) *UpdatePipelineBaseInfoResponse {
	s.Body = v
	return s
}

type UpdatePipelineGroupRequest struct {
	// This parameter is required.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s UpdatePipelineGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdatePipelineGroupRequest) SetName(v string) *UpdatePipelineGroupRequest {
	s.Name = &v
	return s
}

type UpdatePipelineGroupResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdatePipelineGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePipelineGroupResponseBody) SetErrorCode(v string) *UpdatePipelineGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdatePipelineGroupResponseBody) SetErrorMessage(v string) *UpdatePipelineGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdatePipelineGroupResponseBody) SetRequestId(v string) *UpdatePipelineGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePipelineGroupResponseBody) SetSuccess(v bool) *UpdatePipelineGroupResponseBody {
	s.Success = &v
	return s
}

type UpdatePipelineGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePipelineGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePipelineGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdatePipelineGroupResponse) SetHeaders(v map[string]*string) *UpdatePipelineGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdatePipelineGroupResponse) SetStatusCode(v int32) *UpdatePipelineGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePipelineGroupResponse) SetBody(v *UpdatePipelineGroupResponseBody) *UpdatePipelineGroupResponse {
	s.Body = v
	return s
}

type UpdateProjectFieldRequest struct {
	// example:
	//
	// fdsaadsfasxxxxdddd
	StatusIdentifier            *string                                                 `json:"statusIdentifier,omitempty" xml:"statusIdentifier,omitempty"`
	UpdateBasicFieldRequestList []*UpdateProjectFieldRequestUpdateBasicFieldRequestList `json:"updateBasicFieldRequestList,omitempty" xml:"updateBasicFieldRequestList,omitempty" type:"Repeated"`
	UpdateForOpenApiList        []*UpdateProjectFieldRequestUpdateForOpenApiList        `json:"updateForOpenApiList,omitempty" xml:"updateForOpenApiList,omitempty" type:"Repeated"`
}

func (s UpdateProjectFieldRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectFieldRequest) GoString() string {
	return s.String()
}

func (s *UpdateProjectFieldRequest) SetStatusIdentifier(v string) *UpdateProjectFieldRequest {
	s.StatusIdentifier = &v
	return s
}

func (s *UpdateProjectFieldRequest) SetUpdateBasicFieldRequestList(v []*UpdateProjectFieldRequestUpdateBasicFieldRequestList) *UpdateProjectFieldRequest {
	s.UpdateBasicFieldRequestList = v
	return s
}

func (s *UpdateProjectFieldRequest) SetUpdateForOpenApiList(v []*UpdateProjectFieldRequestUpdateForOpenApiList) *UpdateProjectFieldRequest {
	s.UpdateForOpenApiList = v
	return s
}

type UpdateProjectFieldRequestUpdateBasicFieldRequestList struct {
	// example:
	//
	// name
	PropertyKey   *string `json:"propertyKey,omitempty" xml:"propertyKey,omitempty"`
	PropertyValue *string `json:"propertyValue,omitempty" xml:"propertyValue,omitempty"`
}

func (s UpdateProjectFieldRequestUpdateBasicFieldRequestList) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectFieldRequestUpdateBasicFieldRequestList) GoString() string {
	return s.String()
}

func (s *UpdateProjectFieldRequestUpdateBasicFieldRequestList) SetPropertyKey(v string) *UpdateProjectFieldRequestUpdateBasicFieldRequestList {
	s.PropertyKey = &v
	return s
}

func (s *UpdateProjectFieldRequestUpdateBasicFieldRequestList) SetPropertyValue(v string) *UpdateProjectFieldRequestUpdateBasicFieldRequestList {
	s.PropertyValue = &v
	return s
}

type UpdateProjectFieldRequestUpdateForOpenApiList struct {
	// example:
	//
	// c4fd21xxxxxxxx9oj8jk
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	Value           *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s UpdateProjectFieldRequestUpdateForOpenApiList) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectFieldRequestUpdateForOpenApiList) GoString() string {
	return s.String()
}

func (s *UpdateProjectFieldRequestUpdateForOpenApiList) SetFieldIdentifier(v string) *UpdateProjectFieldRequestUpdateForOpenApiList {
	s.FieldIdentifier = &v
	return s
}

func (s *UpdateProjectFieldRequestUpdateForOpenApiList) SetValue(v string) *UpdateProjectFieldRequestUpdateForOpenApiList {
	s.Value = &v
	return s
}

type UpdateProjectFieldResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// errormessage
	ErrorMessage *string                                `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	Project      *UpdateProjectFieldResponseBodyProject `json:"project,omitempty" xml:"project,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// true/false
	//
	// example:
	//
	// True
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateProjectFieldResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectFieldResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProjectFieldResponseBody) SetErrorCode(v string) *UpdateProjectFieldResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateProjectFieldResponseBody) SetErrorMessage(v string) *UpdateProjectFieldResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateProjectFieldResponseBody) SetProject(v *UpdateProjectFieldResponseBodyProject) *UpdateProjectFieldResponseBody {
	s.Project = v
	return s
}

func (s *UpdateProjectFieldResponseBody) SetRequestId(v string) *UpdateProjectFieldResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateProjectFieldResponseBody) SetSuccess(v bool) *UpdateProjectFieldResponseBody {
	s.Success = &v
	return s
}

type UpdateProjectFieldResponseBodyProject struct {
	// example:
	//
	// Project
	Category *string `json:"category,omitempty" xml:"category,omitempty"`
	// example:
	//
	// Project
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// OJAY
	CustomCode  *string                                           `json:"customCode,omitempty" xml:"customCode,omitempty"`
	Description *string                                           `json:"description,omitempty" xml:"description,omitempty"`
	FieldList   []*UpdateProjectFieldResponseBodyProjectFieldList `json:"fieldList,omitempty" xml:"fieldList,omitempty" type:"Repeated"`
	// example:
	//
	// 1623916393000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1684134690000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// https://xxxxxx.png
	Icon *string `json:"icon,omitempty" xml:"icon,omitempty"`
	// example:
	//
	// https://xxxxxx.png
	IconBig *string `json:"iconBig,omitempty" xml:"iconBig,omitempty"`
	// example:
	//
	// {"small":"https://xxxxxx.png","big":"https://img.yyyyyy.png"}
	IconGroup *string `json:"iconGroup,omitempty" xml:"iconGroup,omitempty"`
	// example:
	//
	// https://img.yyyyyy.png
	IconSmall *string `json:"iconSmall,omitempty" xml:"iconSmall,omitempty"`
	// example:
	//
	// 66893
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 1e2ea73d24652d5874d001b351
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// e8b2xxxxxx2abdxxxxxxxx23
	IdentifierPath *string `json:"identifierPath,omitempty" xml:"identifierPath,omitempty"`
	// example:
	//
	// NORMAL
	LogicalStatus *string `json:"logicalStatus,omitempty" xml:"logicalStatus,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	Name     *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 5e70xxxxxxcd000xxxxe96
	OrganizationIdentifier *string `json:"organizationIdentifier,omitempty" xml:"organizationIdentifier,omitempty"`
	// example:
	//
	// null
	ParentIdentifier *string `json:"parentIdentifier,omitempty" xml:"parentIdentifier,omitempty"`
	// example:
	//
	// public
	Scope *string `json:"scope,omitempty" xml:"scope,omitempty"`
	// example:
	//
	// 8a40xxxxxxxxxxxxx64
	StatusIdentifier *string `json:"statusIdentifier,omitempty" xml:"statusIdentifier,omitempty"`
	StatusName       *string `json:"statusName,omitempty" xml:"statusName,omitempty"`
	// example:
	//
	// 8a4058a71159b68254......
	StatusStageIdentifier *string `json:"statusStageIdentifier,omitempty" xml:"statusStageIdentifier,omitempty"`
	// example:
	//
	// null
	SubType *string `json:"subType,omitempty" xml:"subType,omitempty"`
	// example:
	//
	// CustomProject
	TypeIdentifier *string `json:"typeIdentifier,omitempty" xml:"typeIdentifier,omitempty"`
}

func (s UpdateProjectFieldResponseBodyProject) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectFieldResponseBodyProject) GoString() string {
	return s.String()
}

func (s *UpdateProjectFieldResponseBodyProject) SetCategory(v string) *UpdateProjectFieldResponseBodyProject {
	s.Category = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetCategoryIdentifier(v string) *UpdateProjectFieldResponseBodyProject {
	s.CategoryIdentifier = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetCreator(v string) *UpdateProjectFieldResponseBodyProject {
	s.Creator = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetCustomCode(v string) *UpdateProjectFieldResponseBodyProject {
	s.CustomCode = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetDescription(v string) *UpdateProjectFieldResponseBodyProject {
	s.Description = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetFieldList(v []*UpdateProjectFieldResponseBodyProjectFieldList) *UpdateProjectFieldResponseBodyProject {
	s.FieldList = v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetGmtCreate(v int64) *UpdateProjectFieldResponseBodyProject {
	s.GmtCreate = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetGmtModified(v int64) *UpdateProjectFieldResponseBodyProject {
	s.GmtModified = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetIcon(v string) *UpdateProjectFieldResponseBodyProject {
	s.Icon = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetIconBig(v string) *UpdateProjectFieldResponseBodyProject {
	s.IconBig = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetIconGroup(v string) *UpdateProjectFieldResponseBodyProject {
	s.IconGroup = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetIconSmall(v string) *UpdateProjectFieldResponseBodyProject {
	s.IconSmall = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetId(v string) *UpdateProjectFieldResponseBodyProject {
	s.Id = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetIdentifier(v string) *UpdateProjectFieldResponseBodyProject {
	s.Identifier = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetIdentifierPath(v string) *UpdateProjectFieldResponseBodyProject {
	s.IdentifierPath = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetLogicalStatus(v string) *UpdateProjectFieldResponseBodyProject {
	s.LogicalStatus = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetModifier(v string) *UpdateProjectFieldResponseBodyProject {
	s.Modifier = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetName(v string) *UpdateProjectFieldResponseBodyProject {
	s.Name = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetOrganizationIdentifier(v string) *UpdateProjectFieldResponseBodyProject {
	s.OrganizationIdentifier = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetParentIdentifier(v string) *UpdateProjectFieldResponseBodyProject {
	s.ParentIdentifier = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetScope(v string) *UpdateProjectFieldResponseBodyProject {
	s.Scope = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetStatusIdentifier(v string) *UpdateProjectFieldResponseBodyProject {
	s.StatusIdentifier = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetStatusName(v string) *UpdateProjectFieldResponseBodyProject {
	s.StatusName = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetStatusStageIdentifier(v string) *UpdateProjectFieldResponseBodyProject {
	s.StatusStageIdentifier = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetSubType(v string) *UpdateProjectFieldResponseBodyProject {
	s.SubType = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProject) SetTypeIdentifier(v string) *UpdateProjectFieldResponseBodyProject {
	s.TypeIdentifier = &v
	return s
}

type UpdateProjectFieldResponseBodyProjectFieldList struct {
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	// example:
	//
	// b787ff504c0b36f8b71d15a4fd
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// ace3wxxxxxxx7rff3ee
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
	// example:
	//
	// user
	ValueType *string `json:"valueType,omitempty" xml:"valueType,omitempty"`
}

func (s UpdateProjectFieldResponseBodyProjectFieldList) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectFieldResponseBodyProjectFieldList) GoString() string {
	return s.String()
}

func (s *UpdateProjectFieldResponseBodyProjectFieldList) SetDisplayName(v string) *UpdateProjectFieldResponseBodyProjectFieldList {
	s.DisplayName = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProjectFieldList) SetIdentifier(v string) *UpdateProjectFieldResponseBodyProjectFieldList {
	s.Identifier = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProjectFieldList) SetValue(v string) *UpdateProjectFieldResponseBodyProjectFieldList {
	s.Value = &v
	return s
}

func (s *UpdateProjectFieldResponseBodyProjectFieldList) SetValueType(v string) *UpdateProjectFieldResponseBodyProjectFieldList {
	s.ValueType = &v
	return s
}

type UpdateProjectFieldResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateProjectFieldResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateProjectFieldResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectFieldResponse) GoString() string {
	return s.String()
}

func (s *UpdateProjectFieldResponse) SetHeaders(v map[string]*string) *UpdateProjectFieldResponse {
	s.Headers = v
	return s
}

func (s *UpdateProjectFieldResponse) SetStatusCode(v int32) *UpdateProjectFieldResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateProjectFieldResponse) SetBody(v *UpdateProjectFieldResponseBody) *UpdateProjectFieldResponse {
	s.Body = v
	return s
}

type UpdateProjectLabelRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// #EF433B
	Color       *string `json:"color,omitempty" xml:"color,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	RepositoryIdentity *string `json:"repositoryIdentity,omitempty" xml:"repositoryIdentity,omitempty"`
}

func (s UpdateProjectLabelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectLabelRequest) GoString() string {
	return s.String()
}

func (s *UpdateProjectLabelRequest) SetAccessToken(v string) *UpdateProjectLabelRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateProjectLabelRequest) SetColor(v string) *UpdateProjectLabelRequest {
	s.Color = &v
	return s
}

func (s *UpdateProjectLabelRequest) SetDescription(v string) *UpdateProjectLabelRequest {
	s.Description = &v
	return s
}

func (s *UpdateProjectLabelRequest) SetName(v string) *UpdateProjectLabelRequest {
	s.Name = &v
	return s
}

func (s *UpdateProjectLabelRequest) SetOrganizationId(v string) *UpdateProjectLabelRequest {
	s.OrganizationId = &v
	return s
}

func (s *UpdateProjectLabelRequest) SetRepositoryIdentity(v string) *UpdateProjectLabelRequest {
	s.RepositoryIdentity = &v
	return s
}

type UpdateProjectLabelResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdateProjectLabelResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateProjectLabelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectLabelResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProjectLabelResponseBody) SetErrorCode(v string) *UpdateProjectLabelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateProjectLabelResponseBody) SetErrorMessage(v string) *UpdateProjectLabelResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateProjectLabelResponseBody) SetRequestId(v string) *UpdateProjectLabelResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateProjectLabelResponseBody) SetResult(v *UpdateProjectLabelResponseBodyResult) *UpdateProjectLabelResponseBody {
	s.Result = v
	return s
}

func (s *UpdateProjectLabelResponseBody) SetSuccess(v bool) *UpdateProjectLabelResponseBody {
	s.Success = &v
	return s
}

type UpdateProjectLabelResponseBodyResult struct {
	// example:
	//
	// #EF433B
	Color       *string `json:"color,omitempty" xml:"color,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 8d84d73cf315473683400760f02dbfc1
	Id   *string `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s UpdateProjectLabelResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectLabelResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateProjectLabelResponseBodyResult) SetColor(v string) *UpdateProjectLabelResponseBodyResult {
	s.Color = &v
	return s
}

func (s *UpdateProjectLabelResponseBodyResult) SetDescription(v string) *UpdateProjectLabelResponseBodyResult {
	s.Description = &v
	return s
}

func (s *UpdateProjectLabelResponseBodyResult) SetId(v string) *UpdateProjectLabelResponseBodyResult {
	s.Id = &v
	return s
}

func (s *UpdateProjectLabelResponseBodyResult) SetName(v string) *UpdateProjectLabelResponseBodyResult {
	s.Name = &v
	return s
}

type UpdateProjectLabelResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateProjectLabelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateProjectLabelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectLabelResponse) GoString() string {
	return s.String()
}

func (s *UpdateProjectLabelResponse) SetHeaders(v map[string]*string) *UpdateProjectLabelResponse {
	s.Headers = v
	return s
}

func (s *UpdateProjectLabelResponse) SetStatusCode(v int32) *UpdateProjectLabelResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateProjectLabelResponse) SetBody(v *UpdateProjectLabelResponseBody) *UpdateProjectLabelResponse {
	s.Body = v
	return s
}

type UpdateProjectMemberRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// project.admin
	RoleIdentifier *string `json:"roleIdentifier,omitempty" xml:"roleIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5e70xxxxxxcd000xxxxe96
	TargetIdentifier *string `json:"targetIdentifier,omitempty" xml:"targetIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Space
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 19xx7043xxxxxxx914
	UserIdentifier *string `json:"userIdentifier,omitempty" xml:"userIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// user
	UserType *string `json:"userType,omitempty" xml:"userType,omitempty"`
}

func (s UpdateProjectMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectMemberRequest) GoString() string {
	return s.String()
}

func (s *UpdateProjectMemberRequest) SetRoleIdentifier(v string) *UpdateProjectMemberRequest {
	s.RoleIdentifier = &v
	return s
}

func (s *UpdateProjectMemberRequest) SetTargetIdentifier(v string) *UpdateProjectMemberRequest {
	s.TargetIdentifier = &v
	return s
}

func (s *UpdateProjectMemberRequest) SetTargetType(v string) *UpdateProjectMemberRequest {
	s.TargetType = &v
	return s
}

func (s *UpdateProjectMemberRequest) SetUserIdentifier(v string) *UpdateProjectMemberRequest {
	s.UserIdentifier = &v
	return s
}

func (s *UpdateProjectMemberRequest) SetUserType(v string) *UpdateProjectMemberRequest {
	s.UserType = &v
	return s
}

type UpdateProjectMemberResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string                                `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	Member   *UpdateProjectMemberResponseBodyMember `json:"member,omitempty" xml:"member,omitempty" type:"Struct"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateProjectMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectMemberResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProjectMemberResponseBody) SetErrorCode(v string) *UpdateProjectMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateProjectMemberResponseBody) SetErrorMsg(v string) *UpdateProjectMemberResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *UpdateProjectMemberResponseBody) SetMember(v *UpdateProjectMemberResponseBodyMember) *UpdateProjectMemberResponseBody {
	s.Member = v
	return s
}

func (s *UpdateProjectMemberResponseBody) SetRequestId(v string) *UpdateProjectMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateProjectMemberResponseBody) SetSuccess(v bool) *UpdateProjectMemberResponseBody {
	s.Success = &v
	return s
}

type UpdateProjectMemberResponseBodyMember struct {
	// example:
	//
	// 1623916393000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1623916393000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// 1124382
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// project.admin
	RoleIdentifier *string `json:"roleIdentifier,omitempty" xml:"roleIdentifier,omitempty"`
	// example:
	//
	// 5e70xxxxxxcd000xxxxe96
	TargetIdentifier *string `json:"targetIdentifier,omitempty" xml:"targetIdentifier,omitempty"`
	// example:
	//
	// Space
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	UserIdentifier *string `json:"userIdentifier,omitempty" xml:"userIdentifier,omitempty"`
	// example:
	//
	// user
	UserType *string `json:"userType,omitempty" xml:"userType,omitempty"`
}

func (s UpdateProjectMemberResponseBodyMember) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectMemberResponseBodyMember) GoString() string {
	return s.String()
}

func (s *UpdateProjectMemberResponseBodyMember) SetGmtCreate(v int64) *UpdateProjectMemberResponseBodyMember {
	s.GmtCreate = &v
	return s
}

func (s *UpdateProjectMemberResponseBodyMember) SetGmtModified(v int64) *UpdateProjectMemberResponseBodyMember {
	s.GmtModified = &v
	return s
}

func (s *UpdateProjectMemberResponseBodyMember) SetId(v string) *UpdateProjectMemberResponseBodyMember {
	s.Id = &v
	return s
}

func (s *UpdateProjectMemberResponseBodyMember) SetRoleIdentifier(v string) *UpdateProjectMemberResponseBodyMember {
	s.RoleIdentifier = &v
	return s
}

func (s *UpdateProjectMemberResponseBodyMember) SetTargetIdentifier(v string) *UpdateProjectMemberResponseBodyMember {
	s.TargetIdentifier = &v
	return s
}

func (s *UpdateProjectMemberResponseBodyMember) SetTargetType(v string) *UpdateProjectMemberResponseBodyMember {
	s.TargetType = &v
	return s
}

func (s *UpdateProjectMemberResponseBodyMember) SetUserIdentifier(v string) *UpdateProjectMemberResponseBodyMember {
	s.UserIdentifier = &v
	return s
}

func (s *UpdateProjectMemberResponseBodyMember) SetUserType(v string) *UpdateProjectMemberResponseBodyMember {
	s.UserType = &v
	return s
}

type UpdateProjectMemberResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateProjectMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateProjectMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProjectMemberResponse) GoString() string {
	return s.String()
}

func (s *UpdateProjectMemberResponse) SetHeaders(v map[string]*string) *UpdateProjectMemberResponse {
	s.Headers = v
	return s
}

func (s *UpdateProjectMemberResponse) SetStatusCode(v int32) *UpdateProjectMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateProjectMemberResponse) SetBody(v *UpdateProjectMemberResponseBody) *UpdateProjectMemberResponse {
	s.Body = v
	return s
}

type UpdateProtectedBranchesRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken       *string   `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	AllowMergeRoles   []*int32  `json:"allowMergeRoles,omitempty" xml:"allowMergeRoles,omitempty" type:"Repeated"`
	AllowMergeUserIds []*string `json:"allowMergeUserIds,omitempty" xml:"allowMergeUserIds,omitempty" type:"Repeated"`
	AllowPushRoles    []*int32  `json:"allowPushRoles,omitempty" xml:"allowPushRoles,omitempty" type:"Repeated"`
	AllowPushUserIds  []*string `json:"allowPushUserIds,omitempty" xml:"allowPushUserIds,omitempty" type:"Repeated"`
	// example:
	//
	// master
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// 19224
	Id                  *int64                                             `json:"id,omitempty" xml:"id,omitempty"`
	MergeRequestSetting *UpdateProtectedBranchesRequestMergeRequestSetting `json:"mergeRequestSetting,omitempty" xml:"mergeRequestSetting,omitempty" type:"Struct"`
	TestSettingDTO      *UpdateProtectedBranchesRequestTestSettingDTO      `json:"testSettingDTO,omitempty" xml:"testSettingDTO,omitempty" type:"Struct"`
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdateProtectedBranchesRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesRequest) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesRequest) SetAccessToken(v string) *UpdateProtectedBranchesRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateProtectedBranchesRequest) SetAllowMergeRoles(v []*int32) *UpdateProtectedBranchesRequest {
	s.AllowMergeRoles = v
	return s
}

func (s *UpdateProtectedBranchesRequest) SetAllowMergeUserIds(v []*string) *UpdateProtectedBranchesRequest {
	s.AllowMergeUserIds = v
	return s
}

func (s *UpdateProtectedBranchesRequest) SetAllowPushRoles(v []*int32) *UpdateProtectedBranchesRequest {
	s.AllowPushRoles = v
	return s
}

func (s *UpdateProtectedBranchesRequest) SetAllowPushUserIds(v []*string) *UpdateProtectedBranchesRequest {
	s.AllowPushUserIds = v
	return s
}

func (s *UpdateProtectedBranchesRequest) SetBranch(v string) *UpdateProtectedBranchesRequest {
	s.Branch = &v
	return s
}

func (s *UpdateProtectedBranchesRequest) SetId(v int64) *UpdateProtectedBranchesRequest {
	s.Id = &v
	return s
}

func (s *UpdateProtectedBranchesRequest) SetMergeRequestSetting(v *UpdateProtectedBranchesRequestMergeRequestSetting) *UpdateProtectedBranchesRequest {
	s.MergeRequestSetting = v
	return s
}

func (s *UpdateProtectedBranchesRequest) SetTestSettingDTO(v *UpdateProtectedBranchesRequestTestSettingDTO) *UpdateProtectedBranchesRequest {
	s.TestSettingDTO = v
	return s
}

func (s *UpdateProtectedBranchesRequest) SetOrganizationId(v string) *UpdateProtectedBranchesRequest {
	s.OrganizationId = &v
	return s
}

type UpdateProtectedBranchesRequestMergeRequestSetting struct {
	AllowMergeRequestRoles []*int32  `json:"allowMergeRequestRoles,omitempty" xml:"allowMergeRequestRoles,omitempty" type:"Repeated"`
	DefaultAssignees       []*string `json:"defaultAssignees,omitempty" xml:"defaultAssignees,omitempty" type:"Repeated"`
	// example:
	//
	// true
	IsAllowSelfApproval *bool `json:"isAllowSelfApproval,omitempty" xml:"isAllowSelfApproval,omitempty"`
	// example:
	//
	// true
	IsRequireDiscussionProcessed *bool `json:"isRequireDiscussionProcessed,omitempty" xml:"isRequireDiscussionProcessed,omitempty"`
	// example:
	//
	// true
	IsRequired *bool `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	// example:
	//
	// false
	IsResetApprovalWhenNewPush *bool `json:"isResetApprovalWhenNewPush,omitempty" xml:"isResetApprovalWhenNewPush,omitempty"`
	// example:
	//
	// 1
	MinimumApproval *int32 `json:"minimumApproval,omitempty" xml:"minimumApproval,omitempty"`
	// example:
	//
	// general
	MrMode *string `json:"mrMode,omitempty" xml:"mrMode,omitempty"`
	// example:
	//
	// **.java
	WhiteList *string `json:"whiteList,omitempty" xml:"whiteList,omitempty"`
}

func (s UpdateProtectedBranchesRequestMergeRequestSetting) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesRequestMergeRequestSetting) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesRequestMergeRequestSetting) SetAllowMergeRequestRoles(v []*int32) *UpdateProtectedBranchesRequestMergeRequestSetting {
	s.AllowMergeRequestRoles = v
	return s
}

func (s *UpdateProtectedBranchesRequestMergeRequestSetting) SetDefaultAssignees(v []*string) *UpdateProtectedBranchesRequestMergeRequestSetting {
	s.DefaultAssignees = v
	return s
}

func (s *UpdateProtectedBranchesRequestMergeRequestSetting) SetIsAllowSelfApproval(v bool) *UpdateProtectedBranchesRequestMergeRequestSetting {
	s.IsAllowSelfApproval = &v
	return s
}

func (s *UpdateProtectedBranchesRequestMergeRequestSetting) SetIsRequireDiscussionProcessed(v bool) *UpdateProtectedBranchesRequestMergeRequestSetting {
	s.IsRequireDiscussionProcessed = &v
	return s
}

func (s *UpdateProtectedBranchesRequestMergeRequestSetting) SetIsRequired(v bool) *UpdateProtectedBranchesRequestMergeRequestSetting {
	s.IsRequired = &v
	return s
}

func (s *UpdateProtectedBranchesRequestMergeRequestSetting) SetIsResetApprovalWhenNewPush(v bool) *UpdateProtectedBranchesRequestMergeRequestSetting {
	s.IsResetApprovalWhenNewPush = &v
	return s
}

func (s *UpdateProtectedBranchesRequestMergeRequestSetting) SetMinimumApproval(v int32) *UpdateProtectedBranchesRequestMergeRequestSetting {
	s.MinimumApproval = &v
	return s
}

func (s *UpdateProtectedBranchesRequestMergeRequestSetting) SetMrMode(v string) *UpdateProtectedBranchesRequestMergeRequestSetting {
	s.MrMode = &v
	return s
}

func (s *UpdateProtectedBranchesRequestMergeRequestSetting) SetWhiteList(v string) *UpdateProtectedBranchesRequestMergeRequestSetting {
	s.WhiteList = &v
	return s
}

type UpdateProtectedBranchesRequestTestSettingDTO struct {
	CheckConfig             *UpdateProtectedBranchesRequestTestSettingDTOCheckConfig             `json:"checkConfig,omitempty" xml:"checkConfig,omitempty" type:"Struct"`
	CheckTaskQualityConfig  *UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig  `json:"checkTaskQualityConfig,omitempty" xml:"checkTaskQualityConfig,omitempty" type:"Struct"`
	CodeGuidelinesDetection *UpdateProtectedBranchesRequestTestSettingDTOCodeGuidelinesDetection `json:"codeGuidelinesDetection,omitempty" xml:"codeGuidelinesDetection,omitempty" type:"Struct"`
	// example:
	//
	// false
	IsRequired             *bool                                                               `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	SensitiveInfoDetection *UpdateProtectedBranchesRequestTestSettingDTOSensitiveInfoDetection `json:"sensitiveInfoDetection,omitempty" xml:"sensitiveInfoDetection,omitempty" type:"Struct"`
}

func (s UpdateProtectedBranchesRequestTestSettingDTO) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesRequestTestSettingDTO) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesRequestTestSettingDTO) SetCheckConfig(v *UpdateProtectedBranchesRequestTestSettingDTOCheckConfig) *UpdateProtectedBranchesRequestTestSettingDTO {
	s.CheckConfig = v
	return s
}

func (s *UpdateProtectedBranchesRequestTestSettingDTO) SetCheckTaskQualityConfig(v *UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig) *UpdateProtectedBranchesRequestTestSettingDTO {
	s.CheckTaskQualityConfig = v
	return s
}

func (s *UpdateProtectedBranchesRequestTestSettingDTO) SetCodeGuidelinesDetection(v *UpdateProtectedBranchesRequestTestSettingDTOCodeGuidelinesDetection) *UpdateProtectedBranchesRequestTestSettingDTO {
	s.CodeGuidelinesDetection = v
	return s
}

func (s *UpdateProtectedBranchesRequestTestSettingDTO) SetIsRequired(v bool) *UpdateProtectedBranchesRequestTestSettingDTO {
	s.IsRequired = &v
	return s
}

func (s *UpdateProtectedBranchesRequestTestSettingDTO) SetSensitiveInfoDetection(v *UpdateProtectedBranchesRequestTestSettingDTOSensitiveInfoDetection) *UpdateProtectedBranchesRequestTestSettingDTO {
	s.SensitiveInfoDetection = v
	return s
}

type UpdateProtectedBranchesRequestTestSettingDTOCheckConfig struct {
	CheckItems []*UpdateProtectedBranchesRequestTestSettingDTOCheckConfigCheckItems `json:"checkItems,omitempty" xml:"checkItems,omitempty" type:"Repeated"`
}

func (s UpdateProtectedBranchesRequestTestSettingDTOCheckConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesRequestTestSettingDTOCheckConfig) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOCheckConfig) SetCheckItems(v []*UpdateProtectedBranchesRequestTestSettingDTOCheckConfigCheckItems) *UpdateProtectedBranchesRequestTestSettingDTOCheckConfig {
	s.CheckItems = v
	return s
}

type UpdateProtectedBranchesRequestTestSettingDTOCheckConfigCheckItems struct {
	// example:
	//
	// false
	IsRequired *bool   `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s UpdateProtectedBranchesRequestTestSettingDTOCheckConfigCheckItems) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesRequestTestSettingDTOCheckConfigCheckItems) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOCheckConfigCheckItems) SetIsRequired(v bool) *UpdateProtectedBranchesRequestTestSettingDTOCheckConfigCheckItems {
	s.IsRequired = &v
	return s
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOCheckConfigCheckItems) SetName(v string) *UpdateProtectedBranchesRequestTestSettingDTOCheckConfigCheckItems {
	s.Name = &v
	return s
}

type UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig struct {
	// example:
	//
	// 123456
	BizNo *string `json:"bizNo,omitempty" xml:"bizNo,omitempty"`
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_task_quality
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// bz-task-quality
	TaskName *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
}

func (s UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig) SetBizNo(v string) *UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig {
	s.BizNo = &v
	return s
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig) SetEnabled(v bool) *UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig {
	s.Enabled = &v
	return s
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig) SetMessage(v string) *UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig {
	s.Message = &v
	return s
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig) SetTaskName(v string) *UpdateProtectedBranchesRequestTestSettingDTOCheckTaskQualityConfig {
	s.TaskName = &v
	return s
}

type UpdateProtectedBranchesRequestTestSettingDTOCodeGuidelinesDetection struct {
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_code_guide_lines
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s UpdateProtectedBranchesRequestTestSettingDTOCodeGuidelinesDetection) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesRequestTestSettingDTOCodeGuidelinesDetection) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOCodeGuidelinesDetection) SetEnabled(v bool) *UpdateProtectedBranchesRequestTestSettingDTOCodeGuidelinesDetection {
	s.Enabled = &v
	return s
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOCodeGuidelinesDetection) SetMessage(v string) *UpdateProtectedBranchesRequestTestSettingDTOCodeGuidelinesDetection {
	s.Message = &v
	return s
}

type UpdateProtectedBranchesRequestTestSettingDTOSensitiveInfoDetection struct {
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_code_sensitive_info
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s UpdateProtectedBranchesRequestTestSettingDTOSensitiveInfoDetection) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesRequestTestSettingDTOSensitiveInfoDetection) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOSensitiveInfoDetection) SetEnabled(v bool) *UpdateProtectedBranchesRequestTestSettingDTOSensitiveInfoDetection {
	s.Enabled = &v
	return s
}

func (s *UpdateProtectedBranchesRequestTestSettingDTOSensitiveInfoDetection) SetMessage(v string) *UpdateProtectedBranchesRequestTestSettingDTOSensitiveInfoDetection {
	s.Message = &v
	return s
}

type UpdateProtectedBranchesResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// A35869D5-BB29-5F84-A4DD-B09985EA2AFA
	RequestId *string                                    `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdateProtectedBranchesResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateProtectedBranchesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesResponseBody) SetErrorCode(v string) *UpdateProtectedBranchesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBody) SetErrorMessage(v string) *UpdateProtectedBranchesResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBody) SetRequestId(v string) *UpdateProtectedBranchesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBody) SetResult(v *UpdateProtectedBranchesResponseBodyResult) *UpdateProtectedBranchesResponseBody {
	s.Result = v
	return s
}

func (s *UpdateProtectedBranchesResponseBody) SetSuccess(v bool) *UpdateProtectedBranchesResponseBody {
	s.Success = &v
	return s
}

type UpdateProtectedBranchesResponseBodyResult struct {
	AllowMergeRoles   []*int32 `json:"allowMergeRoles,omitempty" xml:"allowMergeRoles,omitempty" type:"Repeated"`
	AllowMergeUserIds []*int64 `json:"allowMergeUserIds,omitempty" xml:"allowMergeUserIds,omitempty" type:"Repeated"`
	AllowPushRoles    []*int32 `json:"allowPushRoles,omitempty" xml:"allowPushRoles,omitempty" type:"Repeated"`
	AllowPushUserIds  []*int64 `json:"allowPushUserIds,omitempty" xml:"allowPushUserIds,omitempty" type:"Repeated"`
	// example:
	//
	// master
	Branch *string `json:"branch,omitempty" xml:"branch,omitempty"`
	// example:
	//
	// 123456
	Id                  *int64                                                        `json:"id,omitempty" xml:"id,omitempty"`
	MergeRequestSetting *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting `json:"mergeRequestSetting,omitempty" xml:"mergeRequestSetting,omitempty" type:"Struct"`
	TestSettingDTO      *UpdateProtectedBranchesResponseBodyResultTestSettingDTO      `json:"testSettingDTO,omitempty" xml:"testSettingDTO,omitempty" type:"Struct"`
}

func (s UpdateProtectedBranchesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesResponseBodyResult) SetAllowMergeRoles(v []*int32) *UpdateProtectedBranchesResponseBodyResult {
	s.AllowMergeRoles = v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResult) SetAllowMergeUserIds(v []*int64) *UpdateProtectedBranchesResponseBodyResult {
	s.AllowMergeUserIds = v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResult) SetAllowPushRoles(v []*int32) *UpdateProtectedBranchesResponseBodyResult {
	s.AllowPushRoles = v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResult) SetAllowPushUserIds(v []*int64) *UpdateProtectedBranchesResponseBodyResult {
	s.AllowPushUserIds = v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResult) SetBranch(v string) *UpdateProtectedBranchesResponseBodyResult {
	s.Branch = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResult) SetId(v int64) *UpdateProtectedBranchesResponseBodyResult {
	s.Id = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResult) SetMergeRequestSetting(v *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) *UpdateProtectedBranchesResponseBodyResult {
	s.MergeRequestSetting = v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResult) SetTestSettingDTO(v *UpdateProtectedBranchesResponseBodyResultTestSettingDTO) *UpdateProtectedBranchesResponseBodyResult {
	s.TestSettingDTO = v
	return s
}

type UpdateProtectedBranchesResponseBodyResultMergeRequestSetting struct {
	AllowMergeRequestRoles []*int32  `json:"allowMergeRequestRoles,omitempty" xml:"allowMergeRequestRoles,omitempty" type:"Repeated"`
	DefaultAssignees       []*string `json:"defaultAssignees,omitempty" xml:"defaultAssignees,omitempty" type:"Repeated"`
	// example:
	//
	// true
	IsAllowSelfApproval *bool `json:"isAllowSelfApproval,omitempty" xml:"isAllowSelfApproval,omitempty"`
	// example:
	//
	// true
	IsRequireDiscussionProcessed *bool `json:"isRequireDiscussionProcessed,omitempty" xml:"isRequireDiscussionProcessed,omitempty"`
	// example:
	//
	// true
	IsRequired *bool `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	// example:
	//
	// false
	IsResetApprovalWhenNewPush *bool `json:"isResetApprovalWhenNewPush,omitempty" xml:"isResetApprovalWhenNewPush,omitempty"`
	// example:
	//
	// 1
	MinimumApproval *int32 `json:"minimumApproval,omitempty" xml:"minimumApproval,omitempty"`
	// example:
	//
	// general
	MrMode *string `json:"mrMode,omitempty" xml:"mrMode,omitempty"`
	// example:
	//
	// **.java
	WhiteList *string `json:"whiteList,omitempty" xml:"whiteList,omitempty"`
}

func (s UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) SetAllowMergeRequestRoles(v []*int32) *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.AllowMergeRequestRoles = v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) SetDefaultAssignees(v []*string) *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.DefaultAssignees = v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) SetIsAllowSelfApproval(v bool) *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.IsAllowSelfApproval = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) SetIsRequireDiscussionProcessed(v bool) *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.IsRequireDiscussionProcessed = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) SetIsRequired(v bool) *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.IsRequired = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) SetIsResetApprovalWhenNewPush(v bool) *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.IsResetApprovalWhenNewPush = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) SetMinimumApproval(v int32) *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.MinimumApproval = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) SetMrMode(v string) *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.MrMode = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting) SetWhiteList(v string) *UpdateProtectedBranchesResponseBodyResultMergeRequestSetting {
	s.WhiteList = &v
	return s
}

type UpdateProtectedBranchesResponseBodyResultTestSettingDTO struct {
	CheckConfig             *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig             `json:"checkConfig,omitempty" xml:"checkConfig,omitempty" type:"Struct"`
	CheckTaskQualityConfig  *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig  `json:"checkTaskQualityConfig,omitempty" xml:"checkTaskQualityConfig,omitempty" type:"Struct"`
	CodeGuidelinesDetection *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection `json:"codeGuidelinesDetection,omitempty" xml:"codeGuidelinesDetection,omitempty" type:"Struct"`
	// example:
	//
	// false
	IsRequired             *bool                                                                          `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	SensitiveInfoDetection *UpdateProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection `json:"sensitiveInfoDetection,omitempty" xml:"sensitiveInfoDetection,omitempty" type:"Struct"`
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTO) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTO) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTO) SetCheckConfig(v *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig) *UpdateProtectedBranchesResponseBodyResultTestSettingDTO {
	s.CheckConfig = v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTO) SetCheckTaskQualityConfig(v *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) *UpdateProtectedBranchesResponseBodyResultTestSettingDTO {
	s.CheckTaskQualityConfig = v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTO) SetCodeGuidelinesDetection(v *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection) *UpdateProtectedBranchesResponseBodyResultTestSettingDTO {
	s.CodeGuidelinesDetection = v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTO) SetIsRequired(v bool) *UpdateProtectedBranchesResponseBodyResultTestSettingDTO {
	s.IsRequired = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTO) SetSensitiveInfoDetection(v *UpdateProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection) *UpdateProtectedBranchesResponseBodyResultTestSettingDTO {
	s.SensitiveInfoDetection = v
	return s
}

type UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig struct {
	CheckItems []*UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems `json:"checkItems,omitempty" xml:"checkItems,omitempty" type:"Repeated"`
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig) SetCheckItems(v []*UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfig {
	s.CheckItems = v
	return s
}

type UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems struct {
	// example:
	//
	// false
	IsRequired *bool   `json:"isRequired,omitempty" xml:"isRequired,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems) SetIsRequired(v bool) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems {
	s.IsRequired = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems) SetName(v string) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckConfigCheckItems {
	s.Name = &v
	return s
}

type UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig struct {
	// example:
	//
	// 123456
	BizNo *string `json:"bizNo,omitempty" xml:"bizNo,omitempty"`
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_task_quality
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// example:
	//
	// biz-task-quality
	TaskName *string `json:"taskName,omitempty" xml:"taskName,omitempty"`
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetBizNo(v string) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.BizNo = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetEnabled(v bool) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.Enabled = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetMessage(v string) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.Message = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig) SetTaskName(v string) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCheckTaskQualityConfig {
	s.TaskName = &v
	return s
}

type UpdateProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection struct {
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_code_guide_lines
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection) SetEnabled(v bool) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection {
	s.Enabled = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection) SetMessage(v string) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOCodeGuidelinesDetection {
	s.Message = &v
	return s
}

type UpdateProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection struct {
	// example:
	//
	// false
	Enabled *bool `json:"enabled,omitempty" xml:"enabled,omitempty"`
	// example:
	//
	// test_code_sensitive_info
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection) SetEnabled(v bool) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection {
	s.Enabled = &v
	return s
}

func (s *UpdateProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection) SetMessage(v string) *UpdateProtectedBranchesResponseBodyResultTestSettingDTOSensitiveInfoDetection {
	s.Message = &v
	return s
}

type UpdateProtectedBranchesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateProtectedBranchesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateProtectedBranchesResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProtectedBranchesResponse) GoString() string {
	return s.String()
}

func (s *UpdateProtectedBranchesResponse) SetHeaders(v map[string]*string) *UpdateProtectedBranchesResponse {
	s.Headers = v
	return s
}

func (s *UpdateProtectedBranchesResponse) SetStatusCode(v int32) *UpdateProtectedBranchesResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateProtectedBranchesResponse) SetBody(v *UpdateProtectedBranchesResponseBody) *UpdateProtectedBranchesResponse {
	s.Body = v
	return s
}

type UpdatePushReviewOnOffRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// true
	TrunkMode *bool `json:"trunkMode,omitempty" xml:"trunkMode,omitempty"`
}

func (s UpdatePushReviewOnOffRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePushReviewOnOffRequest) GoString() string {
	return s.String()
}

func (s *UpdatePushReviewOnOffRequest) SetOrganizationId(v string) *UpdatePushReviewOnOffRequest {
	s.OrganizationId = &v
	return s
}

func (s *UpdatePushReviewOnOffRequest) SetTrunkMode(v bool) *UpdatePushReviewOnOffRequest {
	s.TrunkMode = &v
	return s
}

type UpdatePushReviewOnOffResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// 6177543A-8D54-5736-A93B-E0195A1512CB
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdatePushReviewOnOffResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdatePushReviewOnOffResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePushReviewOnOffResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePushReviewOnOffResponseBody) SetErrorCode(v string) *UpdatePushReviewOnOffResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdatePushReviewOnOffResponseBody) SetErrorMessage(v string) *UpdatePushReviewOnOffResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdatePushReviewOnOffResponseBody) SetRequestId(v string) *UpdatePushReviewOnOffResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePushReviewOnOffResponseBody) SetResult(v *UpdatePushReviewOnOffResponseBodyResult) *UpdatePushReviewOnOffResponseBody {
	s.Result = v
	return s
}

func (s *UpdatePushReviewOnOffResponseBody) SetSuccess(v bool) *UpdatePushReviewOnOffResponseBody {
	s.Success = &v
	return s
}

type UpdatePushReviewOnOffResponseBodyResult struct {
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdatePushReviewOnOffResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdatePushReviewOnOffResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdatePushReviewOnOffResponseBodyResult) SetResult(v bool) *UpdatePushReviewOnOffResponseBodyResult {
	s.Result = &v
	return s
}

type UpdatePushReviewOnOffResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePushReviewOnOffResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePushReviewOnOffResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePushReviewOnOffResponse) GoString() string {
	return s.String()
}

func (s *UpdatePushReviewOnOffResponse) SetHeaders(v map[string]*string) *UpdatePushReviewOnOffResponse {
	s.Headers = v
	return s
}

func (s *UpdatePushReviewOnOffResponse) SetStatusCode(v int32) *UpdatePushReviewOnOffResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePushReviewOnOffResponse) SetBody(v *UpdatePushReviewOnOffResponseBody) *UpdatePushReviewOnOffResponse {
	s.Body = v
	return s
}

type UpdatePushRuleRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string                           `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	RuleInfos   []*UpdatePushRuleRequestRuleInfos `json:"ruleInfos,omitempty" xml:"ruleInfos,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 5ebbc0228123212b59xxxxx
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdatePushRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePushRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdatePushRuleRequest) SetAccessToken(v string) *UpdatePushRuleRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdatePushRuleRequest) SetRuleInfos(v []*UpdatePushRuleRequestRuleInfos) *UpdatePushRuleRequest {
	s.RuleInfos = v
	return s
}

func (s *UpdatePushRuleRequest) SetOrganizationId(v string) *UpdatePushRuleRequest {
	s.OrganizationId = &v
	return s
}

type UpdatePushRuleRequestRuleInfos struct {
	// example:
	//
	// CommitAuthorChecker
	CheckerName *string `json:"checkerName,omitempty" xml:"checkerName,omitempty"`
	// example:
	//
	// warn
	CheckerType *string `json:"checkerType,omitempty" xml:"checkerType,omitempty"`
	// example:
	//
	// on
	ExtraMessage    *string   `json:"extraMessage,omitempty" xml:"extraMessage,omitempty"`
	FileRuleRegexes []*string `json:"fileRuleRegexes,omitempty" xml:"fileRuleRegexes,omitempty" type:"Repeated"`
}

func (s UpdatePushRuleRequestRuleInfos) String() string {
	return tea.Prettify(s)
}

func (s UpdatePushRuleRequestRuleInfos) GoString() string {
	return s.String()
}

func (s *UpdatePushRuleRequestRuleInfos) SetCheckerName(v string) *UpdatePushRuleRequestRuleInfos {
	s.CheckerName = &v
	return s
}

func (s *UpdatePushRuleRequestRuleInfos) SetCheckerType(v string) *UpdatePushRuleRequestRuleInfos {
	s.CheckerType = &v
	return s
}

func (s *UpdatePushRuleRequestRuleInfos) SetExtraMessage(v string) *UpdatePushRuleRequestRuleInfos {
	s.ExtraMessage = &v
	return s
}

func (s *UpdatePushRuleRequestRuleInfos) SetFileRuleRegexes(v []*string) *UpdatePushRuleRequestRuleInfos {
	s.FileRuleRegexes = v
	return s
}

type UpdatePushRuleResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string                           `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdatePushRuleResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdatePushRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePushRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePushRuleResponseBody) SetErrorCode(v string) *UpdatePushRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdatePushRuleResponseBody) SetErrorMessage(v string) *UpdatePushRuleResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdatePushRuleResponseBody) SetRequestId(v string) *UpdatePushRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePushRuleResponseBody) SetResult(v *UpdatePushRuleResponseBodyResult) *UpdatePushRuleResponseBody {
	s.Result = v
	return s
}

func (s *UpdatePushRuleResponseBody) SetSuccess(v bool) *UpdatePushRuleResponseBody {
	s.Success = &v
	return s
}

type UpdatePushRuleResponseBodyResult struct {
	// example:
	//
	// 2023-09-03T18:20:06+08:00
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 2023-09-03T18:20:06+08:00
	GmtModified *string                                      `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id          *int64                                       `json:"id,omitempty" xml:"id,omitempty"`
	RuleInfos   []*UpdatePushRuleResponseBodyResultRuleInfos `json:"ruleInfos,omitempty" xml:"ruleInfos,omitempty" type:"Repeated"`
}

func (s UpdatePushRuleResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdatePushRuleResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdatePushRuleResponseBodyResult) SetGmtCreate(v string) *UpdatePushRuleResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *UpdatePushRuleResponseBodyResult) SetGmtModified(v string) *UpdatePushRuleResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *UpdatePushRuleResponseBodyResult) SetId(v int64) *UpdatePushRuleResponseBodyResult {
	s.Id = &v
	return s
}

func (s *UpdatePushRuleResponseBodyResult) SetRuleInfos(v []*UpdatePushRuleResponseBodyResultRuleInfos) *UpdatePushRuleResponseBodyResult {
	s.RuleInfos = v
	return s
}

type UpdatePushRuleResponseBodyResultRuleInfos struct {
	// example:
	//
	// CommitAuthorChecker
	CheckerName *string `json:"checkerName,omitempty" xml:"checkerName,omitempty"`
	// example:
	//
	// warn
	CheckerType *string `json:"checkerType,omitempty" xml:"checkerType,omitempty"`
	// example:
	//
	// on
	ExtraMessage    *string   `json:"extraMessage,omitempty" xml:"extraMessage,omitempty"`
	FileRuleRegexes []*string `json:"fileRuleRegexes,omitempty" xml:"fileRuleRegexes,omitempty" type:"Repeated"`
}

func (s UpdatePushRuleResponseBodyResultRuleInfos) String() string {
	return tea.Prettify(s)
}

func (s UpdatePushRuleResponseBodyResultRuleInfos) GoString() string {
	return s.String()
}

func (s *UpdatePushRuleResponseBodyResultRuleInfos) SetCheckerName(v string) *UpdatePushRuleResponseBodyResultRuleInfos {
	s.CheckerName = &v
	return s
}

func (s *UpdatePushRuleResponseBodyResultRuleInfos) SetCheckerType(v string) *UpdatePushRuleResponseBodyResultRuleInfos {
	s.CheckerType = &v
	return s
}

func (s *UpdatePushRuleResponseBodyResultRuleInfos) SetExtraMessage(v string) *UpdatePushRuleResponseBodyResultRuleInfos {
	s.ExtraMessage = &v
	return s
}

func (s *UpdatePushRuleResponseBodyResultRuleInfos) SetFileRuleRegexes(v []*string) *UpdatePushRuleResponseBodyResultRuleInfos {
	s.FileRuleRegexes = v
	return s
}

type UpdatePushRuleResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePushRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePushRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePushRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdatePushRuleResponse) SetHeaders(v map[string]*string) *UpdatePushRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdatePushRuleResponse) SetStatusCode(v int32) *UpdatePushRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePushRuleResponse) SetBody(v *UpdatePushRuleResponseBody) *UpdatePushRuleResponse {
	s.Body = v
	return s
}

type UpdateRepositoryRequest struct {
	// example:
	//
	// c3c09f1230187a879678da43c973d069
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// Java
	AdminSettingLanguage *string `json:"adminSettingLanguage,omitempty" xml:"adminSettingLanguage,omitempty"`
	// example:
	//
	// https://xxxx
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// true
	BuildsEnabled *bool `json:"buildsEnabled,omitempty" xml:"buildsEnabled,omitempty"`
	// example:
	//
	// true
	CheckEmail *bool `json:"checkEmail,omitempty" xml:"checkEmail,omitempty"`
	// example:
	//
	// master
	DefaultBranch *string `json:"defaultBranch,omitempty" xml:"defaultBranch,omitempty"`
	Description   *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 2080398
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true
	IssuesEnabled *bool `json:"issuesEnabled,omitempty" xml:"issuesEnabled,omitempty"`
	// example:
	//
	// true
	MergeRequestsEnabled *bool `json:"mergeRequestsEnabled,omitempty" xml:"mergeRequestsEnabled,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// false
	OpenCloneDownloadControl       *bool                                                    `json:"openCloneDownloadControl,omitempty" xml:"openCloneDownloadControl,omitempty"`
	Path                           *string                                                  `json:"path,omitempty" xml:"path,omitempty"`
	ProjectCloneDownloadMethodList []*UpdateRepositoryRequestProjectCloneDownloadMethodList `json:"projectCloneDownloadMethodList,omitempty" xml:"projectCloneDownloadMethodList,omitempty" type:"Repeated"`
	ProjectCloneDownloadRoleList   []*UpdateRepositoryRequestProjectCloneDownloadRoleList   `json:"projectCloneDownloadRoleList,omitempty" xml:"projectCloneDownloadRoleList,omitempty" type:"Repeated"`
	// example:
	//
	// false
	SnippetsEnabled *bool `json:"snippetsEnabled,omitempty" xml:"snippetsEnabled,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// true
	WikiEnabled *bool `json:"wikiEnabled,omitempty" xml:"wikiEnabled,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdateRepositoryRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryRequest) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryRequest) SetAccessToken(v string) *UpdateRepositoryRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateRepositoryRequest) SetAdminSettingLanguage(v string) *UpdateRepositoryRequest {
	s.AdminSettingLanguage = &v
	return s
}

func (s *UpdateRepositoryRequest) SetAvatar(v string) *UpdateRepositoryRequest {
	s.Avatar = &v
	return s
}

func (s *UpdateRepositoryRequest) SetBuildsEnabled(v bool) *UpdateRepositoryRequest {
	s.BuildsEnabled = &v
	return s
}

func (s *UpdateRepositoryRequest) SetCheckEmail(v bool) *UpdateRepositoryRequest {
	s.CheckEmail = &v
	return s
}

func (s *UpdateRepositoryRequest) SetDefaultBranch(v string) *UpdateRepositoryRequest {
	s.DefaultBranch = &v
	return s
}

func (s *UpdateRepositoryRequest) SetDescription(v string) *UpdateRepositoryRequest {
	s.Description = &v
	return s
}

func (s *UpdateRepositoryRequest) SetId(v int64) *UpdateRepositoryRequest {
	s.Id = &v
	return s
}

func (s *UpdateRepositoryRequest) SetIssuesEnabled(v bool) *UpdateRepositoryRequest {
	s.IssuesEnabled = &v
	return s
}

func (s *UpdateRepositoryRequest) SetMergeRequestsEnabled(v bool) *UpdateRepositoryRequest {
	s.MergeRequestsEnabled = &v
	return s
}

func (s *UpdateRepositoryRequest) SetName(v string) *UpdateRepositoryRequest {
	s.Name = &v
	return s
}

func (s *UpdateRepositoryRequest) SetOpenCloneDownloadControl(v bool) *UpdateRepositoryRequest {
	s.OpenCloneDownloadControl = &v
	return s
}

func (s *UpdateRepositoryRequest) SetPath(v string) *UpdateRepositoryRequest {
	s.Path = &v
	return s
}

func (s *UpdateRepositoryRequest) SetProjectCloneDownloadMethodList(v []*UpdateRepositoryRequestProjectCloneDownloadMethodList) *UpdateRepositoryRequest {
	s.ProjectCloneDownloadMethodList = v
	return s
}

func (s *UpdateRepositoryRequest) SetProjectCloneDownloadRoleList(v []*UpdateRepositoryRequestProjectCloneDownloadRoleList) *UpdateRepositoryRequest {
	s.ProjectCloneDownloadRoleList = v
	return s
}

func (s *UpdateRepositoryRequest) SetSnippetsEnabled(v bool) *UpdateRepositoryRequest {
	s.SnippetsEnabled = &v
	return s
}

func (s *UpdateRepositoryRequest) SetVisibilityLevel(v int32) *UpdateRepositoryRequest {
	s.VisibilityLevel = &v
	return s
}

func (s *UpdateRepositoryRequest) SetWikiEnabled(v bool) *UpdateRepositoryRequest {
	s.WikiEnabled = &v
	return s
}

func (s *UpdateRepositoryRequest) SetOrganizationId(v string) *UpdateRepositoryRequest {
	s.OrganizationId = &v
	return s
}

type UpdateRepositoryRequestProjectCloneDownloadMethodList struct {
	// example:
	//
	// true
	Allowed *bool `json:"allowed,omitempty" xml:"allowed,omitempty"`
	// example:
	//
	// project:download
	PermissionCode *string `json:"permissionCode,omitempty" xml:"permissionCode,omitempty"`
}

func (s UpdateRepositoryRequestProjectCloneDownloadMethodList) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryRequestProjectCloneDownloadMethodList) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryRequestProjectCloneDownloadMethodList) SetAllowed(v bool) *UpdateRepositoryRequestProjectCloneDownloadMethodList {
	s.Allowed = &v
	return s
}

func (s *UpdateRepositoryRequestProjectCloneDownloadMethodList) SetPermissionCode(v string) *UpdateRepositoryRequestProjectCloneDownloadMethodList {
	s.PermissionCode = &v
	return s
}

type UpdateRepositoryRequestProjectCloneDownloadRoleList struct {
	// example:
	//
	// true
	Allowed *bool `json:"allowed,omitempty" xml:"allowed,omitempty"`
	// example:
	//
	// 15
	RoleCode *int32 `json:"roleCode,omitempty" xml:"roleCode,omitempty"`
}

func (s UpdateRepositoryRequestProjectCloneDownloadRoleList) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryRequestProjectCloneDownloadRoleList) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryRequestProjectCloneDownloadRoleList) SetAllowed(v bool) *UpdateRepositoryRequestProjectCloneDownloadRoleList {
	s.Allowed = &v
	return s
}

func (s *UpdateRepositoryRequestProjectCloneDownloadRoleList) SetRoleCode(v int32) *UpdateRepositoryRequestProjectCloneDownloadRoleList {
	s.RoleCode = &v
	return s
}

type UpdateRepositoryResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// “”
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// EAE03103-5497-58D1-9169-E524DDE8604C
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdateRepositoryResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateRepositoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryResponseBody) SetErrorCode(v string) *UpdateRepositoryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateRepositoryResponseBody) SetErrorMessage(v string) *UpdateRepositoryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateRepositoryResponseBody) SetRequestId(v string) *UpdateRepositoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateRepositoryResponseBody) SetResult(v *UpdateRepositoryResponseBodyResult) *UpdateRepositoryResponseBody {
	s.Result = v
	return s
}

func (s *UpdateRepositoryResponseBody) SetSuccess(v bool) *UpdateRepositoryResponseBody {
	s.Success = &v
	return s
}

type UpdateRepositoryResponseBodyResult struct {
	// example:
	//
	// false
	Archived *bool `json:"archived,omitempty" xml:"archived,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// false
	BuildsEnabled *bool `json:"buildsEnabled,omitempty" xml:"buildsEnabled,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	CreatedAt *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// example:
	//
	// 19238
	CreatorId *int64 `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// master
	DefaultBranch *string `json:"defaultBranch,omitempty" xml:"defaultBranch,omitempty"`
	Description   *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// https://codeup.aliyun.com/xxx/test/test.git
	HttpUrlToRepo *string `json:"httpUrlToRepo,omitempty" xml:"httpUrlToRepo,omitempty"`
	// example:
	//
	// 2825387
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true
	IssuesEnabled *bool `json:"issuesEnabled,omitempty" xml:"issuesEnabled,omitempty"`
	// example:
	//
	// 2022-03-20 14:24:54
	LastActivityAt *string `json:"lastActivityAt,omitempty" xml:"lastActivityAt,omitempty"`
	// example:
	//
	// true
	MergeRequestsEnabled *bool `json:"mergeRequestsEnabled,omitempty" xml:"mergeRequestsEnabled,omitempty"`
	// example:
	//
	// codeup
	Name              *string                                      `json:"name,omitempty" xml:"name,omitempty"`
	NameWithNamespace *string                                      `json:"nameWithNamespace,omitempty" xml:"nameWithNamespace,omitempty"`
	Namespace         *UpdateRepositoryResponseBodyResultNamespace `json:"namespace,omitempty" xml:"namespace,omitempty" type:"Struct"`
	// example:
	//
	// codeup
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// codeup-test-org / codeup
	PathWithNamespace *string `json:"pathWithNamespace,omitempty" xml:"pathWithNamespace,omitempty"`
	// example:
	//
	// false
	SnippetsEnabled *bool `json:"snippetsEnabled,omitempty" xml:"snippetsEnabled,omitempty"`
	// example:
	//
	// git@codeup.aliyun.com:xxx/test/test.git
	SshUrlToRepo *string `json:"sshUrlToRepo,omitempty" xml:"sshUrlToRepo,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
	// example:
	//
	// https://codeup.aliyun.com/xxx/test/test
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
	// example:
	//
	// true
	WikiEnabled *bool `json:"wikiEnabled,omitempty" xml:"wikiEnabled,omitempty"`
}

func (s UpdateRepositoryResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryResponseBodyResult) SetArchived(v bool) *UpdateRepositoryResponseBodyResult {
	s.Archived = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetAvatarUrl(v string) *UpdateRepositoryResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetBuildsEnabled(v bool) *UpdateRepositoryResponseBodyResult {
	s.BuildsEnabled = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetCreatedAt(v string) *UpdateRepositoryResponseBodyResult {
	s.CreatedAt = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetCreatorId(v int64) *UpdateRepositoryResponseBodyResult {
	s.CreatorId = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetDefaultBranch(v string) *UpdateRepositoryResponseBodyResult {
	s.DefaultBranch = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetDescription(v string) *UpdateRepositoryResponseBodyResult {
	s.Description = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetHttpUrlToRepo(v string) *UpdateRepositoryResponseBodyResult {
	s.HttpUrlToRepo = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetId(v int64) *UpdateRepositoryResponseBodyResult {
	s.Id = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetIssuesEnabled(v bool) *UpdateRepositoryResponseBodyResult {
	s.IssuesEnabled = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetLastActivityAt(v string) *UpdateRepositoryResponseBodyResult {
	s.LastActivityAt = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetMergeRequestsEnabled(v bool) *UpdateRepositoryResponseBodyResult {
	s.MergeRequestsEnabled = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetName(v string) *UpdateRepositoryResponseBodyResult {
	s.Name = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetNameWithNamespace(v string) *UpdateRepositoryResponseBodyResult {
	s.NameWithNamespace = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetNamespace(v *UpdateRepositoryResponseBodyResultNamespace) *UpdateRepositoryResponseBodyResult {
	s.Namespace = v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetPath(v string) *UpdateRepositoryResponseBodyResult {
	s.Path = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetPathWithNamespace(v string) *UpdateRepositoryResponseBodyResult {
	s.PathWithNamespace = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetSnippetsEnabled(v bool) *UpdateRepositoryResponseBodyResult {
	s.SnippetsEnabled = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetSshUrlToRepo(v string) *UpdateRepositoryResponseBodyResult {
	s.SshUrlToRepo = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetVisibilityLevel(v int32) *UpdateRepositoryResponseBodyResult {
	s.VisibilityLevel = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetWebUrl(v string) *UpdateRepositoryResponseBodyResult {
	s.WebUrl = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResult) SetWikiEnabled(v bool) *UpdateRepositoryResponseBodyResult {
	s.WikiEnabled = &v
	return s
}

type UpdateRepositoryResponseBodyResultNamespace struct {
	// example:
	//
	// https://xxx
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// 2022-02-18 14:24:54
	CreatedAt   *string `json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 29322
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 19238
	OwnerId *int64  `json:"ownerId,omitempty" xml:"ownerId,omitempty"`
	Path    *string `json:"path,omitempty" xml:"path,omitempty"`
	// example:
	//
	// 2022-03-18 14:24:54
	UpdatedAt *string `json:"updatedAt,omitempty" xml:"updatedAt,omitempty"`
	// example:
	//
	// 0
	VisibilityLevel *int32 `json:"visibilityLevel,omitempty" xml:"visibilityLevel,omitempty"`
}

func (s UpdateRepositoryResponseBodyResultNamespace) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryResponseBodyResultNamespace) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryResponseBodyResultNamespace) SetAvatar(v string) *UpdateRepositoryResponseBodyResultNamespace {
	s.Avatar = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResultNamespace) SetCreatedAt(v string) *UpdateRepositoryResponseBodyResultNamespace {
	s.CreatedAt = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResultNamespace) SetDescription(v string) *UpdateRepositoryResponseBodyResultNamespace {
	s.Description = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResultNamespace) SetId(v int64) *UpdateRepositoryResponseBodyResultNamespace {
	s.Id = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResultNamespace) SetName(v string) *UpdateRepositoryResponseBodyResultNamespace {
	s.Name = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResultNamespace) SetOwnerId(v int64) *UpdateRepositoryResponseBodyResultNamespace {
	s.OwnerId = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResultNamespace) SetPath(v string) *UpdateRepositoryResponseBodyResultNamespace {
	s.Path = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResultNamespace) SetUpdatedAt(v string) *UpdateRepositoryResponseBodyResultNamespace {
	s.UpdatedAt = &v
	return s
}

func (s *UpdateRepositoryResponseBodyResultNamespace) SetVisibilityLevel(v int32) *UpdateRepositoryResponseBodyResultNamespace {
	s.VisibilityLevel = &v
	return s
}

type UpdateRepositoryResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateRepositoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateRepositoryResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryResponse) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryResponse) SetHeaders(v map[string]*string) *UpdateRepositoryResponse {
	s.Headers = v
	return s
}

func (s *UpdateRepositoryResponse) SetStatusCode(v int32) *UpdateRepositoryResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateRepositoryResponse) SetBody(v *UpdateRepositoryResponseBody) *UpdateRepositoryResponse {
	s.Body = v
	return s
}

type UpdateRepositoryMemberRequest struct {
	// example:
	//
	// f0b1e61db5961df5975a93f9129d2513
	AccessToken *string `json:"accessToken,omitempty" xml:"accessToken,omitempty"`
	// example:
	//
	// 30
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// 2020-08-08 08:08:08
	ExpireAt *string `json:"expireAt,omitempty" xml:"expireAt,omitempty"`
	// example:
	//
	// USERS
	MemberType *string `json:"memberType,omitempty" xml:"memberType,omitempty"`
	// example:
	//
	// 10010
	RelatedId    *string                                      `json:"relatedId,omitempty" xml:"relatedId,omitempty"`
	RelatedInfos []*UpdateRepositoryMemberRequestRelatedInfos `json:"relatedInfos,omitempty" xml:"relatedInfos,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 60de7a6852743a5162b5f957
	OrganizationId *string `json:"organizationId,omitempty" xml:"organizationId,omitempty"`
}

func (s UpdateRepositoryMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryMemberRequest) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryMemberRequest) SetAccessToken(v string) *UpdateRepositoryMemberRequest {
	s.AccessToken = &v
	return s
}

func (s *UpdateRepositoryMemberRequest) SetAccessLevel(v int32) *UpdateRepositoryMemberRequest {
	s.AccessLevel = &v
	return s
}

func (s *UpdateRepositoryMemberRequest) SetExpireAt(v string) *UpdateRepositoryMemberRequest {
	s.ExpireAt = &v
	return s
}

func (s *UpdateRepositoryMemberRequest) SetMemberType(v string) *UpdateRepositoryMemberRequest {
	s.MemberType = &v
	return s
}

func (s *UpdateRepositoryMemberRequest) SetRelatedId(v string) *UpdateRepositoryMemberRequest {
	s.RelatedId = &v
	return s
}

func (s *UpdateRepositoryMemberRequest) SetRelatedInfos(v []*UpdateRepositoryMemberRequestRelatedInfos) *UpdateRepositoryMemberRequest {
	s.RelatedInfos = v
	return s
}

func (s *UpdateRepositoryMemberRequest) SetOrganizationId(v string) *UpdateRepositoryMemberRequest {
	s.OrganizationId = &v
	return s
}

type UpdateRepositoryMemberRequestRelatedInfos struct {
	// example:
	//
	// 10011
	RelatedId *string `json:"relatedId,omitempty" xml:"relatedId,omitempty"`
	// example:
	//
	// 24790
	SourceId *int64 `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// Project
	SourceType *string `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
}

func (s UpdateRepositoryMemberRequestRelatedInfos) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryMemberRequestRelatedInfos) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryMemberRequestRelatedInfos) SetRelatedId(v string) *UpdateRepositoryMemberRequestRelatedInfos {
	s.RelatedId = &v
	return s
}

func (s *UpdateRepositoryMemberRequestRelatedInfos) SetSourceId(v int64) *UpdateRepositoryMemberRequestRelatedInfos {
	s.SourceId = &v
	return s
}

func (s *UpdateRepositoryMemberRequestRelatedInfos) SetSourceType(v string) *UpdateRepositoryMemberRequestRelatedInfos {
	s.SourceType = &v
	return s
}

type UpdateRepositoryMemberResponseBody struct {
	// example:
	//
	// success
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F590C9D8-E908-5B6C-95AC-56B7E8011FFA
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *UpdateRepositoryMemberResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateRepositoryMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryMemberResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryMemberResponseBody) SetErrorCode(v string) *UpdateRepositoryMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBody) SetErrorMessage(v string) *UpdateRepositoryMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBody) SetRequestId(v string) *UpdateRepositoryMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBody) SetResult(v *UpdateRepositoryMemberResponseBodyResult) *UpdateRepositoryMemberResponseBody {
	s.Result = v
	return s
}

func (s *UpdateRepositoryMemberResponseBody) SetSuccess(v bool) *UpdateRepositoryMemberResponseBody {
	s.Success = &v
	return s
}

type UpdateRepositoryMemberResponseBodyResult struct {
	// example:
	//
	// 40
	AccessLevel *int32 `json:"accessLevel,omitempty" xml:"accessLevel,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112afcb7a6a35c3f67f1bea827c4/w/100/h/100
	AvatarUrl *string `json:"avatarUrl,omitempty" xml:"avatarUrl,omitempty"`
	// example:
	//
	// test@alibaba.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// 2020-08-08 08:08:08
	ExpireAt *string `json:"expireAt,omitempty" xml:"expireAt,omitempty"`
	// example:
	//
	// 30815
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// test_memeber_name
	MemberName *string `json:"memberName,omitempty" xml:"memberName,omitempty"`
	// example:
	//
	// USERS
	MemberType *string `json:"memberType,omitempty" xml:"memberType,omitempty"`
	// example:
	//
	// codeup
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 223241
	SourceId *int64 `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// Project
	SourceType *string `json:"sourceType,omitempty" xml:"sourceType,omitempty"`
	// example:
	//
	// normal
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// example:
	//
	// codeup-test
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
	// web url
	//
	// example:
	//
	// ""
	WebUrl *string `json:"webUrl,omitempty" xml:"webUrl,omitempty"`
}

func (s UpdateRepositoryMemberResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryMemberResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetAccessLevel(v int32) *UpdateRepositoryMemberResponseBodyResult {
	s.AccessLevel = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetAvatarUrl(v string) *UpdateRepositoryMemberResponseBodyResult {
	s.AvatarUrl = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetEmail(v string) *UpdateRepositoryMemberResponseBodyResult {
	s.Email = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetExpireAt(v string) *UpdateRepositoryMemberResponseBodyResult {
	s.ExpireAt = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetId(v int64) *UpdateRepositoryMemberResponseBodyResult {
	s.Id = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetMemberName(v string) *UpdateRepositoryMemberResponseBodyResult {
	s.MemberName = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetMemberType(v string) *UpdateRepositoryMemberResponseBodyResult {
	s.MemberType = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetName(v string) *UpdateRepositoryMemberResponseBodyResult {
	s.Name = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetSourceId(v int64) *UpdateRepositoryMemberResponseBodyResult {
	s.SourceId = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetSourceType(v string) *UpdateRepositoryMemberResponseBodyResult {
	s.SourceType = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetState(v string) *UpdateRepositoryMemberResponseBodyResult {
	s.State = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetUsername(v string) *UpdateRepositoryMemberResponseBodyResult {
	s.Username = &v
	return s
}

func (s *UpdateRepositoryMemberResponseBodyResult) SetWebUrl(v string) *UpdateRepositoryMemberResponseBodyResult {
	s.WebUrl = &v
	return s
}

type UpdateRepositoryMemberResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateRepositoryMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateRepositoryMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRepositoryMemberResponse) GoString() string {
	return s.String()
}

func (s *UpdateRepositoryMemberResponse) SetHeaders(v map[string]*string) *UpdateRepositoryMemberResponse {
	s.Headers = v
	return s
}

func (s *UpdateRepositoryMemberResponse) SetStatusCode(v int32) *UpdateRepositoryMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateRepositoryMemberResponse) SetBody(v *UpdateRepositoryMemberResponseBody) *UpdateRepositoryMemberResponse {
	s.Body = v
	return s
}

type UpdateResourceMemberRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// admin
	RoleName *string `json:"roleName,omitempty" xml:"roleName,omitempty"`
}

func (s UpdateResourceMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateResourceMemberRequest) GoString() string {
	return s.String()
}

func (s *UpdateResourceMemberRequest) SetRoleName(v string) *UpdateResourceMemberRequest {
	s.RoleName = &v
	return s
}

type UpdateResourceMemberResponseBody struct {
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ""
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateResourceMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateResourceMemberResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateResourceMemberResponseBody) SetErrorCode(v string) *UpdateResourceMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateResourceMemberResponseBody) SetErrorMessage(v string) *UpdateResourceMemberResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateResourceMemberResponseBody) SetRequestId(v string) *UpdateResourceMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateResourceMemberResponseBody) SetSuccess(v bool) *UpdateResourceMemberResponseBody {
	s.Success = &v
	return s
}

type UpdateResourceMemberResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateResourceMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateResourceMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateResourceMemberResponse) GoString() string {
	return s.String()
}

func (s *UpdateResourceMemberResponse) SetHeaders(v map[string]*string) *UpdateResourceMemberResponse {
	s.Headers = v
	return s
}

func (s *UpdateResourceMemberResponse) SetStatusCode(v int32) *UpdateResourceMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateResourceMemberResponse) SetBody(v *UpdateResourceMemberResponseBody) *UpdateResourceMemberResponse {
	s.Body = v
	return s
}

type UpdateTestCaseRequest struct {
	// This parameter is required.
	UpdateWorkitemPropertyRequest []*UpdateTestCaseRequestUpdateWorkitemPropertyRequest `json:"updateWorkitemPropertyRequest,omitempty" xml:"updateWorkitemPropertyRequest,omitempty" type:"Repeated"`
}

func (s UpdateTestCaseRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseRequest) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseRequest) SetUpdateWorkitemPropertyRequest(v []*UpdateTestCaseRequestUpdateWorkitemPropertyRequest) *UpdateTestCaseRequest {
	s.UpdateWorkitemPropertyRequest = v
	return s
}

type UpdateTestCaseRequestUpdateWorkitemPropertyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// tc.type
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0a032xx28107xxxx53e87a9
	FieldValue *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
}

func (s UpdateTestCaseRequestUpdateWorkitemPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseRequestUpdateWorkitemPropertyRequest) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseRequestUpdateWorkitemPropertyRequest) SetFieldIdentifier(v string) *UpdateTestCaseRequestUpdateWorkitemPropertyRequest {
	s.FieldIdentifier = &v
	return s
}

func (s *UpdateTestCaseRequestUpdateWorkitemPropertyRequest) SetFieldValue(v string) *UpdateTestCaseRequestUpdateWorkitemPropertyRequest {
	s.FieldValue = &v
	return s
}

type UpdateTestCaseResponseBody struct {
	Testcase *UpdateTestCaseResponseBodyTestcase `json:"Testcase,omitempty" xml:"Testcase,omitempty" type:"Struct"`
	// example:
	//
	// ""
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateTestCaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponseBody) SetTestcase(v *UpdateTestCaseResponseBodyTestcase) *UpdateTestCaseResponseBody {
	s.Testcase = v
	return s
}

func (s *UpdateTestCaseResponseBody) SetErrorCode(v string) *UpdateTestCaseResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateTestCaseResponseBody) SetErrorMsg(v string) *UpdateTestCaseResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *UpdateTestCaseResponseBody) SetRequestId(v string) *UpdateTestCaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTestCaseResponseBody) SetSuccess(v bool) *UpdateTestCaseResponseBody {
	s.Success = &v
	return s
}

type UpdateTestCaseResponseBodyTestcase struct {
	AssignedTo *UpdateTestCaseResponseBodyTestcaseAssignedTo `json:"assignedTo,omitempty" xml:"assignedTo,omitempty" type:"Struct"`
	// example:
	//
	// TestCase
	CategoryIdentifier *string                                       `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	Creator            *UpdateTestCaseResponseBodyTestcaseCreator    `json:"creator,omitempty" xml:"creator,omitempty" type:"Struct"`
	DetailInfo         *UpdateTestCaseResponseBodyTestcaseDetailInfo `json:"detailInfo,omitempty" xml:"detailInfo,omitempty" type:"Struct"`
	Directory          *UpdateTestCaseResponseBodyTestcaseDirectory  `json:"directory,omitempty" xml:"directory,omitempty" type:"Struct"`
	// example:
	//
	// c7f7033b021ead52cc42721382
	Identifier *string                                     `json:"identifier,omitempty" xml:"identifier,omitempty"`
	Modifier   *UpdateTestCaseResponseBodyTestcaseModifier `json:"modifier,omitempty" xml:"modifier,omitempty" type:"Struct"`
	// example:
	//
	// 1e7d7a412b91a2144ec4aa8411
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// TestRepo
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	Subject   *string `json:"subject,omitempty" xml:"subject,omitempty"`
}

func (s UpdateTestCaseResponseBodyTestcase) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponseBodyTestcase) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponseBodyTestcase) SetAssignedTo(v *UpdateTestCaseResponseBodyTestcaseAssignedTo) *UpdateTestCaseResponseBodyTestcase {
	s.AssignedTo = v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcase) SetCategoryIdentifier(v string) *UpdateTestCaseResponseBodyTestcase {
	s.CategoryIdentifier = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcase) SetCreator(v *UpdateTestCaseResponseBodyTestcaseCreator) *UpdateTestCaseResponseBodyTestcase {
	s.Creator = v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcase) SetDetailInfo(v *UpdateTestCaseResponseBodyTestcaseDetailInfo) *UpdateTestCaseResponseBodyTestcase {
	s.DetailInfo = v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcase) SetDirectory(v *UpdateTestCaseResponseBodyTestcaseDirectory) *UpdateTestCaseResponseBodyTestcase {
	s.Directory = v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcase) SetIdentifier(v string) *UpdateTestCaseResponseBodyTestcase {
	s.Identifier = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcase) SetModifier(v *UpdateTestCaseResponseBodyTestcaseModifier) *UpdateTestCaseResponseBodyTestcase {
	s.Modifier = v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcase) SetSpaceIdentifier(v string) *UpdateTestCaseResponseBodyTestcase {
	s.SpaceIdentifier = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcase) SetSpaceType(v string) *UpdateTestCaseResponseBodyTestcase {
	s.SpaceType = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcase) SetSubject(v string) *UpdateTestCaseResponseBodyTestcase {
	s.Subject = &v
	return s
}

type UpdateTestCaseResponseBodyTestcaseAssignedTo struct {
	// example:
	//
	// 1316xxxxxx8624xxx
	AssignIdentifier *string `json:"assignIdentifier,omitempty" xml:"assignIdentifier,omitempty"`
	Name             *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// xxxxxxxewdds12xxx
	TbRoleId *string `json:"tbRoleId,omitempty" xml:"tbRoleId,omitempty"`
}

func (s UpdateTestCaseResponseBodyTestcaseAssignedTo) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponseBodyTestcaseAssignedTo) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponseBodyTestcaseAssignedTo) SetAssignIdentifier(v string) *UpdateTestCaseResponseBodyTestcaseAssignedTo {
	s.AssignIdentifier = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseAssignedTo) SetName(v string) *UpdateTestCaseResponseBodyTestcaseAssignedTo {
	s.Name = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseAssignedTo) SetTbRoleId(v string) *UpdateTestCaseResponseBodyTestcaseAssignedTo {
	s.TbRoleId = &v
	return s
}

type UpdateTestCaseResponseBodyTestcaseCreator struct {
	// example:
	//
	// 1316xxxxxx8624xxx
	CreateIdentifier *string `json:"createIdentifier,omitempty" xml:"createIdentifier,omitempty"`
	// example:
	//
	// xxxxxxx
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s UpdateTestCaseResponseBodyTestcaseCreator) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponseBodyTestcaseCreator) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponseBodyTestcaseCreator) SetCreateIdentifier(v string) *UpdateTestCaseResponseBodyTestcaseCreator {
	s.CreateIdentifier = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseCreator) SetName(v string) *UpdateTestCaseResponseBodyTestcaseCreator {
	s.Name = &v
	return s
}

type UpdateTestCaseResponseBodyTestcaseDetailInfo struct {
	ExpectedResult *UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult `json:"expectedResult,omitempty" xml:"expectedResult,omitempty" type:"Struct"`
	Precondition   *UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition   `json:"precondition,omitempty" xml:"precondition,omitempty" type:"Struct"`
	StepContent    *UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent    `json:"stepContent,omitempty" xml:"stepContent,omitempty" type:"Struct"`
	// example:
	//
	// TEXT/TABLE
	StepType *string `json:"stepType,omitempty" xml:"stepType,omitempty"`
}

func (s UpdateTestCaseResponseBodyTestcaseDetailInfo) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponseBodyTestcaseDetailInfo) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfo) SetExpectedResult(v *UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) *UpdateTestCaseResponseBodyTestcaseDetailInfo {
	s.ExpectedResult = v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfo) SetPrecondition(v *UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition) *UpdateTestCaseResponseBodyTestcaseDetailInfo {
	s.Precondition = v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfo) SetStepContent(v *UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent) *UpdateTestCaseResponseBodyTestcaseDetailInfo {
	s.StepContent = v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfo) SetStepType(v string) *UpdateTestCaseResponseBodyTestcaseDetailInfo {
	s.StepType = &v
	return s
}

type UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult struct {
	ExpectContent *string `json:"expectContent,omitempty" xml:"expectContent,omitempty"`
	// example:
	//
	// MARKDOWN
	ExpectContentType *string `json:"expectContentType,omitempty" xml:"expectContentType,omitempty"`
	// example:
	//
	// 685340d13127b01185335bd360
	ExpectIdentifier *string `json:"expectIdentifier,omitempty" xml:"expectIdentifier,omitempty"`
}

func (s UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) SetExpectContent(v string) *UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult {
	s.ExpectContent = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) SetExpectContentType(v string) *UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult {
	s.ExpectContentType = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult) SetExpectIdentifier(v string) *UpdateTestCaseResponseBodyTestcaseDetailInfoExpectedResult {
	s.ExpectIdentifier = &v
	return s
}

type UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition struct {
	PreContent *string `json:"preContent,omitempty" xml:"preContent,omitempty"`
	// example:
	//
	// MARKDOWN
	PreContentType *string `json:"preContentType,omitempty" xml:"preContentType,omitempty"`
	// example:
	//
	// 3354596c7b3004480b635acf95
	PreIdentifier *string `json:"preIdentifier,omitempty" xml:"preIdentifier,omitempty"`
}

func (s UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition) SetPreContent(v string) *UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition {
	s.PreContent = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition) SetPreContentType(v string) *UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition {
	s.PreContentType = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition) SetPreIdentifier(v string) *UpdateTestCaseResponseBodyTestcaseDetailInfoPrecondition {
	s.PreIdentifier = &v
	return s
}

type UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent struct {
	StepContent *string `json:"stepContent,omitempty" xml:"stepContent,omitempty"`
	// example:
	//
	// RICHTEXT
	StepContentType *string `json:"stepContentType,omitempty" xml:"stepContentType,omitempty"`
	// example:
	//
	// ad504e6cdcd2165b28eb1e1b9f
	StepIdentifier *string `json:"stepIdentifier,omitempty" xml:"stepIdentifier,omitempty"`
}

func (s UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent) SetStepContent(v string) *UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent {
	s.StepContent = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent) SetStepContentType(v string) *UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent {
	s.StepContentType = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent) SetStepIdentifier(v string) *UpdateTestCaseResponseBodyTestcaseDetailInfoStepContent {
	s.StepIdentifier = &v
	return s
}

type UpdateTestCaseResponseBodyTestcaseDirectory struct {
	// example:
	//
	// 2973f597c14c6f533fffdcd05c
	ChildIdentifier *string `json:"childIdentifier,omitempty" xml:"childIdentifier,omitempty"`
	// example:
	//
	// e27b8eace6501ce51cf5d56784
	DirectoryIdentifier *string   `json:"directoryIdentifier,omitempty" xml:"directoryIdentifier,omitempty"`
	Name                *string   `json:"name,omitempty" xml:"name,omitempty"`
	PathName            []*string `json:"pathName,omitempty" xml:"pathName,omitempty" type:"Repeated"`
}

func (s UpdateTestCaseResponseBodyTestcaseDirectory) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponseBodyTestcaseDirectory) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponseBodyTestcaseDirectory) SetChildIdentifier(v string) *UpdateTestCaseResponseBodyTestcaseDirectory {
	s.ChildIdentifier = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDirectory) SetDirectoryIdentifier(v string) *UpdateTestCaseResponseBodyTestcaseDirectory {
	s.DirectoryIdentifier = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDirectory) SetName(v string) *UpdateTestCaseResponseBodyTestcaseDirectory {
	s.Name = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseDirectory) SetPathName(v []*string) *UpdateTestCaseResponseBodyTestcaseDirectory {
	s.PathName = v
	return s
}

type UpdateTestCaseResponseBodyTestcaseModifier struct {
	// example:
	//
	// 1316xxxxxx8624xxx
	ModifyIdentifier *string `json:"modifyIdentifier,omitempty" xml:"modifyIdentifier,omitempty"`
	// example:
	//
	// xxxxxxx
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s UpdateTestCaseResponseBodyTestcaseModifier) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponseBodyTestcaseModifier) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponseBodyTestcaseModifier) SetModifyIdentifier(v string) *UpdateTestCaseResponseBodyTestcaseModifier {
	s.ModifyIdentifier = &v
	return s
}

func (s *UpdateTestCaseResponseBodyTestcaseModifier) SetName(v string) *UpdateTestCaseResponseBodyTestcaseModifier {
	s.Name = &v
	return s
}

type UpdateTestCaseResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTestCaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTestCaseResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestCaseResponse) GoString() string {
	return s.String()
}

func (s *UpdateTestCaseResponse) SetHeaders(v map[string]*string) *UpdateTestCaseResponse {
	s.Headers = v
	return s
}

func (s *UpdateTestCaseResponse) SetStatusCode(v int32) *UpdateTestCaseResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTestCaseResponse) SetBody(v *UpdateTestCaseResponseBody) *UpdateTestCaseResponse {
	s.Body = v
	return s
}

type UpdateTestResultRequest struct {
	// example:
	//
	// 131xxx38624xxxx68
	Executor *string `json:"executor,omitempty" xml:"executor,omitempty"`
	// example:
	//
	// TO DO
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s UpdateTestResultRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestResultRequest) GoString() string {
	return s.String()
}

func (s *UpdateTestResultRequest) SetExecutor(v string) *UpdateTestResultRequest {
	s.Executor = &v
	return s
}

func (s *UpdateTestResultRequest) SetStatus(v string) *UpdateTestResultRequest {
	s.Status = &v
	return s
}

type UpdateTestResultResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateTestResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestResultResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTestResultResponseBody) SetErrorCode(v string) *UpdateTestResultResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateTestResultResponseBody) SetErrorMsg(v string) *UpdateTestResultResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *UpdateTestResultResponseBody) SetRequestId(v string) *UpdateTestResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTestResultResponseBody) SetSuccess(v bool) *UpdateTestResultResponseBody {
	s.Success = &v
	return s
}

type UpdateTestResultResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTestResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTestResultResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTestResultResponse) GoString() string {
	return s.String()
}

func (s *UpdateTestResultResponse) SetHeaders(v map[string]*string) *UpdateTestResultResponse {
	s.Headers = v
	return s
}

func (s *UpdateTestResultResponse) SetStatusCode(v int32) *UpdateTestResultResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTestResultResponse) SetBody(v *UpdateTestResultResponseBody) *UpdateTestResultResponse {
	s.Body = v
	return s
}

type UpdateVariableGroupRequest struct {
	// example:
	//
	// 变量组
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 变量组
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [{"isEncrypted":true,"name":"name1","value":"vaue1"}]
	Variables *string `json:"variables,omitempty" xml:"variables,omitempty"`
}

func (s UpdateVariableGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateVariableGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateVariableGroupRequest) SetDescription(v string) *UpdateVariableGroupRequest {
	s.Description = &v
	return s
}

func (s *UpdateVariableGroupRequest) SetName(v string) *UpdateVariableGroupRequest {
	s.Name = &v
	return s
}

func (s *UpdateVariableGroupRequest) SetVariables(v string) *UpdateVariableGroupRequest {
	s.Variables = &v
	return s
}

type UpdateVariableGroupResponseBody struct {
	// example:
	//
	// ”“
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// ”“
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateVariableGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateVariableGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateVariableGroupResponseBody) SetErrorCode(v string) *UpdateVariableGroupResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateVariableGroupResponseBody) SetErrorMessage(v string) *UpdateVariableGroupResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateVariableGroupResponseBody) SetRequestId(v string) *UpdateVariableGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateVariableGroupResponseBody) SetSuccess(v bool) *UpdateVariableGroupResponseBody {
	s.Success = &v
	return s
}

type UpdateVariableGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateVariableGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateVariableGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateVariableGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateVariableGroupResponse) SetHeaders(v map[string]*string) *UpdateVariableGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateVariableGroupResponse) SetStatusCode(v int32) *UpdateVariableGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateVariableGroupResponse) SetBody(v *UpdateVariableGroupResponseBody) *UpdateVariableGroupResponse {
	s.Body = v
	return s
}

type UpdateWorkItemRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// subject
	FieldType *string `json:"fieldType,omitempty" xml:"fieldType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// e8b2xxxxxx2abdxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// subject
	PropertyKey *string `json:"propertyKey,omitempty" xml:"propertyKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// newValue
	PropertyValue *string `json:"propertyValue,omitempty" xml:"propertyValue,omitempty"`
}

func (s UpdateWorkItemRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkItemRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkItemRequest) SetFieldType(v string) *UpdateWorkItemRequest {
	s.FieldType = &v
	return s
}

func (s *UpdateWorkItemRequest) SetIdentifier(v string) *UpdateWorkItemRequest {
	s.Identifier = &v
	return s
}

func (s *UpdateWorkItemRequest) SetPropertyKey(v string) *UpdateWorkItemRequest {
	s.PropertyKey = &v
	return s
}

func (s *UpdateWorkItemRequest) SetPropertyValue(v string) *UpdateWorkItemRequest {
	s.PropertyValue = &v
	return s
}

type UpdateWorkItemResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success  *bool                               `json:"success,omitempty" xml:"success,omitempty"`
	Workitem *UpdateWorkItemResponseBodyWorkitem `json:"workitem,omitempty" xml:"workitem,omitempty" type:"Struct"`
}

func (s UpdateWorkItemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkItemResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWorkItemResponseBody) SetErrorCode(v string) *UpdateWorkItemResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateWorkItemResponseBody) SetErrorMessage(v string) *UpdateWorkItemResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateWorkItemResponseBody) SetRequestId(v string) *UpdateWorkItemResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateWorkItemResponseBody) SetSuccess(v bool) *UpdateWorkItemResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateWorkItemResponseBody) SetWorkitem(v *UpdateWorkItemResponseBodyWorkitem) *UpdateWorkItemResponseBody {
	s.Workitem = v
	return s
}

type UpdateWorkItemResponseBodyWorkitem struct {
	// example:
	//
	// 19xx7043xxxxxxx914
	AssignedTo *string `json:"assignedTo,omitempty" xml:"assignedTo,omitempty"`
	// example:
	//
	// Req
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// html格式
	Document       *string `json:"document,omitempty" xml:"document,omitempty"`
	DocumentFormat *string `json:"documentFormat,omitempty" xml:"documentFormat,omitempty"`
	// example:
	//
	// 1640850318000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1640850318000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// NORMAL
	LogicalStatus *string `json:"logicalStatus,omitempty" xml:"logicalStatus,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx24
	ParentIdentifier *string `json:"parentIdentifier,omitempty" xml:"parentIdentifier,omitempty"`
	// example:
	//
	// ACFS-1
	SerialNumber *string `json:"serialNumber,omitempty" xml:"serialNumber,omitempty"`
	// example:
	//
	// e8b26xxxxx6e76aa20xxxxx23
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// 需求项目
	SpaceName *string `json:"spaceName,omitempty" xml:"spaceName,omitempty"`
	// example:
	//
	// Project
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	// example:
	//
	// 75528f17703e92e5a568......
	SprintIdentifier *string `json:"sprintIdentifier,omitempty" xml:"sprintIdentifier,omitempty"`
	// example:
	//
	// 待处理
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 111000
	StatusIdentifier *string `json:"statusIdentifier,omitempty" xml:"statusIdentifier,omitempty"`
	// example:
	//
	// 1
	StatusStageIdentifier *string `json:"statusStageIdentifier,omitempty" xml:"statusStageIdentifier,omitempty"`
	// example:
	//
	// 测试工作项
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// example:
	//
	// 1640850328000
	UpdateStatusAt *int64 `json:"updateStatusAt,omitempty" xml:"updateStatusAt,omitempty"`
	// example:
	//
	// 9uxxxxxxre573f5xxxxxx0
	WorkitemTypeIdentifier *string `json:"workitemTypeIdentifier,omitempty" xml:"workitemTypeIdentifier,omitempty"`
}

func (s UpdateWorkItemResponseBodyWorkitem) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkItemResponseBodyWorkitem) GoString() string {
	return s.String()
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetAssignedTo(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.AssignedTo = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetCategoryIdentifier(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.CategoryIdentifier = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetCreator(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.Creator = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetDocument(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.Document = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetDocumentFormat(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.DocumentFormat = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetGmtCreate(v int64) *UpdateWorkItemResponseBodyWorkitem {
	s.GmtCreate = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetGmtModified(v int64) *UpdateWorkItemResponseBodyWorkitem {
	s.GmtModified = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetIdentifier(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.Identifier = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetLogicalStatus(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.LogicalStatus = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetModifier(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.Modifier = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetParentIdentifier(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.ParentIdentifier = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetSerialNumber(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.SerialNumber = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetSpaceIdentifier(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.SpaceIdentifier = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetSpaceName(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.SpaceName = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetSpaceType(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.SpaceType = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetSprintIdentifier(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.SprintIdentifier = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetStatus(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.Status = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetStatusIdentifier(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.StatusIdentifier = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetStatusStageIdentifier(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.StatusStageIdentifier = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetSubject(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.Subject = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetUpdateStatusAt(v int64) *UpdateWorkItemResponseBodyWorkitem {
	s.UpdateStatusAt = &v
	return s
}

func (s *UpdateWorkItemResponseBodyWorkitem) SetWorkitemTypeIdentifier(v string) *UpdateWorkItemResponseBodyWorkitem {
	s.WorkitemTypeIdentifier = &v
	return s
}

type UpdateWorkItemResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateWorkItemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWorkItemResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkItemResponse) GoString() string {
	return s.String()
}

func (s *UpdateWorkItemResponse) SetHeaders(v map[string]*string) *UpdateWorkItemResponse {
	s.Headers = v
	return s
}

func (s *UpdateWorkItemResponse) SetStatusCode(v int32) *UpdateWorkItemResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWorkItemResponse) SetBody(v *UpdateWorkItemResponseBody) *UpdateWorkItemResponse {
	s.Body = v
	return s
}

type UpdateWorkitemCommentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1964584
	CommentId *int64 `json:"commentId,omitempty" xml:"commentId,omitempty"`
	// This parameter is required.
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// MARKDOWN/RICHTEXT
	FormatType *string `json:"formatType,omitempty" xml:"formatType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 9144ef6b72d8exxxxx9e61a4d0
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s UpdateWorkitemCommentRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkitemCommentRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkitemCommentRequest) SetCommentId(v int64) *UpdateWorkitemCommentRequest {
	s.CommentId = &v
	return s
}

func (s *UpdateWorkitemCommentRequest) SetContent(v string) *UpdateWorkitemCommentRequest {
	s.Content = &v
	return s
}

func (s *UpdateWorkitemCommentRequest) SetFormatType(v string) *UpdateWorkitemCommentRequest {
	s.FormatType = &v
	return s
}

func (s *UpdateWorkitemCommentRequest) SetWorkitemIdentifier(v string) *UpdateWorkitemCommentRequest {
	s.WorkitemIdentifier = &v
	return s
}

type UpdateWorkitemCommentResponseBody struct {
	Comment *UpdateWorkitemCommentResponseBodyComment `json:"comment,omitempty" xml:"comment,omitempty" type:"Struct"`
	// example:
	//
	// InvalidParam.NotFound
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// Id of the request
	//
	// example:
	//
	// F7B85D1B-D1C2-140F-A039-341859F130B9
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateWorkitemCommentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkitemCommentResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWorkitemCommentResponseBody) SetComment(v *UpdateWorkitemCommentResponseBodyComment) *UpdateWorkitemCommentResponseBody {
	s.Comment = v
	return s
}

func (s *UpdateWorkitemCommentResponseBody) SetErrorCode(v string) *UpdateWorkitemCommentResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBody) SetErrorMsg(v string) *UpdateWorkitemCommentResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBody) SetRequestId(v string) *UpdateWorkitemCommentResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBody) SetSuccess(v string) *UpdateWorkitemCommentResponseBody {
	s.Success = &v
	return s
}

type UpdateWorkitemCommentResponseBodyComment struct {
	Content *string `json:"content,omitempty" xml:"content,omitempty"`
	// example:
	//
	// 1667205617061
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// MARKDOWN/RICHTEXT
	FormatType *string `json:"formatType,omitempty" xml:"formatType,omitempty"`
	// example:
	//
	// 1964584
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true/false
	IsTop *bool `json:"isTop,omitempty" xml:"isTop,omitempty"`
	// example:
	//
	// 1646323200000
	ModifiedTime *int64 `json:"modifiedTime,omitempty" xml:"modifiedTime,omitempty"`
	// example:
	//
	// 2684432
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// example:
	//
	// deafe5f33xxxxx6a259d8dafd
	TargetIdentifier *string `json:"targetIdentifier,omitempty" xml:"targetIdentifier,omitempty"`
	// example:
	//
	// workitem
	TargetType *string `json:"targetType,omitempty" xml:"targetType,omitempty"`
	// example:
	//
	// 1667205617089
	TopTime *int64                                        `json:"topTime,omitempty" xml:"topTime,omitempty"`
	User    *UpdateWorkitemCommentResponseBodyCommentUser `json:"user,omitempty" xml:"user,omitempty" type:"Struct"`
}

func (s UpdateWorkitemCommentResponseBodyComment) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkitemCommentResponseBodyComment) GoString() string {
	return s.String()
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetContent(v string) *UpdateWorkitemCommentResponseBodyComment {
	s.Content = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetCreateTime(v int64) *UpdateWorkitemCommentResponseBodyComment {
	s.CreateTime = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetFormatType(v string) *UpdateWorkitemCommentResponseBodyComment {
	s.FormatType = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetId(v string) *UpdateWorkitemCommentResponseBodyComment {
	s.Id = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetIsTop(v bool) *UpdateWorkitemCommentResponseBodyComment {
	s.IsTop = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetModifiedTime(v int64) *UpdateWorkitemCommentResponseBodyComment {
	s.ModifiedTime = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetParentId(v int64) *UpdateWorkitemCommentResponseBodyComment {
	s.ParentId = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetTargetIdentifier(v string) *UpdateWorkitemCommentResponseBodyComment {
	s.TargetIdentifier = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetTargetType(v string) *UpdateWorkitemCommentResponseBodyComment {
	s.TargetType = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetTopTime(v int64) *UpdateWorkitemCommentResponseBodyComment {
	s.TopTime = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyComment) SetUser(v *UpdateWorkitemCommentResponseBodyCommentUser) *UpdateWorkitemCommentResponseBodyComment {
	s.User = v
	return s
}

type UpdateWorkitemCommentResponseBodyCommentUser struct {
	// example:
	//
	// 1316458xxxxx41068
	Account *string `json:"account,omitempty" xml:"account,omitempty"`
	// example:
	//
	// https://tcs-devops.aliyuncs.com/thumbnail/112m7150e256dbba0d6456bafbb65c81f90d/w/200/h/200
	Avatar      *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
	// example:
	//
	// 9144ef6b72d8exxxxx9e61a4d0
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	NickName   *string `json:"nickName,omitempty" xml:"nickName,omitempty"`
	RealName   *string `json:"realName,omitempty" xml:"realName,omitempty"`
}

func (s UpdateWorkitemCommentResponseBodyCommentUser) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkitemCommentResponseBodyCommentUser) GoString() string {
	return s.String()
}

func (s *UpdateWorkitemCommentResponseBodyCommentUser) SetAccount(v string) *UpdateWorkitemCommentResponseBodyCommentUser {
	s.Account = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyCommentUser) SetAvatar(v string) *UpdateWorkitemCommentResponseBodyCommentUser {
	s.Avatar = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyCommentUser) SetDisplayName(v string) *UpdateWorkitemCommentResponseBodyCommentUser {
	s.DisplayName = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyCommentUser) SetIdentifier(v string) *UpdateWorkitemCommentResponseBodyCommentUser {
	s.Identifier = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyCommentUser) SetNickName(v string) *UpdateWorkitemCommentResponseBodyCommentUser {
	s.NickName = &v
	return s
}

func (s *UpdateWorkitemCommentResponseBodyCommentUser) SetRealName(v string) *UpdateWorkitemCommentResponseBodyCommentUser {
	s.RealName = &v
	return s
}

type UpdateWorkitemCommentResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateWorkitemCommentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWorkitemCommentResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkitemCommentResponse) GoString() string {
	return s.String()
}

func (s *UpdateWorkitemCommentResponse) SetHeaders(v map[string]*string) *UpdateWorkitemCommentResponse {
	s.Headers = v
	return s
}

func (s *UpdateWorkitemCommentResponse) SetStatusCode(v int32) *UpdateWorkitemCommentResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWorkitemCommentResponse) SetBody(v *UpdateWorkitemCommentResponseBody) *UpdateWorkitemCommentResponse {
	s.Body = v
	return s
}

type UpdateWorkitemFieldRequest struct {
	// This parameter is required.
	UpdateWorkitemPropertyRequest []*UpdateWorkitemFieldRequestUpdateWorkitemPropertyRequest `json:"updateWorkitemPropertyRequest,omitempty" xml:"updateWorkitemPropertyRequest,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 9144ef6b72d8exxxxx9e61a4d0
	WorkitemIdentifier *string `json:"workitemIdentifier,omitempty" xml:"workitemIdentifier,omitempty"`
}

func (s UpdateWorkitemFieldRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkitemFieldRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkitemFieldRequest) SetUpdateWorkitemPropertyRequest(v []*UpdateWorkitemFieldRequestUpdateWorkitemPropertyRequest) *UpdateWorkitemFieldRequest {
	s.UpdateWorkitemPropertyRequest = v
	return s
}

func (s *UpdateWorkitemFieldRequest) SetWorkitemIdentifier(v string) *UpdateWorkitemFieldRequest {
	s.WorkitemIdentifier = &v
	return s
}

type UpdateWorkitemFieldRequestUpdateWorkitemPropertyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// tag
	FieldIdentifier *string `json:"fieldIdentifier,omitempty" xml:"fieldIdentifier,omitempty"`
	// This parameter is required.
	FieldValue *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
}

func (s UpdateWorkitemFieldRequestUpdateWorkitemPropertyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkitemFieldRequestUpdateWorkitemPropertyRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkitemFieldRequestUpdateWorkitemPropertyRequest) SetFieldIdentifier(v string) *UpdateWorkitemFieldRequestUpdateWorkitemPropertyRequest {
	s.FieldIdentifier = &v
	return s
}

func (s *UpdateWorkitemFieldRequestUpdateWorkitemPropertyRequest) SetFieldValue(v string) *UpdateWorkitemFieldRequestUpdateWorkitemPropertyRequest {
	s.FieldValue = &v
	return s
}

type UpdateWorkitemFieldResponseBody struct {
	// example:
	//
	// Openapi.RequestError
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// error
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// ASSDS-ASSASX-XSAXSA-XSAXSAXS
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success  *bool                                    `json:"success,omitempty" xml:"success,omitempty"`
	Workitem *UpdateWorkitemFieldResponseBodyWorkitem `json:"workitem,omitempty" xml:"workitem,omitempty" type:"Struct"`
}

func (s UpdateWorkitemFieldResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkitemFieldResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWorkitemFieldResponseBody) SetErrorCode(v string) *UpdateWorkitemFieldResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBody) SetErrorMsg(v string) *UpdateWorkitemFieldResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBody) SetRequestId(v string) *UpdateWorkitemFieldResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBody) SetSuccess(v bool) *UpdateWorkitemFieldResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBody) SetWorkitem(v *UpdateWorkitemFieldResponseBodyWorkitem) *UpdateWorkitemFieldResponseBody {
	s.Workitem = v
	return s
}

type UpdateWorkitemFieldResponseBodyWorkitem struct {
	// example:
	//
	// 19xx7043xxxxxxx914
	AssignedTo *string `json:"assignedTo,omitempty" xml:"assignedTo,omitempty"`
	// example:
	//
	// Req
	CategoryIdentifier *string `json:"categoryIdentifier,omitempty" xml:"categoryIdentifier,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Creator *string `json:"creator,omitempty" xml:"creator,omitempty"`
	// example:
	//
	// html格式
	Document *string `json:"document,omitempty" xml:"document,omitempty"`
	// example:
	//
	// 1640850318000
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// example:
	//
	// 1640850318000
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx23
	Identifier *string `json:"identifier,omitempty" xml:"identifier,omitempty"`
	// example:
	//
	// NORMAL
	LogicalStatus *string `json:"logicalStatus,omitempty" xml:"logicalStatus,omitempty"`
	// example:
	//
	// 19xx7043xxxxxxx914
	Modifier *string `json:"modifier,omitempty" xml:"modifier,omitempty"`
	// example:
	//
	// e8bxxxxxxxxxxxxxxxx24
	ParentIdentifier *string `json:"parentIdentifier,omitempty" xml:"parentIdentifier,omitempty"`
	// example:
	//
	// 1
	SerialNumber *string `json:"serialNumber,omitempty" xml:"serialNumber,omitempty"`
	// example:
	//
	// e8b26xxxxx6e76aa20xxxxx23
	SpaceIdentifier *string `json:"spaceIdentifier,omitempty" xml:"spaceIdentifier,omitempty"`
	// example:
	//
	// 需求项目
	SpaceName *string `json:"spaceName,omitempty" xml:"spaceName,omitempty"`
	// example:
	//
	// Project
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	// example:
	//
	// 75528f17703e92e5a568......
	SprintIdentifier *string `json:"sprintIdentifier,omitempty" xml:"sprintIdentifier,omitempty"`
	// example:
	//
	// 待处理
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 28
	StatusIdentifier *string `json:"statusIdentifier,omitempty" xml:"statusIdentifier,omitempty"`
	// example:
	//
	// 1
	StatusStageIdentifier *string `json:"statusStageIdentifier,omitempty" xml:"statusStageIdentifier,omitempty"`
	// example:
	//
	// 测试工作项
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// example:
	//
	// 1640850328000
	UpdateStatusAt *int64 `json:"updateStatusAt,omitempty" xml:"updateStatusAt,omitempty"`
	// example:
	//
	// 9uxxxxxxre573f5xxxxxx0
	WorkitemTypeIdentifier *string `json:"workitemTypeIdentifier,omitempty" xml:"workitemTypeIdentifier,omitempty"`
}

func (s UpdateWorkitemFieldResponseBodyWorkitem) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkitemFieldResponseBodyWorkitem) GoString() string {
	return s.String()
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetAssignedTo(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.AssignedTo = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetCategoryIdentifier(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.CategoryIdentifier = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetCreator(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.Creator = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetDocument(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.Document = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetGmtCreate(v int64) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.GmtCreate = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetGmtModified(v int64) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.GmtModified = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetIdentifier(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.Identifier = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetLogicalStatus(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.LogicalStatus = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetModifier(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.Modifier = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetParentIdentifier(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.ParentIdentifier = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetSerialNumber(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.SerialNumber = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetSpaceIdentifier(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.SpaceIdentifier = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetSpaceName(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.SpaceName = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetSpaceType(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.SpaceType = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetSprintIdentifier(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.SprintIdentifier = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetStatus(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.Status = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetStatusIdentifier(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.StatusIdentifier = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetStatusStageIdentifier(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.StatusStageIdentifier = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetSubject(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.Subject = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetUpdateStatusAt(v int64) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.UpdateStatusAt = &v
	return s
}

func (s *UpdateWorkitemFieldResponseBodyWorkitem) SetWorkitemTypeIdentifier(v string) *UpdateWorkitemFieldResponseBodyWorkitem {
	s.WorkitemTypeIdentifier = &v
	return s
}

type UpdateWorkitemFieldResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateWorkitemFieldResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWorkitemFieldResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkitemFieldResponse) GoString() string {
	return s.String()
}

func (s *UpdateWorkitemFieldResponse) SetHeaders(v map[string]*string) *UpdateWorkitemFieldResponse {
	s.Headers = v
	return s
}

func (s *UpdateWorkitemFieldResponse) SetStatusCode(v int32) *UpdateWorkitemFieldResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWorkitemFieldResponse) SetBody(v *UpdateWorkitemFieldResponseBody) *UpdateWorkitemFieldResponse {
	s.Body = v
	return s
}

type WorkitemAttachmentCreateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1106473328927498/1106473328927498/5ec071g0e5ij85fche8cddchje.xlsx
	FileKey *string `json:"fileKey,omitempty" xml:"fileKey,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx.tgz
	OriginalFilename *string `json:"originalFilename,omitempty" xml:"originalFilename,omitempty"`
}

func (s WorkitemAttachmentCreateRequest) String() string {
	return tea.Prettify(s)
}

func (s WorkitemAttachmentCreateRequest) GoString() string {
	return s.String()
}

func (s *WorkitemAttachmentCreateRequest) SetFileKey(v string) *WorkitemAttachmentCreateRequest {
	s.FileKey = &v
	return s
}

func (s *WorkitemAttachmentCreateRequest) SetOriginalFilename(v string) *WorkitemAttachmentCreateRequest {
	s.OriginalFilename = &v
	return s
}

type WorkitemAttachmentCreateResponseBody struct {
	// example:
	//
	// SYSTEM_UNKNOWN_ERROR
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// example:
	//
	// InvalidTagGroup.IdNotFoundntraceId: 2137844496.4337.16624448853053831
	ErrorMessage *string `json:"errorMessage,omitempty" xml:"errorMessage,omitempty"`
	// example:
	//
	// F590C9D8-E908-5B6C-95AC-56B7E8011FFA
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"success,omitempty" xml:"success,omitempty"`
}

func (s WorkitemAttachmentCreateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s WorkitemAttachmentCreateResponseBody) GoString() string {
	return s.String()
}

func (s *WorkitemAttachmentCreateResponseBody) SetErrorCode(v string) *WorkitemAttachmentCreateResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *WorkitemAttachmentCreateResponseBody) SetErrorMessage(v string) *WorkitemAttachmentCreateResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *WorkitemAttachmentCreateResponseBody) SetRequestId(v string) *WorkitemAttachmentCreateResponseBody {
	s.RequestId = &v
	return s
}

func (s *WorkitemAttachmentCreateResponseBody) SetSuccess(v string) *WorkitemAttachmentCreateResponseBody {
	s.Success = &v
	return s
}

type WorkitemAttachmentCreateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WorkitemAttachmentCreateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s WorkitemAttachmentCreateResponse) String() string {
	return tea.Prettify(s)
}

func (s WorkitemAttachmentCreateResponse) GoString() string {
	return s.String()
}

func (s *WorkitemAttachmentCreateResponse) SetHeaders(v map[string]*string) *WorkitemAttachmentCreateResponse {
	s.Headers = v
	return s
}

func (s *WorkitemAttachmentCreateResponse) SetStatusCode(v int32) *WorkitemAttachmentCreateResponse {
	s.StatusCode = &v
	return s
}

func (s *WorkitemAttachmentCreateResponse) SetBody(v *WorkitemAttachmentCreateResponseBody) *WorkitemAttachmentCreateResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("devops"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加组成员
//
// @param request - AddGroupMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddGroupMemberResponse
func (client *Client) AddGroupMemberWithOptions(groupId *string, request *AddGroupMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddGroupMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessLevel)) {
		body["accessLevel"] = request.AccessLevel
	}

	if !tea.BoolValue(util.IsUnset(request.AliyunPks)) {
		body["aliyunPks"] = request.AliyunPks
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddGroupMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/groups/" + tea.StringValue(openapiutil.GetEncodeParam(groupId)) + "/members/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AddGroupMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加组成员
//
// @param request - AddGroupMemberRequest
//
// @return AddGroupMemberResponse
func (client *Client) AddGroupMember(groupId *string, request *AddGroupMemberRequest) (_result *AddGroupMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddGroupMemberResponse{}
	_body, _err := client.AddGroupMemberWithOptions(groupId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加流水线关联
//
// @param request - AddPipelineRelationsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPipelineRelationsResponse
func (client *Client) AddPipelineRelationsWithOptions(organizationId *string, pipelineId *string, request *AddPipelineRelationsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddPipelineRelationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RelObjectIds)) {
		query["relObjectIds"] = request.RelObjectIds
	}

	if !tea.BoolValue(util.IsUnset(request.RelObjectType)) {
		query["relObjectType"] = request.RelObjectType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPipelineRelations"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRelations"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPipelineRelationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加流水线关联
//
// @param request - AddPipelineRelationsRequest
//
// @return AddPipelineRelationsResponse
func (client *Client) AddPipelineRelations(organizationId *string, pipelineId *string, request *AddPipelineRelationsRequest) (_result *AddPipelineRelationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddPipelineRelationsResponse{}
	_body, _err := client.AddPipelineRelationsWithOptions(organizationId, pipelineId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加代码库成员
//
// @param request - AddRepositoryMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddRepositoryMemberResponse
func (client *Client) AddRepositoryMemberWithOptions(repositoryId *string, request *AddRepositoryMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddRepositoryMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessLevel)) {
		body["accessLevel"] = request.AccessLevel
	}

	if !tea.BoolValue(util.IsUnset(request.AliyunPks)) {
		body["aliyunPks"] = request.AliyunPks
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddRepositoryMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/members"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AddRepositoryMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加代码库成员
//
// @param request - AddRepositoryMemberRequest
//
// @return AddRepositoryMemberResponse
func (client *Client) AddRepositoryMember(repositoryId *string, request *AddRepositoryMemberRequest) (_result *AddRepositoryMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddRepositoryMemberResponse{}
	_body, _err := client.AddRepositoryMemberWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加代码库Webhook
//
// @param request - AddWebhookRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddWebhookResponse
func (client *Client) AddWebhookWithOptions(repositoryId *string, request *AddWebhookRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *AddWebhookResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnableSslVerification)) {
		body["enableSslVerification"] = request.EnableSslVerification
	}

	if !tea.BoolValue(util.IsUnset(request.MergeRequestsEvents)) {
		body["mergeRequestsEvents"] = request.MergeRequestsEvents
	}

	if !tea.BoolValue(util.IsUnset(request.NoteEvents)) {
		body["noteEvents"] = request.NoteEvents
	}

	if !tea.BoolValue(util.IsUnset(request.PushEvents)) {
		body["pushEvents"] = request.PushEvents
	}

	if !tea.BoolValue(util.IsUnset(request.SecretToken)) {
		body["secretToken"] = request.SecretToken
	}

	if !tea.BoolValue(util.IsUnset(request.TagPushEvents)) {
		body["tagPushEvents"] = request.TagPushEvents
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		body["url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddWebhook"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/webhooks/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &AddWebhookResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加代码库Webhook
//
// @param request - AddWebhookRequest
//
// @return AddWebhookResponse
func (client *Client) AddWebhook(repositoryId *string, request *AddWebhookRequest) (_result *AddWebhookResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &AddWebhookResponse{}
	_body, _err := client.AddWebhookWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消执行研发阶段流水线
//
// @param request - CancelExecutionReleaseStageRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelExecutionReleaseStageResponse
func (client *Client) CancelExecutionReleaseStageWithOptions(appName *string, releaseWorkflowSn *string, releaseStageSn *string, executionNumber *string, request *CancelExecutionReleaseStageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CancelExecutionReleaseStageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelExecutionReleaseStage"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/releaseWorkflows/" + tea.StringValue(openapiutil.GetEncodeParam(releaseWorkflowSn)) + "/releaseStages/" + tea.StringValue(openapiutil.GetEncodeParam(releaseStageSn)) + "/executions/" + tea.StringValue(openapiutil.GetEncodeParam(executionNumber)) + "%3Acancel"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelExecutionReleaseStageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 取消执行研发阶段流水线
//
// @param request - CancelExecutionReleaseStageRequest
//
// @return CancelExecutionReleaseStageResponse
func (client *Client) CancelExecutionReleaseStage(appName *string, releaseWorkflowSn *string, releaseStageSn *string, executionNumber *string, request *CancelExecutionReleaseStageRequest) (_result *CancelExecutionReleaseStageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CancelExecutionReleaseStageResponse{}
	_body, _err := client.CancelExecutionReleaseStageWithOptions(appName, releaseWorkflowSn, releaseStageSn, executionNumber, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 关闭代码评审
//
// @param request - CloseMergeRequestRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CloseMergeRequestResponse
func (client *Client) CloseMergeRequestWithOptions(repositoryId *string, localId *string, request *CloseMergeRequestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CloseMergeRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CloseMergeRequest"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/merge_requests/" + tea.StringValue(openapiutil.GetEncodeParam(localId)) + "/close"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CloseMergeRequestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 关闭代码评审
//
// @param request - CloseMergeRequestRequest
//
// @return CloseMergeRequestResponse
func (client *Client) CloseMergeRequest(repositoryId *string, localId *string, request *CloseMergeRequestRequest) (_result *CloseMergeRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CloseMergeRequestResponse{}
	_body, _err := client.CloseMergeRequestWithOptions(repositoryId, localId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加应用成员
//
// @param request - CreateAppMembersRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAppMembersResponse
func (client *Client) CreateAppMembersWithOptions(appName *string, request *CreateAppMembersRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateAppMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PlayerList)) {
		body["playerList"] = request.PlayerList
	}

	if !tea.BoolValue(util.IsUnset(request.RoleNames)) {
		body["roleNames"] = request.RoleNames
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAppMembers"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/members"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("string"),
	}
	_result = &CreateAppMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加应用成员
//
// @param request - CreateAppMembersRequest
//
// @return CreateAppMembersResponse
func (client *Client) CreateAppMembers(appName *string, request *CreateAppMembersRequest) (_result *CreateAppMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateAppMembersResponse{}
	_body, _err := client.CreateAppMembersWithOptions(appName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建分支
//
// @param request - CreateBranchRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBranchResponse
func (client *Client) CreateBranchWithOptions(repositoryId *string, request *CreateBranchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateBranchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BranchName)) {
		body["branchName"] = request.BranchName
	}

	if !tea.BoolValue(util.IsUnset(request.Ref)) {
		body["ref"] = request.Ref
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBranch"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/branches"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBranchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建分支
//
// @param request - CreateBranchRequest
//
// @return CreateBranchResponse
func (client *Client) CreateBranch(repositoryId *string, request *CreateBranchRequest) (_result *CreateBranchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateBranchResponse{}
	_body, _err := client.CreateBranchWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建变更
//
// @param request - CreateChangeRequestRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateChangeRequestResponse
func (client *Client) CreateChangeRequestWithOptions(appName *string, request *CreateChangeRequestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateChangeRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppCodeRepoSn)) {
		body["appCodeRepoSn"] = request.AppCodeRepoSn
	}

	if !tea.BoolValue(util.IsUnset(request.AutoDeleteBranchWhenEnd)) {
		body["autoDeleteBranchWhenEnd"] = request.AutoDeleteBranchWhenEnd
	}

	if !tea.BoolValue(util.IsUnset(request.BranchName)) {
		body["branchName"] = request.BranchName
	}

	if !tea.BoolValue(util.IsUnset(request.CreateBranch)) {
		body["createBranch"] = request.CreateBranch
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccountId)) {
		body["ownerAccountId"] = request.OwnerAccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		body["ownerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateChangeRequest"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/changeRequests"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateChangeRequestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建变更
//
// @param request - CreateChangeRequestRequest
//
// @return CreateChangeRequestResponse
func (client *Client) CreateChangeRequest(appName *string, request *CreateChangeRequestRequest) (_result *CreateChangeRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateChangeRequestResponse{}
	_body, _err := client.CreateChangeRequestWithOptions(appName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加检查运行记录
//
// @param request - CreateCheckRunRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCheckRunResponse
func (client *Client) CreateCheckRunWithOptions(request *CreateCheckRunRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCheckRunResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Annotations)) {
		body["annotations"] = request.Annotations
	}

	if !tea.BoolValue(util.IsUnset(request.CompletedAt)) {
		body["completedAt"] = request.CompletedAt
	}

	if !tea.BoolValue(util.IsUnset(request.Conclusion)) {
		body["conclusion"] = request.Conclusion
	}

	if !tea.BoolValue(util.IsUnset(request.DetailsUrl)) {
		body["detailsUrl"] = request.DetailsUrl
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalId)) {
		body["externalId"] = request.ExternalId
	}

	if !tea.BoolValue(util.IsUnset(request.HeadSha)) {
		body["headSha"] = request.HeadSha
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Output)) {
		body["output"] = request.Output
	}

	if !tea.BoolValue(util.IsUnset(request.StartedAt)) {
		body["startedAt"] = request.StartedAt
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCheckRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/check_runs/create_check_run"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCheckRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加检查运行记录
//
// @param request - CreateCheckRunRequest
//
// @return CreateCheckRunResponse
func (client *Client) CreateCheckRun(request *CreateCheckRunRequest) (_result *CreateCheckRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCheckRunResponse{}
	_body, _err := client.CreateCheckRunWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建评论
//
// @param request - CreateCommentRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCommentResponse
func (client *Client) CreateCommentWithOptions(request *CreateCommentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCommentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.LocalId)) {
		query["localId"] = request.LocalId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommentType)) {
		body["commentType"] = request.CommentType
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Draft)) {
		body["draft"] = request.Draft
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		body["filePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.LineNumber)) {
		body["lineNumber"] = request.LineNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCommentBizId)) {
		body["parentCommentBizId"] = request.ParentCommentBizId
	}

	if !tea.BoolValue(util.IsUnset(request.PatchSetBizId)) {
		body["patchSetBizId"] = request.PatchSetBizId
	}

	if !tea.BoolValue(util.IsUnset(request.Resolved)) {
		body["resolved"] = request.Resolved
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateComment"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/code_reviews/comments/create_comment"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCommentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建评论
//
// @param request - CreateCommentRequest
//
// @return CreateCommentResponse
func (client *Client) CreateComment(request *CreateCommentRequest) (_result *CreateCommentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCommentResponse{}
	_body, _err := client.CreateCommentWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建提交状态记录
//
// @param request - CreateCommitStatusRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCommitStatusResponse
func (client *Client) CreateCommitStatusWithOptions(request *CreateCommitStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCommitStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	if !tea.BoolValue(util.IsUnset(request.Sha)) {
		query["sha"] = request.Sha
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Context)) {
		body["context"] = request.Context
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		body["state"] = request.State
	}

	if !tea.BoolValue(util.IsUnset(request.TargetUrl)) {
		body["targetUrl"] = request.TargetUrl
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCommitStatus"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/repository/commit_statuses/create_commit_status"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCommitStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建提交状态记录
//
// @param request - CreateCommitStatusRequest
//
// @return CreateCommitStatusResponse
func (client *Client) CreateCommitStatus(request *CreateCommitStatusRequest) (_result *CreateCommitStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCommitStatusResponse{}
	_body, _err := client.CreateCommitStatusWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 单提交变更多个文件
//
// @param request - CreateCommitWithMultipleFilesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCommitWithMultipleFilesResponse
func (client *Client) CreateCommitWithMultipleFilesWithOptions(request *CreateCommitWithMultipleFilesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateCommitWithMultipleFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Actions)) {
		body["actions"] = request.Actions
	}

	if !tea.BoolValue(util.IsUnset(request.Branch)) {
		body["branch"] = request.Branch
	}

	if !tea.BoolValue(util.IsUnset(request.CommitMessage)) {
		body["commitMessage"] = request.CommitMessage
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCommitWithMultipleFiles"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/repository/commits/files"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCommitWithMultipleFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 单提交变更多个文件
//
// @param request - CreateCommitWithMultipleFilesRequest
//
// @return CreateCommitWithMultipleFilesResponse
func (client *Client) CreateCommitWithMultipleFiles(request *CreateCommitWithMultipleFilesRequest) (_result *CreateCommitWithMultipleFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateCommitWithMultipleFilesResponse{}
	_body, _err := client.CreateCommitWithMultipleFilesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建部署密钥
//
// @param request - CreateDeployKeyRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDeployKeyResponse
func (client *Client) CreateDeployKeyWithOptions(repositoryId *string, request *CreateDeployKeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateDeployKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Key)) {
		body["key"] = request.Key
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDeployKey"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/keys/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDeployKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建部署密钥
//
// @param request - CreateDeployKeyRequest
//
// @return CreateDeployKeyResponse
func (client *Client) CreateDeployKey(repositoryId *string, request *CreateDeployKeyRequest) (_result *CreateDeployKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateDeployKeyResponse{}
	_body, _err := client.CreateDeployKeyWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建文件
//
// @param request - CreateFileRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFileResponse
func (client *Client) CreateFileWithOptions(repositoryId *string, request *CreateFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BranchName)) {
		body["branchName"] = request.BranchName
	}

	if !tea.BoolValue(util.IsUnset(request.CommitMessage)) {
		body["commitMessage"] = request.CommitMessage
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Encoding)) {
		body["encoding"] = request.Encoding
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		body["filePath"] = request.FilePath
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFile"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/files"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建文件
//
// @param request - CreateFileRequest
//
// @return CreateFileResponse
func (client *Client) CreateFile(repositoryId *string, request *CreateFileRequest) (_result *CreateFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFileResponse{}
	_body, _err := client.CreateFileWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建标签
//
// @param request - CreateFlowTagRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFlowTagResponse
func (client *Client) CreateFlowTagWithOptions(organizationId *string, request *CreateFlowTagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFlowTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Color)) {
		query["color"] = request.Color
	}

	if !tea.BoolValue(util.IsUnset(request.FlowTagGroupId)) {
		query["flowTagGroupId"] = request.FlowTagGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowTag"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/flow/tags"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建标签
//
// @param request - CreateFlowTagRequest
//
// @return CreateFlowTagResponse
func (client *Client) CreateFlowTag(organizationId *string, request *CreateFlowTagRequest) (_result *CreateFlowTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFlowTagResponse{}
	_body, _err := client.CreateFlowTagWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建标签分类
//
// @param request - CreateFlowTagGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFlowTagGroupResponse
func (client *Client) CreateFlowTagGroupWithOptions(organizationId *string, request *CreateFlowTagGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateFlowTagGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowTagGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/flow/tagGroups"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowTagGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建标签分类
//
// @param request - CreateFlowTagGroupRequest
//
// @return CreateFlowTagGroupResponse
func (client *Client) CreateFlowTagGroup(organizationId *string, request *CreateFlowTagGroupRequest) (_result *CreateFlowTagGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateFlowTagGroupResponse{}
	_body, _err := client.CreateFlowTagGroupWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建主机组
//
// @param request - CreateHostGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHostGroupResponse
func (client *Client) CreateHostGroupWithOptions(organizationId *string, request *CreateHostGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunRegion)) {
		body["aliyunRegion"] = request.AliyunRegion
	}

	if !tea.BoolValue(util.IsUnset(request.EcsLabelKey)) {
		body["ecsLabelKey"] = request.EcsLabelKey
	}

	if !tea.BoolValue(util.IsUnset(request.EcsLabelValue)) {
		body["ecsLabelValue"] = request.EcsLabelValue
	}

	if !tea.BoolValue(util.IsUnset(request.EcsType)) {
		body["ecsType"] = request.EcsType
	}

	if !tea.BoolValue(util.IsUnset(request.EnvId)) {
		body["envId"] = request.EnvId
	}

	if !tea.BoolValue(util.IsUnset(request.MachineInfos)) {
		body["machineInfos"] = request.MachineInfos
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceConnectionId)) {
		body["serviceConnectionId"] = request.ServiceConnectionId
	}

	if !tea.BoolValue(util.IsUnset(request.TagIds)) {
		body["tagIds"] = request.TagIds
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHostGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/hostGroups"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHostGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建主机组
//
// @param request - CreateHostGroupRequest
//
// @return CreateHostGroupResponse
func (client *Client) CreateHostGroup(organizationId *string, request *CreateHostGroupRequest) (_result *CreateHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateHostGroupResponse{}
	_body, _err := client.CreateHostGroupWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建代码评审
//
// @param request - CreateMergeRequestRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMergeRequestResponse
func (client *Client) CreateMergeRequestWithOptions(repositoryId *string, request *CreateMergeRequestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateMergeRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateFrom)) {
		body["createFrom"] = request.CreateFrom
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ReviewerIds)) {
		body["reviewerIds"] = request.ReviewerIds
	}

	if !tea.BoolValue(util.IsUnset(request.SourceBranch)) {
		body["sourceBranch"] = request.SourceBranch
	}

	if !tea.BoolValue(util.IsUnset(request.SourceProjectId)) {
		body["sourceProjectId"] = request.SourceProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetBranch)) {
		body["targetBranch"] = request.TargetBranch
	}

	if !tea.BoolValue(util.IsUnset(request.TargetProjectId)) {
		body["targetProjectId"] = request.TargetProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.WorkItemIds)) {
		body["workItemIds"] = request.WorkItemIds
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMergeRequest"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/merge_requests"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMergeRequestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建代码评审
//
// @param request - CreateMergeRequestRequest
//
// @return CreateMergeRequestResponse
func (client *Client) CreateMergeRequest(repositoryId *string, request *CreateMergeRequestRequest) (_result *CreateMergeRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateMergeRequestResponse{}
	_body, _err := client.CreateMergeRequestWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建OAuth令牌
//
// @param request - CreateOAuthTokenRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOAuthTokenResponse
func (client *Client) CreateOAuthTokenWithOptions(request *CreateOAuthTokenRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateOAuthTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientId)) {
		body["clientId"] = request.ClientId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientSecret)) {
		body["clientSecret"] = request.ClientSecret
	}

	if !tea.BoolValue(util.IsUnset(request.Code)) {
		body["code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.GrantType)) {
		body["grantType"] = request.GrantType
	}

	if !tea.BoolValue(util.IsUnset(request.Login)) {
		body["login"] = request.Login
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		body["scope"] = request.Scope
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOAuthToken"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/login/oauth/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOAuthTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建OAuth令牌
//
// @param request - CreateOAuthTokenRequest
//
// @return CreateOAuthTokenResponse
func (client *Client) CreateOAuthToken(request *CreateOAuthTokenRequest) (_result *CreateOAuthTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateOAuthTokenResponse{}
	_body, _err := client.CreateOAuthTokenWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建流水线。
//
// @param request - CreatePipelineRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePipelineResponse
func (client *Client) CreatePipelineWithOptions(organizationId *string, request *CreatePipelineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePipeline"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建流水线。
//
// @param request - CreatePipelineRequest
//
// @return CreatePipelineResponse
func (client *Client) CreatePipeline(organizationId *string, request *CreatePipelineRequest) (_result *CreatePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePipelineResponse{}
	_body, _err := client.CreatePipelineWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建流水线分组
//
// @param request - CreatePipelineGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePipelineGroupResponse
func (client *Client) CreatePipelineGroupWithOptions(organizationId *string, request *CreatePipelineGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePipelineGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePipelineGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelineGroups"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePipelineGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建流水线分组
//
// @param request - CreatePipelineGroupRequest
//
// @return CreatePipelineGroupResponse
func (client *Client) CreatePipelineGroup(organizationId *string, request *CreatePipelineGroupRequest) (_result *CreatePipelineGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePipelineGroupResponse{}
	_body, _err := client.CreatePipelineGroupWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建项目
//
// @param request - CreateProjectRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateProjectResponse
func (client *Client) CreateProjectWithOptions(organizationId *string, request *CreateProjectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomCode)) {
		body["customCode"] = request.CustomCode
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		body["scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateIdentifier)) {
		body["templateIdentifier"] = request.TemplateIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProject"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/projects/createProject"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建项目
//
// @param request - CreateProjectRequest
//
// @return CreateProjectResponse
func (client *Client) CreateProject(organizationId *string, request *CreateProjectRequest) (_result *CreateProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateProjectResponse{}
	_body, _err := client.CreateProjectWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建代码库Label
//
// @param request - CreateProjectLabelRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateProjectLabelResponse
func (client *Client) CreateProjectLabelWithOptions(request *CreateProjectLabelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateProjectLabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Color)) {
		body["color"] = request.Color
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProjectLabel"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/labels"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProjectLabelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建代码库Label
//
// @param request - CreateProjectLabelRequest
//
// @return CreateProjectLabelResponse
func (client *Client) CreateProjectLabel(request *CreateProjectLabelRequest) (_result *CreateProjectLabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateProjectLabelResponse{}
	_body, _err := client.CreateProjectLabelWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建保护分支
//
// @param request - CreateProtectdBranchRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateProtectdBranchResponse
func (client *Client) CreateProtectdBranchWithOptions(repositoryId *string, request *CreateProtectdBranchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateProtectdBranchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowMergeRoles)) {
		body["allowMergeRoles"] = request.AllowMergeRoles
	}

	if !tea.BoolValue(util.IsUnset(request.AllowMergeUserIds)) {
		body["allowMergeUserIds"] = request.AllowMergeUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.AllowPushRoles)) {
		body["allowPushRoles"] = request.AllowPushRoles
	}

	if !tea.BoolValue(util.IsUnset(request.AllowPushUserIds)) {
		body["allowPushUserIds"] = request.AllowPushUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.Branch)) {
		body["branch"] = request.Branch
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MergeRequestSetting)) {
		body["mergeRequestSetting"] = request.MergeRequestSetting
	}

	if !tea.BoolValue(util.IsUnset(request.TestSettingDTO)) {
		body["testSettingDTO"] = request.TestSettingDTO
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProtectdBranch"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/protect_branches"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProtectdBranchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建保护分支
//
// @param request - CreateProtectdBranchRequest
//
// @return CreateProtectdBranchResponse
func (client *Client) CreateProtectdBranch(repositoryId *string, request *CreateProtectdBranchRequest) (_result *CreateProtectdBranchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateProtectdBranchResponse{}
	_body, _err := client.CreateProtectdBranchWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建推送规则
//
// @param request - CreatePushRuleRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePushRuleResponse
func (client *Client) CreatePushRuleWithOptions(repositoryId *string, request *CreatePushRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreatePushRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleInfos)) {
		body["ruleInfos"] = request.RuleInfos
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePushRule"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/push_rule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePushRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建推送规则
//
// @param request - CreatePushRuleRequest
//
// @return CreatePushRuleResponse
func (client *Client) CreatePushRule(repositoryId *string, request *CreatePushRuleRequest) (_result *CreatePushRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreatePushRuleResponse{}
	_body, _err := client.CreatePushRuleWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建(导入)代码库
//
// @param request - CreateRepositoryRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRepositoryResponse
func (client *Client) CreateRepositoryWithOptions(request *CreateRepositoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateRepositoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.CreateParentPath)) {
		query["createParentPath"] = request.CreateParentPath
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Sync)) {
		query["sync"] = request.Sync
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarUrl)) {
		body["avatarUrl"] = request.AvatarUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GitignoreType)) {
		body["gitignoreType"] = request.GitignoreType
	}

	if !tea.BoolValue(util.IsUnset(request.ImportAccount)) {
		body["importAccount"] = request.ImportAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ImportDemoProject)) {
		body["importDemoProject"] = request.ImportDemoProject
	}

	if !tea.BoolValue(util.IsUnset(request.ImportRepoType)) {
		body["importRepoType"] = request.ImportRepoType
	}

	if !tea.BoolValue(util.IsUnset(request.ImportToken)) {
		body["importToken"] = request.ImportToken
	}

	if !tea.BoolValue(util.IsUnset(request.ImportTokenEncrypted)) {
		body["importTokenEncrypted"] = request.ImportTokenEncrypted
	}

	if !tea.BoolValue(util.IsUnset(request.ImportUrl)) {
		body["importUrl"] = request.ImportUrl
	}

	if !tea.BoolValue(util.IsUnset(request.InitStandardService)) {
		body["initStandardService"] = request.InitStandardService
	}

	if !tea.BoolValue(util.IsUnset(request.IsCryptoEnabled)) {
		body["isCryptoEnabled"] = request.IsCryptoEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.LocalImportUrl)) {
		body["localImportUrl"] = request.LocalImportUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceId)) {
		body["namespaceId"] = request.NamespaceId
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		body["path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.ReadmeType)) {
		body["readmeType"] = request.ReadmeType
	}

	if !tea.BoolValue(util.IsUnset(request.VisibilityLevel)) {
		body["visibilityLevel"] = request.VisibilityLevel
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRepository"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRepositoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建(导入)代码库
//
// @param request - CreateRepositoryRequest
//
// @return CreateRepositoryResponse
func (client *Client) CreateRepository(request *CreateRepositoryRequest) (_result *CreateRepositoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateRepositoryResponse{}
	_body, _err := client.CreateRepositoryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建代码组
//
// @param request - CreateRepositoryGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRepositoryGroupResponse
func (client *Client) CreateRepositoryGroupWithOptions(request *CreateRepositoryGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateRepositoryGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarUrl)) {
		body["avatarUrl"] = request.AvatarUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		body["parentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		body["path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.VisibilityLevel)) {
		body["visibilityLevel"] = request.VisibilityLevel
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRepositoryGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/groups/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRepositoryGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建代码组
//
// @param request - CreateRepositoryGroupRequest
//
// @return CreateRepositoryGroupResponse
func (client *Client) CreateRepositoryGroup(request *CreateRepositoryGroupRequest) (_result *CreateRepositoryGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateRepositoryGroupResponse{}
	_body, _err := client.CreateRepositoryGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 插入资源成员
//
// @param request - CreateResourceMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateResourceMemberResponse
func (client *Client) CreateResourceMemberWithOptions(organizationId *string, resourceType *string, resourceId *string, request *CreateResourceMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateResourceMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		body["accountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleName)) {
		body["roleName"] = request.RoleName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateResourceMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(resourceType)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(resourceId)) + "/members"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateResourceMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 插入资源成员
//
// @param request - CreateResourceMemberRequest
//
// @return CreateResourceMemberResponse
func (client *Client) CreateResourceMember(organizationId *string, resourceType *string, resourceId *string, request *CreateResourceMemberRequest) (_result *CreateResourceMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateResourceMemberResponse{}
	_body, _err := client.CreateResourceMemberWithOptions(organizationId, resourceType, resourceId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建服务授权
//
// @param request - CreateServiceAuthRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateServiceAuthResponse
func (client *Client) CreateServiceAuthWithOptions(organizationId *string, request *CreateServiceAuthRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateServiceAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ServiceAuthType)) {
		query["serviceAuthType"] = request.ServiceAuthType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateServiceAuth"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/serviceAuths"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateServiceAuthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建服务授权
//
// @param request - CreateServiceAuthRequest
//
// @return CreateServiceAuthResponse
func (client *Client) CreateServiceAuth(organizationId *string, request *CreateServiceAuthRequest) (_result *CreateServiceAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateServiceAuthResponse{}
	_body, _err := client.CreateServiceAuthWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建服务连接
//
// @param request - CreateServiceConnectionRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateServiceConnectionResponse
func (client *Client) CreateServiceConnectionWithOptions(organizationId *string, request *CreateServiceConnectionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateServiceConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthType)) {
		body["authType"] = request.AuthType
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionName)) {
		body["connectionName"] = request.ConnectionName
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectionType)) {
		body["connectionType"] = request.ConnectionType
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		body["scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceAuthId)) {
		body["serviceAuthId"] = request.ServiceAuthId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateServiceConnection"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/createServiceConnection"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateServiceConnectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建服务连接
//
// @param request - CreateServiceConnectionRequest
//
// @return CreateServiceConnectionResponse
func (client *Client) CreateServiceConnection(organizationId *string, request *CreateServiceConnectionRequest) (_result *CreateServiceConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateServiceConnectionResponse{}
	_body, _err := client.CreateServiceConnectionWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建用户名密码类型的证书
//
// @param request - CreateServiceCredentialRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateServiceCredentialResponse
func (client *Client) CreateServiceCredentialWithOptions(organizationId *string, request *CreateServiceCredentialRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateServiceCredentialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		body["scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		body["username"] = request.Username
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateServiceCredential"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/serviceCredentials"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateServiceCredentialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建用户名密码类型的证书
//
// @param request - CreateServiceCredentialRequest
//
// @return CreateServiceCredentialResponse
func (client *Client) CreateServiceCredential(organizationId *string, request *CreateServiceCredentialRequest) (_result *CreateServiceCredentialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateServiceCredentialResponse{}
	_body, _err := client.CreateServiceCredentialWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建迭代
//
// @param request - CreateSprintRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSprintResponse
func (client *Client) CreateSprintWithOptions(organizationId *string, request *CreateSprintRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSprintResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		body["endDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		body["spaceIdentifier"] = request.SpaceIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.StaffIds)) {
		body["staffIds"] = request.StaffIds
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		body["startDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSprint"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/sprints/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSprintResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建迭代
//
// @param request - CreateSprintRequest
//
// @return CreateSprintResponse
func (client *Client) CreateSprint(organizationId *string, request *CreateSprintRequest) (_result *CreateSprintResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSprintResponse{}
	_body, _err := client.CreateSprintWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建企业公钥
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSshKeyResponse
func (client *Client) CreateSshKeyWithOptions(organizationId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateSshKeyResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSshKey"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/sshKey"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSshKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建企业公钥
//
// @return CreateSshKeyResponse
func (client *Client) CreateSshKey(organizationId *string) (_result *CreateSshKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateSshKeyResponse{}
	_body, _err := client.CreateSshKeyWithOptions(organizationId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建标签Tag
//
// @param request - CreateTagRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTagResponse
func (client *Client) CreateTagWithOptions(repositoryId *string, request *CreateTagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Message)) {
		body["message"] = request.Message
	}

	if !tea.BoolValue(util.IsUnset(request.Ref)) {
		body["ref"] = request.Ref
	}

	if !tea.BoolValue(util.IsUnset(request.TagName)) {
		body["tagName"] = request.TagName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTag"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/tags/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建标签Tag
//
// @param request - CreateTagRequest
//
// @return CreateTagResponse
func (client *Client) CreateTag(repositoryId *string, request *CreateTagRequest) (_result *CreateTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTagResponse{}
	_body, _err := client.CreateTagWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建测试用例
//
// @param request - CreateTestCaseRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTestCaseResponse
func (client *Client) CreateTestCaseWithOptions(organizationId *string, request *CreateTestCaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateTestCaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssignedTo)) {
		body["assignedTo"] = request.AssignedTo
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryIdentifier)) {
		body["directoryIdentifier"] = request.DirectoryIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValueList)) {
		body["fieldValueList"] = request.FieldValueList
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		body["priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		body["spaceIdentifier"] = request.SpaceIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Subject)) {
		body["subject"] = request.Subject
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		body["tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TestcaseStepContentInfo)) {
		body["testcaseStepContentInfo"] = request.TestcaseStepContentInfo
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTestCase"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/testhub/testcase"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTestCaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建测试用例
//
// @param request - CreateTestCaseRequest
//
// @return CreateTestCaseResponse
func (client *Client) CreateTestCase(organizationId *string, request *CreateTestCaseRequest) (_result *CreateTestCaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateTestCaseResponse{}
	_body, _err := client.CreateTestCaseWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建SSH Key密钥
//
// @param request - CreateUserKeyRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUserKeyResponse
func (client *Client) CreateUserKeyWithOptions(request *CreateUserKeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateUserKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExpireTime)) {
		body["expireTime"] = request.ExpireTime
	}

	if !tea.BoolValue(util.IsUnset(request.KeyScope)) {
		body["keyScope"] = request.KeyScope
	}

	if !tea.BoolValue(util.IsUnset(request.PublicKey)) {
		body["publicKey"] = request.PublicKey
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUserKey"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v3/user/keys/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUserKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建SSH Key密钥
//
// @param request - CreateUserKeyRequest
//
// @return CreateUserKeyResponse
func (client *Client) CreateUserKey(request *CreateUserKeyRequest) (_result *CreateUserKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateUserKeyResponse{}
	_body, _err := client.CreateUserKeyWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建变量组
//
// @param request - CreateVariableGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateVariableGroupResponse
func (client *Client) CreateVariableGroupWithOptions(organizationId *string, request *CreateVariableGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateVariableGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Variables)) {
		body["variables"] = request.Variables
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVariableGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/variableGroups"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVariableGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建变量组
//
// @param request - CreateVariableGroupRequest
//
// @return CreateVariableGroupResponse
func (client *Client) CreateVariableGroup(organizationId *string, request *CreateVariableGroupRequest) (_result *CreateVariableGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateVariableGroupResponse{}
	_body, _err := client.CreateVariableGroupWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新建工作项
//
// @param request - CreateWorkitemRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWorkitemResponse
func (client *Client) CreateWorkitemWithOptions(organizationId *string, request *CreateWorkitemRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWorkitemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssignedTo)) {
		body["assignedTo"] = request.AssignedTo
	}

	if !tea.BoolValue(util.IsUnset(request.Category)) {
		body["category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DescriptionFormat)) {
		body["descriptionFormat"] = request.DescriptionFormat
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValueList)) {
		body["fieldValueList"] = request.FieldValueList
	}

	if !tea.BoolValue(util.IsUnset(request.Parent)) {
		body["parent"] = request.Parent
	}

	if !tea.BoolValue(util.IsUnset(request.Participant)) {
		body["participant"] = request.Participant
	}

	if !tea.BoolValue(util.IsUnset(request.Space)) {
		body["space"] = request.Space
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		body["spaceIdentifier"] = request.SpaceIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceType)) {
		body["spaceType"] = request.SpaceType
	}

	if !tea.BoolValue(util.IsUnset(request.Sprint)) {
		body["sprint"] = request.Sprint
	}

	if !tea.BoolValue(util.IsUnset(request.Subject)) {
		body["subject"] = request.Subject
	}

	if !tea.BoolValue(util.IsUnset(request.Tracker)) {
		body["tracker"] = request.Tracker
	}

	if !tea.BoolValue(util.IsUnset(request.Verifier)) {
		body["verifier"] = request.Verifier
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemType)) {
		body["workitemType"] = request.WorkitemType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWorkitem"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/create"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWorkitemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新建工作项
//
// @param request - CreateWorkitemRequest
//
// @return CreateWorkitemResponse
func (client *Client) CreateWorkitem(organizationId *string, request *CreateWorkitemRequest) (_result *CreateWorkitemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWorkitemResponse{}
	_body, _err := client.CreateWorkitemWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建一个评论
//
// @param request - CreateWorkitemCommentRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWorkitemCommentResponse
func (client *Client) CreateWorkitemCommentWithOptions(organizationId *string, request *CreateWorkitemCommentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWorkitemCommentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.FormatType)) {
		body["formatType"] = request.FormatType
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		body["parentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemIdentifier)) {
		body["workitemIdentifier"] = request.WorkitemIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWorkitemComment"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/comment"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWorkitemCommentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建一个评论
//
// @param request - CreateWorkitemCommentRequest
//
// @return CreateWorkitemCommentResponse
func (client *Client) CreateWorkitemComment(organizationId *string, request *CreateWorkitemCommentRequest) (_result *CreateWorkitemCommentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWorkitemCommentResponse{}
	_body, _err := client.CreateWorkitemCommentWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 登记预计工时
//
// @param request - CreateWorkitemEstimateRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWorkitemEstimateResponse
func (client *Client) CreateWorkitemEstimateWithOptions(organizationId *string, request *CreateWorkitemEstimateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWorkitemEstimateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.RecordUserIdentifier)) {
		body["recordUserIdentifier"] = request.RecordUserIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SpentTime)) {
		body["spentTime"] = request.SpentTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemIdentifier)) {
		body["workitemIdentifier"] = request.WorkitemIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWorkitemEstimate"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/estimate"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWorkitemEstimateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 登记预计工时
//
// @param request - CreateWorkitemEstimateRequest
//
// @return CreateWorkitemEstimateResponse
func (client *Client) CreateWorkitemEstimate(organizationId *string, request *CreateWorkitemEstimateRequest) (_result *CreateWorkitemEstimateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWorkitemEstimateResponse{}
	_body, _err := client.CreateWorkitemEstimateWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 登记实际工时
//
// @param request - CreateWorkitemRecordRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWorkitemRecordResponse
func (client *Client) CreateWorkitemRecordWithOptions(organizationId *string, request *CreateWorkitemRecordRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWorkitemRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActualTime)) {
		body["actualTime"] = request.ActualTime
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GmtEnd)) {
		body["gmtEnd"] = request.GmtEnd
	}

	if !tea.BoolValue(util.IsUnset(request.GmtStart)) {
		body["gmtStart"] = request.GmtStart
	}

	if !tea.BoolValue(util.IsUnset(request.RecordUserIdentifier)) {
		body["recordUserIdentifier"] = request.RecordUserIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemIdentifier)) {
		body["workitemIdentifier"] = request.WorkitemIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWorkitemRecord"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/record"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWorkitemRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 登记实际工时
//
// @param request - CreateWorkitemRecordRequest
//
// @return CreateWorkitemRecordResponse
func (client *Client) CreateWorkitemRecord(organizationId *string, request *CreateWorkitemRecordRequest) (_result *CreateWorkitemRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWorkitemRecordResponse{}
	_body, _err := client.CreateWorkitemRecordWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建工作项
//
// @param request - CreateWorkitemV2Request
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWorkitemV2Response
func (client *Client) CreateWorkitemV2WithOptions(organizationId *string, request *CreateWorkitemV2Request, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWorkitemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssignedTo)) {
		body["assignedTo"] = request.AssignedTo
	}

	if !tea.BoolValue(util.IsUnset(request.Category)) {
		body["category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FieldValueList)) {
		body["fieldValueList"] = request.FieldValueList
	}

	if !tea.BoolValue(util.IsUnset(request.ParentIdentifier)) {
		body["parentIdentifier"] = request.ParentIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Participants)) {
		body["participants"] = request.Participants
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		body["spaceIdentifier"] = request.SpaceIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SprintIdentifier)) {
		body["sprintIdentifier"] = request.SprintIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Subject)) {
		body["subject"] = request.Subject
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		body["tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Trackers)) {
		body["trackers"] = request.Trackers
	}

	if !tea.BoolValue(util.IsUnset(request.Verifier)) {
		body["verifier"] = request.Verifier
	}

	if !tea.BoolValue(util.IsUnset(request.Versions)) {
		body["versions"] = request.Versions
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemTypeIdentifier)) {
		body["workitemTypeIdentifier"] = request.WorkitemTypeIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWorkitemV2"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitem"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWorkitemV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建工作项
//
// @param request - CreateWorkitemV2Request
//
// @return CreateWorkitemV2Response
func (client *Client) CreateWorkitemV2(organizationId *string, request *CreateWorkitemV2Request) (_result *CreateWorkitemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWorkitemV2Response{}
	_body, _err := client.CreateWorkitemV2WithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建工作空间
//
// @param request - CreateWorkspaceRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWorkspaceResponse
func (client *Client) CreateWorkspaceWithOptions(request *CreateWorkspaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *CreateWorkspaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CodeUrl)) {
		body["codeUrl"] = request.CodeUrl
	}

	if !tea.BoolValue(util.IsUnset(request.CodeVersion)) {
		body["codeVersion"] = request.CodeVersion
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		body["filePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RequestFrom)) {
		body["requestFrom"] = request.RequestFrom
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceIdentifier)) {
		body["resourceIdentifier"] = request.ResourceIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.Reuse)) {
		body["reuse"] = request.Reuse
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceTemplate)) {
		body["workspaceTemplate"] = request.WorkspaceTemplate
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWorkspace"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/workspaces"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建工作空间
//
// @param request - CreateWorkspaceRequest
//
// @return CreateWorkspaceResponse
func (client *Client) CreateWorkspace(request *CreateWorkspaceRequest) (_result *CreateWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &CreateWorkspaceResponse{}
	_body, _err := client.CreateWorkspaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除应用成员
//
// @param request - DeleteAppMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAppMemberResponse
func (client *Client) DeleteAppMemberWithOptions(appName *string, request *DeleteAppMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteAppMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.SubjectId)) {
		query["subjectId"] = request.SubjectId
	}

	if !tea.BoolValue(util.IsUnset(request.SubjectType)) {
		query["subjectType"] = request.SubjectType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAppMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/members"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("string"),
	}
	_result = &DeleteAppMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除应用成员
//
// @param request - DeleteAppMemberRequest
//
// @return DeleteAppMemberResponse
func (client *Client) DeleteAppMember(appName *string, request *DeleteAppMemberRequest) (_result *DeleteAppMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteAppMemberResponse{}
	_body, _err := client.DeleteAppMemberWithOptions(appName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除分支
//
// @param request - DeleteBranchRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBranchResponse
func (client *Client) DeleteBranchWithOptions(repositoryId *string, request *DeleteBranchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteBranchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.BranchName)) {
		query["branchName"] = request.BranchName
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBranch"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/branches/delete"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBranchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除分支
//
// @param request - DeleteBranchRequest
//
// @return DeleteBranchResponse
func (client *Client) DeleteBranch(repositoryId *string, request *DeleteBranchRequest) (_result *DeleteBranchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteBranchResponse{}
	_body, _err := client.DeleteBranchWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除文件
//
// @param request - DeleteFileRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFileResponse
func (client *Client) DeleteFileWithOptions(repositoryId *string, request *DeleteFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.BranchName)) {
		query["branchName"] = request.BranchName
	}

	if !tea.BoolValue(util.IsUnset(request.CommitMessage)) {
		query["commitMessage"] = request.CommitMessage
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["filePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFile"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/files/delete"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除文件
//
// @param request - DeleteFileRequest
//
// @return DeleteFileResponse
func (client *Client) DeleteFile(repositoryId *string, request *DeleteFileRequest) (_result *DeleteFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFileResponse{}
	_body, _err := client.DeleteFileWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除标签
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFlowTagResponse
func (client *Client) DeleteFlowTagWithOptions(organizationId *string, id *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFlowTagResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFlowTag"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/flow/tags/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFlowTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除标签
//
// @return DeleteFlowTagResponse
func (client *Client) DeleteFlowTag(organizationId *string, id *string) (_result *DeleteFlowTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFlowTagResponse{}
	_body, _err := client.DeleteFlowTagWithOptions(organizationId, id, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除标签分类
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFlowTagGroupResponse
func (client *Client) DeleteFlowTagGroupWithOptions(organizationId *string, id *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteFlowTagGroupResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFlowTagGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/flow/tagGroups/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFlowTagGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除标签分类
//
// @return DeleteFlowTagGroupResponse
func (client *Client) DeleteFlowTagGroup(organizationId *string, id *string) (_result *DeleteFlowTagGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteFlowTagGroupResponse{}
	_body, _err := client.DeleteFlowTagGroupWithOptions(organizationId, id, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除组成员
//
// @param request - DeleteGroupMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteGroupMemberResponse
func (client *Client) DeleteGroupMemberWithOptions(groupId *string, request *DeleteGroupMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteGroupMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.AliyunPk)) {
		query["aliyunPk"] = request.AliyunPk
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MemberType)) {
		body["memberType"] = request.MemberType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGroupMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/groups/" + tea.StringValue(openapiutil.GetEncodeParam(groupId)) + "/members/remove/aliyun_pk"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGroupMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除组成员
//
// @param request - DeleteGroupMemberRequest
//
// @return DeleteGroupMemberResponse
func (client *Client) DeleteGroupMember(groupId *string, request *DeleteGroupMemberRequest) (_result *DeleteGroupMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteGroupMemberResponse{}
	_body, _err := client.DeleteGroupMemberWithOptions(groupId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除主机组
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHostGroupResponse
func (client *Client) DeleteHostGroupWithOptions(organizationId *string, id *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteHostGroupResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHostGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/hostGroups/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHostGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除主机组
//
// @return DeleteHostGroupResponse
func (client *Client) DeleteHostGroup(organizationId *string, id *string) (_result *DeleteHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteHostGroupResponse{}
	_body, _err := client.DeleteHostGroupWithOptions(organizationId, id, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除流水线
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePipelineResponse
func (client *Client) DeletePipelineWithOptions(organizationId *string, pipelineId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeletePipelineResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePipeline"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除流水线
//
// @return DeletePipelineResponse
func (client *Client) DeletePipeline(organizationId *string, pipelineId *string) (_result *DeletePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeletePipelineResponse{}
	_body, _err := client.DeletePipelineWithOptions(organizationId, pipelineId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除流水线分组
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePipelineGroupResponse
func (client *Client) DeletePipelineGroupWithOptions(organizationId *string, groupId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeletePipelineGroupResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePipelineGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelineGroups/" + tea.StringValue(openapiutil.GetEncodeParam(groupId))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePipelineGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除流水线分组
//
// @return DeletePipelineGroupResponse
func (client *Client) DeletePipelineGroup(organizationId *string, groupId *string) (_result *DeletePipelineGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeletePipelineGroupResponse{}
	_body, _err := client.DeletePipelineGroupWithOptions(organizationId, groupId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除流水线关联
//
// @param request - DeletePipelineRelationsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePipelineRelationsResponse
func (client *Client) DeletePipelineRelationsWithOptions(organizationId *string, pipelineId *string, request *DeletePipelineRelationsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeletePipelineRelationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RelObjectId)) {
		query["relObjectId"] = request.RelObjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RelObjectType)) {
		query["relObjectType"] = request.RelObjectType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePipelineRelations"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRelations"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePipelineRelationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除流水线关联
//
// @param request - DeletePipelineRelationsRequest
//
// @return DeletePipelineRelationsResponse
func (client *Client) DeletePipelineRelations(organizationId *string, pipelineId *string, request *DeletePipelineRelationsRequest) (_result *DeletePipelineRelationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeletePipelineRelationsResponse{}
	_body, _err := client.DeletePipelineRelationsWithOptions(organizationId, pipelineId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除项目
//
// @param request - DeleteProjectRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteProjectResponse
func (client *Client) DeleteProjectWithOptions(organizationId *string, request *DeleteProjectRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Identifier)) {
		query["identifier"] = request.Identifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProject"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/projects/delete"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除项目
//
// @param request - DeleteProjectRequest
//
// @return DeleteProjectResponse
func (client *Client) DeleteProject(organizationId *string, request *DeleteProjectRequest) (_result *DeleteProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteProjectResponse{}
	_body, _err := client.DeleteProjectWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除代码库Label
//
// @param request - DeleteProjectLabelRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteProjectLabelResponse
func (client *Client) DeleteProjectLabelWithOptions(labelId *string, request *DeleteProjectLabelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteProjectLabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProjectLabel"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/labels/" + tea.StringValue(openapiutil.GetEncodeParam(labelId))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProjectLabelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除代码库Label
//
// @param request - DeleteProjectLabelRequest
//
// @return DeleteProjectLabelResponse
func (client *Client) DeleteProjectLabel(labelId *string, request *DeleteProjectLabelRequest) (_result *DeleteProjectLabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteProjectLabelResponse{}
	_body, _err := client.DeleteProjectLabelWithOptions(labelId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除保护分支
//
// @param request - DeleteProtectedBranchRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteProtectedBranchResponse
func (client *Client) DeleteProtectedBranchWithOptions(repositoryId *string, protectedBranchId *string, request *DeleteProtectedBranchRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteProtectedBranchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteProtectedBranch"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/protect_branches/" + tea.StringValue(openapiutil.GetEncodeParam(protectedBranchId))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteProtectedBranchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除保护分支
//
// @param request - DeleteProtectedBranchRequest
//
// @return DeleteProtectedBranchResponse
func (client *Client) DeleteProtectedBranch(repositoryId *string, protectedBranchId *string, request *DeleteProtectedBranchRequest) (_result *DeleteProtectedBranchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteProtectedBranchResponse{}
	_body, _err := client.DeleteProtectedBranchWithOptions(repositoryId, protectedBranchId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除推送规则
//
// @param request - DeletePushRuleRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePushRuleResponse
func (client *Client) DeletePushRuleWithOptions(repositoryId *string, pushRuleId *string, request *DeletePushRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeletePushRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePushRule"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/push_rule/" + tea.StringValue(openapiutil.GetEncodeParam(pushRuleId))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePushRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除推送规则
//
// @param request - DeletePushRuleRequest
//
// @return DeletePushRuleResponse
func (client *Client) DeletePushRule(repositoryId *string, pushRuleId *string, request *DeletePushRuleRequest) (_result *DeletePushRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeletePushRuleResponse{}
	_body, _err := client.DeletePushRuleWithOptions(repositoryId, pushRuleId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除代码库
//
// @param request - DeleteRepositoryRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRepositoryResponse
func (client *Client) DeleteRepositoryWithOptions(repositoryId *string, request *DeleteRepositoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteRepositoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		body["reason"] = request.Reason
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRepository"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/remove"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRepositoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除代码库
//
// @param request - DeleteRepositoryRequest
//
// @return DeleteRepositoryResponse
func (client *Client) DeleteRepository(repositoryId *string, request *DeleteRepositoryRequest) (_result *DeleteRepositoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteRepositoryResponse{}
	_body, _err := client.DeleteRepositoryWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除代码组
//
// @param request - DeleteRepositoryGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRepositoryGroupResponse
func (client *Client) DeleteRepositoryGroupWithOptions(groupId *string, request *DeleteRepositoryGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteRepositoryGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		body["reason"] = request.Reason
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRepositoryGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/groups/" + tea.StringValue(openapiutil.GetEncodeParam(groupId)) + "/remove"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRepositoryGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除代码组
//
// @param request - DeleteRepositoryGroupRequest
//
// @return DeleteRepositoryGroupResponse
func (client *Client) DeleteRepositoryGroup(groupId *string, request *DeleteRepositoryGroupRequest) (_result *DeleteRepositoryGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteRepositoryGroupResponse{}
	_body, _err := client.DeleteRepositoryGroupWithOptions(groupId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除代码库成员
//
// @param request - DeleteRepositoryMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRepositoryMemberResponse
func (client *Client) DeleteRepositoryMemberWithOptions(repositoryId *string, aliyunPk *string, request *DeleteRepositoryMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteRepositoryMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MemberType)) {
		body["memberType"] = request.MemberType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRepositoryMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/members/delete/" + tea.StringValue(openapiutil.GetEncodeParam(aliyunPk))),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRepositoryMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除代码库成员
//
// @param request - DeleteRepositoryMemberRequest
//
// @return DeleteRepositoryMemberResponse
func (client *Client) DeleteRepositoryMember(repositoryId *string, aliyunPk *string, request *DeleteRepositoryMemberRequest) (_result *DeleteRepositoryMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteRepositoryMemberResponse{}
	_body, _err := client.DeleteRepositoryMemberWithOptions(repositoryId, aliyunPk, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除代码库Webhook
//
// @param request - DeleteRepositoryWebhookRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRepositoryWebhookResponse
func (client *Client) DeleteRepositoryWebhookWithOptions(repositoryId *string, hookId *string, request *DeleteRepositoryWebhookRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteRepositoryWebhookResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRepositoryWebhook"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/hooks/" + tea.StringValue(openapiutil.GetEncodeParam(hookId))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRepositoryWebhookResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除代码库Webhook
//
// @param request - DeleteRepositoryWebhookRequest
//
// @return DeleteRepositoryWebhookResponse
func (client *Client) DeleteRepositoryWebhook(repositoryId *string, hookId *string, request *DeleteRepositoryWebhookRequest) (_result *DeleteRepositoryWebhookResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteRepositoryWebhookResponse{}
	_body, _err := client.DeleteRepositoryWebhookWithOptions(repositoryId, hookId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除资源成员
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteResourceMemberResponse
func (client *Client) DeleteResourceMemberWithOptions(organizationId *string, resourceType *string, resourceId *string, accountId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteResourceMemberResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteResourceMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(resourceType)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(resourceId)) + "/members/" + tea.StringValue(openapiutil.GetEncodeParam(accountId))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteResourceMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除资源成员
//
// @return DeleteResourceMemberResponse
func (client *Client) DeleteResourceMember(organizationId *string, resourceType *string, resourceId *string, accountId *string) (_result *DeleteResourceMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteResourceMemberResponse{}
	_body, _err := client.DeleteResourceMemberWithOptions(organizationId, resourceType, resourceId, accountId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除标签
//
// @param request - DeleteTagRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTagResponse
func (client *Client) DeleteTagWithOptions(repositoryId *string, request *DeleteTagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.TagName)) {
		query["tagName"] = request.TagName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTag"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/tags/delete"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除标签
//
// @param request - DeleteTagRequest
//
// @return DeleteTagResponse
func (client *Client) DeleteTag(repositoryId *string, request *DeleteTagRequest) (_result *DeleteTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteTagResponse{}
	_body, _err := client.DeleteTagWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除用户的SSH Key
//
// @param request - DeleteUserKeyRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteUserKeyResponse
func (client *Client) DeleteUserKeyWithOptions(keyId *string, request *DeleteUserKeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteUserKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteUserKey"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v3/user/keys/" + tea.StringValue(openapiutil.GetEncodeParam(keyId))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteUserKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除用户的SSH Key
//
// @param request - DeleteUserKeyRequest
//
// @return DeleteUserKeyResponse
func (client *Client) DeleteUserKey(keyId *string, request *DeleteUserKeyRequest) (_result *DeleteUserKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteUserKeyResponse{}
	_body, _err := client.DeleteUserKeyWithOptions(keyId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除变量组
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVariableGroupResponse
func (client *Client) DeleteVariableGroupWithOptions(organizationId *string, id *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteVariableGroupResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVariableGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/variableGroups/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVariableGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除变量组
//
// @return DeleteVariableGroupResponse
func (client *Client) DeleteVariableGroup(organizationId *string, id *string) (_result *DeleteVariableGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteVariableGroupResponse{}
	_body, _err := client.DeleteVariableGroupWithOptions(organizationId, id, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除工作项
//
// @param request - DeleteWorkitemRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWorkitemResponse
func (client *Client) DeleteWorkitemWithOptions(organizationId *string, request *DeleteWorkitemRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteWorkitemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Identifier)) {
		query["identifier"] = request.Identifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWorkitem"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitem/delete"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWorkitemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除工作项
//
// @param request - DeleteWorkitemRequest
//
// @return DeleteWorkitemResponse
func (client *Client) DeleteWorkitem(organizationId *string, request *DeleteWorkitemRequest) (_result *DeleteWorkitemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteWorkitemResponse{}
	_body, _err := client.DeleteWorkitemWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除所有评论
//
// @param request - DeleteWorkitemAllCommentRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWorkitemAllCommentResponse
func (client *Client) DeleteWorkitemAllCommentWithOptions(organizationId *string, request *DeleteWorkitemAllCommentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteWorkitemAllCommentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Identifier)) {
		query["identifier"] = request.Identifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWorkitemAllComment"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/deleteAllComment"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWorkitemAllCommentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除所有评论
//
// @param request - DeleteWorkitemAllCommentRequest
//
// @return DeleteWorkitemAllCommentResponse
func (client *Client) DeleteWorkitemAllComment(organizationId *string, request *DeleteWorkitemAllCommentRequest) (_result *DeleteWorkitemAllCommentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteWorkitemAllCommentResponse{}
	_body, _err := client.DeleteWorkitemAllCommentWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除单条评论
//
// @param request - DeleteWorkitemCommentRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWorkitemCommentResponse
func (client *Client) DeleteWorkitemCommentWithOptions(organizationId *string, request *DeleteWorkitemCommentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *DeleteWorkitemCommentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommentId)) {
		body["commentId"] = request.CommentId
	}

	if !tea.BoolValue(util.IsUnset(request.Identifier)) {
		body["identifier"] = request.Identifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWorkitemComment"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/deleteComent"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWorkitemCommentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除单条评论
//
// @param request - DeleteWorkitemCommentRequest
//
// @return DeleteWorkitemCommentResponse
func (client *Client) DeleteWorkitemComment(organizationId *string, request *DeleteWorkitemCommentRequest) (_result *DeleteWorkitemCommentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &DeleteWorkitemCommentResponse{}
	_body, _err := client.DeleteWorkitemCommentWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 启用部署密钥
//
// @param request - EnableDeployKeyRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableDeployKeyResponse
func (client *Client) EnableDeployKeyWithOptions(repositoryId *string, keyId *string, request *EnableDeployKeyRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *EnableDeployKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableDeployKey"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/keys/" + tea.StringValue(openapiutil.GetEncodeParam(keyId)) + "/enable"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableDeployKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 启用部署密钥
//
// @param request - EnableDeployKeyRequest
//
// @return EnableDeployKeyResponse
func (client *Client) EnableDeployKey(repositoryId *string, keyId *string, request *EnableDeployKeyRequest) (_result *EnableDeployKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &EnableDeployKeyResponse{}
	_body, _err := client.EnableDeployKeyWithOptions(repositoryId, keyId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 执行研发阶段流水线
//
// @param request - ExecuteChangeRequestReleaseStageRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExecuteChangeRequestReleaseStageResponse
func (client *Client) ExecuteChangeRequestReleaseStageWithOptions(appName *string, releaseWorkflowSn *string, releaseStageSn *string, request *ExecuteChangeRequestReleaseStageRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExecuteChangeRequestReleaseStageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Params)) {
		body["params"] = request.Params
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExecuteChangeRequestReleaseStage"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/releaseWorkflows/" + tea.StringValue(openapiutil.GetEncodeParam(releaseWorkflowSn)) + "/releaseStages/" + tea.StringValue(openapiutil.GetEncodeParam(releaseStageSn)) + "%3Aexecute"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExecuteChangeRequestReleaseStageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 执行研发阶段流水线
//
// @param request - ExecuteChangeRequestReleaseStageRequest
//
// @return ExecuteChangeRequestReleaseStageResponse
func (client *Client) ExecuteChangeRequestReleaseStage(appName *string, releaseWorkflowSn *string, releaseStageSn *string, request *ExecuteChangeRequestReleaseStageRequest) (_result *ExecuteChangeRequestReleaseStageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExecuteChangeRequestReleaseStageResponse{}
	_body, _err := client.ExecuteChangeRequestReleaseStageWithOptions(appName, releaseWorkflowSn, releaseStageSn, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight custom_value表
//
// @param request - ExportInsightCustomValueRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightCustomValueResponse
func (client *Client) ExportInsightCustomValueWithOptions(organizationId *string, request *ExportInsightCustomValueRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightCustomValueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightCustomValue"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/customValues"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightCustomValueResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight custom_value表
//
// @param request - ExportInsightCustomValueRequest
//
// @return ExportInsightCustomValueResponse
func (client *Client) ExportInsightCustomValue(organizationId *string, request *ExportInsightCustomValueRequest) (_result *ExportInsightCustomValueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightCustomValueResponse{}
	_body, _err := client.ExportInsightCustomValueWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight expected_work_time表数据
//
// @param request - ExportInsightExpectedWorkTimeRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightExpectedWorkTimeResponse
func (client *Client) ExportInsightExpectedWorkTimeWithOptions(organizationId *string, request *ExportInsightExpectedWorkTimeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightExpectedWorkTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightExpectedWorkTime"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/expectedWorkTimes"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightExpectedWorkTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight expected_work_time表数据
//
// @param request - ExportInsightExpectedWorkTimeRequest
//
// @return ExportInsightExpectedWorkTimeResponse
func (client *Client) ExportInsightExpectedWorkTime(organizationId *string, request *ExportInsightExpectedWorkTimeRequest) (_result *ExportInsightExpectedWorkTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightExpectedWorkTimeResponse{}
	_body, _err := client.ExportInsightExpectedWorkTimeWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight field表
//
// @param request - ExportInsightFieldRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightFieldResponse
func (client *Client) ExportInsightFieldWithOptions(organizationId *string, request *ExportInsightFieldRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightFieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightField"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/fields"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightFieldResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight field表
//
// @param request - ExportInsightFieldRequest
//
// @return ExportInsightFieldResponse
func (client *Client) ExportInsightField(organizationId *string, request *ExportInsightFieldRequest) (_result *ExportInsightFieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightFieldResponse{}
	_body, _err := client.ExportInsightFieldWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight space表数据
//
// @param request - ExportInsightSpaceRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightSpaceResponse
func (client *Client) ExportInsightSpaceWithOptions(organizationId *string, request *ExportInsightSpaceRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightSpaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightSpace"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/spaces"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightSpaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight space表数据
//
// @param request - ExportInsightSpaceRequest
//
// @return ExportInsightSpaceResponse
func (client *Client) ExportInsightSpace(organizationId *string, request *ExportInsightSpaceRequest) (_result *ExportInsightSpaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightSpaceResponse{}
	_body, _err := client.ExportInsightSpaceWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight space_ref表数据
//
// @param request - ExportInsightSpaceRefRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightSpaceRefResponse
func (client *Client) ExportInsightSpaceRefWithOptions(organizationId *string, request *ExportInsightSpaceRefRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightSpaceRefResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightSpaceRef"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/spaceRefs"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightSpaceRefResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight space_ref表数据
//
// @param request - ExportInsightSpaceRefRequest
//
// @return ExportInsightSpaceRefResponse
func (client *Client) ExportInsightSpaceRef(organizationId *string, request *ExportInsightSpaceRefRequest) (_result *ExportInsightSpaceRefResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightSpaceRefResponse{}
	_body, _err := client.ExportInsightSpaceRefWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight sprint表数据
//
// @param request - ExportInsightSprintRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightSprintResponse
func (client *Client) ExportInsightSprintWithOptions(organizationId *string, request *ExportInsightSprintRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightSprintResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightSprint"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/sprints"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightSprintResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight sprint表数据
//
// @param request - ExportInsightSprintRequest
//
// @return ExportInsightSprintResponse
func (client *Client) ExportInsightSprint(organizationId *string, request *ExportInsightSprintRequest) (_result *ExportInsightSprintResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightSprintResponse{}
	_body, _err := client.ExportInsightSprintWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight tag_ref表数据
//
// @param request - ExportInsightTagRefRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightTagRefResponse
func (client *Client) ExportInsightTagRefWithOptions(organizationId *string, request *ExportInsightTagRefRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightTagRefResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightTagRef"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/tagRefs"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightTagRefResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight tag_ref表数据
//
// @param request - ExportInsightTagRefRequest
//
// @return ExportInsightTagRefResponse
func (client *Client) ExportInsightTagRef(organizationId *string, request *ExportInsightTagRefRequest) (_result *ExportInsightTagRefResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightTagRefResponse{}
	_body, _err := client.ExportInsightTagRefWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight work_time表数据
//
// @param request - ExportInsightWorkTimeRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightWorkTimeResponse
func (client *Client) ExportInsightWorkTimeWithOptions(organizationId *string, request *ExportInsightWorkTimeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightWorkTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightWorkTime"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/workTimes"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightWorkTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight work_time表数据
//
// @param request - ExportInsightWorkTimeRequest
//
// @return ExportInsightWorkTimeResponse
func (client *Client) ExportInsightWorkTime(organizationId *string, request *ExportInsightWorkTimeRequest) (_result *ExportInsightWorkTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightWorkTimeResponse{}
	_body, _err := client.ExportInsightWorkTimeWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight workitem_stauts表数据
//
// @param request - ExportInsightWorkitemStatusRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightWorkitemStatusResponse
func (client *Client) ExportInsightWorkitemStatusWithOptions(organizationId *string, request *ExportInsightWorkitemStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightWorkitemStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightWorkitemStatus"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/workitemStatuses"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightWorkitemStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight workitem_stauts表数据
//
// @param request - ExportInsightWorkitemStatusRequest
//
// @return ExportInsightWorkitemStatusResponse
func (client *Client) ExportInsightWorkitemStatus(organizationId *string, request *ExportInsightWorkitemStatusRequest) (_result *ExportInsightWorkitemStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightWorkitemStatusResponse{}
	_body, _err := client.ExportInsightWorkitemStatusWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight workitem_stauts表 join workitem_defect_extra表表数据
//
// @param request - ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse
func (client *Client) ExportInsightWorkitemStatusJoinWorkitemDefectExtraWithOptions(organizationId *string, request *ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightWorkitemStatusJoinWorkitemDefectExtra"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/workitemStatusJoinWorkitemDefectExtras"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight workitem_stauts表 join workitem_defect_extra表表数据
//
// @param request - ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest
//
// @return ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse
func (client *Client) ExportInsightWorkitemStatusJoinWorkitemDefectExtra(organizationId *string, request *ExportInsightWorkitemStatusJoinWorkitemDefectExtraRequest) (_result *ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightWorkitemStatusJoinWorkitemDefectExtraResponse{}
	_body, _err := client.ExportInsightWorkitemStatusJoinWorkitemDefectExtraWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight workitem_version表数据
//
// @param request - ExportInsightWorkitemVersionRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportInsightWorkitemVersionResponse
func (client *Client) ExportInsightWorkitemVersionWithOptions(organizationId *string, request *ExportInsightWorkitemVersionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportInsightWorkitemVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportInsightWorkitemVersion"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/workitemVersions"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportInsightWorkitemVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight workitem_version表数据
//
// @param request - ExportInsightWorkitemVersionRequest
//
// @return ExportInsightWorkitemVersionResponse
func (client *Client) ExportInsightWorkitemVersion(organizationId *string, request *ExportInsightWorkitemVersionRequest) (_result *ExportInsightWorkitemVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportInsightWorkitemVersionResponse{}
	_body, _err := client.ExportInsightWorkitemVersionWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出Insight workitem_activity表数据
//
// @param request - ExportWorkitemActivityRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportWorkitemActivityResponse
func (client *Client) ExportWorkitemActivityWithOptions(organizationId *string, request *ExportWorkitemActivityRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ExportWorkitemActivityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["startTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportWorkitemActivity"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/data/workitemActivities"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportWorkitemActivityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出Insight workitem_activity表数据
//
// @param request - ExportWorkitemActivityRequest
//
// @return ExportWorkitemActivityResponse
func (client *Client) ExportWorkitemActivity(organizationId *string, request *ExportWorkitemActivityRequest) (_result *ExportWorkitemActivityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ExportWorkitemActivityResponse{}
	_body, _err := client.ExportWorkitemActivityWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 冻结工作空间
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return FrozenWorkspaceResponse
func (client *Client) FrozenWorkspaceWithOptions(workspaceId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *FrozenWorkspaceResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("FrozenWorkspace"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/workspaces/" + tea.StringValue(openapiutil.GetEncodeParam(workspaceId)) + "/frozen"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &FrozenWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 冻结工作空间
//
// @return FrozenWorkspaceResponse
func (client *Client) FrozenWorkspace(workspaceId *string) (_result *FrozenWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &FrozenWorkspaceResponse{}
	_body, _err := client.FrozenWorkspaceWithOptions(workspaceId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查找应用详情
//
// @param request - GetApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetApplicationResponse
func (client *Client) GetApplicationWithOptions(appName *string, request *GetApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetApplication"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查找应用详情
//
// @param request - GetApplicationRequest
//
// @return GetApplicationResponse
func (client *Client) GetApplication(appName *string, request *GetApplicationRequest) (_result *GetApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetApplicationResponse{}
	_body, _err := client.GetApplicationWithOptions(appName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询单个分支
//
// @param request - GetBranchInfoRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBranchInfoResponse
func (client *Client) GetBranchInfoWithOptions(repositoryId *string, request *GetBranchInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetBranchInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.BranchName)) {
		query["branchName"] = request.BranchName
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBranchInfo"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/branches/detail"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBranchInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询单个分支
//
// @param request - GetBranchInfoRequest
//
// @return GetBranchInfoResponse
func (client *Client) GetBranchInfo(repositoryId *string, request *GetBranchInfoRequest) (_result *GetBranchInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetBranchInfoResponse{}
	_body, _err := client.GetBranchInfoWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询检查运行
//
// @param request - GetCheckRunRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCheckRunResponse
func (client *Client) GetCheckRunWithOptions(request *GetCheckRunRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCheckRunResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.CheckRunId)) {
		query["checkRunId"] = request.CheckRunId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCheckRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/check_runs/get_check_run"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCheckRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询检查运行
//
// @param request - GetCheckRunRequest
//
// @return GetCheckRunResponse
func (client *Client) GetCheckRun(request *GetCheckRunRequest) (_result *GetCheckRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCheckRunResponse{}
	_body, _err := client.GetCheckRunWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取企业信息
//
// @param request - GetCodeupOrganizationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCodeupOrganizationResponse
func (client *Client) GetCodeupOrganizationWithOptions(identity *string, request *GetCodeupOrganizationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCodeupOrganizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCodeupOrganization"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/organization/" + tea.StringValue(openapiutil.GetEncodeParam(identity))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCodeupOrganizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取企业信息
//
// @param request - GetCodeupOrganizationRequest
//
// @return GetCodeupOrganizationResponse
func (client *Client) GetCodeupOrganization(identity *string, request *GetCodeupOrganizationRequest) (_result *GetCodeupOrganizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCodeupOrganizationResponse{}
	_body, _err := client.GetCodeupOrganizationWithOptions(identity, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取比较详情
//
// @param request - GetCompareDetailRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCompareDetailResponse
func (client *Client) GetCompareDetailWithOptions(repositoryId *string, request *GetCompareDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCompareDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["from"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDiffByte)) {
		query["maxDiffByte"] = request.MaxDiffByte
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDiffFile)) {
		query["maxDiffFile"] = request.MaxDiffFile
	}

	if !tea.BoolValue(util.IsUnset(request.MergeBase)) {
		query["mergeBase"] = request.MergeBase
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.To)) {
		query["to"] = request.To
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCompareDetail"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/commits/compare/detail"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCompareDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取比较详情
//
// @param request - GetCompareDetailRequest
//
// @return GetCompareDetailResponse
func (client *Client) GetCompareDetail(repositoryId *string, request *GetCompareDetailRequest) (_result *GetCompareDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCompareDetailResponse{}
	_body, _err := client.GetCompareDetailWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取自定义字段的选项值
//
// @param request - GetCustomFieldOptionRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomFieldOptionResponse
func (client *Client) GetCustomFieldOptionWithOptions(organizationId *string, fieldId *string, request *GetCustomFieldOptionRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetCustomFieldOptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		query["spaceIdentifier"] = request.SpaceIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceType)) {
		query["spaceType"] = request.SpaceType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemTypeIdentifier)) {
		query["workitemTypeIdentifier"] = request.WorkitemTypeIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomFieldOption"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/fields/" + tea.StringValue(openapiutil.GetEncodeParam(fieldId)) + "/getCustomOption"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomFieldOptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取自定义字段的选项值
//
// @param request - GetCustomFieldOptionRequest
//
// @return GetCustomFieldOptionResponse
func (client *Client) GetCustomFieldOption(organizationId *string, fieldId *string, request *GetCustomFieldOptionRequest) (_result *GetCustomFieldOptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetCustomFieldOptionResponse{}
	_body, _err := client.GetCustomFieldOptionWithOptions(organizationId, fieldId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询文件
//
// @param request - GetFileBlobsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileBlobsResponse
func (client *Client) GetFileBlobsWithOptions(repositoryId *string, request *GetFileBlobsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFileBlobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["filePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["from"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Ref)) {
		query["ref"] = request.Ref
	}

	if !tea.BoolValue(util.IsUnset(request.To)) {
		query["to"] = request.To
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFileBlobs"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/files/blobs"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileBlobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询文件
//
// @param request - GetFileBlobsRequest
//
// @return GetFileBlobsResponse
func (client *Client) GetFileBlobs(repositoryId *string, request *GetFileBlobsRequest) (_result *GetFileBlobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFileBlobsResponse{}
	_body, _err := client.GetFileBlobsWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取文件上一次提交信息
//
// @param request - GetFileLastCommitRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileLastCommitResponse
func (client *Client) GetFileLastCommitWithOptions(repositoryId *string, request *GetFileLastCommitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFileLastCommitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["filePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Sha)) {
		query["sha"] = request.Sha
	}

	if !tea.BoolValue(util.IsUnset(request.ShowSignature)) {
		query["showSignature"] = request.ShowSignature
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFileLastCommit"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/files/lastCommit"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileLastCommitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取文件上一次提交信息
//
// @param request - GetFileLastCommitRequest
//
// @return GetFileLastCommitResponse
func (client *Client) GetFileLastCommit(repositoryId *string, request *GetFileLastCommitRequest) (_result *GetFileLastCommitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFileLastCommitResponse{}
	_body, _err := client.GetFileLastCommitWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取标签分类
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFlowTagGroupResponse
func (client *Client) GetFlowTagGroupWithOptions(organizationId *string, id *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetFlowTagGroupResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetFlowTagGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/flow/tagGroups/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFlowTagGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取标签分类
//
// @return GetFlowTagGroupResponse
func (client *Client) GetFlowTagGroup(organizationId *string, id *string) (_result *GetFlowTagGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetFlowTagGroupResponse{}
	_body, _err := client.GetFlowTagGroupWithOptions(organizationId, id, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据路径查询代码组
//
// @param request - GetGroupByPathRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetGroupByPathResponse
func (client *Client) GetGroupByPathWithOptions(request *GetGroupByPathRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetGroupByPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Identity)) {
		query["identity"] = request.Identity
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetGroupByPath"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/4/groups/find_by_path"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetGroupByPathResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据路径查询代码组
//
// @param request - GetGroupByPathRequest
//
// @return GetGroupByPathResponse
func (client *Client) GetGroupByPath(request *GetGroupByPathRequest) (_result *GetGroupByPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetGroupByPathResponse{}
	_body, _err := client.GetGroupByPathWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码组信息
//
// @param request - GetGroupDetailRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetGroupDetailResponse
func (client *Client) GetGroupDetailWithOptions(request *GetGroupDetailRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetGroupDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["groupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetGroupDetail"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/groups/get_detail"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetGroupDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码组信息
//
// @param request - GetGroupDetailRequest
//
// @return GetGroupDetailResponse
func (client *Client) GetGroupDetail(request *GetGroupDetailRequest) (_result *GetGroupDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetGroupDetailResponse{}
	_body, _err := client.GetGroupDetailWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取主机组信息
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetHostGroupResponse
func (client *Client) GetHostGroupWithOptions(organizationId *string, id *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetHostGroupResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetHostGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/hostGroups/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHostGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取主机组信息
//
// @return GetHostGroupResponse
func (client *Client) GetHostGroup(organizationId *string, id *string) (_result *GetHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetHostGroupResponse{}
	_body, _err := client.GetHostGroupWithOptions(organizationId, id, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询合并请求详情
//
// @param request - GetMergeRequestRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMergeRequestResponse
func (client *Client) GetMergeRequestWithOptions(repositoryId *string, localId *string, request *GetMergeRequestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMergeRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMergeRequest"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/merge_requests/" + tea.StringValue(openapiutil.GetEncodeParam(localId)) + "/detail"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMergeRequestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询合并请求详情
//
// @param request - GetMergeRequestRequest
//
// @return GetMergeRequestResponse
func (client *Client) GetMergeRequest(repositoryId *string, localId *string, request *GetMergeRequestRequest) (_result *GetMergeRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMergeRequestResponse{}
	_body, _err := client.GetMergeRequestWithOptions(repositoryId, localId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询合并请求的变更信息
//
// @param request - GetMergeRequestChangeTreeRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMergeRequestChangeTreeResponse
func (client *Client) GetMergeRequestChangeTreeWithOptions(request *GetMergeRequestChangeTreeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetMergeRequestChangeTreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.FromPatchSetBizId)) {
		query["fromPatchSetBizId"] = request.FromPatchSetBizId
	}

	if !tea.BoolValue(util.IsUnset(request.LocalId)) {
		query["localId"] = request.LocalId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	if !tea.BoolValue(util.IsUnset(request.ToPatchSetBizId)) {
		query["toPatchSetBizId"] = request.ToPatchSetBizId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMergeRequestChangeTree"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/merge_requests/diffs/change_tree"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMergeRequestChangeTreeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询合并请求的变更信息
//
// @param request - GetMergeRequestChangeTreeRequest
//
// @return GetMergeRequestChangeTreeResponse
func (client *Client) GetMergeRequestChangeTree(request *GetMergeRequestChangeTreeRequest) (_result *GetMergeRequestChangeTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetMergeRequestChangeTreeResponse{}
	_body, _err := client.GetMergeRequestChangeTreeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取企业成员
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOrganizationMemberResponse
func (client *Client) GetOrganizationMemberWithOptions(organizationId *string, accountId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetOrganizationMemberResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetOrganizationMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/members/" + tea.StringValue(openapiutil.GetEncodeParam(accountId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOrganizationMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取企业成员
//
// @return GetOrganizationMemberResponse
func (client *Client) GetOrganizationMember(organizationId *string, accountId *string) (_result *GetOrganizationMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetOrganizationMemberResponse{}
	_body, _err := client.GetOrganizationMemberWithOptions(organizationId, accountId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPipelineResponse
func (client *Client) GetPipelineWithOptions(organizationId *string, pipelineId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPipelineResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetPipeline"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线
//
// @return GetPipelineResponse
func (client *Client) GetPipeline(organizationId *string, pipelineId *string) (_result *GetPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPipelineResponse{}
	_body, _err := client.GetPipelineWithOptions(organizationId, pipelineId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取构建物下载链接
//
// @param request - GetPipelineArtifactUrlRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPipelineArtifactUrlResponse
func (client *Client) GetPipelineArtifactUrlWithOptions(organizationId *string, request *GetPipelineArtifactUrlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPipelineArtifactUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["fileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		query["filePath"] = request.FilePath
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPipelineArtifactUrl"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipeline/getArtifactDownloadUrl"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPipelineArtifactUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取构建物下载链接
//
// @param request - GetPipelineArtifactUrlRequest
//
// @return GetPipelineArtifactUrlResponse
func (client *Client) GetPipelineArtifactUrl(organizationId *string, request *GetPipelineArtifactUrlRequest) (_result *GetPipelineArtifactUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPipelineArtifactUrlResponse{}
	_body, _err := client.GetPipelineArtifactUrlWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取emase构建物下载链接
//
// @param request - GetPipelineEmasArtifactUrlRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPipelineEmasArtifactUrlResponse
func (client *Client) GetPipelineEmasArtifactUrlWithOptions(organizationId *string, emasJobInstanceId *string, md5 *string, pipelineId *string, pipelineRunId *string, request *GetPipelineEmasArtifactUrlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPipelineEmasArtifactUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ServiceConnectionId)) {
		query["serviceConnectionId"] = request.ServiceConnectionId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPipelineEmasArtifactUrl"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipeline/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRun/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineRunId)) + "/emas/artifact/" + tea.StringValue(openapiutil.GetEncodeParam(emasJobInstanceId)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(md5))),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPipelineEmasArtifactUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取emase构建物下载链接
//
// @param request - GetPipelineEmasArtifactUrlRequest
//
// @return GetPipelineEmasArtifactUrlResponse
func (client *Client) GetPipelineEmasArtifactUrl(organizationId *string, emasJobInstanceId *string, md5 *string, pipelineId *string, pipelineRunId *string, request *GetPipelineEmasArtifactUrlRequest) (_result *GetPipelineEmasArtifactUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPipelineEmasArtifactUrlResponse{}
	_body, _err := client.GetPipelineEmasArtifactUrlWithOptions(organizationId, emasJobInstanceId, md5, pipelineId, pipelineRunId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线分组
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPipelineGroupResponse
func (client *Client) GetPipelineGroupWithOptions(organizationId *string, groupId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPipelineGroupResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetPipelineGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelineGroups/" + tea.StringValue(openapiutil.GetEncodeParam(groupId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPipelineGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线分组
//
// @return GetPipelineGroupResponse
func (client *Client) GetPipelineGroup(organizationId *string, groupId *string) (_result *GetPipelineGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPipelineGroupResponse{}
	_body, _err := client.GetPipelineGroupWithOptions(organizationId, groupId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线运行信息
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPipelineRunResponse
func (client *Client) GetPipelineRunWithOptions(organizationId *string, pipelineId *string, pipelineRunId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPipelineRunResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetPipelineRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRuns/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineRunId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPipelineRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线运行信息
//
// @return GetPipelineRunResponse
func (client *Client) GetPipelineRun(organizationId *string, pipelineId *string, pipelineRunId *string) (_result *GetPipelineRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPipelineRunResponse{}
	_body, _err := client.GetPipelineRunWithOptions(organizationId, pipelineId, pipelineRunId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取扫描报告下载链接
//
// @param request - GetPipelineScanReportUrlRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPipelineScanReportUrlResponse
func (client *Client) GetPipelineScanReportUrlWithOptions(organizationId *string, request *GetPipelineScanReportUrlRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPipelineScanReportUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ReportPath)) {
		body["reportPath"] = request.ReportPath
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPipelineScanReportUrl"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipeline/getPipelineScanReportUrl"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPipelineScanReportUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取扫描报告下载链接
//
// @param request - GetPipelineScanReportUrlRequest
//
// @return GetPipelineScanReportUrlResponse
func (client *Client) GetPipelineScanReportUrl(organizationId *string, request *GetPipelineScanReportUrlRequest) (_result *GetPipelineScanReportUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPipelineScanReportUrlResponse{}
	_body, _err := client.GetPipelineScanReportUrlWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据id获取项目详情-Projex
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetProjectInfoResponse
func (client *Client) GetProjectInfoWithOptions(organizationId *string, projectId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetProjectInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetProjectInfo"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/project/" + tea.StringValue(openapiutil.GetEncodeParam(projectId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProjectInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据id获取项目详情-Projex
//
// @return GetProjectInfoResponse
func (client *Client) GetProjectInfo(organizationId *string, projectId *string) (_result *GetProjectInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetProjectInfoResponse{}
	_body, _err := client.GetProjectInfoWithOptions(organizationId, projectId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码库成员
//
// @param request - GetProjectMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetProjectMemberResponse
func (client *Client) GetProjectMemberWithOptions(repositoryId *string, aliyunPk *string, request *GetProjectMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetProjectMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProjectMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/members/get/" + tea.StringValue(openapiutil.GetEncodeParam(aliyunPk))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProjectMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码库成员
//
// @param request - GetProjectMemberRequest
//
// @return GetProjectMemberResponse
func (client *Client) GetProjectMember(repositoryId *string, aliyunPk *string, request *GetProjectMemberRequest) (_result *GetProjectMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetProjectMemberResponse{}
	_body, _err := client.GetProjectMemberWithOptions(repositoryId, aliyunPk, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询推送规则
//
// @param request - GetPushRuleRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPushRuleResponse
func (client *Client) GetPushRuleWithOptions(repositoryId *string, pushRuleId *string, request *GetPushRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetPushRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPushRule"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/push_rule/" + tea.StringValue(openapiutil.GetEncodeParam(pushRuleId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPushRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询推送规则
//
// @param request - GetPushRuleRequest
//
// @return GetPushRuleResponse
func (client *Client) GetPushRule(repositoryId *string, pushRuleId *string, request *GetPushRuleRequest) (_result *GetPushRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetPushRuleResponse{}
	_body, _err := client.GetPushRuleWithOptions(repositoryId, pushRuleId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取研发阶段流水线运行实例
//
// @param request - GetReleaseStagePipelineRunRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetReleaseStagePipelineRunResponse
func (client *Client) GetReleaseStagePipelineRunWithOptions(appName *string, releaseWorkflowSn *string, releaseStageSn *string, executionNumber *string, request *GetReleaseStagePipelineRunRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetReleaseStagePipelineRunResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetReleaseStagePipelineRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/releaseWorkflows/" + tea.StringValue(openapiutil.GetEncodeParam(releaseWorkflowSn)) + "/releaseStages/" + tea.StringValue(openapiutil.GetEncodeParam(releaseStageSn)) + "/executions/" + tea.StringValue(openapiutil.GetEncodeParam(executionNumber)) + "%3AgetPipelineRun"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetReleaseStagePipelineRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取研发阶段流水线运行实例
//
// @param request - GetReleaseStagePipelineRunRequest
//
// @return GetReleaseStagePipelineRunResponse
func (client *Client) GetReleaseStagePipelineRun(appName *string, releaseWorkflowSn *string, releaseStageSn *string, executionNumber *string, request *GetReleaseStagePipelineRunRequest) (_result *GetReleaseStagePipelineRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetReleaseStagePipelineRunResponse{}
	_body, _err := client.GetReleaseStagePipelineRunWithOptions(appName, releaseWorkflowSn, releaseStageSn, executionNumber, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 使用代码库ID或路径查询代码库信息
//
// @param request - GetRepositoryRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRepositoryResponse
func (client *Client) GetRepositoryWithOptions(request *GetRepositoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetRepositoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.Identity)) {
		query["identity"] = request.Identity
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRepository"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/get"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRepositoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 使用代码库ID或路径查询代码库信息
//
// @param request - GetRepositoryRequest
//
// @return GetRepositoryResponse
func (client *Client) GetRepository(request *GetRepositoryRequest) (_result *GetRepositoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetRepositoryResponse{}
	_body, _err := client.GetRepositoryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码库提交信息
//
// @param request - GetRepositoryCommitRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRepositoryCommitResponse
func (client *Client) GetRepositoryCommitWithOptions(repositoryId *string, sha *string, request *GetRepositoryCommitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetRepositoryCommitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.ShowSignature)) {
		query["showSignature"] = request.ShowSignature
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRepositoryCommit"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/commits/" + tea.StringValue(openapiutil.GetEncodeParam(sha))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRepositoryCommitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码库提交信息
//
// @param request - GetRepositoryCommitRequest
//
// @return GetRepositoryCommitResponse
func (client *Client) GetRepositoryCommit(repositoryId *string, sha *string, request *GetRepositoryCommitRequest) (_result *GetRepositoryCommitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetRepositoryCommitResponse{}
	_body, _err := client.GetRepositoryCommitWithOptions(repositoryId, sha, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询单个标签
//
// @param request - GetRepositoryTagRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRepositoryTagResponse
func (client *Client) GetRepositoryTagWithOptions(repositoryId *string, request *GetRepositoryTagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetRepositoryTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.TagName)) {
		query["tagName"] = request.TagName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRepositoryTag"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/tag/info"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRepositoryTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询单个标签
//
// @param request - GetRepositoryTagRequest
//
// @return GetRepositoryTagResponse
func (client *Client) GetRepositoryTag(repositoryId *string, request *GetRepositoryTagRequest) (_result *GetRepositoryTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetRepositoryTagResponse{}
	_body, _err := client.GetRepositoryTagWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 预览代码片段
//
// @param request - GetSearchCodePreviewRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSearchCodePreviewResponse
func (client *Client) GetSearchCodePreviewWithOptions(request *GetSearchCodePreviewRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSearchCodePreviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocId)) {
		query["docId"] = request.DocId
	}

	if !tea.BoolValue(util.IsUnset(request.IsDsl)) {
		query["isDsl"] = request.IsDsl
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSearchCodePreview"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/search/code_preview"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSearchCodePreviewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 预览代码片段
//
// @param request - GetSearchCodePreviewRequest
//
// @return GetSearchCodePreviewResponse
func (client *Client) GetSearchCodePreview(request *GetSearchCodePreviewRequest) (_result *GetSearchCodePreviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSearchCodePreviewResponse{}
	_body, _err := client.GetSearchCodePreviewWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取迭代详情
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSprintInfoResponse
func (client *Client) GetSprintInfoWithOptions(organizationId *string, sprintId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetSprintInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetSprintInfo"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/sprints/" + tea.StringValue(openapiutil.GetEncodeParam(sprintId)) + "/getSprintinfo"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSprintInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取迭代详情
//
// @return GetSprintInfoResponse
func (client *Client) GetSprintInfo(organizationId *string, sprintId *string) (_result *GetSprintInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetSprintInfoResponse{}
	_body, _err := client.GetSprintInfoWithOptions(organizationId, sprintId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取测试计划中的测试用例列表
//
// @param request - GetTestResultListRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTestResultListResponse
func (client *Client) GetTestResultListWithOptions(organizationId *string, testPlanIdentifier *string, request *GetTestResultListRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTestResultListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Conditions)) {
		body["conditions"] = request.Conditions
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryIdentifier)) {
		body["directoryIdentifier"] = request.DirectoryIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTestResultList"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/testhub/testplan/" + tea.StringValue(openapiutil.GetEncodeParam(testPlanIdentifier)) + "/testresults"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTestResultListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取测试计划中的测试用例列表
//
// @param request - GetTestResultListRequest
//
// @return GetTestResultListResponse
func (client *Client) GetTestResultList(organizationId *string, testPlanIdentifier *string, request *GetTestResultListRequest) (_result *GetTestResultListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTestResultListResponse{}
	_body, _err := client.GetTestResultListWithOptions(organizationId, testPlanIdentifier, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取测试用例列表
//
// @param request - GetTestcaseListRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTestcaseListResponse
func (client *Client) GetTestcaseListWithOptions(organizationId *string, request *GetTestcaseListRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetTestcaseListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Conditions)) {
		body["conditions"] = request.Conditions
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryIdentifier)) {
		body["directoryIdentifier"] = request.DirectoryIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResult)) {
		body["maxResult"] = request.MaxResult
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		body["spaceIdentifier"] = request.SpaceIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTestcaseList"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/testhub/testcases"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTestcaseListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取测试用例列表
//
// @param request - GetTestcaseListRequest
//
// @return GetTestcaseListResponse
func (client *Client) GetTestcaseList(organizationId *string, request *GetTestcaseListRequest) (_result *GetTestcaseListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetTestcaseListResponse{}
	_body, _err := client.GetTestcaseListWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询当前用户信息
//
// @param request - GetUserInfoRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUserInfoResponse
func (client *Client) GetUserInfoWithOptions(request *GetUserInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetUserInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserInfo"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/users/current"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询当前用户信息
//
// @param request - GetUserInfoRequest
//
// @return GetUserInfoResponse
func (client *Client) GetUserInfo(request *GetUserInfoRequest) (_result *GetUserInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetUserInfoResponse{}
	_body, _err := client.GetUserInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取部署单信息
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVMDeployOrderResponse
func (client *Client) GetVMDeployOrderWithOptions(organizationId *string, pipelineId *string, deployOrderId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetVMDeployOrderResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetVMDeployOrder"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/deploy/" + tea.StringValue(openapiutil.GetEncodeParam(deployOrderId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVMDeployOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取部署单信息
//
// @return GetVMDeployOrderResponse
func (client *Client) GetVMDeployOrder(organizationId *string, pipelineId *string, deployOrderId *string) (_result *GetVMDeployOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetVMDeployOrderResponse{}
	_body, _err := client.GetVMDeployOrderWithOptions(organizationId, pipelineId, deployOrderId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取变量组
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVariableGroupResponse
func (client *Client) GetVariableGroupWithOptions(organizationId *string, id *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetVariableGroupResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetVariableGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/variableGroups/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVariableGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取变量组
//
// @return GetVariableGroupResponse
func (client *Client) GetVariableGroup(organizationId *string, id *string) (_result *GetVariableGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetVariableGroupResponse{}
	_body, _err := client.GetVariableGroupWithOptions(organizationId, id, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取工作项动态
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkItemActivityResponse
func (client *Client) GetWorkItemActivityWithOptions(organizationId *string, workitemId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkItemActivityResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkItemActivity"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/" + tea.StringValue(openapiutil.GetEncodeParam(workitemId)) + "/getActivity"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkItemActivityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取工作项动态
//
// @return GetWorkItemActivityResponse
func (client *Client) GetWorkItemActivity(organizationId *string, workitemId *string) (_result *GetWorkItemActivityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkItemActivityResponse{}
	_body, _err := client.GetWorkItemActivityWithOptions(organizationId, workitemId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据id获取工作项详情
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkItemInfoResponse
func (client *Client) GetWorkItemInfoWithOptions(organizationId *string, workitemId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkItemInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkItemInfo"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/" + tea.StringValue(openapiutil.GetEncodeParam(workitemId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkItemInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据id获取工作项详情
//
// @return GetWorkItemInfoResponse
func (client *Client) GetWorkItemInfo(organizationId *string, workitemId *string) (_result *GetWorkItemInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkItemInfoResponse{}
	_body, _err := client.GetWorkItemInfoWithOptions(organizationId, workitemId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取工作项工作流信息
//
// @param request - GetWorkItemWorkFlowInfoRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkItemWorkFlowInfoResponse
func (client *Client) GetWorkItemWorkFlowInfoWithOptions(organizationId *string, workitemId *string, request *GetWorkItemWorkFlowInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkItemWorkFlowInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigurationId)) {
		query["configurationId"] = request.ConfigurationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkItemWorkFlowInfo"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/" + tea.StringValue(openapiutil.GetEncodeParam(workitemId)) + "/getWorkflowInfo"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkItemWorkFlowInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取工作项工作流信息
//
// @param request - GetWorkItemWorkFlowInfoRequest
//
// @return GetWorkItemWorkFlowInfoResponse
func (client *Client) GetWorkItemWorkFlowInfo(organizationId *string, workitemId *string, request *GetWorkItemWorkFlowInfoRequest) (_result *GetWorkItemWorkFlowInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkItemWorkFlowInfoResponse{}
	_body, _err := client.GetWorkItemWorkFlowInfoWithOptions(organizationId, workitemId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取附件上传的元信息
//
// @param request - GetWorkitemAttachmentCreatemetaRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkitemAttachmentCreatemetaResponse
func (client *Client) GetWorkitemAttachmentCreatemetaWithOptions(organizationId *string, workitemIdentifier *string, request *GetWorkitemAttachmentCreatemetaRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkitemAttachmentCreatemetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["fileName"] = request.FileName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkitemAttachmentCreatemeta"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitem/" + tea.StringValue(openapiutil.GetEncodeParam(workitemIdentifier)) + "/attachment/createmeta"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkitemAttachmentCreatemetaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取附件上传的元信息
//
// @param request - GetWorkitemAttachmentCreatemetaRequest
//
// @return GetWorkitemAttachmentCreatemetaResponse
func (client *Client) GetWorkitemAttachmentCreatemeta(organizationId *string, workitemIdentifier *string, request *GetWorkitemAttachmentCreatemetaRequest) (_result *GetWorkitemAttachmentCreatemetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkitemAttachmentCreatemetaResponse{}
	_body, _err := client.GetWorkitemAttachmentCreatemetaWithOptions(organizationId, workitemIdentifier, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得所有评论
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkitemCommentListResponse
func (client *Client) GetWorkitemCommentListWithOptions(organizationId *string, workitemId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkitemCommentListResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkitemCommentList"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/" + tea.StringValue(openapiutil.GetEncodeParam(workitemId)) + "/commentList"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkitemCommentListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得所有评论
//
// @return GetWorkitemCommentListResponse
func (client *Client) GetWorkitemCommentList(organizationId *string, workitemId *string) (_result *GetWorkitemCommentListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkitemCommentListResponse{}
	_body, _err := client.GetWorkitemCommentListWithOptions(organizationId, workitemId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取工作项文件信息
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkitemFileResponse
func (client *Client) GetWorkitemFileWithOptions(organizationId *string, workitemIdentifier *string, fileIdentifier *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkitemFileResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkitemFile"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitem/" + tea.StringValue(openapiutil.GetEncodeParam(workitemIdentifier)) + "/files/" + tea.StringValue(openapiutil.GetEncodeParam(fileIdentifier))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkitemFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取工作项文件信息
//
// @return GetWorkitemFileResponse
func (client *Client) GetWorkitemFile(organizationId *string, workitemIdentifier *string, fileIdentifier *string) (_result *GetWorkitemFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkitemFileResponse{}
	_body, _err := client.GetWorkitemFileWithOptions(organizationId, workitemIdentifier, fileIdentifier, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得一个工作项的指定关联项
//
// @param request - GetWorkitemRelationsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkitemRelationsResponse
func (client *Client) GetWorkitemRelationsWithOptions(organizationId *string, workitemId *string, request *GetWorkitemRelationsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkitemRelationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RelationType)) {
		query["relationType"] = request.RelationType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkitemRelations"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/" + tea.StringValue(openapiutil.GetEncodeParam(workitemId)) + "/getRelations"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkitemRelationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得一个工作项的指定关联项
//
// @param request - GetWorkitemRelationsRequest
//
// @return GetWorkitemRelationsResponse
func (client *Client) GetWorkitemRelations(organizationId *string, workitemId *string, request *GetWorkitemRelationsRequest) (_result *GetWorkitemRelationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkitemRelationsResponse{}
	_body, _err := client.GetWorkitemRelationsWithOptions(organizationId, workitemId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获得一个企业下所有工时类型
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkitemTimeTypeListResponse
func (client *Client) GetWorkitemTimeTypeListWithOptions(organizationId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkitemTimeTypeListResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkitemTimeTypeList"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/type/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkitemTimeTypeListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获得一个企业下所有工时类型
//
// @return GetWorkitemTimeTypeListResponse
func (client *Client) GetWorkitemTimeTypeList(organizationId *string) (_result *GetWorkitemTimeTypeListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkitemTimeTypeListResponse{}
	_body, _err := client.GetWorkitemTimeTypeListWithOptions(organizationId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询工作空间详情
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkspaceResponse
func (client *Client) GetWorkspaceWithOptions(workspaceId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *GetWorkspaceResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkspace"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/workspaces/" + tea.StringValue(openapiutil.GetEncodeParam(workspaceId))),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询工作空间详情
//
// @return GetWorkspaceResponse
func (client *Client) GetWorkspace(workspaceId *string) (_result *GetWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &GetWorkspaceResponse{}
	_body, _err := client.GetWorkspaceWithOptions(workspaceId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 加入流水线分组
//
// @param request - JoinPipelineGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return JoinPipelineGroupResponse
func (client *Client) JoinPipelineGroupWithOptions(organizationId *string, request *JoinPipelineGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *JoinPipelineGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["groupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineIds)) {
		query["pipelineIds"] = request.PipelineIds
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinPipelineGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelineGroups/join"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &JoinPipelineGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 加入流水线分组
//
// @param request - JoinPipelineGroupRequest
//
// @return JoinPipelineGroupResponse
func (client *Client) JoinPipelineGroup(organizationId *string, request *JoinPipelineGroupRequest) (_result *JoinPipelineGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &JoinPipelineGroupResponse{}
	_body, _err := client.JoinPipelineGroupWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 关联合并请求Label
//
// @param request - LinkMergeRequestLabelRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LinkMergeRequestLabelResponse
func (client *Client) LinkMergeRequestLabelWithOptions(request *LinkMergeRequestLabelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *LinkMergeRequestLabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.LocalId)) {
		query["localId"] = request.LocalId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LabelIds)) {
		body["labelIds"] = request.LabelIds
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("LinkMergeRequestLabel"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/merge_requests/link_labels"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &LinkMergeRequestLabelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 关联合并请求Label
//
// @param request - LinkMergeRequestLabelRequest
//
// @return LinkMergeRequestLabelResponse
func (client *Client) LinkMergeRequestLabel(request *LinkMergeRequestLabelRequest) (_result *LinkMergeRequestLabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &LinkMergeRequestLabelResponse{}
	_body, _err := client.LinkMergeRequestLabelWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查找应用下所有的研发流程
//
// @param request - ListAllReleaseWorkflowsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAllReleaseWorkflowsResponse
func (client *Client) ListAllReleaseWorkflowsWithOptions(appName *string, request *ListAllReleaseWorkflowsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAllReleaseWorkflowsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAllReleaseWorkflows"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/releaseWorkflows"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("array"),
	}
	_result = &ListAllReleaseWorkflowsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查找应用下所有的研发流程
//
// @param request - ListAllReleaseWorkflowsRequest
//
// @return ListAllReleaseWorkflowsResponse
func (client *Client) ListAllReleaseWorkflows(appName *string, request *ListAllReleaseWorkflowsRequest) (_result *ListAllReleaseWorkflowsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAllReleaseWorkflowsResponse{}
	_body, _err := client.ListAllReleaseWorkflowsWithOptions(appName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询研发阶段执行记录集成变更信息
//
// @param request - ListAppReleaseStageExecutionIntegratedMetadataRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAppReleaseStageExecutionIntegratedMetadataResponse
func (client *Client) ListAppReleaseStageExecutionIntegratedMetadataWithOptions(appName *string, releaseWorkflowSn *string, releaseStageSn *string, executionNumber *string, request *ListAppReleaseStageExecutionIntegratedMetadataRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppReleaseStageExecutionIntegratedMetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAppReleaseStageExecutionIntegratedMetadata"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/releaseWorkflows/" + tea.StringValue(openapiutil.GetEncodeParam(releaseWorkflowSn)) + "/releaseStages/" + tea.StringValue(openapiutil.GetEncodeParam(releaseStageSn)) + "/executions/" + tea.StringValue(openapiutil.GetEncodeParam(executionNumber)) + "/integratedMetadata"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("array"),
	}
	_result = &ListAppReleaseStageExecutionIntegratedMetadataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询研发阶段执行记录集成变更信息
//
// @param request - ListAppReleaseStageExecutionIntegratedMetadataRequest
//
// @return ListAppReleaseStageExecutionIntegratedMetadataResponse
func (client *Client) ListAppReleaseStageExecutionIntegratedMetadata(appName *string, releaseWorkflowSn *string, releaseStageSn *string, executionNumber *string, request *ListAppReleaseStageExecutionIntegratedMetadataRequest) (_result *ListAppReleaseStageExecutionIntegratedMetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppReleaseStageExecutionIntegratedMetadataResponse{}
	_body, _err := client.ListAppReleaseStageExecutionIntegratedMetadataWithOptions(appName, releaseWorkflowSn, releaseStageSn, executionNumber, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量查询研发阶段执行记录
//
// @param request - ListAppReleaseStageExecutionsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAppReleaseStageExecutionsResponse
func (client *Client) ListAppReleaseStageExecutionsWithOptions(appName *string, releaseWorkflowSn *string, releaseStageSn *string, request *ListAppReleaseStageExecutionsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListAppReleaseStageExecutionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["orderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.Pagination)) {
		query["pagination"] = request.Pagination
	}

	if !tea.BoolValue(util.IsUnset(request.PerPage)) {
		query["perPage"] = request.PerPage
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAppReleaseStageExecutions"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/releaseWorkflows/" + tea.StringValue(openapiutil.GetEncodeParam(releaseWorkflowSn)) + "/releaseStages/" + tea.StringValue(openapiutil.GetEncodeParam(releaseStageSn)) + "/executions"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAppReleaseStageExecutionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量查询研发阶段执行记录
//
// @param request - ListAppReleaseStageExecutionsRequest
//
// @return ListAppReleaseStageExecutionsResponse
func (client *Client) ListAppReleaseStageExecutions(appName *string, releaseWorkflowSn *string, releaseStageSn *string, request *ListAppReleaseStageExecutionsRequest) (_result *ListAppReleaseStageExecutionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListAppReleaseStageExecutionsResponse{}
	_body, _err := client.ListAppReleaseStageExecutionsWithOptions(appName, releaseWorkflowSn, releaseStageSn, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查找应用成员列表
//
// @param request - ListApplicationMembersRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListApplicationMembersResponse
func (client *Client) ListApplicationMembersWithOptions(appName *string, request *ListApplicationMembersRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListApplicationMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListApplicationMembers"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/members"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListApplicationMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查找应用成员列表
//
// @param request - ListApplicationMembersRequest
//
// @return ListApplicationMembersResponse
func (client *Client) ListApplicationMembers(appName *string, request *ListApplicationMembersRequest) (_result *ListApplicationMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListApplicationMembersResponse{}
	_body, _err := client.ListApplicationMembersWithOptions(appName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 分页查找应用详情
//
// @param request - ListApplicationsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListApplicationsResponse
func (client *Client) ListApplicationsWithOptions(request *ListApplicationsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["orderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Pagination)) {
		query["pagination"] = request.Pagination
	}

	if !tea.BoolValue(util.IsUnset(request.PerPage)) {
		query["perPage"] = request.PerPage
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListApplications"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps%3Asearch"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 分页查找应用详情
//
// @param request - ListApplicationsRequest
//
// @return ListApplicationsResponse
func (client *Client) ListApplications(request *ListApplicationsRequest) (_result *ListApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListApplicationsResponse{}
	_body, _err := client.ListApplicationsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变更研发流程运行记录
//
// @param request - ListChangeRequestWorkflowExecutionsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListChangeRequestWorkflowExecutionsResponse
func (client *Client) ListChangeRequestWorkflowExecutionsWithOptions(appName *string, sn *string, request *ListChangeRequestWorkflowExecutionsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListChangeRequestWorkflowExecutionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["orderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PerPage)) {
		query["perPage"] = request.PerPage
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseStageSn)) {
		query["releaseStageSn"] = request.ReleaseStageSn
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseWorkflowSn)) {
		query["releaseWorkflowSn"] = request.ReleaseWorkflowSn
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListChangeRequestWorkflowExecutions"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/changeRequests/" + tea.StringValue(openapiutil.GetEncodeParam(sn)) + "/executions"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListChangeRequestWorkflowExecutionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变更研发流程运行记录
//
// @param request - ListChangeRequestWorkflowExecutionsRequest
//
// @return ListChangeRequestWorkflowExecutionsResponse
func (client *Client) ListChangeRequestWorkflowExecutions(appName *string, sn *string, request *ListChangeRequestWorkflowExecutionsRequest) (_result *ListChangeRequestWorkflowExecutionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListChangeRequestWorkflowExecutionsResponse{}
	_body, _err := client.ListChangeRequestWorkflowExecutionsWithOptions(appName, sn, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询变更列表
//
// @param tmpReq - ListChangeRequestsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListChangeRequestsResponse
func (client *Client) ListChangeRequestsWithOptions(appName *string, tmpReq *ListChangeRequestsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListChangeRequestsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListChangeRequestsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AppNameList)) {
		request.AppNameListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AppNameList, tea.String("appNameList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.OwnerIdList)) {
		request.OwnerIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OwnerIdList, tea.String("ownerIdList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.StateList)) {
		request.StateListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StateList, tea.String("stateList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppNameListShrink)) {
		query["appNameList"] = request.AppNameListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DisplayNameKeyword)) {
		query["displayNameKeyword"] = request.DisplayNameKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["orderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerIdListShrink)) {
		query["ownerIdList"] = request.OwnerIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.Pagination)) {
		query["pagination"] = request.Pagination
	}

	if !tea.BoolValue(util.IsUnset(request.PerPage)) {
		query["perPage"] = request.PerPage
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	if !tea.BoolValue(util.IsUnset(request.StateListShrink)) {
		query["stateList"] = request.StateListShrink
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListChangeRequests"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/changeRequests"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListChangeRequestsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询变更列表
//
// @param request - ListChangeRequestsRequest
//
// @return ListChangeRequestsResponse
func (client *Client) ListChangeRequests(appName *string, request *ListChangeRequestsRequest) (_result *ListChangeRequestsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListChangeRequestsResponse{}
	_body, _err := client.ListChangeRequestsWithOptions(appName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询检查运行列表
//
// @param request - ListCheckRunsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCheckRunsResponse
func (client *Client) ListCheckRunsWithOptions(request *ListCheckRunsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListCheckRunsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Ref)) {
		query["ref"] = request.Ref
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCheckRuns"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/check_runs/list_check_runs"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCheckRunsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询检查运行列表
//
// @param request - ListCheckRunsRequest
//
// @return ListCheckRunsResponse
func (client *Client) ListCheckRuns(request *ListCheckRunsRequest) (_result *ListCheckRunsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListCheckRunsResponse{}
	_body, _err := client.ListCheckRunsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询提交状态列表
//
// @param request - ListCommitStatusesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCommitStatusesResponse
func (client *Client) ListCommitStatusesWithOptions(request *ListCommitStatusesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListCommitStatusesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	if !tea.BoolValue(util.IsUnset(request.Sha)) {
		query["sha"] = request.Sha
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCommitStatuses"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/repository/commit_statuses/list_commit_statuses"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCommitStatusesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询提交状态列表
//
// @param request - ListCommitStatusesRequest
//
// @return ListCommitStatusesResponse
func (client *Client) ListCommitStatuses(request *ListCommitStatusesRequest) (_result *ListCommitStatusesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListCommitStatusesResponse{}
	_body, _err := client.ListCommitStatusesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取标签分类列表
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFlowTagGroupsResponse
func (client *Client) ListFlowTagGroupsWithOptions(organizationId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListFlowTagGroupsResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowTagGroups"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/flow/tagGroups"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowTagGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取标签分类列表
//
// @return ListFlowTagGroupsResponse
func (client *Client) ListFlowTagGroups(organizationId *string) (_result *ListFlowTagGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListFlowTagGroupsResponse{}
	_body, _err := client.ListFlowTagGroupsWithOptions(organizationId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询组成员列表
//
// @param request - ListGroupMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListGroupMemberResponse
func (client *Client) ListGroupMemberWithOptions(groupId *string, request *ListGroupMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListGroupMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListGroupMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/groups/" + tea.StringValue(openapiutil.GetEncodeParam(groupId)) + "/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListGroupMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询组成员列表
//
// @param request - ListGroupMemberRequest
//
// @return ListGroupMemberResponse
func (client *Client) ListGroupMember(groupId *string, request *ListGroupMemberRequest) (_result *ListGroupMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListGroupMemberResponse{}
	_body, _err := client.ListGroupMemberWithOptions(groupId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码组下的库列表
//
// @param request - ListGroupRepositoriesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListGroupRepositoriesResponse
func (client *Client) ListGroupRepositoriesWithOptions(groupId *string, request *ListGroupRepositoriesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListGroupRepositoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Search)) {
		query["search"] = request.Search
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListGroupRepositories"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/groups/" + tea.StringValue(openapiutil.GetEncodeParam(groupId)) + "/projects"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListGroupRepositoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码组下的库列表
//
// @param request - ListGroupRepositoriesRequest
//
// @return ListGroupRepositoriesResponse
func (client *Client) ListGroupRepositories(groupId *string, request *ListGroupRepositoriesRequest) (_result *ListGroupRepositoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListGroupRepositoriesResponse{}
	_body, _err := client.ListGroupRepositoriesWithOptions(groupId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取主机组列表
//
// @param request - ListHostGroupsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListHostGroupsResponse
func (client *Client) ListHostGroupsWithOptions(organizationId *string, request *ListHostGroupsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListHostGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateEndTime)) {
		query["createEndTime"] = request.CreateEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.CreateStartTime)) {
		query["createStartTime"] = request.CreateStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.CreatorAccountIds)) {
		query["creatorAccountIds"] = request.CreatorAccountIds
	}

	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PageOrder)) {
		query["pageOrder"] = request.PageOrder
	}

	if !tea.BoolValue(util.IsUnset(request.PageSort)) {
		query["pageSort"] = request.PageSort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListHostGroups"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/hostGroups"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListHostGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取主机组列表
//
// @param request - ListHostGroupsRequest
//
// @return ListHostGroupsResponse
func (client *Client) ListHostGroups(organizationId *string, request *ListHostGroupsRequest) (_result *ListHostGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListHostGroupsResponse{}
	_body, _err := client.ListHostGroupsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 当前用户加入的企业列表
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListJoinedOrganizationsResponse
func (client *Client) ListJoinedOrganizationsWithOptions(headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListJoinedOrganizationsResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListJoinedOrganizations"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/users/joinedOrgs"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListJoinedOrganizationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 当前用户加入的企业列表
//
// @return ListJoinedOrganizationsResponse
func (client *Client) ListJoinedOrganizations() (_result *ListJoinedOrganizationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListJoinedOrganizationsResponse{}
	_body, _err := client.ListJoinedOrganizationsWithOptions(headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询合并请求评论列表
//
// @param request - ListMergeRequestCommentsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMergeRequestCommentsResponse
func (client *Client) ListMergeRequestCommentsWithOptions(request *ListMergeRequestCommentsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMergeRequestCommentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.LocalId)) {
		query["localId"] = request.LocalId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommentType)) {
		body["commentType"] = request.CommentType
	}

	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		body["filePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.PatchSetBizIds)) {
		body["patchSetBizIds"] = request.PatchSetBizIds
	}

	if !tea.BoolValue(util.IsUnset(request.Resolved)) {
		body["resolved"] = request.Resolved
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		body["state"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMergeRequestComments"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/merge_requests/comments/list_comments"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMergeRequestCommentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询合并请求评论列表
//
// @param request - ListMergeRequestCommentsRequest
//
// @return ListMergeRequestCommentsResponse
func (client *Client) ListMergeRequestComments(request *ListMergeRequestCommentsRequest) (_result *ListMergeRequestCommentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMergeRequestCommentsResponse{}
	_body, _err := client.ListMergeRequestCommentsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询合并请求文件已读列表
//
// @param request - ListMergeRequestFilesReadsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMergeRequestFilesReadsResponse
func (client *Client) ListMergeRequestFilesReadsWithOptions(request *ListMergeRequestFilesReadsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMergeRequestFilesReadsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.FromPatchSetBizId)) {
		query["fromPatchSetBizId"] = request.FromPatchSetBizId
	}

	if !tea.BoolValue(util.IsUnset(request.LocalId)) {
		query["localId"] = request.LocalId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	if !tea.BoolValue(util.IsUnset(request.ToPatchSetBizId)) {
		query["toPatchSetBizId"] = request.ToPatchSetBizId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMergeRequestFilesReads"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/merge_requests/diffs/files_read_infos"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMergeRequestFilesReadsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询合并请求文件已读列表
//
// @param request - ListMergeRequestFilesReadsRequest
//
// @return ListMergeRequestFilesReadsResponse
func (client *Client) ListMergeRequestFilesReads(request *ListMergeRequestFilesReadsRequest) (_result *ListMergeRequestFilesReadsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMergeRequestFilesReadsResponse{}
	_body, _err := client.ListMergeRequestFilesReadsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询合并请求Label列表
//
// @param request - ListMergeRequestLabelsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMergeRequestLabelsResponse
func (client *Client) ListMergeRequestLabelsWithOptions(request *ListMergeRequestLabelsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMergeRequestLabelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.LocalId)) {
		query["localId"] = request.LocalId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMergeRequestLabels"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/merge_requests/labels"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMergeRequestLabelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询合并请求Label列表
//
// @param request - ListMergeRequestLabelsRequest
//
// @return ListMergeRequestLabelsResponse
func (client *Client) ListMergeRequestLabels(request *ListMergeRequestLabelsRequest) (_result *ListMergeRequestLabelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMergeRequestLabelsResponse{}
	_body, _err := client.ListMergeRequestLabelsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询合并请求的版本列表
//
// @param request - ListMergeRequestPatchSetsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMergeRequestPatchSetsResponse
func (client *Client) ListMergeRequestPatchSetsWithOptions(request *ListMergeRequestPatchSetsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMergeRequestPatchSetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.LocalId)) {
		query["localId"] = request.LocalId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMergeRequestPatchSets"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/merge_requests/diffs/list_patchsets"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMergeRequestPatchSetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询合并请求的版本列表
//
// @param request - ListMergeRequestPatchSetsRequest
//
// @return ListMergeRequestPatchSetsResponse
func (client *Client) ListMergeRequestPatchSets(request *ListMergeRequestPatchSetsRequest) (_result *ListMergeRequestPatchSetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMergeRequestPatchSetsResponse{}
	_body, _err := client.ListMergeRequestPatchSetsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码评审列表
//
// @param request - ListMergeRequestsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMergeRequestsResponse
func (client *Client) ListMergeRequestsWithOptions(request *ListMergeRequestsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListMergeRequestsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorIds)) {
		query["authorIds"] = request.AuthorIds
	}

	if !tea.BoolValue(util.IsUnset(request.CreatedAfter)) {
		query["createdAfter"] = request.CreatedAfter
	}

	if !tea.BoolValue(util.IsUnset(request.CreatedBefore)) {
		query["createdBefore"] = request.CreatedBefore
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.GroupIds)) {
		query["groupIds"] = request.GroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.LabelIds)) {
		query["labelIds"] = request.LabelIds
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["orderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectIds)) {
		query["projectIds"] = request.ProjectIds
	}

	if !tea.BoolValue(util.IsUnset(request.ReviewerIds)) {
		query["reviewerIds"] = request.ReviewerIds
	}

	if !tea.BoolValue(util.IsUnset(request.Search)) {
		query["search"] = request.Search
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["state"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMergeRequests"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/merge_requests/advanced_search"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMergeRequestsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码评审列表
//
// @param request - ListMergeRequestsRequest
//
// @return ListMergeRequestsResponse
func (client *Client) ListMergeRequests(request *ListMergeRequestsRequest) (_result *ListMergeRequestsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListMergeRequestsResponse{}
	_body, _err := client.ListMergeRequestsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取企业成员列表
//
// @param request - ListOrganizationMembersRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOrganizationMembersResponse
func (client *Client) ListOrganizationMembersWithOptions(organizationId *string, request *ListOrganizationMembersRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListOrganizationMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContainsExternInfo)) {
		query["containsExternInfo"] = request.ContainsExternInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ExternUid)) {
		query["externUid"] = request.ExternUid
	}

	if !tea.BoolValue(util.IsUnset(request.JoinTimeFrom)) {
		query["joinTimeFrom"] = request.JoinTimeFrom
	}

	if !tea.BoolValue(util.IsUnset(request.JoinTimeTo)) {
		query["joinTimeTo"] = request.JoinTimeTo
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationMemberName)) {
		query["organizationMemberName"] = request.OrganizationMemberName
	}

	if !tea.BoolValue(util.IsUnset(request.Provider)) {
		query["provider"] = request.Provider
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["state"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOrganizationMembers"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/members"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListOrganizationMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取企业成员列表
//
// @param request - ListOrganizationMembersRequest
//
// @return ListOrganizationMembersResponse
func (client *Client) ListOrganizationMembers(organizationId *string, request *ListOrganizationMembersRequest) (_result *ListOrganizationMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListOrganizationMembersResponse{}
	_body, _err := client.ListOrganizationMembersWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询用户企业列表
//
// @param request - ListOrganizationsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOrganizationsResponse
func (client *Client) ListOrganizationsWithOptions(request *ListOrganizationsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListOrganizationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessLevel)) {
		query["accessLevel"] = request.AccessLevel
	}

	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.MinAccessLevel)) {
		query["minAccessLevel"] = request.MinAccessLevel
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOrganizations"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organizations/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListOrganizationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询用户企业列表
//
// @param request - ListOrganizationsRequest
//
// @return ListOrganizationsResponse
func (client *Client) ListOrganizations(request *ListOrganizationsRequest) (_result *ListOrganizationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListOrganizationsResponse{}
	_body, _err := client.ListOrganizationsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线分组下流水线列表列表
//
// @param request - ListPipelineGroupPipelinesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelineGroupPipelinesResponse
func (client *Client) ListPipelineGroupPipelinesWithOptions(organizationId *string, groupId *string, request *ListPipelineGroupPipelinesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPipelineGroupPipelinesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateEndTime)) {
		query["createEndTime"] = request.CreateEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.CreateStartTime)) {
		query["createStartTime"] = request.CreateStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteEndTime)) {
		query["executeEndTime"] = request.ExecuteEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteStartTime)) {
		query["executeStartTime"] = request.ExecuteStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineName)) {
		query["pipelineName"] = request.PipelineName
	}

	if !tea.BoolValue(util.IsUnset(request.ResultStatusList)) {
		query["resultStatusList"] = request.ResultStatusList
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelineGroupPipelines"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelineGroups/" + tea.StringValue(openapiutil.GetEncodeParam(groupId)) + "/pipelines"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelineGroupPipelinesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线分组下流水线列表列表
//
// @param request - ListPipelineGroupPipelinesRequest
//
// @return ListPipelineGroupPipelinesResponse
func (client *Client) ListPipelineGroupPipelines(organizationId *string, groupId *string, request *ListPipelineGroupPipelinesRequest) (_result *ListPipelineGroupPipelinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPipelineGroupPipelinesResponse{}
	_body, _err := client.ListPipelineGroupPipelinesWithOptions(organizationId, groupId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线分组列表
//
// @param request - ListPipelineGroupsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelineGroupsResponse
func (client *Client) ListPipelineGroupsWithOptions(organizationId *string, request *ListPipelineGroupsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPipelineGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelineGroups"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelineGroups"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelineGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线分组列表
//
// @param request - ListPipelineGroupsRequest
//
// @return ListPipelineGroupsResponse
func (client *Client) ListPipelineGroups(organizationId *string, request *ListPipelineGroupsRequest) (_result *ListPipelineGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPipelineGroupsResponse{}
	_body, _err := client.ListPipelineGroupsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线运行过的任务历史
//
// @param request - ListPipelineJobHistorysRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelineJobHistorysResponse
func (client *Client) ListPipelineJobHistorysWithOptions(organizationId *string, pipelineId *string, request *ListPipelineJobHistorysRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPipelineJobHistorysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Identifier)) {
		query["identifier"] = request.Identifier
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelineJobHistorys"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipeline/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/job/historys"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelineJobHistorysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线运行过的任务历史
//
// @param request - ListPipelineJobHistorysRequest
//
// @return ListPipelineJobHistorysResponse
func (client *Client) ListPipelineJobHistorys(organizationId *string, pipelineId *string, request *ListPipelineJobHistorysRequest) (_result *ListPipelineJobHistorysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPipelineJobHistorysResponse{}
	_body, _err := client.ListPipelineJobHistorysWithOptions(organizationId, pipelineId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线运行过的任务
//
// @param request - ListPipelineJobsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelineJobsResponse
func (client *Client) ListPipelineJobsWithOptions(organizationId *string, pipelineId *string, request *ListPipelineJobsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPipelineJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["category"] = request.Category
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelineJobs"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipeline/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/jobs"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelineJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线运行过的任务
//
// @param request - ListPipelineJobsRequest
//
// @return ListPipelineJobsResponse
func (client *Client) ListPipelineJobs(organizationId *string, pipelineId *string, request *ListPipelineJobsRequest) (_result *ListPipelineJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPipelineJobsResponse{}
	_body, _err := client.ListPipelineJobsWithOptions(organizationId, pipelineId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线关联列表
//
// @param request - ListPipelineRelationsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelineRelationsResponse
func (client *Client) ListPipelineRelationsWithOptions(organizationId *string, pipelineId *string, request *ListPipelineRelationsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPipelineRelationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RelObjectType)) {
		query["relObjectType"] = request.RelObjectType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelineRelations"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRelations"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelineRelationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线关联列表
//
// @param request - ListPipelineRelationsRequest
//
// @return ListPipelineRelationsResponse
func (client *Client) ListPipelineRelations(organizationId *string, pipelineId *string, request *ListPipelineRelationsRequest) (_result *ListPipelineRelationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPipelineRelationsResponse{}
	_body, _err := client.ListPipelineRelationsWithOptions(organizationId, pipelineId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线运行历史
//
// @param request - ListPipelineRunsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelineRunsResponse
func (client *Client) ListPipelineRunsWithOptions(organizationId *string, pipelineId *string, request *ListPipelineRunsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPipelineRunsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["endTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["startTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerMode)) {
		query["triggerMode"] = request.TriggerMode
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelineRuns"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRuns"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelineRunsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线运行历史
//
// @param request - ListPipelineRunsRequest
//
// @return ListPipelineRunsResponse
func (client *Client) ListPipelineRuns(organizationId *string, pipelineId *string, request *ListPipelineRunsRequest) (_result *ListPipelineRunsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPipelineRunsResponse{}
	_body, _err := client.ListPipelineRunsWithOptions(organizationId, pipelineId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线列表
//
// @param request - ListPipelinesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelinesResponse
func (client *Client) ListPipelinesWithOptions(organizationId *string, request *ListPipelinesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPipelinesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateEndTime)) {
		query["createEndTime"] = request.CreateEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.CreateStartTime)) {
		query["createStartTime"] = request.CreateStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.CreatorAccountIds)) {
		query["creatorAccountIds"] = request.CreatorAccountIds
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteAccountIds)) {
		query["executeAccountIds"] = request.ExecuteAccountIds
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteEndTime)) {
		query["executeEndTime"] = request.ExecuteEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteStartTime)) {
		query["executeStartTime"] = request.ExecuteStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineName)) {
		query["pipelineName"] = request.PipelineName
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["statusList"] = request.StatusList
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelines"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelinesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线列表
//
// @param request - ListPipelinesRequest
//
// @return ListPipelinesResponse
func (client *Client) ListPipelines(organizationId *string, request *ListPipelinesRequest) (_result *ListPipelinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPipelinesResponse{}
	_body, _err := client.ListPipelinesWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码库Label列表
//
// @param request - ListProjectLabelsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProjectLabelsResponse
func (client *Client) ListProjectLabelsWithOptions(request *ListProjectLabelsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListProjectLabelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["orderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	if !tea.BoolValue(util.IsUnset(request.Search)) {
		query["search"] = request.Search
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	if !tea.BoolValue(util.IsUnset(request.WithCounts)) {
		query["withCounts"] = request.WithCounts
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectLabels"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/labels"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectLabelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码库Label列表
//
// @param request - ListProjectLabelsRequest
//
// @return ListProjectLabelsResponse
func (client *Client) ListProjectLabels(request *ListProjectLabelsRequest) (_result *ListProjectLabelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListProjectLabelsResponse{}
	_body, _err := client.ListProjectLabelsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据项目id获取项目所以成员
//
// @param request - ListProjectMembersRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProjectMembersResponse
func (client *Client) ListProjectMembersWithOptions(organizationId *string, projectId *string, request *ListProjectMembersRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListProjectMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		query["targetType"] = request.TargetType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectMembers"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/projects/" + tea.StringValue(openapiutil.GetEncodeParam(projectId)) + "/listMembers"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据项目id获取项目所以成员
//
// @param request - ListProjectMembersRequest
//
// @return ListProjectMembersResponse
func (client *Client) ListProjectMembers(organizationId *string, projectId *string, request *ListProjectMembersRequest) (_result *ListProjectMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListProjectMembersResponse{}
	_body, _err := client.ListProjectMembersWithOptions(organizationId, projectId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取项目模板列表
//
// @param request - ListProjectTemplatesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProjectTemplatesResponse
func (client *Client) ListProjectTemplatesWithOptions(organizationId *string, request *ListProjectTemplatesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListProjectTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["category"] = request.Category
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectTemplates"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/projects/listTemplates"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取项目模板列表
//
// @param request - ListProjectTemplatesRequest
//
// @return ListProjectTemplatesResponse
func (client *Client) ListProjectTemplates(organizationId *string, request *ListProjectTemplatesRequest) (_result *ListProjectTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListProjectTemplatesResponse{}
	_body, _err := client.ListProjectTemplatesWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取项目下开启的工作项类型
//
// @param request - ListProjectWorkitemTypesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProjectWorkitemTypesResponse
func (client *Client) ListProjectWorkitemTypesWithOptions(organizationId *string, projectId *string, request *ListProjectWorkitemTypesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListProjectWorkitemTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceType)) {
		query["spaceType"] = request.SpaceType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjectWorkitemTypes"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/projects/" + tea.StringValue(openapiutil.GetEncodeParam(projectId)) + "/getWorkitemType"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectWorkitemTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取项目下开启的工作项类型
//
// @param request - ListProjectWorkitemTypesRequest
//
// @return ListProjectWorkitemTypesResponse
func (client *Client) ListProjectWorkitemTypes(organizationId *string, projectId *string, request *ListProjectWorkitemTypesRequest) (_result *ListProjectWorkitemTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListProjectWorkitemTypesResponse{}
	_body, _err := client.ListProjectWorkitemTypesWithOptions(organizationId, projectId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取项目列表
//
// @param request - ListProjectsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProjectsResponse
func (client *Client) ListProjectsWithOptions(organizationId *string, request *ListProjectsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListProjectsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Conditions)) {
		query["conditions"] = request.Conditions
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraConditions)) {
		query["extraConditions"] = request.ExtraConditions
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["scope"] = request.Scope
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProjects"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/listProjects"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProjectsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取项目列表
//
// @param request - ListProjectsRequest
//
// @return ListProjectsResponse
func (client *Client) ListProjects(organizationId *string, request *ListProjectsRequest) (_result *ListProjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListProjectsResponse{}
	_body, _err := client.ListProjectsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询保护分支列表
//
// @param request - ListProtectedBranchesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProtectedBranchesResponse
func (client *Client) ListProtectedBranchesWithOptions(repositoryId *string, request *ListProtectedBranchesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListProtectedBranchesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListProtectedBranches"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/protect_branches"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListProtectedBranchesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询保护分支列表
//
// @param request - ListProtectedBranchesRequest
//
// @return ListProtectedBranchesResponse
func (client *Client) ListProtectedBranches(repositoryId *string, request *ListProtectedBranchesRequest) (_result *ListProtectedBranchesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListProtectedBranchesResponse{}
	_body, _err := client.ListProtectedBranchesWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询推送规则列表
//
// @param request - ListPushRulesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPushRulesResponse
func (client *Client) ListPushRulesWithOptions(repositoryId *string, request *ListPushRulesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListPushRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPushRules"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/push_rule/push_rules/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPushRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询推送规则列表
//
// @param request - ListPushRulesRequest
//
// @return ListPushRulesResponse
func (client *Client) ListPushRules(repositoryId *string, request *ListPushRulesRequest) (_result *ListPushRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListPushRulesResponse{}
	_body, _err := client.ListPushRulesWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码库列表
//
// @param request - ListRepositoriesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRepositoriesResponse
func (client *Client) ListRepositoriesWithOptions(request *ListRepositoriesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRepositoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.Archived)) {
		query["archived"] = request.Archived
	}

	if !tea.BoolValue(util.IsUnset(request.MinAccessLevel)) {
		query["minAccessLevel"] = request.MinAccessLevel
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["orderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PerPage)) {
		query["perPage"] = request.PerPage
	}

	if !tea.BoolValue(util.IsUnset(request.Search)) {
		query["search"] = request.Search
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRepositories"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRepositoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码库列表
//
// @param request - ListRepositoriesRequest
//
// @return ListRepositoriesResponse
func (client *Client) ListRepositories(request *ListRepositoriesRequest) (_result *ListRepositoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRepositoriesResponse{}
	_body, _err := client.ListRepositoriesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询分支列表
//
// @param request - ListRepositoryBranchesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRepositoryBranchesResponse
func (client *Client) ListRepositoryBranchesWithOptions(repositoryId *string, request *ListRepositoryBranchesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRepositoryBranchesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Search)) {
		query["search"] = request.Search
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRepositoryBranches"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/branches"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRepositoryBranchesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询分支列表
//
// @param request - ListRepositoryBranchesRequest
//
// @return ListRepositoryBranchesResponse
func (client *Client) ListRepositoryBranches(repositoryId *string, request *ListRepositoryBranchesRequest) (_result *ListRepositoryBranchesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRepositoryBranchesResponse{}
	_body, _err := client.ListRepositoryBranchesWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码库单个提交（Commit）的提交内容
//
// @param request - ListRepositoryCommitDiffRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRepositoryCommitDiffResponse
func (client *Client) ListRepositoryCommitDiffWithOptions(repositoryId *string, sha *string, request *ListRepositoryCommitDiffRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRepositoryCommitDiffResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.ContextLine)) {
		query["contextLine"] = request.ContextLine
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRepositoryCommitDiff"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/commits/" + tea.StringValue(openapiutil.GetEncodeParam(sha)) + "/diff"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRepositoryCommitDiffResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码库单个提交（Commit）的提交内容
//
// @param request - ListRepositoryCommitDiffRequest
//
// @return ListRepositoryCommitDiffResponse
func (client *Client) ListRepositoryCommitDiff(repositoryId *string, sha *string, request *ListRepositoryCommitDiffRequest) (_result *ListRepositoryCommitDiffResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRepositoryCommitDiffResponse{}
	_body, _err := client.ListRepositoryCommitDiffWithOptions(repositoryId, sha, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码库提交历史
//
// @param request - ListRepositoryCommitsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRepositoryCommitsResponse
func (client *Client) ListRepositoryCommitsWithOptions(repositoryId *string, request *ListRepositoryCommitsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRepositoryCommitsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["end"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.RefName)) {
		query["refName"] = request.RefName
	}

	if !tea.BoolValue(util.IsUnset(request.Search)) {
		query["search"] = request.Search
	}

	if !tea.BoolValue(util.IsUnset(request.ShowCommentsCount)) {
		query["showCommentsCount"] = request.ShowCommentsCount
	}

	if !tea.BoolValue(util.IsUnset(request.ShowSignature)) {
		query["showSignature"] = request.ShowSignature
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRepositoryCommits"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/commits"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRepositoryCommitsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码库提交历史
//
// @param request - ListRepositoryCommitsRequest
//
// @return ListRepositoryCommitsResponse
func (client *Client) ListRepositoryCommits(repositoryId *string, request *ListRepositoryCommitsRequest) (_result *ListRepositoryCommitsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRepositoryCommitsResponse{}
	_body, _err := client.ListRepositoryCommitsWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码组列表
//
// @param request - ListRepositoryGroupsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRepositoryGroupsResponse
func (client *Client) ListRepositoryGroupsWithOptions(request *ListRepositoryGroupsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRepositoryGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.IncludePersonal)) {
		query["includePersonal"] = request.IncludePersonal
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["orderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["parentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.Search)) {
		query["search"] = request.Search
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRepositoryGroups"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/groups/get/all"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRepositoryGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码组列表
//
// @param request - ListRepositoryGroupsRequest
//
// @return ListRepositoryGroupsResponse
func (client *Client) ListRepositoryGroups(request *ListRepositoryGroupsRequest) (_result *ListRepositoryGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRepositoryGroupsResponse{}
	_body, _err := client.ListRepositoryGroupsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码库成员列表
//
// @param request - ListRepositoryMemberWithInheritedRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRepositoryMemberWithInheritedResponse
func (client *Client) ListRepositoryMemberWithInheritedWithOptions(repositoryId *string, request *ListRepositoryMemberWithInheritedRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRepositoryMemberWithInheritedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRepositoryMemberWithInherited"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/members/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRepositoryMemberWithInheritedResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码库成员列表
//
// @param request - ListRepositoryMemberWithInheritedRequest
//
// @return ListRepositoryMemberWithInheritedResponse
func (client *Client) ListRepositoryMemberWithInherited(repositoryId *string, request *ListRepositoryMemberWithInheritedRequest) (_result *ListRepositoryMemberWithInheritedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRepositoryMemberWithInheritedResponse{}
	_body, _err := client.ListRepositoryMemberWithInheritedWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询标签列表
//
// @param request - ListRepositoryTagsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRepositoryTagsResponse
func (client *Client) ListRepositoryTagsWithOptions(repositoryId *string, request *ListRepositoryTagsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRepositoryTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Search)) {
		query["search"] = request.Search
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRepositoryTags"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/tag/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRepositoryTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询标签列表
//
// @param request - ListRepositoryTagsRequest
//
// @return ListRepositoryTagsResponse
func (client *Client) ListRepositoryTags(repositoryId *string, request *ListRepositoryTagsRequest) (_result *ListRepositoryTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRepositoryTagsResponse{}
	_body, _err := client.ListRepositoryTagsWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码库文件树
//
// @param request - ListRepositoryTreeRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRepositoryTreeResponse
func (client *Client) ListRepositoryTreeWithOptions(repositoryId *string, request *ListRepositoryTreeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRepositoryTreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.RefName)) {
		query["refName"] = request.RefName
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRepositoryTree"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/files/tree"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRepositoryTreeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码库文件树
//
// @param request - ListRepositoryTreeRequest
//
// @return ListRepositoryTreeResponse
func (client *Client) ListRepositoryTree(repositoryId *string, request *ListRepositoryTreeRequest) (_result *ListRepositoryTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRepositoryTreeResponse{}
	_body, _err := client.ListRepositoryTreeWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询代码库Webhook列表
//
// @param request - ListRepositoryWebhookRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListRepositoryWebhookResponse
func (client *Client) ListRepositoryWebhookWithOptions(repositoryId *string, request *ListRepositoryWebhookRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListRepositoryWebhookResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRepositoryWebhook"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/webhooks/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRepositoryWebhookResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询代码库Webhook列表
//
// @param request - ListRepositoryWebhookRequest
//
// @return ListRepositoryWebhookResponse
func (client *Client) ListRepositoryWebhook(repositoryId *string, request *ListRepositoryWebhookRequest) (_result *ListRepositoryWebhookResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListRepositoryWebhookResponse{}
	_body, _err := client.ListRepositoryWebhookWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取资源成员列表
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListResourceMembersResponse
func (client *Client) ListResourceMembersWithOptions(organizationId *string, resourceType *string, resourceId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListResourceMembersResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListResourceMembers"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(resourceType)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(resourceId)) + "/members"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListResourceMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取资源成员列表
//
// @return ListResourceMembersResponse
func (client *Client) ListResourceMembers(organizationId *string, resourceType *string, resourceId *string) (_result *ListResourceMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListResourceMembersResponse{}
	_body, _err := client.ListResourceMembersWithOptions(organizationId, resourceType, resourceId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 搜索代码提交数据
//
// @param request - ListSearchCommitRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSearchCommitResponse
func (client *Client) ListSearchCommitWithOptions(request *ListSearchCommitRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSearchCommitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		body["order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		body["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RepoPath)) {
		body["repoPath"] = request.RepoPath
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		body["scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		body["sort"] = request.Sort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSearchCommit"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/search/commit"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSearchCommitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 搜索代码提交数据
//
// @param request - ListSearchCommitRequest
//
// @return ListSearchCommitResponse
func (client *Client) ListSearchCommit(request *ListSearchCommitRequest) (_result *ListSearchCommitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSearchCommitResponse{}
	_body, _err := client.ListSearchCommitWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 搜索代码仓库数据
//
// @param request - ListSearchRepositoryRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSearchRepositoryResponse
func (client *Client) ListSearchRepositoryWithOptions(request *ListSearchRepositoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSearchRepositoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunPk)) {
		body["aliyunPk"] = request.AliyunPk
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		body["order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		body["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RepoPath)) {
		body["repoPath"] = request.RepoPath
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		body["scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		body["sort"] = request.Sort
	}

	if !tea.BoolValue(util.IsUnset(request.VisibilityLevel)) {
		body["visibilityLevel"] = request.VisibilityLevel
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSearchRepository"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/search/repo"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSearchRepositoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 搜索代码仓库数据
//
// @param request - ListSearchRepositoryRequest
//
// @return ListSearchRepositoryResponse
func (client *Client) ListSearchRepository(request *ListSearchRepositoryRequest) (_result *ListSearchRepositoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSearchRepositoryResponse{}
	_body, _err := client.ListSearchRepositoryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 搜索代码片段
//
// @param request - ListSearchSourceCodeRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSearchSourceCodeResponse
func (client *Client) ListSearchSourceCodeWithOptions(request *ListSearchSourceCodeRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSearchSourceCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilePath)) {
		body["filePath"] = request.FilePath
	}

	if !tea.BoolValue(util.IsUnset(request.IsCodeBlock)) {
		body["isCodeBlock"] = request.IsCodeBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		body["order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		body["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RepoPath)) {
		body["repoPath"] = request.RepoPath
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		body["scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		body["sort"] = request.Sort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSearchSourceCode"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/search/code"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSearchSourceCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 搜索代码片段
//
// @param request - ListSearchSourceCodeRequest
//
// @return ListSearchSourceCodeResponse
func (client *Client) ListSearchSourceCode(request *ListSearchSourceCodeRequest) (_result *ListSearchSourceCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSearchSourceCodeResponse{}
	_body, _err := client.ListSearchSourceCodeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取服务授权列表
//
// @param request - ListServiceAuthsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListServiceAuthsResponse
func (client *Client) ListServiceAuthsWithOptions(organizationId *string, request *ListServiceAuthsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListServiceAuthsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ServiceAuthType)) {
		query["serviceAuthType"] = request.ServiceAuthType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListServiceAuths"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/serviceAuths"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListServiceAuthsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取服务授权列表
//
// @param request - ListServiceAuthsRequest
//
// @return ListServiceAuthsResponse
func (client *Client) ListServiceAuths(organizationId *string, request *ListServiceAuthsRequest) (_result *ListServiceAuthsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListServiceAuthsResponse{}
	_body, _err := client.ListServiceAuthsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取服务连接列表
//
// @param request - ListServiceConnectionsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListServiceConnectionsResponse
func (client *Client) ListServiceConnectionsWithOptions(organizationId *string, request *ListServiceConnectionsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListServiceConnectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SericeConnectionType)) {
		query["sericeConnectionType"] = request.SericeConnectionType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListServiceConnections"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/serviceConnections"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListServiceConnectionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取服务连接列表
//
// @param request - ListServiceConnectionsRequest
//
// @return ListServiceConnectionsResponse
func (client *Client) ListServiceConnections(organizationId *string, request *ListServiceConnectionsRequest) (_result *ListServiceConnectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListServiceConnectionsResponse{}
	_body, _err := client.ListServiceConnectionsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取服务证书列表
//
// @param request - ListServiceCredentialsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListServiceCredentialsResponse
func (client *Client) ListServiceCredentialsWithOptions(organizationId *string, request *ListServiceCredentialsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListServiceCredentialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ServiceCredentialType)) {
		query["serviceCredentialType"] = request.ServiceCredentialType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListServiceCredentials"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/serviceCredentials"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListServiceCredentialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取服务证书列表
//
// @param request - ListServiceCredentialsRequest
//
// @return ListServiceCredentialsResponse
func (client *Client) ListServiceCredentials(organizationId *string, request *ListServiceCredentialsRequest) (_result *ListServiceCredentialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListServiceCredentialsResponse{}
	_body, _err := client.ListServiceCredentialsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取迭代列表
//
// @param request - ListSprintsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSprintsResponse
func (client *Client) ListSprintsWithOptions(organizationId *string, request *ListSprintsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListSprintsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		query["spaceIdentifier"] = request.SpaceIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceType)) {
		query["spaceType"] = request.SpaceType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSprints"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/sprints/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSprintsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取迭代列表
//
// @param request - ListSprintsRequest
//
// @return ListSprintsResponse
func (client *Client) ListSprints(organizationId *string, request *ListSprintsRequest) (_result *ListSprintsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListSprintsResponse{}
	_body, _err := client.ListSprintsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取测试用例全部字段
//
// @param request - ListTestCaseFieldsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTestCaseFieldsResponse
func (client *Client) ListTestCaseFieldsWithOptions(organizationId *string, request *ListTestCaseFieldsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListTestCaseFieldsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		query["spaceIdentifier"] = request.SpaceIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTestCaseFields"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/testhub/testcase/fields"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTestCaseFieldsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取测试用例全部字段
//
// @param request - ListTestCaseFieldsRequest
//
// @return ListTestCaseFieldsResponse
func (client *Client) ListTestCaseFields(organizationId *string, request *ListTestCaseFieldsRequest) (_result *ListTestCaseFieldsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListTestCaseFieldsResponse{}
	_body, _err := client.ListTestCaseFieldsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 测试DrawService
//
// @param request - ListUserDrawRecordByPkRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUserDrawRecordByPkResponse
func (client *Client) ListUserDrawRecordByPkWithOptions(request *ListUserDrawRecordByPkRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListUserDrawRecordByPkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunPk)) {
		query["aliyunPk"] = request.AliyunPk
	}

	if !tea.BoolValue(util.IsUnset(request.DrawGroup)) {
		query["drawGroup"] = request.DrawGroup
	}

	if !tea.BoolValue(util.IsUnset(request.DrawPoolName)) {
		query["drawPoolName"] = request.DrawPoolName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUserDrawRecordByPk"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/listUserDrawRecords"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUserDrawRecordByPkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 测试DrawService
//
// @param request - ListUserDrawRecordByPkRequest
//
// @return ListUserDrawRecordByPkResponse
func (client *Client) ListUserDrawRecordByPk(request *ListUserDrawRecordByPkRequest) (_result *ListUserDrawRecordByPkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListUserDrawRecordByPkResponse{}
	_body, _err := client.ListUserDrawRecordByPkWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询当前用户的SSH Key列表
//
// @param request - ListUserKeysRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUserKeysResponse
func (client *Client) ListUserKeysWithOptions(request *ListUserKeysRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListUserKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["orderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Sort)) {
		query["sort"] = request.Sort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUserKeys"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v3/user/keys"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUserKeysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询当前用户的SSH Key列表
//
// @param request - ListUserKeysRequest
//
// @return ListUserKeysResponse
func (client *Client) ListUserKeys(request *ListUserKeysRequest) (_result *ListUserKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListUserKeysResponse{}
	_body, _err := client.ListUserKeysWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询用户有权限的资源（代码库、组）
//
// @param request - ListUserResourcesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUserResourcesResponse
func (client *Client) ListUserResourcesWithOptions(request *ListUserResourcesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListUserResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["pageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		query["userIds"] = request.UserIds
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUserResources"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/user/vision/user_resources"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUserResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询用户有权限的资源（代码库、组）
//
// @param request - ListUserResourcesRequest
//
// @return ListUserResourcesResponse
func (client *Client) ListUserResources(request *ListUserResourcesRequest) (_result *ListUserResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListUserResourcesResponse{}
	_body, _err := client.ListUserResourcesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取变量组列表
//
// @param request - ListVariableGroupsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListVariableGroupsResponse
func (client *Client) ListVariableGroupsWithOptions(organizationId *string, request *ListVariableGroupsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListVariableGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PageOrder)) {
		query["pageOrder"] = request.PageOrder
	}

	if !tea.BoolValue(util.IsUnset(request.PageSort)) {
		query["pageSort"] = request.PageSort
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListVariableGroups"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/variableGroups"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListVariableGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取变量组列表
//
// @param request - ListVariableGroupsRequest
//
// @return ListVariableGroupsResponse
func (client *Client) ListVariableGroups(organizationId *string, request *ListVariableGroupsRequest) (_result *ListVariableGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListVariableGroupsResponse{}
	_body, _err := client.ListVariableGroupsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取项目下工作项的所有字段
//
// @param request - ListWorkItemAllFieldsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkItemAllFieldsResponse
func (client *Client) ListWorkItemAllFieldsWithOptions(organizationId *string, request *ListWorkItemAllFieldsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWorkItemAllFieldsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		query["spaceIdentifier"] = request.SpaceIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceType)) {
		query["spaceType"] = request.SpaceType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemTypeIdentifier)) {
		query["workitemTypeIdentifier"] = request.WorkitemTypeIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkItemAllFields"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/fields/listAll"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkItemAllFieldsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取项目下工作项的所有字段
//
// @param request - ListWorkItemAllFieldsRequest
//
// @return ListWorkItemAllFieldsResponse
func (client *Client) ListWorkItemAllFields(organizationId *string, request *ListWorkItemAllFieldsRequest) (_result *ListWorkItemAllFieldsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWorkItemAllFieldsResponse{}
	_body, _err := client.ListWorkItemAllFieldsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询工作项工作流的所有状态
//
// @param request - ListWorkItemWorkFlowStatusRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkItemWorkFlowStatusResponse
func (client *Client) ListWorkItemWorkFlowStatusWithOptions(organizationId *string, request *ListWorkItemWorkFlowStatusRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWorkItemWorkFlowStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		query["spaceIdentifier"] = request.SpaceIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceType)) {
		query["spaceType"] = request.SpaceType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemCategoryIdentifier)) {
		query["workitemCategoryIdentifier"] = request.WorkitemCategoryIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemTypeIdentifier)) {
		query["workitemTypeIdentifier"] = request.WorkitemTypeIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkItemWorkFlowStatus"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/workflow/listWorkflowStatus"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkItemWorkFlowStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询工作项工作流的所有状态
//
// @param request - ListWorkItemWorkFlowStatusRequest
//
// @return ListWorkItemWorkFlowStatusResponse
func (client *Client) ListWorkItemWorkFlowStatus(organizationId *string, request *ListWorkItemWorkFlowStatusRequest) (_result *ListWorkItemWorkFlowStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWorkItemWorkFlowStatusResponse{}
	_body, _err := client.ListWorkItemWorkFlowStatusWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取工作项的附件列表
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkitemAttachmentsResponse
func (client *Client) ListWorkitemAttachmentsWithOptions(organizationId *string, workitemIdentifier *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWorkitemAttachmentsResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkitemAttachments"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitem/" + tea.StringValue(openapiutil.GetEncodeParam(workitemIdentifier)) + "/attachments"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkitemAttachmentsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取工作项的附件列表
//
// @return ListWorkitemAttachmentsResponse
func (client *Client) ListWorkitemAttachments(organizationId *string, workitemIdentifier *string) (_result *ListWorkitemAttachmentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWorkitemAttachmentsResponse{}
	_body, _err := client.ListWorkitemAttachmentsWithOptions(organizationId, workitemIdentifier, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取工作项预计工时明细列表
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkitemEstimateResponse
func (client *Client) ListWorkitemEstimateWithOptions(organizationId *string, workitemId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWorkitemEstimateResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkitemEstimate"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/" + tea.StringValue(openapiutil.GetEncodeParam(workitemId)) + "/estimate/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkitemEstimateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取工作项预计工时明细列表
//
// @return ListWorkitemEstimateResponse
func (client *Client) ListWorkitemEstimate(organizationId *string, workitemId *string) (_result *ListWorkitemEstimateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWorkitemEstimateResponse{}
	_body, _err := client.ListWorkitemEstimateWithOptions(organizationId, workitemId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取工作项工时明细列表
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkitemTimeResponse
func (client *Client) ListWorkitemTimeWithOptions(organizationId *string, workitemId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWorkitemTimeResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkitemTime"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/" + tea.StringValue(openapiutil.GetEncodeParam(workitemId)) + "/time/list"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkitemTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取工作项工时明细列表
//
// @return ListWorkitemTimeResponse
func (client *Client) ListWorkitemTime(organizationId *string, workitemId *string) (_result *ListWorkitemTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWorkitemTimeResponse{}
	_body, _err := client.ListWorkitemTimeWithOptions(organizationId, workitemId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取工作项列表
//
// @param request - ListWorkitemsRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkitemsResponse
func (client *Client) ListWorkitemsWithOptions(organizationId *string, request *ListWorkitemsRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWorkitemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Conditions)) {
		query["conditions"] = request.Conditions
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraConditions)) {
		query["extraConditions"] = request.ExtraConditions
	}

	if !tea.BoolValue(util.IsUnset(request.GroupCondition)) {
		query["groupCondition"] = request.GroupCondition
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["orderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.SearchType)) {
		query["searchType"] = request.SearchType
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceIdentifier)) {
		query["spaceIdentifier"] = request.SpaceIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceType)) {
		query["spaceType"] = request.SpaceType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkitems"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/listWorkitems"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkitemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取工作项列表
//
// @param request - ListWorkitemsRequest
//
// @return ListWorkitemsResponse
func (client *Client) ListWorkitems(organizationId *string, request *ListWorkitemsRequest) (_result *ListWorkitemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWorkitemsResponse{}
	_body, _err := client.ListWorkitemsWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询工作空间列表
//
// @param tmpReq - ListWorkspacesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkspacesResponse
func (client *Client) ListWorkspacesWithOptions(tmpReq *ListWorkspacesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ListWorkspacesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListWorkspacesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.StatusList)) {
		request.StatusListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StatusList, tea.String("statusList"), tea.String("simple"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.WorkspaceTemplateList)) {
		request.WorkspaceTemplateListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.WorkspaceTemplateList, tea.String("workspaceTemplateList"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StatusListShrink)) {
		query["statusList"] = request.StatusListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceTemplateListShrink)) {
		query["workspaceTemplateList"] = request.WorkspaceTemplateListShrink
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkspaces"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/workspaces"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkspacesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询工作空间列表
//
// @param request - ListWorkspacesRequest
//
// @return ListWorkspacesResponse
func (client *Client) ListWorkspaces(request *ListWorkspacesRequest) (_result *ListWorkspacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ListWorkspacesResponse{}
	_body, _err := client.ListWorkspacesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流水线运行任务日志
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LogPipelineJobRunResponse
func (client *Client) LogPipelineJobRunWithOptions(organizationId *string, pipelineId *string, jobId *string, pipelineRunId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *LogPipelineJobRunResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("LogPipelineJobRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipeline/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRun/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineRunId)) + "/job/" + tea.StringValue(openapiutil.GetEncodeParam(jobId)) + "/logs"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &LogPipelineJobRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流水线运行任务日志
//
// @return LogPipelineJobRunResponse
func (client *Client) LogPipelineJobRun(organizationId *string, pipelineId *string, jobId *string, pipelineRunId *string) (_result *LogPipelineJobRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &LogPipelineJobRunResponse{}
	_body, _err := client.LogPipelineJobRunWithOptions(organizationId, pipelineId, jobId, pipelineRunId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取机器部署日志
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LogVMDeployMachineResponse
func (client *Client) LogVMDeployMachineWithOptions(organizationId *string, pipelineId *string, deployOrderId *string, machineSn *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *LogVMDeployMachineResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("LogVMDeployMachine"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/deploy/" + tea.StringValue(openapiutil.GetEncodeParam(deployOrderId)) + "/machine/" + tea.StringValue(openapiutil.GetEncodeParam(machineSn)) + "/log"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &LogVMDeployMachineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取机器部署日志
//
// @return LogVMDeployMachineResponse
func (client *Client) LogVMDeployMachine(organizationId *string, pipelineId *string, deployOrderId *string, machineSn *string) (_result *LogVMDeployMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &LogVMDeployMachineResponse{}
	_body, _err := client.LogVMDeployMachineWithOptions(organizationId, pipelineId, deployOrderId, machineSn, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 合并代码评审
//
// @param request - MergeMergeRequestRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MergeMergeRequestResponse
func (client *Client) MergeMergeRequestWithOptions(repositoryId *string, localId *string, request *MergeMergeRequestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *MergeMergeRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MergeMessage)) {
		body["mergeMessage"] = request.MergeMessage
	}

	if !tea.BoolValue(util.IsUnset(request.MergeType)) {
		body["mergeType"] = request.MergeType
	}

	if !tea.BoolValue(util.IsUnset(request.RemoveSourceBranch)) {
		body["removeSourceBranch"] = request.RemoveSourceBranch
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("MergeMergeRequest"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/merge_requests/" + tea.StringValue(openapiutil.GetEncodeParam(localId)) + "/merge"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &MergeMergeRequestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 合并代码评审
//
// @param request - MergeMergeRequestRequest
//
// @return MergeMergeRequestResponse
func (client *Client) MergeMergeRequest(repositoryId *string, localId *string, request *MergeMergeRequestRequest) (_result *MergeMergeRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &MergeMergeRequestResponse{}
	_body, _err := client.MergeMergeRequestWithOptions(repositoryId, localId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 通过人工卡点
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PassPipelineValidateResponse
func (client *Client) PassPipelineValidateWithOptions(organizationId *string, pipelineId *string, pipelineRunId *string, jobId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PassPipelineValidateResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("PassPipelineValidate"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRuns/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineRunId)) + "/jobs/" + tea.StringValue(openapiutil.GetEncodeParam(jobId)) + "/pass"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &PassPipelineValidateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 通过人工卡点
//
// @return PassPipelineValidateResponse
func (client *Client) PassPipelineValidate(organizationId *string, pipelineId *string, pipelineRunId *string, jobId *string) (_result *PassPipelineValidateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PassPipelineValidateResponse{}
	_body, _err := client.PassPipelineValidateWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 通过人工卡点
//
// @param request - PassReleaseStagePipelineValidateRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PassReleaseStagePipelineValidateResponse
func (client *Client) PassReleaseStagePipelineValidateWithOptions(appName *string, releaseWorkflowSn *string, releaseStageSn *string, executionNumber *string, request *PassReleaseStagePipelineValidateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *PassReleaseStagePipelineValidateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["jobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PassReleaseStagePipelineValidate"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/releaseWorkflows/" + tea.StringValue(openapiutil.GetEncodeParam(releaseWorkflowSn)) + "/releaseStages/" + tea.StringValue(openapiutil.GetEncodeParam(releaseStageSn)) + "/executions/" + tea.StringValue(openapiutil.GetEncodeParam(executionNumber)) + "%3ApassPipelineValidate"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &PassReleaseStagePipelineValidateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 通过人工卡点
//
// @param request - PassReleaseStagePipelineValidateRequest
//
// @return PassReleaseStagePipelineValidateResponse
func (client *Client) PassReleaseStagePipelineValidate(appName *string, releaseWorkflowSn *string, releaseStageSn *string, executionNumber *string, request *PassReleaseStagePipelineValidateRequest) (_result *PassReleaseStagePipelineValidateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &PassReleaseStagePipelineValidateResponse{}
	_body, _err := client.PassReleaseStagePipelineValidateWithOptions(appName, releaseWorkflowSn, releaseStageSn, executionNumber, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 拒绝人工卡点
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RefusePipelineValidateResponse
func (client *Client) RefusePipelineValidateWithOptions(organizationId *string, pipelineId *string, pipelineRunId *string, jobId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RefusePipelineValidateResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("RefusePipelineValidate"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRuns/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineRunId)) + "/jobs/" + tea.StringValue(openapiutil.GetEncodeParam(jobId)) + "/refuse"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RefusePipelineValidateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 拒绝人工卡点
//
// @return RefusePipelineValidateResponse
func (client *Client) RefusePipelineValidate(organizationId *string, pipelineId *string, pipelineRunId *string, jobId *string) (_result *RefusePipelineValidateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RefusePipelineValidateResponse{}
	_body, _err := client.RefusePipelineValidateWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 拒绝人工卡点
//
// @param request - RefuseReleaseStagePipelineValidateRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RefuseReleaseStagePipelineValidateResponse
func (client *Client) RefuseReleaseStagePipelineValidateWithOptions(appName *string, releaseWorkflowSn *string, releaseStageSn *string, executionNumber *string, request *RefuseReleaseStagePipelineValidateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RefuseReleaseStagePipelineValidateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["jobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefuseReleaseStagePipelineValidate"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/releaseWorkflows/" + tea.StringValue(openapiutil.GetEncodeParam(releaseWorkflowSn)) + "/releaseStages/" + tea.StringValue(openapiutil.GetEncodeParam(releaseStageSn)) + "/executions/" + tea.StringValue(openapiutil.GetEncodeParam(executionNumber)) + "%3ArefusePipelineValidate"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RefuseReleaseStagePipelineValidateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 拒绝人工卡点
//
// @param request - RefuseReleaseStagePipelineValidateRequest
//
// @return RefuseReleaseStagePipelineValidateResponse
func (client *Client) RefuseReleaseStagePipelineValidate(appName *string, releaseWorkflowSn *string, releaseStageSn *string, executionNumber *string, request *RefuseReleaseStagePipelineValidateRequest) (_result *RefuseReleaseStagePipelineValidateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RefuseReleaseStagePipelineValidateResponse{}
	_body, _err := client.RefuseReleaseStagePipelineValidateWithOptions(appName, releaseWorkflowSn, releaseStageSn, executionNumber, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 释放工作空间
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleaseWorkspaceResponse
func (client *Client) ReleaseWorkspaceWithOptions(workspaceId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReleaseWorkspaceResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseWorkspace"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/workspaces/" + tea.StringValue(openapiutil.GetEncodeParam(workspaceId)) + "/release"),
		Method:      tea.String("DELETE"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 释放工作空间
//
// @return ReleaseWorkspaceResponse
func (client *Client) ReleaseWorkspace(workspaceId *string) (_result *ReleaseWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReleaseWorkspaceResponse{}
	_body, _err := client.ReleaseWorkspaceWithOptions(workspaceId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 重新打开代码评审
//
// @param request - ReopenMergeRequestRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReopenMergeRequestResponse
func (client *Client) ReopenMergeRequestWithOptions(repositoryId *string, localId *string, request *ReopenMergeRequestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReopenMergeRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReopenMergeRequest"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/merge_requests/" + tea.StringValue(openapiutil.GetEncodeParam(localId)) + "/reopen"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ReopenMergeRequestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 重新打开代码评审
//
// @param request - ReopenMergeRequestRequest
//
// @return ReopenMergeRequestResponse
func (client *Client) ReopenMergeRequest(repositoryId *string, localId *string, request *ReopenMergeRequestRequest) (_result *ReopenMergeRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReopenMergeRequestResponse{}
	_body, _err := client.ReopenMergeRequestWithOptions(repositoryId, localId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 重置企业公钥
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetSshKeyResponse
func (client *Client) ResetSshKeyWithOptions(organizationId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ResetSshKeyResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ResetSshKey"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/sshKey"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetSshKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 重置企业公钥
//
// @return ResetSshKeyResponse
func (client *Client) ResetSshKey(organizationId *string) (_result *ResetSshKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ResetSshKeyResponse{}
	_body, _err := client.ResetSshKeyWithOptions(organizationId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 继续部署
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResumeVMDeployOrderResponse
func (client *Client) ResumeVMDeployOrderWithOptions(organizationId *string, pipelineId *string, deployOrderId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ResumeVMDeployOrderResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeVMDeployOrder"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/deploy/" + tea.StringValue(openapiutil.GetEncodeParam(deployOrderId)) + "/resume"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ResumeVMDeployOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 继续部署
//
// @return ResumeVMDeployOrderResponse
func (client *Client) ResumeVMDeployOrder(organizationId *string, pipelineId *string, deployOrderId *string) (_result *ResumeVMDeployOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ResumeVMDeployOrderResponse{}
	_body, _err := client.ResumeVMDeployOrderWithOptions(organizationId, pipelineId, deployOrderId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 重试流水线运行
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RetryPipelineJobRunResponse
func (client *Client) RetryPipelineJobRunWithOptions(organizationId *string, pipelineId *string, pipelineRunId *string, jobId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryPipelineJobRunResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("RetryPipelineJobRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRuns/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineRunId)) + "/jobs/" + tea.StringValue(openapiutil.GetEncodeParam(jobId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RetryPipelineJobRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 重试流水线运行
//
// @return RetryPipelineJobRunResponse
func (client *Client) RetryPipelineJobRun(organizationId *string, pipelineId *string, pipelineRunId *string, jobId *string) (_result *RetryPipelineJobRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryPipelineJobRunResponse{}
	_body, _err := client.RetryPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 重试机器部署
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RetryVMDeployMachineResponse
func (client *Client) RetryVMDeployMachineWithOptions(organizationId *string, pipelineId *string, deployOrderId *string, machineSn *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *RetryVMDeployMachineResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("RetryVMDeployMachine"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/deploy/" + tea.StringValue(openapiutil.GetEncodeParam(deployOrderId)) + "/machine/" + tea.StringValue(openapiutil.GetEncodeParam(machineSn)) + "/retry"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &RetryVMDeployMachineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 重试机器部署
//
// @return RetryVMDeployMachineResponse
func (client *Client) RetryVMDeployMachine(organizationId *string, pipelineId *string, deployOrderId *string, machineSn *string) (_result *RetryVMDeployMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &RetryVMDeployMachineResponse{}
	_body, _err := client.RetryVMDeployMachineWithOptions(organizationId, pipelineId, deployOrderId, machineSn, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交变更请求的评审意见
//
// @param request - ReviewMergeRequestRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReviewMergeRequestResponse
func (client *Client) ReviewMergeRequestWithOptions(repositoryId *string, localId *string, request *ReviewMergeRequestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *ReviewMergeRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DraftCommentIds)) {
		body["draftCommentIds"] = request.DraftCommentIds
	}

	if !tea.BoolValue(util.IsUnset(request.ReviewComment)) {
		body["reviewComment"] = request.ReviewComment
	}

	if !tea.BoolValue(util.IsUnset(request.ReviewOpinion)) {
		body["reviewOpinion"] = request.ReviewOpinion
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ReviewMergeRequest"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/merge_requests/" + tea.StringValue(openapiutil.GetEncodeParam(localId)) + "/submit_review_opinion"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &ReviewMergeRequestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交变更请求的评审意见
//
// @param request - ReviewMergeRequestRequest
//
// @return ReviewMergeRequestResponse
func (client *Client) ReviewMergeRequest(repositoryId *string, localId *string, request *ReviewMergeRequestRequest) (_result *ReviewMergeRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &ReviewMergeRequestResponse{}
	_body, _err := client.ReviewMergeRequestWithOptions(repositoryId, localId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 跳过流水线任务运行
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SkipPipelineJobRunResponse
func (client *Client) SkipPipelineJobRunWithOptions(organizationId *string, pipelineId *string, pipelineRunId *string, jobId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipPipelineJobRunResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("SkipPipelineJobRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRuns/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineRunId)) + "/jobs/" + tea.StringValue(openapiutil.GetEncodeParam(jobId)) + "/skip"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &SkipPipelineJobRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 跳过流水线任务运行
//
// @return SkipPipelineJobRunResponse
func (client *Client) SkipPipelineJobRun(organizationId *string, pipelineId *string, pipelineRunId *string, jobId *string) (_result *SkipPipelineJobRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipPipelineJobRunResponse{}
	_body, _err := client.SkipPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 跳过机器部署
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SkipVMDeployMachineResponse
func (client *Client) SkipVMDeployMachineWithOptions(organizationId *string, pipelineId *string, deployOrderId *string, machineSn *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *SkipVMDeployMachineResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("SkipVMDeployMachine"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/deploy/" + tea.StringValue(openapiutil.GetEncodeParam(deployOrderId)) + "/machine/" + tea.StringValue(openapiutil.GetEncodeParam(machineSn)) + "/skip"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &SkipVMDeployMachineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 跳过机器部署
//
// @return SkipVMDeployMachineResponse
func (client *Client) SkipVMDeployMachine(organizationId *string, pipelineId *string, deployOrderId *string, machineSn *string) (_result *SkipVMDeployMachineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &SkipVMDeployMachineResponse{}
	_body, _err := client.SkipVMDeployMachineWithOptions(organizationId, pipelineId, deployOrderId, machineSn, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 运行流水线
//
// @param request - StartPipelineRunRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartPipelineRunResponse
func (client *Client) StartPipelineRunWithOptions(organizationId *string, pipelineId *string, request *StartPipelineRunRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StartPipelineRunResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Params)) {
		body["params"] = request.Params
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartPipelineRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organizations/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/run"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartPipelineRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 运行流水线
//
// @param request - StartPipelineRunRequest
//
// @return StartPipelineRunResponse
func (client *Client) StartPipelineRun(organizationId *string, pipelineId *string, request *StartPipelineRunRequest) (_result *StartPipelineRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StartPipelineRunResponse{}
	_body, _err := client.StartPipelineRunWithOptions(organizationId, pipelineId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 终止流水线任务运行
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopPipelineJobRunResponse
func (client *Client) StopPipelineJobRunWithOptions(organizationId *string, pipelineId *string, pipelineRunId *string, jobId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopPipelineJobRunResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("StopPipelineJobRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRuns/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineRunId)) + "/jobs/" + tea.StringValue(openapiutil.GetEncodeParam(jobId)) + "/stop"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StopPipelineJobRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 终止流水线任务运行
//
// @return StopPipelineJobRunResponse
func (client *Client) StopPipelineJobRun(organizationId *string, pipelineId *string, pipelineRunId *string, jobId *string) (_result *StopPipelineJobRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopPipelineJobRunResponse{}
	_body, _err := client.StopPipelineJobRunWithOptions(organizationId, pipelineId, pipelineRunId, jobId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 终止流水线运行
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopPipelineRunResponse
func (client *Client) StopPipelineRunWithOptions(organizationId *string, pipelineId *string, pipelineRunId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopPipelineRunResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("StopPipelineRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/pipelineRuns/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineRunId)) + "/stop"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StopPipelineRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 终止流水线运行
//
// @return StopPipelineRunResponse
func (client *Client) StopPipelineRun(organizationId *string, pipelineId *string, pipelineRunId *string) (_result *StopPipelineRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopPipelineRunResponse{}
	_body, _err := client.StopPipelineRunWithOptions(organizationId, pipelineId, pipelineRunId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消部署单
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopVMDeployOrderResponse
func (client *Client) StopVMDeployOrderWithOptions(organizationId *string, pipelineId *string, deployOrderId *string, headers map[string]*string, runtime *util.RuntimeOptions) (_result *StopVMDeployOrderResponse, _err error) {
	req := &openapi.OpenApiRequest{
		Headers: headers,
	}
	params := &openapi.Params{
		Action:      tea.String("StopVMDeployOrder"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/deploy/" + tea.StringValue(openapiutil.GetEncodeParam(deployOrderId)) + "/stop"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &StopVMDeployOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 取消部署单
//
// @return StopVMDeployOrderResponse
func (client *Client) StopVMDeployOrder(organizationId *string, pipelineId *string, deployOrderId *string) (_result *StopVMDeployOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &StopVMDeployOrderResponse{}
	_body, _err := client.StopVMDeployOrderWithOptions(organizationId, pipelineId, deployOrderId, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 转移代码库
//
// @param request - TransferRepositoryRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TransferRepositoryResponse
func (client *Client) TransferRepositoryWithOptions(request *TransferRepositoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *TransferRepositoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["groupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryId)) {
		query["repositoryId"] = request.RepositoryId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TransferRepository"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/repository/transfer"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TransferRepositoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 转移代码库
//
// @param request - TransferRepositoryRequest
//
// @return TransferRepositoryResponse
func (client *Client) TransferRepository(request *TransferRepositoryRequest) (_result *TransferRepositoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &TransferRepositoryResponse{}
	_body, _err := client.TransferRepositoryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 触发仓库同步
//
// @param request - TriggerRepositoryMirrorSyncRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TriggerRepositoryMirrorSyncResponse
func (client *Client) TriggerRepositoryMirrorSyncWithOptions(repositoryId *string, request *TriggerRepositoryMirrorSyncRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *TriggerRepositoryMirrorSyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.Account)) {
		query["account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TriggerRepositoryMirrorSync"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/mirror"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &TriggerRepositoryMirrorSyncResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 触发仓库同步
//
// @param request - TriggerRepositoryMirrorSyncRequest
//
// @return TriggerRepositoryMirrorSyncResponse
func (client *Client) TriggerRepositoryMirrorSync(repositoryId *string, request *TriggerRepositoryMirrorSyncRequest) (_result *TriggerRepositoryMirrorSyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &TriggerRepositoryMirrorSyncResponse{}
	_body, _err := client.TriggerRepositoryMirrorSyncWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新应用成员
//
// @param request - UpdateAppMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAppMemberResponse
func (client *Client) UpdateAppMemberWithOptions(appName *string, request *UpdateAppMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateAppMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Player)) {
		body["player"] = request.Player
	}

	if !tea.BoolValue(util.IsUnset(request.RoleNames)) {
		body["roleNames"] = request.RoleNames
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAppMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName)) + "/members"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("string"),
	}
	_result = &UpdateAppMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新应用成员
//
// @param request - UpdateAppMemberRequest
//
// @return UpdateAppMemberResponse
func (client *Client) UpdateAppMember(appName *string, request *UpdateAppMemberRequest) (_result *UpdateAppMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateAppMemberResponse{}
	_body, _err := client.UpdateAppMemberWithOptions(appName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新应用
//
// @param request - UpdateApplicationRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateApplicationResponse
func (client *Client) UpdateApplicationWithOptions(appName *string, request *UpdateApplicationRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccountId)) {
		body["ownerAccountId"] = request.OwnerAccountId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateApplication"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/appstack/apps/" + tea.StringValue(openapiutil.GetEncodeParam(appName))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新应用
//
// @param request - UpdateApplicationRequest
//
// @return UpdateApplicationResponse
func (client *Client) UpdateApplication(appName *string, request *UpdateApplicationRequest) (_result *UpdateApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateApplicationResponse{}
	_body, _err := client.UpdateApplicationWithOptions(appName, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新检查运行记录
//
// @param request - UpdateCheckRunRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCheckRunResponse
func (client *Client) UpdateCheckRunWithOptions(request *UpdateCheckRunRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateCheckRunResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.CheckRunId)) {
		query["checkRunId"] = request.CheckRunId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Annotations)) {
		body["annotations"] = request.Annotations
	}

	if !tea.BoolValue(util.IsUnset(request.CompletedAt)) {
		body["completedAt"] = request.CompletedAt
	}

	if !tea.BoolValue(util.IsUnset(request.Conclusion)) {
		body["conclusion"] = request.Conclusion
	}

	if !tea.BoolValue(util.IsUnset(request.DetailsUrl)) {
		body["detailsUrl"] = request.DetailsUrl
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalId)) {
		body["externalId"] = request.ExternalId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Output)) {
		body["output"] = request.Output
	}

	if !tea.BoolValue(util.IsUnset(request.StartedAt)) {
		body["startedAt"] = request.StartedAt
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCheckRun"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/check_runs/update_check_run"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCheckRunResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新检查运行记录
//
// @param request - UpdateCheckRunRequest
//
// @return UpdateCheckRunResponse
func (client *Client) UpdateCheckRun(request *UpdateCheckRunRequest) (_result *UpdateCheckRunResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateCheckRunResponse{}
	_body, _err := client.UpdateCheckRunWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新代码库文件
//
// @param request - UpdateFileRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFileResponse
func (client *Client) UpdateFileWithOptions(repositoryId *string, request *UpdateFileRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BranchName)) {
		body["branchName"] = request.BranchName
	}

	if !tea.BoolValue(util.IsUnset(request.CommitMessage)) {
		body["commitMessage"] = request.CommitMessage
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Encoding)) {
		body["encoding"] = request.Encoding
	}

	if !tea.BoolValue(util.IsUnset(request.NewPath)) {
		body["newPath"] = request.NewPath
	}

	if !tea.BoolValue(util.IsUnset(request.OldPath)) {
		body["oldPath"] = request.OldPath
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFile"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/files/update"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新代码库文件
//
// @param request - UpdateFileRequest
//
// @return UpdateFileResponse
func (client *Client) UpdateFile(repositoryId *string, request *UpdateFileRequest) (_result *UpdateFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFileResponse{}
	_body, _err := client.UpdateFileWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新标签
//
// @param request - UpdateFlowTagRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFlowTagResponse
func (client *Client) UpdateFlowTagWithOptions(organizationId *string, id *string, request *UpdateFlowTagRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFlowTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Color)) {
		query["color"] = request.Color
	}

	if !tea.BoolValue(util.IsUnset(request.FlowTagGroupId)) {
		query["flowTagGroupId"] = request.FlowTagGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFlowTag"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/flow/tags/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFlowTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新标签
//
// @param request - UpdateFlowTagRequest
//
// @return UpdateFlowTagResponse
func (client *Client) UpdateFlowTag(organizationId *string, id *string, request *UpdateFlowTagRequest) (_result *UpdateFlowTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFlowTagResponse{}
	_body, _err := client.UpdateFlowTagWithOptions(organizationId, id, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 标签分类
//
// @param request - UpdateFlowTagGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFlowTagGroupResponse
func (client *Client) UpdateFlowTagGroupWithOptions(organizationId *string, id *string, request *UpdateFlowTagGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateFlowTagGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFlowTagGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/flow/tagGroups/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFlowTagGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 标签分类
//
// @param request - UpdateFlowTagGroupRequest
//
// @return UpdateFlowTagGroupResponse
func (client *Client) UpdateFlowTagGroup(organizationId *string, id *string, request *UpdateFlowTagGroupRequest) (_result *UpdateFlowTagGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateFlowTagGroupResponse{}
	_body, _err := client.UpdateFlowTagGroupWithOptions(organizationId, id, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新单个代码组信息
//
// @param request - UpdateGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateGroupResponse
func (client *Client) UpdateGroupWithOptions(request *UpdateGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarUrl)) {
		body["avatarUrl"] = request.AvatarUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		body["path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.PathWithNamespace)) {
		body["pathWithNamespace"] = request.PathWithNamespace
	}

	if !tea.BoolValue(util.IsUnset(request.VisibilityLevel)) {
		body["visibilityLevel"] = request.VisibilityLevel
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/groups/modify"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新单个代码组信息
//
// @param request - UpdateGroupRequest
//
// @return UpdateGroupResponse
func (client *Client) UpdateGroup(request *UpdateGroupRequest) (_result *UpdateGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateGroupResponse{}
	_body, _err := client.UpdateGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改组成员
//
// @param request - UpdateGroupMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateGroupMemberResponse
func (client *Client) UpdateGroupMemberWithOptions(groupId *string, request *UpdateGroupMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateGroupMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.AliyunPk)) {
		query["aliyunPk"] = request.AliyunPk
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessLevel)) {
		body["accessLevel"] = request.AccessLevel
	}

	if !tea.BoolValue(util.IsUnset(request.MemberType)) {
		body["memberType"] = request.MemberType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateGroupMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/groups/" + tea.StringValue(openapiutil.GetEncodeParam(groupId)) + "/members/update/aliyun_pk"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateGroupMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改组成员
//
// @param request - UpdateGroupMemberRequest
//
// @return UpdateGroupMemberResponse
func (client *Client) UpdateGroupMember(groupId *string, request *UpdateGroupMemberRequest) (_result *UpdateGroupMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateGroupMemberResponse{}
	_body, _err := client.UpdateGroupMemberWithOptions(groupId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新主机组
//
// @param request - UpdateHostGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateHostGroupResponse
func (client *Client) UpdateHostGroupWithOptions(organizationId *string, id *string, request *UpdateHostGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunRegion)) {
		body["aliyunRegion"] = request.AliyunRegion
	}

	if !tea.BoolValue(util.IsUnset(request.EcsLabelKey)) {
		body["ecsLabelKey"] = request.EcsLabelKey
	}

	if !tea.BoolValue(util.IsUnset(request.EcsLabelValue)) {
		body["ecsLabelValue"] = request.EcsLabelValue
	}

	if !tea.BoolValue(util.IsUnset(request.EcsType)) {
		body["ecsType"] = request.EcsType
	}

	if !tea.BoolValue(util.IsUnset(request.EnvId)) {
		body["envId"] = request.EnvId
	}

	if !tea.BoolValue(util.IsUnset(request.MachineInfos)) {
		body["machineInfos"] = request.MachineInfos
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceConnectionId)) {
		body["serviceConnectionId"] = request.ServiceConnectionId
	}

	if !tea.BoolValue(util.IsUnset(request.TagIds)) {
		body["tagIds"] = request.TagIds
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateHostGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/hostGroups/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateHostGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新主机组
//
// @param request - UpdateHostGroupRequest
//
// @return UpdateHostGroupResponse
func (client *Client) UpdateHostGroup(organizationId *string, id *string, request *UpdateHostGroupRequest) (_result *UpdateHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateHostGroupResponse{}
	_body, _err := client.UpdateHostGroupWithOptions(organizationId, id, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新代码评审的标题和描述
//
// @param request - UpdateMergeRequestRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMergeRequestResponse
func (client *Client) UpdateMergeRequestWithOptions(repositoryId *string, localId *string, request *UpdateMergeRequestRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMergeRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMergeRequest"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/merge_requests/" + tea.StringValue(openapiutil.GetEncodeParam(localId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMergeRequestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新代码评审的标题和描述
//
// @param request - UpdateMergeRequestRequest
//
// @return UpdateMergeRequestResponse
func (client *Client) UpdateMergeRequest(repositoryId *string, localId *string, request *UpdateMergeRequestRequest) (_result *UpdateMergeRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMergeRequestResponse{}
	_body, _err := client.UpdateMergeRequestWithOptions(repositoryId, localId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新代码评审的干系人
//
// @param request - UpdateMergeRequestPersonnelRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMergeRequestPersonnelResponse
func (client *Client) UpdateMergeRequestPersonnelWithOptions(repositoryId *string, localId *string, personType *string, request *UpdateMergeRequestPersonnelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateMergeRequestPersonnelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NewUserIdList)) {
		body["newUserIdList"] = request.NewUserIdList
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMergeRequestPersonnel"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/merge_requests/" + tea.StringValue(openapiutil.GetEncodeParam(localId)) + "/person/" + tea.StringValue(openapiutil.GetEncodeParam(personType))),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMergeRequestPersonnelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新代码评审的干系人
//
// @param request - UpdateMergeRequestPersonnelRequest
//
// @return UpdateMergeRequestPersonnelResponse
func (client *Client) UpdateMergeRequestPersonnel(repositoryId *string, localId *string, personType *string, request *UpdateMergeRequestPersonnelRequest) (_result *UpdateMergeRequestPersonnelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateMergeRequestPersonnelResponse{}
	_body, _err := client.UpdateMergeRequestPersonnelWithOptions(repositoryId, localId, personType, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 当前用户加入的企业列表
//
// @param request - UpdateOrganizationMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateOrganizationMemberResponse
func (client *Client) UpdateOrganizationMemberWithOptions(organizationId *string, accountId *string, request *UpdateOrganizationMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateOrganizationMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationMemberName)) {
		query["organizationMemberName"] = request.OrganizationMemberName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateOrganizationMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/members/" + tea.StringValue(openapiutil.GetEncodeParam(accountId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateOrganizationMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 当前用户加入的企业列表
//
// @param request - UpdateOrganizationMemberRequest
//
// @return UpdateOrganizationMemberResponse
func (client *Client) UpdateOrganizationMember(organizationId *string, accountId *string, request *UpdateOrganizationMemberRequest) (_result *UpdateOrganizationMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateOrganizationMemberResponse{}
	_body, _err := client.UpdateOrganizationMemberWithOptions(organizationId, accountId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新流水线。
//
// @param request - UpdatePipelineRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePipelineResponse
func (client *Client) UpdatePipelineWithOptions(organizationId *string, request *UpdatePipelineRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdatePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		body["pipelineId"] = request.PipelineId
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePipeline"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/update"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新流水线。
//
// @param request - UpdatePipelineRequest
//
// @return UpdatePipelineResponse
func (client *Client) UpdatePipeline(organizationId *string, request *UpdatePipelineRequest) (_result *UpdatePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdatePipelineResponse{}
	_body, _err := client.UpdatePipelineWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除标签
//
// @param request - UpdatePipelineBaseInfoRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePipelineBaseInfoResponse
func (client *Client) UpdatePipelineBaseInfoWithOptions(organizationId *string, pipelineId *string, request *UpdatePipelineBaseInfoRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdatePipelineBaseInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnvId)) {
		query["envId"] = request.EnvId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineName)) {
		query["pipelineName"] = request.PipelineName
	}

	if !tea.BoolValue(util.IsUnset(request.TagList)) {
		query["tagList"] = request.TagList
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePipelineBaseInfo"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelines/" + tea.StringValue(openapiutil.GetEncodeParam(pipelineId)) + "/baseInfo"),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePipelineBaseInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除标签
//
// @param request - UpdatePipelineBaseInfoRequest
//
// @return UpdatePipelineBaseInfoResponse
func (client *Client) UpdatePipelineBaseInfo(organizationId *string, pipelineId *string, request *UpdatePipelineBaseInfoRequest) (_result *UpdatePipelineBaseInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdatePipelineBaseInfoResponse{}
	_body, _err := client.UpdatePipelineBaseInfoWithOptions(organizationId, pipelineId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新流水线分组
//
// @param request - UpdatePipelineGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePipelineGroupResponse
func (client *Client) UpdatePipelineGroupWithOptions(organizationId *string, groupId *string, request *UpdatePipelineGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdatePipelineGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePipelineGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/pipelineGroups/" + tea.StringValue(openapiutil.GetEncodeParam(groupId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePipelineGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新流水线分组
//
// @param request - UpdatePipelineGroupRequest
//
// @return UpdatePipelineGroupResponse
func (client *Client) UpdatePipelineGroup(organizationId *string, groupId *string, request *UpdatePipelineGroupRequest) (_result *UpdatePipelineGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdatePipelineGroupResponse{}
	_body, _err := client.UpdatePipelineGroupWithOptions(organizationId, groupId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新项目属性与字段
//
// @param request - UpdateProjectFieldRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateProjectFieldResponse
func (client *Client) UpdateProjectFieldWithOptions(organizationId *string, identifier *string, request *UpdateProjectFieldRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateProjectFieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.StatusIdentifier)) {
		body["statusIdentifier"] = request.StatusIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateBasicFieldRequestList)) {
		body["updateBasicFieldRequestList"] = request.UpdateBasicFieldRequestList
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateForOpenApiList)) {
		body["updateForOpenApiList"] = request.UpdateForOpenApiList
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProjectField"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/project/" + tea.StringValue(openapiutil.GetEncodeParam(identifier))),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProjectFieldResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新项目属性与字段
//
// @param request - UpdateProjectFieldRequest
//
// @return UpdateProjectFieldResponse
func (client *Client) UpdateProjectField(organizationId *string, identifier *string, request *UpdateProjectFieldRequest) (_result *UpdateProjectFieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateProjectFieldResponse{}
	_body, _err := client.UpdateProjectFieldWithOptions(organizationId, identifier, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新代码库Label
//
// @param request - UpdateProjectLabelRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateProjectLabelResponse
func (client *Client) UpdateProjectLabelWithOptions(labelId *string, request *UpdateProjectLabelRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateProjectLabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RepositoryIdentity)) {
		query["repositoryIdentity"] = request.RepositoryIdentity
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Color)) {
		body["color"] = request.Color
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProjectLabel"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/labels/" + tea.StringValue(openapiutil.GetEncodeParam(labelId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProjectLabelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新代码库Label
//
// @param request - UpdateProjectLabelRequest
//
// @return UpdateProjectLabelResponse
func (client *Client) UpdateProjectLabel(labelId *string, request *UpdateProjectLabelRequest) (_result *UpdateProjectLabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateProjectLabelResponse{}
	_body, _err := client.UpdateProjectLabelWithOptions(labelId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加项目成员
//
// @param request - UpdateProjectMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateProjectMemberResponse
func (client *Client) UpdateProjectMemberWithOptions(organizationId *string, projectId *string, request *UpdateProjectMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateProjectMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RoleIdentifier)) {
		body["roleIdentifier"] = request.RoleIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.TargetIdentifier)) {
		body["targetIdentifier"] = request.TargetIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.TargetType)) {
		body["targetType"] = request.TargetType
	}

	if !tea.BoolValue(util.IsUnset(request.UserIdentifier)) {
		body["userIdentifier"] = request.UserIdentifier
	}

	if !tea.BoolValue(util.IsUnset(request.UserType)) {
		body["userType"] = request.UserType
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProjectMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/projects/" + tea.StringValue(openapiutil.GetEncodeParam(projectId)) + "/updateMember"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProjectMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加项目成员
//
// @param request - UpdateProjectMemberRequest
//
// @return UpdateProjectMemberResponse
func (client *Client) UpdateProjectMember(organizationId *string, projectId *string, request *UpdateProjectMemberRequest) (_result *UpdateProjectMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateProjectMemberResponse{}
	_body, _err := client.UpdateProjectMemberWithOptions(organizationId, projectId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更改保护分支设置
//
// @param request - UpdateProtectedBranchesRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateProtectedBranchesResponse
func (client *Client) UpdateProtectedBranchesWithOptions(repositoryId *string, id *string, request *UpdateProtectedBranchesRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateProtectedBranchesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowMergeRoles)) {
		body["allowMergeRoles"] = request.AllowMergeRoles
	}

	if !tea.BoolValue(util.IsUnset(request.AllowMergeUserIds)) {
		body["allowMergeUserIds"] = request.AllowMergeUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.AllowPushRoles)) {
		body["allowPushRoles"] = request.AllowPushRoles
	}

	if !tea.BoolValue(util.IsUnset(request.AllowPushUserIds)) {
		body["allowPushUserIds"] = request.AllowPushUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.Branch)) {
		body["branch"] = request.Branch
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MergeRequestSetting)) {
		body["mergeRequestSetting"] = request.MergeRequestSetting
	}

	if !tea.BoolValue(util.IsUnset(request.TestSettingDTO)) {
		body["testSettingDTO"] = request.TestSettingDTO
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProtectedBranches"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/protect_branches/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProtectedBranchesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更改保护分支设置
//
// @param request - UpdateProtectedBranchesRequest
//
// @return UpdateProtectedBranchesResponse
func (client *Client) UpdateProtectedBranches(repositoryId *string, id *string, request *UpdateProtectedBranchesRequest) (_result *UpdateProtectedBranchesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateProtectedBranchesResponse{}
	_body, _err := client.UpdateProtectedBranchesWithOptions(repositoryId, id, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 推送评审模式开关
//
// @param request - UpdatePushReviewOnOffRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePushReviewOnOffResponse
func (client *Client) UpdatePushReviewOnOffWithOptions(repositoryId *string, request *UpdatePushReviewOnOffRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdatePushReviewOnOffResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.TrunkMode)) {
		query["trunkMode"] = request.TrunkMode
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePushReviewOnOff"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/settings/trunk_mode"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePushReviewOnOffResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 推送评审模式开关
//
// @param request - UpdatePushReviewOnOffRequest
//
// @return UpdatePushReviewOnOffResponse
func (client *Client) UpdatePushReviewOnOff(repositoryId *string, request *UpdatePushReviewOnOffRequest) (_result *UpdatePushReviewOnOffResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdatePushReviewOnOffResponse{}
	_body, _err := client.UpdatePushReviewOnOffWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新推送规则
//
// @param request - UpdatePushRuleRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePushRuleResponse
func (client *Client) UpdatePushRuleWithOptions(repositoryId *string, pushRuleId *string, request *UpdatePushRuleRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdatePushRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleInfos)) {
		body["ruleInfos"] = request.RuleInfos
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePushRule"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/api/v4/projects/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/push_rule/" + tea.StringValue(openapiutil.GetEncodeParam(pushRuleId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePushRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新推送规则
//
// @param request - UpdatePushRuleRequest
//
// @return UpdatePushRuleResponse
func (client *Client) UpdatePushRule(repositoryId *string, pushRuleId *string, request *UpdatePushRuleRequest) (_result *UpdatePushRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdatePushRuleResponse{}
	_body, _err := client.UpdatePushRuleWithOptions(repositoryId, pushRuleId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新代码库名称、路径、描述、默认分支等设置
//
// @param request - UpdateRepositoryRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRepositoryResponse
func (client *Client) UpdateRepositoryWithOptions(repositoryId *string, request *UpdateRepositoryRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateRepositoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdminSettingLanguage)) {
		body["adminSettingLanguage"] = request.AdminSettingLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.Avatar)) {
		body["avatar"] = request.Avatar
	}

	if !tea.BoolValue(util.IsUnset(request.BuildsEnabled)) {
		body["buildsEnabled"] = request.BuildsEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.CheckEmail)) {
		body["checkEmail"] = request.CheckEmail
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultBranch)) {
		body["defaultBranch"] = request.DefaultBranch
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.IssuesEnabled)) {
		body["issuesEnabled"] = request.IssuesEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.MergeRequestsEnabled)) {
		body["mergeRequestsEnabled"] = request.MergeRequestsEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OpenCloneDownloadControl)) {
		body["openCloneDownloadControl"] = request.OpenCloneDownloadControl
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		body["path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectCloneDownloadMethodList)) {
		body["projectCloneDownloadMethodList"] = request.ProjectCloneDownloadMethodList
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectCloneDownloadRoleList)) {
		body["projectCloneDownloadRoleList"] = request.ProjectCloneDownloadRoleList
	}

	if !tea.BoolValue(util.IsUnset(request.SnippetsEnabled)) {
		body["snippetsEnabled"] = request.SnippetsEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.VisibilityLevel)) {
		body["visibilityLevel"] = request.VisibilityLevel
	}

	if !tea.BoolValue(util.IsUnset(request.WikiEnabled)) {
		body["wikiEnabled"] = request.WikiEnabled
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRepository"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRepositoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新代码库名称、路径、描述、默认分支等设置
//
// @param request - UpdateRepositoryRequest
//
// @return UpdateRepositoryResponse
func (client *Client) UpdateRepository(repositoryId *string, request *UpdateRepositoryRequest) (_result *UpdateRepositoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateRepositoryResponse{}
	_body, _err := client.UpdateRepositoryWithOptions(repositoryId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改代码库成员的权限（角色）
//
// @param request - UpdateRepositoryMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRepositoryMemberResponse
func (client *Client) UpdateRepositoryMemberWithOptions(repositoryId *string, aliyunPk *string, request *UpdateRepositoryMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateRepositoryMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessToken)) {
		query["accessToken"] = request.AccessToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["organizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessLevel)) {
		body["accessLevel"] = request.AccessLevel
	}

	if !tea.BoolValue(util.IsUnset(request.ExpireAt)) {
		body["expireAt"] = request.ExpireAt
	}

	if !tea.BoolValue(util.IsUnset(request.MemberType)) {
		body["memberType"] = request.MemberType
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedId)) {
		body["relatedId"] = request.RelatedId
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedInfos)) {
		body["relatedInfos"] = request.RelatedInfos
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRepositoryMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/repository/" + tea.StringValue(openapiutil.GetEncodeParam(repositoryId)) + "/members/" + tea.StringValue(openapiutil.GetEncodeParam(aliyunPk))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRepositoryMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改代码库成员的权限（角色）
//
// @param request - UpdateRepositoryMemberRequest
//
// @return UpdateRepositoryMemberResponse
func (client *Client) UpdateRepositoryMember(repositoryId *string, aliyunPk *string, request *UpdateRepositoryMemberRequest) (_result *UpdateRepositoryMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateRepositoryMemberResponse{}
	_body, _err := client.UpdateRepositoryMemberWithOptions(repositoryId, aliyunPk, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新资源成员
//
// @param request - UpdateResourceMemberRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateResourceMemberResponse
func (client *Client) UpdateResourceMemberWithOptions(organizationId *string, resourceType *string, resourceId *string, accountId *string, request *UpdateResourceMemberRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateResourceMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RoleName)) {
		body["roleName"] = request.RoleName
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateResourceMember"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(resourceType)) + "/" + tea.StringValue(openapiutil.GetEncodeParam(resourceId)) + "/members/" + tea.StringValue(openapiutil.GetEncodeParam(accountId))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateResourceMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新资源成员
//
// @param request - UpdateResourceMemberRequest
//
// @return UpdateResourceMemberResponse
func (client *Client) UpdateResourceMember(organizationId *string, resourceType *string, resourceId *string, accountId *string, request *UpdateResourceMemberRequest) (_result *UpdateResourceMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateResourceMemberResponse{}
	_body, _err := client.UpdateResourceMemberWithOptions(organizationId, resourceType, resourceId, accountId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新测试用例字段
//
// @param request - UpdateTestCaseRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTestCaseResponse
func (client *Client) UpdateTestCaseWithOptions(organizationId *string, testcaseIdentifier *string, request *UpdateTestCaseRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTestCaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UpdateWorkitemPropertyRequest)) {
		body["updateWorkitemPropertyRequest"] = request.UpdateWorkitemPropertyRequest
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTestCase"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/testhub/testcase/" + tea.StringValue(openapiutil.GetEncodeParam(testcaseIdentifier))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTestCaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新测试用例字段
//
// @param request - UpdateTestCaseRequest
//
// @return UpdateTestCaseResponse
func (client *Client) UpdateTestCase(organizationId *string, testcaseIdentifier *string, request *UpdateTestCaseRequest) (_result *UpdateTestCaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTestCaseResponse{}
	_body, _err := client.UpdateTestCaseWithOptions(organizationId, testcaseIdentifier, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新了测试计划中测试用例的执行人与状态
//
// @param request - UpdateTestResultRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTestResultResponse
func (client *Client) UpdateTestResultWithOptions(organizationId *string, testPlanIdentifier *string, testcaseIdentifier *string, request *UpdateTestResultRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateTestResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Executor)) {
		body["executor"] = request.Executor
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTestResult"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/testhub/testplan/" + tea.StringValue(openapiutil.GetEncodeParam(testPlanIdentifier)) + "/testresult/" + tea.StringValue(openapiutil.GetEncodeParam(testcaseIdentifier))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTestResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新了测试计划中测试用例的执行人与状态
//
// @param request - UpdateTestResultRequest
//
// @return UpdateTestResultResponse
func (client *Client) UpdateTestResult(organizationId *string, testPlanIdentifier *string, testcaseIdentifier *string, request *UpdateTestResultRequest) (_result *UpdateTestResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateTestResultResponse{}
	_body, _err := client.UpdateTestResultWithOptions(organizationId, testPlanIdentifier, testcaseIdentifier, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新变量组
//
// @param request - UpdateVariableGroupRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateVariableGroupResponse
func (client *Client) UpdateVariableGroupWithOptions(organizationId *string, id *string, request *UpdateVariableGroupRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateVariableGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Variables)) {
		body["variables"] = request.Variables
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateVariableGroup"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/variableGroups/" + tea.StringValue(openapiutil.GetEncodeParam(id))),
		Method:      tea.String("PUT"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateVariableGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新变量组
//
// @param request - UpdateVariableGroupRequest
//
// @return UpdateVariableGroupResponse
func (client *Client) UpdateVariableGroup(organizationId *string, id *string, request *UpdateVariableGroupRequest) (_result *UpdateVariableGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateVariableGroupResponse{}
	_body, _err := client.UpdateVariableGroupWithOptions(organizationId, id, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新工作项信息
//
// @param request - UpdateWorkItemRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWorkItemResponse
func (client *Client) UpdateWorkItemWithOptions(organizationId *string, request *UpdateWorkItemRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateWorkItemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FieldType)) {
		body["fieldType"] = request.FieldType
	}

	if !tea.BoolValue(util.IsUnset(request.Identifier)) {
		body["identifier"] = request.Identifier
	}

	if !tea.BoolValue(util.IsUnset(request.PropertyKey)) {
		body["propertyKey"] = request.PropertyKey
	}

	if !tea.BoolValue(util.IsUnset(request.PropertyValue)) {
		body["propertyValue"] = request.PropertyValue
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWorkItem"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/update"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWorkItemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新工作项信息
//
// @param request - UpdateWorkItemRequest
//
// @return UpdateWorkItemResponse
func (client *Client) UpdateWorkItem(organizationId *string, request *UpdateWorkItemRequest) (_result *UpdateWorkItemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateWorkItemResponse{}
	_body, _err := client.UpdateWorkItemWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新工作项评论
//
// @param request - UpdateWorkitemCommentRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWorkitemCommentResponse
func (client *Client) UpdateWorkitemCommentWithOptions(organizationId *string, request *UpdateWorkitemCommentRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateWorkitemCommentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommentId)) {
		body["commentId"] = request.CommentId
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.FormatType)) {
		body["formatType"] = request.FormatType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemIdentifier)) {
		body["workitemIdentifier"] = request.WorkitemIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWorkitemComment"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/commentUpdate"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWorkitemCommentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新工作项评论
//
// @param request - UpdateWorkitemCommentRequest
//
// @return UpdateWorkitemCommentResponse
func (client *Client) UpdateWorkitemComment(organizationId *string, request *UpdateWorkitemCommentRequest) (_result *UpdateWorkitemCommentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateWorkitemCommentResponse{}
	_body, _err := client.UpdateWorkitemCommentWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量更新工作项字段信息
//
// @param request - UpdateWorkitemFieldRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWorkitemFieldResponse
func (client *Client) UpdateWorkitemFieldWithOptions(organizationId *string, request *UpdateWorkitemFieldRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *UpdateWorkitemFieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UpdateWorkitemPropertyRequest)) {
		body["updateWorkitemPropertyRequest"] = request.UpdateWorkitemPropertyRequest
	}

	if !tea.BoolValue(util.IsUnset(request.WorkitemIdentifier)) {
		body["workitemIdentifier"] = request.WorkitemIdentifier
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWorkitemField"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitems/updateWorkitemField"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWorkitemFieldResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量更新工作项字段信息
//
// @param request - UpdateWorkitemFieldRequest
//
// @return UpdateWorkitemFieldResponse
func (client *Client) UpdateWorkitemField(organizationId *string, request *UpdateWorkitemFieldRequest) (_result *UpdateWorkitemFieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &UpdateWorkitemFieldResponse{}
	_body, _err := client.UpdateWorkitemFieldWithOptions(organizationId, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 工作项附件创建
//
// @param request - WorkitemAttachmentCreateRequest
//
// @param headers - map
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return WorkitemAttachmentCreateResponse
func (client *Client) WorkitemAttachmentCreateWithOptions(organizationId *string, workitemIdentifier *string, request *WorkitemAttachmentCreateRequest, headers map[string]*string, runtime *util.RuntimeOptions) (_result *WorkitemAttachmentCreateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileKey)) {
		body["fileKey"] = request.FileKey
	}

	if !tea.BoolValue(util.IsUnset(request.OriginalFilename)) {
		body["originalFilename"] = request.OriginalFilename
	}

	req := &openapi.OpenApiRequest{
		Headers: headers,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("WorkitemAttachmentCreate"),
		Version:     tea.String("2021-06-25"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/organization/" + tea.StringValue(openapiutil.GetEncodeParam(organizationId)) + "/workitem/" + tea.StringValue(openapiutil.GetEncodeParam(workitemIdentifier)) + "/attachment"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("json"),
		BodyType:    tea.String("json"),
	}
	_result = &WorkitemAttachmentCreateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 工作项附件创建
//
// @param request - WorkitemAttachmentCreateRequest
//
// @return WorkitemAttachmentCreateResponse
func (client *Client) WorkitemAttachmentCreate(organizationId *string, workitemIdentifier *string, request *WorkitemAttachmentCreateRequest) (_result *WorkitemAttachmentCreateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := make(map[string]*string)
	_result = &WorkitemAttachmentCreateResponse{}
	_body, _err := client.WorkitemAttachmentCreateWithOptions(organizationId, workitemIdentifier, request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
