// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddDomainRequest struct {
	Domain               *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s AddDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDomainRequest) GoString() string {
	return s.String()
}

func (s *AddDomainRequest) SetDomain(v string) *AddDomainRequest {
	s.Domain = &v
	return s
}

func (s *AddDomainRequest) SetOwnerId(v int64) *AddDomainRequest {
	s.OwnerId = &v
	return s
}

func (s *AddDomainRequest) SetResourceOwnerAccount(v string) *AddDomainRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddDomainRequest) SetResourceOwnerId(v int64) *AddDomainRequest {
	s.ResourceOwnerId = &v
	return s
}

type AddDomainResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDomainResponseBody) GoString() string {
	return s.String()
}

func (s *AddDomainResponseBody) SetCode(v string) *AddDomainResponseBody {
	s.Code = &v
	return s
}

func (s *AddDomainResponseBody) SetData(v string) *AddDomainResponseBody {
	s.Data = &v
	return s
}

func (s *AddDomainResponseBody) SetRequestId(v string) *AddDomainResponseBody {
	s.RequestId = &v
	return s
}

type AddDomainResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDomainResponse) GoString() string {
	return s.String()
}

func (s *AddDomainResponse) SetHeaders(v map[string]*string) *AddDomainResponse {
	s.Headers = v
	return s
}

func (s *AddDomainResponse) SetStatusCode(v int32) *AddDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *AddDomainResponse) SetBody(v *AddDomainResponseBody) *AddDomainResponse {
	s.Body = v
	return s
}

type AddDomainNewRequest struct {
	Domain               *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s AddDomainNewRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDomainNewRequest) GoString() string {
	return s.String()
}

func (s *AddDomainNewRequest) SetDomain(v string) *AddDomainNewRequest {
	s.Domain = &v
	return s
}

func (s *AddDomainNewRequest) SetOwnerId(v int64) *AddDomainNewRequest {
	s.OwnerId = &v
	return s
}

func (s *AddDomainNewRequest) SetProdCode(v string) *AddDomainNewRequest {
	s.ProdCode = &v
	return s
}

func (s *AddDomainNewRequest) SetResourceOwnerAccount(v string) *AddDomainNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddDomainNewRequest) SetResourceOwnerId(v int64) *AddDomainNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type AddDomainNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s AddDomainNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDomainNewResponseBody) GoString() string {
	return s.String()
}

func (s *AddDomainNewResponseBody) SetRequestId(v string) *AddDomainNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddDomainNewResponseBody) SetResult(v bool) *AddDomainNewResponseBody {
	s.Result = &v
	return s
}

type AddDomainNewResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddDomainNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddDomainNewResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDomainNewResponse) GoString() string {
	return s.String()
}

func (s *AddDomainNewResponse) SetHeaders(v map[string]*string) *AddDomainNewResponse {
	s.Headers = v
	return s
}

func (s *AddDomainNewResponse) SetStatusCode(v int32) *AddDomainNewResponse {
	s.StatusCode = &v
	return s
}

func (s *AddDomainNewResponse) SetBody(v *AddDomainNewResponseBody) *AddDomainNewResponse {
	s.Body = v
	return s
}

type ApplyExportSmsSendRecordNewRequest struct {
	BizType              *int64  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	EndDate              *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	ErrorCode            *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PhoneNum             *string `json:"PhoneNum,omitempty" xml:"PhoneNum,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	RealTimeDataFlag     *int32  `json:"RealTimeDataFlag,omitempty" xml:"RealTimeDataFlag,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SendDate             *string `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
	SendStatus           *int64  `json:"SendStatus,omitempty" xml:"SendStatus,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	StartDate            *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s ApplyExportSmsSendRecordNewRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyExportSmsSendRecordNewRequest) GoString() string {
	return s.String()
}

func (s *ApplyExportSmsSendRecordNewRequest) SetBizType(v int64) *ApplyExportSmsSendRecordNewRequest {
	s.BizType = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetEndDate(v string) *ApplyExportSmsSendRecordNewRequest {
	s.EndDate = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetErrorCode(v string) *ApplyExportSmsSendRecordNewRequest {
	s.ErrorCode = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetOwnerId(v int64) *ApplyExportSmsSendRecordNewRequest {
	s.OwnerId = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetPhoneNum(v string) *ApplyExportSmsSendRecordNewRequest {
	s.PhoneNum = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetProdCode(v string) *ApplyExportSmsSendRecordNewRequest {
	s.ProdCode = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetRealTimeDataFlag(v int32) *ApplyExportSmsSendRecordNewRequest {
	s.RealTimeDataFlag = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetResourceOwnerAccount(v string) *ApplyExportSmsSendRecordNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetResourceOwnerId(v int64) *ApplyExportSmsSendRecordNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetSendDate(v string) *ApplyExportSmsSendRecordNewRequest {
	s.SendDate = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetSendStatus(v int64) *ApplyExportSmsSendRecordNewRequest {
	s.SendStatus = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetSignName(v string) *ApplyExportSmsSendRecordNewRequest {
	s.SignName = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetStartDate(v string) *ApplyExportSmsSendRecordNewRequest {
	s.StartDate = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewRequest) SetTemplateCode(v string) *ApplyExportSmsSendRecordNewRequest {
	s.TemplateCode = &v
	return s
}

type ApplyExportSmsSendRecordNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ApplyExportSmsSendRecordNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyExportSmsSendRecordNewResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyExportSmsSendRecordNewResponseBody) SetRequestId(v string) *ApplyExportSmsSendRecordNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewResponseBody) SetResult(v string) *ApplyExportSmsSendRecordNewResponseBody {
	s.Result = &v
	return s
}

type ApplyExportSmsSendRecordNewResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyExportSmsSendRecordNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyExportSmsSendRecordNewResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyExportSmsSendRecordNewResponse) GoString() string {
	return s.String()
}

func (s *ApplyExportSmsSendRecordNewResponse) SetHeaders(v map[string]*string) *ApplyExportSmsSendRecordNewResponse {
	s.Headers = v
	return s
}

func (s *ApplyExportSmsSendRecordNewResponse) SetStatusCode(v int32) *ApplyExportSmsSendRecordNewResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyExportSmsSendRecordNewResponse) SetBody(v *ApplyExportSmsSendRecordNewResponseBody) *ApplyExportSmsSendRecordNewResponse {
	s.Body = v
	return s
}

type BatchCreateSmsSignRequest struct {
	ColumnIndexMappingRule *BatchCreateSmsSignRequestColumnIndexMappingRule `json:"ColumnIndexMappingRule,omitempty" xml:"ColumnIndexMappingRule,omitempty" type:"Struct"`
	ExtendMessage          *string                                          `json:"ExtendMessage,omitempty" xml:"ExtendMessage,omitempty"`
	FileName               *string                                          `json:"FileName,omitempty" xml:"FileName,omitempty"`
	MoreData               []*string                                        `json:"MoreData,omitempty" xml:"MoreData,omitempty" type:"Repeated"`
	OperationType          *int32                                           `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	OssKeys                *string                                          `json:"OssKeys,omitempty" xml:"OssKeys,omitempty"`
	OwnerId                *int64                                           `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode               *string                                          `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	Remark                 *string                                          `json:"Remark,omitempty" xml:"Remark,omitempty"`
	ResourceOwnerAccount   *string                                          `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64                                           `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	SceneType   *int32 `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	ServiceType *int32 `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// This parameter is required.
	SignOssKey       *string `json:"SignOssKey,omitempty" xml:"SignOssKey,omitempty"`
	UserViewFileName *string `json:"UserViewFileName,omitempty" xml:"UserViewFileName,omitempty"`
}

func (s BatchCreateSmsSignRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateSmsSignRequest) GoString() string {
	return s.String()
}

func (s *BatchCreateSmsSignRequest) SetColumnIndexMappingRule(v *BatchCreateSmsSignRequestColumnIndexMappingRule) *BatchCreateSmsSignRequest {
	s.ColumnIndexMappingRule = v
	return s
}

func (s *BatchCreateSmsSignRequest) SetExtendMessage(v string) *BatchCreateSmsSignRequest {
	s.ExtendMessage = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetFileName(v string) *BatchCreateSmsSignRequest {
	s.FileName = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetMoreData(v []*string) *BatchCreateSmsSignRequest {
	s.MoreData = v
	return s
}

func (s *BatchCreateSmsSignRequest) SetOperationType(v int32) *BatchCreateSmsSignRequest {
	s.OperationType = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetOssKeys(v string) *BatchCreateSmsSignRequest {
	s.OssKeys = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetOwnerId(v int64) *BatchCreateSmsSignRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetProdCode(v string) *BatchCreateSmsSignRequest {
	s.ProdCode = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetRemark(v string) *BatchCreateSmsSignRequest {
	s.Remark = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetResourceOwnerAccount(v string) *BatchCreateSmsSignRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetResourceOwnerId(v int64) *BatchCreateSmsSignRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetSceneType(v int32) *BatchCreateSmsSignRequest {
	s.SceneType = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetServiceType(v int32) *BatchCreateSmsSignRequest {
	s.ServiceType = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetSignOssKey(v string) *BatchCreateSmsSignRequest {
	s.SignOssKey = &v
	return s
}

func (s *BatchCreateSmsSignRequest) SetUserViewFileName(v string) *BatchCreateSmsSignRequest {
	s.UserViewFileName = &v
	return s
}

type BatchCreateSmsSignRequestColumnIndexMappingRule struct {
	AdminIdentifiedNumber       *int32 `json:"AdminIdentifiedNumber,omitempty" xml:"AdminIdentifiedNumber,omitempty"`
	AdminName                   *int32 `json:"AdminName,omitempty" xml:"AdminName,omitempty"`
	CompanyName                 *int32 `json:"CompanyName,omitempty" xml:"CompanyName,omitempty"`
	LegalPersonIdentifiedNumber *int32 `json:"LegalPersonIdentifiedNumber,omitempty" xml:"LegalPersonIdentifiedNumber,omitempty"`
	LegalPersonName             *int32 `json:"LegalPersonName,omitempty" xml:"LegalPersonName,omitempty"`
	OrganizationCode            *int32 `json:"OrganizationCode,omitempty" xml:"OrganizationCode,omitempty"`
	Remark                      *int32 `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SceneDescription            *int32 `json:"SceneDescription,omitempty" xml:"SceneDescription,omitempty"`
	SignatureName               *int32 `json:"SignatureName,omitempty" xml:"SignatureName,omitempty"`
	SignatureSource             *int32 `json:"SignatureSource,omitempty" xml:"SignatureSource,omitempty"`
	TemplateContent             *int32 `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
}

func (s BatchCreateSmsSignRequestColumnIndexMappingRule) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateSmsSignRequestColumnIndexMappingRule) GoString() string {
	return s.String()
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetAdminIdentifiedNumber(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.AdminIdentifiedNumber = &v
	return s
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetAdminName(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.AdminName = &v
	return s
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetCompanyName(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.CompanyName = &v
	return s
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetLegalPersonIdentifiedNumber(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.LegalPersonIdentifiedNumber = &v
	return s
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetLegalPersonName(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.LegalPersonName = &v
	return s
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetOrganizationCode(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.OrganizationCode = &v
	return s
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetRemark(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.Remark = &v
	return s
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetSceneDescription(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.SceneDescription = &v
	return s
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetSignatureName(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.SignatureName = &v
	return s
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetSignatureSource(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.SignatureSource = &v
	return s
}

func (s *BatchCreateSmsSignRequestColumnIndexMappingRule) SetTemplateContent(v int32) *BatchCreateSmsSignRequestColumnIndexMappingRule {
	s.TemplateContent = &v
	return s
}

type BatchCreateSmsSignShrinkRequest struct {
	ColumnIndexMappingRuleShrink *string `json:"ColumnIndexMappingRule,omitempty" xml:"ColumnIndexMappingRule,omitempty"`
	ExtendMessage                *string `json:"ExtendMessage,omitempty" xml:"ExtendMessage,omitempty"`
	FileName                     *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	MoreDataShrink               *string `json:"MoreData,omitempty" xml:"MoreData,omitempty"`
	OperationType                *int32  `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	OssKeys                      *string `json:"OssKeys,omitempty" xml:"OssKeys,omitempty"`
	OwnerId                      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode                     *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	Remark                       *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	ResourceOwnerAccount         *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId              *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	SceneType   *int32 `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	ServiceType *int32 `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// This parameter is required.
	SignOssKey       *string `json:"SignOssKey,omitempty" xml:"SignOssKey,omitempty"`
	UserViewFileName *string `json:"UserViewFileName,omitempty" xml:"UserViewFileName,omitempty"`
}

func (s BatchCreateSmsSignShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateSmsSignShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchCreateSmsSignShrinkRequest) SetColumnIndexMappingRuleShrink(v string) *BatchCreateSmsSignShrinkRequest {
	s.ColumnIndexMappingRuleShrink = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetExtendMessage(v string) *BatchCreateSmsSignShrinkRequest {
	s.ExtendMessage = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetFileName(v string) *BatchCreateSmsSignShrinkRequest {
	s.FileName = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetMoreDataShrink(v string) *BatchCreateSmsSignShrinkRequest {
	s.MoreDataShrink = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetOperationType(v int32) *BatchCreateSmsSignShrinkRequest {
	s.OperationType = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetOssKeys(v string) *BatchCreateSmsSignShrinkRequest {
	s.OssKeys = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetOwnerId(v int64) *BatchCreateSmsSignShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetProdCode(v string) *BatchCreateSmsSignShrinkRequest {
	s.ProdCode = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetRemark(v string) *BatchCreateSmsSignShrinkRequest {
	s.Remark = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetResourceOwnerAccount(v string) *BatchCreateSmsSignShrinkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetResourceOwnerId(v int64) *BatchCreateSmsSignShrinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetSceneType(v int32) *BatchCreateSmsSignShrinkRequest {
	s.SceneType = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetServiceType(v int32) *BatchCreateSmsSignShrinkRequest {
	s.ServiceType = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetSignOssKey(v string) *BatchCreateSmsSignShrinkRequest {
	s.SignOssKey = &v
	return s
}

func (s *BatchCreateSmsSignShrinkRequest) SetUserViewFileName(v string) *BatchCreateSmsSignShrinkRequest {
	s.UserViewFileName = &v
	return s
}

type BatchCreateSmsSignResponseBody struct {
	Code      *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *BatchCreateSmsSignResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s BatchCreateSmsSignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateSmsSignResponseBody) GoString() string {
	return s.String()
}

func (s *BatchCreateSmsSignResponseBody) SetCode(v string) *BatchCreateSmsSignResponseBody {
	s.Code = &v
	return s
}

func (s *BatchCreateSmsSignResponseBody) SetData(v *BatchCreateSmsSignResponseBodyData) *BatchCreateSmsSignResponseBody {
	s.Data = v
	return s
}

func (s *BatchCreateSmsSignResponseBody) SetMessage(v string) *BatchCreateSmsSignResponseBody {
	s.Message = &v
	return s
}

func (s *BatchCreateSmsSignResponseBody) SetRequestId(v string) *BatchCreateSmsSignResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchCreateSmsSignResponseBody) SetSuccess(v bool) *BatchCreateSmsSignResponseBody {
	s.Success = &v
	return s
}

type BatchCreateSmsSignResponseBodyData struct {
	AppliedNum               *int32  `json:"AppliedNum,omitempty" xml:"AppliedNum,omitempty"`
	AvailableNum             *int32  `json:"AvailableNum,omitempty" xml:"AvailableNum,omitempty"`
	BatchCreateSmsSignResult *string `json:"BatchCreateSmsSignResult,omitempty" xml:"BatchCreateSmsSignResult,omitempty"`
}

func (s BatchCreateSmsSignResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateSmsSignResponseBodyData) GoString() string {
	return s.String()
}

func (s *BatchCreateSmsSignResponseBodyData) SetAppliedNum(v int32) *BatchCreateSmsSignResponseBodyData {
	s.AppliedNum = &v
	return s
}

func (s *BatchCreateSmsSignResponseBodyData) SetAvailableNum(v int32) *BatchCreateSmsSignResponseBodyData {
	s.AvailableNum = &v
	return s
}

func (s *BatchCreateSmsSignResponseBodyData) SetBatchCreateSmsSignResult(v string) *BatchCreateSmsSignResponseBodyData {
	s.BatchCreateSmsSignResult = &v
	return s
}

type BatchCreateSmsSignResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchCreateSmsSignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchCreateSmsSignResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateSmsSignResponse) GoString() string {
	return s.String()
}

func (s *BatchCreateSmsSignResponse) SetHeaders(v map[string]*string) *BatchCreateSmsSignResponse {
	s.Headers = v
	return s
}

func (s *BatchCreateSmsSignResponse) SetStatusCode(v int32) *BatchCreateSmsSignResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchCreateSmsSignResponse) SetBody(v *BatchCreateSmsSignResponseBody) *BatchCreateSmsSignResponse {
	s.Body = v
	return s
}

type BatchDeleteExportSendRecordNewRequest struct {
	Ids                  *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s BatchDeleteExportSendRecordNewRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteExportSendRecordNewRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteExportSendRecordNewRequest) SetIds(v string) *BatchDeleteExportSendRecordNewRequest {
	s.Ids = &v
	return s
}

func (s *BatchDeleteExportSendRecordNewRequest) SetOwnerId(v int64) *BatchDeleteExportSendRecordNewRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchDeleteExportSendRecordNewRequest) SetProdCode(v string) *BatchDeleteExportSendRecordNewRequest {
	s.ProdCode = &v
	return s
}

func (s *BatchDeleteExportSendRecordNewRequest) SetResourceOwnerAccount(v string) *BatchDeleteExportSendRecordNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BatchDeleteExportSendRecordNewRequest) SetResourceOwnerId(v int64) *BatchDeleteExportSendRecordNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type BatchDeleteExportSendRecordNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s BatchDeleteExportSendRecordNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteExportSendRecordNewResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeleteExportSendRecordNewResponseBody) SetRequestId(v string) *BatchDeleteExportSendRecordNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchDeleteExportSendRecordNewResponseBody) SetResult(v string) *BatchDeleteExportSendRecordNewResponseBody {
	s.Result = &v
	return s
}

type BatchDeleteExportSendRecordNewResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchDeleteExportSendRecordNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchDeleteExportSendRecordNewResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteExportSendRecordNewResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteExportSendRecordNewResponse) SetHeaders(v map[string]*string) *BatchDeleteExportSendRecordNewResponse {
	s.Headers = v
	return s
}

func (s *BatchDeleteExportSendRecordNewResponse) SetStatusCode(v int32) *BatchDeleteExportSendRecordNewResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchDeleteExportSendRecordNewResponse) SetBody(v *BatchDeleteExportSendRecordNewResponseBody) *BatchDeleteExportSendRecordNewResponse {
	s.Body = v
	return s
}

type BatchDeleteTaskNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	TaskIds *string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty"`
}

func (s BatchDeleteTaskNewRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteTaskNewRequest) GoString() string {
	return s.String()
}

func (s *BatchDeleteTaskNewRequest) SetOwnerId(v int64) *BatchDeleteTaskNewRequest {
	s.OwnerId = &v
	return s
}

func (s *BatchDeleteTaskNewRequest) SetProdCode(v string) *BatchDeleteTaskNewRequest {
	s.ProdCode = &v
	return s
}

func (s *BatchDeleteTaskNewRequest) SetResourceOwnerAccount(v string) *BatchDeleteTaskNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BatchDeleteTaskNewRequest) SetResourceOwnerId(v int64) *BatchDeleteTaskNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *BatchDeleteTaskNewRequest) SetTaskIds(v string) *BatchDeleteTaskNewRequest {
	s.TaskIds = &v
	return s
}

type BatchDeleteTaskNewResponseBody struct {
	FailList    []*string `json:"FailList,omitempty" xml:"FailList,omitempty" type:"Repeated"`
	RequestId   *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SuccessList []*string `json:"SuccessList,omitempty" xml:"SuccessList,omitempty" type:"Repeated"`
}

func (s BatchDeleteTaskNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteTaskNewResponseBody) GoString() string {
	return s.String()
}

func (s *BatchDeleteTaskNewResponseBody) SetFailList(v []*string) *BatchDeleteTaskNewResponseBody {
	s.FailList = v
	return s
}

func (s *BatchDeleteTaskNewResponseBody) SetRequestId(v string) *BatchDeleteTaskNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchDeleteTaskNewResponseBody) SetSuccessList(v []*string) *BatchDeleteTaskNewResponseBody {
	s.SuccessList = v
	return s
}

type BatchDeleteTaskNewResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchDeleteTaskNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchDeleteTaskNewResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchDeleteTaskNewResponse) GoString() string {
	return s.String()
}

func (s *BatchDeleteTaskNewResponse) SetHeaders(v map[string]*string) *BatchDeleteTaskNewResponse {
	s.Headers = v
	return s
}

func (s *BatchDeleteTaskNewResponse) SetStatusCode(v int32) *BatchDeleteTaskNewResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchDeleteTaskNewResponse) SetBody(v *BatchDeleteTaskNewResponseBody) *BatchDeleteTaskNewResponse {
	s.Body = v
	return s
}

type CalculateSmsLengthNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SmsContent           *string `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
}

func (s CalculateSmsLengthNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CalculateSmsLengthNewRequest) GoString() string {
	return s.String()
}

func (s *CalculateSmsLengthNewRequest) SetOwnerId(v int64) *CalculateSmsLengthNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CalculateSmsLengthNewRequest) SetProdCode(v string) *CalculateSmsLengthNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CalculateSmsLengthNewRequest) SetResourceOwnerAccount(v string) *CalculateSmsLengthNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CalculateSmsLengthNewRequest) SetResourceOwnerId(v int64) *CalculateSmsLengthNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CalculateSmsLengthNewRequest) SetSmsContent(v string) *CalculateSmsLengthNewRequest {
	s.SmsContent = &v
	return s
}

type CalculateSmsLengthNewResponseBody struct {
	Length    *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Number    *int32  `json:"Number,omitempty" xml:"Number,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CalculateSmsLengthNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CalculateSmsLengthNewResponseBody) GoString() string {
	return s.String()
}

func (s *CalculateSmsLengthNewResponseBody) SetLength(v int32) *CalculateSmsLengthNewResponseBody {
	s.Length = &v
	return s
}

func (s *CalculateSmsLengthNewResponseBody) SetNumber(v int32) *CalculateSmsLengthNewResponseBody {
	s.Number = &v
	return s
}

func (s *CalculateSmsLengthNewResponseBody) SetRequestId(v string) *CalculateSmsLengthNewResponseBody {
	s.RequestId = &v
	return s
}

type CalculateSmsLengthNewResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CalculateSmsLengthNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CalculateSmsLengthNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CalculateSmsLengthNewResponse) GoString() string {
	return s.String()
}

func (s *CalculateSmsLengthNewResponse) SetHeaders(v map[string]*string) *CalculateSmsLengthNewResponse {
	s.Headers = v
	return s
}

func (s *CalculateSmsLengthNewResponse) SetStatusCode(v int32) *CalculateSmsLengthNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CalculateSmsLengthNewResponse) SetBody(v *CalculateSmsLengthNewResponseBody) *CalculateSmsLengthNewResponse {
	s.Body = v
	return s
}

type CancelSmsSignRequest struct {
	OrderId              *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	QualificationId      *int64  `json:"QualificationId,omitempty" xml:"QualificationId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SignatureCode        *string `json:"SignatureCode,omitempty" xml:"SignatureCode,omitempty"`
	SignatureId          *int64  `json:"SignatureId,omitempty" xml:"SignatureId,omitempty"`
}

func (s CancelSmsSignRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelSmsSignRequest) GoString() string {
	return s.String()
}

func (s *CancelSmsSignRequest) SetOrderId(v string) *CancelSmsSignRequest {
	s.OrderId = &v
	return s
}

func (s *CancelSmsSignRequest) SetOwnerId(v int64) *CancelSmsSignRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelSmsSignRequest) SetProdCode(v string) *CancelSmsSignRequest {
	s.ProdCode = &v
	return s
}

func (s *CancelSmsSignRequest) SetQualificationId(v int64) *CancelSmsSignRequest {
	s.QualificationId = &v
	return s
}

func (s *CancelSmsSignRequest) SetResourceOwnerAccount(v string) *CancelSmsSignRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelSmsSignRequest) SetResourceOwnerId(v int64) *CancelSmsSignRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelSmsSignRequest) SetSignatureCode(v string) *CancelSmsSignRequest {
	s.SignatureCode = &v
	return s
}

func (s *CancelSmsSignRequest) SetSignatureId(v int64) *CancelSmsSignRequest {
	s.SignatureId = &v
	return s
}

type CancelSmsSignResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CancelSmsSignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelSmsSignResponseBody) GoString() string {
	return s.String()
}

func (s *CancelSmsSignResponseBody) SetRequestId(v string) *CancelSmsSignResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelSmsSignResponseBody) SetResult(v string) *CancelSmsSignResponseBody {
	s.Result = &v
	return s
}

type CancelSmsSignResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelSmsSignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelSmsSignResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelSmsSignResponse) GoString() string {
	return s.String()
}

func (s *CancelSmsSignResponse) SetHeaders(v map[string]*string) *CancelSmsSignResponse {
	s.Headers = v
	return s
}

func (s *CancelSmsSignResponse) SetStatusCode(v int32) *CancelSmsSignResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelSmsSignResponse) SetBody(v *CancelSmsSignResponseBody) *CancelSmsSignResponse {
	s.Body = v
	return s
}

type CancelSmsTemplateRequest struct {
	OrderId              *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s CancelSmsTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelSmsTemplateRequest) GoString() string {
	return s.String()
}

func (s *CancelSmsTemplateRequest) SetOrderId(v int64) *CancelSmsTemplateRequest {
	s.OrderId = &v
	return s
}

func (s *CancelSmsTemplateRequest) SetOwnerId(v int64) *CancelSmsTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelSmsTemplateRequest) SetProdCode(v string) *CancelSmsTemplateRequest {
	s.ProdCode = &v
	return s
}

func (s *CancelSmsTemplateRequest) SetResourceOwnerAccount(v string) *CancelSmsTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelSmsTemplateRequest) SetResourceOwnerId(v int64) *CancelSmsTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelSmsTemplateRequest) SetTemplateCode(v string) *CancelSmsTemplateRequest {
	s.TemplateCode = &v
	return s
}

type CancelSmsTemplateResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelSmsTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelSmsTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CancelSmsTemplateResponseBody) SetCode(v string) *CancelSmsTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *CancelSmsTemplateResponseBody) SetData(v string) *CancelSmsTemplateResponseBody {
	s.Data = &v
	return s
}

func (s *CancelSmsTemplateResponseBody) SetRequestId(v string) *CancelSmsTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CancelSmsTemplateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelSmsTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelSmsTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelSmsTemplateResponse) GoString() string {
	return s.String()
}

func (s *CancelSmsTemplateResponse) SetHeaders(v map[string]*string) *CancelSmsTemplateResponse {
	s.Headers = v
	return s
}

func (s *CancelSmsTemplateResponse) SetStatusCode(v int32) *CancelSmsTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelSmsTemplateResponse) SetBody(v *CancelSmsTemplateResponseBody) *CancelSmsTemplateResponse {
	s.Body = v
	return s
}

type CancelSmsTemplateNewRequest struct {
	IntelligentApproval  *bool   `json:"IntelligentApproval,omitempty" xml:"IntelligentApproval,omitempty"`
	OrderId              *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s CancelSmsTemplateNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelSmsTemplateNewRequest) GoString() string {
	return s.String()
}

func (s *CancelSmsTemplateNewRequest) SetIntelligentApproval(v bool) *CancelSmsTemplateNewRequest {
	s.IntelligentApproval = &v
	return s
}

func (s *CancelSmsTemplateNewRequest) SetOrderId(v int64) *CancelSmsTemplateNewRequest {
	s.OrderId = &v
	return s
}

func (s *CancelSmsTemplateNewRequest) SetOwnerId(v int64) *CancelSmsTemplateNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelSmsTemplateNewRequest) SetProdCode(v string) *CancelSmsTemplateNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CancelSmsTemplateNewRequest) SetResourceOwnerAccount(v string) *CancelSmsTemplateNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelSmsTemplateNewRequest) SetResourceOwnerId(v int64) *CancelSmsTemplateNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelSmsTemplateNewRequest) SetTemplateCode(v string) *CancelSmsTemplateNewRequest {
	s.TemplateCode = &v
	return s
}

type CancelSmsTemplateNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CancelSmsTemplateNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelSmsTemplateNewResponseBody) GoString() string {
	return s.String()
}

func (s *CancelSmsTemplateNewResponseBody) SetRequestId(v string) *CancelSmsTemplateNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelSmsTemplateNewResponseBody) SetResult(v string) *CancelSmsTemplateNewResponseBody {
	s.Result = &v
	return s
}

type CancelSmsTemplateNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelSmsTemplateNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelSmsTemplateNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelSmsTemplateNewResponse) GoString() string {
	return s.String()
}

func (s *CancelSmsTemplateNewResponse) SetHeaders(v map[string]*string) *CancelSmsTemplateNewResponse {
	s.Headers = v
	return s
}

func (s *CancelSmsTemplateNewResponse) SetStatusCode(v int32) *CancelSmsTemplateNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelSmsTemplateNewResponse) SetBody(v *CancelSmsTemplateNewResponseBody) *CancelSmsTemplateNewResponse {
	s.Body = v
	return s
}

type CheckSmsSignNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CheckSmsSignNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckSmsSignNewRequest) GoString() string {
	return s.String()
}

func (s *CheckSmsSignNewRequest) SetOwnerId(v int64) *CheckSmsSignNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CheckSmsSignNewRequest) SetProdCode(v string) *CheckSmsSignNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CheckSmsSignNewRequest) SetResourceOwnerAccount(v string) *CheckSmsSignNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CheckSmsSignNewRequest) SetResourceOwnerId(v int64) *CheckSmsSignNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type CheckSmsSignNewResponseBody struct {
	Common       *bool   `json:"Common,omitempty" xml:"Common,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Verification *bool   `json:"Verification,omitempty" xml:"Verification,omitempty"`
}

func (s CheckSmsSignNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckSmsSignNewResponseBody) GoString() string {
	return s.String()
}

func (s *CheckSmsSignNewResponseBody) SetCommon(v bool) *CheckSmsSignNewResponseBody {
	s.Common = &v
	return s
}

func (s *CheckSmsSignNewResponseBody) SetRequestId(v string) *CheckSmsSignNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckSmsSignNewResponseBody) SetVerification(v bool) *CheckSmsSignNewResponseBody {
	s.Verification = &v
	return s
}

type CheckSmsSignNewResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckSmsSignNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckSmsSignNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckSmsSignNewResponse) GoString() string {
	return s.String()
}

func (s *CheckSmsSignNewResponse) SetHeaders(v map[string]*string) *CheckSmsSignNewResponse {
	s.Headers = v
	return s
}

func (s *CheckSmsSignNewResponse) SetStatusCode(v int32) *CheckSmsSignNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckSmsSignNewResponse) SetBody(v *CheckSmsSignNewResponseBody) *CheckSmsSignNewResponse {
	s.Body = v
	return s
}

type CreateAlicomProductRequest struct {
	BusOffer  *int64  `json:"BusOffer,omitempty" xml:"BusOffer,omitempty"`
	BusOffers *string `json:"BusOffers,omitempty" xml:"BusOffers,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode  *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateAlicomProductRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAlicomProductRequest) GoString() string {
	return s.String()
}

func (s *CreateAlicomProductRequest) SetBusOffer(v int64) *CreateAlicomProductRequest {
	s.BusOffer = &v
	return s
}

func (s *CreateAlicomProductRequest) SetBusOffers(v string) *CreateAlicomProductRequest {
	s.BusOffers = &v
	return s
}

func (s *CreateAlicomProductRequest) SetOwnerId(v int64) *CreateAlicomProductRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateAlicomProductRequest) SetProdCode(v string) *CreateAlicomProductRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateAlicomProductRequest) SetProdId(v string) *CreateAlicomProductRequest {
	s.ProdId = &v
	return s
}

func (s *CreateAlicomProductRequest) SetResourceOwnerAccount(v string) *CreateAlicomProductRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateAlicomProductRequest) SetResourceOwnerId(v int64) *CreateAlicomProductRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateAlicomProductResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateAlicomProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAlicomProductResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAlicomProductResponseBody) SetRequestId(v string) *CreateAlicomProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAlicomProductResponseBody) SetCode(v string) *CreateAlicomProductResponseBody {
	s.Code = &v
	return s
}

func (s *CreateAlicomProductResponseBody) SetData(v string) *CreateAlicomProductResponseBody {
	s.Data = &v
	return s
}

type CreateAlicomProductResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAlicomProductResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAlicomProductResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAlicomProductResponse) GoString() string {
	return s.String()
}

func (s *CreateAlicomProductResponse) SetHeaders(v map[string]*string) *CreateAlicomProductResponse {
	s.Headers = v
	return s
}

func (s *CreateAlicomProductResponse) SetStatusCode(v int32) *CreateAlicomProductResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAlicomProductResponse) SetBody(v *CreateAlicomProductResponseBody) *CreateAlicomProductResponse {
	s.Body = v
	return s
}

type CreateAuthorizationRequest struct {
	AuthorizeCode        *string `json:"AuthorizeCode,omitempty" xml:"AuthorizeCode,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *CreateAuthorizationRequest) SetAuthorizeCode(v string) *CreateAuthorizationRequest {
	s.AuthorizeCode = &v
	return s
}

func (s *CreateAuthorizationRequest) SetOwnerId(v int64) *CreateAuthorizationRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateAuthorizationRequest) SetResourceOwnerAccount(v string) *CreateAuthorizationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateAuthorizationRequest) SetResourceOwnerId(v int64) *CreateAuthorizationRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateAuthorizationResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAuthorizationResponseBody) SetCode(v string) *CreateAuthorizationResponseBody {
	s.Code = &v
	return s
}

func (s *CreateAuthorizationResponseBody) SetMessage(v string) *CreateAuthorizationResponseBody {
	s.Message = &v
	return s
}

func (s *CreateAuthorizationResponseBody) SetRequestId(v string) *CreateAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAuthorizationResponseBody) SetResult(v string) *CreateAuthorizationResponseBody {
	s.Result = &v
	return s
}

type CreateAuthorizationResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *CreateAuthorizationResponse) SetHeaders(v map[string]*string) *CreateAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *CreateAuthorizationResponse) SetStatusCode(v int32) *CreateAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAuthorizationResponse) SetBody(v *CreateAuthorizationResponseBody) *CreateAuthorizationResponse {
	s.Body = v
	return s
}

type CreateCardMessageCallbackRequest struct {
	// This parameter is required.
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// This parameter is required.
	CallbackUrl          *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateCardMessageCallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCardMessageCallbackRequest) GoString() string {
	return s.String()
}

func (s *CreateCardMessageCallbackRequest) SetBizType(v string) *CreateCardMessageCallbackRequest {
	s.BizType = &v
	return s
}

func (s *CreateCardMessageCallbackRequest) SetCallbackUrl(v string) *CreateCardMessageCallbackRequest {
	s.CallbackUrl = &v
	return s
}

func (s *CreateCardMessageCallbackRequest) SetOwnerId(v int64) *CreateCardMessageCallbackRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCardMessageCallbackRequest) SetProdCode(v string) *CreateCardMessageCallbackRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateCardMessageCallbackRequest) SetResourceOwnerAccount(v string) *CreateCardMessageCallbackRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateCardMessageCallbackRequest) SetResourceOwnerId(v int64) *CreateCardMessageCallbackRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateCardMessageCallbackResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TestFailCode *string `json:"TestFailCode,omitempty" xml:"TestFailCode,omitempty"`
	TestResponse *string `json:"TestResponse,omitempty" xml:"TestResponse,omitempty"`
	TestSuccess  *bool   `json:"TestSuccess,omitempty" xml:"TestSuccess,omitempty"`
}

func (s CreateCardMessageCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCardMessageCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCardMessageCallbackResponseBody) SetRequestId(v string) *CreateCardMessageCallbackResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCardMessageCallbackResponseBody) SetTestFailCode(v string) *CreateCardMessageCallbackResponseBody {
	s.TestFailCode = &v
	return s
}

func (s *CreateCardMessageCallbackResponseBody) SetTestResponse(v string) *CreateCardMessageCallbackResponseBody {
	s.TestResponse = &v
	return s
}

func (s *CreateCardMessageCallbackResponseBody) SetTestSuccess(v bool) *CreateCardMessageCallbackResponseBody {
	s.TestSuccess = &v
	return s
}

type CreateCardMessageCallbackResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCardMessageCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCardMessageCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCardMessageCallbackResponse) GoString() string {
	return s.String()
}

func (s *CreateCardMessageCallbackResponse) SetHeaders(v map[string]*string) *CreateCardMessageCallbackResponse {
	s.Headers = v
	return s
}

func (s *CreateCardMessageCallbackResponse) SetStatusCode(v int32) *CreateCardMessageCallbackResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCardMessageCallbackResponse) SetBody(v *CreateCardMessageCallbackResponseBody) *CreateCardMessageCallbackResponse {
	s.Body = v
	return s
}

type CreateCardMessageQueueRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	QueueType            *string `json:"QueueType,omitempty" xml:"QueueType,omitempty"`
	Region               *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateCardMessageQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCardMessageQueueRequest) GoString() string {
	return s.String()
}

func (s *CreateCardMessageQueueRequest) SetOwnerId(v int64) *CreateCardMessageQueueRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateCardMessageQueueRequest) SetProdCode(v string) *CreateCardMessageQueueRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateCardMessageQueueRequest) SetQueueType(v string) *CreateCardMessageQueueRequest {
	s.QueueType = &v
	return s
}

func (s *CreateCardMessageQueueRequest) SetRegion(v string) *CreateCardMessageQueueRequest {
	s.Region = &v
	return s
}

func (s *CreateCardMessageQueueRequest) SetResourceOwnerAccount(v string) *CreateCardMessageQueueRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateCardMessageQueueRequest) SetResourceOwnerId(v int64) *CreateCardMessageQueueRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateCardMessageQueueResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateCardMessageQueueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCardMessageQueueResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCardMessageQueueResponseBody) SetRequestId(v string) *CreateCardMessageQueueResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCardMessageQueueResponseBody) SetResult(v bool) *CreateCardMessageQueueResponseBody {
	s.Result = &v
	return s
}

type CreateCardMessageQueueResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCardMessageQueueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCardMessageQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCardMessageQueueResponse) GoString() string {
	return s.String()
}

func (s *CreateCardMessageQueueResponse) SetHeaders(v map[string]*string) *CreateCardMessageQueueResponse {
	s.Headers = v
	return s
}

func (s *CreateCardMessageQueueResponse) SetStatusCode(v int32) *CreateCardMessageQueueResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCardMessageQueueResponse) SetBody(v *CreateCardMessageQueueResponseBody) *CreateCardMessageQueueResponse {
	s.Body = v
	return s
}

type CreateDigitalSmsTemplateNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ContentOssKeys       *string `json:"ContentOssKeys,omitempty" xml:"ContentOssKeys,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	Remark               *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateContent      *string `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s CreateDigitalSmsTemplateNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalSmsTemplateNewRequest) GoString() string {
	return s.String()
}

func (s *CreateDigitalSmsTemplateNewRequest) SetBizType(v string) *CreateDigitalSmsTemplateNewRequest {
	s.BizType = &v
	return s
}

func (s *CreateDigitalSmsTemplateNewRequest) SetContentOssKeys(v string) *CreateDigitalSmsTemplateNewRequest {
	s.ContentOssKeys = &v
	return s
}

func (s *CreateDigitalSmsTemplateNewRequest) SetOwnerId(v int64) *CreateDigitalSmsTemplateNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDigitalSmsTemplateNewRequest) SetProdCode(v string) *CreateDigitalSmsTemplateNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateDigitalSmsTemplateNewRequest) SetRemark(v string) *CreateDigitalSmsTemplateNewRequest {
	s.Remark = &v
	return s
}

func (s *CreateDigitalSmsTemplateNewRequest) SetResourceOwnerAccount(v string) *CreateDigitalSmsTemplateNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDigitalSmsTemplateNewRequest) SetResourceOwnerId(v int64) *CreateDigitalSmsTemplateNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDigitalSmsTemplateNewRequest) SetTemplateContent(v string) *CreateDigitalSmsTemplateNewRequest {
	s.TemplateContent = &v
	return s
}

func (s *CreateDigitalSmsTemplateNewRequest) SetTemplateName(v string) *CreateDigitalSmsTemplateNewRequest {
	s.TemplateName = &v
	return s
}

type CreateDigitalSmsTemplateNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateDigitalSmsTemplateNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalSmsTemplateNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDigitalSmsTemplateNewResponseBody) SetRequestId(v string) *CreateDigitalSmsTemplateNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDigitalSmsTemplateNewResponseBody) SetResult(v string) *CreateDigitalSmsTemplateNewResponseBody {
	s.Result = &v
	return s
}

type CreateDigitalSmsTemplateNewResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDigitalSmsTemplateNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDigitalSmsTemplateNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDigitalSmsTemplateNewResponse) GoString() string {
	return s.String()
}

func (s *CreateDigitalSmsTemplateNewResponse) SetHeaders(v map[string]*string) *CreateDigitalSmsTemplateNewResponse {
	s.Headers = v
	return s
}

func (s *CreateDigitalSmsTemplateNewResponse) SetStatusCode(v int32) *CreateDigitalSmsTemplateNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDigitalSmsTemplateNewResponse) SetBody(v *CreateDigitalSmsTemplateNewResponseBody) *CreateDigitalSmsTemplateNewResponse {
	s.Body = v
	return s
}

type CreateFileByBizRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateFileByBizRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileByBizRequest) GoString() string {
	return s.String()
}

func (s *CreateFileByBizRequest) SetOwnerId(v int64) *CreateFileByBizRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateFileByBizRequest) SetProdCode(v string) *CreateFileByBizRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateFileByBizRequest) SetResourceOwnerAccount(v string) *CreateFileByBizRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateFileByBizRequest) SetResourceOwnerId(v int64) *CreateFileByBizRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateFileByBizResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateFileByBizResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFileByBizResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFileByBizResponseBody) SetRequestId(v string) *CreateFileByBizResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFileByBizResponseBody) SetCode(v string) *CreateFileByBizResponseBody {
	s.Code = &v
	return s
}

func (s *CreateFileByBizResponseBody) SetData(v string) *CreateFileByBizResponseBody {
	s.Data = &v
	return s
}

type CreateFileByBizResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFileByBizResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFileByBizResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFileByBizResponse) GoString() string {
	return s.String()
}

func (s *CreateFileByBizResponse) SetHeaders(v map[string]*string) *CreateFileByBizResponse {
	s.Headers = v
	return s
}

func (s *CreateFileByBizResponse) SetStatusCode(v int32) *CreateFileByBizResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFileByBizResponse) SetBody(v *CreateFileByBizResponseBody) *CreateFileByBizResponse {
	s.Body = v
	return s
}

type CreateFlowLimitRequest struct {
	DailyLimit           *string `json:"DailyLimit,omitempty" xml:"DailyLimit,omitempty"`
	HourLimit            *string `json:"HourLimit,omitempty" xml:"HourLimit,omitempty"`
	MinuteLimit          *string `json:"MinuteLimit,omitempty" xml:"MinuteLimit,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateFlowLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLimitRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowLimitRequest) SetDailyLimit(v string) *CreateFlowLimitRequest {
	s.DailyLimit = &v
	return s
}

func (s *CreateFlowLimitRequest) SetHourLimit(v string) *CreateFlowLimitRequest {
	s.HourLimit = &v
	return s
}

func (s *CreateFlowLimitRequest) SetMinuteLimit(v string) *CreateFlowLimitRequest {
	s.MinuteLimit = &v
	return s
}

func (s *CreateFlowLimitRequest) SetOwnerId(v int64) *CreateFlowLimitRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateFlowLimitRequest) SetProdCode(v string) *CreateFlowLimitRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateFlowLimitRequest) SetResourceOwnerAccount(v string) *CreateFlowLimitRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateFlowLimitRequest) SetResourceOwnerId(v int64) *CreateFlowLimitRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateFlowLimitResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateFlowLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLimitResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowLimitResponseBody) SetRequestId(v string) *CreateFlowLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowLimitResponseBody) SetCode(v string) *CreateFlowLimitResponseBody {
	s.Code = &v
	return s
}

func (s *CreateFlowLimitResponseBody) SetData(v string) *CreateFlowLimitResponseBody {
	s.Data = &v
	return s
}

type CreateFlowLimitResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowLimitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLimitResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowLimitResponse) SetHeaders(v map[string]*string) *CreateFlowLimitResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowLimitResponse) SetStatusCode(v int32) *CreateFlowLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowLimitResponse) SetBody(v *CreateFlowLimitResponseBody) *CreateFlowLimitResponse {
	s.Body = v
	return s
}

type CreateFlowLimitNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	DailyLimit           *string `json:"DailyLimit,omitempty" xml:"DailyLimit,omitempty"`
	HourLimit            *string `json:"HourLimit,omitempty" xml:"HourLimit,omitempty"`
	MinuteLimit          *string `json:"MinuteLimit,omitempty" xml:"MinuteLimit,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateFlowLimitNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLimitNewRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowLimitNewRequest) SetBizType(v string) *CreateFlowLimitNewRequest {
	s.BizType = &v
	return s
}

func (s *CreateFlowLimitNewRequest) SetDailyLimit(v string) *CreateFlowLimitNewRequest {
	s.DailyLimit = &v
	return s
}

func (s *CreateFlowLimitNewRequest) SetHourLimit(v string) *CreateFlowLimitNewRequest {
	s.HourLimit = &v
	return s
}

func (s *CreateFlowLimitNewRequest) SetMinuteLimit(v string) *CreateFlowLimitNewRequest {
	s.MinuteLimit = &v
	return s
}

func (s *CreateFlowLimitNewRequest) SetOwnerId(v int64) *CreateFlowLimitNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateFlowLimitNewRequest) SetProdCode(v string) *CreateFlowLimitNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateFlowLimitNewRequest) SetResourceOwnerAccount(v string) *CreateFlowLimitNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateFlowLimitNewRequest) SetResourceOwnerId(v int64) *CreateFlowLimitNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateFlowLimitNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateFlowLimitNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLimitNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowLimitNewResponseBody) SetRequestId(v string) *CreateFlowLimitNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowLimitNewResponseBody) SetResult(v bool) *CreateFlowLimitNewResponseBody {
	s.Result = &v
	return s
}

type CreateFlowLimitNewResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowLimitNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowLimitNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowLimitNewResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowLimitNewResponse) SetHeaders(v map[string]*string) *CreateFlowLimitNewResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowLimitNewResponse) SetStatusCode(v int32) *CreateFlowLimitNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowLimitNewResponse) SetBody(v *CreateFlowLimitNewResponseBody) *CreateFlowLimitNewResponse {
	s.Body = v
	return s
}

type CreateMessageCallbackNewRequest struct {
	// This parameter is required.
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// This parameter is required.
	CallbackUrl          *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateMessageCallbackNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageCallbackNewRequest) GoString() string {
	return s.String()
}

func (s *CreateMessageCallbackNewRequest) SetBizType(v string) *CreateMessageCallbackNewRequest {
	s.BizType = &v
	return s
}

func (s *CreateMessageCallbackNewRequest) SetCallbackUrl(v string) *CreateMessageCallbackNewRequest {
	s.CallbackUrl = &v
	return s
}

func (s *CreateMessageCallbackNewRequest) SetOwnerId(v int64) *CreateMessageCallbackNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateMessageCallbackNewRequest) SetProdCode(v string) *CreateMessageCallbackNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateMessageCallbackNewRequest) SetResourceOwnerAccount(v string) *CreateMessageCallbackNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateMessageCallbackNewRequest) SetResourceOwnerId(v int64) *CreateMessageCallbackNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateMessageCallbackNewResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TestFailCode *string `json:"TestFailCode,omitempty" xml:"TestFailCode,omitempty"`
	TestResponse *string `json:"TestResponse,omitempty" xml:"TestResponse,omitempty"`
	TestSuccess  *bool   `json:"TestSuccess,omitempty" xml:"TestSuccess,omitempty"`
}

func (s CreateMessageCallbackNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageCallbackNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMessageCallbackNewResponseBody) SetRequestId(v string) *CreateMessageCallbackNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMessageCallbackNewResponseBody) SetTestFailCode(v string) *CreateMessageCallbackNewResponseBody {
	s.TestFailCode = &v
	return s
}

func (s *CreateMessageCallbackNewResponseBody) SetTestResponse(v string) *CreateMessageCallbackNewResponseBody {
	s.TestResponse = &v
	return s
}

func (s *CreateMessageCallbackNewResponseBody) SetTestSuccess(v bool) *CreateMessageCallbackNewResponseBody {
	s.TestSuccess = &v
	return s
}

type CreateMessageCallbackNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMessageCallbackNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMessageCallbackNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageCallbackNewResponse) GoString() string {
	return s.String()
}

func (s *CreateMessageCallbackNewResponse) SetHeaders(v map[string]*string) *CreateMessageCallbackNewResponse {
	s.Headers = v
	return s
}

func (s *CreateMessageCallbackNewResponse) SetStatusCode(v int32) *CreateMessageCallbackNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMessageCallbackNewResponse) SetBody(v *CreateMessageCallbackNewResponseBody) *CreateMessageCallbackNewResponse {
	s.Body = v
	return s
}

type CreateMessageCallbackTestNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	Content              *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Method               *string `json:"Method,omitempty" xml:"Method,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Url                  *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s CreateMessageCallbackTestNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageCallbackTestNewRequest) GoString() string {
	return s.String()
}

func (s *CreateMessageCallbackTestNewRequest) SetBizType(v string) *CreateMessageCallbackTestNewRequest {
	s.BizType = &v
	return s
}

func (s *CreateMessageCallbackTestNewRequest) SetContent(v string) *CreateMessageCallbackTestNewRequest {
	s.Content = &v
	return s
}

func (s *CreateMessageCallbackTestNewRequest) SetMethod(v string) *CreateMessageCallbackTestNewRequest {
	s.Method = &v
	return s
}

func (s *CreateMessageCallbackTestNewRequest) SetOwnerId(v int64) *CreateMessageCallbackTestNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateMessageCallbackTestNewRequest) SetProdCode(v string) *CreateMessageCallbackTestNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateMessageCallbackTestNewRequest) SetResourceOwnerAccount(v string) *CreateMessageCallbackTestNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateMessageCallbackTestNewRequest) SetResourceOwnerId(v int64) *CreateMessageCallbackTestNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateMessageCallbackTestNewRequest) SetUrl(v string) *CreateMessageCallbackTestNewRequest {
	s.Url = &v
	return s
}

type CreateMessageCallbackTestNewResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TestFailCode *string `json:"TestFailCode,omitempty" xml:"TestFailCode,omitempty"`
	TestResponse *string `json:"TestResponse,omitempty" xml:"TestResponse,omitempty"`
	TestSuccess  *bool   `json:"TestSuccess,omitempty" xml:"TestSuccess,omitempty"`
}

func (s CreateMessageCallbackTestNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageCallbackTestNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMessageCallbackTestNewResponseBody) SetRequestId(v string) *CreateMessageCallbackTestNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMessageCallbackTestNewResponseBody) SetTestFailCode(v string) *CreateMessageCallbackTestNewResponseBody {
	s.TestFailCode = &v
	return s
}

func (s *CreateMessageCallbackTestNewResponseBody) SetTestResponse(v string) *CreateMessageCallbackTestNewResponseBody {
	s.TestResponse = &v
	return s
}

func (s *CreateMessageCallbackTestNewResponseBody) SetTestSuccess(v bool) *CreateMessageCallbackTestNewResponseBody {
	s.TestSuccess = &v
	return s
}

type CreateMessageCallbackTestNewResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMessageCallbackTestNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMessageCallbackTestNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageCallbackTestNewResponse) GoString() string {
	return s.String()
}

func (s *CreateMessageCallbackTestNewResponse) SetHeaders(v map[string]*string) *CreateMessageCallbackTestNewResponse {
	s.Headers = v
	return s
}

func (s *CreateMessageCallbackTestNewResponse) SetStatusCode(v int32) *CreateMessageCallbackTestNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMessageCallbackTestNewResponse) SetBody(v *CreateMessageCallbackTestNewResponseBody) *CreateMessageCallbackTestNewResponse {
	s.Body = v
	return s
}

type CreateMessageQueueNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	QueueType            *string `json:"QueueType,omitempty" xml:"QueueType,omitempty"`
	Region               *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateMessageQueueNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageQueueNewRequest) GoString() string {
	return s.String()
}

func (s *CreateMessageQueueNewRequest) SetOwnerId(v int64) *CreateMessageQueueNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateMessageQueueNewRequest) SetProdCode(v string) *CreateMessageQueueNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateMessageQueueNewRequest) SetQueueType(v string) *CreateMessageQueueNewRequest {
	s.QueueType = &v
	return s
}

func (s *CreateMessageQueueNewRequest) SetRegion(v string) *CreateMessageQueueNewRequest {
	s.Region = &v
	return s
}

func (s *CreateMessageQueueNewRequest) SetResourceOwnerAccount(v string) *CreateMessageQueueNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateMessageQueueNewRequest) SetResourceOwnerId(v int64) *CreateMessageQueueNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateMessageQueueNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateMessageQueueNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageQueueNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMessageQueueNewResponseBody) SetRequestId(v string) *CreateMessageQueueNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMessageQueueNewResponseBody) SetResult(v bool) *CreateMessageQueueNewResponseBody {
	s.Result = &v
	return s
}

type CreateMessageQueueNewResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMessageQueueNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMessageQueueNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageQueueNewResponse) GoString() string {
	return s.String()
}

func (s *CreateMessageQueueNewResponse) SetHeaders(v map[string]*string) *CreateMessageQueueNewResponse {
	s.Headers = v
	return s
}

func (s *CreateMessageQueueNewResponse) SetStatusCode(v int32) *CreateMessageQueueNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMessageQueueNewResponse) SetBody(v *CreateMessageQueueNewResponseBody) *CreateMessageQueueNewResponse {
	s.Body = v
	return s
}

type CreatePhoneWhiteListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PhoneNumbers         *string `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreatePhoneWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePhoneWhiteListRequest) GoString() string {
	return s.String()
}

func (s *CreatePhoneWhiteListRequest) SetOwnerId(v int64) *CreatePhoneWhiteListRequest {
	s.OwnerId = &v
	return s
}

func (s *CreatePhoneWhiteListRequest) SetPhoneNumbers(v string) *CreatePhoneWhiteListRequest {
	s.PhoneNumbers = &v
	return s
}

func (s *CreatePhoneWhiteListRequest) SetProdCode(v string) *CreatePhoneWhiteListRequest {
	s.ProdCode = &v
	return s
}

func (s *CreatePhoneWhiteListRequest) SetResourceOwnerAccount(v string) *CreatePhoneWhiteListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreatePhoneWhiteListRequest) SetResourceOwnerId(v int64) *CreatePhoneWhiteListRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreatePhoneWhiteListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreatePhoneWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePhoneWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePhoneWhiteListResponseBody) SetRequestId(v string) *CreatePhoneWhiteListResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePhoneWhiteListResponseBody) SetCode(v string) *CreatePhoneWhiteListResponseBody {
	s.Code = &v
	return s
}

func (s *CreatePhoneWhiteListResponseBody) SetData(v string) *CreatePhoneWhiteListResponseBody {
	s.Data = &v
	return s
}

type CreatePhoneWhiteListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePhoneWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePhoneWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePhoneWhiteListResponse) GoString() string {
	return s.String()
}

func (s *CreatePhoneWhiteListResponse) SetHeaders(v map[string]*string) *CreatePhoneWhiteListResponse {
	s.Headers = v
	return s
}

func (s *CreatePhoneWhiteListResponse) SetStatusCode(v int32) *CreatePhoneWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePhoneWhiteListResponse) SetBody(v *CreatePhoneWhiteListResponseBody) *CreatePhoneWhiteListResponse {
	s.Body = v
	return s
}

type CreatePhoneWhiteListNewRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PhoneNumbers         *string   `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty"`
	ProdCode             *string   `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	Remarks              []*string `json:"Remarks,omitempty" xml:"Remarks,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreatePhoneWhiteListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePhoneWhiteListNewRequest) GoString() string {
	return s.String()
}

func (s *CreatePhoneWhiteListNewRequest) SetOwnerId(v int64) *CreatePhoneWhiteListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreatePhoneWhiteListNewRequest) SetPhoneNumbers(v string) *CreatePhoneWhiteListNewRequest {
	s.PhoneNumbers = &v
	return s
}

func (s *CreatePhoneWhiteListNewRequest) SetProdCode(v string) *CreatePhoneWhiteListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreatePhoneWhiteListNewRequest) SetRemarks(v []*string) *CreatePhoneWhiteListNewRequest {
	s.Remarks = v
	return s
}

func (s *CreatePhoneWhiteListNewRequest) SetResourceOwnerAccount(v string) *CreatePhoneWhiteListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreatePhoneWhiteListNewRequest) SetResourceOwnerId(v int64) *CreatePhoneWhiteListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreatePhoneWhiteListNewShrinkRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PhoneNumbers         *string `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	RemarksShrink        *string `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreatePhoneWhiteListNewShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePhoneWhiteListNewShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreatePhoneWhiteListNewShrinkRequest) SetOwnerId(v int64) *CreatePhoneWhiteListNewShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *CreatePhoneWhiteListNewShrinkRequest) SetPhoneNumbers(v string) *CreatePhoneWhiteListNewShrinkRequest {
	s.PhoneNumbers = &v
	return s
}

func (s *CreatePhoneWhiteListNewShrinkRequest) SetProdCode(v string) *CreatePhoneWhiteListNewShrinkRequest {
	s.ProdCode = &v
	return s
}

func (s *CreatePhoneWhiteListNewShrinkRequest) SetRemarksShrink(v string) *CreatePhoneWhiteListNewShrinkRequest {
	s.RemarksShrink = &v
	return s
}

func (s *CreatePhoneWhiteListNewShrinkRequest) SetResourceOwnerAccount(v string) *CreatePhoneWhiteListNewShrinkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreatePhoneWhiteListNewShrinkRequest) SetResourceOwnerId(v int64) *CreatePhoneWhiteListNewShrinkRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreatePhoneWhiteListNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreatePhoneWhiteListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePhoneWhiteListNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePhoneWhiteListNewResponseBody) SetRequestId(v string) *CreatePhoneWhiteListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePhoneWhiteListNewResponseBody) SetResult(v bool) *CreatePhoneWhiteListNewResponseBody {
	s.Result = &v
	return s
}

type CreatePhoneWhiteListNewResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePhoneWhiteListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePhoneWhiteListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePhoneWhiteListNewResponse) GoString() string {
	return s.String()
}

func (s *CreatePhoneWhiteListNewResponse) SetHeaders(v map[string]*string) *CreatePhoneWhiteListNewResponse {
	s.Headers = v
	return s
}

func (s *CreatePhoneWhiteListNewResponse) SetStatusCode(v int32) *CreatePhoneWhiteListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePhoneWhiteListNewResponse) SetBody(v *CreatePhoneWhiteListNewResponseBody) *CreatePhoneWhiteListNewResponse {
	s.Body = v
	return s
}

type CreatePkgThresholdRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PackageWarningLimit  *string `json:"PackageWarningLimit,omitempty" xml:"PackageWarningLimit,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreatePkgThresholdRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePkgThresholdRequest) GoString() string {
	return s.String()
}

func (s *CreatePkgThresholdRequest) SetOwnerId(v int64) *CreatePkgThresholdRequest {
	s.OwnerId = &v
	return s
}

func (s *CreatePkgThresholdRequest) SetPackageWarningLimit(v string) *CreatePkgThresholdRequest {
	s.PackageWarningLimit = &v
	return s
}

func (s *CreatePkgThresholdRequest) SetProdCode(v string) *CreatePkgThresholdRequest {
	s.ProdCode = &v
	return s
}

func (s *CreatePkgThresholdRequest) SetResourceOwnerAccount(v string) *CreatePkgThresholdRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreatePkgThresholdRequest) SetResourceOwnerId(v int64) *CreatePkgThresholdRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreatePkgThresholdResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreatePkgThresholdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePkgThresholdResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePkgThresholdResponseBody) SetRequestId(v string) *CreatePkgThresholdResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePkgThresholdResponseBody) SetCode(v string) *CreatePkgThresholdResponseBody {
	s.Code = &v
	return s
}

func (s *CreatePkgThresholdResponseBody) SetData(v string) *CreatePkgThresholdResponseBody {
	s.Data = &v
	return s
}

type CreatePkgThresholdResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePkgThresholdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePkgThresholdResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePkgThresholdResponse) GoString() string {
	return s.String()
}

func (s *CreatePkgThresholdResponse) SetHeaders(v map[string]*string) *CreatePkgThresholdResponse {
	s.Headers = v
	return s
}

func (s *CreatePkgThresholdResponse) SetStatusCode(v int32) *CreatePkgThresholdResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePkgThresholdResponse) SetBody(v *CreatePkgThresholdResponseBody) *CreatePkgThresholdResponse {
	s.Body = v
	return s
}

type CreatePkgThresholdNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PackageWarningLimit  *string `json:"PackageWarningLimit,omitempty" xml:"PackageWarningLimit,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreatePkgThresholdNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePkgThresholdNewRequest) GoString() string {
	return s.String()
}

func (s *CreatePkgThresholdNewRequest) SetOwnerId(v int64) *CreatePkgThresholdNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreatePkgThresholdNewRequest) SetPackageWarningLimit(v string) *CreatePkgThresholdNewRequest {
	s.PackageWarningLimit = &v
	return s
}

func (s *CreatePkgThresholdNewRequest) SetProdCode(v string) *CreatePkgThresholdNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreatePkgThresholdNewRequest) SetResourceOwnerAccount(v string) *CreatePkgThresholdNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreatePkgThresholdNewRequest) SetResourceOwnerId(v int64) *CreatePkgThresholdNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreatePkgThresholdNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreatePkgThresholdNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePkgThresholdNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePkgThresholdNewResponseBody) SetRequestId(v string) *CreatePkgThresholdNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePkgThresholdNewResponseBody) SetResult(v string) *CreatePkgThresholdNewResponseBody {
	s.Result = &v
	return s
}

type CreatePkgThresholdNewResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePkgThresholdNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePkgThresholdNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePkgThresholdNewResponse) GoString() string {
	return s.String()
}

func (s *CreatePkgThresholdNewResponse) SetHeaders(v map[string]*string) *CreatePkgThresholdNewResponse {
	s.Headers = v
	return s
}

func (s *CreatePkgThresholdNewResponse) SetStatusCode(v int32) *CreatePkgThresholdNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePkgThresholdNewResponse) SetBody(v *CreatePkgThresholdNewResponseBody) *CreatePkgThresholdNewResponse {
	s.Body = v
	return s
}

type CreatePrevLimitNewRequest struct {
	// This parameter is required.
	HourLimit *int64 `json:"HourLimit,omitempty" xml:"HourLimit,omitempty"`
	// This parameter is required.
	IncreaseRate         *int32  `json:"IncreaseRate,omitempty" xml:"IncreaseRate,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	SuccessRate *int32 `json:"SuccessRate,omitempty" xml:"SuccessRate,omitempty"`
}

func (s CreatePrevLimitNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePrevLimitNewRequest) GoString() string {
	return s.String()
}

func (s *CreatePrevLimitNewRequest) SetHourLimit(v int64) *CreatePrevLimitNewRequest {
	s.HourLimit = &v
	return s
}

func (s *CreatePrevLimitNewRequest) SetIncreaseRate(v int32) *CreatePrevLimitNewRequest {
	s.IncreaseRate = &v
	return s
}

func (s *CreatePrevLimitNewRequest) SetOwnerId(v int64) *CreatePrevLimitNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreatePrevLimitNewRequest) SetProdCode(v string) *CreatePrevLimitNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreatePrevLimitNewRequest) SetResourceOwnerAccount(v string) *CreatePrevLimitNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreatePrevLimitNewRequest) SetResourceOwnerId(v int64) *CreatePrevLimitNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreatePrevLimitNewRequest) SetSuccessRate(v int32) *CreatePrevLimitNewRequest {
	s.SuccessRate = &v
	return s
}

type CreatePrevLimitNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreatePrevLimitNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePrevLimitNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePrevLimitNewResponseBody) SetRequestId(v string) *CreatePrevLimitNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePrevLimitNewResponseBody) SetResult(v bool) *CreatePrevLimitNewResponseBody {
	s.Result = &v
	return s
}

type CreatePrevLimitNewResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePrevLimitNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePrevLimitNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePrevLimitNewResponse) GoString() string {
	return s.String()
}

func (s *CreatePrevLimitNewResponse) SetHeaders(v map[string]*string) *CreatePrevLimitNewResponse {
	s.Headers = v
	return s
}

func (s *CreatePrevLimitNewResponse) SetStatusCode(v int32) *CreatePrevLimitNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePrevLimitNewResponse) SetBody(v *CreatePrevLimitNewResponseBody) *CreatePrevLimitNewResponse {
	s.Body = v
	return s
}

type CreateProductRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateProductRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProductRequest) GoString() string {
	return s.String()
}

func (s *CreateProductRequest) SetOwnerId(v int64) *CreateProductRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateProductRequest) SetProdCode(v string) *CreateProductRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateProductRequest) SetProdId(v string) *CreateProductRequest {
	s.ProdId = &v
	return s
}

func (s *CreateProductRequest) SetResourceOwnerAccount(v string) *CreateProductRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateProductRequest) SetResourceOwnerId(v int64) *CreateProductRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateProductResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProductResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProductResponseBody) SetRequestId(v string) *CreateProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateProductResponseBody) SetCode(v string) *CreateProductResponseBody {
	s.Code = &v
	return s
}

func (s *CreateProductResponseBody) SetData(v bool) *CreateProductResponseBody {
	s.Data = &v
	return s
}

type CreateProductResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateProductResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateProductResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProductResponse) GoString() string {
	return s.String()
}

func (s *CreateProductResponse) SetHeaders(v map[string]*string) *CreateProductResponse {
	s.Headers = v
	return s
}

func (s *CreateProductResponse) SetStatusCode(v int32) *CreateProductResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProductResponse) SetBody(v *CreateProductResponseBody) *CreateProductResponse {
	s.Body = v
	return s
}

type CreateProductNewRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateProductNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateProductNewRequest) GoString() string {
	return s.String()
}

func (s *CreateProductNewRequest) SetOwnerId(v int64) *CreateProductNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateProductNewRequest) SetProdCode(v string) *CreateProductNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateProductNewRequest) SetProdId(v string) *CreateProductNewRequest {
	s.ProdId = &v
	return s
}

func (s *CreateProductNewRequest) SetResourceOwnerAccount(v string) *CreateProductNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateProductNewRequest) SetResourceOwnerId(v int64) *CreateProductNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateProductNewResponseBody struct {
	OpenResult *bool   `json:"OpenResult,omitempty" xml:"OpenResult,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateProductNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateProductNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateProductNewResponseBody) SetOpenResult(v bool) *CreateProductNewResponseBody {
	s.OpenResult = &v
	return s
}

func (s *CreateProductNewResponseBody) SetRequestId(v string) *CreateProductNewResponseBody {
	s.RequestId = &v
	return s
}

type CreateProductNewResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateProductNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateProductNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateProductNewResponse) GoString() string {
	return s.String()
}

func (s *CreateProductNewResponse) SetHeaders(v map[string]*string) *CreateProductNewResponse {
	s.Headers = v
	return s
}

func (s *CreateProductNewResponse) SetStatusCode(v int32) *CreateProductNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateProductNewResponse) SetBody(v *CreateProductNewResponseBody) *CreateProductNewResponse {
	s.Body = v
	return s
}

type CreateShortUrlNewRequest struct {
	EffectDay            *int32  `json:"EffectDay,omitempty" xml:"EffectDay,omitempty"`
	EventName            *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SourceUrl            *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
}

func (s CreateShortUrlNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateShortUrlNewRequest) GoString() string {
	return s.String()
}

func (s *CreateShortUrlNewRequest) SetEffectDay(v int32) *CreateShortUrlNewRequest {
	s.EffectDay = &v
	return s
}

func (s *CreateShortUrlNewRequest) SetEventName(v string) *CreateShortUrlNewRequest {
	s.EventName = &v
	return s
}

func (s *CreateShortUrlNewRequest) SetOwnerId(v int64) *CreateShortUrlNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateShortUrlNewRequest) SetProdCode(v string) *CreateShortUrlNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateShortUrlNewRequest) SetResourceOwnerAccount(v string) *CreateShortUrlNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateShortUrlNewRequest) SetResourceOwnerId(v int64) *CreateShortUrlNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateShortUrlNewRequest) SetSourceUrl(v string) *CreateShortUrlNewRequest {
	s.SourceUrl = &v
	return s
}

type CreateShortUrlNewResponseBody struct {
	EventName      *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	GmtCreateTime  *string `json:"GmtCreateTime,omitempty" xml:"GmtCreateTime,omitempty"`
	GmtInvalidTime *string `json:"GmtInvalidTime,omitempty" xml:"GmtInvalidTime,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ShortUrl       *string `json:"ShortUrl,omitempty" xml:"ShortUrl,omitempty"`
	SourceUrl      *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
}

func (s CreateShortUrlNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateShortUrlNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateShortUrlNewResponseBody) SetEventName(v string) *CreateShortUrlNewResponseBody {
	s.EventName = &v
	return s
}

func (s *CreateShortUrlNewResponseBody) SetGmtCreateTime(v string) *CreateShortUrlNewResponseBody {
	s.GmtCreateTime = &v
	return s
}

func (s *CreateShortUrlNewResponseBody) SetGmtInvalidTime(v string) *CreateShortUrlNewResponseBody {
	s.GmtInvalidTime = &v
	return s
}

func (s *CreateShortUrlNewResponseBody) SetId(v string) *CreateShortUrlNewResponseBody {
	s.Id = &v
	return s
}

func (s *CreateShortUrlNewResponseBody) SetRequestId(v string) *CreateShortUrlNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateShortUrlNewResponseBody) SetShortUrl(v string) *CreateShortUrlNewResponseBody {
	s.ShortUrl = &v
	return s
}

func (s *CreateShortUrlNewResponseBody) SetSourceUrl(v string) *CreateShortUrlNewResponseBody {
	s.SourceUrl = &v
	return s
}

type CreateShortUrlNewResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateShortUrlNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateShortUrlNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateShortUrlNewResponse) GoString() string {
	return s.String()
}

func (s *CreateShortUrlNewResponse) SetHeaders(v map[string]*string) *CreateShortUrlNewResponse {
	s.Headers = v
	return s
}

func (s *CreateShortUrlNewResponse) SetStatusCode(v int32) *CreateShortUrlNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateShortUrlNewResponse) SetBody(v *CreateShortUrlNewResponseBody) *CreateShortUrlNewResponse {
	s.Body = v
	return s
}

type CreateSmsDetectTaskNewRequest struct {
	// This parameter is required.
	Check                *bool   `json:"Check,omitempty" xml:"Check,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	SignName *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	// This parameter is required.
	SmsContent *string `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	// This parameter is required.
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	// This parameter is required.
	TemplateParam *string `json:"TemplateParam,omitempty" xml:"TemplateParam,omitempty"`
}

func (s CreateSmsDetectTaskNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsDetectTaskNewRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsDetectTaskNewRequest) SetCheck(v bool) *CreateSmsDetectTaskNewRequest {
	s.Check = &v
	return s
}

func (s *CreateSmsDetectTaskNewRequest) SetOwnerId(v int64) *CreateSmsDetectTaskNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsDetectTaskNewRequest) SetProdCode(v string) *CreateSmsDetectTaskNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsDetectTaskNewRequest) SetResourceOwnerAccount(v string) *CreateSmsDetectTaskNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsDetectTaskNewRequest) SetResourceOwnerId(v int64) *CreateSmsDetectTaskNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmsDetectTaskNewRequest) SetSignName(v string) *CreateSmsDetectTaskNewRequest {
	s.SignName = &v
	return s
}

func (s *CreateSmsDetectTaskNewRequest) SetSmsContent(v string) *CreateSmsDetectTaskNewRequest {
	s.SmsContent = &v
	return s
}

func (s *CreateSmsDetectTaskNewRequest) SetTemplateCode(v string) *CreateSmsDetectTaskNewRequest {
	s.TemplateCode = &v
	return s
}

func (s *CreateSmsDetectTaskNewRequest) SetTemplateParam(v string) *CreateSmsDetectTaskNewRequest {
	s.TemplateParam = &v
	return s
}

type CreateSmsDetectTaskNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateSmsDetectTaskNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsDetectTaskNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmsDetectTaskNewResponseBody) SetRequestId(v string) *CreateSmsDetectTaskNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmsDetectTaskNewResponseBody) SetResult(v bool) *CreateSmsDetectTaskNewResponseBody {
	s.Result = &v
	return s
}

type CreateSmsDetectTaskNewResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSmsDetectTaskNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSmsDetectTaskNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsDetectTaskNewResponse) GoString() string {
	return s.String()
}

func (s *CreateSmsDetectTaskNewResponse) SetHeaders(v map[string]*string) *CreateSmsDetectTaskNewResponse {
	s.Headers = v
	return s
}

func (s *CreateSmsDetectTaskNewResponse) SetStatusCode(v int32) *CreateSmsDetectTaskNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmsDetectTaskNewResponse) SetBody(v *CreateSmsDetectTaskNewResponseBody) *CreateSmsDetectTaskNewResponse {
	s.Body = v
	return s
}

type CreateSmsInternalApplyRequest struct {
	AppDownloadLink      *string `json:"AppDownloadLink,omitempty" xml:"AppDownloadLink,omitempty"`
	Country              *string `json:"Country,omitempty" xml:"Country,omitempty"`
	Industry             *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageLink             *string `json:"PageLink,omitempty" xml:"PageLink,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	Remark               *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s CreateSmsInternalApplyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsInternalApplyRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsInternalApplyRequest) SetAppDownloadLink(v string) *CreateSmsInternalApplyRequest {
	s.AppDownloadLink = &v
	return s
}

func (s *CreateSmsInternalApplyRequest) SetCountry(v string) *CreateSmsInternalApplyRequest {
	s.Country = &v
	return s
}

func (s *CreateSmsInternalApplyRequest) SetIndustry(v string) *CreateSmsInternalApplyRequest {
	s.Industry = &v
	return s
}

func (s *CreateSmsInternalApplyRequest) SetOwnerId(v int64) *CreateSmsInternalApplyRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsInternalApplyRequest) SetPageLink(v string) *CreateSmsInternalApplyRequest {
	s.PageLink = &v
	return s
}

func (s *CreateSmsInternalApplyRequest) SetProdCode(v string) *CreateSmsInternalApplyRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsInternalApplyRequest) SetRemark(v string) *CreateSmsInternalApplyRequest {
	s.Remark = &v
	return s
}

func (s *CreateSmsInternalApplyRequest) SetResourceOwnerAccount(v string) *CreateSmsInternalApplyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsInternalApplyRequest) SetResourceOwnerId(v int64) *CreateSmsInternalApplyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmsInternalApplyRequest) SetTemplateName(v string) *CreateSmsInternalApplyRequest {
	s.TemplateName = &v
	return s
}

type CreateSmsInternalApplyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSmsInternalApplyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsInternalApplyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmsInternalApplyResponseBody) SetRequestId(v string) *CreateSmsInternalApplyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmsInternalApplyResponseBody) SetCode(v string) *CreateSmsInternalApplyResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSmsInternalApplyResponseBody) SetData(v string) *CreateSmsInternalApplyResponseBody {
	s.Data = &v
	return s
}

type CreateSmsInternalApplyResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSmsInternalApplyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSmsInternalApplyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsInternalApplyResponse) GoString() string {
	return s.String()
}

func (s *CreateSmsInternalApplyResponse) SetHeaders(v map[string]*string) *CreateSmsInternalApplyResponse {
	s.Headers = v
	return s
}

func (s *CreateSmsInternalApplyResponse) SetStatusCode(v int32) *CreateSmsInternalApplyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmsInternalApplyResponse) SetBody(v *CreateSmsInternalApplyResponseBody) *CreateSmsInternalApplyResponse {
	s.Body = v
	return s
}

type CreateSmsProductForChannelCustRequest struct {
	ChannelId            *int32  `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	OnlyCheckOpened      *bool   `json:"OnlyCheckOpened,omitempty" xml:"OnlyCheckOpened,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateSmsProductForChannelCustRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsProductForChannelCustRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsProductForChannelCustRequest) SetChannelId(v int32) *CreateSmsProductForChannelCustRequest {
	s.ChannelId = &v
	return s
}

func (s *CreateSmsProductForChannelCustRequest) SetOnlyCheckOpened(v bool) *CreateSmsProductForChannelCustRequest {
	s.OnlyCheckOpened = &v
	return s
}

func (s *CreateSmsProductForChannelCustRequest) SetOwnerId(v int64) *CreateSmsProductForChannelCustRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsProductForChannelCustRequest) SetProdCode(v string) *CreateSmsProductForChannelCustRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsProductForChannelCustRequest) SetResourceOwnerAccount(v string) *CreateSmsProductForChannelCustRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsProductForChannelCustRequest) SetResourceOwnerId(v int64) *CreateSmsProductForChannelCustRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateSmsProductForChannelCustResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSmsProductForChannelCustResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsProductForChannelCustResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmsProductForChannelCustResponseBody) SetRequestId(v string) *CreateSmsProductForChannelCustResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmsProductForChannelCustResponseBody) SetCode(v string) *CreateSmsProductForChannelCustResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSmsProductForChannelCustResponseBody) SetData(v string) *CreateSmsProductForChannelCustResponseBody {
	s.Data = &v
	return s
}

type CreateSmsProductForChannelCustResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSmsProductForChannelCustResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSmsProductForChannelCustResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsProductForChannelCustResponse) GoString() string {
	return s.String()
}

func (s *CreateSmsProductForChannelCustResponse) SetHeaders(v map[string]*string) *CreateSmsProductForChannelCustResponse {
	s.Headers = v
	return s
}

func (s *CreateSmsProductForChannelCustResponse) SetStatusCode(v int32) *CreateSmsProductForChannelCustResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmsProductForChannelCustResponse) SetBody(v *CreateSmsProductForChannelCustResponseBody) *CreateSmsProductForChannelCustResponse {
	s.Body = v
	return s
}

type CreateSmsSaasTaskRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ClientIp             *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	DataType             *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	OrderTime            *string `json:"OrderTime,omitempty" xml:"OrderTime,omitempty"`
	OssFileName          *string `json:"OssFileName,omitempty" xml:"OssFileName,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PhoneList            *string `json:"PhoneList,omitempty" xml:"PhoneList,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScheduleType         *string `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SmsContent           *string `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	SmsTemplateCode      *string `json:"SmsTemplateCode,omitempty" xml:"SmsTemplateCode,omitempty"`
	TaskName             *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	ValidCount           *string `json:"ValidCount,omitempty" xml:"ValidCount,omitempty"`
}

func (s CreateSmsSaasTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSaasTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsSaasTaskRequest) SetBizType(v string) *CreateSmsSaasTaskRequest {
	s.BizType = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetClientIp(v string) *CreateSmsSaasTaskRequest {
	s.ClientIp = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetDataType(v string) *CreateSmsSaasTaskRequest {
	s.DataType = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetOrderTime(v string) *CreateSmsSaasTaskRequest {
	s.OrderTime = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetOssFileName(v string) *CreateSmsSaasTaskRequest {
	s.OssFileName = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetOwnerId(v int64) *CreateSmsSaasTaskRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetPhoneList(v string) *CreateSmsSaasTaskRequest {
	s.PhoneList = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetProdCode(v string) *CreateSmsSaasTaskRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetResourceOwnerAccount(v string) *CreateSmsSaasTaskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetResourceOwnerId(v int64) *CreateSmsSaasTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetScheduleType(v string) *CreateSmsSaasTaskRequest {
	s.ScheduleType = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetSignName(v string) *CreateSmsSaasTaskRequest {
	s.SignName = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetSmsContent(v string) *CreateSmsSaasTaskRequest {
	s.SmsContent = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetSmsTemplateCode(v string) *CreateSmsSaasTaskRequest {
	s.SmsTemplateCode = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetTaskName(v string) *CreateSmsSaasTaskRequest {
	s.TaskName = &v
	return s
}

func (s *CreateSmsSaasTaskRequest) SetValidCount(v string) *CreateSmsSaasTaskRequest {
	s.ValidCount = &v
	return s
}

type CreateSmsSaasTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSmsSaasTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSaasTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmsSaasTaskResponseBody) SetRequestId(v string) *CreateSmsSaasTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmsSaasTaskResponseBody) SetCode(v string) *CreateSmsSaasTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSmsSaasTaskResponseBody) SetData(v string) *CreateSmsSaasTaskResponseBody {
	s.Data = &v
	return s
}

type CreateSmsSaasTaskResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSmsSaasTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSmsSaasTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSaasTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateSmsSaasTaskResponse) SetHeaders(v map[string]*string) *CreateSmsSaasTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateSmsSaasTaskResponse) SetStatusCode(v int32) *CreateSmsSaasTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmsSaasTaskResponse) SetBody(v *CreateSmsSaasTaskResponseBody) *CreateSmsSaasTaskResponse {
	s.Body = v
	return s
}

type CreateSmsSaasTaskNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	DataAbilityTaskId    *string `json:"DataAbilityTaskId,omitempty" xml:"DataAbilityTaskId,omitempty"`
	DataType             *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	OrderTime            *string `json:"OrderTime,omitempty" xml:"OrderTime,omitempty"`
	OssFileName          *string `json:"OssFileName,omitempty" xml:"OssFileName,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PhoneList            *string `json:"PhoneList,omitempty" xml:"PhoneList,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScheduleType         *string `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SmsContent           *string `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	SmsTemplateCode      *string `json:"SmsTemplateCode,omitempty" xml:"SmsTemplateCode,omitempty"`
	TaskName             *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	ValidCount           *string `json:"ValidCount,omitempty" xml:"ValidCount,omitempty"`
}

func (s CreateSmsSaasTaskNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSaasTaskNewRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsSaasTaskNewRequest) SetBizType(v string) *CreateSmsSaasTaskNewRequest {
	s.BizType = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetDataAbilityTaskId(v string) *CreateSmsSaasTaskNewRequest {
	s.DataAbilityTaskId = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetDataType(v string) *CreateSmsSaasTaskNewRequest {
	s.DataType = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetOrderTime(v string) *CreateSmsSaasTaskNewRequest {
	s.OrderTime = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetOssFileName(v string) *CreateSmsSaasTaskNewRequest {
	s.OssFileName = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetOwnerId(v int64) *CreateSmsSaasTaskNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetPhoneList(v string) *CreateSmsSaasTaskNewRequest {
	s.PhoneList = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetProdCode(v string) *CreateSmsSaasTaskNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetResourceOwnerAccount(v string) *CreateSmsSaasTaskNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetResourceOwnerId(v int64) *CreateSmsSaasTaskNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetScheduleType(v string) *CreateSmsSaasTaskNewRequest {
	s.ScheduleType = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetSignName(v string) *CreateSmsSaasTaskNewRequest {
	s.SignName = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetSmsContent(v string) *CreateSmsSaasTaskNewRequest {
	s.SmsContent = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetSmsTemplateCode(v string) *CreateSmsSaasTaskNewRequest {
	s.SmsTemplateCode = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetTaskName(v string) *CreateSmsSaasTaskNewRequest {
	s.TaskName = &v
	return s
}

func (s *CreateSmsSaasTaskNewRequest) SetValidCount(v string) *CreateSmsSaasTaskNewRequest {
	s.ValidCount = &v
	return s
}

type CreateSmsSaasTaskNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSmsSaasTaskNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSaasTaskNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmsSaasTaskNewResponseBody) SetRequestId(v string) *CreateSmsSaasTaskNewResponseBody {
	s.RequestId = &v
	return s
}

type CreateSmsSaasTaskNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSmsSaasTaskNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSmsSaasTaskNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSaasTaskNewResponse) GoString() string {
	return s.String()
}

func (s *CreateSmsSaasTaskNewResponse) SetHeaders(v map[string]*string) *CreateSmsSaasTaskNewResponse {
	s.Headers = v
	return s
}

func (s *CreateSmsSaasTaskNewResponse) SetStatusCode(v int32) *CreateSmsSaasTaskNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmsSaasTaskNewResponse) SetBody(v *CreateSmsSaasTaskNewResponseBody) *CreateSmsSaasTaskNewResponse {
	s.Body = v
	return s
}

type CreateSmsSendFailDetailsDownloadRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SendDate             *string `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
}

func (s CreateSmsSendFailDetailsDownloadRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSendFailDetailsDownloadRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsSendFailDetailsDownloadRequest) SetOwnerId(v int64) *CreateSmsSendFailDetailsDownloadRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsSendFailDetailsDownloadRequest) SetProdCode(v string) *CreateSmsSendFailDetailsDownloadRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsSendFailDetailsDownloadRequest) SetProdId(v string) *CreateSmsSendFailDetailsDownloadRequest {
	s.ProdId = &v
	return s
}

func (s *CreateSmsSendFailDetailsDownloadRequest) SetResourceOwnerAccount(v string) *CreateSmsSendFailDetailsDownloadRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsSendFailDetailsDownloadRequest) SetResourceOwnerId(v int64) *CreateSmsSendFailDetailsDownloadRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmsSendFailDetailsDownloadRequest) SetSendDate(v string) *CreateSmsSendFailDetailsDownloadRequest {
	s.SendDate = &v
	return s
}

type CreateSmsSendFailDetailsDownloadResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSmsSendFailDetailsDownloadResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSendFailDetailsDownloadResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmsSendFailDetailsDownloadResponseBody) SetRequestId(v string) *CreateSmsSendFailDetailsDownloadResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmsSendFailDetailsDownloadResponseBody) SetCode(v string) *CreateSmsSendFailDetailsDownloadResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSmsSendFailDetailsDownloadResponseBody) SetData(v string) *CreateSmsSendFailDetailsDownloadResponseBody {
	s.Data = &v
	return s
}

type CreateSmsSendFailDetailsDownloadResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSmsSendFailDetailsDownloadResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSmsSendFailDetailsDownloadResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSendFailDetailsDownloadResponse) GoString() string {
	return s.String()
}

func (s *CreateSmsSendFailDetailsDownloadResponse) SetHeaders(v map[string]*string) *CreateSmsSendFailDetailsDownloadResponse {
	s.Headers = v
	return s
}

func (s *CreateSmsSendFailDetailsDownloadResponse) SetStatusCode(v int32) *CreateSmsSendFailDetailsDownloadResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmsSendFailDetailsDownloadResponse) SetBody(v *CreateSmsSendFailDetailsDownloadResponseBody) *CreateSmsSendFailDetailsDownloadResponse {
	s.Body = v
	return s
}

type CreateSmsSignRequest struct {
	ExtendMessage        *string `json:"ExtendMessage,omitempty" xml:"ExtendMessage,omitempty"`
	FileIds              *string `json:"FileIds,omitempty" xml:"FileIds,omitempty"`
	OrderId              *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	Remark               *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SceneType            *int32  `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	ServiceType          *int32  `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
}

func (s CreateSmsSignRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSignRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsSignRequest) SetExtendMessage(v string) *CreateSmsSignRequest {
	s.ExtendMessage = &v
	return s
}

func (s *CreateSmsSignRequest) SetFileIds(v string) *CreateSmsSignRequest {
	s.FileIds = &v
	return s
}

func (s *CreateSmsSignRequest) SetOrderId(v string) *CreateSmsSignRequest {
	s.OrderId = &v
	return s
}

func (s *CreateSmsSignRequest) SetOwnerId(v int64) *CreateSmsSignRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsSignRequest) SetProdCode(v string) *CreateSmsSignRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsSignRequest) SetRemark(v string) *CreateSmsSignRequest {
	s.Remark = &v
	return s
}

func (s *CreateSmsSignRequest) SetResourceOwnerAccount(v string) *CreateSmsSignRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsSignRequest) SetResourceOwnerId(v int64) *CreateSmsSignRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmsSignRequest) SetSceneType(v int32) *CreateSmsSignRequest {
	s.SceneType = &v
	return s
}

func (s *CreateSmsSignRequest) SetServiceType(v int32) *CreateSmsSignRequest {
	s.ServiceType = &v
	return s
}

func (s *CreateSmsSignRequest) SetSignName(v string) *CreateSmsSignRequest {
	s.SignName = &v
	return s
}

type CreateSmsSignResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateSmsSignResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSignResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmsSignResponseBody) SetRequestId(v string) *CreateSmsSignResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmsSignResponseBody) SetCode(v string) *CreateSmsSignResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSmsSignResponseBody) SetData(v string) *CreateSmsSignResponseBody {
	s.Data = &v
	return s
}

type CreateSmsSignResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSmsSignResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSmsSignResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSignResponse) GoString() string {
	return s.String()
}

func (s *CreateSmsSignResponse) SetHeaders(v map[string]*string) *CreateSmsSignResponse {
	s.Headers = v
	return s
}

func (s *CreateSmsSignResponse) SetStatusCode(v int32) *CreateSmsSignResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmsSignResponse) SetBody(v *CreateSmsSignResponseBody) *CreateSmsSignResponse {
	s.Body = v
	return s
}

type CreateSmsSignNewRequest struct {
	ApplicationSceneId               *int64    `json:"ApplicationSceneId,omitempty" xml:"ApplicationSceneId,omitempty"`
	ApplySource                      *string   `json:"ApplySource,omitempty" xml:"ApplySource,omitempty"`
	Authorization                    *string   `json:"Authorization,omitempty" xml:"Authorization,omitempty"`
	AuthorizationEffTime             *string   `json:"AuthorizationEffTime,omitempty" xml:"AuthorizationEffTime,omitempty"`
	AuthorizationLetter              *string   `json:"AuthorizationLetter,omitempty" xml:"AuthorizationLetter,omitempty"`
	AuthorizationLetterAuditPass     *bool     `json:"AuthorizationLetterAuditPass,omitempty" xml:"AuthorizationLetterAuditPass,omitempty"`
	AuthorizationLetterId            *int64    `json:"AuthorizationLetterId,omitempty" xml:"AuthorizationLetterId,omitempty"`
	AuthorizationLetterName          *string   `json:"AuthorizationLetterName,omitempty" xml:"AuthorizationLetterName,omitempty"`
	AuthorizationSignScope           *string   `json:"AuthorizationSignScope,omitempty" xml:"AuthorizationSignScope,omitempty"`
	CreateSignGray                   *bool     `json:"CreateSignGray,omitempty" xml:"CreateSignGray,omitempty"`
	EnableAuthorizationLetter        *bool     `json:"EnableAuthorizationLetter,omitempty" xml:"EnableAuthorizationLetter,omitempty"`
	ExtendMessage                    *string   `json:"ExtendMessage,omitempty" xml:"ExtendMessage,omitempty"`
	FileIds                          *string   `json:"FileIds,omitempty" xml:"FileIds,omitempty"`
	IsAuthorizationLetterOCRComplete *bool     `json:"IsAuthorizationLetterOCRComplete,omitempty" xml:"IsAuthorizationLetterOCRComplete,omitempty"`
	IsAuthorizationLetterOCRDiff     *bool     `json:"IsAuthorizationLetterOCRDiff,omitempty" xml:"IsAuthorizationLetterOCRDiff,omitempty"`
	IsSignScopeOCRDiff               *bool     `json:"IsSignScopeOCRDiff,omitempty" xml:"IsSignScopeOCRDiff,omitempty"`
	MoreData                         []*string `json:"MoreData,omitempty" xml:"MoreData,omitempty" type:"Repeated"`
	OrderId                          *string   `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrganizationCode                 *string   `json:"OrganizationCode,omitempty" xml:"OrganizationCode,omitempty"`
	OssKeys                          *string   `json:"OssKeys,omitempty" xml:"OssKeys,omitempty"`
	OwnerId                          *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode                         *string   `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProxyAuthorization               *string   `json:"ProxyAuthorization,omitempty" xml:"ProxyAuthorization,omitempty"`
	QualificationId                  *int64    `json:"QualificationId,omitempty" xml:"QualificationId,omitempty"`
	QualificationType                *int64    `json:"QualificationType,omitempty" xml:"QualificationType,omitempty"`
	QualificationVersion             *int64    `json:"QualificationVersion,omitempty" xml:"QualificationVersion,omitempty"`
	Remark                           *string   `json:"Remark,omitempty" xml:"Remark,omitempty"`
	ResourceOwnerAccount             *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                  *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SceneType                        *int32    `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	ServiceType                      *int32    `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignCode                         *string   `json:"SignCode,omitempty" xml:"SignCode,omitempty"`
	SignId                           *string   `json:"SignId,omitempty" xml:"SignId,omitempty"`
	SignName                         *string   `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SignScopeOCR                     *string   `json:"SignScopeOCR,omitempty" xml:"SignScopeOCR,omitempty"`
	SignUpgrade                      *bool     `json:"SignUpgrade,omitempty" xml:"SignUpgrade,omitempty"`
	ThirdParty                       *bool     `json:"ThirdParty,omitempty" xml:"ThirdParty,omitempty"`
	UserViewFileName                 *string   `json:"UserViewFileName,omitempty" xml:"UserViewFileName,omitempty"`
}

func (s CreateSmsSignNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSignNewRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsSignNewRequest) SetApplicationSceneId(v int64) *CreateSmsSignNewRequest {
	s.ApplicationSceneId = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetApplySource(v string) *CreateSmsSignNewRequest {
	s.ApplySource = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetAuthorization(v string) *CreateSmsSignNewRequest {
	s.Authorization = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetAuthorizationEffTime(v string) *CreateSmsSignNewRequest {
	s.AuthorizationEffTime = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetAuthorizationLetter(v string) *CreateSmsSignNewRequest {
	s.AuthorizationLetter = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetAuthorizationLetterAuditPass(v bool) *CreateSmsSignNewRequest {
	s.AuthorizationLetterAuditPass = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetAuthorizationLetterId(v int64) *CreateSmsSignNewRequest {
	s.AuthorizationLetterId = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetAuthorizationLetterName(v string) *CreateSmsSignNewRequest {
	s.AuthorizationLetterName = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetAuthorizationSignScope(v string) *CreateSmsSignNewRequest {
	s.AuthorizationSignScope = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetCreateSignGray(v bool) *CreateSmsSignNewRequest {
	s.CreateSignGray = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetEnableAuthorizationLetter(v bool) *CreateSmsSignNewRequest {
	s.EnableAuthorizationLetter = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetExtendMessage(v string) *CreateSmsSignNewRequest {
	s.ExtendMessage = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetFileIds(v string) *CreateSmsSignNewRequest {
	s.FileIds = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetIsAuthorizationLetterOCRComplete(v bool) *CreateSmsSignNewRequest {
	s.IsAuthorizationLetterOCRComplete = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetIsAuthorizationLetterOCRDiff(v bool) *CreateSmsSignNewRequest {
	s.IsAuthorizationLetterOCRDiff = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetIsSignScopeOCRDiff(v bool) *CreateSmsSignNewRequest {
	s.IsSignScopeOCRDiff = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetMoreData(v []*string) *CreateSmsSignNewRequest {
	s.MoreData = v
	return s
}

func (s *CreateSmsSignNewRequest) SetOrderId(v string) *CreateSmsSignNewRequest {
	s.OrderId = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetOrganizationCode(v string) *CreateSmsSignNewRequest {
	s.OrganizationCode = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetOssKeys(v string) *CreateSmsSignNewRequest {
	s.OssKeys = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetOwnerId(v int64) *CreateSmsSignNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetProdCode(v string) *CreateSmsSignNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetProxyAuthorization(v string) *CreateSmsSignNewRequest {
	s.ProxyAuthorization = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetQualificationId(v int64) *CreateSmsSignNewRequest {
	s.QualificationId = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetQualificationType(v int64) *CreateSmsSignNewRequest {
	s.QualificationType = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetQualificationVersion(v int64) *CreateSmsSignNewRequest {
	s.QualificationVersion = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetRemark(v string) *CreateSmsSignNewRequest {
	s.Remark = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetResourceOwnerAccount(v string) *CreateSmsSignNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetResourceOwnerId(v int64) *CreateSmsSignNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetSceneType(v int32) *CreateSmsSignNewRequest {
	s.SceneType = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetServiceType(v int32) *CreateSmsSignNewRequest {
	s.ServiceType = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetSignCode(v string) *CreateSmsSignNewRequest {
	s.SignCode = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetSignId(v string) *CreateSmsSignNewRequest {
	s.SignId = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetSignName(v string) *CreateSmsSignNewRequest {
	s.SignName = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetSignScopeOCR(v string) *CreateSmsSignNewRequest {
	s.SignScopeOCR = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetSignUpgrade(v bool) *CreateSmsSignNewRequest {
	s.SignUpgrade = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetThirdParty(v bool) *CreateSmsSignNewRequest {
	s.ThirdParty = &v
	return s
}

func (s *CreateSmsSignNewRequest) SetUserViewFileName(v string) *CreateSmsSignNewRequest {
	s.UserViewFileName = &v
	return s
}

type CreateSmsSignNewShrinkRequest struct {
	ApplicationSceneId               *int64  `json:"ApplicationSceneId,omitempty" xml:"ApplicationSceneId,omitempty"`
	ApplySource                      *string `json:"ApplySource,omitempty" xml:"ApplySource,omitempty"`
	Authorization                    *string `json:"Authorization,omitempty" xml:"Authorization,omitempty"`
	AuthorizationEffTime             *string `json:"AuthorizationEffTime,omitempty" xml:"AuthorizationEffTime,omitempty"`
	AuthorizationLetter              *string `json:"AuthorizationLetter,omitempty" xml:"AuthorizationLetter,omitempty"`
	AuthorizationLetterAuditPass     *bool   `json:"AuthorizationLetterAuditPass,omitempty" xml:"AuthorizationLetterAuditPass,omitempty"`
	AuthorizationLetterId            *int64  `json:"AuthorizationLetterId,omitempty" xml:"AuthorizationLetterId,omitempty"`
	AuthorizationLetterName          *string `json:"AuthorizationLetterName,omitempty" xml:"AuthorizationLetterName,omitempty"`
	AuthorizationSignScope           *string `json:"AuthorizationSignScope,omitempty" xml:"AuthorizationSignScope,omitempty"`
	CreateSignGray                   *bool   `json:"CreateSignGray,omitempty" xml:"CreateSignGray,omitempty"`
	EnableAuthorizationLetter        *bool   `json:"EnableAuthorizationLetter,omitempty" xml:"EnableAuthorizationLetter,omitempty"`
	ExtendMessage                    *string `json:"ExtendMessage,omitempty" xml:"ExtendMessage,omitempty"`
	FileIds                          *string `json:"FileIds,omitempty" xml:"FileIds,omitempty"`
	IsAuthorizationLetterOCRComplete *bool   `json:"IsAuthorizationLetterOCRComplete,omitempty" xml:"IsAuthorizationLetterOCRComplete,omitempty"`
	IsAuthorizationLetterOCRDiff     *bool   `json:"IsAuthorizationLetterOCRDiff,omitempty" xml:"IsAuthorizationLetterOCRDiff,omitempty"`
	IsSignScopeOCRDiff               *bool   `json:"IsSignScopeOCRDiff,omitempty" xml:"IsSignScopeOCRDiff,omitempty"`
	MoreDataShrink                   *string `json:"MoreData,omitempty" xml:"MoreData,omitempty"`
	OrderId                          *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrganizationCode                 *string `json:"OrganizationCode,omitempty" xml:"OrganizationCode,omitempty"`
	OssKeys                          *string `json:"OssKeys,omitempty" xml:"OssKeys,omitempty"`
	OwnerId                          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode                         *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProxyAuthorization               *string `json:"ProxyAuthorization,omitempty" xml:"ProxyAuthorization,omitempty"`
	QualificationId                  *int64  `json:"QualificationId,omitempty" xml:"QualificationId,omitempty"`
	QualificationType                *int64  `json:"QualificationType,omitempty" xml:"QualificationType,omitempty"`
	QualificationVersion             *int64  `json:"QualificationVersion,omitempty" xml:"QualificationVersion,omitempty"`
	Remark                           *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	ResourceOwnerAccount             *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                  *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SceneType                        *int32  `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	ServiceType                      *int32  `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignCode                         *string `json:"SignCode,omitempty" xml:"SignCode,omitempty"`
	SignId                           *string `json:"SignId,omitempty" xml:"SignId,omitempty"`
	SignName                         *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SignScopeOCR                     *string `json:"SignScopeOCR,omitempty" xml:"SignScopeOCR,omitempty"`
	SignUpgrade                      *bool   `json:"SignUpgrade,omitempty" xml:"SignUpgrade,omitempty"`
	ThirdParty                       *bool   `json:"ThirdParty,omitempty" xml:"ThirdParty,omitempty"`
	UserViewFileName                 *string `json:"UserViewFileName,omitempty" xml:"UserViewFileName,omitempty"`
}

func (s CreateSmsSignNewShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSignNewShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsSignNewShrinkRequest) SetApplicationSceneId(v int64) *CreateSmsSignNewShrinkRequest {
	s.ApplicationSceneId = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetApplySource(v string) *CreateSmsSignNewShrinkRequest {
	s.ApplySource = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetAuthorization(v string) *CreateSmsSignNewShrinkRequest {
	s.Authorization = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetAuthorizationEffTime(v string) *CreateSmsSignNewShrinkRequest {
	s.AuthorizationEffTime = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetAuthorizationLetter(v string) *CreateSmsSignNewShrinkRequest {
	s.AuthorizationLetter = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetAuthorizationLetterAuditPass(v bool) *CreateSmsSignNewShrinkRequest {
	s.AuthorizationLetterAuditPass = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetAuthorizationLetterId(v int64) *CreateSmsSignNewShrinkRequest {
	s.AuthorizationLetterId = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetAuthorizationLetterName(v string) *CreateSmsSignNewShrinkRequest {
	s.AuthorizationLetterName = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetAuthorizationSignScope(v string) *CreateSmsSignNewShrinkRequest {
	s.AuthorizationSignScope = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetCreateSignGray(v bool) *CreateSmsSignNewShrinkRequest {
	s.CreateSignGray = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetEnableAuthorizationLetter(v bool) *CreateSmsSignNewShrinkRequest {
	s.EnableAuthorizationLetter = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetExtendMessage(v string) *CreateSmsSignNewShrinkRequest {
	s.ExtendMessage = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetFileIds(v string) *CreateSmsSignNewShrinkRequest {
	s.FileIds = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetIsAuthorizationLetterOCRComplete(v bool) *CreateSmsSignNewShrinkRequest {
	s.IsAuthorizationLetterOCRComplete = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetIsAuthorizationLetterOCRDiff(v bool) *CreateSmsSignNewShrinkRequest {
	s.IsAuthorizationLetterOCRDiff = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetIsSignScopeOCRDiff(v bool) *CreateSmsSignNewShrinkRequest {
	s.IsSignScopeOCRDiff = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetMoreDataShrink(v string) *CreateSmsSignNewShrinkRequest {
	s.MoreDataShrink = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetOrderId(v string) *CreateSmsSignNewShrinkRequest {
	s.OrderId = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetOrganizationCode(v string) *CreateSmsSignNewShrinkRequest {
	s.OrganizationCode = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetOssKeys(v string) *CreateSmsSignNewShrinkRequest {
	s.OssKeys = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetOwnerId(v int64) *CreateSmsSignNewShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetProdCode(v string) *CreateSmsSignNewShrinkRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetProxyAuthorization(v string) *CreateSmsSignNewShrinkRequest {
	s.ProxyAuthorization = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetQualificationId(v int64) *CreateSmsSignNewShrinkRequest {
	s.QualificationId = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetQualificationType(v int64) *CreateSmsSignNewShrinkRequest {
	s.QualificationType = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetQualificationVersion(v int64) *CreateSmsSignNewShrinkRequest {
	s.QualificationVersion = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetRemark(v string) *CreateSmsSignNewShrinkRequest {
	s.Remark = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetResourceOwnerAccount(v string) *CreateSmsSignNewShrinkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetResourceOwnerId(v int64) *CreateSmsSignNewShrinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetSceneType(v int32) *CreateSmsSignNewShrinkRequest {
	s.SceneType = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetServiceType(v int32) *CreateSmsSignNewShrinkRequest {
	s.ServiceType = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetSignCode(v string) *CreateSmsSignNewShrinkRequest {
	s.SignCode = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetSignId(v string) *CreateSmsSignNewShrinkRequest {
	s.SignId = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetSignName(v string) *CreateSmsSignNewShrinkRequest {
	s.SignName = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetSignScopeOCR(v string) *CreateSmsSignNewShrinkRequest {
	s.SignScopeOCR = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetSignUpgrade(v bool) *CreateSmsSignNewShrinkRequest {
	s.SignUpgrade = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetThirdParty(v bool) *CreateSmsSignNewShrinkRequest {
	s.ThirdParty = &v
	return s
}

func (s *CreateSmsSignNewShrinkRequest) SetUserViewFileName(v string) *CreateSmsSignNewShrinkRequest {
	s.UserViewFileName = &v
	return s
}

type CreateSmsSignNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateSmsSignNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSignNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmsSignNewResponseBody) SetRequestId(v string) *CreateSmsSignNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmsSignNewResponseBody) SetResult(v string) *CreateSmsSignNewResponseBody {
	s.Result = &v
	return s
}

type CreateSmsSignNewResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSmsSignNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSmsSignNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsSignNewResponse) GoString() string {
	return s.String()
}

func (s *CreateSmsSignNewResponse) SetHeaders(v map[string]*string) *CreateSmsSignNewResponse {
	s.Headers = v
	return s
}

func (s *CreateSmsSignNewResponse) SetStatusCode(v int32) *CreateSmsSignNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmsSignNewResponse) SetBody(v *CreateSmsSignNewResponseBody) *CreateSmsSignNewResponse {
	s.Body = v
	return s
}

type CreateSmsTemplateNewRequest struct {
	AiTemplate           *int64    `json:"AiTemplate,omitempty" xml:"AiTemplate,omitempty"`
	AiTemplateUuid       *string   `json:"AiTemplateUuid,omitempty" xml:"AiTemplateUuid,omitempty"`
	ApplicationSceneId   *int64    `json:"ApplicationSceneId,omitempty" xml:"ApplicationSceneId,omitempty"`
	ApplySource          *string   `json:"ApplySource,omitempty" xml:"ApplySource,omitempty"`
	BizType              *string   `json:"BizType,omitempty" xml:"BizType,omitempty"`
	IntlType             *int32    `json:"IntlType,omitempty" xml:"IntlType,omitempty"`
	MoreData             []*string `json:"MoreData,omitempty" xml:"MoreData,omitempty" type:"Repeated"`
	OrderId              *string   `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OssKeys              *string   `json:"OssKeys,omitempty" xml:"OssKeys,omitempty"`
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string   `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProductUrl           *string   `json:"ProductUrl,omitempty" xml:"ProductUrl,omitempty"`
	RelatedSignName      *string   `json:"RelatedSignName,omitempty" xml:"RelatedSignName,omitempty"`
	RelatedSignOrderId   *string   `json:"RelatedSignOrderId,omitempty" xml:"RelatedSignOrderId,omitempty"`
	RelatedSignUsageName *string   `json:"RelatedSignUsageName,omitempty" xml:"RelatedSignUsageName,omitempty"`
	Remark               *string   `json:"Remark,omitempty" xml:"Remark,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RmdTemplateId        *int64    `json:"RmdTemplateId,omitempty" xml:"RmdTemplateId,omitempty"`
	TemplateCode         *string   `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateContent      *string   `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
	TemplateName         *string   `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateRule         *string   `json:"TemplateRule,omitempty" xml:"TemplateRule,omitempty"`
	UserViewFileName     *string   `json:"UserViewFileName,omitempty" xml:"UserViewFileName,omitempty"`
}

func (s CreateSmsTemplateNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsTemplateNewRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsTemplateNewRequest) SetAiTemplate(v int64) *CreateSmsTemplateNewRequest {
	s.AiTemplate = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetAiTemplateUuid(v string) *CreateSmsTemplateNewRequest {
	s.AiTemplateUuid = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetApplicationSceneId(v int64) *CreateSmsTemplateNewRequest {
	s.ApplicationSceneId = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetApplySource(v string) *CreateSmsTemplateNewRequest {
	s.ApplySource = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetBizType(v string) *CreateSmsTemplateNewRequest {
	s.BizType = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetIntlType(v int32) *CreateSmsTemplateNewRequest {
	s.IntlType = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetMoreData(v []*string) *CreateSmsTemplateNewRequest {
	s.MoreData = v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetOrderId(v string) *CreateSmsTemplateNewRequest {
	s.OrderId = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetOssKeys(v string) *CreateSmsTemplateNewRequest {
	s.OssKeys = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetOwnerId(v int64) *CreateSmsTemplateNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetProdCode(v string) *CreateSmsTemplateNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetProductUrl(v string) *CreateSmsTemplateNewRequest {
	s.ProductUrl = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetRelatedSignName(v string) *CreateSmsTemplateNewRequest {
	s.RelatedSignName = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetRelatedSignOrderId(v string) *CreateSmsTemplateNewRequest {
	s.RelatedSignOrderId = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetRelatedSignUsageName(v string) *CreateSmsTemplateNewRequest {
	s.RelatedSignUsageName = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetRemark(v string) *CreateSmsTemplateNewRequest {
	s.Remark = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetResourceOwnerAccount(v string) *CreateSmsTemplateNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetResourceOwnerId(v int64) *CreateSmsTemplateNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetRmdTemplateId(v int64) *CreateSmsTemplateNewRequest {
	s.RmdTemplateId = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetTemplateCode(v string) *CreateSmsTemplateNewRequest {
	s.TemplateCode = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetTemplateContent(v string) *CreateSmsTemplateNewRequest {
	s.TemplateContent = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetTemplateName(v string) *CreateSmsTemplateNewRequest {
	s.TemplateName = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetTemplateRule(v string) *CreateSmsTemplateNewRequest {
	s.TemplateRule = &v
	return s
}

func (s *CreateSmsTemplateNewRequest) SetUserViewFileName(v string) *CreateSmsTemplateNewRequest {
	s.UserViewFileName = &v
	return s
}

type CreateSmsTemplateNewShrinkRequest struct {
	AiTemplate           *int64  `json:"AiTemplate,omitempty" xml:"AiTemplate,omitempty"`
	AiTemplateUuid       *string `json:"AiTemplateUuid,omitempty" xml:"AiTemplateUuid,omitempty"`
	ApplicationSceneId   *int64  `json:"ApplicationSceneId,omitempty" xml:"ApplicationSceneId,omitempty"`
	ApplySource          *string `json:"ApplySource,omitempty" xml:"ApplySource,omitempty"`
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	IntlType             *int32  `json:"IntlType,omitempty" xml:"IntlType,omitempty"`
	MoreDataShrink       *string `json:"MoreData,omitempty" xml:"MoreData,omitempty"`
	OrderId              *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OssKeys              *string `json:"OssKeys,omitempty" xml:"OssKeys,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProductUrl           *string `json:"ProductUrl,omitempty" xml:"ProductUrl,omitempty"`
	RelatedSignName      *string `json:"RelatedSignName,omitempty" xml:"RelatedSignName,omitempty"`
	RelatedSignOrderId   *string `json:"RelatedSignOrderId,omitempty" xml:"RelatedSignOrderId,omitempty"`
	RelatedSignUsageName *string `json:"RelatedSignUsageName,omitempty" xml:"RelatedSignUsageName,omitempty"`
	Remark               *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RmdTemplateId        *int64  `json:"RmdTemplateId,omitempty" xml:"RmdTemplateId,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateContent      *string `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateRule         *string `json:"TemplateRule,omitempty" xml:"TemplateRule,omitempty"`
	UserViewFileName     *string `json:"UserViewFileName,omitempty" xml:"UserViewFileName,omitempty"`
}

func (s CreateSmsTemplateNewShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsTemplateNewShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSmsTemplateNewShrinkRequest) SetAiTemplate(v int64) *CreateSmsTemplateNewShrinkRequest {
	s.AiTemplate = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetAiTemplateUuid(v string) *CreateSmsTemplateNewShrinkRequest {
	s.AiTemplateUuid = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetApplicationSceneId(v int64) *CreateSmsTemplateNewShrinkRequest {
	s.ApplicationSceneId = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetApplySource(v string) *CreateSmsTemplateNewShrinkRequest {
	s.ApplySource = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetBizType(v string) *CreateSmsTemplateNewShrinkRequest {
	s.BizType = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetIntlType(v int32) *CreateSmsTemplateNewShrinkRequest {
	s.IntlType = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetMoreDataShrink(v string) *CreateSmsTemplateNewShrinkRequest {
	s.MoreDataShrink = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetOrderId(v string) *CreateSmsTemplateNewShrinkRequest {
	s.OrderId = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetOssKeys(v string) *CreateSmsTemplateNewShrinkRequest {
	s.OssKeys = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetOwnerId(v int64) *CreateSmsTemplateNewShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetProdCode(v string) *CreateSmsTemplateNewShrinkRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetProductUrl(v string) *CreateSmsTemplateNewShrinkRequest {
	s.ProductUrl = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetRelatedSignName(v string) *CreateSmsTemplateNewShrinkRequest {
	s.RelatedSignName = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetRelatedSignOrderId(v string) *CreateSmsTemplateNewShrinkRequest {
	s.RelatedSignOrderId = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetRelatedSignUsageName(v string) *CreateSmsTemplateNewShrinkRequest {
	s.RelatedSignUsageName = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetRemark(v string) *CreateSmsTemplateNewShrinkRequest {
	s.Remark = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetResourceOwnerAccount(v string) *CreateSmsTemplateNewShrinkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetResourceOwnerId(v int64) *CreateSmsTemplateNewShrinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetRmdTemplateId(v int64) *CreateSmsTemplateNewShrinkRequest {
	s.RmdTemplateId = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetTemplateCode(v string) *CreateSmsTemplateNewShrinkRequest {
	s.TemplateCode = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetTemplateContent(v string) *CreateSmsTemplateNewShrinkRequest {
	s.TemplateContent = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetTemplateName(v string) *CreateSmsTemplateNewShrinkRequest {
	s.TemplateName = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetTemplateRule(v string) *CreateSmsTemplateNewShrinkRequest {
	s.TemplateRule = &v
	return s
}

func (s *CreateSmsTemplateNewShrinkRequest) SetUserViewFileName(v string) *CreateSmsTemplateNewShrinkRequest {
	s.UserViewFileName = &v
	return s
}

type CreateSmsTemplateNewResponseBody struct {
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSmsTemplateNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsTemplateNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmsTemplateNewResponseBody) SetOrderId(v string) *CreateSmsTemplateNewResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateSmsTemplateNewResponseBody) SetRequestId(v string) *CreateSmsTemplateNewResponseBody {
	s.RequestId = &v
	return s
}

type CreateSmsTemplateNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSmsTemplateNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSmsTemplateNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmsTemplateNewResponse) GoString() string {
	return s.String()
}

func (s *CreateSmsTemplateNewResponse) SetHeaders(v map[string]*string) *CreateSmsTemplateNewResponse {
	s.Headers = v
	return s
}

func (s *CreateSmsTemplateNewResponse) SetStatusCode(v int32) *CreateSmsTemplateNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmsTemplateNewResponse) SetBody(v *CreateSmsTemplateNewResponseBody) *CreateSmsTemplateNewResponse {
	s.Body = v
	return s
}

type CreateWarningThresholdRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	DailyHaltLimit       *int32  `json:"DailyHaltLimit,omitempty" xml:"DailyHaltLimit,omitempty"`
	DailyWarningLimit    *int32  `json:"DailyWarningLimit,omitempty" xml:"DailyWarningLimit,omitempty"`
	MonthlyHaltLimit     *int32  `json:"MonthlyHaltLimit,omitempty" xml:"MonthlyHaltLimit,omitempty"`
	MonthlyWarningLimit  *int32  `json:"MonthlyWarningLimit,omitempty" xml:"MonthlyWarningLimit,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateWarningThresholdRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWarningThresholdRequest) GoString() string {
	return s.String()
}

func (s *CreateWarningThresholdRequest) SetBizType(v string) *CreateWarningThresholdRequest {
	s.BizType = &v
	return s
}

func (s *CreateWarningThresholdRequest) SetDailyHaltLimit(v int32) *CreateWarningThresholdRequest {
	s.DailyHaltLimit = &v
	return s
}

func (s *CreateWarningThresholdRequest) SetDailyWarningLimit(v int32) *CreateWarningThresholdRequest {
	s.DailyWarningLimit = &v
	return s
}

func (s *CreateWarningThresholdRequest) SetMonthlyHaltLimit(v int32) *CreateWarningThresholdRequest {
	s.MonthlyHaltLimit = &v
	return s
}

func (s *CreateWarningThresholdRequest) SetMonthlyWarningLimit(v int32) *CreateWarningThresholdRequest {
	s.MonthlyWarningLimit = &v
	return s
}

func (s *CreateWarningThresholdRequest) SetOwnerId(v int64) *CreateWarningThresholdRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateWarningThresholdRequest) SetProdCode(v string) *CreateWarningThresholdRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateWarningThresholdRequest) SetResourceOwnerAccount(v string) *CreateWarningThresholdRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateWarningThresholdRequest) SetResourceOwnerId(v int64) *CreateWarningThresholdRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateWarningThresholdResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s CreateWarningThresholdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWarningThresholdResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWarningThresholdResponseBody) SetRequestId(v string) *CreateWarningThresholdResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWarningThresholdResponseBody) SetCode(v string) *CreateWarningThresholdResponseBody {
	s.Code = &v
	return s
}

func (s *CreateWarningThresholdResponseBody) SetData(v string) *CreateWarningThresholdResponseBody {
	s.Data = &v
	return s
}

type CreateWarningThresholdResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWarningThresholdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWarningThresholdResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWarningThresholdResponse) GoString() string {
	return s.String()
}

func (s *CreateWarningThresholdResponse) SetHeaders(v map[string]*string) *CreateWarningThresholdResponse {
	s.Headers = v
	return s
}

func (s *CreateWarningThresholdResponse) SetStatusCode(v int32) *CreateWarningThresholdResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWarningThresholdResponse) SetBody(v *CreateWarningThresholdResponseBody) *CreateWarningThresholdResponse {
	s.Body = v
	return s
}

type CreateWarningThresholdNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	DailyHaltLimit       *int32  `json:"DailyHaltLimit,omitempty" xml:"DailyHaltLimit,omitempty"`
	DailyWarningLimit    *int32  `json:"DailyWarningLimit,omitempty" xml:"DailyWarningLimit,omitempty"`
	MonthlyHaltLimit     *int32  `json:"MonthlyHaltLimit,omitempty" xml:"MonthlyHaltLimit,omitempty"`
	MonthlyWarningLimit  *int32  `json:"MonthlyWarningLimit,omitempty" xml:"MonthlyWarningLimit,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateWarningThresholdNewRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWarningThresholdNewRequest) GoString() string {
	return s.String()
}

func (s *CreateWarningThresholdNewRequest) SetBizType(v string) *CreateWarningThresholdNewRequest {
	s.BizType = &v
	return s
}

func (s *CreateWarningThresholdNewRequest) SetDailyHaltLimit(v int32) *CreateWarningThresholdNewRequest {
	s.DailyHaltLimit = &v
	return s
}

func (s *CreateWarningThresholdNewRequest) SetDailyWarningLimit(v int32) *CreateWarningThresholdNewRequest {
	s.DailyWarningLimit = &v
	return s
}

func (s *CreateWarningThresholdNewRequest) SetMonthlyHaltLimit(v int32) *CreateWarningThresholdNewRequest {
	s.MonthlyHaltLimit = &v
	return s
}

func (s *CreateWarningThresholdNewRequest) SetMonthlyWarningLimit(v int32) *CreateWarningThresholdNewRequest {
	s.MonthlyWarningLimit = &v
	return s
}

func (s *CreateWarningThresholdNewRequest) SetOwnerId(v int64) *CreateWarningThresholdNewRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateWarningThresholdNewRequest) SetProdCode(v string) *CreateWarningThresholdNewRequest {
	s.ProdCode = &v
	return s
}

func (s *CreateWarningThresholdNewRequest) SetResourceOwnerAccount(v string) *CreateWarningThresholdNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateWarningThresholdNewRequest) SetResourceOwnerId(v int64) *CreateWarningThresholdNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateWarningThresholdNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateWarningThresholdNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWarningThresholdNewResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWarningThresholdNewResponseBody) SetRequestId(v string) *CreateWarningThresholdNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWarningThresholdNewResponseBody) SetResult(v bool) *CreateWarningThresholdNewResponseBody {
	s.Result = &v
	return s
}

type CreateWarningThresholdNewResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWarningThresholdNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWarningThresholdNewResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWarningThresholdNewResponse) GoString() string {
	return s.String()
}

func (s *CreateWarningThresholdNewResponse) SetHeaders(v map[string]*string) *CreateWarningThresholdNewResponse {
	s.Headers = v
	return s
}

func (s *CreateWarningThresholdNewResponse) SetStatusCode(v int32) *CreateWarningThresholdNewResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWarningThresholdNewResponse) SetBody(v *CreateWarningThresholdNewResponseBody) *CreateWarningThresholdNewResponse {
	s.Body = v
	return s
}

type DelCardSendExportInfoRequest struct {
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
}

func (s DelCardSendExportInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DelCardSendExportInfoRequest) GoString() string {
	return s.String()
}

func (s *DelCardSendExportInfoRequest) SetIds(v []*int64) *DelCardSendExportInfoRequest {
	s.Ids = v
	return s
}

type DelCardSendExportInfoResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *string `json:"Model,omitempty" xml:"Model,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DelCardSendExportInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DelCardSendExportInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DelCardSendExportInfoResponseBody) SetCode(v string) *DelCardSendExportInfoResponseBody {
	s.Code = &v
	return s
}

func (s *DelCardSendExportInfoResponseBody) SetModel(v string) *DelCardSendExportInfoResponseBody {
	s.Model = &v
	return s
}

func (s *DelCardSendExportInfoResponseBody) SetRequestId(v string) *DelCardSendExportInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DelCardSendExportInfoResponseBody) SetSuccess(v bool) *DelCardSendExportInfoResponseBody {
	s.Success = &v
	return s
}

type DelCardSendExportInfoResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DelCardSendExportInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DelCardSendExportInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DelCardSendExportInfoResponse) GoString() string {
	return s.String()
}

func (s *DelCardSendExportInfoResponse) SetHeaders(v map[string]*string) *DelCardSendExportInfoResponse {
	s.Headers = v
	return s
}

func (s *DelCardSendExportInfoResponse) SetStatusCode(v int32) *DelCardSendExportInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DelCardSendExportInfoResponse) SetBody(v *DelCardSendExportInfoResponseBody) *DelCardSendExportInfoResponse {
	s.Body = v
	return s
}

type DeleteCardMessageCallbackRequest struct {
	// This parameter is required.
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// This parameter is required.
	CallbackUrl          *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteCardMessageCallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCardMessageCallbackRequest) GoString() string {
	return s.String()
}

func (s *DeleteCardMessageCallbackRequest) SetBizType(v string) *DeleteCardMessageCallbackRequest {
	s.BizType = &v
	return s
}

func (s *DeleteCardMessageCallbackRequest) SetCallbackUrl(v string) *DeleteCardMessageCallbackRequest {
	s.CallbackUrl = &v
	return s
}

func (s *DeleteCardMessageCallbackRequest) SetOwnerId(v int64) *DeleteCardMessageCallbackRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCardMessageCallbackRequest) SetProdCode(v string) *DeleteCardMessageCallbackRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteCardMessageCallbackRequest) SetResourceOwnerAccount(v string) *DeleteCardMessageCallbackRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteCardMessageCallbackRequest) SetResourceOwnerId(v int64) *DeleteCardMessageCallbackRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteCardMessageCallbackResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteCardMessageCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCardMessageCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCardMessageCallbackResponseBody) SetRequestId(v string) *DeleteCardMessageCallbackResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCardMessageCallbackResponseBody) SetResult(v bool) *DeleteCardMessageCallbackResponseBody {
	s.Result = &v
	return s
}

type DeleteCardMessageCallbackResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCardMessageCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCardMessageCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCardMessageCallbackResponse) GoString() string {
	return s.String()
}

func (s *DeleteCardMessageCallbackResponse) SetHeaders(v map[string]*string) *DeleteCardMessageCallbackResponse {
	s.Headers = v
	return s
}

func (s *DeleteCardMessageCallbackResponse) SetStatusCode(v int32) *DeleteCardMessageCallbackResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCardMessageCallbackResponse) SetBody(v *DeleteCardMessageCallbackResponseBody) *DeleteCardMessageCallbackResponse {
	s.Body = v
	return s
}

type DeleteCardMessageQueueRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	QueueType            *string `json:"QueueType,omitempty" xml:"QueueType,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteCardMessageQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCardMessageQueueRequest) GoString() string {
	return s.String()
}

func (s *DeleteCardMessageQueueRequest) SetOwnerId(v int64) *DeleteCardMessageQueueRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCardMessageQueueRequest) SetProdCode(v string) *DeleteCardMessageQueueRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteCardMessageQueueRequest) SetQueueType(v string) *DeleteCardMessageQueueRequest {
	s.QueueType = &v
	return s
}

func (s *DeleteCardMessageQueueRequest) SetResourceOwnerAccount(v string) *DeleteCardMessageQueueRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteCardMessageQueueRequest) SetResourceOwnerId(v int64) *DeleteCardMessageQueueRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteCardMessageQueueResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteCardMessageQueueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCardMessageQueueResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCardMessageQueueResponseBody) SetRequestId(v string) *DeleteCardMessageQueueResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCardMessageQueueResponseBody) SetResult(v bool) *DeleteCardMessageQueueResponseBody {
	s.Result = &v
	return s
}

type DeleteCardMessageQueueResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCardMessageQueueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCardMessageQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCardMessageQueueResponse) GoString() string {
	return s.String()
}

func (s *DeleteCardMessageQueueResponse) SetHeaders(v map[string]*string) *DeleteCardMessageQueueResponse {
	s.Headers = v
	return s
}

func (s *DeleteCardMessageQueueResponse) SetStatusCode(v int32) *DeleteCardMessageQueueResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCardMessageQueueResponse) SetBody(v *DeleteCardMessageQueueResponseBody) *DeleteCardMessageQueueResponse {
	s.Body = v
	return s
}

type DeleteContactsRequest struct {
	Ids                  *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteContactsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactsRequest) GoString() string {
	return s.String()
}

func (s *DeleteContactsRequest) SetIds(v string) *DeleteContactsRequest {
	s.Ids = &v
	return s
}

func (s *DeleteContactsRequest) SetOwnerId(v int64) *DeleteContactsRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteContactsRequest) SetProdCode(v string) *DeleteContactsRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteContactsRequest) SetResourceOwnerAccount(v string) *DeleteContactsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteContactsRequest) SetResourceOwnerId(v int64) *DeleteContactsRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteContactsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteContactsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteContactsResponseBody) SetRequestId(v string) *DeleteContactsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteContactsResponseBody) SetCode(v string) *DeleteContactsResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteContactsResponseBody) SetData(v string) *DeleteContactsResponseBody {
	s.Data = &v
	return s
}

type DeleteContactsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteContactsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteContactsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactsResponse) GoString() string {
	return s.String()
}

func (s *DeleteContactsResponse) SetHeaders(v map[string]*string) *DeleteContactsResponse {
	s.Headers = v
	return s
}

func (s *DeleteContactsResponse) SetStatusCode(v int32) *DeleteContactsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteContactsResponse) SetBody(v *DeleteContactsResponseBody) *DeleteContactsResponse {
	s.Body = v
	return s
}

type DeleteContactsNewRequest struct {
	Ids                  *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteContactsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactsNewRequest) GoString() string {
	return s.String()
}

func (s *DeleteContactsNewRequest) SetIds(v string) *DeleteContactsNewRequest {
	s.Ids = &v
	return s
}

func (s *DeleteContactsNewRequest) SetOwnerId(v int64) *DeleteContactsNewRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteContactsNewRequest) SetProdCode(v string) *DeleteContactsNewRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteContactsNewRequest) SetResourceOwnerAccount(v string) *DeleteContactsNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteContactsNewRequest) SetResourceOwnerId(v int64) *DeleteContactsNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteContactsNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteContactsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactsNewResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteContactsNewResponseBody) SetRequestId(v string) *DeleteContactsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteContactsNewResponseBody) SetResult(v bool) *DeleteContactsNewResponseBody {
	s.Result = &v
	return s
}

type DeleteContactsNewResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteContactsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteContactsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactsNewResponse) GoString() string {
	return s.String()
}

func (s *DeleteContactsNewResponse) SetHeaders(v map[string]*string) *DeleteContactsNewResponse {
	s.Headers = v
	return s
}

func (s *DeleteContactsNewResponse) SetStatusCode(v int32) *DeleteContactsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteContactsNewResponse) SetBody(v *DeleteContactsNewResponseBody) *DeleteContactsNewResponse {
	s.Body = v
	return s
}

type DeleteDigitalTemplateNewRequest struct {
	AuditState           *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s DeleteDigitalTemplateNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDigitalTemplateNewRequest) GoString() string {
	return s.String()
}

func (s *DeleteDigitalTemplateNewRequest) SetAuditState(v string) *DeleteDigitalTemplateNewRequest {
	s.AuditState = &v
	return s
}

func (s *DeleteDigitalTemplateNewRequest) SetBizType(v string) *DeleteDigitalTemplateNewRequest {
	s.BizType = &v
	return s
}

func (s *DeleteDigitalTemplateNewRequest) SetOwnerId(v int64) *DeleteDigitalTemplateNewRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDigitalTemplateNewRequest) SetProdCode(v string) *DeleteDigitalTemplateNewRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteDigitalTemplateNewRequest) SetResourceOwnerAccount(v string) *DeleteDigitalTemplateNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDigitalTemplateNewRequest) SetResourceOwnerId(v int64) *DeleteDigitalTemplateNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDigitalTemplateNewRequest) SetTemplateCode(v string) *DeleteDigitalTemplateNewRequest {
	s.TemplateCode = &v
	return s
}

func (s *DeleteDigitalTemplateNewRequest) SetTemplateName(v string) *DeleteDigitalTemplateNewRequest {
	s.TemplateName = &v
	return s
}

type DeleteDigitalTemplateNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteDigitalTemplateNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDigitalTemplateNewResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDigitalTemplateNewResponseBody) SetRequestId(v string) *DeleteDigitalTemplateNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDigitalTemplateNewResponseBody) SetResult(v string) *DeleteDigitalTemplateNewResponseBody {
	s.Result = &v
	return s
}

type DeleteDigitalTemplateNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDigitalTemplateNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDigitalTemplateNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDigitalTemplateNewResponse) GoString() string {
	return s.String()
}

func (s *DeleteDigitalTemplateNewResponse) SetHeaders(v map[string]*string) *DeleteDigitalTemplateNewResponse {
	s.Headers = v
	return s
}

func (s *DeleteDigitalTemplateNewResponse) SetStatusCode(v int32) *DeleteDigitalTemplateNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDigitalTemplateNewResponse) SetBody(v *DeleteDigitalTemplateNewResponseBody) *DeleteDigitalTemplateNewResponse {
	s.Body = v
	return s
}

type DeleteMessageCallbackNewRequest struct {
	// This parameter is required.
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteMessageCallbackNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMessageCallbackNewRequest) GoString() string {
	return s.String()
}

func (s *DeleteMessageCallbackNewRequest) SetBizType(v string) *DeleteMessageCallbackNewRequest {
	s.BizType = &v
	return s
}

func (s *DeleteMessageCallbackNewRequest) SetOwnerId(v int64) *DeleteMessageCallbackNewRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMessageCallbackNewRequest) SetProdCode(v string) *DeleteMessageCallbackNewRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteMessageCallbackNewRequest) SetResourceOwnerAccount(v string) *DeleteMessageCallbackNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMessageCallbackNewRequest) SetResourceOwnerId(v int64) *DeleteMessageCallbackNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteMessageCallbackNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteMessageCallbackNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMessageCallbackNewResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMessageCallbackNewResponseBody) SetRequestId(v string) *DeleteMessageCallbackNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMessageCallbackNewResponseBody) SetResult(v bool) *DeleteMessageCallbackNewResponseBody {
	s.Result = &v
	return s
}

type DeleteMessageCallbackNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMessageCallbackNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMessageCallbackNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMessageCallbackNewResponse) GoString() string {
	return s.String()
}

func (s *DeleteMessageCallbackNewResponse) SetHeaders(v map[string]*string) *DeleteMessageCallbackNewResponse {
	s.Headers = v
	return s
}

func (s *DeleteMessageCallbackNewResponse) SetStatusCode(v int32) *DeleteMessageCallbackNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMessageCallbackNewResponse) SetBody(v *DeleteMessageCallbackNewResponseBody) *DeleteMessageCallbackNewResponse {
	s.Body = v
	return s
}

type DeleteMessageQueueNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	QueueType            *string `json:"QueueType,omitempty" xml:"QueueType,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteMessageQueueNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMessageQueueNewRequest) GoString() string {
	return s.String()
}

func (s *DeleteMessageQueueNewRequest) SetOwnerId(v int64) *DeleteMessageQueueNewRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMessageQueueNewRequest) SetProdCode(v string) *DeleteMessageQueueNewRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteMessageQueueNewRequest) SetQueueType(v string) *DeleteMessageQueueNewRequest {
	s.QueueType = &v
	return s
}

func (s *DeleteMessageQueueNewRequest) SetResourceOwnerAccount(v string) *DeleteMessageQueueNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMessageQueueNewRequest) SetResourceOwnerId(v int64) *DeleteMessageQueueNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteMessageQueueNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteMessageQueueNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMessageQueueNewResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMessageQueueNewResponseBody) SetRequestId(v string) *DeleteMessageQueueNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMessageQueueNewResponseBody) SetResult(v bool) *DeleteMessageQueueNewResponseBody {
	s.Result = &v
	return s
}

type DeleteMessageQueueNewResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMessageQueueNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMessageQueueNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMessageQueueNewResponse) GoString() string {
	return s.String()
}

func (s *DeleteMessageQueueNewResponse) SetHeaders(v map[string]*string) *DeleteMessageQueueNewResponse {
	s.Headers = v
	return s
}

func (s *DeleteMessageQueueNewResponse) SetStatusCode(v int32) *DeleteMessageQueueNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMessageQueueNewResponse) SetBody(v *DeleteMessageQueueNewResponseBody) *DeleteMessageQueueNewResponse {
	s.Body = v
	return s
}

type DeleteOrCanceleTaskRequest struct {
	IsDeleted            *int32  `json:"IsDeleted,omitempty" xml:"IsDeleted,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId               *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteOrCanceleTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteOrCanceleTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteOrCanceleTaskRequest) SetIsDeleted(v int32) *DeleteOrCanceleTaskRequest {
	s.IsDeleted = &v
	return s
}

func (s *DeleteOrCanceleTaskRequest) SetOwnerId(v int64) *DeleteOrCanceleTaskRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteOrCanceleTaskRequest) SetProdCode(v string) *DeleteOrCanceleTaskRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteOrCanceleTaskRequest) SetResourceOwnerAccount(v string) *DeleteOrCanceleTaskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteOrCanceleTaskRequest) SetResourceOwnerId(v int64) *DeleteOrCanceleTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteOrCanceleTaskRequest) SetStatus(v string) *DeleteOrCanceleTaskRequest {
	s.Status = &v
	return s
}

func (s *DeleteOrCanceleTaskRequest) SetTaskId(v int64) *DeleteOrCanceleTaskRequest {
	s.TaskId = &v
	return s
}

type DeleteOrCanceleTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteOrCanceleTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteOrCanceleTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteOrCanceleTaskResponseBody) SetRequestId(v string) *DeleteOrCanceleTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteOrCanceleTaskResponseBody) SetCode(v string) *DeleteOrCanceleTaskResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteOrCanceleTaskResponseBody) SetData(v string) *DeleteOrCanceleTaskResponseBody {
	s.Data = &v
	return s
}

type DeleteOrCanceleTaskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteOrCanceleTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteOrCanceleTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteOrCanceleTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteOrCanceleTaskResponse) SetHeaders(v map[string]*string) *DeleteOrCanceleTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteOrCanceleTaskResponse) SetStatusCode(v int32) *DeleteOrCanceleTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteOrCanceleTaskResponse) SetBody(v *DeleteOrCanceleTaskResponseBody) *DeleteOrCanceleTaskResponse {
	s.Body = v
	return s
}

type DeleteOrCanceleTaskNewRequest struct {
	IsDeleted            *int32  `json:"IsDeleted,omitempty" xml:"IsDeleted,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId               *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteOrCanceleTaskNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteOrCanceleTaskNewRequest) GoString() string {
	return s.String()
}

func (s *DeleteOrCanceleTaskNewRequest) SetIsDeleted(v int32) *DeleteOrCanceleTaskNewRequest {
	s.IsDeleted = &v
	return s
}

func (s *DeleteOrCanceleTaskNewRequest) SetOwnerId(v int64) *DeleteOrCanceleTaskNewRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteOrCanceleTaskNewRequest) SetProdCode(v string) *DeleteOrCanceleTaskNewRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteOrCanceleTaskNewRequest) SetResourceOwnerAccount(v string) *DeleteOrCanceleTaskNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteOrCanceleTaskNewRequest) SetResourceOwnerId(v int64) *DeleteOrCanceleTaskNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteOrCanceleTaskNewRequest) SetStatus(v string) *DeleteOrCanceleTaskNewRequest {
	s.Status = &v
	return s
}

func (s *DeleteOrCanceleTaskNewRequest) SetTaskId(v int64) *DeleteOrCanceleTaskNewRequest {
	s.TaskId = &v
	return s
}

type DeleteOrCanceleTaskNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *int64  `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteOrCanceleTaskNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteOrCanceleTaskNewResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteOrCanceleTaskNewResponseBody) SetRequestId(v string) *DeleteOrCanceleTaskNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteOrCanceleTaskNewResponseBody) SetResult(v int64) *DeleteOrCanceleTaskNewResponseBody {
	s.Result = &v
	return s
}

type DeleteOrCanceleTaskNewResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteOrCanceleTaskNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteOrCanceleTaskNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteOrCanceleTaskNewResponse) GoString() string {
	return s.String()
}

func (s *DeleteOrCanceleTaskNewResponse) SetHeaders(v map[string]*string) *DeleteOrCanceleTaskNewResponse {
	s.Headers = v
	return s
}

func (s *DeleteOrCanceleTaskNewResponse) SetStatusCode(v int32) *DeleteOrCanceleTaskNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteOrCanceleTaskNewResponse) SetBody(v *DeleteOrCanceleTaskNewResponseBody) *DeleteOrCanceleTaskNewResponse {
	s.Body = v
	return s
}

type DeletePhoneWhiteListRequest struct {
	// This parameter is required.
	Ids                  *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeletePhoneWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePhoneWhiteListRequest) GoString() string {
	return s.String()
}

func (s *DeletePhoneWhiteListRequest) SetIds(v string) *DeletePhoneWhiteListRequest {
	s.Ids = &v
	return s
}

func (s *DeletePhoneWhiteListRequest) SetOwnerId(v int64) *DeletePhoneWhiteListRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePhoneWhiteListRequest) SetProdCode(v string) *DeletePhoneWhiteListRequest {
	s.ProdCode = &v
	return s
}

func (s *DeletePhoneWhiteListRequest) SetResourceOwnerAccount(v string) *DeletePhoneWhiteListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeletePhoneWhiteListRequest) SetResourceOwnerId(v int64) *DeletePhoneWhiteListRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeletePhoneWhiteListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeletePhoneWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePhoneWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePhoneWhiteListResponseBody) SetRequestId(v string) *DeletePhoneWhiteListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePhoneWhiteListResponseBody) SetCode(v string) *DeletePhoneWhiteListResponseBody {
	s.Code = &v
	return s
}

func (s *DeletePhoneWhiteListResponseBody) SetData(v string) *DeletePhoneWhiteListResponseBody {
	s.Data = &v
	return s
}

type DeletePhoneWhiteListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePhoneWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePhoneWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePhoneWhiteListResponse) GoString() string {
	return s.String()
}

func (s *DeletePhoneWhiteListResponse) SetHeaders(v map[string]*string) *DeletePhoneWhiteListResponse {
	s.Headers = v
	return s
}

func (s *DeletePhoneWhiteListResponse) SetStatusCode(v int32) *DeletePhoneWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePhoneWhiteListResponse) SetBody(v *DeletePhoneWhiteListResponseBody) *DeletePhoneWhiteListResponse {
	s.Body = v
	return s
}

type DeletePhoneWhiteListNewRequest struct {
	// This parameter is required.
	Ids                  *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeletePhoneWhiteListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePhoneWhiteListNewRequest) GoString() string {
	return s.String()
}

func (s *DeletePhoneWhiteListNewRequest) SetIds(v string) *DeletePhoneWhiteListNewRequest {
	s.Ids = &v
	return s
}

func (s *DeletePhoneWhiteListNewRequest) SetOwnerId(v int64) *DeletePhoneWhiteListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePhoneWhiteListNewRequest) SetProdCode(v string) *DeletePhoneWhiteListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *DeletePhoneWhiteListNewRequest) SetResourceOwnerAccount(v string) *DeletePhoneWhiteListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeletePhoneWhiteListNewRequest) SetResourceOwnerId(v int64) *DeletePhoneWhiteListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeletePhoneWhiteListNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeletePhoneWhiteListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePhoneWhiteListNewResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePhoneWhiteListNewResponseBody) SetRequestId(v string) *DeletePhoneWhiteListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePhoneWhiteListNewResponseBody) SetResult(v bool) *DeletePhoneWhiteListNewResponseBody {
	s.Result = &v
	return s
}

type DeletePhoneWhiteListNewResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePhoneWhiteListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePhoneWhiteListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePhoneWhiteListNewResponse) GoString() string {
	return s.String()
}

func (s *DeletePhoneWhiteListNewResponse) SetHeaders(v map[string]*string) *DeletePhoneWhiteListNewResponse {
	s.Headers = v
	return s
}

func (s *DeletePhoneWhiteListNewResponse) SetStatusCode(v int32) *DeletePhoneWhiteListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePhoneWhiteListNewResponse) SetBody(v *DeletePhoneWhiteListNewResponseBody) *DeletePhoneWhiteListNewResponse {
	s.Body = v
	return s
}

type DeleteShortUrlNewRequest struct {
	// This parameter is required.
	Ids                  *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteShortUrlNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteShortUrlNewRequest) GoString() string {
	return s.String()
}

func (s *DeleteShortUrlNewRequest) SetIds(v string) *DeleteShortUrlNewRequest {
	s.Ids = &v
	return s
}

func (s *DeleteShortUrlNewRequest) SetOwnerId(v int64) *DeleteShortUrlNewRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteShortUrlNewRequest) SetProdCode(v string) *DeleteShortUrlNewRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteShortUrlNewRequest) SetResourceOwnerAccount(v string) *DeleteShortUrlNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteShortUrlNewRequest) SetResourceOwnerId(v int64) *DeleteShortUrlNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteShortUrlNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteShortUrlNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteShortUrlNewResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteShortUrlNewResponseBody) SetRequestId(v string) *DeleteShortUrlNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteShortUrlNewResponseBody) SetResult(v string) *DeleteShortUrlNewResponseBody {
	s.Result = &v
	return s
}

type DeleteShortUrlNewResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteShortUrlNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteShortUrlNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteShortUrlNewResponse) GoString() string {
	return s.String()
}

func (s *DeleteShortUrlNewResponse) SetHeaders(v map[string]*string) *DeleteShortUrlNewResponse {
	s.Headers = v
	return s
}

func (s *DeleteShortUrlNewResponse) SetStatusCode(v int32) *DeleteShortUrlNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteShortUrlNewResponse) SetBody(v *DeleteShortUrlNewResponseBody) *DeleteShortUrlNewResponse {
	s.Body = v
	return s
}

type DeleteSmsTemplateNewRequest struct {
	IsSmsSign            *bool   `json:"IsSmsSign,omitempty" xml:"IsSmsSign,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	SmsTemplateIds *string `json:"SmsTemplateIds,omitempty" xml:"SmsTemplateIds,omitempty"`
}

func (s DeleteSmsTemplateNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmsTemplateNewRequest) GoString() string {
	return s.String()
}

func (s *DeleteSmsTemplateNewRequest) SetIsSmsSign(v bool) *DeleteSmsTemplateNewRequest {
	s.IsSmsSign = &v
	return s
}

func (s *DeleteSmsTemplateNewRequest) SetOwnerId(v int64) *DeleteSmsTemplateNewRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSmsTemplateNewRequest) SetProdCode(v string) *DeleteSmsTemplateNewRequest {
	s.ProdCode = &v
	return s
}

func (s *DeleteSmsTemplateNewRequest) SetResourceOwnerAccount(v string) *DeleteSmsTemplateNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteSmsTemplateNewRequest) SetResourceOwnerId(v int64) *DeleteSmsTemplateNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteSmsTemplateNewRequest) SetSmsTemplateIds(v string) *DeleteSmsTemplateNewRequest {
	s.SmsTemplateIds = &v
	return s
}

type DeleteSmsTemplateNewResponseBody struct {
	FailList    *DeleteSmsTemplateNewResponseBodyFailList    `json:"FailList,omitempty" xml:"FailList,omitempty" type:"Struct"`
	RequestId   *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SuccessList *DeleteSmsTemplateNewResponseBodySuccessList `json:"SuccessList,omitempty" xml:"SuccessList,omitempty" type:"Struct"`
}

func (s DeleteSmsTemplateNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmsTemplateNewResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSmsTemplateNewResponseBody) SetFailList(v *DeleteSmsTemplateNewResponseBodyFailList) *DeleteSmsTemplateNewResponseBody {
	s.FailList = v
	return s
}

func (s *DeleteSmsTemplateNewResponseBody) SetRequestId(v string) *DeleteSmsTemplateNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSmsTemplateNewResponseBody) SetSuccessList(v *DeleteSmsTemplateNewResponseBodySuccessList) *DeleteSmsTemplateNewResponseBody {
	s.SuccessList = v
	return s
}

type DeleteSmsTemplateNewResponseBodyFailList struct {
	Fail []*string `json:"Fail,omitempty" xml:"Fail,omitempty" type:"Repeated"`
}

func (s DeleteSmsTemplateNewResponseBodyFailList) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmsTemplateNewResponseBodyFailList) GoString() string {
	return s.String()
}

func (s *DeleteSmsTemplateNewResponseBodyFailList) SetFail(v []*string) *DeleteSmsTemplateNewResponseBodyFailList {
	s.Fail = v
	return s
}

type DeleteSmsTemplateNewResponseBodySuccessList struct {
	Succes []*string `json:"Succes,omitempty" xml:"Succes,omitempty" type:"Repeated"`
}

func (s DeleteSmsTemplateNewResponseBodySuccessList) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmsTemplateNewResponseBodySuccessList) GoString() string {
	return s.String()
}

func (s *DeleteSmsTemplateNewResponseBodySuccessList) SetSucces(v []*string) *DeleteSmsTemplateNewResponseBodySuccessList {
	s.Succes = v
	return s
}

type DeleteSmsTemplateNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSmsTemplateNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSmsTemplateNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmsTemplateNewResponse) GoString() string {
	return s.String()
}

func (s *DeleteSmsTemplateNewResponse) SetHeaders(v map[string]*string) *DeleteSmsTemplateNewResponse {
	s.Headers = v
	return s
}

func (s *DeleteSmsTemplateNewResponse) SetStatusCode(v int32) *DeleteSmsTemplateNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSmsTemplateNewResponse) SetBody(v *DeleteSmsTemplateNewResponseBody) *DeleteSmsTemplateNewResponse {
	s.Body = v
	return s
}

type ExportCardSmsHistoryRequest struct {
	ApiSend          *int64  `json:"ApiSend,omitempty" xml:"ApiSend,omitempty"`
	CardTemplateType *string `json:"CardTemplateType,omitempty" xml:"CardTemplateType,omitempty"`
	// This parameter is required.
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	ReceiveState *int64  `json:"ReceiveState,omitempty" xml:"ReceiveState,omitempty"`
	Receiver     *string `json:"Receiver,omitempty" xml:"Receiver,omitempty"`
	RenderState  *int64  `json:"RenderState,omitempty" xml:"RenderState,omitempty"`
	SignName     *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TmpCode      *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
}

func (s ExportCardSmsHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsHistoryRequest) GoString() string {
	return s.String()
}

func (s *ExportCardSmsHistoryRequest) SetApiSend(v int64) *ExportCardSmsHistoryRequest {
	s.ApiSend = &v
	return s
}

func (s *ExportCardSmsHistoryRequest) SetCardTemplateType(v string) *ExportCardSmsHistoryRequest {
	s.CardTemplateType = &v
	return s
}

func (s *ExportCardSmsHistoryRequest) SetGmtCreate(v string) *ExportCardSmsHistoryRequest {
	s.GmtCreate = &v
	return s
}

func (s *ExportCardSmsHistoryRequest) SetReceiveState(v int64) *ExportCardSmsHistoryRequest {
	s.ReceiveState = &v
	return s
}

func (s *ExportCardSmsHistoryRequest) SetReceiver(v string) *ExportCardSmsHistoryRequest {
	s.Receiver = &v
	return s
}

func (s *ExportCardSmsHistoryRequest) SetRenderState(v int64) *ExportCardSmsHistoryRequest {
	s.RenderState = &v
	return s
}

func (s *ExportCardSmsHistoryRequest) SetSignName(v string) *ExportCardSmsHistoryRequest {
	s.SignName = &v
	return s
}

func (s *ExportCardSmsHistoryRequest) SetTmpCode(v string) *ExportCardSmsHistoryRequest {
	s.TmpCode = &v
	return s
}

type ExportCardSmsHistoryResponseBody struct {
	Code      *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *ExportCardSmsHistoryResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Struct"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportCardSmsHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *ExportCardSmsHistoryResponseBody) SetCode(v string) *ExportCardSmsHistoryResponseBody {
	s.Code = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBody) SetModel(v *ExportCardSmsHistoryResponseBodyModel) *ExportCardSmsHistoryResponseBody {
	s.Model = v
	return s
}

func (s *ExportCardSmsHistoryResponseBody) SetRequestId(v string) *ExportCardSmsHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBody) SetSuccess(v bool) *ExportCardSmsHistoryResponseBody {
	s.Success = &v
	return s
}

type ExportCardSmsHistoryResponseBodyModel struct {
	PageNo     *int64                                          `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *int64                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*ExportCardSmsHistoryResponseBodyModelRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ExportCardSmsHistoryResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsHistoryResponseBodyModel) GoString() string {
	return s.String()
}

func (s *ExportCardSmsHistoryResponseBodyModel) SetPageNo(v int64) *ExportCardSmsHistoryResponseBodyModel {
	s.PageNo = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModel) SetPageSize(v int64) *ExportCardSmsHistoryResponseBodyModel {
	s.PageSize = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModel) SetRecords(v []*ExportCardSmsHistoryResponseBodyModelRecords) *ExportCardSmsHistoryResponseBodyModel {
	s.Records = v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModel) SetTotalCount(v int64) *ExportCardSmsHistoryResponseBodyModel {
	s.TotalCount = &v
	return s
}

type ExportCardSmsHistoryResponseBodyModelRecords struct {
	AcceptDate       *int64  `json:"AcceptDate,omitempty" xml:"AcceptDate,omitempty"`
	ApiSend          *int64  `json:"ApiSend,omitempty" xml:"ApiSend,omitempty"`
	CardTemplateType *string `json:"CardTemplateType,omitempty" xml:"CardTemplateType,omitempty"`
	CustomTmpCode    *string `json:"CustomTmpCode,omitempty" xml:"CustomTmpCode,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	FuuId            *string `json:"FuuId,omitempty" xml:"FuuId,omitempty"`
	GmtCreate        *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsSupport        *int64  `json:"IsSupport,omitempty" xml:"IsSupport,omitempty"`
	OutId            *string `json:"OutId,omitempty" xml:"OutId,omitempty"`
	Pid              *int64  `json:"Pid,omitempty" xml:"Pid,omitempty"`
	ReceiveState     *int64  `json:"ReceiveState,omitempty" xml:"ReceiveState,omitempty"`
	Receiver         *string `json:"Receiver,omitempty" xml:"Receiver,omitempty"`
	RenderDate       *int64  `json:"RenderDate,omitempty" xml:"RenderDate,omitempty"`
	RenderState      *int64  `json:"RenderState,omitempty" xml:"RenderState,omitempty"`
	ShortUrl         *string `json:"ShortUrl,omitempty" xml:"ShortUrl,omitempty"`
	SignName         *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SmsContent       *string `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	Suggestion       *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	TmpCode          *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpId            *string `json:"TmpId,omitempty" xml:"TmpId,omitempty"`
	TmpType          *int64  `json:"TmpType,omitempty" xml:"TmpType,omitempty"`
	TmpTypeName      *string `json:"TmpTypeName,omitempty" xml:"TmpTypeName,omitempty"`
}

func (s ExportCardSmsHistoryResponseBodyModelRecords) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsHistoryResponseBodyModelRecords) GoString() string {
	return s.String()
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetAcceptDate(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.AcceptDate = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetApiSend(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.ApiSend = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetCardTemplateType(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.CardTemplateType = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetCustomTmpCode(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.CustomTmpCode = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetDescription(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.Description = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetFuuId(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.FuuId = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetGmtCreate(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.GmtCreate = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetGmtModified(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.GmtModified = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetId(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.Id = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetIsSupport(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.IsSupport = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetOutId(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.OutId = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetPid(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.Pid = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetReceiveState(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.ReceiveState = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetReceiver(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.Receiver = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetRenderDate(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.RenderDate = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetRenderState(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.RenderState = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetShortUrl(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.ShortUrl = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetSignName(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.SignName = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetSmsContent(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.SmsContent = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetSuggestion(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.Suggestion = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetTmpCode(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.TmpCode = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetTmpId(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.TmpId = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetTmpType(v int64) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.TmpType = &v
	return s
}

func (s *ExportCardSmsHistoryResponseBodyModelRecords) SetTmpTypeName(v string) *ExportCardSmsHistoryResponseBodyModelRecords {
	s.TmpTypeName = &v
	return s
}

type ExportCardSmsHistoryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportCardSmsHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportCardSmsHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsHistoryResponse) GoString() string {
	return s.String()
}

func (s *ExportCardSmsHistoryResponse) SetHeaders(v map[string]*string) *ExportCardSmsHistoryResponse {
	s.Headers = v
	return s
}

func (s *ExportCardSmsHistoryResponse) SetStatusCode(v int32) *ExportCardSmsHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportCardSmsHistoryResponse) SetBody(v *ExportCardSmsHistoryResponseBody) *ExportCardSmsHistoryResponse {
	s.Body = v
	return s
}

type ExportCardSmsStatisticsRequest struct {
	CustomTmpCode *string `json:"CustomTmpCode,omitempty" xml:"CustomTmpCode,omitempty"`
	SendDateEnd   *string `json:"SendDateEnd,omitempty" xml:"SendDateEnd,omitempty"`
	SendDateStart *string `json:"SendDateStart,omitempty" xml:"SendDateStart,omitempty"`
	SignName      *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TmpCode       *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpName       *string `json:"TmpName,omitempty" xml:"TmpName,omitempty"`
}

func (s ExportCardSmsStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsStatisticsRequest) GoString() string {
	return s.String()
}

func (s *ExportCardSmsStatisticsRequest) SetCustomTmpCode(v string) *ExportCardSmsStatisticsRequest {
	s.CustomTmpCode = &v
	return s
}

func (s *ExportCardSmsStatisticsRequest) SetSendDateEnd(v string) *ExportCardSmsStatisticsRequest {
	s.SendDateEnd = &v
	return s
}

func (s *ExportCardSmsStatisticsRequest) SetSendDateStart(v string) *ExportCardSmsStatisticsRequest {
	s.SendDateStart = &v
	return s
}

func (s *ExportCardSmsStatisticsRequest) SetSignName(v string) *ExportCardSmsStatisticsRequest {
	s.SignName = &v
	return s
}

func (s *ExportCardSmsStatisticsRequest) SetTmpCode(v string) *ExportCardSmsStatisticsRequest {
	s.TmpCode = &v
	return s
}

func (s *ExportCardSmsStatisticsRequest) SetTmpName(v string) *ExportCardSmsStatisticsRequest {
	s.TmpName = &v
	return s
}

type ExportCardSmsStatisticsResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *string `json:"Model,omitempty" xml:"Model,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportCardSmsStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *ExportCardSmsStatisticsResponseBody) SetCode(v string) *ExportCardSmsStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *ExportCardSmsStatisticsResponseBody) SetModel(v string) *ExportCardSmsStatisticsResponseBody {
	s.Model = &v
	return s
}

func (s *ExportCardSmsStatisticsResponseBody) SetRequestId(v string) *ExportCardSmsStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportCardSmsStatisticsResponseBody) SetSuccess(v bool) *ExportCardSmsStatisticsResponseBody {
	s.Success = &v
	return s
}

type ExportCardSmsStatisticsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportCardSmsStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportCardSmsStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsStatisticsResponse) GoString() string {
	return s.String()
}

func (s *ExportCardSmsStatisticsResponse) SetHeaders(v map[string]*string) *ExportCardSmsStatisticsResponse {
	s.Headers = v
	return s
}

func (s *ExportCardSmsStatisticsResponse) SetStatusCode(v int32) *ExportCardSmsStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportCardSmsStatisticsResponse) SetBody(v *ExportCardSmsStatisticsResponseBody) *ExportCardSmsStatisticsResponse {
	s.Body = v
	return s
}

type ExportCardSmsStatisticsSendRequest struct {
	CustomTmpCode *string `json:"CustomTmpCode,omitempty" xml:"CustomTmpCode,omitempty"`
	// This parameter is required.
	SendDateEnd *string `json:"SendDateEnd,omitempty" xml:"SendDateEnd,omitempty"`
	// This parameter is required.
	SendDateStart *string `json:"SendDateStart,omitempty" xml:"SendDateStart,omitempty"`
	SignName      *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TmpCode       *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
}

func (s ExportCardSmsStatisticsSendRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsStatisticsSendRequest) GoString() string {
	return s.String()
}

func (s *ExportCardSmsStatisticsSendRequest) SetCustomTmpCode(v string) *ExportCardSmsStatisticsSendRequest {
	s.CustomTmpCode = &v
	return s
}

func (s *ExportCardSmsStatisticsSendRequest) SetSendDateEnd(v string) *ExportCardSmsStatisticsSendRequest {
	s.SendDateEnd = &v
	return s
}

func (s *ExportCardSmsStatisticsSendRequest) SetSendDateStart(v string) *ExportCardSmsStatisticsSendRequest {
	s.SendDateStart = &v
	return s
}

func (s *ExportCardSmsStatisticsSendRequest) SetSignName(v string) *ExportCardSmsStatisticsSendRequest {
	s.SignName = &v
	return s
}

func (s *ExportCardSmsStatisticsSendRequest) SetTmpCode(v string) *ExportCardSmsStatisticsSendRequest {
	s.TmpCode = &v
	return s
}

type ExportCardSmsStatisticsSendResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *string `json:"Model,omitempty" xml:"Model,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportCardSmsStatisticsSendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsStatisticsSendResponseBody) GoString() string {
	return s.String()
}

func (s *ExportCardSmsStatisticsSendResponseBody) SetCode(v string) *ExportCardSmsStatisticsSendResponseBody {
	s.Code = &v
	return s
}

func (s *ExportCardSmsStatisticsSendResponseBody) SetModel(v string) *ExportCardSmsStatisticsSendResponseBody {
	s.Model = &v
	return s
}

func (s *ExportCardSmsStatisticsSendResponseBody) SetRequestId(v string) *ExportCardSmsStatisticsSendResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportCardSmsStatisticsSendResponseBody) SetSuccess(v bool) *ExportCardSmsStatisticsSendResponseBody {
	s.Success = &v
	return s
}

type ExportCardSmsStatisticsSendResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportCardSmsStatisticsSendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportCardSmsStatisticsSendResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportCardSmsStatisticsSendResponse) GoString() string {
	return s.String()
}

func (s *ExportCardSmsStatisticsSendResponse) SetHeaders(v map[string]*string) *ExportCardSmsStatisticsSendResponse {
	s.Headers = v
	return s
}

func (s *ExportCardSmsStatisticsSendResponse) SetStatusCode(v int32) *ExportCardSmsStatisticsSendResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportCardSmsStatisticsSendResponse) SetBody(v *ExportCardSmsStatisticsSendResponseBody) *ExportCardSmsStatisticsSendResponse {
	s.Body = v
	return s
}

type ExportTmpEffectReportDataRequest struct {
	// This parameter is required.
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// This parameter is required.
	StartDate  *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	TmpCode    *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpName    *string `json:"TmpName,omitempty" xml:"TmpName,omitempty"`
	VendorCode *string `json:"VendorCode,omitempty" xml:"VendorCode,omitempty"`
	VendorName *string `json:"VendorName,omitempty" xml:"VendorName,omitempty"`
}

func (s ExportTmpEffectReportDataRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportTmpEffectReportDataRequest) GoString() string {
	return s.String()
}

func (s *ExportTmpEffectReportDataRequest) SetEndDate(v string) *ExportTmpEffectReportDataRequest {
	s.EndDate = &v
	return s
}

func (s *ExportTmpEffectReportDataRequest) SetStartDate(v string) *ExportTmpEffectReportDataRequest {
	s.StartDate = &v
	return s
}

func (s *ExportTmpEffectReportDataRequest) SetTmpCode(v string) *ExportTmpEffectReportDataRequest {
	s.TmpCode = &v
	return s
}

func (s *ExportTmpEffectReportDataRequest) SetTmpName(v string) *ExportTmpEffectReportDataRequest {
	s.TmpName = &v
	return s
}

func (s *ExportTmpEffectReportDataRequest) SetVendorCode(v string) *ExportTmpEffectReportDataRequest {
	s.VendorCode = &v
	return s
}

func (s *ExportTmpEffectReportDataRequest) SetVendorName(v string) *ExportTmpEffectReportDataRequest {
	s.VendorName = &v
	return s
}

type ExportTmpEffectReportDataResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *string `json:"Model,omitempty" xml:"Model,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ExportTmpEffectReportDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportTmpEffectReportDataResponseBody) GoString() string {
	return s.String()
}

func (s *ExportTmpEffectReportDataResponseBody) SetCode(v string) *ExportTmpEffectReportDataResponseBody {
	s.Code = &v
	return s
}

func (s *ExportTmpEffectReportDataResponseBody) SetModel(v string) *ExportTmpEffectReportDataResponseBody {
	s.Model = &v
	return s
}

func (s *ExportTmpEffectReportDataResponseBody) SetRequestId(v string) *ExportTmpEffectReportDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportTmpEffectReportDataResponseBody) SetSuccess(v bool) *ExportTmpEffectReportDataResponseBody {
	s.Success = &v
	return s
}

type ExportTmpEffectReportDataResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportTmpEffectReportDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportTmpEffectReportDataResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportTmpEffectReportDataResponse) GoString() string {
	return s.String()
}

func (s *ExportTmpEffectReportDataResponse) SetHeaders(v map[string]*string) *ExportTmpEffectReportDataResponse {
	s.Headers = v
	return s
}

func (s *ExportTmpEffectReportDataResponse) SetStatusCode(v int32) *ExportTmpEffectReportDataResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportTmpEffectReportDataResponse) SetBody(v *ExportTmpEffectReportDataResponseBody) *ExportTmpEffectReportDataResponse {
	s.Body = v
	return s
}

type GetLetterOfAuthorizationRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
}

func (s GetLetterOfAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLetterOfAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *GetLetterOfAuthorizationRequest) SetOwnerId(v int64) *GetLetterOfAuthorizationRequest {
	s.OwnerId = &v
	return s
}

func (s *GetLetterOfAuthorizationRequest) SetProdCode(v string) *GetLetterOfAuthorizationRequest {
	s.ProdCode = &v
	return s
}

func (s *GetLetterOfAuthorizationRequest) SetResourceOwnerAccount(v string) *GetLetterOfAuthorizationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetLetterOfAuthorizationRequest) SetResourceOwnerId(v int64) *GetLetterOfAuthorizationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetLetterOfAuthorizationRequest) SetSignName(v string) *GetLetterOfAuthorizationRequest {
	s.SignName = &v
	return s
}

type GetLetterOfAuthorizationResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	FileUrl   *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetLetterOfAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLetterOfAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *GetLetterOfAuthorizationResponseBody) SetCode(v string) *GetLetterOfAuthorizationResponseBody {
	s.Code = &v
	return s
}

func (s *GetLetterOfAuthorizationResponseBody) SetFileUrl(v string) *GetLetterOfAuthorizationResponseBody {
	s.FileUrl = &v
	return s
}

func (s *GetLetterOfAuthorizationResponseBody) SetMessage(v string) *GetLetterOfAuthorizationResponseBody {
	s.Message = &v
	return s
}

func (s *GetLetterOfAuthorizationResponseBody) SetRequestId(v string) *GetLetterOfAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLetterOfAuthorizationResponseBody) SetSuccess(v string) *GetLetterOfAuthorizationResponseBody {
	s.Success = &v
	return s
}

type GetLetterOfAuthorizationResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLetterOfAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLetterOfAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLetterOfAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *GetLetterOfAuthorizationResponse) SetHeaders(v map[string]*string) *GetLetterOfAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *GetLetterOfAuthorizationResponse) SetStatusCode(v int32) *GetLetterOfAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLetterOfAuthorizationResponse) SetBody(v *GetLetterOfAuthorizationResponseBody) *GetLetterOfAuthorizationResponse {
	s.Body = v
	return s
}

type ListPushMsgRequest struct {
	Id                   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	MsgType              *string `json:"MsgType,omitempty" xml:"MsgType,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PushTime             *string `json:"PushTime,omitempty" xml:"PushTime,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListPushMsgRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPushMsgRequest) GoString() string {
	return s.String()
}

func (s *ListPushMsgRequest) SetId(v string) *ListPushMsgRequest {
	s.Id = &v
	return s
}

func (s *ListPushMsgRequest) SetMsgType(v string) *ListPushMsgRequest {
	s.MsgType = &v
	return s
}

func (s *ListPushMsgRequest) SetName(v string) *ListPushMsgRequest {
	s.Name = &v
	return s
}

func (s *ListPushMsgRequest) SetOwnerId(v int64) *ListPushMsgRequest {
	s.OwnerId = &v
	return s
}

func (s *ListPushMsgRequest) SetPushTime(v string) *ListPushMsgRequest {
	s.PushTime = &v
	return s
}

func (s *ListPushMsgRequest) SetResourceOwnerAccount(v string) *ListPushMsgRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListPushMsgRequest) SetResourceOwnerId(v int64) *ListPushMsgRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListPushMsgRequest) SetStatus(v string) *ListPushMsgRequest {
	s.Status = &v
	return s
}

type ListPushMsgResponseBody struct {
	Code      *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                       `json:"Message,omitempty" xml:"Message,omitempty"`
	Model     *ListPushMsgResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Struct"`
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPushMsgResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPushMsgResponseBody) GoString() string {
	return s.String()
}

func (s *ListPushMsgResponseBody) SetCode(v string) *ListPushMsgResponseBody {
	s.Code = &v
	return s
}

func (s *ListPushMsgResponseBody) SetMessage(v string) *ListPushMsgResponseBody {
	s.Message = &v
	return s
}

func (s *ListPushMsgResponseBody) SetModel(v *ListPushMsgResponseBodyModel) *ListPushMsgResponseBody {
	s.Model = v
	return s
}

func (s *ListPushMsgResponseBody) SetRequestId(v string) *ListPushMsgResponseBody {
	s.RequestId = &v
	return s
}

type ListPushMsgResponseBodyModel struct {
	CreatedDate    *string `json:"CreatedDate,omitempty" xml:"CreatedDate,omitempty"`
	CreatedDateStr *string `json:"CreatedDateStr,omitempty" xml:"CreatedDateStr,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
	PushTime       *string `json:"PushTime,omitempty" xml:"PushTime,omitempty"`
	PushTimeStr    *string `json:"PushTimeStr,omitempty" xml:"PushTimeStr,omitempty"`
	Spec           *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusStr      *string `json:"StatusStr,omitempty" xml:"StatusStr,omitempty"`
	Title          *string `json:"Title,omitempty" xml:"Title,omitempty"`
	UserNum        *int64  `json:"UserNum,omitempty" xml:"UserNum,omitempty"`
}

func (s ListPushMsgResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s ListPushMsgResponseBodyModel) GoString() string {
	return s.String()
}

func (s *ListPushMsgResponseBodyModel) SetCreatedDate(v string) *ListPushMsgResponseBodyModel {
	s.CreatedDate = &v
	return s
}

func (s *ListPushMsgResponseBodyModel) SetCreatedDateStr(v string) *ListPushMsgResponseBodyModel {
	s.CreatedDateStr = &v
	return s
}

func (s *ListPushMsgResponseBodyModel) SetId(v string) *ListPushMsgResponseBodyModel {
	s.Id = &v
	return s
}

func (s *ListPushMsgResponseBodyModel) SetPushTime(v string) *ListPushMsgResponseBodyModel {
	s.PushTime = &v
	return s
}

func (s *ListPushMsgResponseBodyModel) SetPushTimeStr(v string) *ListPushMsgResponseBodyModel {
	s.PushTimeStr = &v
	return s
}

func (s *ListPushMsgResponseBodyModel) SetSpec(v string) *ListPushMsgResponseBodyModel {
	s.Spec = &v
	return s
}

func (s *ListPushMsgResponseBodyModel) SetStatus(v string) *ListPushMsgResponseBodyModel {
	s.Status = &v
	return s
}

func (s *ListPushMsgResponseBodyModel) SetStatusStr(v string) *ListPushMsgResponseBodyModel {
	s.StatusStr = &v
	return s
}

func (s *ListPushMsgResponseBodyModel) SetTitle(v string) *ListPushMsgResponseBodyModel {
	s.Title = &v
	return s
}

func (s *ListPushMsgResponseBodyModel) SetUserNum(v int64) *ListPushMsgResponseBodyModel {
	s.UserNum = &v
	return s
}

type ListPushMsgResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPushMsgResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPushMsgResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPushMsgResponse) GoString() string {
	return s.String()
}

func (s *ListPushMsgResponse) SetHeaders(v map[string]*string) *ListPushMsgResponse {
	s.Headers = v
	return s
}

func (s *ListPushMsgResponse) SetStatusCode(v int32) *ListPushMsgResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPushMsgResponse) SetBody(v *ListPushMsgResponseBody) *ListPushMsgResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	Category  *string `json:"Category,omitempty" xml:"Category,omitempty"`
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageSize  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode  *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	ResourceType *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Scope        *string                       `json:"Scope,omitempty" xml:"Scope,omitempty"`
	Tag          []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// This parameter is required.
	TagOwnerUid *int64 `json:"TagOwnerUid,omitempty" xml:"TagOwnerUid,omitempty"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetCategory(v string) *ListTagResourcesRequest {
	s.Category = &v
	return s
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetOwnerId(v int64) *ListTagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetPageSize(v int32) *ListTagResourcesRequest {
	s.PageSize = &v
	return s
}

func (s *ListTagResourcesRequest) SetProdCode(v string) *ListTagResourcesRequest {
	s.ProdCode = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerAccount(v string) *ListTagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerId(v int64) *ListTagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetScope(v string) *ListTagResourcesRequest {
	s.Scope = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

func (s *ListTagResourcesRequest) SetTagOwnerUid(v int64) *ListTagResourcesRequest {
	s.TagOwnerUid = &v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	Code         *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	NextToken    *string                                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetCode(v string) *ListTagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type OpenShortUrlProductRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s OpenShortUrlProductRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenShortUrlProductRequest) GoString() string {
	return s.String()
}

func (s *OpenShortUrlProductRequest) SetOwnerId(v int64) *OpenShortUrlProductRequest {
	s.OwnerId = &v
	return s
}

func (s *OpenShortUrlProductRequest) SetResourceOwnerAccount(v string) *OpenShortUrlProductRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *OpenShortUrlProductRequest) SetResourceOwnerId(v int64) *OpenShortUrlProductRequest {
	s.ResourceOwnerId = &v
	return s
}

type OpenShortUrlProductResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenShortUrlProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenShortUrlProductResponseBody) GoString() string {
	return s.String()
}

func (s *OpenShortUrlProductResponseBody) SetCode(v string) *OpenShortUrlProductResponseBody {
	s.Code = &v
	return s
}

func (s *OpenShortUrlProductResponseBody) SetData(v string) *OpenShortUrlProductResponseBody {
	s.Data = &v
	return s
}

func (s *OpenShortUrlProductResponseBody) SetRequestId(v string) *OpenShortUrlProductResponseBody {
	s.RequestId = &v
	return s
}

type OpenShortUrlProductResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenShortUrlProductResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenShortUrlProductResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenShortUrlProductResponse) GoString() string {
	return s.String()
}

func (s *OpenShortUrlProductResponse) SetHeaders(v map[string]*string) *OpenShortUrlProductResponse {
	s.Headers = v
	return s
}

func (s *OpenShortUrlProductResponse) SetStatusCode(v int32) *OpenShortUrlProductResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenShortUrlProductResponse) SetBody(v *OpenShortUrlProductResponseBody) *OpenShortUrlProductResponse {
	s.Body = v
	return s
}

type OpenShortUrlProductNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s OpenShortUrlProductNewRequest) String() string {
	return tea.Prettify(s)
}

func (s OpenShortUrlProductNewRequest) GoString() string {
	return s.String()
}

func (s *OpenShortUrlProductNewRequest) SetOwnerId(v int64) *OpenShortUrlProductNewRequest {
	s.OwnerId = &v
	return s
}

func (s *OpenShortUrlProductNewRequest) SetProdCode(v string) *OpenShortUrlProductNewRequest {
	s.ProdCode = &v
	return s
}

func (s *OpenShortUrlProductNewRequest) SetResourceOwnerAccount(v string) *OpenShortUrlProductNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *OpenShortUrlProductNewRequest) SetResourceOwnerId(v int64) *OpenShortUrlProductNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type OpenShortUrlProductNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Rusult    *bool   `json:"Rusult,omitempty" xml:"Rusult,omitempty"`
}

func (s OpenShortUrlProductNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenShortUrlProductNewResponseBody) GoString() string {
	return s.String()
}

func (s *OpenShortUrlProductNewResponseBody) SetRequestId(v string) *OpenShortUrlProductNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpenShortUrlProductNewResponseBody) SetRusult(v bool) *OpenShortUrlProductNewResponseBody {
	s.Rusult = &v
	return s
}

type OpenShortUrlProductNewResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenShortUrlProductNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenShortUrlProductNewResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenShortUrlProductNewResponse) GoString() string {
	return s.String()
}

func (s *OpenShortUrlProductNewResponse) SetHeaders(v map[string]*string) *OpenShortUrlProductNewResponse {
	s.Headers = v
	return s
}

func (s *OpenShortUrlProductNewResponse) SetStatusCode(v int32) *OpenShortUrlProductNewResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenShortUrlProductNewResponse) SetBody(v *OpenShortUrlProductNewResponseBody) *OpenShortUrlProductNewResponse {
	s.Body = v
	return s
}

type OpencPrevFlagNewRequest struct {
	// This parameter is required.
	IsOpen               *int32  `json:"IsOpen,omitempty" xml:"IsOpen,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s OpencPrevFlagNewRequest) String() string {
	return tea.Prettify(s)
}

func (s OpencPrevFlagNewRequest) GoString() string {
	return s.String()
}

func (s *OpencPrevFlagNewRequest) SetIsOpen(v int32) *OpencPrevFlagNewRequest {
	s.IsOpen = &v
	return s
}

func (s *OpencPrevFlagNewRequest) SetOwnerId(v int64) *OpencPrevFlagNewRequest {
	s.OwnerId = &v
	return s
}

func (s *OpencPrevFlagNewRequest) SetProdCode(v string) *OpencPrevFlagNewRequest {
	s.ProdCode = &v
	return s
}

func (s *OpencPrevFlagNewRequest) SetResourceOwnerAccount(v string) *OpencPrevFlagNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *OpencPrevFlagNewRequest) SetResourceOwnerId(v int64) *OpencPrevFlagNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type OpencPrevFlagNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s OpencPrevFlagNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpencPrevFlagNewResponseBody) GoString() string {
	return s.String()
}

func (s *OpencPrevFlagNewResponseBody) SetRequestId(v string) *OpencPrevFlagNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *OpencPrevFlagNewResponseBody) SetResult(v string) *OpencPrevFlagNewResponseBody {
	s.Result = &v
	return s
}

type OpencPrevFlagNewResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpencPrevFlagNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpencPrevFlagNewResponse) String() string {
	return tea.Prettify(s)
}

func (s OpencPrevFlagNewResponse) GoString() string {
	return s.String()
}

func (s *OpencPrevFlagNewResponse) SetHeaders(v map[string]*string) *OpencPrevFlagNewResponse {
	s.Headers = v
	return s
}

func (s *OpencPrevFlagNewResponse) SetStatusCode(v int32) *OpencPrevFlagNewResponse {
	s.StatusCode = &v
	return s
}

func (s *OpencPrevFlagNewResponse) SetBody(v *OpencPrevFlagNewResponseBody) *OpencPrevFlagNewResponse {
	s.Body = v
	return s
}

type QueryAnyParamTemplateUserRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryAnyParamTemplateUserRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAnyParamTemplateUserRequest) GoString() string {
	return s.String()
}

func (s *QueryAnyParamTemplateUserRequest) SetOwnerId(v int64) *QueryAnyParamTemplateUserRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryAnyParamTemplateUserRequest) SetProdCode(v string) *QueryAnyParamTemplateUserRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryAnyParamTemplateUserRequest) SetResourceOwnerAccount(v string) *QueryAnyParamTemplateUserRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryAnyParamTemplateUserRequest) SetResourceOwnerId(v int64) *QueryAnyParamTemplateUserRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryAnyParamTemplateUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryAnyParamTemplateUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAnyParamTemplateUserResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAnyParamTemplateUserResponseBody) SetRequestId(v string) *QueryAnyParamTemplateUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAnyParamTemplateUserResponseBody) SetCode(v string) *QueryAnyParamTemplateUserResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAnyParamTemplateUserResponseBody) SetData(v string) *QueryAnyParamTemplateUserResponseBody {
	s.Data = &v
	return s
}

type QueryAnyParamTemplateUserResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAnyParamTemplateUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAnyParamTemplateUserResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAnyParamTemplateUserResponse) GoString() string {
	return s.String()
}

func (s *QueryAnyParamTemplateUserResponse) SetHeaders(v map[string]*string) *QueryAnyParamTemplateUserResponse {
	s.Headers = v
	return s
}

func (s *QueryAnyParamTemplateUserResponse) SetStatusCode(v int32) *QueryAnyParamTemplateUserResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAnyParamTemplateUserResponse) SetBody(v *QueryAnyParamTemplateUserResponseBody) *QueryAnyParamTemplateUserResponse {
	s.Body = v
	return s
}

type QueryAuthorizationRequest struct {
	AuthorizeCode        *string `json:"AuthorizeCode,omitempty" xml:"AuthorizeCode,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthorizationRequest) SetAuthorizeCode(v string) *QueryAuthorizationRequest {
	s.AuthorizeCode = &v
	return s
}

func (s *QueryAuthorizationRequest) SetOwnerId(v int64) *QueryAuthorizationRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryAuthorizationRequest) SetResourceOwnerAccount(v string) *QueryAuthorizationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryAuthorizationRequest) SetResourceOwnerId(v int64) *QueryAuthorizationRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryAuthorizationResponseBody struct {
	Code      *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*QueryAuthorizationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QueryAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAuthorizationResponseBody) SetCode(v string) *QueryAuthorizationResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAuthorizationResponseBody) SetMessage(v string) *QueryAuthorizationResponseBody {
	s.Message = &v
	return s
}

func (s *QueryAuthorizationResponseBody) SetRequestId(v string) *QueryAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAuthorizationResponseBody) SetResult(v []*QueryAuthorizationResponseBodyResult) *QueryAuthorizationResponseBody {
	s.Result = v
	return s
}

type QueryAuthorizationResponseBodyResult struct {
	AliyunUid       *int64  `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	AuthorizeCode   *string `json:"AuthorizeCode,omitempty" xml:"AuthorizeCode,omitempty"`
	AuthorizeStatus *bool   `json:"AuthorizeStatus,omitempty" xml:"AuthorizeStatus,omitempty"`
	AuthorizeTime   *string `json:"AuthorizeTime,omitempty" xml:"AuthorizeTime,omitempty"`
	ProductCode     *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	UnAuthorizeTime *string `json:"UnAuthorizeTime,omitempty" xml:"UnAuthorizeTime,omitempty"`
}

func (s QueryAuthorizationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthorizationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QueryAuthorizationResponseBodyResult) SetAliyunUid(v int64) *QueryAuthorizationResponseBodyResult {
	s.AliyunUid = &v
	return s
}

func (s *QueryAuthorizationResponseBodyResult) SetAuthorizeCode(v string) *QueryAuthorizationResponseBodyResult {
	s.AuthorizeCode = &v
	return s
}

func (s *QueryAuthorizationResponseBodyResult) SetAuthorizeStatus(v bool) *QueryAuthorizationResponseBodyResult {
	s.AuthorizeStatus = &v
	return s
}

func (s *QueryAuthorizationResponseBodyResult) SetAuthorizeTime(v string) *QueryAuthorizationResponseBodyResult {
	s.AuthorizeTime = &v
	return s
}

func (s *QueryAuthorizationResponseBodyResult) SetProductCode(v string) *QueryAuthorizationResponseBodyResult {
	s.ProductCode = &v
	return s
}

func (s *QueryAuthorizationResponseBodyResult) SetUnAuthorizeTime(v string) *QueryAuthorizationResponseBodyResult {
	s.UnAuthorizeTime = &v
	return s
}

type QueryAuthorizationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthorizationResponse) SetHeaders(v map[string]*string) *QueryAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *QueryAuthorizationResponse) SetStatusCode(v int32) *QueryAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAuthorizationResponse) SetBody(v *QueryAuthorizationResponseBody) *QueryAuthorizationResponse {
	s.Body = v
	return s
}

type QueryBillingStatisticsRequest struct {
	BillCycle            *string `json:"BillCycle,omitempty" xml:"BillCycle,omitempty"`
	ItemName             *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryBillingStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBillingStatisticsRequest) GoString() string {
	return s.String()
}

func (s *QueryBillingStatisticsRequest) SetBillCycle(v string) *QueryBillingStatisticsRequest {
	s.BillCycle = &v
	return s
}

func (s *QueryBillingStatisticsRequest) SetItemName(v string) *QueryBillingStatisticsRequest {
	s.ItemName = &v
	return s
}

func (s *QueryBillingStatisticsRequest) SetOwnerId(v int64) *QueryBillingStatisticsRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryBillingStatisticsRequest) SetProdCode(v string) *QueryBillingStatisticsRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryBillingStatisticsRequest) SetResourceOwnerAccount(v string) *QueryBillingStatisticsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryBillingStatisticsRequest) SetResourceOwnerId(v int64) *QueryBillingStatisticsRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryBillingStatisticsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryBillingStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryBillingStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryBillingStatisticsResponseBody) SetRequestId(v string) *QueryBillingStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryBillingStatisticsResponseBody) SetCode(v string) *QueryBillingStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryBillingStatisticsResponseBody) SetData(v string) *QueryBillingStatisticsResponseBody {
	s.Data = &v
	return s
}

type QueryBillingStatisticsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryBillingStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryBillingStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBillingStatisticsResponse) GoString() string {
	return s.String()
}

func (s *QueryBillingStatisticsResponse) SetHeaders(v map[string]*string) *QueryBillingStatisticsResponse {
	s.Headers = v
	return s
}

func (s *QueryBillingStatisticsResponse) SetStatusCode(v int32) *QueryBillingStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryBillingStatisticsResponse) SetBody(v *QueryBillingStatisticsResponseBody) *QueryBillingStatisticsResponse {
	s.Body = v
	return s
}

type QueryCardMessageQueueRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	QueueTypes           *string `json:"QueueTypes,omitempty" xml:"QueueTypes,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryCardMessageQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCardMessageQueueRequest) GoString() string {
	return s.String()
}

func (s *QueryCardMessageQueueRequest) SetOwnerId(v int64) *QueryCardMessageQueueRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCardMessageQueueRequest) SetProdCode(v string) *QueryCardMessageQueueRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryCardMessageQueueRequest) SetQueueTypes(v string) *QueryCardMessageQueueRequest {
	s.QueueTypes = &v
	return s
}

func (s *QueryCardMessageQueueRequest) SetResourceOwnerAccount(v string) *QueryCardMessageQueueRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryCardMessageQueueRequest) SetResourceOwnerId(v int64) *QueryCardMessageQueueRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryCardMessageQueueResponseBody struct {
	List      []*QueryCardMessageQueueResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryCardMessageQueueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCardMessageQueueResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCardMessageQueueResponseBody) SetList(v []*QueryCardMessageQueueResponseBodyList) *QueryCardMessageQueueResponseBody {
	s.List = v
	return s
}

func (s *QueryCardMessageQueueResponseBody) SetRequestId(v string) *QueryCardMessageQueueResponseBody {
	s.RequestId = &v
	return s
}

type QueryCardMessageQueueResponseBodyList struct {
	IsCreated *bool   `json:"IsCreated,omitempty" xml:"IsCreated,omitempty"`
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	QueueType *string `json:"QueueType,omitempty" xml:"QueueType,omitempty"`
	Region    *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s QueryCardMessageQueueResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryCardMessageQueueResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryCardMessageQueueResponseBodyList) SetIsCreated(v bool) *QueryCardMessageQueueResponseBodyList {
	s.IsCreated = &v
	return s
}

func (s *QueryCardMessageQueueResponseBodyList) SetQueueName(v string) *QueryCardMessageQueueResponseBodyList {
	s.QueueName = &v
	return s
}

func (s *QueryCardMessageQueueResponseBodyList) SetQueueType(v string) *QueryCardMessageQueueResponseBodyList {
	s.QueueType = &v
	return s
}

func (s *QueryCardMessageQueueResponseBodyList) SetRegion(v string) *QueryCardMessageQueueResponseBodyList {
	s.Region = &v
	return s
}

type QueryCardMessageQueueResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCardMessageQueueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCardMessageQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCardMessageQueueResponse) GoString() string {
	return s.String()
}

func (s *QueryCardMessageQueueResponse) SetHeaders(v map[string]*string) *QueryCardMessageQueueResponse {
	s.Headers = v
	return s
}

func (s *QueryCardMessageQueueResponse) SetStatusCode(v int32) *QueryCardMessageQueueResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCardMessageQueueResponse) SetBody(v *QueryCardMessageQueueResponseBody) *QueryCardMessageQueueResponse {
	s.Body = v
	return s
}

type QueryCardSendExportInfoRequest struct {
	PageNo   *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status   *int64 `json:"Status,omitempty" xml:"Status,omitempty"`
	Type     *int64 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryCardSendExportInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSendExportInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryCardSendExportInfoRequest) SetPageNo(v int64) *QueryCardSendExportInfoRequest {
	s.PageNo = &v
	return s
}

func (s *QueryCardSendExportInfoRequest) SetPageSize(v int64) *QueryCardSendExportInfoRequest {
	s.PageSize = &v
	return s
}

func (s *QueryCardSendExportInfoRequest) SetStatus(v int64) *QueryCardSendExportInfoRequest {
	s.Status = &v
	return s
}

func (s *QueryCardSendExportInfoRequest) SetType(v int64) *QueryCardSendExportInfoRequest {
	s.Type = &v
	return s
}

type QueryCardSendExportInfoResponseBody struct {
	Code      *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *QueryCardSendExportInfoResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Struct"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCardSendExportInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSendExportInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCardSendExportInfoResponseBody) SetCode(v string) *QueryCardSendExportInfoResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBody) SetModel(v *QueryCardSendExportInfoResponseBodyModel) *QueryCardSendExportInfoResponseBody {
	s.Model = v
	return s
}

func (s *QueryCardSendExportInfoResponseBody) SetRequestId(v string) *QueryCardSendExportInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBody) SetSuccess(v bool) *QueryCardSendExportInfoResponseBody {
	s.Success = &v
	return s
}

type QueryCardSendExportInfoResponseBodyModel struct {
	PageNo     *int64                                             `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *int64                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*QueryCardSendExportInfoResponseBodyModelRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryCardSendExportInfoResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSendExportInfoResponseBodyModel) GoString() string {
	return s.String()
}

func (s *QueryCardSendExportInfoResponseBodyModel) SetPageNo(v int64) *QueryCardSendExportInfoResponseBodyModel {
	s.PageNo = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModel) SetPageSize(v int64) *QueryCardSendExportInfoResponseBodyModel {
	s.PageSize = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModel) SetRecords(v []*QueryCardSendExportInfoResponseBodyModelRecords) *QueryCardSendExportInfoResponseBodyModel {
	s.Records = v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModel) SetTotalCount(v int64) *QueryCardSendExportInfoResponseBodyModel {
	s.TotalCount = &v
	return s
}

type QueryCardSendExportInfoResponseBodyModelRecords struct {
	Ext         *string `json:"Ext,omitempty" xml:"Ext,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OssUrl      *string `json:"OssUrl,omitempty" xml:"OssUrl,omitempty"`
	Pid         *int64  `json:"Pid,omitempty" xml:"Pid,omitempty"`
	Status      *int64  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type        *int64  `json:"Type,omitempty" xml:"Type,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryCardSendExportInfoResponseBodyModelRecords) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSendExportInfoResponseBodyModelRecords) GoString() string {
	return s.String()
}

func (s *QueryCardSendExportInfoResponseBodyModelRecords) SetExt(v string) *QueryCardSendExportInfoResponseBodyModelRecords {
	s.Ext = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModelRecords) SetFileName(v string) *QueryCardSendExportInfoResponseBodyModelRecords {
	s.FileName = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModelRecords) SetGmtCreate(v int64) *QueryCardSendExportInfoResponseBodyModelRecords {
	s.GmtCreate = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModelRecords) SetGmtModified(v int64) *QueryCardSendExportInfoResponseBodyModelRecords {
	s.GmtModified = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModelRecords) SetId(v int64) *QueryCardSendExportInfoResponseBodyModelRecords {
	s.Id = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModelRecords) SetOssUrl(v string) *QueryCardSendExportInfoResponseBodyModelRecords {
	s.OssUrl = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModelRecords) SetPid(v int64) *QueryCardSendExportInfoResponseBodyModelRecords {
	s.Pid = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModelRecords) SetStatus(v int64) *QueryCardSendExportInfoResponseBodyModelRecords {
	s.Status = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModelRecords) SetType(v int64) *QueryCardSendExportInfoResponseBodyModelRecords {
	s.Type = &v
	return s
}

func (s *QueryCardSendExportInfoResponseBodyModelRecords) SetUserId(v string) *QueryCardSendExportInfoResponseBodyModelRecords {
	s.UserId = &v
	return s
}

type QueryCardSendExportInfoResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCardSendExportInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCardSendExportInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSendExportInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryCardSendExportInfoResponse) SetHeaders(v map[string]*string) *QueryCardSendExportInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryCardSendExportInfoResponse) SetStatusCode(v int32) *QueryCardSendExportInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCardSendExportInfoResponse) SetBody(v *QueryCardSendExportInfoResponseBody) *QueryCardSendExportInfoResponse {
	s.Body = v
	return s
}

type QueryCardSmsHistoryRequest struct {
	ApiSend          *int64  `json:"ApiSend,omitempty" xml:"ApiSend,omitempty"`
	CardTemplateType *string `json:"CardTemplateType,omitempty" xml:"CardTemplateType,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	MaxId            *int64  `json:"MaxId,omitempty" xml:"MaxId,omitempty"`
	MinId            *int64  `json:"MinId,omitempty" xml:"MinId,omitempty"`
	PageNo           *int64  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize         *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ReceiveState     *int64  `json:"ReceiveState,omitempty" xml:"ReceiveState,omitempty"`
	Receiver         *string `json:"Receiver,omitempty" xml:"Receiver,omitempty"`
	RenderState      *int64  `json:"RenderState,omitempty" xml:"RenderState,omitempty"`
	SignName         *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TmpCode          *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	Type             *int64  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryCardSmsHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsHistoryRequest) GoString() string {
	return s.String()
}

func (s *QueryCardSmsHistoryRequest) SetApiSend(v int64) *QueryCardSmsHistoryRequest {
	s.ApiSend = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetCardTemplateType(v string) *QueryCardSmsHistoryRequest {
	s.CardTemplateType = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetGmtCreate(v string) *QueryCardSmsHistoryRequest {
	s.GmtCreate = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetMaxId(v int64) *QueryCardSmsHistoryRequest {
	s.MaxId = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetMinId(v int64) *QueryCardSmsHistoryRequest {
	s.MinId = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetPageNo(v int64) *QueryCardSmsHistoryRequest {
	s.PageNo = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetPageSize(v int64) *QueryCardSmsHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetReceiveState(v int64) *QueryCardSmsHistoryRequest {
	s.ReceiveState = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetReceiver(v string) *QueryCardSmsHistoryRequest {
	s.Receiver = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetRenderState(v int64) *QueryCardSmsHistoryRequest {
	s.RenderState = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetSignName(v string) *QueryCardSmsHistoryRequest {
	s.SignName = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetTmpCode(v string) *QueryCardSmsHistoryRequest {
	s.TmpCode = &v
	return s
}

func (s *QueryCardSmsHistoryRequest) SetType(v int64) *QueryCardSmsHistoryRequest {
	s.Type = &v
	return s
}

type QueryCardSmsHistoryResponseBody struct {
	Code      *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *QueryCardSmsHistoryResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Struct"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCardSmsHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCardSmsHistoryResponseBody) SetCode(v string) *QueryCardSmsHistoryResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBody) SetModel(v *QueryCardSmsHistoryResponseBodyModel) *QueryCardSmsHistoryResponseBody {
	s.Model = v
	return s
}

func (s *QueryCardSmsHistoryResponseBody) SetRequestId(v string) *QueryCardSmsHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBody) SetSuccess(v bool) *QueryCardSmsHistoryResponseBody {
	s.Success = &v
	return s
}

type QueryCardSmsHistoryResponseBodyModel struct {
	PageNo     *int64                                         `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *int64                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*QueryCardSmsHistoryResponseBodyModelRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryCardSmsHistoryResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsHistoryResponseBodyModel) GoString() string {
	return s.String()
}

func (s *QueryCardSmsHistoryResponseBodyModel) SetPageNo(v int64) *QueryCardSmsHistoryResponseBodyModel {
	s.PageNo = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModel) SetPageSize(v int64) *QueryCardSmsHistoryResponseBodyModel {
	s.PageSize = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModel) SetRecords(v []*QueryCardSmsHistoryResponseBodyModelRecords) *QueryCardSmsHistoryResponseBodyModel {
	s.Records = v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModel) SetTotalCount(v int64) *QueryCardSmsHistoryResponseBodyModel {
	s.TotalCount = &v
	return s
}

type QueryCardSmsHistoryResponseBodyModelRecords struct {
	AcceptDate       *int64  `json:"AcceptDate,omitempty" xml:"AcceptDate,omitempty"`
	ApiSend          *int64  `json:"ApiSend,omitempty" xml:"ApiSend,omitempty"`
	CardTemplateType *string `json:"CardTemplateType,omitempty" xml:"CardTemplateType,omitempty"`
	CustomTmpCode    *string `json:"CustomTmpCode,omitempty" xml:"CustomTmpCode,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	FuuId            *string `json:"FuuId,omitempty" xml:"FuuId,omitempty"`
	GmtCreate        *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsSupport        *int64  `json:"IsSupport,omitempty" xml:"IsSupport,omitempty"`
	OutId            *string `json:"OutId,omitempty" xml:"OutId,omitempty"`
	Pid              *int64  `json:"Pid,omitempty" xml:"Pid,omitempty"`
	ReceiveState     *int64  `json:"ReceiveState,omitempty" xml:"ReceiveState,omitempty"`
	Receiver         *string `json:"Receiver,omitempty" xml:"Receiver,omitempty"`
	RenderDate       *int64  `json:"RenderDate,omitempty" xml:"RenderDate,omitempty"`
	RenderState      *int64  `json:"RenderState,omitempty" xml:"RenderState,omitempty"`
	ShortUrl         *string `json:"ShortUrl,omitempty" xml:"ShortUrl,omitempty"`
	SignName         *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SmsContent       *string `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	Suggestion       *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	TmpCode          *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpId            *string `json:"TmpId,omitempty" xml:"TmpId,omitempty"`
	TmpType          *int64  `json:"TmpType,omitempty" xml:"TmpType,omitempty"`
	TmpTypeName      *string `json:"TmpTypeName,omitempty" xml:"TmpTypeName,omitempty"`
}

func (s QueryCardSmsHistoryResponseBodyModelRecords) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsHistoryResponseBodyModelRecords) GoString() string {
	return s.String()
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetAcceptDate(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.AcceptDate = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetApiSend(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.ApiSend = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetCardTemplateType(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.CardTemplateType = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetCustomTmpCode(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.CustomTmpCode = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetDescription(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.Description = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetFuuId(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.FuuId = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetGmtCreate(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.GmtCreate = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetGmtModified(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.GmtModified = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetId(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.Id = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetIsSupport(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.IsSupport = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetOutId(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.OutId = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetPid(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.Pid = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetReceiveState(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.ReceiveState = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetReceiver(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.Receiver = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetRenderDate(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.RenderDate = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetRenderState(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.RenderState = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetShortUrl(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.ShortUrl = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetSignName(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.SignName = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetSmsContent(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.SmsContent = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetSuggestion(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.Suggestion = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetTmpCode(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.TmpCode = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetTmpId(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.TmpId = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetTmpType(v int64) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.TmpType = &v
	return s
}

func (s *QueryCardSmsHistoryResponseBodyModelRecords) SetTmpTypeName(v string) *QueryCardSmsHistoryResponseBodyModelRecords {
	s.TmpTypeName = &v
	return s
}

type QueryCardSmsHistoryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCardSmsHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCardSmsHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsHistoryResponse) GoString() string {
	return s.String()
}

func (s *QueryCardSmsHistoryResponse) SetHeaders(v map[string]*string) *QueryCardSmsHistoryResponse {
	s.Headers = v
	return s
}

func (s *QueryCardSmsHistoryResponse) SetStatusCode(v int32) *QueryCardSmsHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCardSmsHistoryResponse) SetBody(v *QueryCardSmsHistoryResponseBody) *QueryCardSmsHistoryResponse {
	s.Body = v
	return s
}

type QueryCardSmsHistoryDetailRequest struct {
	// This parameter is required.
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryCardSmsHistoryDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsHistoryDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryCardSmsHistoryDetailRequest) SetGmtCreate(v string) *QueryCardSmsHistoryDetailRequest {
	s.GmtCreate = &v
	return s
}

func (s *QueryCardSmsHistoryDetailRequest) SetId(v string) *QueryCardSmsHistoryDetailRequest {
	s.Id = &v
	return s
}

type QueryCardSmsHistoryDetailResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *string `json:"Model,omitempty" xml:"Model,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCardSmsHistoryDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsHistoryDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCardSmsHistoryDetailResponseBody) SetCode(v string) *QueryCardSmsHistoryDetailResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCardSmsHistoryDetailResponseBody) SetModel(v string) *QueryCardSmsHistoryDetailResponseBody {
	s.Model = &v
	return s
}

func (s *QueryCardSmsHistoryDetailResponseBody) SetRequestId(v string) *QueryCardSmsHistoryDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCardSmsHistoryDetailResponseBody) SetSuccess(v bool) *QueryCardSmsHistoryDetailResponseBody {
	s.Success = &v
	return s
}

type QueryCardSmsHistoryDetailResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCardSmsHistoryDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCardSmsHistoryDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsHistoryDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryCardSmsHistoryDetailResponse) SetHeaders(v map[string]*string) *QueryCardSmsHistoryDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryCardSmsHistoryDetailResponse) SetStatusCode(v int32) *QueryCardSmsHistoryDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCardSmsHistoryDetailResponse) SetBody(v *QueryCardSmsHistoryDetailResponseBody) *QueryCardSmsHistoryDetailResponse {
	s.Body = v
	return s
}

type QueryCardSmsStatisticsRequest struct {
	CustomTmpCode *string `json:"CustomTmpCode,omitempty" xml:"CustomTmpCode,omitempty"`
	// This parameter is required.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// This parameter is required.
	PageSize      *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SendDateEnd   *string `json:"SendDateEnd,omitempty" xml:"SendDateEnd,omitempty"`
	SendDateStart *string `json:"SendDateStart,omitempty" xml:"SendDateStart,omitempty"`
	SignName      *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TmpCode       *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpName       *string `json:"TmpName,omitempty" xml:"TmpName,omitempty"`
}

func (s QueryCardSmsStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsRequest) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsRequest) SetCustomTmpCode(v string) *QueryCardSmsStatisticsRequest {
	s.CustomTmpCode = &v
	return s
}

func (s *QueryCardSmsStatisticsRequest) SetPageNo(v int64) *QueryCardSmsStatisticsRequest {
	s.PageNo = &v
	return s
}

func (s *QueryCardSmsStatisticsRequest) SetPageSize(v int64) *QueryCardSmsStatisticsRequest {
	s.PageSize = &v
	return s
}

func (s *QueryCardSmsStatisticsRequest) SetSendDateEnd(v string) *QueryCardSmsStatisticsRequest {
	s.SendDateEnd = &v
	return s
}

func (s *QueryCardSmsStatisticsRequest) SetSendDateStart(v string) *QueryCardSmsStatisticsRequest {
	s.SendDateStart = &v
	return s
}

func (s *QueryCardSmsStatisticsRequest) SetSignName(v string) *QueryCardSmsStatisticsRequest {
	s.SignName = &v
	return s
}

func (s *QueryCardSmsStatisticsRequest) SetTmpCode(v string) *QueryCardSmsStatisticsRequest {
	s.TmpCode = &v
	return s
}

func (s *QueryCardSmsStatisticsRequest) SetTmpName(v string) *QueryCardSmsStatisticsRequest {
	s.TmpName = &v
	return s
}

type QueryCardSmsStatisticsResponseBody struct {
	Code      *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *QueryCardSmsStatisticsResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Struct"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCardSmsStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsResponseBody) SetCode(v string) *QueryCardSmsStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCardSmsStatisticsResponseBody) SetModel(v *QueryCardSmsStatisticsResponseBodyModel) *QueryCardSmsStatisticsResponseBody {
	s.Model = v
	return s
}

func (s *QueryCardSmsStatisticsResponseBody) SetRequestId(v string) *QueryCardSmsStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCardSmsStatisticsResponseBody) SetSuccess(v bool) *QueryCardSmsStatisticsResponseBody {
	s.Success = &v
	return s
}

type QueryCardSmsStatisticsResponseBodyModel struct {
	PageNo     *int64                                            `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *int64                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*QueryCardSmsStatisticsResponseBodyModelRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryCardSmsStatisticsResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsResponseBodyModel) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsResponseBodyModel) SetPageNo(v int64) *QueryCardSmsStatisticsResponseBodyModel {
	s.PageNo = &v
	return s
}

func (s *QueryCardSmsStatisticsResponseBodyModel) SetPageSize(v int64) *QueryCardSmsStatisticsResponseBodyModel {
	s.PageSize = &v
	return s
}

func (s *QueryCardSmsStatisticsResponseBodyModel) SetRecords(v []*QueryCardSmsStatisticsResponseBodyModelRecords) *QueryCardSmsStatisticsResponseBodyModel {
	s.Records = v
	return s
}

func (s *QueryCardSmsStatisticsResponseBodyModel) SetTotalCount(v int64) *QueryCardSmsStatisticsResponseBodyModel {
	s.TotalCount = &v
	return s
}

type QueryCardSmsStatisticsResponseBodyModelRecords struct {
	RenderSuccessTotal *int64  `json:"RenderSuccessTotal,omitempty" xml:"RenderSuccessTotal,omitempty"`
	SendDate           *string `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
	SignName           *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TmpCode            *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpName            *string `json:"TmpName,omitempty" xml:"TmpName,omitempty"`
	UrlGenerateTotal   *int64  `json:"UrlGenerateTotal,omitempty" xml:"UrlGenerateTotal,omitempty"`
}

func (s QueryCardSmsStatisticsResponseBodyModelRecords) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsResponseBodyModelRecords) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsResponseBodyModelRecords) SetRenderSuccessTotal(v int64) *QueryCardSmsStatisticsResponseBodyModelRecords {
	s.RenderSuccessTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsResponseBodyModelRecords) SetSendDate(v string) *QueryCardSmsStatisticsResponseBodyModelRecords {
	s.SendDate = &v
	return s
}

func (s *QueryCardSmsStatisticsResponseBodyModelRecords) SetSignName(v string) *QueryCardSmsStatisticsResponseBodyModelRecords {
	s.SignName = &v
	return s
}

func (s *QueryCardSmsStatisticsResponseBodyModelRecords) SetTmpCode(v string) *QueryCardSmsStatisticsResponseBodyModelRecords {
	s.TmpCode = &v
	return s
}

func (s *QueryCardSmsStatisticsResponseBodyModelRecords) SetTmpName(v string) *QueryCardSmsStatisticsResponseBodyModelRecords {
	s.TmpName = &v
	return s
}

func (s *QueryCardSmsStatisticsResponseBodyModelRecords) SetUrlGenerateTotal(v int64) *QueryCardSmsStatisticsResponseBodyModelRecords {
	s.UrlGenerateTotal = &v
	return s
}

type QueryCardSmsStatisticsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCardSmsStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCardSmsStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsResponse) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsResponse) SetHeaders(v map[string]*string) *QueryCardSmsStatisticsResponse {
	s.Headers = v
	return s
}

func (s *QueryCardSmsStatisticsResponse) SetStatusCode(v int32) *QueryCardSmsStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCardSmsStatisticsResponse) SetBody(v *QueryCardSmsStatisticsResponseBody) *QueryCardSmsStatisticsResponse {
	s.Body = v
	return s
}

type QueryCardSmsStatisticsListRequest struct {
	CustomTmpCode *string `json:"CustomTmpCode,omitempty" xml:"CustomTmpCode,omitempty"`
	SendDateEnd   *string `json:"SendDateEnd,omitempty" xml:"SendDateEnd,omitempty"`
	SendDateStart *string `json:"SendDateStart,omitempty" xml:"SendDateStart,omitempty"`
	SignName      *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TmpCode       *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpName       *string `json:"TmpName,omitempty" xml:"TmpName,omitempty"`
}

func (s QueryCardSmsStatisticsListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsListRequest) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsListRequest) SetCustomTmpCode(v string) *QueryCardSmsStatisticsListRequest {
	s.CustomTmpCode = &v
	return s
}

func (s *QueryCardSmsStatisticsListRequest) SetSendDateEnd(v string) *QueryCardSmsStatisticsListRequest {
	s.SendDateEnd = &v
	return s
}

func (s *QueryCardSmsStatisticsListRequest) SetSendDateStart(v string) *QueryCardSmsStatisticsListRequest {
	s.SendDateStart = &v
	return s
}

func (s *QueryCardSmsStatisticsListRequest) SetSignName(v string) *QueryCardSmsStatisticsListRequest {
	s.SignName = &v
	return s
}

func (s *QueryCardSmsStatisticsListRequest) SetTmpCode(v string) *QueryCardSmsStatisticsListRequest {
	s.TmpCode = &v
	return s
}

func (s *QueryCardSmsStatisticsListRequest) SetTmpName(v string) *QueryCardSmsStatisticsListRequest {
	s.TmpName = &v
	return s
}

type QueryCardSmsStatisticsListResponseBody struct {
	Code      *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     []*QueryCardSmsStatisticsListResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Repeated"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCardSmsStatisticsListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsListResponseBody) SetCode(v string) *QueryCardSmsStatisticsListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCardSmsStatisticsListResponseBody) SetModel(v []*QueryCardSmsStatisticsListResponseBodyModel) *QueryCardSmsStatisticsListResponseBody {
	s.Model = v
	return s
}

func (s *QueryCardSmsStatisticsListResponseBody) SetRequestId(v string) *QueryCardSmsStatisticsListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCardSmsStatisticsListResponseBody) SetSuccess(v bool) *QueryCardSmsStatisticsListResponseBody {
	s.Success = &v
	return s
}

type QueryCardSmsStatisticsListResponseBodyModel struct {
	RenderSuccessTotal *int64  `json:"RenderSuccessTotal,omitempty" xml:"RenderSuccessTotal,omitempty"`
	SendDate           *string `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
	UrlGenerateTotal   *int64  `json:"UrlGenerateTotal,omitempty" xml:"UrlGenerateTotal,omitempty"`
}

func (s QueryCardSmsStatisticsListResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsListResponseBodyModel) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsListResponseBodyModel) SetRenderSuccessTotal(v int64) *QueryCardSmsStatisticsListResponseBodyModel {
	s.RenderSuccessTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsListResponseBodyModel) SetSendDate(v string) *QueryCardSmsStatisticsListResponseBodyModel {
	s.SendDate = &v
	return s
}

func (s *QueryCardSmsStatisticsListResponseBodyModel) SetUrlGenerateTotal(v int64) *QueryCardSmsStatisticsListResponseBodyModel {
	s.UrlGenerateTotal = &v
	return s
}

type QueryCardSmsStatisticsListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCardSmsStatisticsListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCardSmsStatisticsListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsListResponse) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsListResponse) SetHeaders(v map[string]*string) *QueryCardSmsStatisticsListResponse {
	s.Headers = v
	return s
}

func (s *QueryCardSmsStatisticsListResponse) SetStatusCode(v int32) *QueryCardSmsStatisticsListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCardSmsStatisticsListResponse) SetBody(v *QueryCardSmsStatisticsListResponseBody) *QueryCardSmsStatisticsListResponse {
	s.Body = v
	return s
}

type QueryCardSmsStatisticsSendRequest struct {
	CustomTmpCode *string `json:"CustomTmpCode,omitempty" xml:"CustomTmpCode,omitempty"`
	// This parameter is required.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// This parameter is required.
	PageSize      *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SendDateEnd   *string `json:"SendDateEnd,omitempty" xml:"SendDateEnd,omitempty"`
	SendDateStart *string `json:"SendDateStart,omitempty" xml:"SendDateStart,omitempty"`
	SignName      *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TmpCode       *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
}

func (s QueryCardSmsStatisticsSendRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsSendRequest) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsSendRequest) SetCustomTmpCode(v string) *QueryCardSmsStatisticsSendRequest {
	s.CustomTmpCode = &v
	return s
}

func (s *QueryCardSmsStatisticsSendRequest) SetPageNo(v int64) *QueryCardSmsStatisticsSendRequest {
	s.PageNo = &v
	return s
}

func (s *QueryCardSmsStatisticsSendRequest) SetPageSize(v int64) *QueryCardSmsStatisticsSendRequest {
	s.PageSize = &v
	return s
}

func (s *QueryCardSmsStatisticsSendRequest) SetSendDateEnd(v string) *QueryCardSmsStatisticsSendRequest {
	s.SendDateEnd = &v
	return s
}

func (s *QueryCardSmsStatisticsSendRequest) SetSendDateStart(v string) *QueryCardSmsStatisticsSendRequest {
	s.SendDateStart = &v
	return s
}

func (s *QueryCardSmsStatisticsSendRequest) SetSignName(v string) *QueryCardSmsStatisticsSendRequest {
	s.SignName = &v
	return s
}

func (s *QueryCardSmsStatisticsSendRequest) SetTmpCode(v string) *QueryCardSmsStatisticsSendRequest {
	s.TmpCode = &v
	return s
}

type QueryCardSmsStatisticsSendResponseBody struct {
	Code      *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *QueryCardSmsStatisticsSendResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Struct"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCardSmsStatisticsSendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsSendResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsSendResponseBody) SetCode(v string) *QueryCardSmsStatisticsSendResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBody) SetModel(v *QueryCardSmsStatisticsSendResponseBodyModel) *QueryCardSmsStatisticsSendResponseBody {
	s.Model = v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBody) SetRequestId(v string) *QueryCardSmsStatisticsSendResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBody) SetSuccess(v bool) *QueryCardSmsStatisticsSendResponseBody {
	s.Success = &v
	return s
}

type QueryCardSmsStatisticsSendResponseBodyModel struct {
	PageNo     *int64                                                `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *int64                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*QueryCardSmsStatisticsSendResponseBodyModelRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryCardSmsStatisticsSendResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsSendResponseBodyModel) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsSendResponseBodyModel) SetPageNo(v int64) *QueryCardSmsStatisticsSendResponseBodyModel {
	s.PageNo = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModel) SetPageSize(v int64) *QueryCardSmsStatisticsSendResponseBodyModel {
	s.PageSize = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModel) SetRecords(v []*QueryCardSmsStatisticsSendResponseBodyModelRecords) *QueryCardSmsStatisticsSendResponseBodyModel {
	s.Records = v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModel) SetTotalCount(v int64) *QueryCardSmsStatisticsSendResponseBodyModel {
	s.TotalCount = &v
	return s
}

type QueryCardSmsStatisticsSendResponseBodyModelRecords struct {
	CustomTmpCode      *string  `json:"CustomTmpCode,omitempty" xml:"CustomTmpCode,omitempty"`
	RenderSuccessRate  *float64 `json:"RenderSuccessRate,omitempty" xml:"RenderSuccessRate,omitempty"`
	RenderSuccessTotal *int64   `json:"RenderSuccessTotal,omitempty" xml:"RenderSuccessTotal,omitempty"`
	SendDate           *string  `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
	SendFailTotal      *int64   `json:"SendFailTotal,omitempty" xml:"SendFailTotal,omitempty"`
	SendProcessTotal   *int64   `json:"SendProcessTotal,omitempty" xml:"SendProcessTotal,omitempty"`
	SendSuccessRate    *float64 `json:"SendSuccessRate,omitempty" xml:"SendSuccessRate,omitempty"`
	SendSuccessTotal   *int64   `json:"SendSuccessTotal,omitempty" xml:"SendSuccessTotal,omitempty"`
	SendTotal          *int64   `json:"SendTotal,omitempty" xml:"SendTotal,omitempty"`
	SignName           *string  `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SupportRate        *float64 `json:"SupportRate,omitempty" xml:"SupportRate,omitempty"`
	SupportTotal       *int64   `json:"SupportTotal,omitempty" xml:"SupportTotal,omitempty"`
	TmpCode            *string  `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
}

func (s QueryCardSmsStatisticsSendResponseBodyModelRecords) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsSendResponseBodyModelRecords) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetCustomTmpCode(v string) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.CustomTmpCode = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetRenderSuccessRate(v float64) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.RenderSuccessRate = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetRenderSuccessTotal(v int64) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.RenderSuccessTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetSendDate(v string) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.SendDate = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetSendFailTotal(v int64) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.SendFailTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetSendProcessTotal(v int64) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.SendProcessTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetSendSuccessRate(v float64) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.SendSuccessRate = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetSendSuccessTotal(v int64) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.SendSuccessTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetSendTotal(v int64) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.SendTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetSignName(v string) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.SignName = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetSupportRate(v float64) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.SupportRate = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetSupportTotal(v int64) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.SupportTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponseBodyModelRecords) SetTmpCode(v string) *QueryCardSmsStatisticsSendResponseBodyModelRecords {
	s.TmpCode = &v
	return s
}

type QueryCardSmsStatisticsSendResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCardSmsStatisticsSendResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCardSmsStatisticsSendResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsSendResponse) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsSendResponse) SetHeaders(v map[string]*string) *QueryCardSmsStatisticsSendResponse {
	s.Headers = v
	return s
}

func (s *QueryCardSmsStatisticsSendResponse) SetStatusCode(v int32) *QueryCardSmsStatisticsSendResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCardSmsStatisticsSendResponse) SetBody(v *QueryCardSmsStatisticsSendResponseBody) *QueryCardSmsStatisticsSendResponse {
	s.Body = v
	return s
}

type QueryCardSmsStatisticsSendListRequest struct {
	CustomTmpCode *string `json:"CustomTmpCode,omitempty" xml:"CustomTmpCode,omitempty"`
	SendDateEnd   *string `json:"SendDateEnd,omitempty" xml:"SendDateEnd,omitempty"`
	SendDateStart *string `json:"SendDateStart,omitempty" xml:"SendDateStart,omitempty"`
	SignName      *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TmpCode       *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
}

func (s QueryCardSmsStatisticsSendListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsSendListRequest) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsSendListRequest) SetCustomTmpCode(v string) *QueryCardSmsStatisticsSendListRequest {
	s.CustomTmpCode = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListRequest) SetSendDateEnd(v string) *QueryCardSmsStatisticsSendListRequest {
	s.SendDateEnd = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListRequest) SetSendDateStart(v string) *QueryCardSmsStatisticsSendListRequest {
	s.SendDateStart = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListRequest) SetSignName(v string) *QueryCardSmsStatisticsSendListRequest {
	s.SignName = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListRequest) SetTmpCode(v string) *QueryCardSmsStatisticsSendListRequest {
	s.TmpCode = &v
	return s
}

type QueryCardSmsStatisticsSendListResponseBody struct {
	Code      *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     []*QueryCardSmsStatisticsSendListResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Repeated"`
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCardSmsStatisticsSendListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsSendListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsSendListResponseBody) SetCode(v string) *QueryCardSmsStatisticsSendListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBody) SetModel(v []*QueryCardSmsStatisticsSendListResponseBodyModel) *QueryCardSmsStatisticsSendListResponseBody {
	s.Model = v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBody) SetRequestId(v string) *QueryCardSmsStatisticsSendListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBody) SetSuccess(v bool) *QueryCardSmsStatisticsSendListResponseBody {
	s.Success = &v
	return s
}

type QueryCardSmsStatisticsSendListResponseBodyModel struct {
	RenderSuccessRate  *float64 `json:"RenderSuccessRate,omitempty" xml:"RenderSuccessRate,omitempty"`
	RenderSuccessTotal *int64   `json:"RenderSuccessTotal,omitempty" xml:"RenderSuccessTotal,omitempty"`
	SendDate           *string  `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
	SendFailTotal      *int64   `json:"SendFailTotal,omitempty" xml:"SendFailTotal,omitempty"`
	SendProcessTotal   *int64   `json:"SendProcessTotal,omitempty" xml:"SendProcessTotal,omitempty"`
	SendSuccessRate    *float64 `json:"SendSuccessRate,omitempty" xml:"SendSuccessRate,omitempty"`
	SendSuccessTotal   *int64   `json:"SendSuccessTotal,omitempty" xml:"SendSuccessTotal,omitempty"`
	SendTotal          *int64   `json:"SendTotal,omitempty" xml:"SendTotal,omitempty"`
	SupportRate        *float64 `json:"SupportRate,omitempty" xml:"SupportRate,omitempty"`
	SupportTotal       *int64   `json:"SupportTotal,omitempty" xml:"SupportTotal,omitempty"`
}

func (s QueryCardSmsStatisticsSendListResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsSendListResponseBodyModel) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsSendListResponseBodyModel) SetRenderSuccessRate(v float64) *QueryCardSmsStatisticsSendListResponseBodyModel {
	s.RenderSuccessRate = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBodyModel) SetRenderSuccessTotal(v int64) *QueryCardSmsStatisticsSendListResponseBodyModel {
	s.RenderSuccessTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBodyModel) SetSendDate(v string) *QueryCardSmsStatisticsSendListResponseBodyModel {
	s.SendDate = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBodyModel) SetSendFailTotal(v int64) *QueryCardSmsStatisticsSendListResponseBodyModel {
	s.SendFailTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBodyModel) SetSendProcessTotal(v int64) *QueryCardSmsStatisticsSendListResponseBodyModel {
	s.SendProcessTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBodyModel) SetSendSuccessRate(v float64) *QueryCardSmsStatisticsSendListResponseBodyModel {
	s.SendSuccessRate = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBodyModel) SetSendSuccessTotal(v int64) *QueryCardSmsStatisticsSendListResponseBodyModel {
	s.SendSuccessTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBodyModel) SetSendTotal(v int64) *QueryCardSmsStatisticsSendListResponseBodyModel {
	s.SendTotal = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBodyModel) SetSupportRate(v float64) *QueryCardSmsStatisticsSendListResponseBodyModel {
	s.SupportRate = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponseBodyModel) SetSupportTotal(v int64) *QueryCardSmsStatisticsSendListResponseBodyModel {
	s.SupportTotal = &v
	return s
}

type QueryCardSmsStatisticsSendListResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCardSmsStatisticsSendListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCardSmsStatisticsSendListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCardSmsStatisticsSendListResponse) GoString() string {
	return s.String()
}

func (s *QueryCardSmsStatisticsSendListResponse) SetHeaders(v map[string]*string) *QueryCardSmsStatisticsSendListResponse {
	s.Headers = v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponse) SetStatusCode(v int32) *QueryCardSmsStatisticsSendListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCardSmsStatisticsSendListResponse) SetBody(v *QueryCardSmsStatisticsSendListResponseBody) *QueryCardSmsStatisticsSendListResponse {
	s.Body = v
	return s
}

type QueryCommonCustInfoRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryCommonCustInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCommonCustInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryCommonCustInfoRequest) SetOwnerId(v int64) *QueryCommonCustInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCommonCustInfoRequest) SetProdCode(v string) *QueryCommonCustInfoRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryCommonCustInfoRequest) SetResourceOwnerAccount(v string) *QueryCommonCustInfoRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryCommonCustInfoRequest) SetResourceOwnerId(v int64) *QueryCommonCustInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryCommonCustInfoResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryCommonCustInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCommonCustInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCommonCustInfoResponseBody) SetRequestId(v string) *QueryCommonCustInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCommonCustInfoResponseBody) SetCode(v string) *QueryCommonCustInfoResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCommonCustInfoResponseBody) SetData(v string) *QueryCommonCustInfoResponseBody {
	s.Data = &v
	return s
}

type QueryCommonCustInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCommonCustInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCommonCustInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCommonCustInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryCommonCustInfoResponse) SetHeaders(v map[string]*string) *QueryCommonCustInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryCommonCustInfoResponse) SetStatusCode(v int32) *QueryCommonCustInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCommonCustInfoResponse) SetBody(v *QueryCommonCustInfoResponseBody) *QueryCommonCustInfoResponse {
	s.Body = v
	return s
}

type QueryContactsListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryContactsListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContactsListRequest) GoString() string {
	return s.String()
}

func (s *QueryContactsListRequest) SetOwnerId(v int64) *QueryContactsListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryContactsListRequest) SetProdCode(v string) *QueryContactsListRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryContactsListRequest) SetResourceOwnerAccount(v string) *QueryContactsListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryContactsListRequest) SetResourceOwnerId(v int64) *QueryContactsListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryContactsListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryContactsListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryContactsListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryContactsListResponseBody) SetRequestId(v string) *QueryContactsListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryContactsListResponseBody) SetCode(v string) *QueryContactsListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryContactsListResponseBody) SetData(v string) *QueryContactsListResponseBody {
	s.Data = &v
	return s
}

type QueryContactsListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryContactsListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryContactsListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContactsListResponse) GoString() string {
	return s.String()
}

func (s *QueryContactsListResponse) SetHeaders(v map[string]*string) *QueryContactsListResponse {
	s.Headers = v
	return s
}

func (s *QueryContactsListResponse) SetStatusCode(v int32) *QueryContactsListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryContactsListResponse) SetBody(v *QueryContactsListResponseBody) *QueryContactsListResponse {
	s.Body = v
	return s
}

type QueryContactsListNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryContactsListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryContactsListNewRequest) GoString() string {
	return s.String()
}

func (s *QueryContactsListNewRequest) SetOwnerId(v int64) *QueryContactsListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryContactsListNewRequest) SetProdCode(v string) *QueryContactsListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryContactsListNewRequest) SetResourceOwnerAccount(v string) *QueryContactsListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryContactsListNewRequest) SetResourceOwnerId(v int64) *QueryContactsListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryContactsListNewResponseBody struct {
	List      []*QueryContactsListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNo    *int32                                  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryContactsListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryContactsListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryContactsListNewResponseBody) SetList(v []*QueryContactsListNewResponseBodyList) *QueryContactsListNewResponseBody {
	s.List = v
	return s
}

func (s *QueryContactsListNewResponseBody) SetPageNo(v int32) *QueryContactsListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QueryContactsListNewResponseBody) SetPageSize(v int32) *QueryContactsListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryContactsListNewResponseBody) SetRequestId(v string) *QueryContactsListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryContactsListNewResponseBody) SetTotal(v int64) *QueryContactsListNewResponseBody {
	s.Total = &v
	return s
}

type QueryContactsListNewResponseBodyList struct {
	Email                          *string `json:"Email,omitempty" xml:"Email,omitempty"`
	Id                             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name                           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OpenPkgWarning                 *int32  `json:"OpenPkgWarning,omitempty" xml:"OpenPkgWarning,omitempty"`
	OpenPreventBrushWarning        *int32  `json:"OpenPreventBrushWarning,omitempty" xml:"OpenPreventBrushWarning,omitempty"`
	OpenSendWarning                *int32  `json:"OpenSendWarning,omitempty" xml:"OpenSendWarning,omitempty"`
	Phone                          *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	ReceiveSignTemplateAuditResult *int32  `json:"ReceiveSignTemplateAuditResult,omitempty" xml:"ReceiveSignTemplateAuditResult,omitempty"`
}

func (s QueryContactsListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryContactsListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryContactsListNewResponseBodyList) SetEmail(v string) *QueryContactsListNewResponseBodyList {
	s.Email = &v
	return s
}

func (s *QueryContactsListNewResponseBodyList) SetId(v int64) *QueryContactsListNewResponseBodyList {
	s.Id = &v
	return s
}

func (s *QueryContactsListNewResponseBodyList) SetName(v string) *QueryContactsListNewResponseBodyList {
	s.Name = &v
	return s
}

func (s *QueryContactsListNewResponseBodyList) SetOpenPkgWarning(v int32) *QueryContactsListNewResponseBodyList {
	s.OpenPkgWarning = &v
	return s
}

func (s *QueryContactsListNewResponseBodyList) SetOpenPreventBrushWarning(v int32) *QueryContactsListNewResponseBodyList {
	s.OpenPreventBrushWarning = &v
	return s
}

func (s *QueryContactsListNewResponseBodyList) SetOpenSendWarning(v int32) *QueryContactsListNewResponseBodyList {
	s.OpenSendWarning = &v
	return s
}

func (s *QueryContactsListNewResponseBodyList) SetPhone(v string) *QueryContactsListNewResponseBodyList {
	s.Phone = &v
	return s
}

func (s *QueryContactsListNewResponseBodyList) SetReceiveSignTemplateAuditResult(v int32) *QueryContactsListNewResponseBodyList {
	s.ReceiveSignTemplateAuditResult = &v
	return s
}

type QueryContactsListNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryContactsListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryContactsListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryContactsListNewResponse) GoString() string {
	return s.String()
}

func (s *QueryContactsListNewResponse) SetHeaders(v map[string]*string) *QueryContactsListNewResponse {
	s.Headers = v
	return s
}

func (s *QueryContactsListNewResponse) SetStatusCode(v int32) *QueryContactsListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryContactsListNewResponse) SetBody(v *QueryContactsListNewResponseBody) *QueryContactsListNewResponse {
	s.Body = v
	return s
}

type QueryDailyBillInfoLeafNewRequest struct {
	BillCycle            *string `json:"BillCycle,omitempty" xml:"BillCycle,omitempty"`
	ItemId               *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	ItemName             *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SubjectItemId        *string `json:"SubjectItemId,omitempty" xml:"SubjectItemId,omitempty"`
}

func (s QueryDailyBillInfoLeafNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDailyBillInfoLeafNewRequest) GoString() string {
	return s.String()
}

func (s *QueryDailyBillInfoLeafNewRequest) SetBillCycle(v string) *QueryDailyBillInfoLeafNewRequest {
	s.BillCycle = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewRequest) SetItemId(v string) *QueryDailyBillInfoLeafNewRequest {
	s.ItemId = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewRequest) SetItemName(v string) *QueryDailyBillInfoLeafNewRequest {
	s.ItemName = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewRequest) SetOwnerId(v int64) *QueryDailyBillInfoLeafNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewRequest) SetProdCode(v string) *QueryDailyBillInfoLeafNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewRequest) SetResourceOwnerAccount(v string) *QueryDailyBillInfoLeafNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewRequest) SetResourceOwnerId(v int64) *QueryDailyBillInfoLeafNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewRequest) SetSubjectItemId(v string) *QueryDailyBillInfoLeafNewRequest {
	s.SubjectItemId = &v
	return s
}

type QueryDailyBillInfoLeafNewResponseBody struct {
	List      *QueryDailyBillInfoLeafNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryDailyBillInfoLeafNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDailyBillInfoLeafNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDailyBillInfoLeafNewResponseBody) SetList(v *QueryDailyBillInfoLeafNewResponseBodyList) *QueryDailyBillInfoLeafNewResponseBody {
	s.List = v
	return s
}

func (s *QueryDailyBillInfoLeafNewResponseBody) SetRequestId(v string) *QueryDailyBillInfoLeafNewResponseBody {
	s.RequestId = &v
	return s
}

type QueryDailyBillInfoLeafNewResponseBodyList struct {
	DailyBillDetailInfoDTO []*QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO `json:"DailyBillDetailInfoDTO,omitempty" xml:"DailyBillDetailInfoDTO,omitempty" type:"Repeated"`
}

func (s QueryDailyBillInfoLeafNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryDailyBillInfoLeafNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryDailyBillInfoLeafNewResponseBodyList) SetDailyBillDetailInfoDTO(v []*QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO) *QueryDailyBillInfoLeafNewResponseBodyList {
	s.DailyBillDetailInfoDTO = v
	return s
}

type QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO struct {
	AddCount       *int64  `json:"AddCount,omitempty" xml:"AddCount,omitempty"`
	AddDate        *string `json:"AddDate,omitempty" xml:"AddDate,omitempty"`
	AddUnit        *string `json:"AddUnit,omitempty" xml:"AddUnit,omitempty"`
	BillAmount     *string `json:"BillAmount,omitempty" xml:"BillAmount,omitempty"`
	DetailItemName *string `json:"DetailItemName,omitempty" xml:"DetailItemName,omitempty"`
	SinglePrice    *string `json:"SinglePrice,omitempty" xml:"SinglePrice,omitempty"`
}

func (s QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO) GoString() string {
	return s.String()
}

func (s *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO) SetAddCount(v int64) *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO {
	s.AddCount = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO) SetAddDate(v string) *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO {
	s.AddDate = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO) SetAddUnit(v string) *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO {
	s.AddUnit = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO) SetBillAmount(v string) *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO {
	s.BillAmount = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO) SetDetailItemName(v string) *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO {
	s.DetailItemName = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO) SetSinglePrice(v string) *QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO {
	s.SinglePrice = &v
	return s
}

type QueryDailyBillInfoLeafNewResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDailyBillInfoLeafNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDailyBillInfoLeafNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDailyBillInfoLeafNewResponse) GoString() string {
	return s.String()
}

func (s *QueryDailyBillInfoLeafNewResponse) SetHeaders(v map[string]*string) *QueryDailyBillInfoLeafNewResponse {
	s.Headers = v
	return s
}

func (s *QueryDailyBillInfoLeafNewResponse) SetStatusCode(v int32) *QueryDailyBillInfoLeafNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDailyBillInfoLeafNewResponse) SetBody(v *QueryDailyBillInfoLeafNewResponseBody) *QueryDailyBillInfoLeafNewResponse {
	s.Body = v
	return s
}

type QueryDigitalTemplateDetailRequest struct {
	AuditState           *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QueryDigitalTemplateDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateDetailRequest) SetAuditState(v string) *QueryDigitalTemplateDetailRequest {
	s.AuditState = &v
	return s
}

func (s *QueryDigitalTemplateDetailRequest) SetBizType(v string) *QueryDigitalTemplateDetailRequest {
	s.BizType = &v
	return s
}

func (s *QueryDigitalTemplateDetailRequest) SetOwnerId(v int64) *QueryDigitalTemplateDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDigitalTemplateDetailRequest) SetProdCode(v string) *QueryDigitalTemplateDetailRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryDigitalTemplateDetailRequest) SetResourceOwnerAccount(v string) *QueryDigitalTemplateDetailRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDigitalTemplateDetailRequest) SetResourceOwnerId(v int64) *QueryDigitalTemplateDetailRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryDigitalTemplateDetailRequest) SetTemplateCode(v string) *QueryDigitalTemplateDetailRequest {
	s.TemplateCode = &v
	return s
}

func (s *QueryDigitalTemplateDetailRequest) SetTemplateName(v string) *QueryDigitalTemplateDetailRequest {
	s.TemplateName = &v
	return s
}

type QueryDigitalTemplateDetailResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryDigitalTemplateDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateDetailResponseBody) SetRequestId(v string) *QueryDigitalTemplateDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDigitalTemplateDetailResponseBody) SetCode(v string) *QueryDigitalTemplateDetailResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDigitalTemplateDetailResponseBody) SetData(v string) *QueryDigitalTemplateDetailResponseBody {
	s.Data = &v
	return s
}

type QueryDigitalTemplateDetailResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDigitalTemplateDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDigitalTemplateDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateDetailResponse) SetHeaders(v map[string]*string) *QueryDigitalTemplateDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryDigitalTemplateDetailResponse) SetStatusCode(v int32) *QueryDigitalTemplateDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDigitalTemplateDetailResponse) SetBody(v *QueryDigitalTemplateDetailResponseBody) *QueryDigitalTemplateDetailResponse {
	s.Body = v
	return s
}

type QueryDigitalTemplateDetailNewRequest struct {
	AuditState           *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QueryDigitalTemplateDetailNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateDetailNewRequest) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateDetailNewRequest) SetAuditState(v string) *QueryDigitalTemplateDetailNewRequest {
	s.AuditState = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewRequest) SetBizType(v string) *QueryDigitalTemplateDetailNewRequest {
	s.BizType = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewRequest) SetOwnerId(v int64) *QueryDigitalTemplateDetailNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewRequest) SetProdCode(v string) *QueryDigitalTemplateDetailNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewRequest) SetResourceOwnerAccount(v string) *QueryDigitalTemplateDetailNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewRequest) SetResourceOwnerId(v int64) *QueryDigitalTemplateDetailNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewRequest) SetTemplateCode(v string) *QueryDigitalTemplateDetailNewRequest {
	s.TemplateCode = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewRequest) SetTemplateName(v string) *QueryDigitalTemplateDetailNewRequest {
	s.TemplateName = &v
	return s
}

type QueryDigitalTemplateDetailNewResponseBody struct {
	AuditInfo         *string                                           `json:"AuditInfo,omitempty" xml:"AuditInfo,omitempty"`
	AuditRemarkInfo   *string                                           `json:"AuditRemarkInfo,omitempty" xml:"AuditRemarkInfo,omitempty"`
	AuditState        *string                                           `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType           *string                                           `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExpireDateStr     *string                                           `json:"ExpireDateStr,omitempty" xml:"ExpireDateStr,omitempty"`
	GmtCreateStr      *string                                           `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	Id                *string                                           `json:"Id,omitempty" xml:"Id,omitempty"`
	IsAnyParam        *bool                                             `json:"IsAnyParam,omitempty" xml:"IsAnyParam,omitempty"`
	IsDefaultTemplate *bool                                             `json:"IsDefaultTemplate,omitempty" xml:"IsDefaultTemplate,omitempty"`
	IsRecently        *bool                                             `json:"IsRecently,omitempty" xml:"IsRecently,omitempty"`
	OrderId           *string                                           `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OssKeys           *QueryDigitalTemplateDetailNewResponseBodyOssKeys `json:"OssKeys,omitempty" xml:"OssKeys,omitempty" type:"Struct"`
	PassErrType       *string                                           `json:"PassErrType,omitempty" xml:"PassErrType,omitempty"`
	Remark            *string                                           `json:"Remark,omitempty" xml:"Remark,omitempty"`
	RequestId         *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SignType          *int32                                            `json:"SignType,omitempty" xml:"SignType,omitempty"`
	SmsContent        *string                                           `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	SupportVendor     *string                                           `json:"SupportVendor,omitempty" xml:"SupportVendor,omitempty"`
	Tags              *QueryDigitalTemplateDetailNewResponseBodyTags    `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	TemplateCode      *string                                           `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateContent   *string                                           `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
	TemplateName      *string                                           `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateRule      *string                                           `json:"TemplateRule,omitempty" xml:"TemplateRule,omitempty"`
}

func (s QueryDigitalTemplateDetailNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateDetailNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetAuditInfo(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.AuditInfo = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetAuditRemarkInfo(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.AuditRemarkInfo = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetAuditState(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.AuditState = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetBizType(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.BizType = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetExpireDateStr(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.ExpireDateStr = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetGmtCreateStr(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.GmtCreateStr = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetId(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.Id = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetIsAnyParam(v bool) *QueryDigitalTemplateDetailNewResponseBody {
	s.IsAnyParam = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetIsDefaultTemplate(v bool) *QueryDigitalTemplateDetailNewResponseBody {
	s.IsDefaultTemplate = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetIsRecently(v bool) *QueryDigitalTemplateDetailNewResponseBody {
	s.IsRecently = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetOrderId(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.OrderId = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetOssKeys(v *QueryDigitalTemplateDetailNewResponseBodyOssKeys) *QueryDigitalTemplateDetailNewResponseBody {
	s.OssKeys = v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetPassErrType(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.PassErrType = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetRemark(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.Remark = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetRequestId(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetSignType(v int32) *QueryDigitalTemplateDetailNewResponseBody {
	s.SignType = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetSmsContent(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.SmsContent = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetSupportVendor(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.SupportVendor = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetTags(v *QueryDigitalTemplateDetailNewResponseBodyTags) *QueryDigitalTemplateDetailNewResponseBody {
	s.Tags = v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetTemplateCode(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.TemplateCode = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetTemplateContent(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.TemplateContent = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetTemplateName(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.TemplateName = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBody) SetTemplateRule(v string) *QueryDigitalTemplateDetailNewResponseBody {
	s.TemplateRule = &v
	return s
}

type QueryDigitalTemplateDetailNewResponseBodyOssKeys struct {
	OssKey []*string `json:"OssKey,omitempty" xml:"OssKey,omitempty" type:"Repeated"`
}

func (s QueryDigitalTemplateDetailNewResponseBodyOssKeys) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateDetailNewResponseBodyOssKeys) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateDetailNewResponseBodyOssKeys) SetOssKey(v []*string) *QueryDigitalTemplateDetailNewResponseBodyOssKeys {
	s.OssKey = v
	return s
}

type QueryDigitalTemplateDetailNewResponseBodyTags struct {
	Tag []*QueryDigitalTemplateDetailNewResponseBodyTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryDigitalTemplateDetailNewResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateDetailNewResponseBodyTags) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateDetailNewResponseBodyTags) SetTag(v []*QueryDigitalTemplateDetailNewResponseBodyTagsTag) *QueryDigitalTemplateDetailNewResponseBodyTags {
	s.Tag = v
	return s
}

type QueryDigitalTemplateDetailNewResponseBodyTagsTag struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryDigitalTemplateDetailNewResponseBodyTagsTag) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateDetailNewResponseBodyTagsTag) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateDetailNewResponseBodyTagsTag) SetResourceId(v string) *QueryDigitalTemplateDetailNewResponseBodyTagsTag {
	s.ResourceId = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBodyTagsTag) SetResourceType(v string) *QueryDigitalTemplateDetailNewResponseBodyTagsTag {
	s.ResourceType = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBodyTagsTag) SetTagKey(v string) *QueryDigitalTemplateDetailNewResponseBodyTagsTag {
	s.TagKey = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponseBodyTagsTag) SetTagValue(v string) *QueryDigitalTemplateDetailNewResponseBodyTagsTag {
	s.TagValue = &v
	return s
}

type QueryDigitalTemplateDetailNewResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDigitalTemplateDetailNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDigitalTemplateDetailNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateDetailNewResponse) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateDetailNewResponse) SetHeaders(v map[string]*string) *QueryDigitalTemplateDetailNewResponse {
	s.Headers = v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponse) SetStatusCode(v int32) *QueryDigitalTemplateDetailNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDigitalTemplateDetailNewResponse) SetBody(v *QueryDigitalTemplateDetailNewResponseBody) *QueryDigitalTemplateDetailNewResponse {
	s.Body = v
	return s
}

type QueryDigitalTemplateLastRangeRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	Limit                *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QueryDigitalTemplateLastRangeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateLastRangeRequest) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateLastRangeRequest) SetBizType(v string) *QueryDigitalTemplateLastRangeRequest {
	s.BizType = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeRequest) SetLimit(v int32) *QueryDigitalTemplateLastRangeRequest {
	s.Limit = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeRequest) SetOwnerId(v int64) *QueryDigitalTemplateLastRangeRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeRequest) SetProdCode(v string) *QueryDigitalTemplateLastRangeRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeRequest) SetResourceOwnerAccount(v string) *QueryDigitalTemplateLastRangeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeRequest) SetResourceOwnerId(v int64) *QueryDigitalTemplateLastRangeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeRequest) SetTemplateName(v string) *QueryDigitalTemplateLastRangeRequest {
	s.TemplateName = &v
	return s
}

type QueryDigitalTemplateLastRangeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryDigitalTemplateLastRangeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateLastRangeResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateLastRangeResponseBody) SetRequestId(v string) *QueryDigitalTemplateLastRangeResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeResponseBody) SetCode(v string) *QueryDigitalTemplateLastRangeResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeResponseBody) SetData(v string) *QueryDigitalTemplateLastRangeResponseBody {
	s.Data = &v
	return s
}

type QueryDigitalTemplateLastRangeResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDigitalTemplateLastRangeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDigitalTemplateLastRangeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateLastRangeResponse) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateLastRangeResponse) SetHeaders(v map[string]*string) *QueryDigitalTemplateLastRangeResponse {
	s.Headers = v
	return s
}

func (s *QueryDigitalTemplateLastRangeResponse) SetStatusCode(v int32) *QueryDigitalTemplateLastRangeResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeResponse) SetBody(v *QueryDigitalTemplateLastRangeResponseBody) *QueryDigitalTemplateLastRangeResponse {
	s.Body = v
	return s
}

type QueryDigitalTemplateLastRangeNewRequest struct {
	AuditState           *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdType             *string `json:"ProdType,omitempty" xml:"ProdType,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QueryDigitalTemplateLastRangeNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateLastRangeNewRequest) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateLastRangeNewRequest) SetAuditState(v string) *QueryDigitalTemplateLastRangeNewRequest {
	s.AuditState = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewRequest) SetBizType(v string) *QueryDigitalTemplateLastRangeNewRequest {
	s.BizType = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewRequest) SetOwnerId(v int64) *QueryDigitalTemplateLastRangeNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewRequest) SetPageNo(v int32) *QueryDigitalTemplateLastRangeNewRequest {
	s.PageNo = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewRequest) SetPageSize(v int32) *QueryDigitalTemplateLastRangeNewRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewRequest) SetProdCode(v string) *QueryDigitalTemplateLastRangeNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewRequest) SetProdType(v string) *QueryDigitalTemplateLastRangeNewRequest {
	s.ProdType = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewRequest) SetResourceOwnerAccount(v string) *QueryDigitalTemplateLastRangeNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewRequest) SetResourceOwnerId(v int64) *QueryDigitalTemplateLastRangeNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewRequest) SetTemplateName(v string) *QueryDigitalTemplateLastRangeNewRequest {
	s.TemplateName = &v
	return s
}

type QueryDigitalTemplateLastRangeNewResponseBody struct {
	List      *QueryDigitalTemplateLastRangeNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Tags      *QueryDigitalTemplateLastRangeNewResponseBodyTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s QueryDigitalTemplateLastRangeNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateLastRangeNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateLastRangeNewResponseBody) SetList(v *QueryDigitalTemplateLastRangeNewResponseBodyList) *QueryDigitalTemplateLastRangeNewResponseBody {
	s.List = v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBody) SetRequestId(v string) *QueryDigitalTemplateLastRangeNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBody) SetTags(v *QueryDigitalTemplateLastRangeNewResponseBodyTags) *QueryDigitalTemplateLastRangeNewResponseBody {
	s.Tags = v
	return s
}

type QueryDigitalTemplateLastRangeNewResponseBodyList struct {
	SmsTemplate []*QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate `json:"SmsTemplate,omitempty" xml:"SmsTemplate,omitempty" type:"Repeated"`
}

func (s QueryDigitalTemplateLastRangeNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateLastRangeNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyList) SetSmsTemplate(v []*QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) *QueryDigitalTemplateLastRangeNewResponseBodyList {
	s.SmsTemplate = v
	return s
}

type QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate struct {
	AuditInfo         *string `json:"AuditInfo,omitempty" xml:"AuditInfo,omitempty"`
	AuditRemarkInfo   *string `json:"AuditRemarkInfo,omitempty" xml:"AuditRemarkInfo,omitempty"`
	AuditState        *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType           *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExpireDateStr     *string `json:"ExpireDateStr,omitempty" xml:"ExpireDateStr,omitempty"`
	GmtCreateStr      *string `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	Id                *string `json:"Id,omitempty" xml:"Id,omitempty"`
	IsAnyParam        *bool   `json:"IsAnyParam,omitempty" xml:"IsAnyParam,omitempty"`
	IsDefaultTemplate *bool   `json:"IsDefaultTemplate,omitempty" xml:"IsDefaultTemplate,omitempty"`
	IsRecently        *bool   `json:"IsRecently,omitempty" xml:"IsRecently,omitempty"`
	OrderId           *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PassErrType       *string `json:"PassErrType,omitempty" xml:"PassErrType,omitempty"`
	Remark            *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SignType          *int32  `json:"SignType,omitempty" xml:"SignType,omitempty"`
	SmsContent        *string `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	SupportVendor     *string `json:"SupportVendor,omitempty" xml:"SupportVendor,omitempty"`
	TemplateCode      *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateContent   *string `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
	TemplateName      *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateRule      *string `json:"TemplateRule,omitempty" xml:"TemplateRule,omitempty"`
}

func (s QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetAuditInfo(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.AuditInfo = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetAuditRemarkInfo(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.AuditRemarkInfo = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetAuditState(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.AuditState = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetBizType(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.BizType = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetExpireDateStr(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.ExpireDateStr = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetGmtCreateStr(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.GmtCreateStr = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetId(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.Id = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetIsAnyParam(v bool) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.IsAnyParam = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetIsDefaultTemplate(v bool) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.IsDefaultTemplate = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetIsRecently(v bool) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.IsRecently = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetOrderId(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.OrderId = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetPassErrType(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.PassErrType = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetRemark(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.Remark = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetSignType(v int32) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.SignType = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetSmsContent(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.SmsContent = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetSupportVendor(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.SupportVendor = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetTemplateCode(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.TemplateCode = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetTemplateContent(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.TemplateContent = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetTemplateName(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.TemplateName = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate) SetTemplateRule(v string) *QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.TemplateRule = &v
	return s
}

type QueryDigitalTemplateLastRangeNewResponseBodyTags struct {
	Tag []*QueryDigitalTemplateLastRangeNewResponseBodyTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryDigitalTemplateLastRangeNewResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateLastRangeNewResponseBodyTags) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyTags) SetTag(v []*QueryDigitalTemplateLastRangeNewResponseBodyTagsTag) *QueryDigitalTemplateLastRangeNewResponseBodyTags {
	s.Tag = v
	return s
}

type QueryDigitalTemplateLastRangeNewResponseBodyTagsTag struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryDigitalTemplateLastRangeNewResponseBodyTagsTag) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateLastRangeNewResponseBodyTagsTag) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyTagsTag) SetResourceId(v string) *QueryDigitalTemplateLastRangeNewResponseBodyTagsTag {
	s.ResourceId = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyTagsTag) SetResourceType(v string) *QueryDigitalTemplateLastRangeNewResponseBodyTagsTag {
	s.ResourceType = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyTagsTag) SetTagKey(v string) *QueryDigitalTemplateLastRangeNewResponseBodyTagsTag {
	s.TagKey = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponseBodyTagsTag) SetTagValue(v string) *QueryDigitalTemplateLastRangeNewResponseBodyTagsTag {
	s.TagValue = &v
	return s
}

type QueryDigitalTemplateLastRangeNewResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDigitalTemplateLastRangeNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDigitalTemplateLastRangeNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplateLastRangeNewResponse) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplateLastRangeNewResponse) SetHeaders(v map[string]*string) *QueryDigitalTemplateLastRangeNewResponse {
	s.Headers = v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponse) SetStatusCode(v int32) *QueryDigitalTemplateLastRangeNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDigitalTemplateLastRangeNewResponse) SetBody(v *QueryDigitalTemplateLastRangeNewResponseBody) *QueryDigitalTemplateLastRangeNewResponse {
	s.Body = v
	return s
}

type QueryDigitalTemplatePageListRequest struct {
	AuditState           *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QueryDigitalTemplatePageListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplatePageListRequest) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplatePageListRequest) SetAuditState(v string) *QueryDigitalTemplatePageListRequest {
	s.AuditState = &v
	return s
}

func (s *QueryDigitalTemplatePageListRequest) SetBizType(v string) *QueryDigitalTemplatePageListRequest {
	s.BizType = &v
	return s
}

func (s *QueryDigitalTemplatePageListRequest) SetOwnerId(v int64) *QueryDigitalTemplatePageListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDigitalTemplatePageListRequest) SetPageNo(v int32) *QueryDigitalTemplatePageListRequest {
	s.PageNo = &v
	return s
}

func (s *QueryDigitalTemplatePageListRequest) SetPageSize(v int32) *QueryDigitalTemplatePageListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDigitalTemplatePageListRequest) SetProdCode(v string) *QueryDigitalTemplatePageListRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryDigitalTemplatePageListRequest) SetResourceOwnerAccount(v string) *QueryDigitalTemplatePageListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDigitalTemplatePageListRequest) SetResourceOwnerId(v int64) *QueryDigitalTemplatePageListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryDigitalTemplatePageListRequest) SetTemplateCode(v string) *QueryDigitalTemplatePageListRequest {
	s.TemplateCode = &v
	return s
}

func (s *QueryDigitalTemplatePageListRequest) SetTemplateName(v string) *QueryDigitalTemplatePageListRequest {
	s.TemplateName = &v
	return s
}

type QueryDigitalTemplatePageListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryDigitalTemplatePageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplatePageListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplatePageListResponseBody) SetRequestId(v string) *QueryDigitalTemplatePageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDigitalTemplatePageListResponseBody) SetCode(v string) *QueryDigitalTemplatePageListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDigitalTemplatePageListResponseBody) SetData(v string) *QueryDigitalTemplatePageListResponseBody {
	s.Data = &v
	return s
}

type QueryDigitalTemplatePageListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDigitalTemplatePageListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDigitalTemplatePageListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplatePageListResponse) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplatePageListResponse) SetHeaders(v map[string]*string) *QueryDigitalTemplatePageListResponse {
	s.Headers = v
	return s
}

func (s *QueryDigitalTemplatePageListResponse) SetStatusCode(v int32) *QueryDigitalTemplatePageListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDigitalTemplatePageListResponse) SetBody(v *QueryDigitalTemplatePageListResponseBody) *QueryDigitalTemplatePageListResponse {
	s.Body = v
	return s
}

type QueryDigitalTemplatePageListNewRequest struct {
	AuditState           *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QueryDigitalTemplatePageListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplatePageListNewRequest) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplatePageListNewRequest) SetAuditState(v string) *QueryDigitalTemplatePageListNewRequest {
	s.AuditState = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewRequest) SetBizType(v string) *QueryDigitalTemplatePageListNewRequest {
	s.BizType = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewRequest) SetOwnerId(v int64) *QueryDigitalTemplatePageListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewRequest) SetPageNo(v int32) *QueryDigitalTemplatePageListNewRequest {
	s.PageNo = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewRequest) SetPageSize(v int32) *QueryDigitalTemplatePageListNewRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewRequest) SetProdCode(v string) *QueryDigitalTemplatePageListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewRequest) SetResourceOwnerAccount(v string) *QueryDigitalTemplatePageListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewRequest) SetResourceOwnerId(v int64) *QueryDigitalTemplatePageListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewRequest) SetTemplateCode(v string) *QueryDigitalTemplatePageListNewRequest {
	s.TemplateCode = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewRequest) SetTemplateName(v string) *QueryDigitalTemplatePageListNewRequest {
	s.TemplateName = &v
	return s
}

type QueryDigitalTemplatePageListNewResponseBody struct {
	List      *QueryDigitalTemplatePageListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNo    *int32                                           `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                           `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryDigitalTemplatePageListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplatePageListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplatePageListNewResponseBody) SetList(v *QueryDigitalTemplatePageListNewResponseBodyList) *QueryDigitalTemplatePageListNewResponseBody {
	s.List = v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBody) SetPageNo(v int32) *QueryDigitalTemplatePageListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBody) SetPageSize(v int32) *QueryDigitalTemplatePageListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBody) SetRequestId(v string) *QueryDigitalTemplatePageListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBody) SetTotal(v int64) *QueryDigitalTemplatePageListNewResponseBody {
	s.Total = &v
	return s
}

type QueryDigitalTemplatePageListNewResponseBodyList struct {
	SmsTemplate []*QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate `json:"SmsTemplate,omitempty" xml:"SmsTemplate,omitempty" type:"Repeated"`
}

func (s QueryDigitalTemplatePageListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplatePageListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplatePageListNewResponseBodyList) SetSmsTemplate(v []*QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) *QueryDigitalTemplatePageListNewResponseBodyList {
	s.SmsTemplate = v
	return s
}

type QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate struct {
	AuditInfo         *string                                                         `json:"AuditInfo,omitempty" xml:"AuditInfo,omitempty"`
	AuditRemarkInfo   *string                                                         `json:"AuditRemarkInfo,omitempty" xml:"AuditRemarkInfo,omitempty"`
	AuditState        *string                                                         `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType           *string                                                         `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExpireDateStr     *string                                                         `json:"ExpireDateStr,omitempty" xml:"ExpireDateStr,omitempty"`
	GmtCreateStr      *string                                                         `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	Id                *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	IsAnyParam        *bool                                                           `json:"IsAnyParam,omitempty" xml:"IsAnyParam,omitempty"`
	IsDefaultTemplate *bool                                                           `json:"IsDefaultTemplate,omitempty" xml:"IsDefaultTemplate,omitempty"`
	IsRecently        *bool                                                           `json:"IsRecently,omitempty" xml:"IsRecently,omitempty"`
	OrderId           *string                                                         `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PassErrType       *string                                                         `json:"PassErrType,omitempty" xml:"PassErrType,omitempty"`
	Remark            *string                                                         `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SignType          *int32                                                          `json:"SignType,omitempty" xml:"SignType,omitempty"`
	SmsContent        *string                                                         `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	SupportVendor     *string                                                         `json:"SupportVendor,omitempty" xml:"SupportVendor,omitempty"`
	Tags              *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	TemplateCode      *string                                                         `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateContent   *string                                                         `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
	TemplateName      *string                                                         `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateRule      *string                                                         `json:"TemplateRule,omitempty" xml:"TemplateRule,omitempty"`
}

func (s QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetAuditInfo(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.AuditInfo = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetAuditRemarkInfo(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.AuditRemarkInfo = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetAuditState(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.AuditState = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetBizType(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.BizType = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetExpireDateStr(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.ExpireDateStr = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetGmtCreateStr(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.GmtCreateStr = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetId(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.Id = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetIsAnyParam(v bool) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.IsAnyParam = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetIsDefaultTemplate(v bool) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.IsDefaultTemplate = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetIsRecently(v bool) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.IsRecently = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetOrderId(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.OrderId = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetPassErrType(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.PassErrType = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetRemark(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.Remark = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetSignType(v int32) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.SignType = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetSmsContent(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.SmsContent = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetSupportVendor(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.SupportVendor = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetTags(v *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTags) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.Tags = v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetTemplateCode(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.TemplateCode = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetTemplateContent(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.TemplateContent = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetTemplateName(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.TemplateName = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate) SetTemplateRule(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate {
	s.TemplateRule = &v
	return s
}

type QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTags struct {
	Tag []*QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTags) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTags) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTags) SetTag(v []*QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTags {
	s.Tag = v
	return s
}

type QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag) SetResourceId(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag {
	s.ResourceId = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag) SetResourceType(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag {
	s.ResourceType = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag) SetTagKey(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag {
	s.TagKey = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag) SetTagValue(v string) *QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag {
	s.TagValue = &v
	return s
}

type QueryDigitalTemplatePageListNewResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDigitalTemplatePageListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDigitalTemplatePageListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDigitalTemplatePageListNewResponse) GoString() string {
	return s.String()
}

func (s *QueryDigitalTemplatePageListNewResponse) SetHeaders(v map[string]*string) *QueryDigitalTemplatePageListNewResponse {
	s.Headers = v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponse) SetStatusCode(v int32) *QueryDigitalTemplatePageListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDigitalTemplatePageListNewResponse) SetBody(v *QueryDigitalTemplatePageListNewResponseBody) *QueryDigitalTemplatePageListNewResponse {
	s.Body = v
	return s
}

type QueryDomainListRequest struct {
	Domain               *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int64  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryDomainListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListRequest) GoString() string {
	return s.String()
}

func (s *QueryDomainListRequest) SetDomain(v string) *QueryDomainListRequest {
	s.Domain = &v
	return s
}

func (s *QueryDomainListRequest) SetOwnerId(v int64) *QueryDomainListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDomainListRequest) SetPageNo(v int64) *QueryDomainListRequest {
	s.PageNo = &v
	return s
}

func (s *QueryDomainListRequest) SetPageSize(v string) *QueryDomainListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDomainListRequest) SetResourceOwnerAccount(v string) *QueryDomainListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDomainListRequest) SetResourceOwnerId(v int64) *QueryDomainListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryDomainListResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryDomainListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDomainListResponseBody) SetCode(v string) *QueryDomainListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDomainListResponseBody) SetData(v string) *QueryDomainListResponseBody {
	s.Data = &v
	return s
}

func (s *QueryDomainListResponseBody) SetRequestId(v string) *QueryDomainListResponseBody {
	s.RequestId = &v
	return s
}

type QueryDomainListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDomainListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDomainListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListResponse) GoString() string {
	return s.String()
}

func (s *QueryDomainListResponse) SetHeaders(v map[string]*string) *QueryDomainListResponse {
	s.Headers = v
	return s
}

func (s *QueryDomainListResponse) SetStatusCode(v int32) *QueryDomainListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDomainListResponse) SetBody(v *QueryDomainListResponseBody) *QueryDomainListResponse {
	s.Body = v
	return s
}

type QueryDomainListNewRequest struct {
	Domain               *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int64  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryDomainListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListNewRequest) GoString() string {
	return s.String()
}

func (s *QueryDomainListNewRequest) SetDomain(v string) *QueryDomainListNewRequest {
	s.Domain = &v
	return s
}

func (s *QueryDomainListNewRequest) SetOwnerId(v int64) *QueryDomainListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDomainListNewRequest) SetPageNo(v int64) *QueryDomainListNewRequest {
	s.PageNo = &v
	return s
}

func (s *QueryDomainListNewRequest) SetPageSize(v string) *QueryDomainListNewRequest {
	s.PageSize = &v
	return s
}

func (s *QueryDomainListNewRequest) SetProdCode(v string) *QueryDomainListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryDomainListNewRequest) SetResourceOwnerAccount(v string) *QueryDomainListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDomainListNewRequest) SetResourceOwnerId(v int64) *QueryDomainListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryDomainListNewResponseBody struct {
	List      []*QueryDomainListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNo    *int32                                `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryDomainListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDomainListNewResponseBody) SetList(v []*QueryDomainListNewResponseBodyList) *QueryDomainListNewResponseBody {
	s.List = v
	return s
}

func (s *QueryDomainListNewResponseBody) SetPageNo(v int32) *QueryDomainListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QueryDomainListNewResponseBody) SetPageSize(v int32) *QueryDomainListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryDomainListNewResponseBody) SetRequestId(v string) *QueryDomainListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDomainListNewResponseBody) SetTotal(v int64) *QueryDomainListNewResponseBody {
	s.Total = &v
	return s
}

type QueryDomainListNewResponseBodyList struct {
	AuditStatus *int32  `json:"AuditStatus,omitempty" xml:"AuditStatus,omitempty"`
	Domain      *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	GmtCreate   *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
}

func (s QueryDomainListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryDomainListNewResponseBodyList) SetAuditStatus(v int32) *QueryDomainListNewResponseBodyList {
	s.AuditStatus = &v
	return s
}

func (s *QueryDomainListNewResponseBodyList) SetDomain(v string) *QueryDomainListNewResponseBodyList {
	s.Domain = &v
	return s
}

func (s *QueryDomainListNewResponseBodyList) SetGmtCreate(v string) *QueryDomainListNewResponseBodyList {
	s.GmtCreate = &v
	return s
}

type QueryDomainListNewResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDomainListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDomainListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDomainListNewResponse) GoString() string {
	return s.String()
}

func (s *QueryDomainListNewResponse) SetHeaders(v map[string]*string) *QueryDomainListNewResponse {
	s.Headers = v
	return s
}

func (s *QueryDomainListNewResponse) SetStatusCode(v int32) *QueryDomainListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDomainListNewResponse) SetBody(v *QueryDomainListNewResponseBody) *QueryDomainListNewResponse {
	s.Body = v
	return s
}

type QueryExportSendRecordListNewRequest struct {
	ApplyStatus *int32 `json:"ApplyStatus,omitempty" xml:"ApplyStatus,omitempty"`
	// example:
	//
	// SMS_TEMPLATE_EXPORT / SMS_SIGN_EXPORT
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryExportSendRecordListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryExportSendRecordListNewRequest) GoString() string {
	return s.String()
}

func (s *QueryExportSendRecordListNewRequest) SetApplyStatus(v int32) *QueryExportSendRecordListNewRequest {
	s.ApplyStatus = &v
	return s
}

func (s *QueryExportSendRecordListNewRequest) SetBizType(v string) *QueryExportSendRecordListNewRequest {
	s.BizType = &v
	return s
}

func (s *QueryExportSendRecordListNewRequest) SetOwnerId(v int64) *QueryExportSendRecordListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryExportSendRecordListNewRequest) SetPageNo(v int32) *QueryExportSendRecordListNewRequest {
	s.PageNo = &v
	return s
}

func (s *QueryExportSendRecordListNewRequest) SetPageSize(v int32) *QueryExportSendRecordListNewRequest {
	s.PageSize = &v
	return s
}

func (s *QueryExportSendRecordListNewRequest) SetProdCode(v string) *QueryExportSendRecordListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryExportSendRecordListNewRequest) SetResourceOwnerAccount(v string) *QueryExportSendRecordListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryExportSendRecordListNewRequest) SetResourceOwnerId(v int64) *QueryExportSendRecordListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryExportSendRecordListNewResponseBody struct {
	List      *QueryExportSendRecordListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNo    *int32                                        `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                        `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryExportSendRecordListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryExportSendRecordListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryExportSendRecordListNewResponseBody) SetList(v *QueryExportSendRecordListNewResponseBodyList) *QueryExportSendRecordListNewResponseBody {
	s.List = v
	return s
}

func (s *QueryExportSendRecordListNewResponseBody) SetPageNo(v int32) *QueryExportSendRecordListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QueryExportSendRecordListNewResponseBody) SetPageSize(v int32) *QueryExportSendRecordListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryExportSendRecordListNewResponseBody) SetRequestId(v string) *QueryExportSendRecordListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryExportSendRecordListNewResponseBody) SetTotal(v int64) *QueryExportSendRecordListNewResponseBody {
	s.Total = &v
	return s
}

type QueryExportSendRecordListNewResponseBodyList struct {
	FcFileUpInsResponse []*QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse `json:"FcFileUpInsResponse,omitempty" xml:"FcFileUpInsResponse,omitempty" type:"Repeated"`
}

func (s QueryExportSendRecordListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryExportSendRecordListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryExportSendRecordListNewResponseBodyList) SetFcFileUpInsResponse(v []*QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse) *QueryExportSendRecordListNewResponseBodyList {
	s.FcFileUpInsResponse = v
	return s
}

type QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse struct {
	FileFeature   *string `json:"FileFeature,omitempty" xml:"FileFeature,omitempty"`
	FileUrl       *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	GmtCreate     *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified   *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HandlerStatus *int32  `json:"HandlerStatus,omitempty" xml:"HandlerStatus,omitempty"`
	Id            *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse) GoString() string {
	return s.String()
}

func (s *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse) SetFileFeature(v string) *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse {
	s.FileFeature = &v
	return s
}

func (s *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse) SetFileUrl(v string) *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse {
	s.FileUrl = &v
	return s
}

func (s *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse) SetGmtCreate(v string) *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse {
	s.GmtCreate = &v
	return s
}

func (s *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse) SetGmtModified(v string) *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse {
	s.GmtModified = &v
	return s
}

func (s *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse) SetHandlerStatus(v int32) *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse {
	s.HandlerStatus = &v
	return s
}

func (s *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse) SetId(v int64) *QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse {
	s.Id = &v
	return s
}

type QueryExportSendRecordListNewResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryExportSendRecordListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryExportSendRecordListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryExportSendRecordListNewResponse) GoString() string {
	return s.String()
}

func (s *QueryExportSendRecordListNewResponse) SetHeaders(v map[string]*string) *QueryExportSendRecordListNewResponse {
	s.Headers = v
	return s
}

func (s *QueryExportSendRecordListNewResponse) SetStatusCode(v int32) *QueryExportSendRecordListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryExportSendRecordListNewResponse) SetBody(v *QueryExportSendRecordListNewResponseBody) *QueryExportSendRecordListNewResponse {
	s.Body = v
	return s
}

type QueryFailDetailDownloadRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// This parameter is required.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	TaskInstanceId *int64 `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
}

func (s QueryFailDetailDownloadRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFailDetailDownloadRequest) GoString() string {
	return s.String()
}

func (s *QueryFailDetailDownloadRequest) SetOwnerId(v int64) *QueryFailDetailDownloadRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryFailDetailDownloadRequest) SetProdCode(v string) *QueryFailDetailDownloadRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryFailDetailDownloadRequest) SetResourceOwnerAccount(v string) *QueryFailDetailDownloadRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryFailDetailDownloadRequest) SetResourceOwnerId(v int64) *QueryFailDetailDownloadRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryFailDetailDownloadRequest) SetStatus(v string) *QueryFailDetailDownloadRequest {
	s.Status = &v
	return s
}

func (s *QueryFailDetailDownloadRequest) SetTaskId(v int64) *QueryFailDetailDownloadRequest {
	s.TaskId = &v
	return s
}

func (s *QueryFailDetailDownloadRequest) SetTaskInstanceId(v int64) *QueryFailDetailDownloadRequest {
	s.TaskInstanceId = &v
	return s
}

type QueryFailDetailDownloadResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryFailDetailDownloadResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFailDetailDownloadResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFailDetailDownloadResponseBody) SetRequestId(v string) *QueryFailDetailDownloadResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryFailDetailDownloadResponseBody) SetCode(v string) *QueryFailDetailDownloadResponseBody {
	s.Code = &v
	return s
}

func (s *QueryFailDetailDownloadResponseBody) SetData(v string) *QueryFailDetailDownloadResponseBody {
	s.Data = &v
	return s
}

type QueryFailDetailDownloadResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryFailDetailDownloadResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryFailDetailDownloadResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFailDetailDownloadResponse) GoString() string {
	return s.String()
}

func (s *QueryFailDetailDownloadResponse) SetHeaders(v map[string]*string) *QueryFailDetailDownloadResponse {
	s.Headers = v
	return s
}

func (s *QueryFailDetailDownloadResponse) SetStatusCode(v int32) *QueryFailDetailDownloadResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryFailDetailDownloadResponse) SetBody(v *QueryFailDetailDownloadResponseBody) *QueryFailDetailDownloadResponse {
	s.Body = v
	return s
}

type QueryFailDetailDownloadNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// This parameter is required.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	TaskInstanceId *int64 `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
}

func (s QueryFailDetailDownloadNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFailDetailDownloadNewRequest) GoString() string {
	return s.String()
}

func (s *QueryFailDetailDownloadNewRequest) SetOwnerId(v int64) *QueryFailDetailDownloadNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryFailDetailDownloadNewRequest) SetProdCode(v string) *QueryFailDetailDownloadNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryFailDetailDownloadNewRequest) SetResourceOwnerAccount(v string) *QueryFailDetailDownloadNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryFailDetailDownloadNewRequest) SetResourceOwnerId(v int64) *QueryFailDetailDownloadNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryFailDetailDownloadNewRequest) SetStatus(v string) *QueryFailDetailDownloadNewRequest {
	s.Status = &v
	return s
}

func (s *QueryFailDetailDownloadNewRequest) SetTaskId(v int64) *QueryFailDetailDownloadNewRequest {
	s.TaskId = &v
	return s
}

func (s *QueryFailDetailDownloadNewRequest) SetTaskInstanceId(v int64) *QueryFailDetailDownloadNewRequest {
	s.TaskInstanceId = &v
	return s
}

type QueryFailDetailDownloadNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s QueryFailDetailDownloadNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFailDetailDownloadNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFailDetailDownloadNewResponseBody) SetRequestId(v string) *QueryFailDetailDownloadNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryFailDetailDownloadNewResponseBody) SetResult(v string) *QueryFailDetailDownloadNewResponseBody {
	s.Result = &v
	return s
}

type QueryFailDetailDownloadNewResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryFailDetailDownloadNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryFailDetailDownloadNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFailDetailDownloadNewResponse) GoString() string {
	return s.String()
}

func (s *QueryFailDetailDownloadNewResponse) SetHeaders(v map[string]*string) *QueryFailDetailDownloadNewResponse {
	s.Headers = v
	return s
}

func (s *QueryFailDetailDownloadNewResponse) SetStatusCode(v int32) *QueryFailDetailDownloadNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryFailDetailDownloadNewResponse) SetBody(v *QueryFailDetailDownloadNewResponseBody) *QueryFailDetailDownloadNewResponse {
	s.Body = v
	return s
}

type QueryFlowLimitRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryFlowLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowLimitRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowLimitRequest) SetOwnerId(v int64) *QueryFlowLimitRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryFlowLimitRequest) SetProdCode(v string) *QueryFlowLimitRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryFlowLimitRequest) SetResourceOwnerAccount(v string) *QueryFlowLimitRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryFlowLimitRequest) SetResourceOwnerId(v int64) *QueryFlowLimitRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryFlowLimitResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryFlowLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowLimitResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFlowLimitResponseBody) SetRequestId(v string) *QueryFlowLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryFlowLimitResponseBody) SetCode(v string) *QueryFlowLimitResponseBody {
	s.Code = &v
	return s
}

func (s *QueryFlowLimitResponseBody) SetData(v string) *QueryFlowLimitResponseBody {
	s.Data = &v
	return s
}

type QueryFlowLimitResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryFlowLimitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryFlowLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowLimitResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowLimitResponse) SetHeaders(v map[string]*string) *QueryFlowLimitResponse {
	s.Headers = v
	return s
}

func (s *QueryFlowLimitResponse) SetStatusCode(v int32) *QueryFlowLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryFlowLimitResponse) SetBody(v *QueryFlowLimitResponseBody) *QueryFlowLimitResponse {
	s.Body = v
	return s
}

type QueryFlowLimitNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryFlowLimitNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowLimitNewRequest) GoString() string {
	return s.String()
}

func (s *QueryFlowLimitNewRequest) SetBizType(v string) *QueryFlowLimitNewRequest {
	s.BizType = &v
	return s
}

func (s *QueryFlowLimitNewRequest) SetOwnerId(v int64) *QueryFlowLimitNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryFlowLimitNewRequest) SetProdCode(v string) *QueryFlowLimitNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryFlowLimitNewRequest) SetResourceOwnerAccount(v string) *QueryFlowLimitNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryFlowLimitNewRequest) SetResourceOwnerId(v int64) *QueryFlowLimitNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryFlowLimitNewResponseBody struct {
	DailyLimit  *int64  `json:"DailyLimit,omitempty" xml:"DailyLimit,omitempty"`
	HourLimit   *int64  `json:"HourLimit,omitempty" xml:"HourLimit,omitempty"`
	MinuteLimit *int64  `json:"MinuteLimit,omitempty" xml:"MinuteLimit,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryFlowLimitNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowLimitNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFlowLimitNewResponseBody) SetDailyLimit(v int64) *QueryFlowLimitNewResponseBody {
	s.DailyLimit = &v
	return s
}

func (s *QueryFlowLimitNewResponseBody) SetHourLimit(v int64) *QueryFlowLimitNewResponseBody {
	s.HourLimit = &v
	return s
}

func (s *QueryFlowLimitNewResponseBody) SetMinuteLimit(v int64) *QueryFlowLimitNewResponseBody {
	s.MinuteLimit = &v
	return s
}

func (s *QueryFlowLimitNewResponseBody) SetRequestId(v string) *QueryFlowLimitNewResponseBody {
	s.RequestId = &v
	return s
}

type QueryFlowLimitNewResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryFlowLimitNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryFlowLimitNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFlowLimitNewResponse) GoString() string {
	return s.String()
}

func (s *QueryFlowLimitNewResponse) SetHeaders(v map[string]*string) *QueryFlowLimitNewResponse {
	s.Headers = v
	return s
}

func (s *QueryFlowLimitNewResponse) SetStatusCode(v int32) *QueryFlowLimitNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryFlowLimitNewResponse) SetBody(v *QueryFlowLimitNewResponseBody) *QueryFlowLimitNewResponse {
	s.Body = v
	return s
}

type QueryIndexColRecordRequest struct {
	// This parameter is required.
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// This parameter is required.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	TaskInstanceId *int64 `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
}

func (s QueryIndexColRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIndexColRecordRequest) GoString() string {
	return s.String()
}

func (s *QueryIndexColRecordRequest) SetBizType(v string) *QueryIndexColRecordRequest {
	s.BizType = &v
	return s
}

func (s *QueryIndexColRecordRequest) SetOwnerId(v int64) *QueryIndexColRecordRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryIndexColRecordRequest) SetProdCode(v string) *QueryIndexColRecordRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryIndexColRecordRequest) SetResourceOwnerAccount(v string) *QueryIndexColRecordRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryIndexColRecordRequest) SetResourceOwnerId(v int64) *QueryIndexColRecordRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryIndexColRecordRequest) SetStatus(v string) *QueryIndexColRecordRequest {
	s.Status = &v
	return s
}

func (s *QueryIndexColRecordRequest) SetTaskId(v int64) *QueryIndexColRecordRequest {
	s.TaskId = &v
	return s
}

func (s *QueryIndexColRecordRequest) SetTaskInstanceId(v int64) *QueryIndexColRecordRequest {
	s.TaskInstanceId = &v
	return s
}

type QueryIndexColRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryIndexColRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryIndexColRecordResponseBody) GoString() string {
	return s.String()
}

func (s *QueryIndexColRecordResponseBody) SetRequestId(v string) *QueryIndexColRecordResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryIndexColRecordResponseBody) SetCode(v string) *QueryIndexColRecordResponseBody {
	s.Code = &v
	return s
}

func (s *QueryIndexColRecordResponseBody) SetData(v string) *QueryIndexColRecordResponseBody {
	s.Data = &v
	return s
}

type QueryIndexColRecordResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryIndexColRecordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryIndexColRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIndexColRecordResponse) GoString() string {
	return s.String()
}

func (s *QueryIndexColRecordResponse) SetHeaders(v map[string]*string) *QueryIndexColRecordResponse {
	s.Headers = v
	return s
}

func (s *QueryIndexColRecordResponse) SetStatusCode(v int32) *QueryIndexColRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryIndexColRecordResponse) SetBody(v *QueryIndexColRecordResponseBody) *QueryIndexColRecordResponse {
	s.Body = v
	return s
}

type QueryLearningStatusNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryLearningStatusNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLearningStatusNewRequest) GoString() string {
	return s.String()
}

func (s *QueryLearningStatusNewRequest) SetOwnerId(v int64) *QueryLearningStatusNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryLearningStatusNewRequest) SetProdCode(v string) *QueryLearningStatusNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryLearningStatusNewRequest) SetResourceOwnerAccount(v string) *QueryLearningStatusNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryLearningStatusNewRequest) SetResourceOwnerId(v int64) *QueryLearningStatusNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryLearningStatusNewRequest) SetType(v string) *QueryLearningStatusNewRequest {
	s.Type = &v
	return s
}

type QueryLearningStatusNewResponseBody struct {
	LearningStatus *string `json:"LearningStatus,omitempty" xml:"LearningStatus,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryLearningStatusNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryLearningStatusNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryLearningStatusNewResponseBody) SetLearningStatus(v string) *QueryLearningStatusNewResponseBody {
	s.LearningStatus = &v
	return s
}

func (s *QueryLearningStatusNewResponseBody) SetRequestId(v string) *QueryLearningStatusNewResponseBody {
	s.RequestId = &v
	return s
}

type QueryLearningStatusNewResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryLearningStatusNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryLearningStatusNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLearningStatusNewResponse) GoString() string {
	return s.String()
}

func (s *QueryLearningStatusNewResponse) SetHeaders(v map[string]*string) *QueryLearningStatusNewResponse {
	s.Headers = v
	return s
}

func (s *QueryLearningStatusNewResponse) SetStatusCode(v int32) *QueryLearningStatusNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryLearningStatusNewResponse) SetBody(v *QueryLearningStatusNewResponseBody) *QueryLearningStatusNewResponse {
	s.Body = v
	return s
}

type QueryMarketingAssistantStatusRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMarketingAssistantStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMarketingAssistantStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryMarketingAssistantStatusRequest) SetOwnerId(v int64) *QueryMarketingAssistantStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMarketingAssistantStatusRequest) SetProdCode(v string) *QueryMarketingAssistantStatusRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryMarketingAssistantStatusRequest) SetResourceOwnerAccount(v string) *QueryMarketingAssistantStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMarketingAssistantStatusRequest) SetResourceOwnerId(v int64) *QueryMarketingAssistantStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMarketingAssistantStatusResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMarketingAssistantStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMarketingAssistantStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMarketingAssistantStatusResponseBody) SetCode(v string) *QueryMarketingAssistantStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryMarketingAssistantStatusResponseBody) SetData(v string) *QueryMarketingAssistantStatusResponseBody {
	s.Data = &v
	return s
}

func (s *QueryMarketingAssistantStatusResponseBody) SetRequestId(v string) *QueryMarketingAssistantStatusResponseBody {
	s.RequestId = &v
	return s
}

type QueryMarketingAssistantStatusResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMarketingAssistantStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMarketingAssistantStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMarketingAssistantStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryMarketingAssistantStatusResponse) SetHeaders(v map[string]*string) *QueryMarketingAssistantStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryMarketingAssistantStatusResponse) SetStatusCode(v int32) *QueryMarketingAssistantStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMarketingAssistantStatusResponse) SetBody(v *QueryMarketingAssistantStatusResponseBody) *QueryMarketingAssistantStatusResponse {
	s.Body = v
	return s
}

type QueryMessageCallbackNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	CallbackUrl          *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMessageCallbackNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageCallbackNewRequest) GoString() string {
	return s.String()
}

func (s *QueryMessageCallbackNewRequest) SetBizType(v string) *QueryMessageCallbackNewRequest {
	s.BizType = &v
	return s
}

func (s *QueryMessageCallbackNewRequest) SetCallbackUrl(v string) *QueryMessageCallbackNewRequest {
	s.CallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewRequest) SetOwnerId(v int64) *QueryMessageCallbackNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMessageCallbackNewRequest) SetProdCode(v string) *QueryMessageCallbackNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryMessageCallbackNewRequest) SetResourceOwnerAccount(v string) *QueryMessageCallbackNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMessageCallbackNewRequest) SetResourceOwnerId(v int64) *QueryMessageCallbackNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMessageCallbackNewResponseBody struct {
	AiccsCallMidRecordCallbackUrl   *string `json:"AiccsCallMidRecordCallbackUrl,omitempty" xml:"AiccsCallMidRecordCallbackUrl,omitempty"`
	AiccsCallRecordCallbackUrl      *string `json:"AiccsCallRecordCallbackUrl,omitempty" xml:"AiccsCallRecordCallbackUrl,omitempty"`
	AiccsSentRecordCallbackUrl      *string `json:"AiccsSentRecordCallbackUrl,omitempty" xml:"AiccsSentRecordCallbackUrl,omitempty"`
	ArtcCdrReportCallBackUrl        *string `json:"ArtcCdrReportCallBackUrl,omitempty" xml:"ArtcCdrReportCallBackUrl,omitempty"`
	ArtcTempStatusReportCallBackUrl *string `json:"ArtcTempStatusReportCallBackUrl,omitempty" xml:"ArtcTempStatusReportCallBackUrl,omitempty"`
	CardDyncResCallbackUrl          *string `json:"CardDyncResCallbackUrl,omitempty" xml:"CardDyncResCallbackUrl,omitempty"`
	CardTemplateCallBackUrl         *string `json:"CardTemplateCallBackUrl,omitempty" xml:"CardTemplateCallBackUrl,omitempty"`
	CardVerderCallBackUrl           *string `json:"CardVerderCallBackUrl,omitempty" xml:"CardVerderCallBackUrl,omitempty"`
	DcdpCallbackUrl                 *string `json:"DcdpCallbackUrl,omitempty" xml:"DcdpCallbackUrl,omitempty"`
	DigitSmsTemplateCallBackUrl     *string `json:"DigitSmsTemplateCallBackUrl,omitempty" xml:"DigitSmsTemplateCallBackUrl,omitempty"`
	GlobeSmsReportCallback          *bool   `json:"GlobeSmsReportCallback,omitempty" xml:"GlobeSmsReportCallback,omitempty"`
	GlobeSmsReportCallbackUrl       *string `json:"GlobeSmsReportCallbackUrl,omitempty" xml:"GlobeSmsReportCallbackUrl,omitempty"`
	IsAiccsCallMidRecord            *bool   `json:"IsAiccsCallMidRecord,omitempty" xml:"IsAiccsCallMidRecord,omitempty"`
	IsAiccsCallRecord               *bool   `json:"IsAiccsCallRecord,omitempty" xml:"IsAiccsCallRecord,omitempty"`
	IsAiccsSentRecord               *bool   `json:"IsAiccsSentRecord,omitempty" xml:"IsAiccsSentRecord,omitempty"`
	IsArtcCdrReportCallBack         *bool   `json:"IsArtcCdrReportCallBack,omitempty" xml:"IsArtcCdrReportCallBack,omitempty"`
	IsArtcTempStatusReportCallBack  *bool   `json:"IsArtcTempStatusReportCallBack,omitempty" xml:"IsArtcTempStatusReportCallBack,omitempty"`
	IsDcdpCallback                  *bool   `json:"IsDcdpCallback,omitempty" xml:"IsDcdpCallback,omitempty"`
	IsDigitSmsTemplateCallBack      *bool   `json:"IsDigitSmsTemplateCallBack,omitempty" xml:"IsDigitSmsTemplateCallBack,omitempty"`
	IsGlobeSmsReportCallback        *bool   `json:"IsGlobeSmsReportCallback,omitempty" xml:"IsGlobeSmsReportCallback,omitempty"`
	IsOpened                        *bool   `json:"IsOpened,omitempty" xml:"IsOpened,omitempty"`
	IsSecretReportMessageCallback   *bool   `json:"IsSecretReportMessageCallback,omitempty" xml:"IsSecretReportMessageCallback,omitempty"`
	IsSecretSmsMessageCallback      *bool   `json:"IsSecretSmsMessageCallback,omitempty" xml:"IsSecretSmsMessageCallback,omitempty"`
	IsSignReportCallback            *bool   `json:"IsSignReportCallback,omitempty" xml:"IsSignReportCallback,omitempty"`
	IsSmartCallAsrCallBack          *bool   `json:"IsSmartCallAsrCallBack,omitempty" xml:"IsSmartCallAsrCallBack,omitempty"`
	IsSmsReportMessageCallback      *bool   `json:"IsSmsReportMessageCallback,omitempty" xml:"IsSmsReportMessageCallback,omitempty"`
	IsSmsUpMessageCallback          *bool   `json:"IsSmsUpMessageCallback,omitempty" xml:"IsSmsUpMessageCallback,omitempty"`
	IsTemplateReportCallback        *bool   `json:"IsTemplateReportCallback,omitempty" xml:"IsTemplateReportCallback,omitempty"`
	IsVoiceAsrCallBack              *bool   `json:"IsVoiceAsrCallBack,omitempty" xml:"IsVoiceAsrCallBack,omitempty"`
	IsVoiceCallMidStateCallBack     *bool   `json:"IsVoiceCallMidStateCallBack,omitempty" xml:"IsVoiceCallMidStateCallBack,omitempty"`
	IsVoiceCallRecordCallBack       *bool   `json:"IsVoiceCallRecordCallBack,omitempty" xml:"IsVoiceCallRecordCallBack,omitempty"`
	IsVoiceRecordingCallBack        *bool   `json:"IsVoiceRecordingCallBack,omitempty" xml:"IsVoiceRecordingCallBack,omitempty"`
	ReportCallbackUrl               *string `json:"ReportCallbackUrl,omitempty" xml:"ReportCallbackUrl,omitempty"`
	RequestId                       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecretCallbackUrl               *string `json:"SecretCallbackUrl,omitempty" xml:"SecretCallbackUrl,omitempty"`
	SecretSmsCallbackUrl            *string `json:"SecretSmsCallbackUrl,omitempty" xml:"SecretSmsCallbackUrl,omitempty"`
	ShortLinkCallBackUrl            *string `json:"ShortLinkCallBackUrl,omitempty" xml:"ShortLinkCallBackUrl,omitempty"`
	SignReportCallbackUrl           *string `json:"SignReportCallbackUrl,omitempty" xml:"SignReportCallbackUrl,omitempty"`
	SmartCallAsrCallBackUrl         *string `json:"SmartCallAsrCallBackUrl,omitempty" xml:"SmartCallAsrCallBackUrl,omitempty"`
	TemplateReportCallbackUrl       *string `json:"TemplateReportCallbackUrl,omitempty" xml:"TemplateReportCallbackUrl,omitempty"`
	UpCallbackUrl                   *string `json:"UpCallbackUrl,omitempty" xml:"UpCallbackUrl,omitempty"`
	VoiceAsrCallBackUrl             *string `json:"VoiceAsrCallBackUrl,omitempty" xml:"VoiceAsrCallBackUrl,omitempty"`
	VoiceCallMidStateCallBackUrl    *string `json:"VoiceCallMidStateCallBackUrl,omitempty" xml:"VoiceCallMidStateCallBackUrl,omitempty"`
	VoiceCallRecordCallBackUrl      *string `json:"VoiceCallRecordCallBackUrl,omitempty" xml:"VoiceCallRecordCallBackUrl,omitempty"`
	VoiceRecordingCallBackUrl       *string `json:"VoiceRecordingCallBackUrl,omitempty" xml:"VoiceRecordingCallBackUrl,omitempty"`
}

func (s QueryMessageCallbackNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageCallbackNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMessageCallbackNewResponseBody) SetAiccsCallMidRecordCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.AiccsCallMidRecordCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetAiccsCallRecordCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.AiccsCallRecordCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetAiccsSentRecordCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.AiccsSentRecordCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetArtcCdrReportCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.ArtcCdrReportCallBackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetArtcTempStatusReportCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.ArtcTempStatusReportCallBackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetCardDyncResCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.CardDyncResCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetCardTemplateCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.CardTemplateCallBackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetCardVerderCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.CardVerderCallBackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetDcdpCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.DcdpCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetDigitSmsTemplateCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.DigitSmsTemplateCallBackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetGlobeSmsReportCallback(v bool) *QueryMessageCallbackNewResponseBody {
	s.GlobeSmsReportCallback = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetGlobeSmsReportCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.GlobeSmsReportCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsAiccsCallMidRecord(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsAiccsCallMidRecord = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsAiccsCallRecord(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsAiccsCallRecord = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsAiccsSentRecord(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsAiccsSentRecord = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsArtcCdrReportCallBack(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsArtcCdrReportCallBack = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsArtcTempStatusReportCallBack(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsArtcTempStatusReportCallBack = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsDcdpCallback(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsDcdpCallback = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsDigitSmsTemplateCallBack(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsDigitSmsTemplateCallBack = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsGlobeSmsReportCallback(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsGlobeSmsReportCallback = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsOpened(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsOpened = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsSecretReportMessageCallback(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsSecretReportMessageCallback = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsSecretSmsMessageCallback(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsSecretSmsMessageCallback = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsSignReportCallback(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsSignReportCallback = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsSmartCallAsrCallBack(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsSmartCallAsrCallBack = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsSmsReportMessageCallback(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsSmsReportMessageCallback = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsSmsUpMessageCallback(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsSmsUpMessageCallback = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsTemplateReportCallback(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsTemplateReportCallback = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsVoiceAsrCallBack(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsVoiceAsrCallBack = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsVoiceCallMidStateCallBack(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsVoiceCallMidStateCallBack = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsVoiceCallRecordCallBack(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsVoiceCallRecordCallBack = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetIsVoiceRecordingCallBack(v bool) *QueryMessageCallbackNewResponseBody {
	s.IsVoiceRecordingCallBack = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetReportCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.ReportCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetRequestId(v string) *QueryMessageCallbackNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetSecretCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.SecretCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetSecretSmsCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.SecretSmsCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetShortLinkCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.ShortLinkCallBackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetSignReportCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.SignReportCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetSmartCallAsrCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.SmartCallAsrCallBackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetTemplateReportCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.TemplateReportCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetUpCallbackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.UpCallbackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetVoiceAsrCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.VoiceAsrCallBackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetVoiceCallMidStateCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.VoiceCallMidStateCallBackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetVoiceCallRecordCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.VoiceCallRecordCallBackUrl = &v
	return s
}

func (s *QueryMessageCallbackNewResponseBody) SetVoiceRecordingCallBackUrl(v string) *QueryMessageCallbackNewResponseBody {
	s.VoiceRecordingCallBackUrl = &v
	return s
}

type QueryMessageCallbackNewResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMessageCallbackNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMessageCallbackNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageCallbackNewResponse) GoString() string {
	return s.String()
}

func (s *QueryMessageCallbackNewResponse) SetHeaders(v map[string]*string) *QueryMessageCallbackNewResponse {
	s.Headers = v
	return s
}

func (s *QueryMessageCallbackNewResponse) SetStatusCode(v int32) *QueryMessageCallbackNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMessageCallbackNewResponse) SetBody(v *QueryMessageCallbackNewResponseBody) *QueryMessageCallbackNewResponse {
	s.Body = v
	return s
}

type QueryMessageQueueNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	QueueTypes           *string `json:"QueueTypes,omitempty" xml:"QueueTypes,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMessageQueueNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageQueueNewRequest) GoString() string {
	return s.String()
}

func (s *QueryMessageQueueNewRequest) SetOwnerId(v int64) *QueryMessageQueueNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMessageQueueNewRequest) SetProdCode(v string) *QueryMessageQueueNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryMessageQueueNewRequest) SetQueueTypes(v string) *QueryMessageQueueNewRequest {
	s.QueueTypes = &v
	return s
}

func (s *QueryMessageQueueNewRequest) SetResourceOwnerAccount(v string) *QueryMessageQueueNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMessageQueueNewRequest) SetResourceOwnerId(v int64) *QueryMessageQueueNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMessageQueueNewResponseBody struct {
	List      []*QueryMessageQueueNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMessageQueueNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageQueueNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMessageQueueNewResponseBody) SetList(v []*QueryMessageQueueNewResponseBodyList) *QueryMessageQueueNewResponseBody {
	s.List = v
	return s
}

func (s *QueryMessageQueueNewResponseBody) SetRequestId(v string) *QueryMessageQueueNewResponseBody {
	s.RequestId = &v
	return s
}

type QueryMessageQueueNewResponseBodyList struct {
	IsCreated *bool   `json:"IsCreated,omitempty" xml:"IsCreated,omitempty"`
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	QueueType *string `json:"QueueType,omitempty" xml:"QueueType,omitempty"`
	Region    *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s QueryMessageQueueNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageQueueNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryMessageQueueNewResponseBodyList) SetIsCreated(v bool) *QueryMessageQueueNewResponseBodyList {
	s.IsCreated = &v
	return s
}

func (s *QueryMessageQueueNewResponseBodyList) SetQueueName(v string) *QueryMessageQueueNewResponseBodyList {
	s.QueueName = &v
	return s
}

func (s *QueryMessageQueueNewResponseBodyList) SetQueueType(v string) *QueryMessageQueueNewResponseBodyList {
	s.QueueType = &v
	return s
}

func (s *QueryMessageQueueNewResponseBodyList) SetRegion(v string) *QueryMessageQueueNewResponseBodyList {
	s.Region = &v
	return s
}

type QueryMessageQueueNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMessageQueueNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMessageQueueNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMessageQueueNewResponse) GoString() string {
	return s.String()
}

func (s *QueryMessageQueueNewResponse) SetHeaders(v map[string]*string) *QueryMessageQueueNewResponse {
	s.Headers = v
	return s
}

func (s *QueryMessageQueueNewResponse) SetStatusCode(v int32) *QueryMessageQueueNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMessageQueueNewResponse) SetBody(v *QueryMessageQueueNewResponseBody) *QueryMessageQueueNewResponse {
	s.Body = v
	return s
}

type QueryMonthlyBillInfoLeafNewRequest struct {
	BillCycle            *string `json:"BillCycle,omitempty" xml:"BillCycle,omitempty"`
	ItemId               *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	ItemName             *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SubjectItemId        *string `json:"SubjectItemId,omitempty" xml:"SubjectItemId,omitempty"`
}

func (s QueryMonthlyBillInfoLeafNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillInfoLeafNewRequest) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillInfoLeafNewRequest) SetBillCycle(v string) *QueryMonthlyBillInfoLeafNewRequest {
	s.BillCycle = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewRequest) SetItemId(v string) *QueryMonthlyBillInfoLeafNewRequest {
	s.ItemId = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewRequest) SetItemName(v string) *QueryMonthlyBillInfoLeafNewRequest {
	s.ItemName = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewRequest) SetOwnerId(v int64) *QueryMonthlyBillInfoLeafNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewRequest) SetProdCode(v string) *QueryMonthlyBillInfoLeafNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewRequest) SetResourceOwnerAccount(v string) *QueryMonthlyBillInfoLeafNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewRequest) SetResourceOwnerId(v int64) *QueryMonthlyBillInfoLeafNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewRequest) SetSubjectItemId(v string) *QueryMonthlyBillInfoLeafNewRequest {
	s.SubjectItemId = &v
	return s
}

type QueryMonthlyBillInfoLeafNewResponseBody struct {
	CouponPayment     *string                                                     `json:"CouponPayment,omitempty" xml:"CouponPayment,omitempty"`
	IsSeparatedPrice  *bool                                                       `json:"IsSeparatedPrice,omitempty" xml:"IsSeparatedPrice,omitempty"`
	LayeredBillDOList []*QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList `json:"LayeredBillDOList,omitempty" xml:"LayeredBillDOList,omitempty" type:"Repeated"`
	PackageAmount     *string                                                     `json:"PackageAmount,omitempty" xml:"PackageAmount,omitempty"`
	RealPayment       *string                                                     `json:"RealPayment,omitempty" xml:"RealPayment,omitempty"`
	RequestId         *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalPayment      *string                                                     `json:"TotalPayment,omitempty" xml:"TotalPayment,omitempty"`
}

func (s QueryMonthlyBillInfoLeafNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillInfoLeafNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillInfoLeafNewResponseBody) SetCouponPayment(v string) *QueryMonthlyBillInfoLeafNewResponseBody {
	s.CouponPayment = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBody) SetIsSeparatedPrice(v bool) *QueryMonthlyBillInfoLeafNewResponseBody {
	s.IsSeparatedPrice = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBody) SetLayeredBillDOList(v []*QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) *QueryMonthlyBillInfoLeafNewResponseBody {
	s.LayeredBillDOList = v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBody) SetPackageAmount(v string) *QueryMonthlyBillInfoLeafNewResponseBody {
	s.PackageAmount = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBody) SetRealPayment(v string) *QueryMonthlyBillInfoLeafNewResponseBody {
	s.RealPayment = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBody) SetRequestId(v string) *QueryMonthlyBillInfoLeafNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBody) SetTotalPayment(v string) *QueryMonthlyBillInfoLeafNewResponseBody {
	s.TotalPayment = &v
	return s
}

type QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList struct {
	AddCount          *int64                                                                       `json:"AddCount,omitempty" xml:"AddCount,omitempty"`
	AddUnit           *string                                                                      `json:"AddUnit,omitempty" xml:"AddUnit,omitempty"`
	BillAmount        *string                                                                      `json:"BillAmount,omitempty" xml:"BillAmount,omitempty"`
	ItemId            *string                                                                      `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	ItemName          *string                                                                      `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	Operator          *string                                                                      `json:"Operator,omitempty" xml:"Operator,omitempty"`
	PackageBill       *string                                                                      `json:"PackageBill,omitempty" xml:"PackageBill,omitempty"`
	SinglePrice       *string                                                                      `json:"SinglePrice,omitempty" xml:"SinglePrice,omitempty"`
	SubjectDetailList []*QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList `json:"SubjectDetailList,omitempty" xml:"SubjectDetailList,omitempty" type:"Repeated"`
	SubjectItemId     *string                                                                      `json:"SubjectItemId,omitempty" xml:"SubjectItemId,omitempty"`
	SubjectName       *string                                                                      `json:"SubjectName,omitempty" xml:"SubjectName,omitempty"`
}

func (s QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetAddCount(v int64) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.AddCount = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetAddUnit(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.AddUnit = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetBillAmount(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.BillAmount = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetItemId(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.ItemId = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetItemName(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.ItemName = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetOperator(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.Operator = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetPackageBill(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.PackageBill = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetSinglePrice(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.SinglePrice = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetSubjectDetailList(v []*QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.SubjectDetailList = v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetSubjectItemId(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.SubjectItemId = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList) SetSubjectName(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList {
	s.SubjectName = &v
	return s
}

type QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList struct {
	AddCount      *int64  `json:"AddCount,omitempty" xml:"AddCount,omitempty"`
	AddUnit       *string `json:"AddUnit,omitempty" xml:"AddUnit,omitempty"`
	BillAmount    *string `json:"BillAmount,omitempty" xml:"BillAmount,omitempty"`
	ItemId        *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	ItemName      *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	Operator      *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	PackageBill   *string `json:"PackageBill,omitempty" xml:"PackageBill,omitempty"`
	SinglePrice   *string `json:"SinglePrice,omitempty" xml:"SinglePrice,omitempty"`
	SubjectItemId *string `json:"SubjectItemId,omitempty" xml:"SubjectItemId,omitempty"`
	SubjectName   *string `json:"SubjectName,omitempty" xml:"SubjectName,omitempty"`
}

func (s QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) SetAddCount(v int64) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList {
	s.AddCount = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) SetAddUnit(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList {
	s.AddUnit = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) SetBillAmount(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList {
	s.BillAmount = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) SetItemId(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList {
	s.ItemId = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) SetItemName(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList {
	s.ItemName = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) SetOperator(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList {
	s.Operator = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) SetPackageBill(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList {
	s.PackageBill = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) SetSinglePrice(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList {
	s.SinglePrice = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) SetSubjectItemId(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList {
	s.SubjectItemId = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList) SetSubjectName(v string) *QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList {
	s.SubjectName = &v
	return s
}

type QueryMonthlyBillInfoLeafNewResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMonthlyBillInfoLeafNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMonthlyBillInfoLeafNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillInfoLeafNewResponse) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillInfoLeafNewResponse) SetHeaders(v map[string]*string) *QueryMonthlyBillInfoLeafNewResponse {
	s.Headers = v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponse) SetStatusCode(v int32) *QueryMonthlyBillInfoLeafNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMonthlyBillInfoLeafNewResponse) SetBody(v *QueryMonthlyBillInfoLeafNewResponseBody) *QueryMonthlyBillInfoLeafNewResponse {
	s.Body = v
	return s
}

type QueryMonthlyBillRentalRequest struct {
	// This parameter is required.
	BillCycle            *string `json:"BillCycle,omitempty" xml:"BillCycle,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMonthlyBillRentalRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillRentalRequest) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillRentalRequest) SetBillCycle(v string) *QueryMonthlyBillRentalRequest {
	s.BillCycle = &v
	return s
}

func (s *QueryMonthlyBillRentalRequest) SetOwnerId(v int64) *QueryMonthlyBillRentalRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMonthlyBillRentalRequest) SetPageNo(v int32) *QueryMonthlyBillRentalRequest {
	s.PageNo = &v
	return s
}

func (s *QueryMonthlyBillRentalRequest) SetPageSize(v int32) *QueryMonthlyBillRentalRequest {
	s.PageSize = &v
	return s
}

func (s *QueryMonthlyBillRentalRequest) SetProdCode(v string) *QueryMonthlyBillRentalRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryMonthlyBillRentalRequest) SetResourceOwnerAccount(v string) *QueryMonthlyBillRentalRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMonthlyBillRentalRequest) SetResourceOwnerId(v int64) *QueryMonthlyBillRentalRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMonthlyBillRentalResponseBody struct {
	Code      *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *QueryMonthlyBillRentalResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMonthlyBillRentalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillRentalResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillRentalResponseBody) SetCode(v string) *QueryMonthlyBillRentalResponseBody {
	s.Code = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBody) SetData(v *QueryMonthlyBillRentalResponseBodyData) *QueryMonthlyBillRentalResponseBody {
	s.Data = v
	return s
}

func (s *QueryMonthlyBillRentalResponseBody) SetMessage(v string) *QueryMonthlyBillRentalResponseBody {
	s.Message = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBody) SetRequestId(v string) *QueryMonthlyBillRentalResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBody) SetSuccess(v bool) *QueryMonthlyBillRentalResponseBody {
	s.Success = &v
	return s
}

type QueryMonthlyBillRentalResponseBodyData struct {
	PageNo    *int32                                           `json:"pageNo,omitempty" xml:"pageNo,omitempty"`
	PageSize  *int32                                           `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	Records   []*QueryMonthlyBillRentalResponseBodyDataRecords `json:"records,omitempty" xml:"records,omitempty" type:"Repeated"`
	RentalSum *string                                          `json:"rentalSum,omitempty" xml:"rentalSum,omitempty"`
	Total     *int64                                           `json:"total,omitempty" xml:"total,omitempty"`
}

func (s QueryMonthlyBillRentalResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillRentalResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillRentalResponseBodyData) SetPageNo(v int32) *QueryMonthlyBillRentalResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBodyData) SetPageSize(v int32) *QueryMonthlyBillRentalResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBodyData) SetRecords(v []*QueryMonthlyBillRentalResponseBodyDataRecords) *QueryMonthlyBillRentalResponseBodyData {
	s.Records = v
	return s
}

func (s *QueryMonthlyBillRentalResponseBodyData) SetRentalSum(v string) *QueryMonthlyBillRentalResponseBodyData {
	s.RentalSum = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBodyData) SetTotal(v int64) *QueryMonthlyBillRentalResponseBodyData {
	s.Total = &v
	return s
}

type QueryMonthlyBillRentalResponseBodyDataRecords struct {
	BillTime    *int64  `json:"billTime,omitempty" xml:"billTime,omitempty"`
	ItemId      *string `json:"itemId,omitempty" xml:"itemId,omitempty"`
	ItemName    *string `json:"itemName,omitempty" xml:"itemName,omitempty"`
	OfferTime   *int64  `json:"offerTime,omitempty" xml:"offerTime,omitempty"`
	Rental      *string `json:"rental,omitempty" xml:"rental,omitempty"`
	SubItemId   *string `json:"subItemId,omitempty" xml:"subItemId,omitempty"`
	SubItemName *string `json:"subItemName,omitempty" xml:"subItemName,omitempty"`
}

func (s QueryMonthlyBillRentalResponseBodyDataRecords) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillRentalResponseBodyDataRecords) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillRentalResponseBodyDataRecords) SetBillTime(v int64) *QueryMonthlyBillRentalResponseBodyDataRecords {
	s.BillTime = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBodyDataRecords) SetItemId(v string) *QueryMonthlyBillRentalResponseBodyDataRecords {
	s.ItemId = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBodyDataRecords) SetItemName(v string) *QueryMonthlyBillRentalResponseBodyDataRecords {
	s.ItemName = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBodyDataRecords) SetOfferTime(v int64) *QueryMonthlyBillRentalResponseBodyDataRecords {
	s.OfferTime = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBodyDataRecords) SetRental(v string) *QueryMonthlyBillRentalResponseBodyDataRecords {
	s.Rental = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBodyDataRecords) SetSubItemId(v string) *QueryMonthlyBillRentalResponseBodyDataRecords {
	s.SubItemId = &v
	return s
}

func (s *QueryMonthlyBillRentalResponseBodyDataRecords) SetSubItemName(v string) *QueryMonthlyBillRentalResponseBodyDataRecords {
	s.SubItemName = &v
	return s
}

type QueryMonthlyBillRentalResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMonthlyBillRentalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMonthlyBillRentalResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillRentalResponse) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillRentalResponse) SetHeaders(v map[string]*string) *QueryMonthlyBillRentalResponse {
	s.Headers = v
	return s
}

func (s *QueryMonthlyBillRentalResponse) SetStatusCode(v int32) *QueryMonthlyBillRentalResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMonthlyBillRentalResponse) SetBody(v *QueryMonthlyBillRentalResponseBody) *QueryMonthlyBillRentalResponse {
	s.Body = v
	return s
}

type QueryMonthlyBillRentalNewRequest struct {
	// This parameter is required.
	BillCycle            *string `json:"BillCycle,omitempty" xml:"BillCycle,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMonthlyBillRentalNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillRentalNewRequest) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillRentalNewRequest) SetBillCycle(v string) *QueryMonthlyBillRentalNewRequest {
	s.BillCycle = &v
	return s
}

func (s *QueryMonthlyBillRentalNewRequest) SetOwnerId(v int64) *QueryMonthlyBillRentalNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMonthlyBillRentalNewRequest) SetPageNo(v int32) *QueryMonthlyBillRentalNewRequest {
	s.PageNo = &v
	return s
}

func (s *QueryMonthlyBillRentalNewRequest) SetPageSize(v int32) *QueryMonthlyBillRentalNewRequest {
	s.PageSize = &v
	return s
}

func (s *QueryMonthlyBillRentalNewRequest) SetProdCode(v string) *QueryMonthlyBillRentalNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryMonthlyBillRentalNewRequest) SetResourceOwnerAccount(v string) *QueryMonthlyBillRentalNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMonthlyBillRentalNewRequest) SetResourceOwnerId(v int64) *QueryMonthlyBillRentalNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMonthlyBillRentalNewResponseBody struct {
	PageNo    *int32                                          `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records   []*QueryMonthlyBillRentalNewResponseBodyRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	RentalSum *string                                         `json:"RentalSum,omitempty" xml:"RentalSum,omitempty"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                          `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryMonthlyBillRentalNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillRentalNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillRentalNewResponseBody) SetPageNo(v int32) *QueryMonthlyBillRentalNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBody) SetPageSize(v int32) *QueryMonthlyBillRentalNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBody) SetRecords(v []*QueryMonthlyBillRentalNewResponseBodyRecords) *QueryMonthlyBillRentalNewResponseBody {
	s.Records = v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBody) SetRentalSum(v string) *QueryMonthlyBillRentalNewResponseBody {
	s.RentalSum = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBody) SetRequestId(v string) *QueryMonthlyBillRentalNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBody) SetTotal(v int64) *QueryMonthlyBillRentalNewResponseBody {
	s.Total = &v
	return s
}

type QueryMonthlyBillRentalNewResponseBodyRecords struct {
	BillTime    *int64  `json:"BillTime,omitempty" xml:"BillTime,omitempty"`
	ItemId      *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	ItemName    *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	OfferTime   *int64  `json:"OfferTime,omitempty" xml:"OfferTime,omitempty"`
	Rental      *string `json:"Rental,omitempty" xml:"Rental,omitempty"`
	SubItemId   *string `json:"SubItemId,omitempty" xml:"SubItemId,omitempty"`
	SubItemName *string `json:"SubItemName,omitempty" xml:"SubItemName,omitempty"`
}

func (s QueryMonthlyBillRentalNewResponseBodyRecords) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillRentalNewResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillRentalNewResponseBodyRecords) SetBillTime(v int64) *QueryMonthlyBillRentalNewResponseBodyRecords {
	s.BillTime = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBodyRecords) SetItemId(v string) *QueryMonthlyBillRentalNewResponseBodyRecords {
	s.ItemId = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBodyRecords) SetItemName(v string) *QueryMonthlyBillRentalNewResponseBodyRecords {
	s.ItemName = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBodyRecords) SetOfferTime(v int64) *QueryMonthlyBillRentalNewResponseBodyRecords {
	s.OfferTime = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBodyRecords) SetRental(v string) *QueryMonthlyBillRentalNewResponseBodyRecords {
	s.Rental = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBodyRecords) SetSubItemId(v string) *QueryMonthlyBillRentalNewResponseBodyRecords {
	s.SubItemId = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponseBodyRecords) SetSubItemName(v string) *QueryMonthlyBillRentalNewResponseBodyRecords {
	s.SubItemName = &v
	return s
}

type QueryMonthlyBillRentalNewResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMonthlyBillRentalNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMonthlyBillRentalNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMonthlyBillRentalNewResponse) GoString() string {
	return s.String()
}

func (s *QueryMonthlyBillRentalNewResponse) SetHeaders(v map[string]*string) *QueryMonthlyBillRentalNewResponse {
	s.Headers = v
	return s
}

func (s *QueryMonthlyBillRentalNewResponse) SetStatusCode(v int32) *QueryMonthlyBillRentalNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMonthlyBillRentalNewResponse) SetBody(v *QueryMonthlyBillRentalNewResponseBody) *QueryMonthlyBillRentalNewResponse {
	s.Body = v
	return s
}

type QueryMsgCountRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMsgCountRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMsgCountRequest) GoString() string {
	return s.String()
}

func (s *QueryMsgCountRequest) SetOwnerId(v int64) *QueryMsgCountRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMsgCountRequest) SetProdCode(v string) *QueryMsgCountRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryMsgCountRequest) SetResourceOwnerAccount(v string) *QueryMsgCountRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMsgCountRequest) SetResourceOwnerId(v int64) *QueryMsgCountRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMsgCountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryMsgCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMsgCountResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMsgCountResponseBody) SetRequestId(v string) *QueryMsgCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMsgCountResponseBody) SetCode(v string) *QueryMsgCountResponseBody {
	s.Code = &v
	return s
}

func (s *QueryMsgCountResponseBody) SetData(v string) *QueryMsgCountResponseBody {
	s.Data = &v
	return s
}

type QueryMsgCountResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMsgCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMsgCountResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMsgCountResponse) GoString() string {
	return s.String()
}

func (s *QueryMsgCountResponse) SetHeaders(v map[string]*string) *QueryMsgCountResponse {
	s.Headers = v
	return s
}

func (s *QueryMsgCountResponse) SetStatusCode(v int32) *QueryMsgCountResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMsgCountResponse) SetBody(v *QueryMsgCountResponseBody) *QueryMsgCountResponse {
	s.Body = v
	return s
}

type QueryOpenStatusRequest struct {
	BusOffer *int64  `json:"BusOffer,omitempty" xml:"BusOffer,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryOpenStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpenStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryOpenStatusRequest) SetBusOffer(v int64) *QueryOpenStatusRequest {
	s.BusOffer = &v
	return s
}

func (s *QueryOpenStatusRequest) SetOwnerId(v int64) *QueryOpenStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryOpenStatusRequest) SetProdCode(v string) *QueryOpenStatusRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryOpenStatusRequest) SetProdId(v string) *QueryOpenStatusRequest {
	s.ProdId = &v
	return s
}

func (s *QueryOpenStatusRequest) SetResourceOwnerAccount(v string) *QueryOpenStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryOpenStatusRequest) SetResourceOwnerId(v int64) *QueryOpenStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryOpenStatusResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryOpenStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOpenStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOpenStatusResponseBody) SetRequestId(v string) *QueryOpenStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryOpenStatusResponseBody) SetCode(v string) *QueryOpenStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryOpenStatusResponseBody) SetData(v bool) *QueryOpenStatusResponseBody {
	s.Data = &v
	return s
}

type QueryOpenStatusResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryOpenStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryOpenStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpenStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryOpenStatusResponse) SetHeaders(v map[string]*string) *QueryOpenStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryOpenStatusResponse) SetStatusCode(v int32) *QueryOpenStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryOpenStatusResponse) SetBody(v *QueryOpenStatusResponseBody) *QueryOpenStatusResponse {
	s.Body = v
	return s
}

type QueryOpencFlagNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryOpencFlagNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOpencFlagNewRequest) GoString() string {
	return s.String()
}

func (s *QueryOpencFlagNewRequest) SetOwnerId(v int64) *QueryOpencFlagNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryOpencFlagNewRequest) SetProdCode(v string) *QueryOpencFlagNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryOpencFlagNewRequest) SetResourceOwnerAccount(v string) *QueryOpencFlagNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryOpencFlagNewRequest) SetResourceOwnerId(v int64) *QueryOpencFlagNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryOpencFlagNewResponseBody struct {
	IsOpen    *int32  `json:"IsOpen,omitempty" xml:"IsOpen,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryOpencFlagNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOpencFlagNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOpencFlagNewResponseBody) SetIsOpen(v int32) *QueryOpencFlagNewResponseBody {
	s.IsOpen = &v
	return s
}

func (s *QueryOpencFlagNewResponseBody) SetRequestId(v string) *QueryOpencFlagNewResponseBody {
	s.RequestId = &v
	return s
}

type QueryOpencFlagNewResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryOpencFlagNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryOpencFlagNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOpencFlagNewResponse) GoString() string {
	return s.String()
}

func (s *QueryOpencFlagNewResponse) SetHeaders(v map[string]*string) *QueryOpencFlagNewResponse {
	s.Headers = v
	return s
}

func (s *QueryOpencFlagNewResponse) SetStatusCode(v int32) *QueryOpencFlagNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryOpencFlagNewResponse) SetBody(v *QueryOpencFlagNewResponseBody) *QueryOpencFlagNewResponse {
	s.Body = v
	return s
}

type QueryPhoneWhiteListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PhoneNumber          *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryPhoneWhiteListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPhoneWhiteListRequest) GoString() string {
	return s.String()
}

func (s *QueryPhoneWhiteListRequest) SetOwnerId(v int64) *QueryPhoneWhiteListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryPhoneWhiteListRequest) SetPageNo(v int32) *QueryPhoneWhiteListRequest {
	s.PageNo = &v
	return s
}

func (s *QueryPhoneWhiteListRequest) SetPageSize(v int32) *QueryPhoneWhiteListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryPhoneWhiteListRequest) SetPhoneNumber(v string) *QueryPhoneWhiteListRequest {
	s.PhoneNumber = &v
	return s
}

func (s *QueryPhoneWhiteListRequest) SetProdCode(v string) *QueryPhoneWhiteListRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryPhoneWhiteListRequest) SetResourceOwnerAccount(v string) *QueryPhoneWhiteListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryPhoneWhiteListRequest) SetResourceOwnerId(v int64) *QueryPhoneWhiteListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryPhoneWhiteListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryPhoneWhiteListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPhoneWhiteListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPhoneWhiteListResponseBody) SetRequestId(v string) *QueryPhoneWhiteListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPhoneWhiteListResponseBody) SetCode(v string) *QueryPhoneWhiteListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryPhoneWhiteListResponseBody) SetData(v string) *QueryPhoneWhiteListResponseBody {
	s.Data = &v
	return s
}

type QueryPhoneWhiteListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryPhoneWhiteListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryPhoneWhiteListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPhoneWhiteListResponse) GoString() string {
	return s.String()
}

func (s *QueryPhoneWhiteListResponse) SetHeaders(v map[string]*string) *QueryPhoneWhiteListResponse {
	s.Headers = v
	return s
}

func (s *QueryPhoneWhiteListResponse) SetStatusCode(v int32) *QueryPhoneWhiteListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPhoneWhiteListResponse) SetBody(v *QueryPhoneWhiteListResponseBody) *QueryPhoneWhiteListResponse {
	s.Body = v
	return s
}

type QueryPhoneWhiteListNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PhoneNumber          *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryPhoneWhiteListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPhoneWhiteListNewRequest) GoString() string {
	return s.String()
}

func (s *QueryPhoneWhiteListNewRequest) SetOwnerId(v int64) *QueryPhoneWhiteListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryPhoneWhiteListNewRequest) SetPageNo(v int32) *QueryPhoneWhiteListNewRequest {
	s.PageNo = &v
	return s
}

func (s *QueryPhoneWhiteListNewRequest) SetPageSize(v int32) *QueryPhoneWhiteListNewRequest {
	s.PageSize = &v
	return s
}

func (s *QueryPhoneWhiteListNewRequest) SetPhoneNumber(v string) *QueryPhoneWhiteListNewRequest {
	s.PhoneNumber = &v
	return s
}

func (s *QueryPhoneWhiteListNewRequest) SetProdCode(v string) *QueryPhoneWhiteListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryPhoneWhiteListNewRequest) SetResourceOwnerAccount(v string) *QueryPhoneWhiteListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryPhoneWhiteListNewRequest) SetResourceOwnerId(v int64) *QueryPhoneWhiteListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryPhoneWhiteListNewResponseBody struct {
	List               []*QueryPhoneWhiteListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNo             *int32                                    `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize           *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId          *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total              *int64                                    `json:"Total,omitempty" xml:"Total,omitempty"`
	TotalWithoutFilter *int64                                    `json:"TotalWithoutFilter,omitempty" xml:"TotalWithoutFilter,omitempty"`
}

func (s QueryPhoneWhiteListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPhoneWhiteListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPhoneWhiteListNewResponseBody) SetList(v []*QueryPhoneWhiteListNewResponseBodyList) *QueryPhoneWhiteListNewResponseBody {
	s.List = v
	return s
}

func (s *QueryPhoneWhiteListNewResponseBody) SetPageNo(v int32) *QueryPhoneWhiteListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QueryPhoneWhiteListNewResponseBody) SetPageSize(v int32) *QueryPhoneWhiteListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryPhoneWhiteListNewResponseBody) SetRequestId(v string) *QueryPhoneWhiteListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPhoneWhiteListNewResponseBody) SetTotal(v int64) *QueryPhoneWhiteListNewResponseBody {
	s.Total = &v
	return s
}

func (s *QueryPhoneWhiteListNewResponseBody) SetTotalWithoutFilter(v int64) *QueryPhoneWhiteListNewResponseBody {
	s.TotalWithoutFilter = &v
	return s
}

type QueryPhoneWhiteListNewResponseBodyList struct {
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	Remark      *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s QueryPhoneWhiteListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryPhoneWhiteListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryPhoneWhiteListNewResponseBodyList) SetId(v int64) *QueryPhoneWhiteListNewResponseBodyList {
	s.Id = &v
	return s
}

func (s *QueryPhoneWhiteListNewResponseBodyList) SetPhoneNumber(v string) *QueryPhoneWhiteListNewResponseBodyList {
	s.PhoneNumber = &v
	return s
}

func (s *QueryPhoneWhiteListNewResponseBodyList) SetRemark(v string) *QueryPhoneWhiteListNewResponseBodyList {
	s.Remark = &v
	return s
}

type QueryPhoneWhiteListNewResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryPhoneWhiteListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryPhoneWhiteListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPhoneWhiteListNewResponse) GoString() string {
	return s.String()
}

func (s *QueryPhoneWhiteListNewResponse) SetHeaders(v map[string]*string) *QueryPhoneWhiteListNewResponse {
	s.Headers = v
	return s
}

func (s *QueryPhoneWhiteListNewResponse) SetStatusCode(v int32) *QueryPhoneWhiteListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPhoneWhiteListNewResponse) SetBody(v *QueryPhoneWhiteListNewResponseBody) *QueryPhoneWhiteListNewResponse {
	s.Body = v
	return s
}

type QueryPkgThresholdRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryPkgThresholdRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPkgThresholdRequest) GoString() string {
	return s.String()
}

func (s *QueryPkgThresholdRequest) SetOwnerId(v int64) *QueryPkgThresholdRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryPkgThresholdRequest) SetProdCode(v string) *QueryPkgThresholdRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryPkgThresholdRequest) SetResourceOwnerAccount(v string) *QueryPkgThresholdRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryPkgThresholdRequest) SetResourceOwnerId(v int64) *QueryPkgThresholdRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryPkgThresholdResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryPkgThresholdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPkgThresholdResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPkgThresholdResponseBody) SetRequestId(v string) *QueryPkgThresholdResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPkgThresholdResponseBody) SetCode(v string) *QueryPkgThresholdResponseBody {
	s.Code = &v
	return s
}

func (s *QueryPkgThresholdResponseBody) SetData(v string) *QueryPkgThresholdResponseBody {
	s.Data = &v
	return s
}

type QueryPkgThresholdResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryPkgThresholdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryPkgThresholdResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPkgThresholdResponse) GoString() string {
	return s.String()
}

func (s *QueryPkgThresholdResponse) SetHeaders(v map[string]*string) *QueryPkgThresholdResponse {
	s.Headers = v
	return s
}

func (s *QueryPkgThresholdResponse) SetStatusCode(v int32) *QueryPkgThresholdResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPkgThresholdResponse) SetBody(v *QueryPkgThresholdResponseBody) *QueryPkgThresholdResponse {
	s.Body = v
	return s
}

type QueryPkgThresholdNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryPkgThresholdNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPkgThresholdNewRequest) GoString() string {
	return s.String()
}

func (s *QueryPkgThresholdNewRequest) SetOwnerId(v int64) *QueryPkgThresholdNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryPkgThresholdNewRequest) SetProdCode(v string) *QueryPkgThresholdNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryPkgThresholdNewRequest) SetResourceOwnerAccount(v string) *QueryPkgThresholdNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryPkgThresholdNewRequest) SetResourceOwnerId(v int64) *QueryPkgThresholdNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryPkgThresholdNewResponseBody struct {
	PackageWarningLimit *int64  `json:"PackageWarningLimit,omitempty" xml:"PackageWarningLimit,omitempty"`
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryPkgThresholdNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPkgThresholdNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPkgThresholdNewResponseBody) SetPackageWarningLimit(v int64) *QueryPkgThresholdNewResponseBody {
	s.PackageWarningLimit = &v
	return s
}

func (s *QueryPkgThresholdNewResponseBody) SetRequestId(v string) *QueryPkgThresholdNewResponseBody {
	s.RequestId = &v
	return s
}

type QueryPkgThresholdNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryPkgThresholdNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryPkgThresholdNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPkgThresholdNewResponse) GoString() string {
	return s.String()
}

func (s *QueryPkgThresholdNewResponse) SetHeaders(v map[string]*string) *QueryPkgThresholdNewResponse {
	s.Headers = v
	return s
}

func (s *QueryPkgThresholdNewResponse) SetStatusCode(v int32) *QueryPkgThresholdNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPkgThresholdNewResponse) SetBody(v *QueryPkgThresholdNewResponseBody) *QueryPkgThresholdNewResponse {
	s.Body = v
	return s
}

type QueryPrevLimitNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryPrevLimitNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPrevLimitNewRequest) GoString() string {
	return s.String()
}

func (s *QueryPrevLimitNewRequest) SetOwnerId(v int64) *QueryPrevLimitNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryPrevLimitNewRequest) SetProdCode(v string) *QueryPrevLimitNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryPrevLimitNewRequest) SetResourceOwnerAccount(v string) *QueryPrevLimitNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryPrevLimitNewRequest) SetResourceOwnerId(v int64) *QueryPrevLimitNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryPrevLimitNewResponseBody struct {
	HourLimit    *int64  `json:"HourLimit,omitempty" xml:"HourLimit,omitempty"`
	IncreaseRate *int32  `json:"IncreaseRate,omitempty" xml:"IncreaseRate,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SuccessRate  *int32  `json:"SuccessRate,omitempty" xml:"SuccessRate,omitempty"`
}

func (s QueryPrevLimitNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPrevLimitNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPrevLimitNewResponseBody) SetHourLimit(v int64) *QueryPrevLimitNewResponseBody {
	s.HourLimit = &v
	return s
}

func (s *QueryPrevLimitNewResponseBody) SetIncreaseRate(v int32) *QueryPrevLimitNewResponseBody {
	s.IncreaseRate = &v
	return s
}

func (s *QueryPrevLimitNewResponseBody) SetRequestId(v string) *QueryPrevLimitNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPrevLimitNewResponseBody) SetSuccessRate(v int32) *QueryPrevLimitNewResponseBody {
	s.SuccessRate = &v
	return s
}

type QueryPrevLimitNewResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryPrevLimitNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryPrevLimitNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPrevLimitNewResponse) GoString() string {
	return s.String()
}

func (s *QueryPrevLimitNewResponse) SetHeaders(v map[string]*string) *QueryPrevLimitNewResponse {
	s.Headers = v
	return s
}

func (s *QueryPrevLimitNewResponse) SetStatusCode(v int32) *QueryPrevLimitNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPrevLimitNewResponse) SetBody(v *QueryPrevLimitNewResponseBody) *QueryPrevLimitNewResponse {
	s.Body = v
	return s
}

type QuerySaasRecordRequest struct {
	BizType  *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	IndexCol *string `json:"IndexCol,omitempty" xml:"IndexCol,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// This parameter is required.
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Result               *int64  `json:"Result,omitempty" xml:"Result,omitempty"`
	// This parameter is required.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	TaskInstanceId *int64 `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
}

func (s QuerySaasRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySaasRecordRequest) GoString() string {
	return s.String()
}

func (s *QuerySaasRecordRequest) SetBizType(v string) *QuerySaasRecordRequest {
	s.BizType = &v
	return s
}

func (s *QuerySaasRecordRequest) SetIndexCol(v string) *QuerySaasRecordRequest {
	s.IndexCol = &v
	return s
}

func (s *QuerySaasRecordRequest) SetOwnerId(v int64) *QuerySaasRecordRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySaasRecordRequest) SetPageNo(v int32) *QuerySaasRecordRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySaasRecordRequest) SetPageSize(v int32) *QuerySaasRecordRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySaasRecordRequest) SetProdCode(v string) *QuerySaasRecordRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySaasRecordRequest) SetResourceOwnerAccount(v string) *QuerySaasRecordRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySaasRecordRequest) SetResourceOwnerId(v int64) *QuerySaasRecordRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySaasRecordRequest) SetResult(v int64) *QuerySaasRecordRequest {
	s.Result = &v
	return s
}

func (s *QuerySaasRecordRequest) SetTaskId(v int64) *QuerySaasRecordRequest {
	s.TaskId = &v
	return s
}

func (s *QuerySaasRecordRequest) SetTaskInstanceId(v int64) *QuerySaasRecordRequest {
	s.TaskInstanceId = &v
	return s
}

type QuerySaasRecordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySaasRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySaasRecordResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySaasRecordResponseBody) SetRequestId(v string) *QuerySaasRecordResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySaasRecordResponseBody) SetCode(v string) *QuerySaasRecordResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySaasRecordResponseBody) SetData(v string) *QuerySaasRecordResponseBody {
	s.Data = &v
	return s
}

type QuerySaasRecordResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySaasRecordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySaasRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySaasRecordResponse) GoString() string {
	return s.String()
}

func (s *QuerySaasRecordResponse) SetHeaders(v map[string]*string) *QuerySaasRecordResponse {
	s.Headers = v
	return s
}

func (s *QuerySaasRecordResponse) SetStatusCode(v int32) *QuerySaasRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySaasRecordResponse) SetBody(v *QuerySaasRecordResponseBody) *QuerySaasRecordResponse {
	s.Body = v
	return s
}

type QuerySaasRecordNewRequest struct {
	// This parameter is required.
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	IndexCol             *string `json:"IndexCol,omitempty" xml:"IndexCol,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Result               *int64  `json:"Result,omitempty" xml:"Result,omitempty"`
	// This parameter is required.
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// This parameter is required.
	TaskInstanceId *int64 `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
}

func (s QuerySaasRecordNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySaasRecordNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySaasRecordNewRequest) SetBizType(v string) *QuerySaasRecordNewRequest {
	s.BizType = &v
	return s
}

func (s *QuerySaasRecordNewRequest) SetIndexCol(v string) *QuerySaasRecordNewRequest {
	s.IndexCol = &v
	return s
}

func (s *QuerySaasRecordNewRequest) SetOwnerId(v int64) *QuerySaasRecordNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySaasRecordNewRequest) SetPageNo(v int32) *QuerySaasRecordNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySaasRecordNewRequest) SetPageSize(v int32) *QuerySaasRecordNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySaasRecordNewRequest) SetProdCode(v string) *QuerySaasRecordNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySaasRecordNewRequest) SetResourceOwnerAccount(v string) *QuerySaasRecordNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySaasRecordNewRequest) SetResourceOwnerId(v int64) *QuerySaasRecordNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySaasRecordNewRequest) SetResult(v int64) *QuerySaasRecordNewRequest {
	s.Result = &v
	return s
}

func (s *QuerySaasRecordNewRequest) SetTaskId(v int64) *QuerySaasRecordNewRequest {
	s.TaskId = &v
	return s
}

func (s *QuerySaasRecordNewRequest) SetTaskInstanceId(v int64) *QuerySaasRecordNewRequest {
	s.TaskInstanceId = &v
	return s
}

type QuerySaasRecordNewResponseBody struct {
	List      *QuerySaasRecordNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNo    *int32                              `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                              `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QuerySaasRecordNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySaasRecordNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySaasRecordNewResponseBody) SetList(v *QuerySaasRecordNewResponseBodyList) *QuerySaasRecordNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySaasRecordNewResponseBody) SetPageNo(v int32) *QuerySaasRecordNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QuerySaasRecordNewResponseBody) SetPageSize(v int32) *QuerySaasRecordNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QuerySaasRecordNewResponseBody) SetRequestId(v string) *QuerySaasRecordNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySaasRecordNewResponseBody) SetTotal(v int64) *QuerySaasRecordNewResponseBody {
	s.Total = &v
	return s
}

type QuerySaasRecordNewResponseBodyList struct {
	SaasRecord []*QuerySaasRecordNewResponseBodyListSaasRecord `json:"SaasRecord,omitempty" xml:"SaasRecord,omitempty" type:"Repeated"`
}

func (s QuerySaasRecordNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySaasRecordNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySaasRecordNewResponseBodyList) SetSaasRecord(v []*QuerySaasRecordNewResponseBodyListSaasRecord) *QuerySaasRecordNewResponseBodyList {
	s.SaasRecord = v
	return s
}

type QuerySaasRecordNewResponseBodyListSaasRecord struct {
	BizType             *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	DetailPkId          *int64  `json:"DetailPkId,omitempty" xml:"DetailPkId,omitempty"`
	IndexCol            *string `json:"IndexCol,omitempty" xml:"IndexCol,omitempty"`
	LastDealDate        *string `json:"LastDealDate,omitempty" xml:"LastDealDate,omitempty"`
	RecordBizExpireDate *string `json:"RecordBizExpireDate,omitempty" xml:"RecordBizExpireDate,omitempty"`
	Result              *string `json:"Result,omitempty" xml:"Result,omitempty"`
	ResultDesc          *string `json:"ResultDesc,omitempty" xml:"ResultDesc,omitempty"`
	SaasContent         *string `json:"SaasContent,omitempty" xml:"SaasContent,omitempty"`
	Suggestion          *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QuerySaasRecordNewResponseBodyListSaasRecord) String() string {
	return tea.Prettify(s)
}

func (s QuerySaasRecordNewResponseBodyListSaasRecord) GoString() string {
	return s.String()
}

func (s *QuerySaasRecordNewResponseBodyListSaasRecord) SetBizType(v string) *QuerySaasRecordNewResponseBodyListSaasRecord {
	s.BizType = &v
	return s
}

func (s *QuerySaasRecordNewResponseBodyListSaasRecord) SetDetailPkId(v int64) *QuerySaasRecordNewResponseBodyListSaasRecord {
	s.DetailPkId = &v
	return s
}

func (s *QuerySaasRecordNewResponseBodyListSaasRecord) SetIndexCol(v string) *QuerySaasRecordNewResponseBodyListSaasRecord {
	s.IndexCol = &v
	return s
}

func (s *QuerySaasRecordNewResponseBodyListSaasRecord) SetLastDealDate(v string) *QuerySaasRecordNewResponseBodyListSaasRecord {
	s.LastDealDate = &v
	return s
}

func (s *QuerySaasRecordNewResponseBodyListSaasRecord) SetRecordBizExpireDate(v string) *QuerySaasRecordNewResponseBodyListSaasRecord {
	s.RecordBizExpireDate = &v
	return s
}

func (s *QuerySaasRecordNewResponseBodyListSaasRecord) SetResult(v string) *QuerySaasRecordNewResponseBodyListSaasRecord {
	s.Result = &v
	return s
}

func (s *QuerySaasRecordNewResponseBodyListSaasRecord) SetResultDesc(v string) *QuerySaasRecordNewResponseBodyListSaasRecord {
	s.ResultDesc = &v
	return s
}

func (s *QuerySaasRecordNewResponseBodyListSaasRecord) SetSaasContent(v string) *QuerySaasRecordNewResponseBodyListSaasRecord {
	s.SaasContent = &v
	return s
}

func (s *QuerySaasRecordNewResponseBodyListSaasRecord) SetSuggestion(v string) *QuerySaasRecordNewResponseBodyListSaasRecord {
	s.Suggestion = &v
	return s
}

type QuerySaasRecordNewResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySaasRecordNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySaasRecordNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySaasRecordNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySaasRecordNewResponse) SetHeaders(v map[string]*string) *QuerySaasRecordNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySaasRecordNewResponse) SetStatusCode(v int32) *QuerySaasRecordNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySaasRecordNewResponse) SetBody(v *QuerySaasRecordNewResponseBody) *QuerySaasRecordNewResponse {
	s.Body = v
	return s
}

type QuerySendDetailsByPhoneNumRequest struct {
	BizType              *int64  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ErrorCode            *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PhoneNum             *string `json:"PhoneNum,omitempty" xml:"PhoneNum,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	SendDate     *string `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
	SendStatus   *int64  `json:"SendStatus,omitempty" xml:"SendStatus,omitempty"`
	SignName     *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s QuerySendDetailsByPhoneNumRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySendDetailsByPhoneNumRequest) GoString() string {
	return s.String()
}

func (s *QuerySendDetailsByPhoneNumRequest) SetBizType(v int64) *QuerySendDetailsByPhoneNumRequest {
	s.BizType = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetErrorCode(v string) *QuerySendDetailsByPhoneNumRequest {
	s.ErrorCode = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetOwnerId(v int64) *QuerySendDetailsByPhoneNumRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetPageNo(v int32) *QuerySendDetailsByPhoneNumRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetPageSize(v int32) *QuerySendDetailsByPhoneNumRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetPhoneNum(v string) *QuerySendDetailsByPhoneNumRequest {
	s.PhoneNum = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetProdCode(v string) *QuerySendDetailsByPhoneNumRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetResourceOwnerAccount(v string) *QuerySendDetailsByPhoneNumRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetResourceOwnerId(v int64) *QuerySendDetailsByPhoneNumRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetSendDate(v string) *QuerySendDetailsByPhoneNumRequest {
	s.SendDate = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetSendStatus(v int64) *QuerySendDetailsByPhoneNumRequest {
	s.SendStatus = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetSignName(v string) *QuerySendDetailsByPhoneNumRequest {
	s.SignName = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumRequest) SetTemplateCode(v string) *QuerySendDetailsByPhoneNumRequest {
	s.TemplateCode = &v
	return s
}

type QuerySendDetailsByPhoneNumResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySendDetailsByPhoneNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySendDetailsByPhoneNumResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySendDetailsByPhoneNumResponseBody) SetRequestId(v string) *QuerySendDetailsByPhoneNumResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumResponseBody) SetCode(v string) *QuerySendDetailsByPhoneNumResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumResponseBody) SetData(v string) *QuerySendDetailsByPhoneNumResponseBody {
	s.Data = &v
	return s
}

type QuerySendDetailsByPhoneNumResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySendDetailsByPhoneNumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySendDetailsByPhoneNumResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySendDetailsByPhoneNumResponse) GoString() string {
	return s.String()
}

func (s *QuerySendDetailsByPhoneNumResponse) SetHeaders(v map[string]*string) *QuerySendDetailsByPhoneNumResponse {
	s.Headers = v
	return s
}

func (s *QuerySendDetailsByPhoneNumResponse) SetStatusCode(v int32) *QuerySendDetailsByPhoneNumResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumResponse) SetBody(v *QuerySendDetailsByPhoneNumResponseBody) *QuerySendDetailsByPhoneNumResponse {
	s.Body = v
	return s
}

type QuerySendDetailsByPhoneNumNewRequest struct {
	BizId                *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType              *int64  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ErrorCode            *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PhoneNum             *string `json:"PhoneNum,omitempty" xml:"PhoneNum,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	SendDate         *string `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
	SendStatus       *int64  `json:"SendStatus,omitempty" xml:"SendStatus,omitempty"`
	SignName         *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	StatisticsStatus *int32  `json:"StatisticsStatus,omitempty" xml:"StatisticsStatus,omitempty"`
	TemplateCode     *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s QuerySendDetailsByPhoneNumNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySendDetailsByPhoneNumNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetBizId(v string) *QuerySendDetailsByPhoneNumNewRequest {
	s.BizId = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetBizType(v int64) *QuerySendDetailsByPhoneNumNewRequest {
	s.BizType = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetErrorCode(v string) *QuerySendDetailsByPhoneNumNewRequest {
	s.ErrorCode = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetOwnerId(v int64) *QuerySendDetailsByPhoneNumNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetPageNo(v int32) *QuerySendDetailsByPhoneNumNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetPageSize(v int32) *QuerySendDetailsByPhoneNumNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetPhoneNum(v string) *QuerySendDetailsByPhoneNumNewRequest {
	s.PhoneNum = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetProdCode(v string) *QuerySendDetailsByPhoneNumNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetResourceOwnerAccount(v string) *QuerySendDetailsByPhoneNumNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetResourceOwnerId(v int64) *QuerySendDetailsByPhoneNumNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetSendDate(v string) *QuerySendDetailsByPhoneNumNewRequest {
	s.SendDate = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetSendStatus(v int64) *QuerySendDetailsByPhoneNumNewRequest {
	s.SendStatus = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetSignName(v string) *QuerySendDetailsByPhoneNumNewRequest {
	s.SignName = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetStatisticsStatus(v int32) *QuerySendDetailsByPhoneNumNewRequest {
	s.StatisticsStatus = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewRequest) SetTemplateCode(v string) *QuerySendDetailsByPhoneNumNewRequest {
	s.TemplateCode = &v
	return s
}

type QuerySendDetailsByPhoneNumNewResponseBody struct {
	List      *QuerySendDetailsByPhoneNumNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNo    *int32                                         `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                         `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QuerySendDetailsByPhoneNumNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySendDetailsByPhoneNumNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySendDetailsByPhoneNumNewResponseBody) SetList(v *QuerySendDetailsByPhoneNumNewResponseBodyList) *QuerySendDetailsByPhoneNumNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBody) SetPageNo(v int32) *QuerySendDetailsByPhoneNumNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBody) SetPageSize(v int32) *QuerySendDetailsByPhoneNumNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBody) SetRequestId(v string) *QuerySendDetailsByPhoneNumNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBody) SetTotal(v int64) *QuerySendDetailsByPhoneNumNewResponseBody {
	s.Total = &v
	return s
}

type QuerySendDetailsByPhoneNumNewResponseBodyList struct {
	SmsSendDetailResponse []*QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse `json:"SmsSendDetailResponse,omitempty" xml:"SmsSendDetailResponse,omitempty" type:"Repeated"`
}

func (s QuerySendDetailsByPhoneNumNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySendDetailsByPhoneNumNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyList) SetSmsSendDetailResponse(v []*QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) *QuerySendDetailsByPhoneNumNewResponseBodyList {
	s.SmsSendDetailResponse = v
	return s
}

type QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse struct {
	ApplyDateStr     *string `json:"ApplyDateStr,omitempty" xml:"ApplyDateStr,omitempty"`
	BillCount        *int64  `json:"BillCount,omitempty" xml:"BillCount,omitempty"`
	BizId            *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType          *int64  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	BlackListStatus  *int32  `json:"BlackListStatus,omitempty" xml:"BlackListStatus,omitempty"`
	Content          *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ErrCode          *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrCodeDesc      *string `json:"ErrCodeDesc,omitempty" xml:"ErrCodeDesc,omitempty"`
	InnerErrCode     *string `json:"InnerErrCode,omitempty" xml:"InnerErrCode,omitempty"`
	OutId            *string `json:"OutId,omitempty" xml:"OutId,omitempty"`
	PhoneNum         *string `json:"PhoneNum,omitempty" xml:"PhoneNum,omitempty"`
	ReceiveDateStr   *string `json:"ReceiveDateStr,omitempty" xml:"ReceiveDateStr,omitempty"`
	SendDateStr      *string `json:"SendDateStr,omitempty" xml:"SendDateStr,omitempty"`
	SendStatus       *int64  `json:"SendStatus,omitempty" xml:"SendStatus,omitempty"`
	SmsLength        *int64  `json:"SmsLength,omitempty" xml:"SmsLength,omitempty"`
	StatisticsStatus *int32  `json:"StatisticsStatus,omitempty" xml:"StatisticsStatus,omitempty"`
	Suggestion       *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	TemplateCode     *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) GoString() string {
	return s.String()
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetApplyDateStr(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.ApplyDateStr = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetBillCount(v int64) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.BillCount = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetBizId(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.BizId = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetBizType(v int64) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.BizType = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetBlackListStatus(v int32) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.BlackListStatus = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetContent(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.Content = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetErrCode(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.ErrCode = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetErrCodeDesc(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.ErrCodeDesc = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetInnerErrCode(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.InnerErrCode = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetOutId(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.OutId = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetPhoneNum(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.PhoneNum = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetReceiveDateStr(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.ReceiveDateStr = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetSendDateStr(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.SendDateStr = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetSendStatus(v int64) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.SendStatus = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetSmsLength(v int64) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.SmsLength = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetStatisticsStatus(v int32) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.StatisticsStatus = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetSuggestion(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.Suggestion = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse) SetTemplateCode(v string) *QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse {
	s.TemplateCode = &v
	return s
}

type QuerySendDetailsByPhoneNumNewResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySendDetailsByPhoneNumNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySendDetailsByPhoneNumNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySendDetailsByPhoneNumNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySendDetailsByPhoneNumNewResponse) SetHeaders(v map[string]*string) *QuerySendDetailsByPhoneNumNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponse) SetStatusCode(v int32) *QuerySendDetailsByPhoneNumNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySendDetailsByPhoneNumNewResponse) SetBody(v *QuerySendDetailsByPhoneNumNewResponseBody) *QuerySendDetailsByPhoneNumNewResponse {
	s.Body = v
	return s
}

type QuerySendFailDetailsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	SendDate *string `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
}

func (s QuerySendFailDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySendFailDetailsRequest) GoString() string {
	return s.String()
}

func (s *QuerySendFailDetailsRequest) SetOwnerId(v int64) *QuerySendFailDetailsRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySendFailDetailsRequest) SetPageNo(v int32) *QuerySendFailDetailsRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySendFailDetailsRequest) SetPageSize(v int32) *QuerySendFailDetailsRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySendFailDetailsRequest) SetProdCode(v string) *QuerySendFailDetailsRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySendFailDetailsRequest) SetProdId(v string) *QuerySendFailDetailsRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySendFailDetailsRequest) SetResourceOwnerAccount(v string) *QuerySendFailDetailsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySendFailDetailsRequest) SetResourceOwnerId(v int64) *QuerySendFailDetailsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySendFailDetailsRequest) SetSendDate(v string) *QuerySendFailDetailsRequest {
	s.SendDate = &v
	return s
}

type QuerySendFailDetailsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySendFailDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySendFailDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySendFailDetailsResponseBody) SetRequestId(v string) *QuerySendFailDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySendFailDetailsResponseBody) SetCode(v string) *QuerySendFailDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySendFailDetailsResponseBody) SetData(v string) *QuerySendFailDetailsResponseBody {
	s.Data = &v
	return s
}

type QuerySendFailDetailsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySendFailDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySendFailDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySendFailDetailsResponse) GoString() string {
	return s.String()
}

func (s *QuerySendFailDetailsResponse) SetHeaders(v map[string]*string) *QuerySendFailDetailsResponse {
	s.Headers = v
	return s
}

func (s *QuerySendFailDetailsResponse) SetStatusCode(v int32) *QuerySendFailDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySendFailDetailsResponse) SetBody(v *QuerySendFailDetailsResponseBody) *QuerySendFailDetailsResponse {
	s.Body = v
	return s
}

type QuerySendFailDetailsNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	SendDate *string `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
}

func (s QuerySendFailDetailsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySendFailDetailsNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySendFailDetailsNewRequest) SetOwnerId(v int64) *QuerySendFailDetailsNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySendFailDetailsNewRequest) SetPageNo(v int32) *QuerySendFailDetailsNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySendFailDetailsNewRequest) SetPageSize(v int32) *QuerySendFailDetailsNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySendFailDetailsNewRequest) SetProdCode(v string) *QuerySendFailDetailsNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySendFailDetailsNewRequest) SetProdId(v string) *QuerySendFailDetailsNewRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySendFailDetailsNewRequest) SetResourceOwnerAccount(v string) *QuerySendFailDetailsNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySendFailDetailsNewRequest) SetResourceOwnerId(v int64) *QuerySendFailDetailsNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySendFailDetailsNewRequest) SetSendDate(v string) *QuerySendFailDetailsNewRequest {
	s.SendDate = &v
	return s
}

type QuerySendFailDetailsNewResponseBody struct {
	ApplyDateStr *string                                  `json:"ApplyDateStr,omitempty" xml:"ApplyDateStr,omitempty"`
	BillCount    *int64                                   `json:"BillCount,omitempty" xml:"BillCount,omitempty"`
	BizType      *int64                                   `json:"BizType,omitempty" xml:"BizType,omitempty"`
	InnerErrCode *string                                  `json:"InnerErrCode,omitempty" xml:"InnerErrCode,omitempty"`
	List         *QuerySendFailDetailsNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNo       *int32                                   `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize     *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmsLength    *int64                                   `json:"SmsLength,omitempty" xml:"SmsLength,omitempty"`
	Total        *int64                                   `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QuerySendFailDetailsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySendFailDetailsNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySendFailDetailsNewResponseBody) SetApplyDateStr(v string) *QuerySendFailDetailsNewResponseBody {
	s.ApplyDateStr = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBody) SetBillCount(v int64) *QuerySendFailDetailsNewResponseBody {
	s.BillCount = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBody) SetBizType(v int64) *QuerySendFailDetailsNewResponseBody {
	s.BizType = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBody) SetInnerErrCode(v string) *QuerySendFailDetailsNewResponseBody {
	s.InnerErrCode = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBody) SetList(v *QuerySendFailDetailsNewResponseBodyList) *QuerySendFailDetailsNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySendFailDetailsNewResponseBody) SetPageNo(v int32) *QuerySendFailDetailsNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBody) SetPageSize(v int32) *QuerySendFailDetailsNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBody) SetRequestId(v string) *QuerySendFailDetailsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBody) SetSmsLength(v int64) *QuerySendFailDetailsNewResponseBody {
	s.SmsLength = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBody) SetTotal(v int64) *QuerySendFailDetailsNewResponseBody {
	s.Total = &v
	return s
}

type QuerySendFailDetailsNewResponseBodyList struct {
	SmsSendDetailResponse []*QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse `json:"SmsSendDetailResponse,omitempty" xml:"SmsSendDetailResponse,omitempty" type:"Repeated"`
}

func (s QuerySendFailDetailsNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySendFailDetailsNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySendFailDetailsNewResponseBodyList) SetSmsSendDetailResponse(v []*QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) *QuerySendFailDetailsNewResponseBodyList {
	s.SmsSendDetailResponse = v
	return s
}

type QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse struct {
	BlackListStatus *int32  `json:"BlackListStatus,omitempty" xml:"BlackListStatus,omitempty"`
	Content         *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ErrCode         *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrCodeDesc     *string `json:"ErrCodeDesc,omitempty" xml:"ErrCodeDesc,omitempty"`
	OutId           *string `json:"OutId,omitempty" xml:"OutId,omitempty"`
	PhoneNum        *string `json:"PhoneNum,omitempty" xml:"PhoneNum,omitempty"`
	ReceiveDateStr  *string `json:"ReceiveDateStr,omitempty" xml:"ReceiveDateStr,omitempty"`
	SendDateStr     *string `json:"SendDateStr,omitempty" xml:"SendDateStr,omitempty"`
	SendStatus      *int64  `json:"SendStatus,omitempty" xml:"SendStatus,omitempty"`
	Suggestion      *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	TemplateCode    *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) GoString() string {
	return s.String()
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetBlackListStatus(v int32) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.BlackListStatus = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetContent(v string) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.Content = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetErrCode(v string) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.ErrCode = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetErrCodeDesc(v string) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.ErrCodeDesc = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetOutId(v string) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.OutId = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetPhoneNum(v string) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.PhoneNum = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetReceiveDateStr(v string) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.ReceiveDateStr = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetSendDateStr(v string) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.SendDateStr = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetSendStatus(v int64) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.SendStatus = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetSuggestion(v string) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.Suggestion = &v
	return s
}

func (s *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse) SetTemplateCode(v string) *QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse {
	s.TemplateCode = &v
	return s
}

type QuerySendFailDetailsNewResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySendFailDetailsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySendFailDetailsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySendFailDetailsNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySendFailDetailsNewResponse) SetHeaders(v map[string]*string) *QuerySendFailDetailsNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySendFailDetailsNewResponse) SetStatusCode(v int32) *QuerySendFailDetailsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySendFailDetailsNewResponse) SetBody(v *QuerySendFailDetailsNewResponseBody) *QuerySendFailDetailsNewResponse {
	s.Body = v
	return s
}

type QuerySendToGlobeStatusRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySendToGlobeStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySendToGlobeStatusRequest) GoString() string {
	return s.String()
}

func (s *QuerySendToGlobeStatusRequest) SetOwnerId(v int64) *QuerySendToGlobeStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySendToGlobeStatusRequest) SetProdCode(v string) *QuerySendToGlobeStatusRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySendToGlobeStatusRequest) SetResourceOwnerAccount(v string) *QuerySendToGlobeStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySendToGlobeStatusRequest) SetResourceOwnerId(v int64) *QuerySendToGlobeStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySendToGlobeStatusResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySendToGlobeStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySendToGlobeStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySendToGlobeStatusResponseBody) SetCode(v string) *QuerySendToGlobeStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySendToGlobeStatusResponseBody) SetData(v bool) *QuerySendToGlobeStatusResponseBody {
	s.Data = &v
	return s
}

func (s *QuerySendToGlobeStatusResponseBody) SetRequestId(v string) *QuerySendToGlobeStatusResponseBody {
	s.RequestId = &v
	return s
}

type QuerySendToGlobeStatusResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySendToGlobeStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySendToGlobeStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySendToGlobeStatusResponse) GoString() string {
	return s.String()
}

func (s *QuerySendToGlobeStatusResponse) SetHeaders(v map[string]*string) *QuerySendToGlobeStatusResponse {
	s.Headers = v
	return s
}

func (s *QuerySendToGlobeStatusResponse) SetStatusCode(v int32) *QuerySendToGlobeStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySendToGlobeStatusResponse) SetBody(v *QuerySendToGlobeStatusResponseBody) *QuerySendToGlobeStatusResponse {
	s.Body = v
	return s
}

type QueryShortUrlDetailNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	ShortUrlId *string `json:"ShortUrlId,omitempty" xml:"ShortUrlId,omitempty"`
}

func (s QueryShortUrlDetailNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlDetailNewRequest) GoString() string {
	return s.String()
}

func (s *QueryShortUrlDetailNewRequest) SetOwnerId(v int64) *QueryShortUrlDetailNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryShortUrlDetailNewRequest) SetProdCode(v string) *QueryShortUrlDetailNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryShortUrlDetailNewRequest) SetResourceOwnerAccount(v string) *QueryShortUrlDetailNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryShortUrlDetailNewRequest) SetResourceOwnerId(v int64) *QueryShortUrlDetailNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryShortUrlDetailNewRequest) SetShortUrlId(v string) *QueryShortUrlDetailNewRequest {
	s.ShortUrlId = &v
	return s
}

type QueryShortUrlDetailNewResponseBody struct {
	EventName      *string                                     `json:"EventName,omitempty" xml:"EventName,omitempty"`
	GmtCreateTime  *string                                     `json:"GmtCreateTime,omitempty" xml:"GmtCreateTime,omitempty"`
	GmtInvalidTime *string                                     `json:"GmtInvalidTime,omitempty" xml:"GmtInvalidTime,omitempty"`
	Id             *string                                     `json:"Id,omitempty" xml:"Id,omitempty"`
	Record         []*QueryShortUrlDetailNewResponseBodyRecord `json:"Record,omitempty" xml:"Record,omitempty" type:"Repeated"`
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ShortUrl       *string                                     `json:"ShortUrl,omitempty" xml:"ShortUrl,omitempty"`
	SourceUrl      *string                                     `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	Status         *int32                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalPv        *string                                     `json:"TotalPv,omitempty" xml:"TotalPv,omitempty"`
	TotalUv        *string                                     `json:"TotalUv,omitempty" xml:"TotalUv,omitempty"`
}

func (s QueryShortUrlDetailNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlDetailNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryShortUrlDetailNewResponseBody) SetEventName(v string) *QueryShortUrlDetailNewResponseBody {
	s.EventName = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBody) SetGmtCreateTime(v string) *QueryShortUrlDetailNewResponseBody {
	s.GmtCreateTime = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBody) SetGmtInvalidTime(v string) *QueryShortUrlDetailNewResponseBody {
	s.GmtInvalidTime = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBody) SetId(v string) *QueryShortUrlDetailNewResponseBody {
	s.Id = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBody) SetRecord(v []*QueryShortUrlDetailNewResponseBodyRecord) *QueryShortUrlDetailNewResponseBody {
	s.Record = v
	return s
}

func (s *QueryShortUrlDetailNewResponseBody) SetRequestId(v string) *QueryShortUrlDetailNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBody) SetShortUrl(v string) *QueryShortUrlDetailNewResponseBody {
	s.ShortUrl = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBody) SetSourceUrl(v string) *QueryShortUrlDetailNewResponseBody {
	s.SourceUrl = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBody) SetStatus(v int32) *QueryShortUrlDetailNewResponseBody {
	s.Status = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBody) SetTotalPv(v string) *QueryShortUrlDetailNewResponseBody {
	s.TotalPv = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBody) SetTotalUv(v string) *QueryShortUrlDetailNewResponseBody {
	s.TotalUv = &v
	return s
}

type QueryShortUrlDetailNewResponseBodyRecord struct {
	EventName      *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	GmtCreateTime  *string `json:"GmtCreateTime,omitempty" xml:"GmtCreateTime,omitempty"`
	GmtInvalidTime *string `json:"GmtInvalidTime,omitempty" xml:"GmtInvalidTime,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ShortUrl       *string `json:"ShortUrl,omitempty" xml:"ShortUrl,omitempty"`
	SourceUrl      *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	Status         *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalPv        *string `json:"TotalPv,omitempty" xml:"TotalPv,omitempty"`
	TotalUv        *string `json:"TotalUv,omitempty" xml:"TotalUv,omitempty"`
}

func (s QueryShortUrlDetailNewResponseBodyRecord) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlDetailNewResponseBodyRecord) GoString() string {
	return s.String()
}

func (s *QueryShortUrlDetailNewResponseBodyRecord) SetEventName(v string) *QueryShortUrlDetailNewResponseBodyRecord {
	s.EventName = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBodyRecord) SetGmtCreateTime(v string) *QueryShortUrlDetailNewResponseBodyRecord {
	s.GmtCreateTime = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBodyRecord) SetGmtInvalidTime(v string) *QueryShortUrlDetailNewResponseBodyRecord {
	s.GmtInvalidTime = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBodyRecord) SetId(v string) *QueryShortUrlDetailNewResponseBodyRecord {
	s.Id = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBodyRecord) SetShortUrl(v string) *QueryShortUrlDetailNewResponseBodyRecord {
	s.ShortUrl = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBodyRecord) SetSourceUrl(v string) *QueryShortUrlDetailNewResponseBodyRecord {
	s.SourceUrl = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBodyRecord) SetStatus(v int32) *QueryShortUrlDetailNewResponseBodyRecord {
	s.Status = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBodyRecord) SetTotalPv(v string) *QueryShortUrlDetailNewResponseBodyRecord {
	s.TotalPv = &v
	return s
}

func (s *QueryShortUrlDetailNewResponseBodyRecord) SetTotalUv(v string) *QueryShortUrlDetailNewResponseBodyRecord {
	s.TotalUv = &v
	return s
}

type QueryShortUrlDetailNewResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryShortUrlDetailNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryShortUrlDetailNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlDetailNewResponse) GoString() string {
	return s.String()
}

func (s *QueryShortUrlDetailNewResponse) SetHeaders(v map[string]*string) *QueryShortUrlDetailNewResponse {
	s.Headers = v
	return s
}

func (s *QueryShortUrlDetailNewResponse) SetStatusCode(v int32) *QueryShortUrlDetailNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryShortUrlDetailNewResponse) SetBody(v *QueryShortUrlDetailNewResponseBody) *QueryShortUrlDetailNewResponse {
	s.Body = v
	return s
}

type QueryShortUrlListNewRequest struct {
	EventName            *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	KeyWord              *string `json:"KeyWord,omitempty" xml:"KeyWord,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ShortUrl             *string `json:"ShortUrl,omitempty" xml:"ShortUrl,omitempty"`
}

func (s QueryShortUrlListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlListNewRequest) GoString() string {
	return s.String()
}

func (s *QueryShortUrlListNewRequest) SetEventName(v string) *QueryShortUrlListNewRequest {
	s.EventName = &v
	return s
}

func (s *QueryShortUrlListNewRequest) SetKeyWord(v string) *QueryShortUrlListNewRequest {
	s.KeyWord = &v
	return s
}

func (s *QueryShortUrlListNewRequest) SetOwnerId(v int64) *QueryShortUrlListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryShortUrlListNewRequest) SetPageNo(v int32) *QueryShortUrlListNewRequest {
	s.PageNo = &v
	return s
}

func (s *QueryShortUrlListNewRequest) SetPageSize(v int32) *QueryShortUrlListNewRequest {
	s.PageSize = &v
	return s
}

func (s *QueryShortUrlListNewRequest) SetProdCode(v string) *QueryShortUrlListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryShortUrlListNewRequest) SetResourceOwnerAccount(v string) *QueryShortUrlListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryShortUrlListNewRequest) SetResourceOwnerId(v int64) *QueryShortUrlListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryShortUrlListNewRequest) SetShortUrl(v string) *QueryShortUrlListNewRequest {
	s.ShortUrl = &v
	return s
}

type QueryShortUrlListNewResponseBody struct {
	List      []*QueryShortUrlListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNo    *int32                                  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryShortUrlListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryShortUrlListNewResponseBody) SetList(v []*QueryShortUrlListNewResponseBodyList) *QueryShortUrlListNewResponseBody {
	s.List = v
	return s
}

func (s *QueryShortUrlListNewResponseBody) SetPageNo(v int32) *QueryShortUrlListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QueryShortUrlListNewResponseBody) SetPageSize(v int32) *QueryShortUrlListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryShortUrlListNewResponseBody) SetRequestId(v string) *QueryShortUrlListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryShortUrlListNewResponseBody) SetTotal(v int64) *QueryShortUrlListNewResponseBody {
	s.Total = &v
	return s
}

type QueryShortUrlListNewResponseBodyList struct {
	EventName      *string                                       `json:"EventName,omitempty" xml:"EventName,omitempty"`
	GmtCreateTime  *string                                       `json:"GmtCreateTime,omitempty" xml:"GmtCreateTime,omitempty"`
	GmtInvalidTime *string                                       `json:"GmtInvalidTime,omitempty" xml:"GmtInvalidTime,omitempty"`
	Id             *string                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	Reason         *string                                       `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Record         []*QueryShortUrlListNewResponseBodyListRecord `json:"Record,omitempty" xml:"Record,omitempty" type:"Repeated"`
	ShortUrl       *string                                       `json:"ShortUrl,omitempty" xml:"ShortUrl,omitempty"`
	SourceUrl      *string                                       `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	Status         *int32                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalPv        *string                                       `json:"TotalPv,omitempty" xml:"TotalPv,omitempty"`
	TotalUv        *string                                       `json:"TotalUv,omitempty" xml:"TotalUv,omitempty"`
}

func (s QueryShortUrlListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryShortUrlListNewResponseBodyList) SetEventName(v string) *QueryShortUrlListNewResponseBodyList {
	s.EventName = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyList) SetGmtCreateTime(v string) *QueryShortUrlListNewResponseBodyList {
	s.GmtCreateTime = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyList) SetGmtInvalidTime(v string) *QueryShortUrlListNewResponseBodyList {
	s.GmtInvalidTime = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyList) SetId(v string) *QueryShortUrlListNewResponseBodyList {
	s.Id = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyList) SetReason(v string) *QueryShortUrlListNewResponseBodyList {
	s.Reason = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyList) SetRecord(v []*QueryShortUrlListNewResponseBodyListRecord) *QueryShortUrlListNewResponseBodyList {
	s.Record = v
	return s
}

func (s *QueryShortUrlListNewResponseBodyList) SetShortUrl(v string) *QueryShortUrlListNewResponseBodyList {
	s.ShortUrl = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyList) SetSourceUrl(v string) *QueryShortUrlListNewResponseBodyList {
	s.SourceUrl = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyList) SetStatus(v int32) *QueryShortUrlListNewResponseBodyList {
	s.Status = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyList) SetTotalPv(v string) *QueryShortUrlListNewResponseBodyList {
	s.TotalPv = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyList) SetTotalUv(v string) *QueryShortUrlListNewResponseBodyList {
	s.TotalUv = &v
	return s
}

type QueryShortUrlListNewResponseBodyListRecord struct {
	EventName      *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	GmtCreateTime  *string `json:"GmtCreateTime,omitempty" xml:"GmtCreateTime,omitempty"`
	GmtInvalidTime *string `json:"GmtInvalidTime,omitempty" xml:"GmtInvalidTime,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Reason         *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	ShortUrl       *string `json:"ShortUrl,omitempty" xml:"ShortUrl,omitempty"`
	SourceUrl      *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty"`
	Status         *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalPv        *string `json:"TotalPv,omitempty" xml:"TotalPv,omitempty"`
	TotalUv        *string `json:"TotalUv,omitempty" xml:"TotalUv,omitempty"`
}

func (s QueryShortUrlListNewResponseBodyListRecord) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlListNewResponseBodyListRecord) GoString() string {
	return s.String()
}

func (s *QueryShortUrlListNewResponseBodyListRecord) SetEventName(v string) *QueryShortUrlListNewResponseBodyListRecord {
	s.EventName = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyListRecord) SetGmtCreateTime(v string) *QueryShortUrlListNewResponseBodyListRecord {
	s.GmtCreateTime = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyListRecord) SetGmtInvalidTime(v string) *QueryShortUrlListNewResponseBodyListRecord {
	s.GmtInvalidTime = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyListRecord) SetId(v string) *QueryShortUrlListNewResponseBodyListRecord {
	s.Id = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyListRecord) SetReason(v string) *QueryShortUrlListNewResponseBodyListRecord {
	s.Reason = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyListRecord) SetShortUrl(v string) *QueryShortUrlListNewResponseBodyListRecord {
	s.ShortUrl = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyListRecord) SetSourceUrl(v string) *QueryShortUrlListNewResponseBodyListRecord {
	s.SourceUrl = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyListRecord) SetStatus(v int32) *QueryShortUrlListNewResponseBodyListRecord {
	s.Status = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyListRecord) SetTotalPv(v string) *QueryShortUrlListNewResponseBodyListRecord {
	s.TotalPv = &v
	return s
}

func (s *QueryShortUrlListNewResponseBodyListRecord) SetTotalUv(v string) *QueryShortUrlListNewResponseBodyListRecord {
	s.TotalUv = &v
	return s
}

type QueryShortUrlListNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryShortUrlListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryShortUrlListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlListNewResponse) GoString() string {
	return s.String()
}

func (s *QueryShortUrlListNewResponse) SetHeaders(v map[string]*string) *QueryShortUrlListNewResponse {
	s.Headers = v
	return s
}

func (s *QueryShortUrlListNewResponse) SetStatusCode(v int32) *QueryShortUrlListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryShortUrlListNewResponse) SetBody(v *QueryShortUrlListNewResponseBody) *QueryShortUrlListNewResponse {
	s.Body = v
	return s
}

type QueryShortUrlStatusRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryShortUrlStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryShortUrlStatusRequest) SetOwnerId(v int64) *QueryShortUrlStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryShortUrlStatusRequest) SetProdCode(v string) *QueryShortUrlStatusRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryShortUrlStatusRequest) SetResourceOwnerAccount(v string) *QueryShortUrlStatusRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryShortUrlStatusRequest) SetResourceOwnerId(v int64) *QueryShortUrlStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryShortUrlStatusResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryShortUrlStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryShortUrlStatusResponseBody) SetRequestId(v string) *QueryShortUrlStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryShortUrlStatusResponseBody) SetCode(v string) *QueryShortUrlStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryShortUrlStatusResponseBody) SetData(v string) *QueryShortUrlStatusResponseBody {
	s.Data = &v
	return s
}

type QueryShortUrlStatusResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryShortUrlStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryShortUrlStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryShortUrlStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryShortUrlStatusResponse) SetHeaders(v map[string]*string) *QueryShortUrlStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryShortUrlStatusResponse) SetStatusCode(v int32) *QueryShortUrlStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryShortUrlStatusResponse) SetBody(v *QueryShortUrlStatusResponseBody) *QueryShortUrlStatusResponse {
	s.Body = v
	return s
}

type QuerySlsStatusNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySlsStatusNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsStatusNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySlsStatusNewRequest) SetOwnerId(v int64) *QuerySlsStatusNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySlsStatusNewRequest) SetProdCode(v string) *QuerySlsStatusNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySlsStatusNewRequest) SetResourceOwnerAccount(v string) *QuerySlsStatusNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySlsStatusNewRequest) SetResourceOwnerId(v int64) *QuerySlsStatusNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySlsStatusNewResponseBody struct {
	AuthorizeStatus *bool   `json:"AuthorizeStatus,omitempty" xml:"AuthorizeStatus,omitempty"`
	OpenStatus      *bool   `json:"OpenStatus,omitempty" xml:"OpenStatus,omitempty"`
	ProdCode        *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SaveTime        *int32  `json:"SaveTime,omitempty" xml:"SaveTime,omitempty"`
	Uid             *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s QuerySlsStatusNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsStatusNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySlsStatusNewResponseBody) SetAuthorizeStatus(v bool) *QuerySlsStatusNewResponseBody {
	s.AuthorizeStatus = &v
	return s
}

func (s *QuerySlsStatusNewResponseBody) SetOpenStatus(v bool) *QuerySlsStatusNewResponseBody {
	s.OpenStatus = &v
	return s
}

func (s *QuerySlsStatusNewResponseBody) SetProdCode(v string) *QuerySlsStatusNewResponseBody {
	s.ProdCode = &v
	return s
}

func (s *QuerySlsStatusNewResponseBody) SetRequestId(v string) *QuerySlsStatusNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySlsStatusNewResponseBody) SetSaveTime(v int32) *QuerySlsStatusNewResponseBody {
	s.SaveTime = &v
	return s
}

func (s *QuerySlsStatusNewResponseBody) SetUid(v string) *QuerySlsStatusNewResponseBody {
	s.Uid = &v
	return s
}

type QuerySlsStatusNewResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySlsStatusNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySlsStatusNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsStatusNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySlsStatusNewResponse) SetHeaders(v map[string]*string) *QuerySlsStatusNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySlsStatusNewResponse) SetStatusCode(v int32) *QuerySlsStatusNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySlsStatusNewResponse) SetBody(v *QuerySlsStatusNewResponseBody) *QuerySlsStatusNewResponse {
	s.Body = v
	return s
}

type QuerySmsBaseScreenNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsBaseScreenNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsBaseScreenNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsBaseScreenNewRequest) SetOwnerId(v int64) *QuerySmsBaseScreenNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsBaseScreenNewRequest) SetProdCode(v string) *QuerySmsBaseScreenNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsBaseScreenNewRequest) SetResourceOwnerAccount(v string) *QuerySmsBaseScreenNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsBaseScreenNewRequest) SetResourceOwnerId(v int64) *QuerySmsBaseScreenNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsBaseScreenNewResponseBody struct {
	AccountBalance              *string `json:"AccountBalance,omitempty" xml:"AccountBalance,omitempty"`
	CardAbilityMark             *string `json:"CardAbilityMark,omitempty" xml:"CardAbilityMark,omitempty"`
	CardCustomerMark            *string `json:"CardCustomerMark,omitempty" xml:"CardCustomerMark,omitempty"`
	CertifyType                 *string `json:"CertifyType,omitempty" xml:"CertifyType,omitempty"`
	ChannelType                 *string `json:"ChannelType,omitempty" xml:"ChannelType,omitempty"`
	ChildAccountAuth            *string `json:"ChildAccountAuth,omitempty" xml:"ChildAccountAuth,omitempty"`
	CreditValue                 *string `json:"CreditValue,omitempty" xml:"CreditValue,omitempty"`
	CurrentLocale               *string `json:"CurrentLocale,omitempty" xml:"CurrentLocale,omitempty"`
	CustFrom                    *int32  `json:"CustFrom,omitempty" xml:"CustFrom,omitempty"`
	CustName                    *string `json:"CustName,omitempty" xml:"CustName,omitempty"`
	DataAbilityMark             *string `json:"DataAbilityMark,omitempty" xml:"DataAbilityMark,omitempty"`
	DayuMigrateStatus           *int32  `json:"DayuMigrateStatus,omitempty" xml:"DayuMigrateStatus,omitempty"`
	InvoiceBalance              *string `json:"InvoiceBalance,omitempty" xml:"InvoiceBalance,omitempty"`
	IpSmsAbilityMark            *string `json:"IpSmsAbilityMark,omitempty" xml:"IpSmsAbilityMark,omitempty"`
	IsAccountMerged             *bool   `json:"IsAccountMerged,omitempty" xml:"IsAccountMerged,omitempty"`
	IsAliInnerUser              *bool   `json:"IsAliInnerUser,omitempty" xml:"IsAliInnerUser,omitempty"`
	IsChineseUser               *bool   `json:"IsChineseUser,omitempty" xml:"IsChineseUser,omitempty"`
	IsDayuCustomer              *bool   `json:"IsDayuCustomer,omitempty" xml:"IsDayuCustomer,omitempty"`
	IsDayuTopCust               *bool   `json:"IsDayuTopCust,omitempty" xml:"IsDayuTopCust,omitempty"`
	IsMnsForceMigratingCustomer *bool   `json:"IsMnsForceMigratingCustomer,omitempty" xml:"IsMnsForceMigratingCustomer,omitempty"`
	IsMnsMigratingCustomer      *bool   `json:"IsMnsMigratingCustomer,omitempty" xml:"IsMnsMigratingCustomer,omitempty"`
	IsNeedAuth                  *bool   `json:"IsNeedAuth,omitempty" xml:"IsNeedAuth,omitempty"`
	IsOldFisCust                *bool   `json:"IsOldFisCust,omitempty" xml:"IsOldFisCust,omitempty"`
	IsOldSms                    *bool   `json:"IsOldSms,omitempty" xml:"IsOldSms,omitempty"`
	IsOpened                    *bool   `json:"IsOpened,omitempty" xml:"IsOpened,omitempty"`
	IsRemainMnsPackage          *bool   `json:"IsRemainMnsPackage,omitempty" xml:"IsRemainMnsPackage,omitempty"`
	IsSendSmsToGlobeUser        *bool   `json:"IsSendSmsToGlobeUser,omitempty" xml:"IsSendSmsToGlobeUser,omitempty"`
	IsShortUrlNormalUse         *bool   `json:"IsShortUrlNormalUse,omitempty" xml:"IsShortUrlNormalUse,omitempty"`
	IsShortUrlOpened            *bool   `json:"IsShortUrlOpened,omitempty" xml:"IsShortUrlOpened,omitempty"`
	IsSilentCust                *bool   `json:"IsSilentCust,omitempty" xml:"IsSilentCust,omitempty"`
	OsStatus                    *int32  `json:"OsStatus,omitempty" xml:"OsStatus,omitempty"`
	ProdCode                    *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	RequestId                   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ShortUrlServeTag            *bool   `json:"ShortUrlServeTag,omitempty" xml:"ShortUrlServeTag,omitempty"`
	SmsMarketingAssistantTag    *bool   `json:"SmsMarketingAssistantTag,omitempty" xml:"SmsMarketingAssistantTag,omitempty"`
	TextAbilityMark             *string `json:"TextAbilityMark,omitempty" xml:"TextAbilityMark,omitempty"`
	VoucherNum                  *int32  `json:"VoucherNum,omitempty" xml:"VoucherNum,omitempty"`
}

func (s QuerySmsBaseScreenNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsBaseScreenNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsBaseScreenNewResponseBody) SetAccountBalance(v string) *QuerySmsBaseScreenNewResponseBody {
	s.AccountBalance = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetCardAbilityMark(v string) *QuerySmsBaseScreenNewResponseBody {
	s.CardAbilityMark = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetCardCustomerMark(v string) *QuerySmsBaseScreenNewResponseBody {
	s.CardCustomerMark = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetCertifyType(v string) *QuerySmsBaseScreenNewResponseBody {
	s.CertifyType = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetChannelType(v string) *QuerySmsBaseScreenNewResponseBody {
	s.ChannelType = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetChildAccountAuth(v string) *QuerySmsBaseScreenNewResponseBody {
	s.ChildAccountAuth = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetCreditValue(v string) *QuerySmsBaseScreenNewResponseBody {
	s.CreditValue = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetCurrentLocale(v string) *QuerySmsBaseScreenNewResponseBody {
	s.CurrentLocale = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetCustFrom(v int32) *QuerySmsBaseScreenNewResponseBody {
	s.CustFrom = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetCustName(v string) *QuerySmsBaseScreenNewResponseBody {
	s.CustName = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetDataAbilityMark(v string) *QuerySmsBaseScreenNewResponseBody {
	s.DataAbilityMark = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetDayuMigrateStatus(v int32) *QuerySmsBaseScreenNewResponseBody {
	s.DayuMigrateStatus = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetInvoiceBalance(v string) *QuerySmsBaseScreenNewResponseBody {
	s.InvoiceBalance = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIpSmsAbilityMark(v string) *QuerySmsBaseScreenNewResponseBody {
	s.IpSmsAbilityMark = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsAccountMerged(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsAccountMerged = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsAliInnerUser(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsAliInnerUser = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsChineseUser(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsChineseUser = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsDayuCustomer(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsDayuCustomer = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsDayuTopCust(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsDayuTopCust = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsMnsForceMigratingCustomer(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsMnsForceMigratingCustomer = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsMnsMigratingCustomer(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsMnsMigratingCustomer = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsNeedAuth(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsNeedAuth = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsOldFisCust(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsOldFisCust = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsOldSms(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsOldSms = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsOpened(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsOpened = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsRemainMnsPackage(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsRemainMnsPackage = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsSendSmsToGlobeUser(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsSendSmsToGlobeUser = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsShortUrlNormalUse(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsShortUrlNormalUse = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsShortUrlOpened(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsShortUrlOpened = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetIsSilentCust(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.IsSilentCust = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetOsStatus(v int32) *QuerySmsBaseScreenNewResponseBody {
	s.OsStatus = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetProdCode(v string) *QuerySmsBaseScreenNewResponseBody {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetRequestId(v string) *QuerySmsBaseScreenNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetShortUrlServeTag(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.ShortUrlServeTag = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetSmsMarketingAssistantTag(v bool) *QuerySmsBaseScreenNewResponseBody {
	s.SmsMarketingAssistantTag = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetTextAbilityMark(v string) *QuerySmsBaseScreenNewResponseBody {
	s.TextAbilityMark = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponseBody) SetVoucherNum(v int32) *QuerySmsBaseScreenNewResponseBody {
	s.VoucherNum = &v
	return s
}

type QuerySmsBaseScreenNewResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsBaseScreenNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsBaseScreenNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsBaseScreenNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsBaseScreenNewResponse) SetHeaders(v map[string]*string) *QuerySmsBaseScreenNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsBaseScreenNewResponse) SetStatusCode(v int32) *QuerySmsBaseScreenNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsBaseScreenNewResponse) SetBody(v *QuerySmsBaseScreenNewResponseBody) *QuerySmsBaseScreenNewResponse {
	s.Body = v
	return s
}

type QuerySmsDetectCountsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsDetectCountsRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectCountsRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectCountsRequest) SetOwnerId(v int64) *QuerySmsDetectCountsRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsDetectCountsRequest) SetProdCode(v string) *QuerySmsDetectCountsRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsDetectCountsRequest) SetResourceOwnerAccount(v string) *QuerySmsDetectCountsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsDetectCountsRequest) SetResourceOwnerId(v int64) *QuerySmsDetectCountsRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsDetectCountsResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySmsDetectCountsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectCountsResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectCountsResponseBody) SetCode(v string) *QuerySmsDetectCountsResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsDetectCountsResponseBody) SetData(v string) *QuerySmsDetectCountsResponseBody {
	s.Data = &v
	return s
}

func (s *QuerySmsDetectCountsResponseBody) SetRequestId(v string) *QuerySmsDetectCountsResponseBody {
	s.RequestId = &v
	return s
}

type QuerySmsDetectCountsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsDetectCountsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsDetectCountsResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectCountsResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectCountsResponse) SetHeaders(v map[string]*string) *QuerySmsDetectCountsResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsDetectCountsResponse) SetStatusCode(v int32) *QuerySmsDetectCountsResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsDetectCountsResponse) SetBody(v *QuerySmsDetectCountsResponseBody) *QuerySmsDetectCountsResponse {
	s.Body = v
	return s
}

type QuerySmsDetectCountsNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsDetectCountsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectCountsNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectCountsNewRequest) SetOwnerId(v int64) *QuerySmsDetectCountsNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsDetectCountsNewRequest) SetProdCode(v string) *QuerySmsDetectCountsNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsDetectCountsNewRequest) SetResourceOwnerAccount(v string) *QuerySmsDetectCountsNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsDetectCountsNewRequest) SetResourceOwnerId(v int64) *QuerySmsDetectCountsNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsDetectCountsNewResponseBody struct {
	DetectedTimes *int32  `json:"DetectedTimes,omitempty" xml:"DetectedTimes,omitempty"`
	LeftTimes     *int32  `json:"LeftTimes,omitempty" xml:"LeftTimes,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySmsDetectCountsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectCountsNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectCountsNewResponseBody) SetDetectedTimes(v int32) *QuerySmsDetectCountsNewResponseBody {
	s.DetectedTimes = &v
	return s
}

func (s *QuerySmsDetectCountsNewResponseBody) SetLeftTimes(v int32) *QuerySmsDetectCountsNewResponseBody {
	s.LeftTimes = &v
	return s
}

func (s *QuerySmsDetectCountsNewResponseBody) SetRequestId(v string) *QuerySmsDetectCountsNewResponseBody {
	s.RequestId = &v
	return s
}

type QuerySmsDetectCountsNewResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsDetectCountsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsDetectCountsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectCountsNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectCountsNewResponse) SetHeaders(v map[string]*string) *QuerySmsDetectCountsNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsDetectCountsNewResponse) SetStatusCode(v int32) *QuerySmsDetectCountsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsDetectCountsNewResponse) SetBody(v *QuerySmsDetectCountsNewResponseBody) *QuerySmsDetectCountsNewResponse {
	s.Body = v
	return s
}

type QuerySmsDetectListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsDetectListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectListRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectListRequest) SetOwnerId(v int64) *QuerySmsDetectListRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsDetectListRequest) SetPageNo(v int32) *QuerySmsDetectListRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsDetectListRequest) SetPageSize(v int32) *QuerySmsDetectListRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsDetectListRequest) SetProdCode(v string) *QuerySmsDetectListRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsDetectListRequest) SetResourceOwnerAccount(v string) *QuerySmsDetectListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsDetectListRequest) SetResourceOwnerId(v int64) *QuerySmsDetectListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsDetectListResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySmsDetectListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectListResponseBody) SetCode(v string) *QuerySmsDetectListResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsDetectListResponseBody) SetData(v string) *QuerySmsDetectListResponseBody {
	s.Data = &v
	return s
}

func (s *QuerySmsDetectListResponseBody) SetRequestId(v string) *QuerySmsDetectListResponseBody {
	s.RequestId = &v
	return s
}

type QuerySmsDetectListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsDetectListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsDetectListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectListResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectListResponse) SetHeaders(v map[string]*string) *QuerySmsDetectListResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsDetectListResponse) SetStatusCode(v int32) *QuerySmsDetectListResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsDetectListResponse) SetBody(v *QuerySmsDetectListResponseBody) *QuerySmsDetectListResponse {
	s.Body = v
	return s
}

type QuerySmsDetectListNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsDetectListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectListNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectListNewRequest) SetOwnerId(v int64) *QuerySmsDetectListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsDetectListNewRequest) SetPageNo(v int32) *QuerySmsDetectListNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsDetectListNewRequest) SetPageSize(v int32) *QuerySmsDetectListNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsDetectListNewRequest) SetProdCode(v string) *QuerySmsDetectListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsDetectListNewRequest) SetResourceOwnerAccount(v string) *QuerySmsDetectListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsDetectListNewRequest) SetResourceOwnerId(v int64) *QuerySmsDetectListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsDetectListNewResponseBody struct {
	List      []*QuerySmsDetectListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNo    *int32                                   `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                   `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QuerySmsDetectListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectListNewResponseBody) SetList(v []*QuerySmsDetectListNewResponseBodyList) *QuerySmsDetectListNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsDetectListNewResponseBody) SetPageNo(v int32) *QuerySmsDetectListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QuerySmsDetectListNewResponseBody) SetPageSize(v int32) *QuerySmsDetectListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QuerySmsDetectListNewResponseBody) SetRequestId(v string) *QuerySmsDetectListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsDetectListNewResponseBody) SetTotal(v int64) *QuerySmsDetectListNewResponseBody {
	s.Total = &v
	return s
}

type QuerySmsDetectListNewResponseBodyList struct {
	DetectContent  *string `json:"DetectContent,omitempty" xml:"DetectContent,omitempty"`
	DetectSignName *string `json:"DetectSignName,omitempty" xml:"DetectSignName,omitempty"`
	DetectTime     *string `json:"DetectTime,omitempty" xml:"DetectTime,omitempty"`
	Status         *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	SuccessRate    *string `json:"SuccessRate,omitempty" xml:"SuccessRate,omitempty"`
	TemplateCode   *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateParam  *string `json:"TemplateParam,omitempty" xml:"TemplateParam,omitempty"`
}

func (s QuerySmsDetectListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectListNewResponseBodyList) SetDetectContent(v string) *QuerySmsDetectListNewResponseBodyList {
	s.DetectContent = &v
	return s
}

func (s *QuerySmsDetectListNewResponseBodyList) SetDetectSignName(v string) *QuerySmsDetectListNewResponseBodyList {
	s.DetectSignName = &v
	return s
}

func (s *QuerySmsDetectListNewResponseBodyList) SetDetectTime(v string) *QuerySmsDetectListNewResponseBodyList {
	s.DetectTime = &v
	return s
}

func (s *QuerySmsDetectListNewResponseBodyList) SetStatus(v int32) *QuerySmsDetectListNewResponseBodyList {
	s.Status = &v
	return s
}

func (s *QuerySmsDetectListNewResponseBodyList) SetSuccessRate(v string) *QuerySmsDetectListNewResponseBodyList {
	s.SuccessRate = &v
	return s
}

func (s *QuerySmsDetectListNewResponseBodyList) SetTemplateCode(v string) *QuerySmsDetectListNewResponseBodyList {
	s.TemplateCode = &v
	return s
}

func (s *QuerySmsDetectListNewResponseBodyList) SetTemplateParam(v string) *QuerySmsDetectListNewResponseBodyList {
	s.TemplateParam = &v
	return s
}

type QuerySmsDetectListNewResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsDetectListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsDetectListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsDetectListNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsDetectListNewResponse) SetHeaders(v map[string]*string) *QuerySmsDetectListNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsDetectListNewResponse) SetStatusCode(v int32) *QuerySmsDetectListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsDetectListNewResponse) SetBody(v *QuerySmsDetectListNewResponseBody) *QuerySmsDetectListNewResponse {
	s.Body = v
	return s
}

type QuerySmsPackageDetailRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PackageType          *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	PageNo               *int64  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QuerySmsPackageDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageDetailRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageDetailRequest) SetOwnerId(v int64) *QuerySmsPackageDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsPackageDetailRequest) SetPackageType(v string) *QuerySmsPackageDetailRequest {
	s.PackageType = &v
	return s
}

func (s *QuerySmsPackageDetailRequest) SetPageNo(v int64) *QuerySmsPackageDetailRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsPackageDetailRequest) SetPageSize(v int64) *QuerySmsPackageDetailRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsPackageDetailRequest) SetProdCode(v string) *QuerySmsPackageDetailRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsPackageDetailRequest) SetResourceOwnerAccount(v string) *QuerySmsPackageDetailRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsPackageDetailRequest) SetResourceOwnerId(v int64) *QuerySmsPackageDetailRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsPackageDetailRequest) SetStatus(v int32) *QuerySmsPackageDetailRequest {
	s.Status = &v
	return s
}

type QuerySmsPackageDetailResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsPackageDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageDetailResponseBody) SetRequestId(v string) *QuerySmsPackageDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsPackageDetailResponseBody) SetCode(v string) *QuerySmsPackageDetailResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsPackageDetailResponseBody) SetData(v string) *QuerySmsPackageDetailResponseBody {
	s.Data = &v
	return s
}

type QuerySmsPackageDetailResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsPackageDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsPackageDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageDetailResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageDetailResponse) SetHeaders(v map[string]*string) *QuerySmsPackageDetailResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsPackageDetailResponse) SetStatusCode(v int32) *QuerySmsPackageDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsPackageDetailResponse) SetBody(v *QuerySmsPackageDetailResponseBody) *QuerySmsPackageDetailResponse {
	s.Body = v
	return s
}

type QuerySmsPackageDetailNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PackageType          *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	PageNo               *int64  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QuerySmsPackageDetailNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageDetailNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageDetailNewRequest) SetOwnerId(v int64) *QuerySmsPackageDetailNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsPackageDetailNewRequest) SetPackageType(v string) *QuerySmsPackageDetailNewRequest {
	s.PackageType = &v
	return s
}

func (s *QuerySmsPackageDetailNewRequest) SetPageNo(v int64) *QuerySmsPackageDetailNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsPackageDetailNewRequest) SetPageSize(v int64) *QuerySmsPackageDetailNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsPackageDetailNewRequest) SetProdCode(v string) *QuerySmsPackageDetailNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsPackageDetailNewRequest) SetResourceOwnerAccount(v string) *QuerySmsPackageDetailNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsPackageDetailNewRequest) SetResourceOwnerId(v int64) *QuerySmsPackageDetailNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsPackageDetailNewRequest) SetStatus(v int32) *QuerySmsPackageDetailNewRequest {
	s.Status = &v
	return s
}

type QuerySmsPackageDetailNewResponseBody struct {
	List           *QuerySmsPackageDetailNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNo         *int32                                    `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize       *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RemainSmsCount *int64                                    `json:"RemainSmsCount,omitempty" xml:"RemainSmsCount,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total          *int64                                    `json:"Total,omitempty" xml:"Total,omitempty"`
	TotalSmsCount  *int64                                    `json:"TotalSmsCount,omitempty" xml:"TotalSmsCount,omitempty"`
}

func (s QuerySmsPackageDetailNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageDetailNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageDetailNewResponseBody) SetList(v *QuerySmsPackageDetailNewResponseBodyList) *QuerySmsPackageDetailNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBody) SetPageNo(v int32) *QuerySmsPackageDetailNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBody) SetPageSize(v int32) *QuerySmsPackageDetailNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBody) SetRemainSmsCount(v int64) *QuerySmsPackageDetailNewResponseBody {
	s.RemainSmsCount = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBody) SetRequestId(v string) *QuerySmsPackageDetailNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBody) SetTotal(v int64) *QuerySmsPackageDetailNewResponseBody {
	s.Total = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBody) SetTotalSmsCount(v int64) *QuerySmsPackageDetailNewResponseBody {
	s.TotalSmsCount = &v
	return s
}

type QuerySmsPackageDetailNewResponseBodyList struct {
	SmsPackageDetailDTO []*QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO `json:"SmsPackageDetailDTO,omitempty" xml:"SmsPackageDetailDTO,omitempty" type:"Repeated"`
}

func (s QuerySmsPackageDetailNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageDetailNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageDetailNewResponseBodyList) SetSmsPackageDetailDTO(v []*QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO) *QuerySmsPackageDetailNewResponseBodyList {
	s.SmsPackageDetailDTO = v
	return s
}

type QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO struct {
	InvalidTime *int64  `json:"InvalidTime,omitempty" xml:"InvalidTime,omitempty"`
	OrderTime   *int64  `json:"OrderTime,omitempty" xml:"OrderTime,omitempty"`
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	RemainCount *int64  `json:"RemainCount,omitempty" xml:"RemainCount,omitempty"`
	Status      *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalCount  *int64  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO) SetInvalidTime(v int64) *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO {
	s.InvalidTime = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO) SetOrderTime(v int64) *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO {
	s.OrderTime = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO) SetPackageType(v string) *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO {
	s.PackageType = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO) SetRemainCount(v int64) *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO {
	s.RemainCount = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO) SetStatus(v int32) *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO {
	s.Status = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO) SetTotalCount(v int64) *QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO {
	s.TotalCount = &v
	return s
}

type QuerySmsPackageDetailNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsPackageDetailNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsPackageDetailNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageDetailNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageDetailNewResponse) SetHeaders(v map[string]*string) *QuerySmsPackageDetailNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsPackageDetailNewResponse) SetStatusCode(v int32) *QuerySmsPackageDetailNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsPackageDetailNewResponse) SetBody(v *QuerySmsPackageDetailNewResponseBody) *QuerySmsPackageDetailNewResponse {
	s.Body = v
	return s
}

type QuerySmsPackageNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PackageType          *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProductName          *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	State                *int32  `json:"State,omitempty" xml:"State,omitempty"`
	Time                 *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s QuerySmsPackageNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageNewRequest) SetOwnerId(v int64) *QuerySmsPackageNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsPackageNewRequest) SetPackageType(v string) *QuerySmsPackageNewRequest {
	s.PackageType = &v
	return s
}

func (s *QuerySmsPackageNewRequest) SetPageNo(v int32) *QuerySmsPackageNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsPackageNewRequest) SetPageSize(v int32) *QuerySmsPackageNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsPackageNewRequest) SetProdCode(v string) *QuerySmsPackageNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsPackageNewRequest) SetProductName(v string) *QuerySmsPackageNewRequest {
	s.ProductName = &v
	return s
}

func (s *QuerySmsPackageNewRequest) SetResourceOwnerAccount(v string) *QuerySmsPackageNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsPackageNewRequest) SetResourceOwnerId(v int64) *QuerySmsPackageNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsPackageNewRequest) SetState(v int32) *QuerySmsPackageNewRequest {
	s.State = &v
	return s
}

func (s *QuerySmsPackageNewRequest) SetTime(v string) *QuerySmsPackageNewRequest {
	s.Time = &v
	return s
}

type QuerySmsPackageNewResponseBody struct {
	List      *QuerySmsPackageNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNo    *int32                              `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                              `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QuerySmsPackageNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageNewResponseBody) SetList(v *QuerySmsPackageNewResponseBodyList) *QuerySmsPackageNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsPackageNewResponseBody) SetPageNo(v int32) *QuerySmsPackageNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QuerySmsPackageNewResponseBody) SetPageSize(v int32) *QuerySmsPackageNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QuerySmsPackageNewResponseBody) SetRequestId(v string) *QuerySmsPackageNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsPackageNewResponseBody) SetTotal(v int64) *QuerySmsPackageNewResponseBody {
	s.Total = &v
	return s
}

type QuerySmsPackageNewResponseBodyList struct {
	SmsPackageInfo []*QuerySmsPackageNewResponseBodyListSmsPackageInfo `json:"SmsPackageInfo,omitempty" xml:"SmsPackageInfo,omitempty" type:"Repeated"`
}

func (s QuerySmsPackageNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageNewResponseBodyList) SetSmsPackageInfo(v []*QuerySmsPackageNewResponseBodyListSmsPackageInfo) *QuerySmsPackageNewResponseBodyList {
	s.SmsPackageInfo = v
	return s
}

type QuerySmsPackageNewResponseBodyListSmsPackageInfo struct {
	BuyTime       *string  `json:"BuyTime,omitempty" xml:"BuyTime,omitempty"`
	DetailOrderId *string  `json:"DetailOrderId,omitempty" xml:"DetailOrderId,omitempty"`
	EffTime       *string  `json:"EffTime,omitempty" xml:"EffTime,omitempty"`
	ExpTime       *string  `json:"ExpTime,omitempty" xml:"ExpTime,omitempty"`
	OrderId       *string  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PackageName   *string  `json:"PackageName,omitempty" xml:"PackageName,omitempty"`
	PackageType   *string  `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	PayPrice      *float32 `json:"PayPrice,omitempty" xml:"PayPrice,omitempty"`
	PkgId         *int64   `json:"PkgId,omitempty" xml:"PkgId,omitempty"`
	RefundStatus  *int32   `json:"RefundStatus,omitempty" xml:"RefundStatus,omitempty"`
	State         *int32   `json:"State,omitempty" xml:"State,omitempty"`
	Total         *int64   `json:"Total,omitempty" xml:"Total,omitempty"`
	Usage         *int64   `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s QuerySmsPackageNewResponseBodyListSmsPackageInfo) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageNewResponseBodyListSmsPackageInfo) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetBuyTime(v string) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.BuyTime = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetDetailOrderId(v string) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.DetailOrderId = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetEffTime(v string) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.EffTime = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetExpTime(v string) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.ExpTime = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetOrderId(v string) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.OrderId = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetPackageName(v string) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.PackageName = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetPackageType(v string) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.PackageType = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetPayPrice(v float32) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.PayPrice = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetPkgId(v int64) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.PkgId = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetRefundStatus(v int32) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.RefundStatus = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetState(v int32) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.State = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetTotal(v int64) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.Total = &v
	return s
}

func (s *QuerySmsPackageNewResponseBodyListSmsPackageInfo) SetUsage(v int64) *QuerySmsPackageNewResponseBodyListSmsPackageInfo {
	s.Usage = &v
	return s
}

type QuerySmsPackageNewResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsPackageNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsPackageNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageNewResponse) SetHeaders(v map[string]*string) *QuerySmsPackageNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsPackageNewResponse) SetStatusCode(v int32) *QuerySmsPackageNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsPackageNewResponse) SetBody(v *QuerySmsPackageNewResponseBody) *QuerySmsPackageNewResponse {
	s.Body = v
	return s
}

type QuerySmsPackageOrderListRequest struct {
	BillCycle            *string `json:"BillCycle,omitempty" xml:"BillCycle,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsPackageOrderListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageOrderListRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageOrderListRequest) SetBillCycle(v string) *QuerySmsPackageOrderListRequest {
	s.BillCycle = &v
	return s
}

func (s *QuerySmsPackageOrderListRequest) SetOwnerId(v int64) *QuerySmsPackageOrderListRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsPackageOrderListRequest) SetProdCode(v string) *QuerySmsPackageOrderListRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsPackageOrderListRequest) SetResourceOwnerAccount(v string) *QuerySmsPackageOrderListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsPackageOrderListRequest) SetResourceOwnerId(v int64) *QuerySmsPackageOrderListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsPackageOrderListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsPackageOrderListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageOrderListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageOrderListResponseBody) SetRequestId(v string) *QuerySmsPackageOrderListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsPackageOrderListResponseBody) SetCode(v string) *QuerySmsPackageOrderListResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsPackageOrderListResponseBody) SetData(v string) *QuerySmsPackageOrderListResponseBody {
	s.Data = &v
	return s
}

type QuerySmsPackageOrderListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsPackageOrderListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsPackageOrderListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageOrderListResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageOrderListResponse) SetHeaders(v map[string]*string) *QuerySmsPackageOrderListResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsPackageOrderListResponse) SetStatusCode(v int32) *QuerySmsPackageOrderListResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsPackageOrderListResponse) SetBody(v *QuerySmsPackageOrderListResponseBody) *QuerySmsPackageOrderListResponse {
	s.Body = v
	return s
}

type QuerySmsPackageOrderListNewRequest struct {
	BillCycle            *string `json:"BillCycle,omitempty" xml:"BillCycle,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsPackageOrderListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageOrderListNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageOrderListNewRequest) SetBillCycle(v string) *QuerySmsPackageOrderListNewRequest {
	s.BillCycle = &v
	return s
}

func (s *QuerySmsPackageOrderListNewRequest) SetOwnerId(v int64) *QuerySmsPackageOrderListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsPackageOrderListNewRequest) SetProdCode(v string) *QuerySmsPackageOrderListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsPackageOrderListNewRequest) SetResourceOwnerAccount(v string) *QuerySmsPackageOrderListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsPackageOrderListNewRequest) SetResourceOwnerId(v int64) *QuerySmsPackageOrderListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsPackageOrderListNewResponseBody struct {
	List      *QuerySmsPackageOrderListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySmsPackageOrderListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageOrderListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageOrderListNewResponseBody) SetList(v *QuerySmsPackageOrderListNewResponseBodyList) *QuerySmsPackageOrderListNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsPackageOrderListNewResponseBody) SetRequestId(v string) *QuerySmsPackageOrderListNewResponseBody {
	s.RequestId = &v
	return s
}

type QuerySmsPackageOrderListNewResponseBodyList struct {
	SmsPackageOrderResponse []*QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse `json:"SmsPackageOrderResponse,omitempty" xml:"SmsPackageOrderResponse,omitempty" type:"Repeated"`
}

func (s QuerySmsPackageOrderListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageOrderListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageOrderListNewResponseBodyList) SetSmsPackageOrderResponse(v []*QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse) *QuerySmsPackageOrderListNewResponseBodyList {
	s.SmsPackageOrderResponse = v
	return s
}

type QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse struct {
	EffectDate *string `json:"EffectDate,omitempty" xml:"EffectDate,omitempty"`
	ExpireDate *string `json:"ExpireDate,omitempty" xml:"ExpireDate,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PayPrice   *string `json:"PayPrice,omitempty" xml:"PayPrice,omitempty"`
	State      *int32  `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse) SetEffectDate(v string) *QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse {
	s.EffectDate = &v
	return s
}

func (s *QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse) SetExpireDate(v string) *QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse {
	s.ExpireDate = &v
	return s
}

func (s *QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse) SetName(v string) *QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse {
	s.Name = &v
	return s
}

func (s *QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse) SetPayPrice(v string) *QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse {
	s.PayPrice = &v
	return s
}

func (s *QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse) SetState(v int32) *QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse {
	s.State = &v
	return s
}

type QuerySmsPackageOrderListNewResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsPackageOrderListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsPackageOrderListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageOrderListNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageOrderListNewResponse) SetHeaders(v map[string]*string) *QuerySmsPackageOrderListNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsPackageOrderListNewResponse) SetStatusCode(v int32) *QuerySmsPackageOrderListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsPackageOrderListNewResponse) SetBody(v *QuerySmsPackageOrderListNewResponseBody) *QuerySmsPackageOrderListNewResponse {
	s.Body = v
	return s
}

type QuerySmsPackageSummaryRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsPackageSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageSummaryRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageSummaryRequest) SetOwnerId(v int64) *QuerySmsPackageSummaryRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsPackageSummaryRequest) SetProdCode(v string) *QuerySmsPackageSummaryRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsPackageSummaryRequest) SetResourceOwnerAccount(v string) *QuerySmsPackageSummaryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsPackageSummaryRequest) SetResourceOwnerId(v int64) *QuerySmsPackageSummaryRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsPackageSummaryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsPackageSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageSummaryResponseBody) SetRequestId(v string) *QuerySmsPackageSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsPackageSummaryResponseBody) SetCode(v string) *QuerySmsPackageSummaryResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsPackageSummaryResponseBody) SetData(v string) *QuerySmsPackageSummaryResponseBody {
	s.Data = &v
	return s
}

type QuerySmsPackageSummaryResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsPackageSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsPackageSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageSummaryResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageSummaryResponse) SetHeaders(v map[string]*string) *QuerySmsPackageSummaryResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsPackageSummaryResponse) SetStatusCode(v int32) *QuerySmsPackageSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsPackageSummaryResponse) SetBody(v *QuerySmsPackageSummaryResponseBody) *QuerySmsPackageSummaryResponse {
	s.Body = v
	return s
}

type QuerySmsPackageSummaryNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsPackageSummaryNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageSummaryNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageSummaryNewRequest) SetOwnerId(v int64) *QuerySmsPackageSummaryNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsPackageSummaryNewRequest) SetProdCode(v string) *QuerySmsPackageSummaryNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsPackageSummaryNewRequest) SetResourceOwnerAccount(v string) *QuerySmsPackageSummaryNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsPackageSummaryNewRequest) SetResourceOwnerId(v int64) *QuerySmsPackageSummaryNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsPackageSummaryNewResponseBody struct {
	CertifyType       *int32  `json:"CertifyType,omitempty" xml:"CertifyType,omitempty"`
	InterPackageCount *int64  `json:"InterPackageCount,omitempty" xml:"InterPackageCount,omitempty"`
	InterPackageSum   *int64  `json:"InterPackageSum,omitempty" xml:"InterPackageSum,omitempty"`
	MktPackageCount   *int64  `json:"MktPackageCount,omitempty" xml:"MktPackageCount,omitempty"`
	MktPackageSum     *int64  `json:"MktPackageSum,omitempty" xml:"MktPackageSum,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmsPackageCount   *int64  `json:"SmsPackageCount,omitempty" xml:"SmsPackageCount,omitempty"`
	SmsPackageSum     *int64  `json:"SmsPackageSum,omitempty" xml:"SmsPackageSum,omitempty"`
	SysPackageCount   *int64  `json:"SysPackageCount,omitempty" xml:"SysPackageCount,omitempty"`
	SysPackageSum     *int64  `json:"SysPackageSum,omitempty" xml:"SysPackageSum,omitempty"`
}

func (s QuerySmsPackageSummaryNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageSummaryNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageSummaryNewResponseBody) SetCertifyType(v int32) *QuerySmsPackageSummaryNewResponseBody {
	s.CertifyType = &v
	return s
}

func (s *QuerySmsPackageSummaryNewResponseBody) SetInterPackageCount(v int64) *QuerySmsPackageSummaryNewResponseBody {
	s.InterPackageCount = &v
	return s
}

func (s *QuerySmsPackageSummaryNewResponseBody) SetInterPackageSum(v int64) *QuerySmsPackageSummaryNewResponseBody {
	s.InterPackageSum = &v
	return s
}

func (s *QuerySmsPackageSummaryNewResponseBody) SetMktPackageCount(v int64) *QuerySmsPackageSummaryNewResponseBody {
	s.MktPackageCount = &v
	return s
}

func (s *QuerySmsPackageSummaryNewResponseBody) SetMktPackageSum(v int64) *QuerySmsPackageSummaryNewResponseBody {
	s.MktPackageSum = &v
	return s
}

func (s *QuerySmsPackageSummaryNewResponseBody) SetRequestId(v string) *QuerySmsPackageSummaryNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsPackageSummaryNewResponseBody) SetSmsPackageCount(v int64) *QuerySmsPackageSummaryNewResponseBody {
	s.SmsPackageCount = &v
	return s
}

func (s *QuerySmsPackageSummaryNewResponseBody) SetSmsPackageSum(v int64) *QuerySmsPackageSummaryNewResponseBody {
	s.SmsPackageSum = &v
	return s
}

func (s *QuerySmsPackageSummaryNewResponseBody) SetSysPackageCount(v int64) *QuerySmsPackageSummaryNewResponseBody {
	s.SysPackageCount = &v
	return s
}

func (s *QuerySmsPackageSummaryNewResponseBody) SetSysPackageSum(v int64) *QuerySmsPackageSummaryNewResponseBody {
	s.SysPackageSum = &v
	return s
}

type QuerySmsPackageSummaryNewResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsPackageSummaryNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsPackageSummaryNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsPackageSummaryNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsPackageSummaryNewResponse) SetHeaders(v map[string]*string) *QuerySmsPackageSummaryNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsPackageSummaryNewResponse) SetStatusCode(v int32) *QuerySmsPackageSummaryNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsPackageSummaryNewResponse) SetBody(v *QuerySmsPackageSummaryNewResponseBody) *QuerySmsPackageSummaryNewResponse {
	s.Body = v
	return s
}

type QuerySmsSaasTaskDetailRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TaskId               *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskInstanceId       *int64  `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
}

func (s QuerySmsSaasTaskDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskDetailRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskDetailRequest) SetOwnerId(v int64) *QuerySmsSaasTaskDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailRequest) SetProdCode(v string) *QuerySmsSaasTaskDetailRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSaasTaskDetailRequest) SetResourceOwnerAccount(v string) *QuerySmsSaasTaskDetailRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSaasTaskDetailRequest) SetResourceOwnerId(v int64) *QuerySmsSaasTaskDetailRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailRequest) SetTaskId(v int64) *QuerySmsSaasTaskDetailRequest {
	s.TaskId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailRequest) SetTaskInstanceId(v int64) *QuerySmsSaasTaskDetailRequest {
	s.TaskInstanceId = &v
	return s
}

type QuerySmsSaasTaskDetailResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsSaasTaskDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskDetailResponseBody) SetRequestId(v string) *QuerySmsSaasTaskDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailResponseBody) SetCode(v string) *QuerySmsSaasTaskDetailResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsSaasTaskDetailResponseBody) SetData(v string) *QuerySmsSaasTaskDetailResponseBody {
	s.Data = &v
	return s
}

type QuerySmsSaasTaskDetailResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSaasTaskDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSaasTaskDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskDetailResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskDetailResponse) SetHeaders(v map[string]*string) *QuerySmsSaasTaskDetailResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSaasTaskDetailResponse) SetStatusCode(v int32) *QuerySmsSaasTaskDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSaasTaskDetailResponse) SetBody(v *QuerySmsSaasTaskDetailResponseBody) *QuerySmsSaasTaskDetailResponse {
	s.Body = v
	return s
}

type QuerySmsSaasTaskDetailNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TaskId               *int64  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s QuerySmsSaasTaskDetailNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskDetailNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskDetailNewRequest) SetOwnerId(v int64) *QuerySmsSaasTaskDetailNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewRequest) SetProdCode(v string) *QuerySmsSaasTaskDetailNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewRequest) SetResourceOwnerAccount(v string) *QuerySmsSaasTaskDetailNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewRequest) SetResourceOwnerId(v int64) *QuerySmsSaasTaskDetailNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewRequest) SetTaskId(v int64) *QuerySmsSaasTaskDetailNewRequest {
	s.TaskId = &v
	return s
}

type QuerySmsSaasTaskDetailNewResponseBody struct {
	BizType                     *string                                                 `json:"BizType,omitempty" xml:"BizType,omitempty"`
	DetailDownloadUrl           *string                                                 `json:"DetailDownloadUrl,omitempty" xml:"DetailDownloadUrl,omitempty"`
	DetailDownloadUrlForSuccess *string                                                 `json:"DetailDownloadUrlForSuccess,omitempty" xml:"DetailDownloadUrlForSuccess,omitempty"`
	ExtParams                   *string                                                 `json:"ExtParams,omitempty" xml:"ExtParams,omitempty"`
	FailCount                   *int32                                                  `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	FireTime                    *string                                                 `json:"FireTime,omitempty" xml:"FireTime,omitempty"`
	GmtCreate                   *string                                                 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	IsDeleted                   *bool                                                   `json:"IsDeleted,omitempty" xml:"IsDeleted,omitempty"`
	IsPermitOrder               *bool                                                   `json:"IsPermitOrder,omitempty" xml:"IsPermitOrder,omitempty"`
	IsPermitOrderForSuccess     *bool                                                   `json:"IsPermitOrderForSuccess,omitempty" xml:"IsPermitOrderForSuccess,omitempty"`
	OssFilePath                 *string                                                 `json:"OssFilePath,omitempty" xml:"OssFilePath,omitempty"`
	PhoneList                   *QuerySmsSaasTaskDetailNewResponseBodyPhoneList         `json:"PhoneList,omitempty" xml:"PhoneList,omitempty" type:"Struct"`
	RequestId                   *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SaasBaseCommParam           *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam `json:"SaasBaseCommParam,omitempty" xml:"SaasBaseCommParam,omitempty" type:"Struct"`
	SaasFileUrl                 *string                                                 `json:"SaasFileUrl,omitempty" xml:"SaasFileUrl,omitempty"`
	ScheduleType                *string                                                 `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	Status                      *string                                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	SuccessCount                *int32                                                  `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
	TaskId                      *int64                                                  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskInstanceId              *int64                                                  `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
	TaskName                    *string                                                 `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TotalCount                  *int32                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QuerySmsSaasTaskDetailNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskDetailNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetBizType(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.BizType = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetDetailDownloadUrl(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.DetailDownloadUrl = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetDetailDownloadUrlForSuccess(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.DetailDownloadUrlForSuccess = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetExtParams(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.ExtParams = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetFailCount(v int32) *QuerySmsSaasTaskDetailNewResponseBody {
	s.FailCount = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetFireTime(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.FireTime = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetGmtCreate(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetIsDeleted(v bool) *QuerySmsSaasTaskDetailNewResponseBody {
	s.IsDeleted = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetIsPermitOrder(v bool) *QuerySmsSaasTaskDetailNewResponseBody {
	s.IsPermitOrder = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetIsPermitOrderForSuccess(v bool) *QuerySmsSaasTaskDetailNewResponseBody {
	s.IsPermitOrderForSuccess = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetOssFilePath(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.OssFilePath = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetPhoneList(v *QuerySmsSaasTaskDetailNewResponseBodyPhoneList) *QuerySmsSaasTaskDetailNewResponseBody {
	s.PhoneList = v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetRequestId(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetSaasBaseCommParam(v *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) *QuerySmsSaasTaskDetailNewResponseBody {
	s.SaasBaseCommParam = v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetSaasFileUrl(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.SaasFileUrl = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetScheduleType(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.ScheduleType = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetStatus(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.Status = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetSuccessCount(v int32) *QuerySmsSaasTaskDetailNewResponseBody {
	s.SuccessCount = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetTaskId(v int64) *QuerySmsSaasTaskDetailNewResponseBody {
	s.TaskId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetTaskInstanceId(v int64) *QuerySmsSaasTaskDetailNewResponseBody {
	s.TaskInstanceId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetTaskName(v string) *QuerySmsSaasTaskDetailNewResponseBody {
	s.TaskName = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBody) SetTotalCount(v int32) *QuerySmsSaasTaskDetailNewResponseBody {
	s.TotalCount = &v
	return s
}

type QuerySmsSaasTaskDetailNewResponseBodyPhoneList struct {
	PhoneNum []*string `json:"phoneNum,omitempty" xml:"phoneNum,omitempty" type:"Repeated"`
}

func (s QuerySmsSaasTaskDetailNewResponseBodyPhoneList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskDetailNewResponseBodyPhoneList) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskDetailNewResponseBodyPhoneList) SetPhoneNum(v []*string) *QuerySmsSaasTaskDetailNewResponseBodyPhoneList {
	s.PhoneNum = v
	return s
}

type QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam struct {
	AliyunUid           *int64                                                           `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	BillCount           *int32                                                           `json:"BillCount,omitempty" xml:"BillCount,omitempty"`
	ByteCount           *int32                                                           `json:"ByteCount,omitempty" xml:"ByteCount,omitempty"`
	ClientIp            *string                                                          `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	CustId              *int64                                                           `json:"CustId,omitempty" xml:"CustId,omitempty"`
	CycleNum            *int32                                                           `json:"CycleNum,omitempty" xml:"CycleNum,omitempty"`
	ParamList           *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParamParamList `json:"ParamList,omitempty" xml:"ParamList,omitempty" type:"Struct"`
	PartnerId           *int64                                                           `json:"PartnerId,omitempty" xml:"PartnerId,omitempty"`
	Signature           *string                                                          `json:"Signature,omitempty" xml:"Signature,omitempty"`
	SmsContent          *string                                                          `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	SmsTemplateCode     *string                                                          `json:"SmsTemplateCode,omitempty" xml:"SmsTemplateCode,omitempty"`
	TaskErrorCase       *string                                                          `json:"TaskErrorCase,omitempty" xml:"TaskErrorCase,omitempty"`
	TaskErrorSuggestion *string                                                          `json:"TaskErrorSuggestion,omitempty" xml:"TaskErrorSuggestion,omitempty"`
}

func (s QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetAliyunUid(v int64) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.AliyunUid = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetBillCount(v int32) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.BillCount = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetByteCount(v int32) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.ByteCount = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetClientIp(v string) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.ClientIp = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetCustId(v int64) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.CustId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetCycleNum(v int32) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.CycleNum = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetParamList(v *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParamParamList) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.ParamList = v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetPartnerId(v int64) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.PartnerId = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetSignature(v string) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.Signature = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetSmsContent(v string) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.SmsContent = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetSmsTemplateCode(v string) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.SmsTemplateCode = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetTaskErrorCase(v string) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.TaskErrorCase = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam) SetTaskErrorSuggestion(v string) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam {
	s.TaskErrorSuggestion = &v
	return s
}

type QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParamParamList struct {
	Param []*string `json:"Param,omitempty" xml:"Param,omitempty" type:"Repeated"`
}

func (s QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParamParamList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParamParamList) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParamParamList) SetParam(v []*string) *QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParamParamList {
	s.Param = v
	return s
}

type QuerySmsSaasTaskDetailNewResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSaasTaskDetailNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSaasTaskDetailNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskDetailNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskDetailNewResponse) SetHeaders(v map[string]*string) *QuerySmsSaasTaskDetailNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponse) SetStatusCode(v int32) *QuerySmsSaasTaskDetailNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSaasTaskDetailNewResponse) SetBody(v *QuerySmsSaasTaskDetailNewResponseBody) *QuerySmsSaasTaskDetailNewResponse {
	s.Body = v
	return s
}

type QuerySmsSaasTaskListRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceType          *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskName             *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s QuerySmsSaasTaskListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskListRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskListRequest) SetBizType(v string) *QuerySmsSaasTaskListRequest {
	s.BizType = &v
	return s
}

func (s *QuerySmsSaasTaskListRequest) SetOwnerId(v int64) *QuerySmsSaasTaskListRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSaasTaskListRequest) SetPageNo(v int32) *QuerySmsSaasTaskListRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsSaasTaskListRequest) SetPageSize(v int32) *QuerySmsSaasTaskListRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsSaasTaskListRequest) SetProdCode(v string) *QuerySmsSaasTaskListRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSaasTaskListRequest) SetResourceOwnerAccount(v string) *QuerySmsSaasTaskListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSaasTaskListRequest) SetResourceOwnerId(v int64) *QuerySmsSaasTaskListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSaasTaskListRequest) SetServiceType(v string) *QuerySmsSaasTaskListRequest {
	s.ServiceType = &v
	return s
}

func (s *QuerySmsSaasTaskListRequest) SetStatus(v string) *QuerySmsSaasTaskListRequest {
	s.Status = &v
	return s
}

func (s *QuerySmsSaasTaskListRequest) SetTaskName(v string) *QuerySmsSaasTaskListRequest {
	s.TaskName = &v
	return s
}

type QuerySmsSaasTaskListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsSaasTaskListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskListResponseBody) SetRequestId(v string) *QuerySmsSaasTaskListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSaasTaskListResponseBody) SetCode(v string) *QuerySmsSaasTaskListResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsSaasTaskListResponseBody) SetData(v string) *QuerySmsSaasTaskListResponseBody {
	s.Data = &v
	return s
}

type QuerySmsSaasTaskListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSaasTaskListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSaasTaskListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskListResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskListResponse) SetHeaders(v map[string]*string) *QuerySmsSaasTaskListResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSaasTaskListResponse) SetStatusCode(v int32) *QuerySmsSaasTaskListResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSaasTaskListResponse) SetBody(v *QuerySmsSaasTaskListResponseBody) *QuerySmsSaasTaskListResponse {
	s.Body = v
	return s
}

type QuerySmsSaasTaskListNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskName             *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s QuerySmsSaasTaskListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskListNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskListNewRequest) SetBizType(v string) *QuerySmsSaasTaskListNewRequest {
	s.BizType = &v
	return s
}

func (s *QuerySmsSaasTaskListNewRequest) SetOwnerId(v int64) *QuerySmsSaasTaskListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSaasTaskListNewRequest) SetPageNo(v int32) *QuerySmsSaasTaskListNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsSaasTaskListNewRequest) SetPageSize(v int32) *QuerySmsSaasTaskListNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsSaasTaskListNewRequest) SetProdCode(v string) *QuerySmsSaasTaskListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSaasTaskListNewRequest) SetResourceOwnerAccount(v string) *QuerySmsSaasTaskListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSaasTaskListNewRequest) SetResourceOwnerId(v int64) *QuerySmsSaasTaskListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSaasTaskListNewRequest) SetStatus(v string) *QuerySmsSaasTaskListNewRequest {
	s.Status = &v
	return s
}

func (s *QuerySmsSaasTaskListNewRequest) SetTaskName(v string) *QuerySmsSaasTaskListNewRequest {
	s.TaskName = &v
	return s
}

type QuerySmsSaasTaskListNewResponseBody struct {
	List      *QuerySmsSaasTaskListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNo    *int32                                   `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                   `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QuerySmsSaasTaskListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskListNewResponseBody) SetList(v *QuerySmsSaasTaskListNewResponseBodyList) *QuerySmsSaasTaskListNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBody) SetPageNo(v int32) *QuerySmsSaasTaskListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBody) SetPageSize(v int32) *QuerySmsSaasTaskListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBody) SetRequestId(v string) *QuerySmsSaasTaskListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBody) SetTotal(v int64) *QuerySmsSaasTaskListNewResponseBody {
	s.Total = &v
	return s
}

type QuerySmsSaasTaskListNewResponseBodyList struct {
	FcSaasTaskDTO []*QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO `json:"FcSaasTaskDTO,omitempty" xml:"FcSaasTaskDTO,omitempty" type:"Repeated"`
}

func (s QuerySmsSaasTaskListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskListNewResponseBodyList) SetFcSaasTaskDTO(v []*QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) *QuerySmsSaasTaskListNewResponseBodyList {
	s.FcSaasTaskDTO = v
	return s
}

type QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO struct {
	BizType                     *string                                                         `json:"BizType,omitempty" xml:"BizType,omitempty"`
	CommParams                  *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams `json:"CommParams,omitempty" xml:"CommParams,omitempty" type:"Struct"`
	DetailDownloadUrl           *string                                                         `json:"DetailDownloadUrl,omitempty" xml:"DetailDownloadUrl,omitempty"`
	DetailDownloadUrlForSuccess *string                                                         `json:"DetailDownloadUrlForSuccess,omitempty" xml:"DetailDownloadUrlForSuccess,omitempty"`
	ExtParams                   *string                                                         `json:"ExtParams,omitempty" xml:"ExtParams,omitempty"`
	FailCount                   *int32                                                          `json:"FailCount,omitempty" xml:"FailCount,omitempty"`
	FireTime                    *string                                                         `json:"FireTime,omitempty" xml:"FireTime,omitempty"`
	GmtCreate                   *string                                                         `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	IsDeleted                   *bool                                                           `json:"IsDeleted,omitempty" xml:"IsDeleted,omitempty"`
	IsPermitOrder               *bool                                                           `json:"IsPermitOrder,omitempty" xml:"IsPermitOrder,omitempty"`
	IsPermitOrderForSuccess     *bool                                                           `json:"IsPermitOrderForSuccess,omitempty" xml:"IsPermitOrderForSuccess,omitempty"`
	OssFilePath                 *string                                                         `json:"OssFilePath,omitempty" xml:"OssFilePath,omitempty"`
	ScheduleType                *string                                                         `json:"ScheduleType,omitempty" xml:"ScheduleType,omitempty"`
	Status                      *string                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	SuccessCount                *int32                                                          `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
	TaskId                      *int64                                                          `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskInstanceId              *int64                                                          `json:"TaskInstanceId,omitempty" xml:"TaskInstanceId,omitempty"`
	TaskName                    *string                                                         `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	TotalCount                  *int32                                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetBizType(v string) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.BizType = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetCommParams(v *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.CommParams = v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetDetailDownloadUrl(v string) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.DetailDownloadUrl = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetDetailDownloadUrlForSuccess(v string) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.DetailDownloadUrlForSuccess = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetExtParams(v string) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.ExtParams = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetFailCount(v int32) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.FailCount = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetFireTime(v string) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.FireTime = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetGmtCreate(v string) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.GmtCreate = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetIsDeleted(v bool) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.IsDeleted = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetIsPermitOrder(v bool) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.IsPermitOrder = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetIsPermitOrderForSuccess(v bool) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.IsPermitOrderForSuccess = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetOssFilePath(v string) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.OssFilePath = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetScheduleType(v string) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.ScheduleType = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetStatus(v string) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.Status = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetSuccessCount(v int32) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.SuccessCount = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetTaskId(v int64) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.TaskId = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetTaskInstanceId(v int64) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.TaskInstanceId = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetTaskName(v string) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.TaskName = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO) SetTotalCount(v int32) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO {
	s.TotalCount = &v
	return s
}

type QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams struct {
	AliyunUid *int64 `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	CustId    *int64 `json:"CustId,omitempty" xml:"CustId,omitempty"`
	CycleNum  *int32 `json:"CycleNum,omitempty" xml:"CycleNum,omitempty"`
	PartnerId *int64 `json:"PartnerId,omitempty" xml:"PartnerId,omitempty"`
}

func (s QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams) SetAliyunUid(v int64) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams {
	s.AliyunUid = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams) SetCustId(v int64) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams {
	s.CustId = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams) SetCycleNum(v int32) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams {
	s.CycleNum = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams) SetPartnerId(v int64) *QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams {
	s.PartnerId = &v
	return s
}

type QuerySmsSaasTaskListNewResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSaasTaskListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSaasTaskListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSaasTaskListNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSaasTaskListNewResponse) SetHeaders(v map[string]*string) *QuerySmsSaasTaskListNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSaasTaskListNewResponse) SetStatusCode(v int32) *QuerySmsSaasTaskListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSaasTaskListNewResponse) SetBody(v *QuerySmsSaasTaskListNewResponseBody) *QuerySmsSaasTaskListNewResponse {
	s.Body = v
	return s
}

type QuerySmsSendFailDetailsUrlRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SendDate             *string `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
}

func (s QuerySmsSendFailDetailsUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSendFailDetailsUrlRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSendFailDetailsUrlRequest) SetOwnerId(v int64) *QuerySmsSendFailDetailsUrlRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlRequest) SetProdCode(v string) *QuerySmsSendFailDetailsUrlRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlRequest) SetProdId(v string) *QuerySmsSendFailDetailsUrlRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlRequest) SetResourceOwnerAccount(v string) *QuerySmsSendFailDetailsUrlRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlRequest) SetResourceOwnerId(v int64) *QuerySmsSendFailDetailsUrlRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlRequest) SetSendDate(v string) *QuerySmsSendFailDetailsUrlRequest {
	s.SendDate = &v
	return s
}

type QuerySmsSendFailDetailsUrlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsSendFailDetailsUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSendFailDetailsUrlResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSendFailDetailsUrlResponseBody) SetRequestId(v string) *QuerySmsSendFailDetailsUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlResponseBody) SetCode(v string) *QuerySmsSendFailDetailsUrlResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlResponseBody) SetData(v string) *QuerySmsSendFailDetailsUrlResponseBody {
	s.Data = &v
	return s
}

type QuerySmsSendFailDetailsUrlResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSendFailDetailsUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSendFailDetailsUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSendFailDetailsUrlResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSendFailDetailsUrlResponse) SetHeaders(v map[string]*string) *QuerySmsSendFailDetailsUrlResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSendFailDetailsUrlResponse) SetStatusCode(v int32) *QuerySmsSendFailDetailsUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlResponse) SetBody(v *QuerySmsSendFailDetailsUrlResponseBody) *QuerySmsSendFailDetailsUrlResponse {
	s.Body = v
	return s
}

type QuerySmsSendFailDetailsUrlNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SendDate             *string `json:"SendDate,omitempty" xml:"SendDate,omitempty"`
}

func (s QuerySmsSendFailDetailsUrlNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSendFailDetailsUrlNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSendFailDetailsUrlNewRequest) SetOwnerId(v int64) *QuerySmsSendFailDetailsUrlNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlNewRequest) SetProdCode(v string) *QuerySmsSendFailDetailsUrlNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlNewRequest) SetProdId(v string) *QuerySmsSendFailDetailsUrlNewRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlNewRequest) SetResourceOwnerAccount(v string) *QuerySmsSendFailDetailsUrlNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlNewRequest) SetResourceOwnerId(v int64) *QuerySmsSendFailDetailsUrlNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlNewRequest) SetSendDate(v string) *QuerySmsSendFailDetailsUrlNewRequest {
	s.SendDate = &v
	return s
}

type QuerySmsSendFailDetailsUrlNewResponseBody struct {
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QuerySmsSendFailDetailsUrlNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSendFailDetailsUrlNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSendFailDetailsUrlNewResponseBody) SetDownloadUrl(v string) *QuerySmsSendFailDetailsUrlNewResponseBody {
	s.DownloadUrl = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlNewResponseBody) SetRequestId(v string) *QuerySmsSendFailDetailsUrlNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlNewResponseBody) SetStatus(v string) *QuerySmsSendFailDetailsUrlNewResponseBody {
	s.Status = &v
	return s
}

type QuerySmsSendFailDetailsUrlNewResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSendFailDetailsUrlNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSendFailDetailsUrlNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSendFailDetailsUrlNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSendFailDetailsUrlNewResponse) SetHeaders(v map[string]*string) *QuerySmsSendFailDetailsUrlNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSendFailDetailsUrlNewResponse) SetStatusCode(v int32) *QuerySmsSendFailDetailsUrlNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSendFailDetailsUrlNewResponse) SetBody(v *QuerySmsSendFailDetailsUrlNewResponseBody) *QuerySmsSendFailDetailsUrlNewResponse {
	s.Body = v
	return s
}

type QuerySmsSignDetailBySignIdNewRequest struct {
	// This parameter is required.
	Id                   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SignGray             *bool   `json:"SignGray,omitempty" xml:"SignGray,omitempty"`
}

func (s QuerySmsSignDetailBySignIdNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignDetailBySignIdNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSignDetailBySignIdNewRequest) SetId(v string) *QuerySmsSignDetailBySignIdNewRequest {
	s.Id = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewRequest) SetOwnerId(v int64) *QuerySmsSignDetailBySignIdNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewRequest) SetProdCode(v string) *QuerySmsSignDetailBySignIdNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewRequest) SetResourceOwnerAccount(v string) *QuerySmsSignDetailBySignIdNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewRequest) SetResourceOwnerId(v int64) *QuerySmsSignDetailBySignIdNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewRequest) SetSignGray(v bool) *QuerySmsSignDetailBySignIdNewRequest {
	s.SignGray = &v
	return s
}

type QuerySmsSignDetailBySignIdNewResponseBody struct {
	AccessToken                      *string                                                    `json:"AccessToken,omitempty" xml:"AccessToken,omitempty"`
	ApplicationScene                 *QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene `json:"ApplicationScene,omitempty" xml:"ApplicationScene,omitempty" type:"Struct"`
	AuditInfo                        *string                                                    `json:"AuditInfo,omitempty" xml:"AuditInfo,omitempty"`
	AuditRemarkInfo                  *string                                                    `json:"AuditRemarkInfo,omitempty" xml:"AuditRemarkInfo,omitempty"`
	AuditState                       *string                                                    `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	Authorization                    *string                                                    `json:"Authorization,omitempty" xml:"Authorization,omitempty"`
	AuthorizationEffTime             *string                                                    `json:"AuthorizationEffTime,omitempty" xml:"AuthorizationEffTime,omitempty"`
	AuthorizationLetter              *string                                                    `json:"AuthorizationLetter,omitempty" xml:"AuthorizationLetter,omitempty"`
	AuthorizationLetterAuditPass     *bool                                                      `json:"AuthorizationLetterAuditPass,omitempty" xml:"AuthorizationLetterAuditPass,omitempty"`
	AuthorizationLetterId            *string                                                    `json:"AuthorizationLetterId,omitempty" xml:"AuthorizationLetterId,omitempty"`
	AuthorizationLetterName          *string                                                    `json:"AuthorizationLetterName,omitempty" xml:"AuthorizationLetterName,omitempty"`
	AuthorizationLetterState         *string                                                    `json:"AuthorizationLetterState,omitempty" xml:"AuthorizationLetterState,omitempty"`
	AuthorizationLetterStatus        *string                                                    `json:"AuthorizationLetterStatus,omitempty" xml:"AuthorizationLetterStatus,omitempty"`
	AuthorizationSignScope           *string                                                    `json:"AuthorizationSignScope,omitempty" xml:"AuthorizationSignScope,omitempty"`
	EffectSceneType                  *int32                                                     `json:"EffectSceneType,omitempty" xml:"EffectSceneType,omitempty"`
	EnableAuthorizationLetter        *bool                                                      `json:"EnableAuthorizationLetter,omitempty" xml:"EnableAuthorizationLetter,omitempty"`
	ExtendMessage                    *string                                                    `json:"ExtendMessage,omitempty" xml:"ExtendMessage,omitempty"`
	FileIds                          []*int64                                                   `json:"FileIds,omitempty" xml:"FileIds,omitempty" type:"Repeated"`
	FileUrlList                      []*string                                                  `json:"FileUrlList,omitempty" xml:"FileUrlList,omitempty" type:"Repeated"`
	From                             *string                                                    `json:"From,omitempty" xml:"From,omitempty"`
	GmtCreateStr                     *string                                                    `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	Id                               *string                                                    `json:"Id,omitempty" xml:"Id,omitempty"`
	IsAuthorizationLetterOCRComplete *bool                                                      `json:"IsAuthorizationLetterOCRComplete,omitempty" xml:"IsAuthorizationLetterOCRComplete,omitempty"`
	IsAuthorizationLetterOCRDiff     *bool                                                      `json:"IsAuthorizationLetterOCRDiff,omitempty" xml:"IsAuthorizationLetterOCRDiff,omitempty"`
	IsSignScopeOCRDiff               *bool                                                      `json:"IsSignScopeOCRDiff,omitempty" xml:"IsSignScopeOCRDiff,omitempty"`
	List                             []*QuerySmsSignDetailBySignIdNewResponseBodyList           `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	NeedAuthorized                   *bool                                                      `json:"NeedAuthorized,omitempty" xml:"NeedAuthorized,omitempty"`
	OpenTag                          *bool                                                      `json:"OpenTag,omitempty" xml:"OpenTag,omitempty"`
	OrderId                          *string                                                    `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrganizationCode                 *string                                                    `json:"OrganizationCode,omitempty" xml:"OrganizationCode,omitempty"`
	OssKeys                          []*string                                                  `json:"OssKeys,omitempty" xml:"OssKeys,omitempty" type:"Repeated"`
	ProxyAuthorization               *string                                                    `json:"ProxyAuthorization,omitempty" xml:"ProxyAuthorization,omitempty"`
	Remark                           *string                                                    `json:"Remark,omitempty" xml:"Remark,omitempty"`
	RequestId                        *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SceneType                        *int32                                                     `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	ServiceType                      *int32                                                     `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignCode                         *string                                                    `json:"SignCode,omitempty" xml:"SignCode,omitempty"`
	SignName                         *string                                                    `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SignScopeOCR                     *string                                                    `json:"SignScopeOCR,omitempty" xml:"SignScopeOCR,omitempty"`
	SignUpgrade                      *string                                                    `json:"SignUpgrade,omitempty" xml:"SignUpgrade,omitempty"`
}

func (s QuerySmsSignDetailBySignIdNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignDetailBySignIdNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAccessToken(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AccessToken = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetApplicationScene(v *QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.ApplicationScene = v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuditInfo(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuditInfo = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuditRemarkInfo(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuditRemarkInfo = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuditState(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuthorization(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.Authorization = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuthorizationEffTime(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuthorizationEffTime = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuthorizationLetter(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuthorizationLetter = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuthorizationLetterAuditPass(v bool) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuthorizationLetterAuditPass = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuthorizationLetterId(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuthorizationLetterId = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuthorizationLetterName(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuthorizationLetterName = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuthorizationLetterState(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuthorizationLetterState = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuthorizationLetterStatus(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuthorizationLetterStatus = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetAuthorizationSignScope(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.AuthorizationSignScope = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetEffectSceneType(v int32) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.EffectSceneType = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetEnableAuthorizationLetter(v bool) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.EnableAuthorizationLetter = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetExtendMessage(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.ExtendMessage = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetFileIds(v []*int64) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.FileIds = v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetFileUrlList(v []*string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.FileUrlList = v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetFrom(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.From = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetGmtCreateStr(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.GmtCreateStr = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetId(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.Id = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetIsAuthorizationLetterOCRComplete(v bool) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.IsAuthorizationLetterOCRComplete = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetIsAuthorizationLetterOCRDiff(v bool) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.IsAuthorizationLetterOCRDiff = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetIsSignScopeOCRDiff(v bool) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.IsSignScopeOCRDiff = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetList(v []*QuerySmsSignDetailBySignIdNewResponseBodyList) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetNeedAuthorized(v bool) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.NeedAuthorized = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetOpenTag(v bool) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.OpenTag = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetOrderId(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.OrderId = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetOrganizationCode(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.OrganizationCode = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetOssKeys(v []*string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.OssKeys = v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetProxyAuthorization(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.ProxyAuthorization = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetRemark(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.Remark = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetRequestId(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetSceneType(v int32) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.SceneType = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetServiceType(v int32) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.ServiceType = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetSignCode(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.SignCode = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetSignName(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.SignName = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetSignScopeOCR(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.SignScopeOCR = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBody) SetSignUpgrade(v string) *QuerySmsSignDetailBySignIdNewResponseBody {
	s.SignUpgrade = &v
	return s
}

type QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Id      *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene) GoString() string {
	return s.String()
}

func (s *QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene) SetContent(v string) *QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene {
	s.Content = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene) SetId(v int64) *QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene {
	s.Id = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene) SetName(v string) *QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene {
	s.Name = &v
	return s
}

type QuerySmsSignDetailBySignIdNewResponseBodyList struct {
	AuditState *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	SceneType  *int32  `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
}

func (s QuerySmsSignDetailBySignIdNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignDetailBySignIdNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsSignDetailBySignIdNewResponseBodyList) SetAuditState(v string) *QuerySmsSignDetailBySignIdNewResponseBodyList {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponseBodyList) SetSceneType(v int32) *QuerySmsSignDetailBySignIdNewResponseBodyList {
	s.SceneType = &v
	return s
}

type QuerySmsSignDetailBySignIdNewResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSignDetailBySignIdNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSignDetailBySignIdNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignDetailBySignIdNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSignDetailBySignIdNewResponse) SetHeaders(v map[string]*string) *QuerySmsSignDetailBySignIdNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponse) SetStatusCode(v int32) *QuerySmsSignDetailBySignIdNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSignDetailBySignIdNewResponse) SetBody(v *QuerySmsSignDetailBySignIdNewResponseBody) *QuerySmsSignDetailBySignIdNewResponse {
	s.Body = v
	return s
}

type QuerySmsSignLastRangeRequest struct {
	AuditState           *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	IsGlobeSign          *int32  `json:"IsGlobeSign,omitempty" xml:"IsGlobeSign,omitempty"`
	Limit                *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	NeedDefaultSign      *bool   `json:"NeedDefaultSign,omitempty" xml:"NeedDefaultSign,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
}

func (s QuerySmsSignLastRangeRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeRequest) SetAuditState(v string) *QuerySmsSignLastRangeRequest {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetBizType(v string) *QuerySmsSignLastRangeRequest {
	s.BizType = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetIsGlobeSign(v int32) *QuerySmsSignLastRangeRequest {
	s.IsGlobeSign = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetLimit(v int32) *QuerySmsSignLastRangeRequest {
	s.Limit = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetNeedDefaultSign(v bool) *QuerySmsSignLastRangeRequest {
	s.NeedDefaultSign = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetOwnerId(v int64) *QuerySmsSignLastRangeRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetPageNo(v int32) *QuerySmsSignLastRangeRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetPageSize(v int32) *QuerySmsSignLastRangeRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetProdCode(v string) *QuerySmsSignLastRangeRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetResourceOwnerAccount(v string) *QuerySmsSignLastRangeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetResourceOwnerId(v int64) *QuerySmsSignLastRangeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSignLastRangeRequest) SetSignName(v string) *QuerySmsSignLastRangeRequest {
	s.SignName = &v
	return s
}

type QuerySmsSignLastRangeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsSignLastRangeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeResponseBody) SetRequestId(v string) *QuerySmsSignLastRangeResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSignLastRangeResponseBody) SetCode(v string) *QuerySmsSignLastRangeResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsSignLastRangeResponseBody) SetData(v string) *QuerySmsSignLastRangeResponseBody {
	s.Data = &v
	return s
}

type QuerySmsSignLastRangeResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSignLastRangeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSignLastRangeResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeResponse) SetHeaders(v map[string]*string) *QuerySmsSignLastRangeResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSignLastRangeResponse) SetStatusCode(v int32) *QuerySmsSignLastRangeResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSignLastRangeResponse) SetBody(v *QuerySmsSignLastRangeResponseBody) *QuerySmsSignLastRangeResponse {
	s.Body = v
	return s
}

type QuerySmsSignLastRangeNewRequest struct {
	AuditState           *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	IsGlobeSign          *int32  `json:"IsGlobeSign,omitempty" xml:"IsGlobeSign,omitempty"`
	Limit                *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	NeedDefaultSign      *bool   `json:"NeedDefaultSign,omitempty" xml:"NeedDefaultSign,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageIndex            *int32  `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SceneType            *int32  `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
}

func (s QuerySmsSignLastRangeNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeNewRequest) SetAuditState(v string) *QuerySmsSignLastRangeNewRequest {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetIsGlobeSign(v int32) *QuerySmsSignLastRangeNewRequest {
	s.IsGlobeSign = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetLimit(v int32) *QuerySmsSignLastRangeNewRequest {
	s.Limit = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetNeedDefaultSign(v bool) *QuerySmsSignLastRangeNewRequest {
	s.NeedDefaultSign = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetOwnerId(v int64) *QuerySmsSignLastRangeNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetPageIndex(v int32) *QuerySmsSignLastRangeNewRequest {
	s.PageIndex = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetPageNo(v int32) *QuerySmsSignLastRangeNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetPageSize(v int32) *QuerySmsSignLastRangeNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetProdCode(v string) *QuerySmsSignLastRangeNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetResourceOwnerAccount(v string) *QuerySmsSignLastRangeNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetResourceOwnerId(v int64) *QuerySmsSignLastRangeNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetSceneType(v int32) *QuerySmsSignLastRangeNewRequest {
	s.SceneType = &v
	return s
}

func (s *QuerySmsSignLastRangeNewRequest) SetSignName(v string) *QuerySmsSignLastRangeNewRequest {
	s.SignName = &v
	return s
}

type QuerySmsSignLastRangeNewResponseBody struct {
	List      *QuerySmsSignLastRangeNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySmsSignLastRangeNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeNewResponseBody) SetList(v *QuerySmsSignLastRangeNewResponseBodyList) *QuerySmsSignLastRangeNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBody) SetRequestId(v string) *QuerySmsSignLastRangeNewResponseBody {
	s.RequestId = &v
	return s
}

type QuerySmsSignLastRangeNewResponseBodyList struct {
	SmsSign []*QuerySmsSignLastRangeNewResponseBodyListSmsSign `json:"SmsSign,omitempty" xml:"SmsSign,omitempty" type:"Repeated"`
}

func (s QuerySmsSignLastRangeNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeNewResponseBodyList) SetSmsSign(v []*QuerySmsSignLastRangeNewResponseBodyListSmsSign) *QuerySmsSignLastRangeNewResponseBodyList {
	s.SmsSign = v
	return s
}

type QuerySmsSignLastRangeNewResponseBodyListSmsSign struct {
	AuditInfo           *string                                                             `json:"AuditInfo,omitempty" xml:"AuditInfo,omitempty"`
	AuditRemarkInfo     *string                                                             `json:"AuditRemarkInfo,omitempty" xml:"AuditRemarkInfo,omitempty"`
	AuditState          *string                                                             `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	ExtendMessage       *string                                                             `json:"ExtendMessage,omitempty" xml:"ExtendMessage,omitempty"`
	FileIds             *QuerySmsSignLastRangeNewResponseBodyListSmsSignFileIds             `json:"FileIds,omitempty" xml:"FileIds,omitempty" type:"Struct"`
	FileUrlList         *QuerySmsSignLastRangeNewResponseBodyListSmsSignFileUrlList         `json:"FileUrlList,omitempty" xml:"FileUrlList,omitempty" type:"Struct"`
	GmtCreateStr        *string                                                             `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	Id                  *string                                                             `json:"Id,omitempty" xml:"Id,omitempty"`
	IsDefaultSign       *bool                                                               `json:"IsDefaultSign,omitempty" xml:"IsDefaultSign,omitempty"`
	OperateDateStr      *string                                                             `json:"OperateDateStr,omitempty" xml:"OperateDateStr,omitempty"`
	OrderId             *string                                                             `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	Remark              *string                                                             `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SceneType           *int32                                                              `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	ServiceType         *int32                                                              `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignName            *string                                                             `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SignSceneDetailList *QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailList `json:"SignSceneDetailList,omitempty" xml:"SignSceneDetailList,omitempty" type:"Struct"`
	SignType            *int32                                                              `json:"SignType,omitempty" xml:"SignType,omitempty"`
	SignUsageName       *string                                                             `json:"SignUsageName,omitempty" xml:"SignUsageName,omitempty"`
}

func (s QuerySmsSignLastRangeNewResponseBodyListSmsSign) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeNewResponseBodyListSmsSign) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetAuditInfo(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.AuditInfo = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetAuditRemarkInfo(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.AuditRemarkInfo = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetAuditState(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetExtendMessage(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.ExtendMessage = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetFileIds(v *QuerySmsSignLastRangeNewResponseBodyListSmsSignFileIds) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.FileIds = v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetFileUrlList(v *QuerySmsSignLastRangeNewResponseBodyListSmsSignFileUrlList) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.FileUrlList = v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetGmtCreateStr(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.GmtCreateStr = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetId(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.Id = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetIsDefaultSign(v bool) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.IsDefaultSign = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetOperateDateStr(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.OperateDateStr = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetOrderId(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.OrderId = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetRemark(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.Remark = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetSceneType(v int32) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.SceneType = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetServiceType(v int32) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.ServiceType = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetSignName(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.SignName = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetSignSceneDetailList(v *QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailList) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.SignSceneDetailList = v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetSignType(v int32) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.SignType = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSign) SetSignUsageName(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSign {
	s.SignUsageName = &v
	return s
}

type QuerySmsSignLastRangeNewResponseBodyListSmsSignFileIds struct {
	FileId []*int64 `json:"FileId,omitempty" xml:"FileId,omitempty" type:"Repeated"`
}

func (s QuerySmsSignLastRangeNewResponseBodyListSmsSignFileIds) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeNewResponseBodyListSmsSignFileIds) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSignFileIds) SetFileId(v []*int64) *QuerySmsSignLastRangeNewResponseBodyListSmsSignFileIds {
	s.FileId = v
	return s
}

type QuerySmsSignLastRangeNewResponseBodyListSmsSignFileUrlList struct {
	FileUrl []*string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty" type:"Repeated"`
}

func (s QuerySmsSignLastRangeNewResponseBodyListSmsSignFileUrlList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeNewResponseBodyListSmsSignFileUrlList) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSignFileUrlList) SetFileUrl(v []*string) *QuerySmsSignLastRangeNewResponseBodyListSmsSignFileUrlList {
	s.FileUrl = v
	return s
}

type QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailList struct {
	SignSceneDetail []*QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail `json:"SignSceneDetail,omitempty" xml:"SignSceneDetail,omitempty" type:"Repeated"`
}

func (s QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailList) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailList) SetSignSceneDetail(v []*QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail) *QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailList {
	s.SignSceneDetail = v
	return s
}

type QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail struct {
	AuditState *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	SceneType  *int32  `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
}

func (s QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail) SetAuditState(v string) *QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail) SetSceneType(v int32) *QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail {
	s.SceneType = &v
	return s
}

type QuerySmsSignLastRangeNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSignLastRangeNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSignLastRangeNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignLastRangeNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSignLastRangeNewResponse) SetHeaders(v map[string]*string) *QuerySmsSignLastRangeNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSignLastRangeNewResponse) SetStatusCode(v int32) *QuerySmsSignLastRangeNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSignLastRangeNewResponse) SetBody(v *QuerySmsSignLastRangeNewResponseBody) *QuerySmsSignLastRangeNewResponse {
	s.Body = v
	return s
}

type QuerySmsSignListRequest struct {
	AuditState           *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	IsGlobeSign          *int32  `json:"IsGlobeSign,omitempty" xml:"IsGlobeSign,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceType          *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
}

func (s QuerySmsSignListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListRequest) SetAuditState(v string) *QuerySmsSignListRequest {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignListRequest) SetBizType(v string) *QuerySmsSignListRequest {
	s.BizType = &v
	return s
}

func (s *QuerySmsSignListRequest) SetIsGlobeSign(v int32) *QuerySmsSignListRequest {
	s.IsGlobeSign = &v
	return s
}

func (s *QuerySmsSignListRequest) SetOwnerId(v int64) *QuerySmsSignListRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSignListRequest) SetPageNo(v int32) *QuerySmsSignListRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsSignListRequest) SetPageSize(v int32) *QuerySmsSignListRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsSignListRequest) SetProdCode(v string) *QuerySmsSignListRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSignListRequest) SetResourceOwnerAccount(v string) *QuerySmsSignListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSignListRequest) SetResourceOwnerId(v int64) *QuerySmsSignListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSignListRequest) SetServiceType(v string) *QuerySmsSignListRequest {
	s.ServiceType = &v
	return s
}

func (s *QuerySmsSignListRequest) SetSignName(v string) *QuerySmsSignListRequest {
	s.SignName = &v
	return s
}

type QuerySmsSignListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsSignListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListResponseBody) SetRequestId(v string) *QuerySmsSignListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSignListResponseBody) SetCode(v string) *QuerySmsSignListResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsSignListResponseBody) SetData(v string) *QuerySmsSignListResponseBody {
	s.Data = &v
	return s
}

type QuerySmsSignListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSignListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSignListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListResponse) SetHeaders(v map[string]*string) *QuerySmsSignListResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSignListResponse) SetStatusCode(v int32) *QuerySmsSignListResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSignListResponse) SetBody(v *QuerySmsSignListResponseBody) *QuerySmsSignListResponse {
	s.Body = v
	return s
}

type QuerySmsSignListNewRequest struct {
	AggregatedRegisterStatus *int32    `json:"AggregatedRegisterStatus,omitempty" xml:"AggregatedRegisterStatus,omitempty"`
	AuditState               *string   `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType                  *string   `json:"BizType,omitempty" xml:"BizType,omitempty"`
	IsGlobeSign              *int32    `json:"IsGlobeSign,omitempty" xml:"IsGlobeSign,omitempty"`
	OperatorCodes            []*string `json:"OperatorCodes,omitempty" xml:"OperatorCodes,omitempty" type:"Repeated"`
	OperatorRegisterStatus   *int32    `json:"OperatorRegisterStatus,omitempty" xml:"OperatorRegisterStatus,omitempty"`
	OwnerId                  *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo                   *int64    `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize                 *int64    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode                 *string   `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	QualificationName        *string   `json:"QualificationName,omitempty" xml:"QualificationName,omitempty"`
	RegisterResult           *int32    `json:"RegisterResult,omitempty" xml:"RegisterResult,omitempty"`
	ResourceOwnerAccount     *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceType              *string   `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignName                 *string   `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SignSource               *string   `json:"SignSource,omitempty" xml:"SignSource,omitempty"`
}

func (s QuerySmsSignListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListNewRequest) SetAggregatedRegisterStatus(v int32) *QuerySmsSignListNewRequest {
	s.AggregatedRegisterStatus = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetAuditState(v string) *QuerySmsSignListNewRequest {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetBizType(v string) *QuerySmsSignListNewRequest {
	s.BizType = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetIsGlobeSign(v int32) *QuerySmsSignListNewRequest {
	s.IsGlobeSign = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetOperatorCodes(v []*string) *QuerySmsSignListNewRequest {
	s.OperatorCodes = v
	return s
}

func (s *QuerySmsSignListNewRequest) SetOperatorRegisterStatus(v int32) *QuerySmsSignListNewRequest {
	s.OperatorRegisterStatus = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetOwnerId(v int64) *QuerySmsSignListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetPageNo(v int64) *QuerySmsSignListNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetPageSize(v int64) *QuerySmsSignListNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetProdCode(v string) *QuerySmsSignListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetQualificationName(v string) *QuerySmsSignListNewRequest {
	s.QualificationName = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetRegisterResult(v int32) *QuerySmsSignListNewRequest {
	s.RegisterResult = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetResourceOwnerAccount(v string) *QuerySmsSignListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetResourceOwnerId(v int64) *QuerySmsSignListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetServiceType(v string) *QuerySmsSignListNewRequest {
	s.ServiceType = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetSignName(v string) *QuerySmsSignListNewRequest {
	s.SignName = &v
	return s
}

func (s *QuerySmsSignListNewRequest) SetSignSource(v string) *QuerySmsSignListNewRequest {
	s.SignSource = &v
	return s
}

type QuerySmsSignListNewShrinkRequest struct {
	AggregatedRegisterStatus *int32  `json:"AggregatedRegisterStatus,omitempty" xml:"AggregatedRegisterStatus,omitempty"`
	AuditState               *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType                  *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	IsGlobeSign              *int32  `json:"IsGlobeSign,omitempty" xml:"IsGlobeSign,omitempty"`
	OperatorCodesShrink      *string `json:"OperatorCodes,omitempty" xml:"OperatorCodes,omitempty"`
	OperatorRegisterStatus   *int32  `json:"OperatorRegisterStatus,omitempty" xml:"OperatorRegisterStatus,omitempty"`
	OwnerId                  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo                   *int64  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize                 *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode                 *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	QualificationName        *string `json:"QualificationName,omitempty" xml:"QualificationName,omitempty"`
	RegisterResult           *int32  `json:"RegisterResult,omitempty" xml:"RegisterResult,omitempty"`
	ResourceOwnerAccount     *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceType              *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignName                 *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SignSource               *string `json:"SignSource,omitempty" xml:"SignSource,omitempty"`
}

func (s QuerySmsSignListNewShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListNewShrinkRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListNewShrinkRequest) SetAggregatedRegisterStatus(v int32) *QuerySmsSignListNewShrinkRequest {
	s.AggregatedRegisterStatus = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetAuditState(v string) *QuerySmsSignListNewShrinkRequest {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetBizType(v string) *QuerySmsSignListNewShrinkRequest {
	s.BizType = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetIsGlobeSign(v int32) *QuerySmsSignListNewShrinkRequest {
	s.IsGlobeSign = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetOperatorCodesShrink(v string) *QuerySmsSignListNewShrinkRequest {
	s.OperatorCodesShrink = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetOperatorRegisterStatus(v int32) *QuerySmsSignListNewShrinkRequest {
	s.OperatorRegisterStatus = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetOwnerId(v int64) *QuerySmsSignListNewShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetPageNo(v int64) *QuerySmsSignListNewShrinkRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetPageSize(v int64) *QuerySmsSignListNewShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetProdCode(v string) *QuerySmsSignListNewShrinkRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetQualificationName(v string) *QuerySmsSignListNewShrinkRequest {
	s.QualificationName = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetRegisterResult(v int32) *QuerySmsSignListNewShrinkRequest {
	s.RegisterResult = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetResourceOwnerAccount(v string) *QuerySmsSignListNewShrinkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetResourceOwnerId(v int64) *QuerySmsSignListNewShrinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetServiceType(v string) *QuerySmsSignListNewShrinkRequest {
	s.ServiceType = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetSignName(v string) *QuerySmsSignListNewShrinkRequest {
	s.SignName = &v
	return s
}

func (s *QuerySmsSignListNewShrinkRequest) SetSignSource(v string) *QuerySmsSignListNewShrinkRequest {
	s.SignSource = &v
	return s
}

type QuerySmsSignListNewResponseBody struct {
	PageNo    *int32                                  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmsSign   *QuerySmsSignListNewResponseBodySmsSign `json:"SmsSign,omitempty" xml:"SmsSign,omitempty" type:"Struct"`
	Total     *int64                                  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QuerySmsSignListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListNewResponseBody) SetPageNo(v int32) *QuerySmsSignListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QuerySmsSignListNewResponseBody) SetPageSize(v int32) *QuerySmsSignListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QuerySmsSignListNewResponseBody) SetRequestId(v string) *QuerySmsSignListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSignListNewResponseBody) SetSmsSign(v *QuerySmsSignListNewResponseBodySmsSign) *QuerySmsSignListNewResponseBody {
	s.SmsSign = v
	return s
}

func (s *QuerySmsSignListNewResponseBody) SetTotal(v int64) *QuerySmsSignListNewResponseBody {
	s.Total = &v
	return s
}

type QuerySmsSignListNewResponseBodySmsSign struct {
	SmsSign []*QuerySmsSignListNewResponseBodySmsSignSmsSign `json:"SmsSign,omitempty" xml:"SmsSign,omitempty" type:"Repeated"`
}

func (s QuerySmsSignListNewResponseBodySmsSign) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListNewResponseBodySmsSign) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListNewResponseBodySmsSign) SetSmsSign(v []*QuerySmsSignListNewResponseBodySmsSignSmsSign) *QuerySmsSignListNewResponseBodySmsSign {
	s.SmsSign = v
	return s
}

type QuerySmsSignListNewResponseBodySmsSignSmsSign struct {
	AggregatedRegisterStatus         *int32                                                            `json:"AggregatedRegisterStatus,omitempty" xml:"AggregatedRegisterStatus,omitempty"`
	ApplySource                      *string                                                           `json:"ApplySource,omitempty" xml:"ApplySource,omitempty"`
	AuditInfo                        *string                                                           `json:"AuditInfo,omitempty" xml:"AuditInfo,omitempty"`
	AuditRemarkInfo                  *string                                                           `json:"AuditRemarkInfo,omitempty" xml:"AuditRemarkInfo,omitempty"`
	AuditState                       *string                                                           `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	Authorization                    *string                                                           `json:"Authorization,omitempty" xml:"Authorization,omitempty"`
	AuthorizationEffTime             *string                                                           `json:"AuthorizationEffTime,omitempty" xml:"AuthorizationEffTime,omitempty"`
	AuthorizationLetter              *string                                                           `json:"AuthorizationLetter,omitempty" xml:"AuthorizationLetter,omitempty"`
	AuthorizationLetterAuditPass     *bool                                                             `json:"AuthorizationLetterAuditPass,omitempty" xml:"AuthorizationLetterAuditPass,omitempty"`
	AuthorizationLetterId            *int64                                                            `json:"AuthorizationLetterId,omitempty" xml:"AuthorizationLetterId,omitempty"`
	AuthorizationLetterName          *string                                                           `json:"AuthorizationLetterName,omitempty" xml:"AuthorizationLetterName,omitempty"`
	AuthorizationLetterStatus        *string                                                           `json:"AuthorizationLetterStatus,omitempty" xml:"AuthorizationLetterStatus,omitempty"`
	AuthorizationSignScope           *string                                                           `json:"AuthorizationSignScope,omitempty" xml:"AuthorizationSignScope,omitempty"`
	CanRegister                      *bool                                                             `json:"CanRegister,omitempty" xml:"CanRegister,omitempty"`
	EnableAuthorizationLetter        *bool                                                             `json:"EnableAuthorizationLetter,omitempty" xml:"EnableAuthorizationLetter,omitempty"`
	ExtendMessage                    *string                                                           `json:"ExtendMessage,omitempty" xml:"ExtendMessage,omitempty"`
	FileIds                          *QuerySmsSignListNewResponseBodySmsSignSmsSignFileIds             `json:"FileIds,omitempty" xml:"FileIds,omitempty" type:"Struct"`
	FileUrlList                      *QuerySmsSignListNewResponseBodySmsSignSmsSignFileUrlList         `json:"FileUrlList,omitempty" xml:"FileUrlList,omitempty" type:"Struct"`
	GmtCreateStr                     *string                                                           `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	Id                               *string                                                           `json:"Id,omitempty" xml:"Id,omitempty"`
	IsAuthorizationLetterOCRComplete *bool                                                             `json:"IsAuthorizationLetterOCRComplete,omitempty" xml:"IsAuthorizationLetterOCRComplete,omitempty"`
	IsAuthorizationLetterOCRDiff     *bool                                                             `json:"IsAuthorizationLetterOCRDiff,omitempty" xml:"IsAuthorizationLetterOCRDiff,omitempty"`
	IsDefaultSign                    *bool                                                             `json:"IsDefaultSign,omitempty" xml:"IsDefaultSign,omitempty"`
	IsSignScopeOCRDiff               *bool                                                             `json:"IsSignScopeOCRDiff,omitempty" xml:"IsSignScopeOCRDiff,omitempty"`
	MobileRegisterStatus             *int32                                                            `json:"MobileRegisterStatus,omitempty" xml:"MobileRegisterStatus,omitempty"`
	OperateDateStr                   *string                                                           `json:"OperateDateStr,omitempty" xml:"OperateDateStr,omitempty"`
	OrderCount                       *int64                                                            `json:"OrderCount,omitempty" xml:"OrderCount,omitempty"`
	OrderId                          *string                                                           `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrganizationCode                 *string                                                           `json:"OrganizationCode,omitempty" xml:"OrganizationCode,omitempty"`
	ProxyAuthorization               *string                                                           `json:"ProxyAuthorization,omitempty" xml:"ProxyAuthorization,omitempty"`
	QualificationId                  *int64                                                            `json:"QualificationId,omitempty" xml:"QualificationId,omitempty"`
	QualificationName                *string                                                           `json:"QualificationName,omitempty" xml:"QualificationName,omitempty"`
	QualificationState               *string                                                           `json:"QualificationState,omitempty" xml:"QualificationState,omitempty"`
	QualificationVersion             *int64                                                            `json:"QualificationVersion,omitempty" xml:"QualificationVersion,omitempty"`
	QualificationWorkOrderId         *int64                                                            `json:"QualificationWorkOrderId,omitempty" xml:"QualificationWorkOrderId,omitempty"`
	RegisterResult                   *int32                                                            `json:"RegisterResult,omitempty" xml:"RegisterResult,omitempty"`
	RegisterTime                     *int64                                                            `json:"RegisterTime,omitempty" xml:"RegisterTime,omitempty"`
	Remark                           *string                                                           `json:"Remark,omitempty" xml:"Remark,omitempty"`
	ResultReason                     *string                                                           `json:"ResultReason,omitempty" xml:"ResultReason,omitempty"`
	SceneType                        *int32                                                            `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	ServiceType                      *int32                                                            `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignCode                         *string                                                           `json:"SignCode,omitempty" xml:"SignCode,omitempty"`
	SignName                         *string                                                           `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SignSceneDetailList              *QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailList `json:"SignSceneDetailList,omitempty" xml:"SignSceneDetailList,omitempty" type:"Struct"`
	SignScopeOCR                     *string                                                           `json:"SignScopeOCR,omitempty" xml:"SignScopeOCR,omitempty"`
	SignSource                       *string                                                           `json:"SignSource,omitempty" xml:"SignSource,omitempty"`
	SignType                         *int32                                                            `json:"SignType,omitempty" xml:"SignType,omitempty"`
	TelecomRegisterStatus            *int32                                                            `json:"TelecomRegisterStatus,omitempty" xml:"TelecomRegisterStatus,omitempty"`
	UnicomRegisterStatus             *int32                                                            `json:"UnicomRegisterStatus,omitempty" xml:"UnicomRegisterStatus,omitempty"`
}

func (s QuerySmsSignListNewResponseBodySmsSignSmsSign) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListNewResponseBodySmsSignSmsSign) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAggregatedRegisterStatus(v int32) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AggregatedRegisterStatus = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetApplySource(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.ApplySource = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuditInfo(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AuditInfo = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuditRemarkInfo(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AuditRemarkInfo = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuditState(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuthorization(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.Authorization = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuthorizationEffTime(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AuthorizationEffTime = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuthorizationLetter(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AuthorizationLetter = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuthorizationLetterAuditPass(v bool) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AuthorizationLetterAuditPass = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuthorizationLetterId(v int64) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AuthorizationLetterId = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuthorizationLetterName(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AuthorizationLetterName = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuthorizationLetterStatus(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AuthorizationLetterStatus = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetAuthorizationSignScope(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.AuthorizationSignScope = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetCanRegister(v bool) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.CanRegister = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetEnableAuthorizationLetter(v bool) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.EnableAuthorizationLetter = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetExtendMessage(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.ExtendMessage = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetFileIds(v *QuerySmsSignListNewResponseBodySmsSignSmsSignFileIds) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.FileIds = v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetFileUrlList(v *QuerySmsSignListNewResponseBodySmsSignSmsSignFileUrlList) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.FileUrlList = v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetGmtCreateStr(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.GmtCreateStr = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetId(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.Id = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetIsAuthorizationLetterOCRComplete(v bool) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.IsAuthorizationLetterOCRComplete = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetIsAuthorizationLetterOCRDiff(v bool) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.IsAuthorizationLetterOCRDiff = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetIsDefaultSign(v bool) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.IsDefaultSign = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetIsSignScopeOCRDiff(v bool) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.IsSignScopeOCRDiff = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetMobileRegisterStatus(v int32) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.MobileRegisterStatus = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetOperateDateStr(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.OperateDateStr = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetOrderCount(v int64) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.OrderCount = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetOrderId(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.OrderId = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetOrganizationCode(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.OrganizationCode = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetProxyAuthorization(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.ProxyAuthorization = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetQualificationId(v int64) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.QualificationId = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetQualificationName(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.QualificationName = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetQualificationState(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.QualificationState = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetQualificationVersion(v int64) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.QualificationVersion = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetQualificationWorkOrderId(v int64) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.QualificationWorkOrderId = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetRegisterResult(v int32) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.RegisterResult = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetRegisterTime(v int64) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.RegisterTime = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetRemark(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.Remark = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetResultReason(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.ResultReason = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetSceneType(v int32) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.SceneType = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetServiceType(v int32) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.ServiceType = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetSignCode(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.SignCode = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetSignName(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.SignName = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetSignSceneDetailList(v *QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailList) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.SignSceneDetailList = v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetSignScopeOCR(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.SignScopeOCR = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetSignSource(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.SignSource = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetSignType(v int32) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.SignType = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetTelecomRegisterStatus(v int32) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.TelecomRegisterStatus = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSign) SetUnicomRegisterStatus(v int32) *QuerySmsSignListNewResponseBodySmsSignSmsSign {
	s.UnicomRegisterStatus = &v
	return s
}

type QuerySmsSignListNewResponseBodySmsSignSmsSignFileIds struct {
	FileId []*int64 `json:"FileId,omitempty" xml:"FileId,omitempty" type:"Repeated"`
}

func (s QuerySmsSignListNewResponseBodySmsSignSmsSignFileIds) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListNewResponseBodySmsSignSmsSignFileIds) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSignFileIds) SetFileId(v []*int64) *QuerySmsSignListNewResponseBodySmsSignSmsSignFileIds {
	s.FileId = v
	return s
}

type QuerySmsSignListNewResponseBodySmsSignSmsSignFileUrlList struct {
	FileUrl []*string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty" type:"Repeated"`
}

func (s QuerySmsSignListNewResponseBodySmsSignSmsSignFileUrlList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListNewResponseBodySmsSignSmsSignFileUrlList) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSignFileUrlList) SetFileUrl(v []*string) *QuerySmsSignListNewResponseBodySmsSignSmsSignFileUrlList {
	s.FileUrl = v
	return s
}

type QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailList struct {
	SignSceneDetail []*QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail `json:"SignSceneDetail,omitempty" xml:"SignSceneDetail,omitempty" type:"Repeated"`
}

func (s QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailList) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailList) SetSignSceneDetail(v []*QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail) *QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailList {
	s.SignSceneDetail = v
	return s
}

type QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail struct {
	AuditState *string `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	SceneType  *int32  `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
}

func (s QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail) SetAuditState(v string) *QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail {
	s.AuditState = &v
	return s
}

func (s *QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail) SetSceneType(v int32) *QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail {
	s.SceneType = &v
	return s
}

type QuerySmsSignListNewResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSignListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSignListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignListNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSignListNewResponse) SetHeaders(v map[string]*string) *QuerySmsSignListNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSignListNewResponse) SetStatusCode(v int32) *QuerySmsSignListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSignListNewResponse) SetBody(v *QuerySmsSignListNewResponseBody) *QuerySmsSignListNewResponse {
	s.Body = v
	return s
}

type QuerySmsSignValidRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceType          *int32  `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
}

func (s QuerySmsSignValidRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignValidRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSignValidRequest) SetOwnerId(v int64) *QuerySmsSignValidRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSignValidRequest) SetProdCode(v string) *QuerySmsSignValidRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSignValidRequest) SetResourceOwnerAccount(v string) *QuerySmsSignValidRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSignValidRequest) SetResourceOwnerId(v int64) *QuerySmsSignValidRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSignValidRequest) SetServiceType(v int32) *QuerySmsSignValidRequest {
	s.ServiceType = &v
	return s
}

func (s *QuerySmsSignValidRequest) SetSignName(v string) *QuerySmsSignValidRequest {
	s.SignName = &v
	return s
}

type QuerySmsSignValidResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsSignValidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignValidResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSignValidResponseBody) SetRequestId(v string) *QuerySmsSignValidResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsSignValidResponseBody) SetCode(v string) *QuerySmsSignValidResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsSignValidResponseBody) SetData(v string) *QuerySmsSignValidResponseBody {
	s.Data = &v
	return s
}

type QuerySmsSignValidResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSignValidResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSignValidResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignValidResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSignValidResponse) SetHeaders(v map[string]*string) *QuerySmsSignValidResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSignValidResponse) SetStatusCode(v int32) *QuerySmsSignValidResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSignValidResponse) SetBody(v *QuerySmsSignValidResponseBody) *QuerySmsSignValidResponse {
	s.Body = v
	return s
}

type QuerySmsSignValidNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceType          *int32  `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SignUpgrade          *bool   `json:"SignUpgrade,omitempty" xml:"SignUpgrade,omitempty"`
}

func (s QuerySmsSignValidNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignValidNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsSignValidNewRequest) SetOwnerId(v int64) *QuerySmsSignValidNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsSignValidNewRequest) SetProdCode(v string) *QuerySmsSignValidNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsSignValidNewRequest) SetResourceOwnerAccount(v string) *QuerySmsSignValidNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsSignValidNewRequest) SetResourceOwnerId(v int64) *QuerySmsSignValidNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsSignValidNewRequest) SetServiceType(v int32) *QuerySmsSignValidNewRequest {
	s.ServiceType = &v
	return s
}

func (s *QuerySmsSignValidNewRequest) SetSignName(v string) *QuerySmsSignValidNewRequest {
	s.SignName = &v
	return s
}

func (s *QuerySmsSignValidNewRequest) SetSignUpgrade(v bool) *QuerySmsSignValidNewRequest {
	s.SignUpgrade = &v
	return s
}

type QuerySmsSignValidNewResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Msg       *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySmsSignValidNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignValidNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsSignValidNewResponseBody) SetCode(v string) *QuerySmsSignValidNewResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsSignValidNewResponseBody) SetMsg(v string) *QuerySmsSignValidNewResponseBody {
	s.Msg = &v
	return s
}

func (s *QuerySmsSignValidNewResponseBody) SetRequestId(v string) *QuerySmsSignValidNewResponseBody {
	s.RequestId = &v
	return s
}

type QuerySmsSignValidNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsSignValidNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsSignValidNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsSignValidNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsSignValidNewResponse) SetHeaders(v map[string]*string) *QuerySmsSignValidNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsSignValidNewResponse) SetStatusCode(v int32) *QuerySmsSignValidNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsSignValidNewResponse) SetBody(v *QuerySmsSignValidNewResponseBody) *QuerySmsSignValidNewResponse {
	s.Body = v
	return s
}

type QuerySmsStatisticsRequest struct {
	// This parameter is required.
	EndDate              *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	// This parameter is required.
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	Template  *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s QuerySmsStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsRequest) SetEndDate(v string) *QuerySmsStatisticsRequest {
	s.EndDate = &v
	return s
}

func (s *QuerySmsStatisticsRequest) SetOwnerId(v int64) *QuerySmsStatisticsRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsStatisticsRequest) SetPageNo(v int32) *QuerySmsStatisticsRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsStatisticsRequest) SetPageSize(v int32) *QuerySmsStatisticsRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsStatisticsRequest) SetProdCode(v string) *QuerySmsStatisticsRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsStatisticsRequest) SetProdId(v string) *QuerySmsStatisticsRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySmsStatisticsRequest) SetResourceOwnerAccount(v string) *QuerySmsStatisticsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsStatisticsRequest) SetResourceOwnerId(v int64) *QuerySmsStatisticsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsStatisticsRequest) SetSignName(v string) *QuerySmsStatisticsRequest {
	s.SignName = &v
	return s
}

func (s *QuerySmsStatisticsRequest) SetStartDate(v string) *QuerySmsStatisticsRequest {
	s.StartDate = &v
	return s
}

func (s *QuerySmsStatisticsRequest) SetTemplate(v string) *QuerySmsStatisticsRequest {
	s.Template = &v
	return s
}

type QuerySmsStatisticsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsResponseBody) SetRequestId(v string) *QuerySmsStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsStatisticsResponseBody) SetCode(v string) *QuerySmsStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsStatisticsResponseBody) SetData(v string) *QuerySmsStatisticsResponseBody {
	s.Data = &v
	return s
}

type QuerySmsStatisticsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsResponse) SetHeaders(v map[string]*string) *QuerySmsStatisticsResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsStatisticsResponse) SetStatusCode(v int32) *QuerySmsStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsStatisticsResponse) SetBody(v *QuerySmsStatisticsResponseBody) *QuerySmsStatisticsResponse {
	s.Body = v
	return s
}

type QuerySmsStatisticsByTemplateRequest struct {
	// This parameter is required.
	EndDate              *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	Template  *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s QuerySmsStatisticsByTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsByTemplateRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsByTemplateRequest) SetEndDate(v string) *QuerySmsStatisticsByTemplateRequest {
	s.EndDate = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateRequest) SetOwnerId(v int64) *QuerySmsStatisticsByTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateRequest) SetProdCode(v string) *QuerySmsStatisticsByTemplateRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateRequest) SetProdId(v string) *QuerySmsStatisticsByTemplateRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateRequest) SetResourceOwnerAccount(v string) *QuerySmsStatisticsByTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateRequest) SetResourceOwnerId(v int64) *QuerySmsStatisticsByTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateRequest) SetStartDate(v string) *QuerySmsStatisticsByTemplateRequest {
	s.StartDate = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateRequest) SetTemplate(v string) *QuerySmsStatisticsByTemplateRequest {
	s.Template = &v
	return s
}

type QuerySmsStatisticsByTemplateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsStatisticsByTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsByTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsByTemplateResponseBody) SetRequestId(v string) *QuerySmsStatisticsByTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateResponseBody) SetCode(v string) *QuerySmsStatisticsByTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateResponseBody) SetData(v string) *QuerySmsStatisticsByTemplateResponseBody {
	s.Data = &v
	return s
}

type QuerySmsStatisticsByTemplateResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsStatisticsByTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsStatisticsByTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsByTemplateResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsByTemplateResponse) SetHeaders(v map[string]*string) *QuerySmsStatisticsByTemplateResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsStatisticsByTemplateResponse) SetStatusCode(v int32) *QuerySmsStatisticsByTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateResponse) SetBody(v *QuerySmsStatisticsByTemplateResponseBody) *QuerySmsStatisticsByTemplateResponse {
	s.Body = v
	return s
}

type QuerySmsStatisticsByTemplateNewRequest struct {
	// This parameter is required.
	EndDate              *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	Template  *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s QuerySmsStatisticsByTemplateNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsByTemplateNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsByTemplateNewRequest) SetEndDate(v string) *QuerySmsStatisticsByTemplateNewRequest {
	s.EndDate = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewRequest) SetOwnerId(v int64) *QuerySmsStatisticsByTemplateNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewRequest) SetProdCode(v string) *QuerySmsStatisticsByTemplateNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewRequest) SetProdId(v string) *QuerySmsStatisticsByTemplateNewRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewRequest) SetResourceOwnerAccount(v string) *QuerySmsStatisticsByTemplateNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewRequest) SetResourceOwnerId(v int64) *QuerySmsStatisticsByTemplateNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewRequest) SetStartDate(v string) *QuerySmsStatisticsByTemplateNewRequest {
	s.StartDate = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewRequest) SetTemplate(v string) *QuerySmsStatisticsByTemplateNewRequest {
	s.Template = &v
	return s
}

type QuerySmsStatisticsByTemplateNewResponseBody struct {
	List      *QuerySmsStatisticsByTemplateNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNo    *int32                                           `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                           `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QuerySmsStatisticsByTemplateNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsByTemplateNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsByTemplateNewResponseBody) SetList(v *QuerySmsStatisticsByTemplateNewResponseBodyList) *QuerySmsStatisticsByTemplateNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBody) SetPageNo(v int32) *QuerySmsStatisticsByTemplateNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBody) SetPageSize(v int32) *QuerySmsStatisticsByTemplateNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBody) SetRequestId(v string) *QuerySmsStatisticsByTemplateNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBody) SetTotal(v int64) *QuerySmsStatisticsByTemplateNewResponseBody {
	s.Total = &v
	return s
}

type QuerySmsStatisticsByTemplateNewResponseBodyList struct {
	SmsStatisticsResponse []*QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse `json:"SmsStatisticsResponse,omitempty" xml:"SmsStatisticsResponse,omitempty" type:"Repeated"`
}

func (s QuerySmsStatisticsByTemplateNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsByTemplateNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyList) SetSmsStatisticsResponse(v []*QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) *QuerySmsStatisticsByTemplateNewResponseBodyList {
	s.SmsStatisticsResponse = v
	return s
}

type QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse struct {
	DetailStsDate    *string `json:"DetailStsDate,omitempty" xml:"DetailStsDate,omitempty"`
	DownloadUrl      *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	SendSuccessRate  *string `json:"SendSuccessRate,omitempty" xml:"SendSuccessRate,omitempty"`
	SendTotal        *int64  `json:"SendTotal,omitempty" xml:"SendTotal,omitempty"`
	SendTotalFail    *int64  `json:"SendTotalFail,omitempty" xml:"SendTotalFail,omitempty"`
	SendTotalSuccess *int64  `json:"SendTotalSuccess,omitempty" xml:"SendTotalSuccess,omitempty"`
	SendTotalUnknown *int64  `json:"SendTotalUnknown,omitempty" xml:"SendTotalUnknown,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TemplateCode     *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateName     *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetDetailStsDate(v string) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.DetailStsDate = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetDownloadUrl(v string) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.DownloadUrl = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetGmtCreate(v string) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.GmtCreate = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetGmtModified(v string) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.GmtModified = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetId(v int64) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.Id = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetSendSuccessRate(v string) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.SendSuccessRate = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetSendTotal(v int64) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.SendTotal = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetSendTotalFail(v int64) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.SendTotalFail = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetSendTotalSuccess(v int64) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.SendTotalSuccess = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetSendTotalUnknown(v int64) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.SendTotalUnknown = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetStatus(v string) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.Status = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetTemplateCode(v string) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.TemplateCode = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse) SetTemplateName(v string) *QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse {
	s.TemplateName = &v
	return s
}

type QuerySmsStatisticsByTemplateNewResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsStatisticsByTemplateNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsStatisticsByTemplateNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsByTemplateNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsByTemplateNewResponse) SetHeaders(v map[string]*string) *QuerySmsStatisticsByTemplateNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponse) SetStatusCode(v int32) *QuerySmsStatisticsByTemplateNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsStatisticsByTemplateNewResponse) SetBody(v *QuerySmsStatisticsByTemplateNewResponseBody) *QuerySmsStatisticsByTemplateNewResponse {
	s.Body = v
	return s
}

type QuerySmsStatisticsNewRequest struct {
	// This parameter is required.
	EndDate              *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *int64  `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	// This parameter is required.
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	Template  *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s QuerySmsStatisticsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsNewRequest) SetEndDate(v string) *QuerySmsStatisticsNewRequest {
	s.EndDate = &v
	return s
}

func (s *QuerySmsStatisticsNewRequest) SetOwnerId(v int64) *QuerySmsStatisticsNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsStatisticsNewRequest) SetPageNo(v int32) *QuerySmsStatisticsNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsStatisticsNewRequest) SetPageSize(v int32) *QuerySmsStatisticsNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsStatisticsNewRequest) SetProdCode(v string) *QuerySmsStatisticsNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsStatisticsNewRequest) SetProdId(v int64) *QuerySmsStatisticsNewRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySmsStatisticsNewRequest) SetResourceOwnerAccount(v string) *QuerySmsStatisticsNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsStatisticsNewRequest) SetResourceOwnerId(v int64) *QuerySmsStatisticsNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsStatisticsNewRequest) SetSignName(v string) *QuerySmsStatisticsNewRequest {
	s.SignName = &v
	return s
}

func (s *QuerySmsStatisticsNewRequest) SetStartDate(v string) *QuerySmsStatisticsNewRequest {
	s.StartDate = &v
	return s
}

func (s *QuerySmsStatisticsNewRequest) SetTemplate(v string) *QuerySmsStatisticsNewRequest {
	s.Template = &v
	return s
}

type QuerySmsStatisticsNewResponseBody struct {
	List      []*QuerySmsStatisticsNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySmsStatisticsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsNewResponseBody) SetList(v []*QuerySmsStatisticsNewResponseBodyList) *QuerySmsStatisticsNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsStatisticsNewResponseBody) SetRequestId(v string) *QuerySmsStatisticsNewResponseBody {
	s.RequestId = &v
	return s
}

type QuerySmsStatisticsNewResponseBodyList struct {
	BizType          *int32  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	DetailStsDate    *string `json:"DetailStsDate,omitempty" xml:"DetailStsDate,omitempty"`
	DownloadUrl      *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	GmtCreate        *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id               *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	SendSuccessRate  *string `json:"SendSuccessRate,omitempty" xml:"SendSuccessRate,omitempty"`
	SendTotal        *int64  `json:"SendTotal,omitempty" xml:"SendTotal,omitempty"`
	SendTotalFail    *int64  `json:"SendTotalFail,omitempty" xml:"SendTotalFail,omitempty"`
	SendTotalSuccess *int64  `json:"SendTotalSuccess,omitempty" xml:"SendTotalSuccess,omitempty"`
	SendTotalUnknown *int64  `json:"SendTotalUnknown,omitempty" xml:"SendTotalUnknown,omitempty"`
	SignName         *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TemplateCode     *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateName     *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QuerySmsStatisticsNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetBizType(v int32) *QuerySmsStatisticsNewResponseBodyList {
	s.BizType = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetDetailStsDate(v string) *QuerySmsStatisticsNewResponseBodyList {
	s.DetailStsDate = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetDownloadUrl(v string) *QuerySmsStatisticsNewResponseBodyList {
	s.DownloadUrl = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetGmtCreate(v string) *QuerySmsStatisticsNewResponseBodyList {
	s.GmtCreate = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetGmtModified(v string) *QuerySmsStatisticsNewResponseBodyList {
	s.GmtModified = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetId(v int64) *QuerySmsStatisticsNewResponseBodyList {
	s.Id = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetSendSuccessRate(v string) *QuerySmsStatisticsNewResponseBodyList {
	s.SendSuccessRate = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetSendTotal(v int64) *QuerySmsStatisticsNewResponseBodyList {
	s.SendTotal = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetSendTotalFail(v int64) *QuerySmsStatisticsNewResponseBodyList {
	s.SendTotalFail = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetSendTotalSuccess(v int64) *QuerySmsStatisticsNewResponseBodyList {
	s.SendTotalSuccess = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetSendTotalUnknown(v int64) *QuerySmsStatisticsNewResponseBodyList {
	s.SendTotalUnknown = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetSignName(v string) *QuerySmsStatisticsNewResponseBodyList {
	s.SignName = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetStatus(v string) *QuerySmsStatisticsNewResponseBodyList {
	s.Status = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetTemplateCode(v string) *QuerySmsStatisticsNewResponseBodyList {
	s.TemplateCode = &v
	return s
}

func (s *QuerySmsStatisticsNewResponseBodyList) SetTemplateName(v string) *QuerySmsStatisticsNewResponseBodyList {
	s.TemplateName = &v
	return s
}

type QuerySmsStatisticsNewResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsStatisticsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsStatisticsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsNewResponse) SetHeaders(v map[string]*string) *QuerySmsStatisticsNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsStatisticsNewResponse) SetStatusCode(v int32) *QuerySmsStatisticsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsStatisticsNewResponse) SetBody(v *QuerySmsStatisticsNewResponseBody) *QuerySmsStatisticsNewResponse {
	s.Body = v
	return s
}

type QuerySmsStatisticsUrlRequest struct {
	// This parameter is required.
	EndDate              *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	// This parameter is required.
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	Template  *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s QuerySmsStatisticsUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsUrlRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsUrlRequest) SetEndDate(v string) *QuerySmsStatisticsUrlRequest {
	s.EndDate = &v
	return s
}

func (s *QuerySmsStatisticsUrlRequest) SetOwnerId(v int64) *QuerySmsStatisticsUrlRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsStatisticsUrlRequest) SetProdCode(v string) *QuerySmsStatisticsUrlRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsStatisticsUrlRequest) SetProdId(v string) *QuerySmsStatisticsUrlRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySmsStatisticsUrlRequest) SetResourceOwnerAccount(v string) *QuerySmsStatisticsUrlRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsStatisticsUrlRequest) SetResourceOwnerId(v int64) *QuerySmsStatisticsUrlRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsStatisticsUrlRequest) SetSignName(v string) *QuerySmsStatisticsUrlRequest {
	s.SignName = &v
	return s
}

func (s *QuerySmsStatisticsUrlRequest) SetStartDate(v string) *QuerySmsStatisticsUrlRequest {
	s.StartDate = &v
	return s
}

func (s *QuerySmsStatisticsUrlRequest) SetTemplate(v string) *QuerySmsStatisticsUrlRequest {
	s.Template = &v
	return s
}

type QuerySmsStatisticsUrlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsStatisticsUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsUrlResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsUrlResponseBody) SetRequestId(v string) *QuerySmsStatisticsUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsStatisticsUrlResponseBody) SetCode(v string) *QuerySmsStatisticsUrlResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsStatisticsUrlResponseBody) SetData(v string) *QuerySmsStatisticsUrlResponseBody {
	s.Data = &v
	return s
}

type QuerySmsStatisticsUrlResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsStatisticsUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsStatisticsUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsUrlResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsUrlResponse) SetHeaders(v map[string]*string) *QuerySmsStatisticsUrlResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsStatisticsUrlResponse) SetStatusCode(v int32) *QuerySmsStatisticsUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsStatisticsUrlResponse) SetBody(v *QuerySmsStatisticsUrlResponseBody) *QuerySmsStatisticsUrlResponse {
	s.Body = v
	return s
}

type QuerySmsStatisticsUrlNewRequest struct {
	// This parameter is required.
	EndDate              *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *int64  `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	// This parameter is required.
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	Template  *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s QuerySmsStatisticsUrlNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsUrlNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsUrlNewRequest) SetEndDate(v string) *QuerySmsStatisticsUrlNewRequest {
	s.EndDate = &v
	return s
}

func (s *QuerySmsStatisticsUrlNewRequest) SetOwnerId(v int64) *QuerySmsStatisticsUrlNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsStatisticsUrlNewRequest) SetProdCode(v string) *QuerySmsStatisticsUrlNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsStatisticsUrlNewRequest) SetProdId(v int64) *QuerySmsStatisticsUrlNewRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySmsStatisticsUrlNewRequest) SetResourceOwnerAccount(v string) *QuerySmsStatisticsUrlNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsStatisticsUrlNewRequest) SetResourceOwnerId(v int64) *QuerySmsStatisticsUrlNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsStatisticsUrlNewRequest) SetSignName(v string) *QuerySmsStatisticsUrlNewRequest {
	s.SignName = &v
	return s
}

func (s *QuerySmsStatisticsUrlNewRequest) SetStartDate(v string) *QuerySmsStatisticsUrlNewRequest {
	s.StartDate = &v
	return s
}

func (s *QuerySmsStatisticsUrlNewRequest) SetTemplate(v string) *QuerySmsStatisticsUrlNewRequest {
	s.Template = &v
	return s
}

type QuerySmsStatisticsUrlNewResponseBody struct {
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySmsStatisticsUrlNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsUrlNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsUrlNewResponseBody) SetDownloadUrl(v string) *QuerySmsStatisticsUrlNewResponseBody {
	s.DownloadUrl = &v
	return s
}

func (s *QuerySmsStatisticsUrlNewResponseBody) SetRequestId(v string) *QuerySmsStatisticsUrlNewResponseBody {
	s.RequestId = &v
	return s
}

type QuerySmsStatisticsUrlNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsStatisticsUrlNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsStatisticsUrlNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStatisticsUrlNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsStatisticsUrlNewResponse) SetHeaders(v map[string]*string) *QuerySmsStatisticsUrlNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsStatisticsUrlNewResponse) SetStatusCode(v int32) *QuerySmsStatisticsUrlNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsStatisticsUrlNewResponse) SetBody(v *QuerySmsStatisticsUrlNewResponseBody) *QuerySmsStatisticsUrlNewResponse {
	s.Body = v
	return s
}

type QuerySmsStepRequest struct {
	BillCycle            *string `json:"BillCycle,omitempty" xml:"BillCycle,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsStepRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStepRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsStepRequest) SetBillCycle(v string) *QuerySmsStepRequest {
	s.BillCycle = &v
	return s
}

func (s *QuerySmsStepRequest) SetOwnerId(v int64) *QuerySmsStepRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsStepRequest) SetProdCode(v string) *QuerySmsStepRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsStepRequest) SetResourceOwnerAccount(v string) *QuerySmsStepRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsStepRequest) SetResourceOwnerId(v int64) *QuerySmsStepRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsStepResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsStepResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStepResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsStepResponseBody) SetRequestId(v string) *QuerySmsStepResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsStepResponseBody) SetCode(v string) *QuerySmsStepResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsStepResponseBody) SetData(v string) *QuerySmsStepResponseBody {
	s.Data = &v
	return s
}

type QuerySmsStepResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsStepResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsStepResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsStepResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsStepResponse) SetHeaders(v map[string]*string) *QuerySmsStepResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsStepResponse) SetStatusCode(v int32) *QuerySmsStepResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsStepResponse) SetBody(v *QuerySmsStepResponseBody) *QuerySmsStepResponse {
	s.Body = v
	return s
}

type QuerySmsTemplateByCodeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s QuerySmsTemplateByCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeRequest) SetOwnerId(v int64) *QuerySmsTemplateByCodeRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsTemplateByCodeRequest) SetProdCode(v string) *QuerySmsTemplateByCodeRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsTemplateByCodeRequest) SetResourceOwnerAccount(v string) *QuerySmsTemplateByCodeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsTemplateByCodeRequest) SetResourceOwnerId(v int64) *QuerySmsTemplateByCodeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsTemplateByCodeRequest) SetTemplateCode(v string) *QuerySmsTemplateByCodeRequest {
	s.TemplateCode = &v
	return s
}

type QuerySmsTemplateByCodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsTemplateByCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeResponseBody) SetRequestId(v string) *QuerySmsTemplateByCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsTemplateByCodeResponseBody) SetCode(v string) *QuerySmsTemplateByCodeResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsTemplateByCodeResponseBody) SetData(v string) *QuerySmsTemplateByCodeResponseBody {
	s.Data = &v
	return s
}

type QuerySmsTemplateByCodeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsTemplateByCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsTemplateByCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeResponse) SetHeaders(v map[string]*string) *QuerySmsTemplateByCodeResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsTemplateByCodeResponse) SetStatusCode(v int32) *QuerySmsTemplateByCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsTemplateByCodeResponse) SetBody(v *QuerySmsTemplateByCodeResponseBody) *QuerySmsTemplateByCodeResponse {
	s.Body = v
	return s
}

type QuerySmsTemplateByCodeNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s QuerySmsTemplateByCodeNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewRequest) SetOwnerId(v int64) *QuerySmsTemplateByCodeNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewRequest) SetProdCode(v string) *QuerySmsTemplateByCodeNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewRequest) SetResourceOwnerAccount(v string) *QuerySmsTemplateByCodeNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewRequest) SetResourceOwnerId(v int64) *QuerySmsTemplateByCodeNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewRequest) SetTemplateCode(v string) *QuerySmsTemplateByCodeNewRequest {
	s.TemplateCode = &v
	return s
}

type QuerySmsTemplateByCodeNewResponseBody struct {
	AccessToken            *string                                                `json:"AccessToken,omitempty" xml:"AccessToken,omitempty"`
	ApplicationScene       *QuerySmsTemplateByCodeNewResponseBodyApplicationScene `json:"ApplicationScene,omitempty" xml:"ApplicationScene,omitempty" type:"Struct"`
	AuditInfo              *string                                                `json:"AuditInfo,omitempty" xml:"AuditInfo,omitempty"`
	AuditRemarkInfo        *string                                                `json:"AuditRemarkInfo,omitempty" xml:"AuditRemarkInfo,omitempty"`
	BizType                *string                                                `json:"BizType,omitempty" xml:"BizType,omitempty"`
	FileIds                *QuerySmsTemplateByCodeNewResponseBodyFileIds          `json:"FileIds,omitempty" xml:"FileIds,omitempty" type:"Struct"`
	FileUrlList            *QuerySmsTemplateByCodeNewResponseBodyFileUrlList      `json:"FileUrlList,omitempty" xml:"FileUrlList,omitempty" type:"Struct"`
	From                   *string                                                `json:"From,omitempty" xml:"From,omitempty"`
	GmtCreateStr           *string                                                `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	IntlType               *int32                                                 `json:"IntlType,omitempty" xml:"IntlType,omitempty"`
	MoreDataFileIds        *QuerySmsTemplateByCodeNewResponseBodyMoreDataFileIds  `json:"MoreDataFileIds,omitempty" xml:"MoreDataFileIds,omitempty" type:"Struct"`
	MoreDataFileUrls       *QuerySmsTemplateByCodeNewResponseBodyMoreDataFileUrls `json:"MoreDataFileUrls,omitempty" xml:"MoreDataFileUrls,omitempty" type:"Struct"`
	MoreDataOssKeys        *QuerySmsTemplateByCodeNewResponseBodyMoreDataOssKeys  `json:"MoreDataOssKeys,omitempty" xml:"MoreDataOssKeys,omitempty" type:"Struct"`
	NeedAuthorized         *bool                                                  `json:"NeedAuthorized,omitempty" xml:"NeedAuthorized,omitempty"`
	OpenTag                *bool                                                  `json:"OpenTag,omitempty" xml:"OpenTag,omitempty"`
	OrderId                *string                                                `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OssKeys                *QuerySmsTemplateByCodeNewResponseBodyOssKeys          `json:"OssKeys,omitempty" xml:"OssKeys,omitempty" type:"Struct"`
	ProductUrl             *string                                                `json:"ProductUrl,omitempty" xml:"ProductUrl,omitempty"`
	RelatedSignName        *string                                                `json:"RelatedSignName,omitempty" xml:"RelatedSignName,omitempty"`
	Remark                 *string                                                `json:"Remark,omitempty" xml:"Remark,omitempty"`
	RequestId              *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RmdTemplateId          *int32                                                 `json:"RmdTemplateId,omitempty" xml:"RmdTemplateId,omitempty"`
	RmdTemplateVariableNum *int32                                                 `json:"RmdTemplateVariableNum,omitempty" xml:"RmdTemplateVariableNum,omitempty"`
	SignName               *string                                                `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SignType               *int32                                                 `json:"SignType,omitempty" xml:"SignType,omitempty"`
	SmsContent             *string                                                `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	Tags                   *QuerySmsTemplateByCodeNewResponseBodyTags             `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	TemplateCode           *string                                                `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateName           *string                                                `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateRule           *string                                                `json:"TemplateRule,omitempty" xml:"TemplateRule,omitempty"`
}

func (s QuerySmsTemplateByCodeNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetAccessToken(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.AccessToken = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetApplicationScene(v *QuerySmsTemplateByCodeNewResponseBodyApplicationScene) *QuerySmsTemplateByCodeNewResponseBody {
	s.ApplicationScene = v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetAuditInfo(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.AuditInfo = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetAuditRemarkInfo(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.AuditRemarkInfo = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetBizType(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.BizType = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetFileIds(v *QuerySmsTemplateByCodeNewResponseBodyFileIds) *QuerySmsTemplateByCodeNewResponseBody {
	s.FileIds = v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetFileUrlList(v *QuerySmsTemplateByCodeNewResponseBodyFileUrlList) *QuerySmsTemplateByCodeNewResponseBody {
	s.FileUrlList = v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetFrom(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.From = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetGmtCreateStr(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.GmtCreateStr = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetIntlType(v int32) *QuerySmsTemplateByCodeNewResponseBody {
	s.IntlType = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetMoreDataFileIds(v *QuerySmsTemplateByCodeNewResponseBodyMoreDataFileIds) *QuerySmsTemplateByCodeNewResponseBody {
	s.MoreDataFileIds = v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetMoreDataFileUrls(v *QuerySmsTemplateByCodeNewResponseBodyMoreDataFileUrls) *QuerySmsTemplateByCodeNewResponseBody {
	s.MoreDataFileUrls = v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetMoreDataOssKeys(v *QuerySmsTemplateByCodeNewResponseBodyMoreDataOssKeys) *QuerySmsTemplateByCodeNewResponseBody {
	s.MoreDataOssKeys = v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetNeedAuthorized(v bool) *QuerySmsTemplateByCodeNewResponseBody {
	s.NeedAuthorized = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetOpenTag(v bool) *QuerySmsTemplateByCodeNewResponseBody {
	s.OpenTag = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetOrderId(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.OrderId = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetOssKeys(v *QuerySmsTemplateByCodeNewResponseBodyOssKeys) *QuerySmsTemplateByCodeNewResponseBody {
	s.OssKeys = v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetProductUrl(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.ProductUrl = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetRelatedSignName(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.RelatedSignName = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetRemark(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.Remark = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetRequestId(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetRmdTemplateId(v int32) *QuerySmsTemplateByCodeNewResponseBody {
	s.RmdTemplateId = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetRmdTemplateVariableNum(v int32) *QuerySmsTemplateByCodeNewResponseBody {
	s.RmdTemplateVariableNum = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetSignName(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.SignName = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetSignType(v int32) *QuerySmsTemplateByCodeNewResponseBody {
	s.SignType = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetSmsContent(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.SmsContent = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetTags(v *QuerySmsTemplateByCodeNewResponseBodyTags) *QuerySmsTemplateByCodeNewResponseBody {
	s.Tags = v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetTemplateCode(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.TemplateCode = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetTemplateName(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.TemplateName = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBody) SetTemplateRule(v string) *QuerySmsTemplateByCodeNewResponseBody {
	s.TemplateRule = &v
	return s
}

type QuerySmsTemplateByCodeNewResponseBodyApplicationScene struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Id      *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QuerySmsTemplateByCodeNewResponseBodyApplicationScene) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponseBodyApplicationScene) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponseBodyApplicationScene) SetContent(v string) *QuerySmsTemplateByCodeNewResponseBodyApplicationScene {
	s.Content = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBodyApplicationScene) SetId(v int64) *QuerySmsTemplateByCodeNewResponseBodyApplicationScene {
	s.Id = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBodyApplicationScene) SetName(v string) *QuerySmsTemplateByCodeNewResponseBodyApplicationScene {
	s.Name = &v
	return s
}

type QuerySmsTemplateByCodeNewResponseBodyFileIds struct {
	FileId []*int64 `json:"FileId,omitempty" xml:"FileId,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateByCodeNewResponseBodyFileIds) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponseBodyFileIds) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponseBodyFileIds) SetFileId(v []*int64) *QuerySmsTemplateByCodeNewResponseBodyFileIds {
	s.FileId = v
	return s
}

type QuerySmsTemplateByCodeNewResponseBodyFileUrlList struct {
	FileUrl []*string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateByCodeNewResponseBodyFileUrlList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponseBodyFileUrlList) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponseBodyFileUrlList) SetFileUrl(v []*string) *QuerySmsTemplateByCodeNewResponseBodyFileUrlList {
	s.FileUrl = v
	return s
}

type QuerySmsTemplateByCodeNewResponseBodyMoreDataFileIds struct {
	MoreDataFileId []*int64 `json:"MoreDataFileId,omitempty" xml:"MoreDataFileId,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateByCodeNewResponseBodyMoreDataFileIds) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponseBodyMoreDataFileIds) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponseBodyMoreDataFileIds) SetMoreDataFileId(v []*int64) *QuerySmsTemplateByCodeNewResponseBodyMoreDataFileIds {
	s.MoreDataFileId = v
	return s
}

type QuerySmsTemplateByCodeNewResponseBodyMoreDataFileUrls struct {
	MoreDataFileUrl []*string `json:"MoreDataFileUrl,omitempty" xml:"MoreDataFileUrl,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateByCodeNewResponseBodyMoreDataFileUrls) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponseBodyMoreDataFileUrls) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponseBodyMoreDataFileUrls) SetMoreDataFileUrl(v []*string) *QuerySmsTemplateByCodeNewResponseBodyMoreDataFileUrls {
	s.MoreDataFileUrl = v
	return s
}

type QuerySmsTemplateByCodeNewResponseBodyMoreDataOssKeys struct {
	MoreDataOssKey []*string `json:"MoreDataOssKey,omitempty" xml:"MoreDataOssKey,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateByCodeNewResponseBodyMoreDataOssKeys) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponseBodyMoreDataOssKeys) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponseBodyMoreDataOssKeys) SetMoreDataOssKey(v []*string) *QuerySmsTemplateByCodeNewResponseBodyMoreDataOssKeys {
	s.MoreDataOssKey = v
	return s
}

type QuerySmsTemplateByCodeNewResponseBodyOssKeys struct {
	OssKey []*string `json:"OssKey,omitempty" xml:"OssKey,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateByCodeNewResponseBodyOssKeys) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponseBodyOssKeys) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponseBodyOssKeys) SetOssKey(v []*string) *QuerySmsTemplateByCodeNewResponseBodyOssKeys {
	s.OssKey = v
	return s
}

type QuerySmsTemplateByCodeNewResponseBodyTags struct {
	TagInfo []*QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo `json:"TagInfo,omitempty" xml:"TagInfo,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateByCodeNewResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponseBodyTags) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponseBodyTags) SetTagInfo(v []*QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo) *QuerySmsTemplateByCodeNewResponseBodyTags {
	s.TagInfo = v
	return s
}

type QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo) SetTagKey(v string) *QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo {
	s.TagKey = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo) SetTagValue(v string) *QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo {
	s.TagValue = &v
	return s
}

type QuerySmsTemplateByCodeNewResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsTemplateByCodeNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsTemplateByCodeNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateByCodeNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateByCodeNewResponse) SetHeaders(v map[string]*string) *QuerySmsTemplateByCodeNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponse) SetStatusCode(v int32) *QuerySmsTemplateByCodeNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsTemplateByCodeNewResponse) SetBody(v *QuerySmsTemplateByCodeNewResponseBody) *QuerySmsTemplateByCodeNewResponse {
	s.Body = v
	return s
}

type QuerySmsTemplateLastRangeRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	Limit                *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	NeedDefaultTemplate  *bool   `json:"NeedDefaultTemplate,omitempty" xml:"NeedDefaultTemplate,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QuerySmsTemplateLastRangeRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateLastRangeRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateLastRangeRequest) SetBizType(v string) *QuerySmsTemplateLastRangeRequest {
	s.BizType = &v
	return s
}

func (s *QuerySmsTemplateLastRangeRequest) SetLimit(v int32) *QuerySmsTemplateLastRangeRequest {
	s.Limit = &v
	return s
}

func (s *QuerySmsTemplateLastRangeRequest) SetNeedDefaultTemplate(v bool) *QuerySmsTemplateLastRangeRequest {
	s.NeedDefaultTemplate = &v
	return s
}

func (s *QuerySmsTemplateLastRangeRequest) SetOwnerId(v int64) *QuerySmsTemplateLastRangeRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsTemplateLastRangeRequest) SetProdCode(v string) *QuerySmsTemplateLastRangeRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsTemplateLastRangeRequest) SetProdId(v string) *QuerySmsTemplateLastRangeRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySmsTemplateLastRangeRequest) SetResourceOwnerAccount(v string) *QuerySmsTemplateLastRangeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsTemplateLastRangeRequest) SetResourceOwnerId(v int64) *QuerySmsTemplateLastRangeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsTemplateLastRangeRequest) SetTemplateName(v string) *QuerySmsTemplateLastRangeRequest {
	s.TemplateName = &v
	return s
}

type QuerySmsTemplateLastRangeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsTemplateLastRangeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateLastRangeResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateLastRangeResponseBody) SetRequestId(v string) *QuerySmsTemplateLastRangeResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsTemplateLastRangeResponseBody) SetCode(v string) *QuerySmsTemplateLastRangeResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsTemplateLastRangeResponseBody) SetData(v string) *QuerySmsTemplateLastRangeResponseBody {
	s.Data = &v
	return s
}

type QuerySmsTemplateLastRangeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsTemplateLastRangeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsTemplateLastRangeResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateLastRangeResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateLastRangeResponse) SetHeaders(v map[string]*string) *QuerySmsTemplateLastRangeResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsTemplateLastRangeResponse) SetStatusCode(v int32) *QuerySmsTemplateLastRangeResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsTemplateLastRangeResponse) SetBody(v *QuerySmsTemplateLastRangeResponseBody) *QuerySmsTemplateLastRangeResponse {
	s.Body = v
	return s
}

type QuerySmsTemplateLastRangeNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	FilterAnyParam       *bool   `json:"FilterAnyParam,omitempty" xml:"FilterAnyParam,omitempty"`
	Limit                *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	NeedDefaultTemplate  *bool   `json:"NeedDefaultTemplate,omitempty" xml:"NeedDefaultTemplate,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdId               *string `json:"ProdId,omitempty" xml:"ProdId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QuerySmsTemplateLastRangeNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateLastRangeNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetBizType(v string) *QuerySmsTemplateLastRangeNewRequest {
	s.BizType = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetFilterAnyParam(v bool) *QuerySmsTemplateLastRangeNewRequest {
	s.FilterAnyParam = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetLimit(v int32) *QuerySmsTemplateLastRangeNewRequest {
	s.Limit = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetNeedDefaultTemplate(v bool) *QuerySmsTemplateLastRangeNewRequest {
	s.NeedDefaultTemplate = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetOwnerId(v int64) *QuerySmsTemplateLastRangeNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetPageNo(v int32) *QuerySmsTemplateLastRangeNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetPageSize(v int32) *QuerySmsTemplateLastRangeNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetProdCode(v string) *QuerySmsTemplateLastRangeNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetProdId(v string) *QuerySmsTemplateLastRangeNewRequest {
	s.ProdId = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetResourceOwnerAccount(v string) *QuerySmsTemplateLastRangeNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetResourceOwnerId(v int64) *QuerySmsTemplateLastRangeNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewRequest) SetTemplateName(v string) *QuerySmsTemplateLastRangeNewRequest {
	s.TemplateName = &v
	return s
}

type QuerySmsTemplateLastRangeNewResponseBody struct {
	List      *QuerySmsTemplateLastRangeNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QuerySmsTemplateLastRangeNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateLastRangeNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateLastRangeNewResponseBody) SetList(v *QuerySmsTemplateLastRangeNewResponseBodyList) *QuerySmsTemplateLastRangeNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBody) SetRequestId(v string) *QuerySmsTemplateLastRangeNewResponseBody {
	s.RequestId = &v
	return s
}

type QuerySmsTemplateLastRangeNewResponseBodyList struct {
	SmsTemplate []*QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate `json:"SmsTemplate,omitempty" xml:"SmsTemplate,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateLastRangeNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateLastRangeNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyList) SetSmsTemplate(v []*QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) *QuerySmsTemplateLastRangeNewResponseBodyList {
	s.SmsTemplate = v
	return s
}

type QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate struct {
	AuditInfo         *string                                                      `json:"AuditInfo,omitempty" xml:"AuditInfo,omitempty"`
	AuditRemarkInfo   *string                                                      `json:"AuditRemarkInfo,omitempty" xml:"AuditRemarkInfo,omitempty"`
	AuditState        *string                                                      `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType           *string                                                      `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExpireDateStr     *string                                                      `json:"ExpireDateStr,omitempty" xml:"ExpireDateStr,omitempty"`
	GmtCreateStr      *string                                                      `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	Id                *string                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	IsAnyParam        *bool                                                        `json:"IsAnyParam,omitempty" xml:"IsAnyParam,omitempty"`
	IsDefaultTemplate *bool                                                        `json:"IsDefaultTemplate,omitempty" xml:"IsDefaultTemplate,omitempty"`
	IsRecently        *bool                                                        `json:"IsRecently,omitempty" xml:"IsRecently,omitempty"`
	OrderId           *string                                                      `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PassErrType       *string                                                      `json:"PassErrType,omitempty" xml:"PassErrType,omitempty"`
	Remark            *string                                                      `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SignType          *int32                                                       `json:"SignType,omitempty" xml:"SignType,omitempty"`
	SmsContent        *string                                                      `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	SupportVendor     *string                                                      `json:"SupportVendor,omitempty" xml:"SupportVendor,omitempty"`
	Tags              *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	TemplateCode      *string                                                      `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateContent   *string                                                      `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
	TemplateName      *string                                                      `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateRule      *string                                                      `json:"TemplateRule,omitempty" xml:"TemplateRule,omitempty"`
}

func (s QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetAuditInfo(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.AuditInfo = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetAuditRemarkInfo(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.AuditRemarkInfo = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetAuditState(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.AuditState = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetBizType(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.BizType = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetExpireDateStr(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.ExpireDateStr = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetGmtCreateStr(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.GmtCreateStr = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetId(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.Id = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetIsAnyParam(v bool) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.IsAnyParam = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetIsDefaultTemplate(v bool) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.IsDefaultTemplate = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetIsRecently(v bool) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.IsRecently = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetOrderId(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.OrderId = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetPassErrType(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.PassErrType = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetRemark(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.Remark = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetSignType(v int32) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.SignType = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetSmsContent(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.SmsContent = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetSupportVendor(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.SupportVendor = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetTags(v *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTags) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.Tags = v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetTemplateCode(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.TemplateCode = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetTemplateContent(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.TemplateContent = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetTemplateName(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.TemplateName = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate) SetTemplateRule(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate {
	s.TemplateRule = &v
	return s
}

type QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTags struct {
	Tag []*QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTags) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTags) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTags) SetTag(v []*QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTags {
	s.Tag = v
	return s
}

type QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag) SetResourceId(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag {
	s.ResourceId = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag) SetResourceType(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag {
	s.ResourceType = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag) SetTagKey(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag {
	s.TagKey = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag) SetTagValue(v string) *QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag {
	s.TagValue = &v
	return s
}

type QuerySmsTemplateLastRangeNewResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsTemplateLastRangeNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsTemplateLastRangeNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateLastRangeNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateLastRangeNewResponse) SetHeaders(v map[string]*string) *QuerySmsTemplateLastRangeNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponse) SetStatusCode(v int32) *QuerySmsTemplateLastRangeNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsTemplateLastRangeNewResponse) SetBody(v *QuerySmsTemplateLastRangeNewResponseBody) *QuerySmsTemplateLastRangeNewResponse {
	s.Body = v
	return s
}

type QuerySmsTemplateListRequest struct {
	AuditState           *string                            `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType              *string                            `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64                             `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32                             `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string                            `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdType             *string                            `json:"ProdType,omitempty" xml:"ProdType,omitempty"`
	ResourceOwnerAccount *string                            `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                             `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tags                 []*QuerySmsTemplateListRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	TemplateName         *string                            `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QuerySmsTemplateListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListRequest) SetAuditState(v string) *QuerySmsTemplateListRequest {
	s.AuditState = &v
	return s
}

func (s *QuerySmsTemplateListRequest) SetBizType(v string) *QuerySmsTemplateListRequest {
	s.BizType = &v
	return s
}

func (s *QuerySmsTemplateListRequest) SetOwnerId(v int64) *QuerySmsTemplateListRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsTemplateListRequest) SetPageNo(v int32) *QuerySmsTemplateListRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsTemplateListRequest) SetPageSize(v int32) *QuerySmsTemplateListRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsTemplateListRequest) SetProdCode(v string) *QuerySmsTemplateListRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsTemplateListRequest) SetProdType(v string) *QuerySmsTemplateListRequest {
	s.ProdType = &v
	return s
}

func (s *QuerySmsTemplateListRequest) SetResourceOwnerAccount(v string) *QuerySmsTemplateListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsTemplateListRequest) SetResourceOwnerId(v int64) *QuerySmsTemplateListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsTemplateListRequest) SetTags(v []*QuerySmsTemplateListRequestTags) *QuerySmsTemplateListRequest {
	s.Tags = v
	return s
}

func (s *QuerySmsTemplateListRequest) SetTemplateName(v string) *QuerySmsTemplateListRequest {
	s.TemplateName = &v
	return s
}

type QuerySmsTemplateListRequestTags struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QuerySmsTemplateListRequestTags) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListRequestTags) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListRequestTags) SetTagKey(v string) *QuerySmsTemplateListRequestTags {
	s.TagKey = &v
	return s
}

func (s *QuerySmsTemplateListRequestTags) SetTagValue(v string) *QuerySmsTemplateListRequestTags {
	s.TagValue = &v
	return s
}

type QuerySmsTemplateListResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsTemplateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListResponseBody) SetRequestId(v string) *QuerySmsTemplateListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsTemplateListResponseBody) SetCode(v string) *QuerySmsTemplateListResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsTemplateListResponseBody) SetData(v string) *QuerySmsTemplateListResponseBody {
	s.Data = &v
	return s
}

type QuerySmsTemplateListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsTemplateListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsTemplateListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListResponse) SetHeaders(v map[string]*string) *QuerySmsTemplateListResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsTemplateListResponse) SetStatusCode(v int32) *QuerySmsTemplateListResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsTemplateListResponse) SetBody(v *QuerySmsTemplateListResponseBody) *QuerySmsTemplateListResponse {
	s.Body = v
	return s
}

type QuerySmsTemplateListNewRequest struct {
	AuditState           *string                               `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType              *string                               `json:"BizType,omitempty" xml:"BizType,omitempty"`
	IntlType             *int32                                `json:"IntlType,omitempty" xml:"IntlType,omitempty"`
	OwnerId              *int64                                `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNo               *int32                                `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize             *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string                               `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ProdType             *string                               `json:"ProdType,omitempty" xml:"ProdType,omitempty"`
	ResourceOwnerAccount *string                               `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TagListString        *string                               `json:"TagListString,omitempty" xml:"TagListString,omitempty"`
	Tags                 []*QuerySmsTemplateListNewRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	TemplateName         *string                               `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s QuerySmsTemplateListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListNewRequest) SetAuditState(v string) *QuerySmsTemplateListNewRequest {
	s.AuditState = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetBizType(v string) *QuerySmsTemplateListNewRequest {
	s.BizType = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetIntlType(v int32) *QuerySmsTemplateListNewRequest {
	s.IntlType = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetOwnerId(v int64) *QuerySmsTemplateListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetPageNo(v int32) *QuerySmsTemplateListNewRequest {
	s.PageNo = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetPageSize(v int32) *QuerySmsTemplateListNewRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetProdCode(v string) *QuerySmsTemplateListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetProdType(v string) *QuerySmsTemplateListNewRequest {
	s.ProdType = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetResourceOwnerAccount(v string) *QuerySmsTemplateListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetResourceOwnerId(v int64) *QuerySmsTemplateListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetTagListString(v string) *QuerySmsTemplateListNewRequest {
	s.TagListString = &v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetTags(v []*QuerySmsTemplateListNewRequestTags) *QuerySmsTemplateListNewRequest {
	s.Tags = v
	return s
}

func (s *QuerySmsTemplateListNewRequest) SetTemplateName(v string) *QuerySmsTemplateListNewRequest {
	s.TemplateName = &v
	return s
}

type QuerySmsTemplateListNewRequestTags struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QuerySmsTemplateListNewRequestTags) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListNewRequestTags) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListNewRequestTags) SetTagKey(v string) *QuerySmsTemplateListNewRequestTags {
	s.TagKey = &v
	return s
}

func (s *QuerySmsTemplateListNewRequestTags) SetTagValue(v string) *QuerySmsTemplateListNewRequestTags {
	s.TagValue = &v
	return s
}

type QuerySmsTemplateListNewResponseBody struct {
	List      *QuerySmsTemplateListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNo    *int32                                   `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                   `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QuerySmsTemplateListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListNewResponseBody) SetList(v *QuerySmsTemplateListNewResponseBodyList) *QuerySmsTemplateListNewResponseBody {
	s.List = v
	return s
}

func (s *QuerySmsTemplateListNewResponseBody) SetPageNo(v int32) *QuerySmsTemplateListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBody) SetPageSize(v int32) *QuerySmsTemplateListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBody) SetRequestId(v string) *QuerySmsTemplateListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBody) SetTotal(v int64) *QuerySmsTemplateListNewResponseBody {
	s.Total = &v
	return s
}

type QuerySmsTemplateListNewResponseBodyList struct {
	SmsTemplate []*QuerySmsTemplateListNewResponseBodyListSmsTemplate `json:"SmsTemplate,omitempty" xml:"SmsTemplate,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListNewResponseBodyList) SetSmsTemplate(v []*QuerySmsTemplateListNewResponseBodyListSmsTemplate) *QuerySmsTemplateListNewResponseBodyList {
	s.SmsTemplate = v
	return s
}

type QuerySmsTemplateListNewResponseBodyListSmsTemplate struct {
	AuditInfo           *string                                                 `json:"AuditInfo,omitempty" xml:"AuditInfo,omitempty"`
	AuditRemarkInfo     *string                                                 `json:"AuditRemarkInfo,omitempty" xml:"AuditRemarkInfo,omitempty"`
	AuditState          *string                                                 `json:"AuditState,omitempty" xml:"AuditState,omitempty"`
	BizType             *string                                                 `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExpireDateStr       *string                                                 `json:"ExpireDateStr,omitempty" xml:"ExpireDateStr,omitempty"`
	GmtCreateStr        *string                                                 `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	Id                  *string                                                 `json:"Id,omitempty" xml:"Id,omitempty"`
	IntelligentApproval *bool                                                   `json:"IntelligentApproval,omitempty" xml:"IntelligentApproval,omitempty"`
	IntlType            *int32                                                  `json:"IntlType,omitempty" xml:"IntlType,omitempty"`
	IsAnyParam          *bool                                                   `json:"IsAnyParam,omitempty" xml:"IsAnyParam,omitempty"`
	IsDefaultTemplate   *bool                                                   `json:"IsDefaultTemplate,omitempty" xml:"IsDefaultTemplate,omitempty"`
	IsRecently          *bool                                                   `json:"IsRecently,omitempty" xml:"IsRecently,omitempty"`
	OrderCount          *int64                                                  `json:"OrderCount,omitempty" xml:"OrderCount,omitempty"`
	OrderId             *string                                                 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PassErrType         *string                                                 `json:"PassErrType,omitempty" xml:"PassErrType,omitempty"`
	ProductUrl          *string                                                 `json:"ProductUrl,omitempty" xml:"ProductUrl,omitempty"`
	RelatedSignName     *string                                                 `json:"RelatedSignName,omitempty" xml:"RelatedSignName,omitempty"`
	Remark              *string                                                 `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SignType            *int32                                                  `json:"SignType,omitempty" xml:"SignType,omitempty"`
	SmsContent          *string                                                 `json:"SmsContent,omitempty" xml:"SmsContent,omitempty"`
	SupportVendor       *string                                                 `json:"SupportVendor,omitempty" xml:"SupportVendor,omitempty"`
	Tags                *QuerySmsTemplateListNewResponseBodyListSmsTemplateTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	TemplateCode        *string                                                 `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateContent     *string                                                 `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
	TemplateName        *string                                                 `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateRule        *string                                                 `json:"TemplateRule,omitempty" xml:"TemplateRule,omitempty"`
}

func (s QuerySmsTemplateListNewResponseBodyListSmsTemplate) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListNewResponseBodyListSmsTemplate) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetAuditInfo(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.AuditInfo = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetAuditRemarkInfo(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.AuditRemarkInfo = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetAuditState(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.AuditState = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetBizType(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.BizType = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetExpireDateStr(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.ExpireDateStr = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetGmtCreateStr(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.GmtCreateStr = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetId(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.Id = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetIntelligentApproval(v bool) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.IntelligentApproval = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetIntlType(v int32) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.IntlType = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetIsAnyParam(v bool) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.IsAnyParam = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetIsDefaultTemplate(v bool) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.IsDefaultTemplate = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetIsRecently(v bool) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.IsRecently = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetOrderCount(v int64) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.OrderCount = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetOrderId(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.OrderId = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetPassErrType(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.PassErrType = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetProductUrl(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.ProductUrl = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetRelatedSignName(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.RelatedSignName = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetRemark(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.Remark = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetSignType(v int32) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.SignType = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetSmsContent(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.SmsContent = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetSupportVendor(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.SupportVendor = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetTags(v *QuerySmsTemplateListNewResponseBodyListSmsTemplateTags) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.Tags = v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetTemplateCode(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.TemplateCode = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetTemplateContent(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.TemplateContent = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetTemplateName(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.TemplateName = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplate) SetTemplateRule(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplate {
	s.TemplateRule = &v
	return s
}

type QuerySmsTemplateListNewResponseBodyListSmsTemplateTags struct {
	Tag []*QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QuerySmsTemplateListNewResponseBodyListSmsTemplateTags) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListNewResponseBodyListSmsTemplateTags) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplateTags) SetTag(v []*QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag) *QuerySmsTemplateListNewResponseBodyListSmsTemplateTags {
	s.Tag = v
	return s
}

type QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag) SetResourceId(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag {
	s.ResourceId = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag) SetResourceType(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag {
	s.ResourceType = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag) SetTagKey(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag {
	s.TagKey = &v
	return s
}

func (s *QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag) SetTagValue(v string) *QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag {
	s.TagValue = &v
	return s
}

type QuerySmsTemplateListNewResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsTemplateListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsTemplateListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsTemplateListNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsTemplateListNewResponse) SetHeaders(v map[string]*string) *QuerySmsTemplateListNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsTemplateListNewResponse) SetStatusCode(v int32) *QuerySmsTemplateListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsTemplateListNewResponse) SetBody(v *QuerySmsTemplateListNewResponseBody) *QuerySmsTemplateListNewResponse {
	s.Body = v
	return s
}

type QuerySmsUserTagsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsUserTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsUserTagsRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsUserTagsRequest) SetOwnerId(v int64) *QuerySmsUserTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsUserTagsRequest) SetProdCode(v string) *QuerySmsUserTagsRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsUserTagsRequest) SetResourceOwnerAccount(v string) *QuerySmsUserTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsUserTagsRequest) SetResourceOwnerId(v int64) *QuerySmsUserTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsUserTagsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QuerySmsUserTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsUserTagsResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsUserTagsResponseBody) SetRequestId(v string) *QuerySmsUserTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsUserTagsResponseBody) SetCode(v string) *QuerySmsUserTagsResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySmsUserTagsResponseBody) SetData(v string) *QuerySmsUserTagsResponseBody {
	s.Data = &v
	return s
}

type QuerySmsUserTagsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsUserTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsUserTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsUserTagsResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsUserTagsResponse) SetHeaders(v map[string]*string) *QuerySmsUserTagsResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsUserTagsResponse) SetStatusCode(v int32) *QuerySmsUserTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsUserTagsResponse) SetBody(v *QuerySmsUserTagsResponseBody) *QuerySmsUserTagsResponse {
	s.Body = v
	return s
}

type QuerySmsUserTagsNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QuerySmsUserTagsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsUserTagsNewRequest) GoString() string {
	return s.String()
}

func (s *QuerySmsUserTagsNewRequest) SetOwnerId(v int64) *QuerySmsUserTagsNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmsUserTagsNewRequest) SetProdCode(v string) *QuerySmsUserTagsNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QuerySmsUserTagsNewRequest) SetResourceOwnerAccount(v string) *QuerySmsUserTagsNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmsUserTagsNewRequest) SetResourceOwnerId(v int64) *QuerySmsUserTagsNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QuerySmsUserTagsNewResponseBody struct {
	IsAnyParamTemplateUser       *bool `json:"IsAnyParamTemplateUser,omitempty" xml:"IsAnyParamTemplateUser,omitempty"`
	IsBatchCreateSmsSign         *bool `json:"IsBatchCreateSmsSign,omitempty" xml:"IsBatchCreateSmsSign,omitempty"`
	IsInnerUser                  *bool `json:"IsInnerUser,omitempty" xml:"IsInnerUser,omitempty"`
	IsNewUser                    *bool `json:"IsNewUser,omitempty" xml:"IsNewUser,omitempty"`
	IsNoneStatusNoChargeCust     *bool `json:"IsNoneStatusNoChargeCust,omitempty" xml:"IsNoneStatusNoChargeCust,omitempty"`
	IsOpenTemplateRule           *bool `json:"IsOpenTemplateRule,omitempty" xml:"IsOpenTemplateRule,omitempty"`
	IsOpenedCard                 *bool `json:"IsOpenedCard,omitempty" xml:"IsOpenedCard,omitempty"`
	IsOpenedDigit                *bool `json:"IsOpenedDigit,omitempty" xml:"IsOpenedDigit,omitempty"`
	IsOpenedInternationalSms     *bool `json:"IsOpenedInternationalSms,omitempty" xml:"IsOpenedInternationalSms,omitempty"`
	IsOpenedMarket               *bool `json:"IsOpenedMarket,omitempty" xml:"IsOpenedMarket,omitempty"`
	IsOpenedSaas                 *bool `json:"IsOpenedSaas,omitempty" xml:"IsOpenedSaas,omitempty"`
	IsOpenedSmppStandardProtocol *bool `json:"IsOpenedSmppStandardProtocol,omitempty" xml:"IsOpenedSmppStandardProtocol,omitempty"`
	IsOpenedStandardProtocol     *bool `json:"IsOpenedStandardProtocol,omitempty" xml:"IsOpenedStandardProtocol,omitempty"`
	IsVirtualCust                *bool `json:"IsVirtualCust,omitempty" xml:"IsVirtualCust,omitempty"`
	RequestId                    *bool `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SignCheckCommon              *bool `json:"SignCheckCommon,omitempty" xml:"SignCheckCommon,omitempty"`
	SignCheckVerification        *bool `json:"SignCheckVerification,omitempty" xml:"SignCheckVerification,omitempty"`
	SmsInformationSupervision    *bool `json:"SmsInformationSupervision,omitempty" xml:"SmsInformationSupervision,omitempty"`
}

func (s QuerySmsUserTagsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsUserTagsNewResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsAnyParamTemplateUser(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsAnyParamTemplateUser = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsBatchCreateSmsSign(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsBatchCreateSmsSign = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsInnerUser(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsInnerUser = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsNewUser(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsNewUser = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsNoneStatusNoChargeCust(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsNoneStatusNoChargeCust = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsOpenTemplateRule(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsOpenTemplateRule = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsOpenedCard(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsOpenedCard = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsOpenedDigit(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsOpenedDigit = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsOpenedInternationalSms(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsOpenedInternationalSms = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsOpenedMarket(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsOpenedMarket = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsOpenedSaas(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsOpenedSaas = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsOpenedSmppStandardProtocol(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsOpenedSmppStandardProtocol = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsOpenedStandardProtocol(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsOpenedStandardProtocol = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetIsVirtualCust(v bool) *QuerySmsUserTagsNewResponseBody {
	s.IsVirtualCust = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetRequestId(v bool) *QuerySmsUserTagsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetSignCheckCommon(v bool) *QuerySmsUserTagsNewResponseBody {
	s.SignCheckCommon = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetSignCheckVerification(v bool) *QuerySmsUserTagsNewResponseBody {
	s.SignCheckVerification = &v
	return s
}

func (s *QuerySmsUserTagsNewResponseBody) SetSmsInformationSupervision(v bool) *QuerySmsUserTagsNewResponseBody {
	s.SmsInformationSupervision = &v
	return s
}

type QuerySmsUserTagsNewResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmsUserTagsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmsUserTagsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmsUserTagsNewResponse) GoString() string {
	return s.String()
}

func (s *QuerySmsUserTagsNewResponse) SetHeaders(v map[string]*string) *QuerySmsUserTagsNewResponse {
	s.Headers = v
	return s
}

func (s *QuerySmsUserTagsNewResponse) SetStatusCode(v int32) *QuerySmsUserTagsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmsUserTagsNewResponse) SetBody(v *QuerySmsUserTagsNewResponseBody) *QuerySmsUserTagsNewResponse {
	s.Body = v
	return s
}

type QueryStandarTemplateCollectionsRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateContent      *string `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
}

func (s QueryStandarTemplateCollectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStandarTemplateCollectionsRequest) GoString() string {
	return s.String()
}

func (s *QueryStandarTemplateCollectionsRequest) SetBizType(v string) *QueryStandarTemplateCollectionsRequest {
	s.BizType = &v
	return s
}

func (s *QueryStandarTemplateCollectionsRequest) SetOwnerId(v int64) *QueryStandarTemplateCollectionsRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsRequest) SetProdCode(v string) *QueryStandarTemplateCollectionsRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryStandarTemplateCollectionsRequest) SetResourceOwnerAccount(v string) *QueryStandarTemplateCollectionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryStandarTemplateCollectionsRequest) SetResourceOwnerId(v int64) *QueryStandarTemplateCollectionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsRequest) SetTemplateContent(v string) *QueryStandarTemplateCollectionsRequest {
	s.TemplateContent = &v
	return s
}

type QueryStandarTemplateCollectionsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryStandarTemplateCollectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryStandarTemplateCollectionsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryStandarTemplateCollectionsResponseBody) SetRequestId(v string) *QueryStandarTemplateCollectionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsResponseBody) SetCode(v string) *QueryStandarTemplateCollectionsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryStandarTemplateCollectionsResponseBody) SetData(v string) *QueryStandarTemplateCollectionsResponseBody {
	s.Data = &v
	return s
}

type QueryStandarTemplateCollectionsResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryStandarTemplateCollectionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryStandarTemplateCollectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStandarTemplateCollectionsResponse) GoString() string {
	return s.String()
}

func (s *QueryStandarTemplateCollectionsResponse) SetHeaders(v map[string]*string) *QueryStandarTemplateCollectionsResponse {
	s.Headers = v
	return s
}

func (s *QueryStandarTemplateCollectionsResponse) SetStatusCode(v int32) *QueryStandarTemplateCollectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryStandarTemplateCollectionsResponse) SetBody(v *QueryStandarTemplateCollectionsResponseBody) *QueryStandarTemplateCollectionsResponse {
	s.Body = v
	return s
}

type QueryStandarTemplateCollectionsNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateContent      *string `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
}

func (s QueryStandarTemplateCollectionsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStandarTemplateCollectionsNewRequest) GoString() string {
	return s.String()
}

func (s *QueryStandarTemplateCollectionsNewRequest) SetBizType(v string) *QueryStandarTemplateCollectionsNewRequest {
	s.BizType = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewRequest) SetOwnerId(v int64) *QueryStandarTemplateCollectionsNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewRequest) SetProdCode(v string) *QueryStandarTemplateCollectionsNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewRequest) SetResourceOwnerAccount(v string) *QueryStandarTemplateCollectionsNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewRequest) SetResourceOwnerId(v int64) *QueryStandarTemplateCollectionsNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewRequest) SetTemplateContent(v string) *QueryStandarTemplateCollectionsNewRequest {
	s.TemplateContent = &v
	return s
}

type QueryStandarTemplateCollectionsNewResponseBody struct {
	List      *QueryStandarTemplateCollectionsNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryStandarTemplateCollectionsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryStandarTemplateCollectionsNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryStandarTemplateCollectionsNewResponseBody) SetList(v *QueryStandarTemplateCollectionsNewResponseBodyList) *QueryStandarTemplateCollectionsNewResponseBody {
	s.List = v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBody) SetRequestId(v string) *QueryStandarTemplateCollectionsNewResponseBody {
	s.RequestId = &v
	return s
}

type QueryStandarTemplateCollectionsNewResponseBodyList struct {
	FcPartnerTemplateDTO []*QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO `json:"FcPartnerTemplateDTO,omitempty" xml:"FcPartnerTemplateDTO,omitempty" type:"Repeated"`
}

func (s QueryStandarTemplateCollectionsNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryStandarTemplateCollectionsNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyList) SetFcPartnerTemplateDTO(v []*QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) *QueryStandarTemplateCollectionsNewResponseBodyList {
	s.FcPartnerTemplateDTO = v
	return s
}

type QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO struct {
	BusinessType       *int32  `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	FcTag              *int64  `json:"FcTag,omitempty" xml:"FcTag,omitempty"`
	I18n               *string `json:"I18n,omitempty" xml:"I18n,omitempty"`
	Id                 *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsDeleted          *int32  `json:"IsDeleted,omitempty" xml:"IsDeleted,omitempty"`
	McBusinessType     *int32  `json:"McBusinessType,omitempty" xml:"McBusinessType,omitempty"`
	McCategory         *int32  `json:"McCategory,omitempty" xml:"McCategory,omitempty"`
	McSignature        *string `json:"McSignature,omitempty" xml:"McSignature,omitempty"`
	MessageTypeId      *int64  `json:"MessageTypeId,omitempty" xml:"MessageTypeId,omitempty"`
	OpNick             *string `json:"OpNick,omitempty" xml:"OpNick,omitempty"`
	PartnerId          *int64  `json:"PartnerId,omitempty" xml:"PartnerId,omitempty"`
	QualificationId    *int64  `json:"QualificationId,omitempty" xml:"QualificationId,omitempty"`
	Remark             *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SignTemplateId     *int64  `json:"SignTemplateId,omitempty" xml:"SignTemplateId,omitempty"`
	SignType           *int32  `json:"SignType,omitempty" xml:"SignType,omitempty"`
	SourceId           *string `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
	SpeedLevel         *int32  `json:"SpeedLevel,omitempty" xml:"SpeedLevel,omitempty"`
	State              *int32  `json:"State,omitempty" xml:"State,omitempty"`
	TemplateCode       *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateContent    *string `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty"`
	TemplateId         *int64  `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName       *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateParamRule  *string `json:"TemplateParamRule,omitempty" xml:"TemplateParamRule,omitempty"`
	TemplateSenderType *int32  `json:"TemplateSenderType,omitempty" xml:"TemplateSenderType,omitempty"`
	TemplateType       *int32  `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	TotalCountLimit    *int64  `json:"TotalCountLimit,omitempty" xml:"TotalCountLimit,omitempty"`
	VoiceType          *int32  `json:"VoiceType,omitempty" xml:"VoiceType,omitempty"`
}

func (s QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) String() string {
	return tea.Prettify(s)
}

func (s QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) GoString() string {
	return s.String()
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetBusinessType(v int32) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.BusinessType = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetFcTag(v int64) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.FcTag = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetI18n(v string) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.I18n = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetId(v int64) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.Id = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetIsDeleted(v int32) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.IsDeleted = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetMcBusinessType(v int32) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.McBusinessType = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetMcCategory(v int32) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.McCategory = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetMcSignature(v string) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.McSignature = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetMessageTypeId(v int64) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.MessageTypeId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetOpNick(v string) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.OpNick = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetPartnerId(v int64) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.PartnerId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetQualificationId(v int64) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.QualificationId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetRemark(v string) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.Remark = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetSignTemplateId(v int64) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.SignTemplateId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetSignType(v int32) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.SignType = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetSourceId(v string) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.SourceId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetSpeedLevel(v int32) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.SpeedLevel = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetState(v int32) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.State = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetTemplateCode(v string) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.TemplateCode = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetTemplateContent(v string) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.TemplateContent = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetTemplateId(v int64) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.TemplateId = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetTemplateName(v string) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.TemplateName = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetTemplateParamRule(v string) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.TemplateParamRule = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetTemplateSenderType(v int32) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.TemplateSenderType = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetTemplateType(v int32) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.TemplateType = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetTotalCountLimit(v int64) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.TotalCountLimit = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO) SetVoiceType(v int32) *QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO {
	s.VoiceType = &v
	return s
}

type QueryStandarTemplateCollectionsNewResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryStandarTemplateCollectionsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryStandarTemplateCollectionsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStandarTemplateCollectionsNewResponse) GoString() string {
	return s.String()
}

func (s *QueryStandarTemplateCollectionsNewResponse) SetHeaders(v map[string]*string) *QueryStandarTemplateCollectionsNewResponse {
	s.Headers = v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponse) SetStatusCode(v int32) *QueryStandarTemplateCollectionsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryStandarTemplateCollectionsNewResponse) SetBody(v *QueryStandarTemplateCollectionsNewResponseBody) *QueryStandarTemplateCollectionsNewResponse {
	s.Body = v
	return s
}

type QueryStandardProtocolRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	ProtocolType         *int32  `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryStandardProtocolRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStandardProtocolRequest) GoString() string {
	return s.String()
}

func (s *QueryStandardProtocolRequest) SetOwnerId(v int64) *QueryStandardProtocolRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryStandardProtocolRequest) SetProdCode(v string) *QueryStandardProtocolRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryStandardProtocolRequest) SetProtocolType(v int32) *QueryStandardProtocolRequest {
	s.ProtocolType = &v
	return s
}

func (s *QueryStandardProtocolRequest) SetResourceOwnerAccount(v string) *QueryStandardProtocolRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryStandardProtocolRequest) SetResourceOwnerId(v int64) *QueryStandardProtocolRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryStandardProtocolResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryStandardProtocolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryStandardProtocolResponseBody) GoString() string {
	return s.String()
}

func (s *QueryStandardProtocolResponseBody) SetRequestId(v string) *QueryStandardProtocolResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryStandardProtocolResponseBody) SetCode(v string) *QueryStandardProtocolResponseBody {
	s.Code = &v
	return s
}

func (s *QueryStandardProtocolResponseBody) SetData(v string) *QueryStandardProtocolResponseBody {
	s.Data = &v
	return s
}

type QueryStandardProtocolResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryStandardProtocolResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryStandardProtocolResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStandardProtocolResponse) GoString() string {
	return s.String()
}

func (s *QueryStandardProtocolResponse) SetHeaders(v map[string]*string) *QueryStandardProtocolResponse {
	s.Headers = v
	return s
}

func (s *QueryStandardProtocolResponse) SetStatusCode(v int32) *QueryStandardProtocolResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryStandardProtocolResponse) SetBody(v *QueryStandardProtocolResponseBody) *QueryStandardProtocolResponse {
	s.Body = v
	return s
}

type QueryStandardProtocolListNewRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	ProtocolType         *int32  `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryStandardProtocolListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryStandardProtocolListNewRequest) GoString() string {
	return s.String()
}

func (s *QueryStandardProtocolListNewRequest) SetOwnerId(v int64) *QueryStandardProtocolListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryStandardProtocolListNewRequest) SetProdCode(v string) *QueryStandardProtocolListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryStandardProtocolListNewRequest) SetProtocolType(v int32) *QueryStandardProtocolListNewRequest {
	s.ProtocolType = &v
	return s
}

func (s *QueryStandardProtocolListNewRequest) SetResourceOwnerAccount(v string) *QueryStandardProtocolListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryStandardProtocolListNewRequest) SetResourceOwnerId(v int64) *QueryStandardProtocolListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryStandardProtocolListNewResponseBody struct {
	List      []*QueryStandardProtocolListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNo    *int32                                          `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                          `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryStandardProtocolListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryStandardProtocolListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryStandardProtocolListNewResponseBody) SetList(v []*QueryStandardProtocolListNewResponseBodyList) *QueryStandardProtocolListNewResponseBody {
	s.List = v
	return s
}

func (s *QueryStandardProtocolListNewResponseBody) SetPageNo(v int32) *QueryStandardProtocolListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBody) SetPageSize(v int32) *QueryStandardProtocolListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBody) SetRequestId(v string) *QueryStandardProtocolListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBody) SetTotal(v int64) *QueryStandardProtocolListNewResponseBody {
	s.Total = &v
	return s
}

type QueryStandardProtocolListNewResponseBodyList struct {
	AuditOrderId    *string `json:"AuditOrderId,omitempty" xml:"AuditOrderId,omitempty"`
	CorpCode        *string `json:"CorpCode,omitempty" xml:"CorpCode,omitempty"`
	EffIpWhiteList  *string `json:"EffIpWhiteList,omitempty" xml:"EffIpWhiteList,omitempty"`
	FeatureCode     *int32  `json:"FeatureCode,omitempty" xml:"FeatureCode,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	IpAuditStatus   *int32  `json:"IpAuditStatus,omitempty" xml:"IpAuditStatus,omitempty"`
	IpWhiteList     *string `json:"IpWhiteList,omitempty" xml:"IpWhiteList,omitempty"`
	PartnerId       *int64  `json:"PartnerId,omitempty" xml:"PartnerId,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ProfileId       *int64  `json:"ProfileId,omitempty" xml:"ProfileId,omitempty"`
	ProtocolType    *int32  `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	ProtocolTypeStr *string `json:"ProtocolTypeStr,omitempty" xml:"ProtocolTypeStr,omitempty"`
	RealNameInsId   *int64  `json:"RealNameInsId,omitempty" xml:"RealNameInsId,omitempty"`
	ResCode         *string `json:"ResCode,omitempty" xml:"ResCode,omitempty"`
	SmsSign         *string `json:"SmsSign,omitempty" xml:"SmsSign,omitempty"`
	SmsType         *string `json:"SmsType,omitempty" xml:"SmsType,omitempty"`
	SpCode          *string `json:"SpCode,omitempty" xml:"SpCode,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TemplateCode    *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	UserLimit       *int32  `json:"UserLimit,omitempty" xml:"UserLimit,omitempty"`
	UserMaxChannel  *int32  `json:"UserMaxChannel,omitempty" xml:"UserMaxChannel,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	UserPwd         *string `json:"UserPwd,omitempty" xml:"UserPwd,omitempty"`
}

func (s QueryStandardProtocolListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryStandardProtocolListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetAuditOrderId(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.AuditOrderId = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetCorpCode(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.CorpCode = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetEffIpWhiteList(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.EffIpWhiteList = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetFeatureCode(v int32) *QueryStandardProtocolListNewResponseBodyList {
	s.FeatureCode = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetIp(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.Ip = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetIpAuditStatus(v int32) *QueryStandardProtocolListNewResponseBodyList {
	s.IpAuditStatus = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetIpWhiteList(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.IpWhiteList = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetPartnerId(v int64) *QueryStandardProtocolListNewResponseBodyList {
	s.PartnerId = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetPort(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.Port = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetProfileId(v int64) *QueryStandardProtocolListNewResponseBodyList {
	s.ProfileId = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetProtocolType(v int32) *QueryStandardProtocolListNewResponseBodyList {
	s.ProtocolType = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetProtocolTypeStr(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.ProtocolTypeStr = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetRealNameInsId(v int64) *QueryStandardProtocolListNewResponseBodyList {
	s.RealNameInsId = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetResCode(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.ResCode = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetSmsSign(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.SmsSign = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetSmsType(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.SmsType = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetSpCode(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.SpCode = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetStatus(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.Status = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetTemplateCode(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.TemplateCode = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetUserLimit(v int32) *QueryStandardProtocolListNewResponseBodyList {
	s.UserLimit = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetUserMaxChannel(v int32) *QueryStandardProtocolListNewResponseBodyList {
	s.UserMaxChannel = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetUserName(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.UserName = &v
	return s
}

func (s *QueryStandardProtocolListNewResponseBodyList) SetUserPwd(v string) *QueryStandardProtocolListNewResponseBodyList {
	s.UserPwd = &v
	return s
}

type QueryStandardProtocolListNewResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryStandardProtocolListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryStandardProtocolListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryStandardProtocolListNewResponse) GoString() string {
	return s.String()
}

func (s *QueryStandardProtocolListNewResponse) SetHeaders(v map[string]*string) *QueryStandardProtocolListNewResponse {
	s.Headers = v
	return s
}

func (s *QueryStandardProtocolListNewResponse) SetStatusCode(v int32) *QueryStandardProtocolListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryStandardProtocolListNewResponse) SetBody(v *QueryStandardProtocolListNewResponseBody) *QueryStandardProtocolListNewResponse {
	s.Body = v
	return s
}

type QueryTagResourcesRequest struct {
	Category  *string `json:"Category,omitempty" xml:"Category,omitempty"`
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageSize  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode  *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	ResourceType *string                        `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          []*QueryTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *QueryTagResourcesRequest) SetCategory(v string) *QueryTagResourcesRequest {
	s.Category = &v
	return s
}

func (s *QueryTagResourcesRequest) SetNextToken(v string) *QueryTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *QueryTagResourcesRequest) SetOwnerId(v int64) *QueryTagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryTagResourcesRequest) SetPageSize(v int32) *QueryTagResourcesRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTagResourcesRequest) SetProdCode(v string) *QueryTagResourcesRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryTagResourcesRequest) SetRegionId(v string) *QueryTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *QueryTagResourcesRequest) SetResourceId(v []*string) *QueryTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *QueryTagResourcesRequest) SetResourceOwnerAccount(v string) *QueryTagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryTagResourcesRequest) SetResourceOwnerId(v int64) *QueryTagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryTagResourcesRequest) SetResourceType(v string) *QueryTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *QueryTagResourcesRequest) SetTag(v []*QueryTagResourcesRequestTag) *QueryTagResourcesRequest {
	s.Tag = v
	return s
}

type QueryTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *QueryTagResourcesRequestTag) SetKey(v string) *QueryTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *QueryTagResourcesRequestTag) SetValue(v string) *QueryTagResourcesRequestTag {
	s.Value = &v
	return s
}

type QueryTagResourcesResponseBody struct {
	Code         *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data         *string                                      `json:"Data,omitempty" xml:"Data,omitempty"`
	NextToken    *string                                      `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources []*QueryTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s QueryTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTagResourcesResponseBody) SetCode(v string) *QueryTagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *QueryTagResourcesResponseBody) SetData(v string) *QueryTagResourcesResponseBody {
	s.Data = &v
	return s
}

func (s *QueryTagResourcesResponseBody) SetNextToken(v string) *QueryTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *QueryTagResourcesResponseBody) SetRequestId(v string) *QueryTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTagResourcesResponseBody) SetTagResources(v []*QueryTagResourcesResponseBodyTagResources) *QueryTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type QueryTagResourcesResponseBodyTagResources struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *QueryTagResourcesResponseBodyTagResources) SetResourceId(v string) *QueryTagResourcesResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *QueryTagResourcesResponseBodyTagResources) SetResourceType(v string) *QueryTagResourcesResponseBodyTagResources {
	s.ResourceType = &v
	return s
}

func (s *QueryTagResourcesResponseBodyTagResources) SetTagKey(v string) *QueryTagResourcesResponseBodyTagResources {
	s.TagKey = &v
	return s
}

func (s *QueryTagResourcesResponseBodyTagResources) SetTagValue(v string) *QueryTagResourcesResponseBodyTagResources {
	s.TagValue = &v
	return s
}

type QueryTagResourcesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *QueryTagResourcesResponse) SetHeaders(v map[string]*string) *QueryTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *QueryTagResourcesResponse) SetStatusCode(v int32) *QueryTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTagResourcesResponse) SetBody(v *QueryTagResourcesResponseBody) *QueryTagResourcesResponse {
	s.Body = v
	return s
}

type QueryTagResourcesNewRequest struct {
	Category  *string `json:"Category,omitempty" xml:"Category,omitempty"`
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageSize  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode  *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceIdListString *string   `json:"ResourceIdListString,omitempty" xml:"ResourceIdListString,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	ResourceType  *string                           `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag           []*QueryTagResourcesNewRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	TagListString *string                           `json:"TagListString,omitempty" xml:"TagListString,omitempty"`
}

func (s QueryTagResourcesNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResourcesNewRequest) GoString() string {
	return s.String()
}

func (s *QueryTagResourcesNewRequest) SetCategory(v string) *QueryTagResourcesNewRequest {
	s.Category = &v
	return s
}

func (s *QueryTagResourcesNewRequest) SetNextToken(v string) *QueryTagResourcesNewRequest {
	s.NextToken = &v
	return s
}

func (s *QueryTagResourcesNewRequest) SetOwnerId(v int64) *QueryTagResourcesNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryTagResourcesNewRequest) SetPageSize(v int32) *QueryTagResourcesNewRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTagResourcesNewRequest) SetProdCode(v string) *QueryTagResourcesNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryTagResourcesNewRequest) SetRegionId(v string) *QueryTagResourcesNewRequest {
	s.RegionId = &v
	return s
}

func (s *QueryTagResourcesNewRequest) SetResourceId(v []*string) *QueryTagResourcesNewRequest {
	s.ResourceId = v
	return s
}

func (s *QueryTagResourcesNewRequest) SetResourceIdListString(v string) *QueryTagResourcesNewRequest {
	s.ResourceIdListString = &v
	return s
}

func (s *QueryTagResourcesNewRequest) SetResourceOwnerAccount(v string) *QueryTagResourcesNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryTagResourcesNewRequest) SetResourceOwnerId(v int64) *QueryTagResourcesNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryTagResourcesNewRequest) SetResourceType(v string) *QueryTagResourcesNewRequest {
	s.ResourceType = &v
	return s
}

func (s *QueryTagResourcesNewRequest) SetTag(v []*QueryTagResourcesNewRequestTag) *QueryTagResourcesNewRequest {
	s.Tag = v
	return s
}

func (s *QueryTagResourcesNewRequest) SetTagListString(v string) *QueryTagResourcesNewRequest {
	s.TagListString = &v
	return s
}

type QueryTagResourcesNewRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryTagResourcesNewRequestTag) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResourcesNewRequestTag) GoString() string {
	return s.String()
}

func (s *QueryTagResourcesNewRequestTag) SetKey(v string) *QueryTagResourcesNewRequestTag {
	s.Key = &v
	return s
}

func (s *QueryTagResourcesNewRequestTag) SetValue(v string) *QueryTagResourcesNewRequestTag {
	s.Value = &v
	return s
}

type QueryTagResourcesNewResponseBody struct {
	NextToken    *string                                         `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources []*QueryTagResourcesNewResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s QueryTagResourcesNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResourcesNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTagResourcesNewResponseBody) SetNextToken(v string) *QueryTagResourcesNewResponseBody {
	s.NextToken = &v
	return s
}

func (s *QueryTagResourcesNewResponseBody) SetRequestId(v string) *QueryTagResourcesNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTagResourcesNewResponseBody) SetTagResources(v []*QueryTagResourcesNewResponseBodyTagResources) *QueryTagResourcesNewResponseBody {
	s.TagResources = v
	return s
}

type QueryTagResourcesNewResponseBodyTagResources struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s QueryTagResourcesNewResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResourcesNewResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *QueryTagResourcesNewResponseBodyTagResources) SetResourceId(v string) *QueryTagResourcesNewResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *QueryTagResourcesNewResponseBodyTagResources) SetResourceType(v string) *QueryTagResourcesNewResponseBodyTagResources {
	s.ResourceType = &v
	return s
}

func (s *QueryTagResourcesNewResponseBodyTagResources) SetTagKey(v string) *QueryTagResourcesNewResponseBodyTagResources {
	s.TagKey = &v
	return s
}

func (s *QueryTagResourcesNewResponseBodyTagResources) SetTagValue(v string) *QueryTagResourcesNewResponseBodyTagResources {
	s.TagValue = &v
	return s
}

type QueryTagResourcesNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryTagResourcesNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryTagResourcesNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResourcesNewResponse) GoString() string {
	return s.String()
}

func (s *QueryTagResourcesNewResponse) SetHeaders(v map[string]*string) *QueryTagResourcesNewResponse {
	s.Headers = v
	return s
}

func (s *QueryTagResourcesNewResponse) SetStatusCode(v int32) *QueryTagResourcesNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTagResourcesNewResponse) SetBody(v *QueryTagResourcesNewResponseBody) *QueryTagResourcesNewResponse {
	s.Body = v
	return s
}

type QueryTmpEffectReportDataRequest struct {
	// This parameter is required.
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// This parameter is required.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// This parameter is required.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	StartDate  *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	TmpCode    *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpName    *string `json:"TmpName,omitempty" xml:"TmpName,omitempty"`
	VendorCode *string `json:"VendorCode,omitempty" xml:"VendorCode,omitempty"`
	VendorName *string `json:"VendorName,omitempty" xml:"VendorName,omitempty"`
}

func (s QueryTmpEffectReportDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTmpEffectReportDataRequest) GoString() string {
	return s.String()
}

func (s *QueryTmpEffectReportDataRequest) SetEndDate(v string) *QueryTmpEffectReportDataRequest {
	s.EndDate = &v
	return s
}

func (s *QueryTmpEffectReportDataRequest) SetPageNo(v int64) *QueryTmpEffectReportDataRequest {
	s.PageNo = &v
	return s
}

func (s *QueryTmpEffectReportDataRequest) SetPageSize(v int64) *QueryTmpEffectReportDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTmpEffectReportDataRequest) SetStartDate(v string) *QueryTmpEffectReportDataRequest {
	s.StartDate = &v
	return s
}

func (s *QueryTmpEffectReportDataRequest) SetTmpCode(v string) *QueryTmpEffectReportDataRequest {
	s.TmpCode = &v
	return s
}

func (s *QueryTmpEffectReportDataRequest) SetTmpName(v string) *QueryTmpEffectReportDataRequest {
	s.TmpName = &v
	return s
}

func (s *QueryTmpEffectReportDataRequest) SetVendorCode(v string) *QueryTmpEffectReportDataRequest {
	s.VendorCode = &v
	return s
}

func (s *QueryTmpEffectReportDataRequest) SetVendorName(v string) *QueryTmpEffectReportDataRequest {
	s.VendorName = &v
	return s
}

type QueryTmpEffectReportDataResponseBody struct {
	Code      *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *QueryTmpEffectReportDataResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Struct"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryTmpEffectReportDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTmpEffectReportDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTmpEffectReportDataResponseBody) SetCode(v string) *QueryTmpEffectReportDataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBody) SetModel(v *QueryTmpEffectReportDataResponseBodyModel) *QueryTmpEffectReportDataResponseBody {
	s.Model = v
	return s
}

func (s *QueryTmpEffectReportDataResponseBody) SetRequestId(v string) *QueryTmpEffectReportDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBody) SetSuccess(v bool) *QueryTmpEffectReportDataResponseBody {
	s.Success = &v
	return s
}

type QueryTmpEffectReportDataResponseBodyModel struct {
	PageNo     *int64                                              `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *int64                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*QueryTmpEffectReportDataResponseBodyModelRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryTmpEffectReportDataResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s QueryTmpEffectReportDataResponseBodyModel) GoString() string {
	return s.String()
}

func (s *QueryTmpEffectReportDataResponseBodyModel) SetPageNo(v int64) *QueryTmpEffectReportDataResponseBodyModel {
	s.PageNo = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModel) SetPageSize(v int64) *QueryTmpEffectReportDataResponseBodyModel {
	s.PageSize = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModel) SetRecords(v []*QueryTmpEffectReportDataResponseBodyModelRecords) *QueryTmpEffectReportDataResponseBodyModel {
	s.Records = v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModel) SetTotalCount(v int64) *QueryTmpEffectReportDataResponseBodyModel {
	s.TotalCount = &v
	return s
}

type QueryTmpEffectReportDataResponseBodyModelRecords struct {
	ClickPv         *string `json:"ClickPv,omitempty" xml:"ClickPv,omitempty"`
	ClickUv         *string `json:"ClickUv,omitempty" xml:"ClickUv,omitempty"`
	Date            *string `json:"Date,omitempty" xml:"Date,omitempty"`
	ExposePv        *string `json:"ExposePv,omitempty" xml:"ExposePv,omitempty"`
	ExposeUv        *string `json:"ExposeUv,omitempty" xml:"ExposeUv,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RptSuccessCount *string `json:"RptSuccessCount,omitempty" xml:"RptSuccessCount,omitempty"`
	TmpCode         *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpName         *string `json:"TmpName,omitempty" xml:"TmpName,omitempty"`
	VendorName      *string `json:"VendorName,omitempty" xml:"VendorName,omitempty"`
}

func (s QueryTmpEffectReportDataResponseBodyModelRecords) String() string {
	return tea.Prettify(s)
}

func (s QueryTmpEffectReportDataResponseBodyModelRecords) GoString() string {
	return s.String()
}

func (s *QueryTmpEffectReportDataResponseBodyModelRecords) SetClickPv(v string) *QueryTmpEffectReportDataResponseBodyModelRecords {
	s.ClickPv = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModelRecords) SetClickUv(v string) *QueryTmpEffectReportDataResponseBodyModelRecords {
	s.ClickUv = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModelRecords) SetDate(v string) *QueryTmpEffectReportDataResponseBodyModelRecords {
	s.Date = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModelRecords) SetExposePv(v string) *QueryTmpEffectReportDataResponseBodyModelRecords {
	s.ExposePv = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModelRecords) SetExposeUv(v string) *QueryTmpEffectReportDataResponseBodyModelRecords {
	s.ExposeUv = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModelRecords) SetId(v int64) *QueryTmpEffectReportDataResponseBodyModelRecords {
	s.Id = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModelRecords) SetRptSuccessCount(v string) *QueryTmpEffectReportDataResponseBodyModelRecords {
	s.RptSuccessCount = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModelRecords) SetTmpCode(v string) *QueryTmpEffectReportDataResponseBodyModelRecords {
	s.TmpCode = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModelRecords) SetTmpName(v string) *QueryTmpEffectReportDataResponseBodyModelRecords {
	s.TmpName = &v
	return s
}

func (s *QueryTmpEffectReportDataResponseBodyModelRecords) SetVendorName(v string) *QueryTmpEffectReportDataResponseBodyModelRecords {
	s.VendorName = &v
	return s
}

type QueryTmpEffectReportDataResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryTmpEffectReportDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryTmpEffectReportDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTmpEffectReportDataResponse) GoString() string {
	return s.String()
}

func (s *QueryTmpEffectReportDataResponse) SetHeaders(v map[string]*string) *QueryTmpEffectReportDataResponse {
	s.Headers = v
	return s
}

func (s *QueryTmpEffectReportDataResponse) SetStatusCode(v int32) *QueryTmpEffectReportDataResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTmpEffectReportDataResponse) SetBody(v *QueryTmpEffectReportDataResponseBody) *QueryTmpEffectReportDataResponse {
	s.Body = v
	return s
}

type QueryTmpEffectReportDayDataRequest struct {
	// This parameter is required.
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// This parameter is required.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// This parameter is required.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	StartDate  *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	TmpCode    *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpName    *string `json:"TmpName,omitempty" xml:"TmpName,omitempty"`
	VendorName *string `json:"VendorName,omitempty" xml:"VendorName,omitempty"`
}

func (s QueryTmpEffectReportDayDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTmpEffectReportDayDataRequest) GoString() string {
	return s.String()
}

func (s *QueryTmpEffectReportDayDataRequest) SetEndDate(v string) *QueryTmpEffectReportDayDataRequest {
	s.EndDate = &v
	return s
}

func (s *QueryTmpEffectReportDayDataRequest) SetPageNo(v int64) *QueryTmpEffectReportDayDataRequest {
	s.PageNo = &v
	return s
}

func (s *QueryTmpEffectReportDayDataRequest) SetPageSize(v int64) *QueryTmpEffectReportDayDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTmpEffectReportDayDataRequest) SetStartDate(v string) *QueryTmpEffectReportDayDataRequest {
	s.StartDate = &v
	return s
}

func (s *QueryTmpEffectReportDayDataRequest) SetTmpCode(v string) *QueryTmpEffectReportDayDataRequest {
	s.TmpCode = &v
	return s
}

func (s *QueryTmpEffectReportDayDataRequest) SetTmpName(v string) *QueryTmpEffectReportDayDataRequest {
	s.TmpName = &v
	return s
}

func (s *QueryTmpEffectReportDayDataRequest) SetVendorName(v string) *QueryTmpEffectReportDayDataRequest {
	s.VendorName = &v
	return s
}

type QueryTmpEffectReportDayDataResponseBody struct {
	Code      *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Model     *QueryTmpEffectReportDayDataResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Struct"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryTmpEffectReportDayDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTmpEffectReportDayDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTmpEffectReportDayDataResponseBody) SetCode(v string) *QueryTmpEffectReportDayDataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBody) SetModel(v *QueryTmpEffectReportDayDataResponseBodyModel) *QueryTmpEffectReportDayDataResponseBody {
	s.Model = v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBody) SetRequestId(v string) *QueryTmpEffectReportDayDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBody) SetSuccess(v bool) *QueryTmpEffectReportDayDataResponseBody {
	s.Success = &v
	return s
}

type QueryTmpEffectReportDayDataResponseBodyModel struct {
	PageNo     *int64                                                 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize   *int64                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Records    []*QueryTmpEffectReportDayDataResponseBodyModelRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
	TotalCount *int64                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryTmpEffectReportDayDataResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s QueryTmpEffectReportDayDataResponseBodyModel) GoString() string {
	return s.String()
}

func (s *QueryTmpEffectReportDayDataResponseBodyModel) SetPageNo(v int64) *QueryTmpEffectReportDayDataResponseBodyModel {
	s.PageNo = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModel) SetPageSize(v int64) *QueryTmpEffectReportDayDataResponseBodyModel {
	s.PageSize = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModel) SetRecords(v []*QueryTmpEffectReportDayDataResponseBodyModelRecords) *QueryTmpEffectReportDayDataResponseBodyModel {
	s.Records = v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModel) SetTotalCount(v int64) *QueryTmpEffectReportDayDataResponseBodyModel {
	s.TotalCount = &v
	return s
}

type QueryTmpEffectReportDayDataResponseBodyModelRecords struct {
	ClickPv         *string `json:"ClickPv,omitempty" xml:"ClickPv,omitempty"`
	ClickUv         *string `json:"ClickUv,omitempty" xml:"ClickUv,omitempty"`
	Date            *string `json:"Date,omitempty" xml:"Date,omitempty"`
	ExposePv        *string `json:"ExposePv,omitempty" xml:"ExposePv,omitempty"`
	ExposeUv        *string `json:"ExposeUv,omitempty" xml:"ExposeUv,omitempty"`
	RptSuccessCount *string `json:"RptSuccessCount,omitempty" xml:"RptSuccessCount,omitempty"`
	TmpCode         *string `json:"TmpCode,omitempty" xml:"TmpCode,omitempty"`
	TmpName         *string `json:"TmpName,omitempty" xml:"TmpName,omitempty"`
	VendorName      *string `json:"VendorName,omitempty" xml:"VendorName,omitempty"`
}

func (s QueryTmpEffectReportDayDataResponseBodyModelRecords) String() string {
	return tea.Prettify(s)
}

func (s QueryTmpEffectReportDayDataResponseBodyModelRecords) GoString() string {
	return s.String()
}

func (s *QueryTmpEffectReportDayDataResponseBodyModelRecords) SetClickPv(v string) *QueryTmpEffectReportDayDataResponseBodyModelRecords {
	s.ClickPv = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModelRecords) SetClickUv(v string) *QueryTmpEffectReportDayDataResponseBodyModelRecords {
	s.ClickUv = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModelRecords) SetDate(v string) *QueryTmpEffectReportDayDataResponseBodyModelRecords {
	s.Date = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModelRecords) SetExposePv(v string) *QueryTmpEffectReportDayDataResponseBodyModelRecords {
	s.ExposePv = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModelRecords) SetExposeUv(v string) *QueryTmpEffectReportDayDataResponseBodyModelRecords {
	s.ExposeUv = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModelRecords) SetRptSuccessCount(v string) *QueryTmpEffectReportDayDataResponseBodyModelRecords {
	s.RptSuccessCount = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModelRecords) SetTmpCode(v string) *QueryTmpEffectReportDayDataResponseBodyModelRecords {
	s.TmpCode = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModelRecords) SetTmpName(v string) *QueryTmpEffectReportDayDataResponseBodyModelRecords {
	s.TmpName = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponseBodyModelRecords) SetVendorName(v string) *QueryTmpEffectReportDayDataResponseBodyModelRecords {
	s.VendorName = &v
	return s
}

type QueryTmpEffectReportDayDataResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryTmpEffectReportDayDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryTmpEffectReportDayDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTmpEffectReportDayDataResponse) GoString() string {
	return s.String()
}

func (s *QueryTmpEffectReportDayDataResponse) SetHeaders(v map[string]*string) *QueryTmpEffectReportDayDataResponse {
	s.Headers = v
	return s
}

func (s *QueryTmpEffectReportDayDataResponse) SetStatusCode(v int32) *QueryTmpEffectReportDayDataResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTmpEffectReportDayDataResponse) SetBody(v *QueryTmpEffectReportDayDataResponseBody) *QueryTmpEffectReportDayDataResponse {
	s.Body = v
	return s
}

type QueryUsertagExistenceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	UsertagPosition *int32 `json:"UsertagPosition,omitempty" xml:"UsertagPosition,omitempty"`
}

func (s QueryUsertagExistenceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUsertagExistenceRequest) GoString() string {
	return s.String()
}

func (s *QueryUsertagExistenceRequest) SetOwnerId(v int64) *QueryUsertagExistenceRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryUsertagExistenceRequest) SetProdCode(v string) *QueryUsertagExistenceRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryUsertagExistenceRequest) SetResourceOwnerAccount(v string) *QueryUsertagExistenceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryUsertagExistenceRequest) SetResourceOwnerId(v int64) *QueryUsertagExistenceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryUsertagExistenceRequest) SetUsertagPosition(v int32) *QueryUsertagExistenceRequest {
	s.UsertagPosition = &v
	return s
}

type QueryUsertagExistenceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *bool   `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryUsertagExistenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryUsertagExistenceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryUsertagExistenceResponseBody) SetRequestId(v string) *QueryUsertagExistenceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryUsertagExistenceResponseBody) SetCode(v string) *QueryUsertagExistenceResponseBody {
	s.Code = &v
	return s
}

func (s *QueryUsertagExistenceResponseBody) SetData(v bool) *QueryUsertagExistenceResponseBody {
	s.Data = &v
	return s
}

type QueryUsertagExistenceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryUsertagExistenceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryUsertagExistenceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUsertagExistenceResponse) GoString() string {
	return s.String()
}

func (s *QueryUsertagExistenceResponse) SetHeaders(v map[string]*string) *QueryUsertagExistenceResponse {
	s.Headers = v
	return s
}

func (s *QueryUsertagExistenceResponse) SetStatusCode(v int32) *QueryUsertagExistenceResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryUsertagExistenceResponse) SetBody(v *QueryUsertagExistenceResponseBody) *QueryUsertagExistenceResponse {
	s.Body = v
	return s
}

type QueryWarningThresholdRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryWarningThresholdRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWarningThresholdRequest) GoString() string {
	return s.String()
}

func (s *QueryWarningThresholdRequest) SetBizType(v string) *QueryWarningThresholdRequest {
	s.BizType = &v
	return s
}

func (s *QueryWarningThresholdRequest) SetOwnerId(v int64) *QueryWarningThresholdRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryWarningThresholdRequest) SetProdCode(v string) *QueryWarningThresholdRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryWarningThresholdRequest) SetResourceOwnerAccount(v string) *QueryWarningThresholdRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryWarningThresholdRequest) SetResourceOwnerId(v int64) *QueryWarningThresholdRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryWarningThresholdResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s QueryWarningThresholdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryWarningThresholdResponseBody) GoString() string {
	return s.String()
}

func (s *QueryWarningThresholdResponseBody) SetRequestId(v string) *QueryWarningThresholdResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryWarningThresholdResponseBody) SetCode(v string) *QueryWarningThresholdResponseBody {
	s.Code = &v
	return s
}

func (s *QueryWarningThresholdResponseBody) SetData(v string) *QueryWarningThresholdResponseBody {
	s.Data = &v
	return s
}

type QueryWarningThresholdResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryWarningThresholdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryWarningThresholdResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWarningThresholdResponse) GoString() string {
	return s.String()
}

func (s *QueryWarningThresholdResponse) SetHeaders(v map[string]*string) *QueryWarningThresholdResponse {
	s.Headers = v
	return s
}

func (s *QueryWarningThresholdResponse) SetStatusCode(v int32) *QueryWarningThresholdResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryWarningThresholdResponse) SetBody(v *QueryWarningThresholdResponseBody) *QueryWarningThresholdResponse {
	s.Body = v
	return s
}

type QueryWarningThresholdNewRequest struct {
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryWarningThresholdNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWarningThresholdNewRequest) GoString() string {
	return s.String()
}

func (s *QueryWarningThresholdNewRequest) SetBizType(v string) *QueryWarningThresholdNewRequest {
	s.BizType = &v
	return s
}

func (s *QueryWarningThresholdNewRequest) SetOwnerId(v int64) *QueryWarningThresholdNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryWarningThresholdNewRequest) SetProdCode(v string) *QueryWarningThresholdNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryWarningThresholdNewRequest) SetResourceOwnerAccount(v string) *QueryWarningThresholdNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryWarningThresholdNewRequest) SetResourceOwnerId(v int64) *QueryWarningThresholdNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryWarningThresholdNewResponseBody struct {
	BizType                *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ContactPhone           *string `json:"ContactPhone,omitempty" xml:"ContactPhone,omitempty"`
	DailyHaltLimit         *int32  `json:"DailyHaltLimit,omitempty" xml:"DailyHaltLimit,omitempty"`
	DailyWarningLimit      *int32  `json:"DailyWarningLimit,omitempty" xml:"DailyWarningLimit,omitempty"`
	DomesticDailySuccess   *int64  `json:"DomesticDailySuccess,omitempty" xml:"DomesticDailySuccess,omitempty"`
	DomesticDailyTotal     *int64  `json:"DomesticDailyTotal,omitempty" xml:"DomesticDailyTotal,omitempty"`
	DomesticMonthlySuccess *int64  `json:"DomesticMonthlySuccess,omitempty" xml:"DomesticMonthlySuccess,omitempty"`
	DomesticMonthlyTotal   *int64  `json:"DomesticMonthlyTotal,omitempty" xml:"DomesticMonthlyTotal,omitempty"`
	MonthlyHaltLimit       *int32  `json:"MonthlyHaltLimit,omitempty" xml:"MonthlyHaltLimit,omitempty"`
	MonthlyWarningLimit    *int32  `json:"MonthlyWarningLimit,omitempty" xml:"MonthlyWarningLimit,omitempty"`
	OutDailySuccess        *int64  `json:"OutDailySuccess,omitempty" xml:"OutDailySuccess,omitempty"`
	OutDailyTotal          *int64  `json:"OutDailyTotal,omitempty" xml:"OutDailyTotal,omitempty"`
	OutMonthlySuccess      *int64  `json:"OutMonthlySuccess,omitempty" xml:"OutMonthlySuccess,omitempty"`
	OutMonthlyTotal        *int64  `json:"OutMonthlyTotal,omitempty" xml:"OutMonthlyTotal,omitempty"`
	PrevWaringNotice       *bool   `json:"PrevWaringNotice,omitempty" xml:"PrevWaringNotice,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryWarningThresholdNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryWarningThresholdNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryWarningThresholdNewResponseBody) SetBizType(v string) *QueryWarningThresholdNewResponseBody {
	s.BizType = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetContactPhone(v string) *QueryWarningThresholdNewResponseBody {
	s.ContactPhone = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetDailyHaltLimit(v int32) *QueryWarningThresholdNewResponseBody {
	s.DailyHaltLimit = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetDailyWarningLimit(v int32) *QueryWarningThresholdNewResponseBody {
	s.DailyWarningLimit = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetDomesticDailySuccess(v int64) *QueryWarningThresholdNewResponseBody {
	s.DomesticDailySuccess = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetDomesticDailyTotal(v int64) *QueryWarningThresholdNewResponseBody {
	s.DomesticDailyTotal = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetDomesticMonthlySuccess(v int64) *QueryWarningThresholdNewResponseBody {
	s.DomesticMonthlySuccess = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetDomesticMonthlyTotal(v int64) *QueryWarningThresholdNewResponseBody {
	s.DomesticMonthlyTotal = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetMonthlyHaltLimit(v int32) *QueryWarningThresholdNewResponseBody {
	s.MonthlyHaltLimit = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetMonthlyWarningLimit(v int32) *QueryWarningThresholdNewResponseBody {
	s.MonthlyWarningLimit = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetOutDailySuccess(v int64) *QueryWarningThresholdNewResponseBody {
	s.OutDailySuccess = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetOutDailyTotal(v int64) *QueryWarningThresholdNewResponseBody {
	s.OutDailyTotal = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetOutMonthlySuccess(v int64) *QueryWarningThresholdNewResponseBody {
	s.OutMonthlySuccess = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetOutMonthlyTotal(v int64) *QueryWarningThresholdNewResponseBody {
	s.OutMonthlyTotal = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetPrevWaringNotice(v bool) *QueryWarningThresholdNewResponseBody {
	s.PrevWaringNotice = &v
	return s
}

func (s *QueryWarningThresholdNewResponseBody) SetRequestId(v string) *QueryWarningThresholdNewResponseBody {
	s.RequestId = &v
	return s
}

type QueryWarningThresholdNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryWarningThresholdNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryWarningThresholdNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWarningThresholdNewResponse) GoString() string {
	return s.String()
}

func (s *QueryWarningThresholdNewResponse) SetHeaders(v map[string]*string) *QueryWarningThresholdNewResponse {
	s.Headers = v
	return s
}

func (s *QueryWarningThresholdNewResponse) SetStatusCode(v int32) *QueryWarningThresholdNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryWarningThresholdNewResponse) SetBody(v *QueryWarningThresholdNewResponseBody) *QueryWarningThresholdNewResponse {
	s.Body = v
	return s
}

type QueryWorkOrdAuditListNewRequest struct {
	OrderId              *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryWorkOrdAuditListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkOrdAuditListNewRequest) GoString() string {
	return s.String()
}

func (s *QueryWorkOrdAuditListNewRequest) SetOrderId(v string) *QueryWorkOrdAuditListNewRequest {
	s.OrderId = &v
	return s
}

func (s *QueryWorkOrdAuditListNewRequest) SetOwnerId(v int64) *QueryWorkOrdAuditListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryWorkOrdAuditListNewRequest) SetProdCode(v string) *QueryWorkOrdAuditListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryWorkOrdAuditListNewRequest) SetResourceOwnerAccount(v string) *QueryWorkOrdAuditListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryWorkOrdAuditListNewRequest) SetResourceOwnerId(v int64) *QueryWorkOrdAuditListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryWorkOrdAuditListNewResponseBody struct {
	List      []*QueryWorkOrdAuditListNewResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNo    *int32                                      `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *int64                                      `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryWorkOrdAuditListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkOrdAuditListNewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryWorkOrdAuditListNewResponseBody) SetList(v []*QueryWorkOrdAuditListNewResponseBodyList) *QueryWorkOrdAuditListNewResponseBody {
	s.List = v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBody) SetPageNo(v int32) *QueryWorkOrdAuditListNewResponseBody {
	s.PageNo = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBody) SetPageSize(v int32) *QueryWorkOrdAuditListNewResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBody) SetRequestId(v string) *QueryWorkOrdAuditListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBody) SetTotal(v int64) *QueryWorkOrdAuditListNewResponseBody {
	s.Total = &v
	return s
}

type QueryWorkOrdAuditListNewResponseBodyList struct {
	AuditRemark *string                                        `json:"AuditRemark,omitempty" xml:"AuditRemark,omitempty"`
	AuditResult *string                                        `json:"AuditResult,omitempty" xml:"AuditResult,omitempty"`
	BizType     *string                                        `json:"BizType,omitempty" xml:"BizType,omitempty"`
	CreateDate  *string                                        `json:"CreateDate,omitempty" xml:"CreateDate,omitempty"`
	OrdId       *string                                        `json:"OrdId,omitempty" xml:"OrdId,omitempty"`
	OrdStatus   *string                                        `json:"OrdStatus,omitempty" xml:"OrdStatus,omitempty"`
	Param       *QueryWorkOrdAuditListNewResponseBodyListParam `json:"Param,omitempty" xml:"Param,omitempty" type:"Struct"`
}

func (s QueryWorkOrdAuditListNewResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkOrdAuditListNewResponseBodyList) GoString() string {
	return s.String()
}

func (s *QueryWorkOrdAuditListNewResponseBodyList) SetAuditRemark(v string) *QueryWorkOrdAuditListNewResponseBodyList {
	s.AuditRemark = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyList) SetAuditResult(v string) *QueryWorkOrdAuditListNewResponseBodyList {
	s.AuditResult = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyList) SetBizType(v string) *QueryWorkOrdAuditListNewResponseBodyList {
	s.BizType = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyList) SetCreateDate(v string) *QueryWorkOrdAuditListNewResponseBodyList {
	s.CreateDate = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyList) SetOrdId(v string) *QueryWorkOrdAuditListNewResponseBodyList {
	s.OrdId = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyList) SetOrdStatus(v string) *QueryWorkOrdAuditListNewResponseBodyList {
	s.OrdStatus = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyList) SetParam(v *QueryWorkOrdAuditListNewResponseBodyListParam) *QueryWorkOrdAuditListNewResponseBodyList {
	s.Param = v
	return s
}

type QueryWorkOrdAuditListNewResponseBodyListParam struct {
	AuditInfo       *string                                                       `json:"AuditInfo,omitempty" xml:"AuditInfo,omitempty"`
	AuditRemarkInfo *QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo `json:"AuditRemarkInfo,omitempty" xml:"AuditRemarkInfo,omitempty" type:"Struct"`
	AuditState      *QueryWorkOrdAuditListNewResponseBodyListParamAuditState      `json:"AuditState,omitempty" xml:"AuditState,omitempty" type:"Struct"`
	BusinessType    *int32                                                        `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	ExtendMessage   *string                                                       `json:"ExtendMessage,omitempty" xml:"ExtendMessage,omitempty"`
	FileIds         []*int64                                                      `json:"FileIds,omitempty" xml:"FileIds,omitempty" type:"Repeated"`
	FileUrlList     []*string                                                     `json:"FileUrlList,omitempty" xml:"FileUrlList,omitempty" type:"Repeated"`
	GmtCreateStr    *string                                                       `json:"GmtCreateStr,omitempty" xml:"GmtCreateStr,omitempty"`
	Id              *int64                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	OrderId         *string                                                       `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PartnerId       *int64                                                        `json:"PartnerId,omitempty" xml:"PartnerId,omitempty"`
	Remark          *string                                                       `json:"Remark,omitempty" xml:"Remark,omitempty"`
	SceneType       *int32                                                        `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	SignName        *string                                                       `json:"SignName,omitempty" xml:"SignName,omitempty"`
	SignType        *int32                                                        `json:"SignType,omitempty" xml:"SignType,omitempty"`
}

func (s QueryWorkOrdAuditListNewResponseBodyListParam) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkOrdAuditListNewResponseBodyListParam) GoString() string {
	return s.String()
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetAuditInfo(v string) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.AuditInfo = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetAuditRemarkInfo(v *QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.AuditRemarkInfo = v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetAuditState(v *QueryWorkOrdAuditListNewResponseBodyListParamAuditState) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.AuditState = v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetBusinessType(v int32) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.BusinessType = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetExtendMessage(v string) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.ExtendMessage = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetFileIds(v []*int64) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.FileIds = v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetFileUrlList(v []*string) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.FileUrlList = v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetGmtCreateStr(v string) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.GmtCreateStr = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetId(v int64) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.Id = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetOrderId(v string) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.OrderId = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetPartnerId(v int64) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.PartnerId = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetRemark(v string) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.Remark = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetSceneType(v int32) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.SceneType = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetSignName(v string) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.SignName = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParam) SetSignType(v int32) *QueryWorkOrdAuditListNewResponseBodyListParam {
	s.SignType = &v
	return s
}

type QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo struct {
	RejectDate    *string `json:"RejectDate,omitempty" xml:"RejectDate,omitempty"`
	RejectInfo    *string `json:"RejectInfo,omitempty" xml:"RejectInfo,omitempty"`
	RejectSubInfo *string `json:"RejectSubInfo,omitempty" xml:"RejectSubInfo,omitempty"`
}

func (s QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo) GoString() string {
	return s.String()
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo) SetRejectDate(v string) *QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo {
	s.RejectDate = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo) SetRejectInfo(v string) *QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo {
	s.RejectInfo = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo) SetRejectSubInfo(v string) *QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo {
	s.RejectSubInfo = &v
	return s
}

type QueryWorkOrdAuditListNewResponseBodyListParamAuditState struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *int32  `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryWorkOrdAuditListNewResponseBodyListParamAuditState) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkOrdAuditListNewResponseBodyListParamAuditState) GoString() string {
	return s.String()
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParamAuditState) SetKey(v string) *QueryWorkOrdAuditListNewResponseBodyListParamAuditState {
	s.Key = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParamAuditState) SetName(v string) *QueryWorkOrdAuditListNewResponseBodyListParamAuditState {
	s.Name = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponseBodyListParamAuditState) SetValue(v int32) *QueryWorkOrdAuditListNewResponseBodyListParamAuditState {
	s.Value = &v
	return s
}

type QueryWorkOrdAuditListNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryWorkOrdAuditListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryWorkOrdAuditListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWorkOrdAuditListNewResponse) GoString() string {
	return s.String()
}

func (s *QueryWorkOrdAuditListNewResponse) SetHeaders(v map[string]*string) *QueryWorkOrdAuditListNewResponse {
	s.Headers = v
	return s
}

func (s *QueryWorkOrdAuditListNewResponse) SetStatusCode(v int32) *QueryWorkOrdAuditListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryWorkOrdAuditListNewResponse) SetBody(v *QueryWorkOrdAuditListNewResponseBody) *QueryWorkOrdAuditListNewResponse {
	s.Body = v
	return s
}

type SaveContactsNewRequest struct {
	Email                          *string `json:"Email,omitempty" xml:"Email,omitempty"`
	Id                             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name                           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OpenPkgWarning                 *int32  `json:"OpenPkgWarning,omitempty" xml:"OpenPkgWarning,omitempty"`
	OpenPreventBrushWarning        *int32  `json:"OpenPreventBrushWarning,omitempty" xml:"OpenPreventBrushWarning,omitempty"`
	OpenSendWarning                *int32  `json:"OpenSendWarning,omitempty" xml:"OpenSendWarning,omitempty"`
	OwnerId                        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Phone                          *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	ProdCode                       *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ReceiveSignTemplateAuditResult *int32  `json:"ReceiveSignTemplateAuditResult,omitempty" xml:"ReceiveSignTemplateAuditResult,omitempty"`
	ResourceOwnerAccount           *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	VerificationCode               *string `json:"VerificationCode,omitempty" xml:"VerificationCode,omitempty"`
}

func (s SaveContactsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveContactsNewRequest) GoString() string {
	return s.String()
}

func (s *SaveContactsNewRequest) SetEmail(v string) *SaveContactsNewRequest {
	s.Email = &v
	return s
}

func (s *SaveContactsNewRequest) SetId(v int64) *SaveContactsNewRequest {
	s.Id = &v
	return s
}

func (s *SaveContactsNewRequest) SetName(v string) *SaveContactsNewRequest {
	s.Name = &v
	return s
}

func (s *SaveContactsNewRequest) SetOpenPkgWarning(v int32) *SaveContactsNewRequest {
	s.OpenPkgWarning = &v
	return s
}

func (s *SaveContactsNewRequest) SetOpenPreventBrushWarning(v int32) *SaveContactsNewRequest {
	s.OpenPreventBrushWarning = &v
	return s
}

func (s *SaveContactsNewRequest) SetOpenSendWarning(v int32) *SaveContactsNewRequest {
	s.OpenSendWarning = &v
	return s
}

func (s *SaveContactsNewRequest) SetOwnerId(v int64) *SaveContactsNewRequest {
	s.OwnerId = &v
	return s
}

func (s *SaveContactsNewRequest) SetPhone(v string) *SaveContactsNewRequest {
	s.Phone = &v
	return s
}

func (s *SaveContactsNewRequest) SetProdCode(v string) *SaveContactsNewRequest {
	s.ProdCode = &v
	return s
}

func (s *SaveContactsNewRequest) SetReceiveSignTemplateAuditResult(v int32) *SaveContactsNewRequest {
	s.ReceiveSignTemplateAuditResult = &v
	return s
}

func (s *SaveContactsNewRequest) SetResourceOwnerAccount(v string) *SaveContactsNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SaveContactsNewRequest) SetResourceOwnerId(v int64) *SaveContactsNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SaveContactsNewRequest) SetVerificationCode(v string) *SaveContactsNewRequest {
	s.VerificationCode = &v
	return s
}

type SaveContactsNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s SaveContactsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveContactsNewResponseBody) GoString() string {
	return s.String()
}

func (s *SaveContactsNewResponseBody) SetRequestId(v string) *SaveContactsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveContactsNewResponseBody) SetResult(v bool) *SaveContactsNewResponseBody {
	s.Result = &v
	return s
}

type SaveContactsNewResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveContactsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveContactsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveContactsNewResponse) GoString() string {
	return s.String()
}

func (s *SaveContactsNewResponse) SetHeaders(v map[string]*string) *SaveContactsNewResponse {
	s.Headers = v
	return s
}

func (s *SaveContactsNewResponse) SetStatusCode(v int32) *SaveContactsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveContactsNewResponse) SetBody(v *SaveContactsNewResponseBody) *SaveContactsNewResponse {
	s.Body = v
	return s
}

type SaveLearningStatusNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value                *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SaveLearningStatusNewRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveLearningStatusNewRequest) GoString() string {
	return s.String()
}

func (s *SaveLearningStatusNewRequest) SetOwnerId(v int64) *SaveLearningStatusNewRequest {
	s.OwnerId = &v
	return s
}

func (s *SaveLearningStatusNewRequest) SetProdCode(v string) *SaveLearningStatusNewRequest {
	s.ProdCode = &v
	return s
}

func (s *SaveLearningStatusNewRequest) SetResourceOwnerAccount(v string) *SaveLearningStatusNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SaveLearningStatusNewRequest) SetResourceOwnerId(v int64) *SaveLearningStatusNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SaveLearningStatusNewRequest) SetType(v string) *SaveLearningStatusNewRequest {
	s.Type = &v
	return s
}

func (s *SaveLearningStatusNewRequest) SetValue(v string) *SaveLearningStatusNewRequest {
	s.Value = &v
	return s
}

type SaveLearningStatusNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s SaveLearningStatusNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveLearningStatusNewResponseBody) GoString() string {
	return s.String()
}

func (s *SaveLearningStatusNewResponseBody) SetRequestId(v string) *SaveLearningStatusNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveLearningStatusNewResponseBody) SetResult(v bool) *SaveLearningStatusNewResponseBody {
	s.Result = &v
	return s
}

type SaveLearningStatusNewResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveLearningStatusNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveLearningStatusNewResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveLearningStatusNewResponse) GoString() string {
	return s.String()
}

func (s *SaveLearningStatusNewResponse) SetHeaders(v map[string]*string) *SaveLearningStatusNewResponse {
	s.Headers = v
	return s
}

func (s *SaveLearningStatusNewResponse) SetStatusCode(v int32) *SaveLearningStatusNewResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveLearningStatusNewResponse) SetBody(v *SaveLearningStatusNewResponseBody) *SaveLearningStatusNewResponse {
	s.Body = v
	return s
}

type SelectTagResourceRequest struct {
	NextToken            *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey               *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue             *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	// This parameter is required.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SelectTagResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s SelectTagResourceRequest) GoString() string {
	return s.String()
}

func (s *SelectTagResourceRequest) SetNextToken(v string) *SelectTagResourceRequest {
	s.NextToken = &v
	return s
}

func (s *SelectTagResourceRequest) SetOwnerId(v int64) *SelectTagResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *SelectTagResourceRequest) SetPageSize(v int32) *SelectTagResourceRequest {
	s.PageSize = &v
	return s
}

func (s *SelectTagResourceRequest) SetProdCode(v string) *SelectTagResourceRequest {
	s.ProdCode = &v
	return s
}

func (s *SelectTagResourceRequest) SetRegionId(v string) *SelectTagResourceRequest {
	s.RegionId = &v
	return s
}

func (s *SelectTagResourceRequest) SetResourceOwnerAccount(v string) *SelectTagResourceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SelectTagResourceRequest) SetResourceOwnerId(v int64) *SelectTagResourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SelectTagResourceRequest) SetResourceType(v string) *SelectTagResourceRequest {
	s.ResourceType = &v
	return s
}

func (s *SelectTagResourceRequest) SetTagKey(v string) *SelectTagResourceRequest {
	s.TagKey = &v
	return s
}

func (s *SelectTagResourceRequest) SetTagValue(v string) *SelectTagResourceRequest {
	s.TagValue = &v
	return s
}

func (s *SelectTagResourceRequest) SetType(v string) *SelectTagResourceRequest {
	s.Type = &v
	return s
}

type SelectTagResourceResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SelectTagResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SelectTagResourceResponseBody) GoString() string {
	return s.String()
}

func (s *SelectTagResourceResponseBody) SetCode(v string) *SelectTagResourceResponseBody {
	s.Code = &v
	return s
}

func (s *SelectTagResourceResponseBody) SetData(v string) *SelectTagResourceResponseBody {
	s.Data = &v
	return s
}

func (s *SelectTagResourceResponseBody) SetRequestId(v string) *SelectTagResourceResponseBody {
	s.RequestId = &v
	return s
}

type SelectTagResourceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SelectTagResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SelectTagResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s SelectTagResourceResponse) GoString() string {
	return s.String()
}

func (s *SelectTagResourceResponse) SetHeaders(v map[string]*string) *SelectTagResourceResponse {
	s.Headers = v
	return s
}

func (s *SelectTagResourceResponse) SetStatusCode(v int32) *SelectTagResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *SelectTagResourceResponse) SetBody(v *SelectTagResourceResponseBody) *SelectTagResourceResponse {
	s.Body = v
	return s
}

type SelectTagResourceNewRequest struct {
	NextToken            *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey               *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue             *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	// This parameter is required.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SelectTagResourceNewRequest) String() string {
	return tea.Prettify(s)
}

func (s SelectTagResourceNewRequest) GoString() string {
	return s.String()
}

func (s *SelectTagResourceNewRequest) SetNextToken(v string) *SelectTagResourceNewRequest {
	s.NextToken = &v
	return s
}

func (s *SelectTagResourceNewRequest) SetOwnerId(v int64) *SelectTagResourceNewRequest {
	s.OwnerId = &v
	return s
}

func (s *SelectTagResourceNewRequest) SetPageSize(v int32) *SelectTagResourceNewRequest {
	s.PageSize = &v
	return s
}

func (s *SelectTagResourceNewRequest) SetProdCode(v string) *SelectTagResourceNewRequest {
	s.ProdCode = &v
	return s
}

func (s *SelectTagResourceNewRequest) SetRegionId(v string) *SelectTagResourceNewRequest {
	s.RegionId = &v
	return s
}

func (s *SelectTagResourceNewRequest) SetResourceOwnerAccount(v string) *SelectTagResourceNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SelectTagResourceNewRequest) SetResourceOwnerId(v int64) *SelectTagResourceNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SelectTagResourceNewRequest) SetResourceType(v string) *SelectTagResourceNewRequest {
	s.ResourceType = &v
	return s
}

func (s *SelectTagResourceNewRequest) SetTagKey(v string) *SelectTagResourceNewRequest {
	s.TagKey = &v
	return s
}

func (s *SelectTagResourceNewRequest) SetTagValue(v string) *SelectTagResourceNewRequest {
	s.TagValue = &v
	return s
}

func (s *SelectTagResourceNewRequest) SetType(v string) *SelectTagResourceNewRequest {
	s.Type = &v
	return s
}

type SelectTagResourceNewResponseBody struct {
	NextToken *string                               `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Tags      *SelectTagResourceNewResponseBodyTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s SelectTagResourceNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SelectTagResourceNewResponseBody) GoString() string {
	return s.String()
}

func (s *SelectTagResourceNewResponseBody) SetNextToken(v string) *SelectTagResourceNewResponseBody {
	s.NextToken = &v
	return s
}

func (s *SelectTagResourceNewResponseBody) SetRequestId(v string) *SelectTagResourceNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *SelectTagResourceNewResponseBody) SetTags(v *SelectTagResourceNewResponseBodyTags) *SelectTagResourceNewResponseBody {
	s.Tags = v
	return s
}

type SelectTagResourceNewResponseBodyTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s SelectTagResourceNewResponseBodyTags) String() string {
	return tea.Prettify(s)
}

func (s SelectTagResourceNewResponseBodyTags) GoString() string {
	return s.String()
}

func (s *SelectTagResourceNewResponseBodyTags) SetTag(v []*string) *SelectTagResourceNewResponseBodyTags {
	s.Tag = v
	return s
}

type SelectTagResourceNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SelectTagResourceNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SelectTagResourceNewResponse) String() string {
	return tea.Prettify(s)
}

func (s SelectTagResourceNewResponse) GoString() string {
	return s.String()
}

func (s *SelectTagResourceNewResponse) SetHeaders(v map[string]*string) *SelectTagResourceNewResponse {
	s.Headers = v
	return s
}

func (s *SelectTagResourceNewResponse) SetStatusCode(v int32) *SelectTagResourceNewResponse {
	s.StatusCode = &v
	return s
}

func (s *SelectTagResourceNewResponse) SetBody(v *SelectTagResourceNewResponseBody) *SelectTagResourceNewResponse {
	s.Body = v
	return s
}

type SendSmsTestRequest struct {
	NcToken *string `json:"NcToken,omitempty" xml:"NcToken,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PhoneNumber          *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	RemoteIp             *string `json:"RemoteIp,omitempty" xml:"RemoteIp,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SessionId            *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	Sig                  *string `json:"Sig,omitempty" xml:"Sig,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateParam        *string `json:"TemplateParam,omitempty" xml:"TemplateParam,omitempty"`
	TestType             *string `json:"TestType,omitempty" xml:"TestType,omitempty"`
}

func (s SendSmsTestRequest) String() string {
	return tea.Prettify(s)
}

func (s SendSmsTestRequest) GoString() string {
	return s.String()
}

func (s *SendSmsTestRequest) SetNcToken(v string) *SendSmsTestRequest {
	s.NcToken = &v
	return s
}

func (s *SendSmsTestRequest) SetOwnerId(v int64) *SendSmsTestRequest {
	s.OwnerId = &v
	return s
}

func (s *SendSmsTestRequest) SetPhoneNumber(v string) *SendSmsTestRequest {
	s.PhoneNumber = &v
	return s
}

func (s *SendSmsTestRequest) SetProdCode(v string) *SendSmsTestRequest {
	s.ProdCode = &v
	return s
}

func (s *SendSmsTestRequest) SetRemoteIp(v string) *SendSmsTestRequest {
	s.RemoteIp = &v
	return s
}

func (s *SendSmsTestRequest) SetResourceOwnerAccount(v string) *SendSmsTestRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SendSmsTestRequest) SetResourceOwnerId(v int64) *SendSmsTestRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SendSmsTestRequest) SetSessionId(v string) *SendSmsTestRequest {
	s.SessionId = &v
	return s
}

func (s *SendSmsTestRequest) SetSig(v string) *SendSmsTestRequest {
	s.Sig = &v
	return s
}

func (s *SendSmsTestRequest) SetSignName(v string) *SendSmsTestRequest {
	s.SignName = &v
	return s
}

func (s *SendSmsTestRequest) SetTemplateCode(v string) *SendSmsTestRequest {
	s.TemplateCode = &v
	return s
}

func (s *SendSmsTestRequest) SetTemplateParam(v string) *SendSmsTestRequest {
	s.TemplateParam = &v
	return s
}

func (s *SendSmsTestRequest) SetTestType(v string) *SendSmsTestRequest {
	s.TestType = &v
	return s
}

type SendSmsTestResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s SendSmsTestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendSmsTestResponseBody) GoString() string {
	return s.String()
}

func (s *SendSmsTestResponseBody) SetRequestId(v string) *SendSmsTestResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendSmsTestResponseBody) SetCode(v string) *SendSmsTestResponseBody {
	s.Code = &v
	return s
}

func (s *SendSmsTestResponseBody) SetData(v string) *SendSmsTestResponseBody {
	s.Data = &v
	return s
}

type SendSmsTestResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendSmsTestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendSmsTestResponse) String() string {
	return tea.Prettify(s)
}

func (s SendSmsTestResponse) GoString() string {
	return s.String()
}

func (s *SendSmsTestResponse) SetHeaders(v map[string]*string) *SendSmsTestResponse {
	s.Headers = v
	return s
}

func (s *SendSmsTestResponse) SetStatusCode(v int32) *SendSmsTestResponse {
	s.StatusCode = &v
	return s
}

func (s *SendSmsTestResponse) SetBody(v *SendSmsTestResponseBody) *SendSmsTestResponse {
	s.Body = v
	return s
}

type SendSmsTestNewRequest struct {
	NcToken *string `json:"NcToken,omitempty" xml:"NcToken,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PhoneNumber          *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	RemoteIp             *string `json:"RemoteIp,omitempty" xml:"RemoteIp,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SessionId            *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	Sig                  *string `json:"Sig,omitempty" xml:"Sig,omitempty"`
	SignName             *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateParam        *string `json:"TemplateParam,omitempty" xml:"TemplateParam,omitempty"`
	TestType             *string `json:"TestType,omitempty" xml:"TestType,omitempty"`
}

func (s SendSmsTestNewRequest) String() string {
	return tea.Prettify(s)
}

func (s SendSmsTestNewRequest) GoString() string {
	return s.String()
}

func (s *SendSmsTestNewRequest) SetNcToken(v string) *SendSmsTestNewRequest {
	s.NcToken = &v
	return s
}

func (s *SendSmsTestNewRequest) SetOwnerId(v int64) *SendSmsTestNewRequest {
	s.OwnerId = &v
	return s
}

func (s *SendSmsTestNewRequest) SetPhoneNumber(v string) *SendSmsTestNewRequest {
	s.PhoneNumber = &v
	return s
}

func (s *SendSmsTestNewRequest) SetProdCode(v string) *SendSmsTestNewRequest {
	s.ProdCode = &v
	return s
}

func (s *SendSmsTestNewRequest) SetRemoteIp(v string) *SendSmsTestNewRequest {
	s.RemoteIp = &v
	return s
}

func (s *SendSmsTestNewRequest) SetResourceOwnerAccount(v string) *SendSmsTestNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SendSmsTestNewRequest) SetResourceOwnerId(v int64) *SendSmsTestNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SendSmsTestNewRequest) SetSessionId(v string) *SendSmsTestNewRequest {
	s.SessionId = &v
	return s
}

func (s *SendSmsTestNewRequest) SetSig(v string) *SendSmsTestNewRequest {
	s.Sig = &v
	return s
}

func (s *SendSmsTestNewRequest) SetSignName(v string) *SendSmsTestNewRequest {
	s.SignName = &v
	return s
}

func (s *SendSmsTestNewRequest) SetTemplateCode(v string) *SendSmsTestNewRequest {
	s.TemplateCode = &v
	return s
}

func (s *SendSmsTestNewRequest) SetTemplateParam(v string) *SendSmsTestNewRequest {
	s.TemplateParam = &v
	return s
}

func (s *SendSmsTestNewRequest) SetTestType(v string) *SendSmsTestNewRequest {
	s.TestType = &v
	return s
}

type SendSmsTestNewResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Msg       *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendSmsTestNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendSmsTestNewResponseBody) GoString() string {
	return s.String()
}

func (s *SendSmsTestNewResponseBody) SetCode(v string) *SendSmsTestNewResponseBody {
	s.Code = &v
	return s
}

func (s *SendSmsTestNewResponseBody) SetMsg(v string) *SendSmsTestNewResponseBody {
	s.Msg = &v
	return s
}

func (s *SendSmsTestNewResponseBody) SetRequestId(v string) *SendSmsTestNewResponseBody {
	s.RequestId = &v
	return s
}

type SendSmsTestNewResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendSmsTestNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendSmsTestNewResponse) String() string {
	return tea.Prettify(s)
}

func (s SendSmsTestNewResponse) GoString() string {
	return s.String()
}

func (s *SendSmsTestNewResponse) SetHeaders(v map[string]*string) *SendSmsTestNewResponse {
	s.Headers = v
	return s
}

func (s *SendSmsTestNewResponse) SetStatusCode(v int32) *SendSmsTestNewResponse {
	s.StatusCode = &v
	return s
}

func (s *SendSmsTestNewResponse) SetBody(v *SendSmsTestNewResponseBody) *SendSmsTestNewResponse {
	s.Body = v
	return s
}

type SendVerificationRequest struct {
	// This parameter is required.
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Target               *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// This parameter is required.
	VerifyType *string `json:"VerifyType,omitempty" xml:"VerifyType,omitempty"`
}

func (s SendVerificationRequest) String() string {
	return tea.Prettify(s)
}

func (s SendVerificationRequest) GoString() string {
	return s.String()
}

func (s *SendVerificationRequest) SetBizType(v string) *SendVerificationRequest {
	s.BizType = &v
	return s
}

func (s *SendVerificationRequest) SetOwnerId(v int64) *SendVerificationRequest {
	s.OwnerId = &v
	return s
}

func (s *SendVerificationRequest) SetProdCode(v string) *SendVerificationRequest {
	s.ProdCode = &v
	return s
}

func (s *SendVerificationRequest) SetResourceOwnerAccount(v string) *SendVerificationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SendVerificationRequest) SetResourceOwnerId(v int64) *SendVerificationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SendVerificationRequest) SetTarget(v string) *SendVerificationRequest {
	s.Target = &v
	return s
}

func (s *SendVerificationRequest) SetVerifyType(v string) *SendVerificationRequest {
	s.VerifyType = &v
	return s
}

type SendVerificationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"code,omitempty" xml:"code,omitempty"`
	Data      *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s SendVerificationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendVerificationResponseBody) GoString() string {
	return s.String()
}

func (s *SendVerificationResponseBody) SetRequestId(v string) *SendVerificationResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendVerificationResponseBody) SetCode(v string) *SendVerificationResponseBody {
	s.Code = &v
	return s
}

func (s *SendVerificationResponseBody) SetData(v string) *SendVerificationResponseBody {
	s.Data = &v
	return s
}

type SendVerificationResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendVerificationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendVerificationResponse) String() string {
	return tea.Prettify(s)
}

func (s SendVerificationResponse) GoString() string {
	return s.String()
}

func (s *SendVerificationResponse) SetHeaders(v map[string]*string) *SendVerificationResponse {
	s.Headers = v
	return s
}

func (s *SendVerificationResponse) SetStatusCode(v int32) *SendVerificationResponse {
	s.StatusCode = &v
	return s
}

func (s *SendVerificationResponse) SetBody(v *SendVerificationResponseBody) *SendVerificationResponse {
	s.Body = v
	return s
}

type SendVerificationNewRequest struct {
	// This parameter is required.
	BizType              *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Target               *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// This parameter is required.
	VerifyType *string `json:"VerifyType,omitempty" xml:"VerifyType,omitempty"`
}

func (s SendVerificationNewRequest) String() string {
	return tea.Prettify(s)
}

func (s SendVerificationNewRequest) GoString() string {
	return s.String()
}

func (s *SendVerificationNewRequest) SetBizType(v string) *SendVerificationNewRequest {
	s.BizType = &v
	return s
}

func (s *SendVerificationNewRequest) SetOwnerId(v int64) *SendVerificationNewRequest {
	s.OwnerId = &v
	return s
}

func (s *SendVerificationNewRequest) SetProdCode(v string) *SendVerificationNewRequest {
	s.ProdCode = &v
	return s
}

func (s *SendVerificationNewRequest) SetResourceOwnerAccount(v string) *SendVerificationNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SendVerificationNewRequest) SetResourceOwnerId(v int64) *SendVerificationNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SendVerificationNewRequest) SetTarget(v string) *SendVerificationNewRequest {
	s.Target = &v
	return s
}

func (s *SendVerificationNewRequest) SetVerifyType(v string) *SendVerificationNewRequest {
	s.VerifyType = &v
	return s
}

type SendVerificationNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s SendVerificationNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendVerificationNewResponseBody) GoString() string {
	return s.String()
}

func (s *SendVerificationNewResponseBody) SetRequestId(v string) *SendVerificationNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendVerificationNewResponseBody) SetResult(v string) *SendVerificationNewResponseBody {
	s.Result = &v
	return s
}

type SendVerificationNewResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendVerificationNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendVerificationNewResponse) String() string {
	return tea.Prettify(s)
}

func (s SendVerificationNewResponse) GoString() string {
	return s.String()
}

func (s *SendVerificationNewResponse) SetHeaders(v map[string]*string) *SendVerificationNewResponse {
	s.Headers = v
	return s
}

func (s *SendVerificationNewResponse) SetStatusCode(v int32) *SendVerificationNewResponse {
	s.StatusCode = &v
	return s
}

func (s *SendVerificationNewResponse) SetBody(v *SendVerificationNewResponseBody) *SendVerificationNewResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// This parameter is required.
	Tag []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetOwnerId(v int64) *TagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetProdCode(v string) *TagResourcesRequest {
	s.ProdCode = &v
	return s
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerAccount(v string) *TagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerId(v int64) *TagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetCode(v string) *TagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *TagResourcesResponseBody) SetData(v string) *TagResourcesResponseBody {
	s.Data = &v
	return s
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type TagResourcesNewRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceIdListString *string   `json:"ResourceIdListString,omitempty" xml:"ResourceIdListString,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	ResourceType  *string                      `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag           []*TagResourcesNewRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	TagListString *string                      `json:"TagListString,omitempty" xml:"TagListString,omitempty"`
}

func (s TagResourcesNewRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesNewRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesNewRequest) SetOwnerId(v int64) *TagResourcesNewRequest {
	s.OwnerId = &v
	return s
}

func (s *TagResourcesNewRequest) SetProdCode(v string) *TagResourcesNewRequest {
	s.ProdCode = &v
	return s
}

func (s *TagResourcesNewRequest) SetRegionId(v string) *TagResourcesNewRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesNewRequest) SetResourceId(v []*string) *TagResourcesNewRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesNewRequest) SetResourceIdListString(v string) *TagResourcesNewRequest {
	s.ResourceIdListString = &v
	return s
}

func (s *TagResourcesNewRequest) SetResourceOwnerAccount(v string) *TagResourcesNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TagResourcesNewRequest) SetResourceOwnerId(v int64) *TagResourcesNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TagResourcesNewRequest) SetResourceType(v string) *TagResourcesNewRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesNewRequest) SetTag(v []*TagResourcesNewRequestTag) *TagResourcesNewRequest {
	s.Tag = v
	return s
}

func (s *TagResourcesNewRequest) SetTagListString(v string) *TagResourcesNewRequest {
	s.TagListString = &v
	return s
}

type TagResourcesNewRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesNewRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesNewRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesNewRequestTag) SetKey(v string) *TagResourcesNewRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesNewRequestTag) SetValue(v string) *TagResourcesNewRequestTag {
	s.Value = &v
	return s
}

type TagResourcesNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s TagResourcesNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesNewResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesNewResponseBody) SetRequestId(v string) *TagResourcesNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *TagResourcesNewResponseBody) SetResult(v bool) *TagResourcesNewResponseBody {
	s.Result = &v
	return s
}

type TagResourcesNewResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesNewResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesNewResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesNewResponse) SetHeaders(v map[string]*string) *TagResourcesNewResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesNewResponse) SetStatusCode(v int32) *TagResourcesNewResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesNewResponse) SetBody(v *TagResourcesNewResponseBody) *TagResourcesNewResponse {
	s.Body = v
	return s
}

type TagResourcesSystemTagsRequest struct {
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Scope        *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// This parameter is required.
	Tag []*TagResourcesSystemTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// This parameter is required.
	TagOwnerUid *int64 `json:"TagOwnerUid,omitempty" xml:"TagOwnerUid,omitempty"`
}

func (s TagResourcesSystemTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesSystemTagsRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesSystemTagsRequest) SetOwnerId(v int64) *TagResourcesSystemTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetProdCode(v string) *TagResourcesSystemTagsRequest {
	s.ProdCode = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetRegionId(v string) *TagResourcesSystemTagsRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetResourceId(v []*string) *TagResourcesSystemTagsRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetResourceOwnerAccount(v string) *TagResourcesSystemTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetResourceOwnerId(v int64) *TagResourcesSystemTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetResourceType(v string) *TagResourcesSystemTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetScope(v string) *TagResourcesSystemTagsRequest {
	s.Scope = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetTag(v []*TagResourcesSystemTagsRequestTag) *TagResourcesSystemTagsRequest {
	s.Tag = v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetTagOwnerUid(v int64) *TagResourcesSystemTagsRequest {
	s.TagOwnerUid = &v
	return s
}

type TagResourcesSystemTagsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesSystemTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesSystemTagsRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesSystemTagsRequestTag) SetKey(v string) *TagResourcesSystemTagsRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesSystemTagsRequestTag) SetValue(v string) *TagResourcesSystemTagsRequestTag {
	s.Value = &v
	return s
}

type TagResourcesSystemTagsResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesSystemTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesSystemTagsResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesSystemTagsResponseBody) SetCode(v string) *TagResourcesSystemTagsResponseBody {
	s.Code = &v
	return s
}

func (s *TagResourcesSystemTagsResponseBody) SetData(v string) *TagResourcesSystemTagsResponseBody {
	s.Data = &v
	return s
}

func (s *TagResourcesSystemTagsResponseBody) SetRequestId(v string) *TagResourcesSystemTagsResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesSystemTagsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesSystemTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesSystemTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesSystemTagsResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesSystemTagsResponse) SetHeaders(v map[string]*string) *TagResourcesSystemTagsResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesSystemTagsResponse) SetStatusCode(v int32) *TagResourcesSystemTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesSystemTagsResponse) SetBody(v *TagResourcesSystemTagsResponseBody) *TagResourcesSystemTagsResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	All      *bool   `json:"All,omitempty" xml:"All,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	ResourceType *string                      `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tags         []*UntagResourcesRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetOwnerId(v int64) *UntagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetProdCode(v string) *UntagResourcesRequest {
	s.ProdCode = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerAccount(v string) *UntagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerId(v int64) *UntagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTags(v []*UntagResourcesRequestTags) *UntagResourcesRequest {
	s.Tags = v
	return s
}

type UntagResourcesRequestTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UntagResourcesRequestTags) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequestTags) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequestTags) SetKey(v string) *UntagResourcesRequestTags {
	s.Key = &v
	return s
}

func (s *UntagResourcesRequestTags) SetValue(v string) *UntagResourcesRequestTags {
	s.Value = &v
	return s
}

type UntagResourcesResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetCode(v string) *UntagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *UntagResourcesResponseBody) SetData(v string) *UntagResourcesResponseBody {
	s.Data = &v
	return s
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UntagResourcesNewRequest struct {
	All      *bool   `json:"All,omitempty" xml:"All,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceIdListString *string   `json:"ResourceIdListString,omitempty" xml:"ResourceIdListString,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	ResourceType  *string                         `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagListString *string                         `json:"TagListString,omitempty" xml:"TagListString,omitempty"`
	Tags          []*UntagResourcesNewRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s UntagResourcesNewRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesNewRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesNewRequest) SetAll(v bool) *UntagResourcesNewRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesNewRequest) SetOwnerId(v int64) *UntagResourcesNewRequest {
	s.OwnerId = &v
	return s
}

func (s *UntagResourcesNewRequest) SetProdCode(v string) *UntagResourcesNewRequest {
	s.ProdCode = &v
	return s
}

func (s *UntagResourcesNewRequest) SetRegionId(v string) *UntagResourcesNewRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesNewRequest) SetResourceId(v []*string) *UntagResourcesNewRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesNewRequest) SetResourceIdListString(v string) *UntagResourcesNewRequest {
	s.ResourceIdListString = &v
	return s
}

func (s *UntagResourcesNewRequest) SetResourceOwnerAccount(v string) *UntagResourcesNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UntagResourcesNewRequest) SetResourceOwnerId(v int64) *UntagResourcesNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesNewRequest) SetResourceType(v string) *UntagResourcesNewRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesNewRequest) SetTagListString(v string) *UntagResourcesNewRequest {
	s.TagListString = &v
	return s
}

func (s *UntagResourcesNewRequest) SetTags(v []*UntagResourcesNewRequestTags) *UntagResourcesNewRequest {
	s.Tags = v
	return s
}

type UntagResourcesNewRequestTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s UntagResourcesNewRequestTags) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesNewRequestTags) GoString() string {
	return s.String()
}

func (s *UntagResourcesNewRequestTags) SetKey(v string) *UntagResourcesNewRequestTags {
	s.Key = &v
	return s
}

func (s *UntagResourcesNewRequestTags) SetValue(v string) *UntagResourcesNewRequestTags {
	s.Value = &v
	return s
}

type UntagResourcesNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UntagResourcesNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesNewResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesNewResponseBody) SetRequestId(v string) *UntagResourcesNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *UntagResourcesNewResponseBody) SetResult(v bool) *UntagResourcesNewResponseBody {
	s.Result = &v
	return s
}

type UntagResourcesNewResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesNewResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesNewResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesNewResponse) SetHeaders(v map[string]*string) *UntagResourcesNewResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesNewResponse) SetStatusCode(v int32) *UntagResourcesNewResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesNewResponse) SetBody(v *UntagResourcesNewResponseBody) *UntagResourcesNewResponse {
	s.Body = v
	return s
}

type UntagResourcesSystemTagsRequest struct {
	All      *bool   `json:"All,omitempty" xml:"All,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// This parameter is required.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	ResourceType *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
	// This parameter is required.
	TagOwnerUid *int64 `json:"TagOwnerUid,omitempty" xml:"TagOwnerUid,omitempty"`
}

func (s UntagResourcesSystemTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesSystemTagsRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesSystemTagsRequest) SetAll(v bool) *UntagResourcesSystemTagsRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetOwnerId(v int64) *UntagResourcesSystemTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetProdCode(v string) *UntagResourcesSystemTagsRequest {
	s.ProdCode = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetRegionId(v string) *UntagResourcesSystemTagsRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetResourceId(v []*string) *UntagResourcesSystemTagsRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetResourceOwnerAccount(v string) *UntagResourcesSystemTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetResourceOwnerId(v int64) *UntagResourcesSystemTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetResourceType(v string) *UntagResourcesSystemTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetTagKey(v []*string) *UntagResourcesSystemTagsRequest {
	s.TagKey = v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetTagOwnerUid(v int64) *UntagResourcesSystemTagsRequest {
	s.TagOwnerUid = &v
	return s
}

type UntagResourcesSystemTagsResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesSystemTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesSystemTagsResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesSystemTagsResponseBody) SetCode(v string) *UntagResourcesSystemTagsResponseBody {
	s.Code = &v
	return s
}

func (s *UntagResourcesSystemTagsResponseBody) SetData(v string) *UntagResourcesSystemTagsResponseBody {
	s.Data = &v
	return s
}

func (s *UntagResourcesSystemTagsResponseBody) SetRequestId(v string) *UntagResourcesSystemTagsResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesSystemTagsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesSystemTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesSystemTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesSystemTagsResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesSystemTagsResponse) SetHeaders(v map[string]*string) *UntagResourcesSystemTagsResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesSystemTagsResponse) SetStatusCode(v int32) *UntagResourcesSystemTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesSystemTagsResponse) SetBody(v *UntagResourcesSystemTagsResponseBody) *UntagResourcesSystemTagsResponse {
	s.Body = v
	return s
}

type UpdateIpWhiteListNewRequest struct {
	// This parameter is required.
	FeatureCode *int32 `json:"FeatureCode,omitempty" xml:"FeatureCode,omitempty"`
	// This parameter is required.
	IpWhiteList          *string `json:"IpWhiteList,omitempty" xml:"IpWhiteList,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	RealNameInsId        *int64  `json:"RealNameInsId,omitempty" xml:"RealNameInsId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s UpdateIpWhiteListNewRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpWhiteListNewRequest) GoString() string {
	return s.String()
}

func (s *UpdateIpWhiteListNewRequest) SetFeatureCode(v int32) *UpdateIpWhiteListNewRequest {
	s.FeatureCode = &v
	return s
}

func (s *UpdateIpWhiteListNewRequest) SetIpWhiteList(v string) *UpdateIpWhiteListNewRequest {
	s.IpWhiteList = &v
	return s
}

func (s *UpdateIpWhiteListNewRequest) SetOwnerId(v int64) *UpdateIpWhiteListNewRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateIpWhiteListNewRequest) SetProdCode(v string) *UpdateIpWhiteListNewRequest {
	s.ProdCode = &v
	return s
}

func (s *UpdateIpWhiteListNewRequest) SetRealNameInsId(v int64) *UpdateIpWhiteListNewRequest {
	s.RealNameInsId = &v
	return s
}

func (s *UpdateIpWhiteListNewRequest) SetResourceOwnerAccount(v string) *UpdateIpWhiteListNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateIpWhiteListNewRequest) SetResourceOwnerId(v int64) *UpdateIpWhiteListNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateIpWhiteListNewRequest) SetUserName(v string) *UpdateIpWhiteListNewRequest {
	s.UserName = &v
	return s
}

type UpdateIpWhiteListNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdateIpWhiteListNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpWhiteListNewResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateIpWhiteListNewResponseBody) SetRequestId(v string) *UpdateIpWhiteListNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateIpWhiteListNewResponseBody) SetResult(v string) *UpdateIpWhiteListNewResponseBody {
	s.Result = &v
	return s
}

type UpdateIpWhiteListNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateIpWhiteListNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateIpWhiteListNewResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIpWhiteListNewResponse) GoString() string {
	return s.String()
}

func (s *UpdateIpWhiteListNewResponse) SetHeaders(v map[string]*string) *UpdateIpWhiteListNewResponse {
	s.Headers = v
	return s
}

func (s *UpdateIpWhiteListNewResponse) SetStatusCode(v int32) *UpdateIpWhiteListNewResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateIpWhiteListNewResponse) SetBody(v *UpdateIpWhiteListNewResponseBody) *UpdateIpWhiteListNewResponse {
	s.Body = v
	return s
}

type UpdatePartnerTemplateNewRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateCode         *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s UpdatePartnerTemplateNewRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePartnerTemplateNewRequest) GoString() string {
	return s.String()
}

func (s *UpdatePartnerTemplateNewRequest) SetOwnerId(v int64) *UpdatePartnerTemplateNewRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdatePartnerTemplateNewRequest) SetProdCode(v string) *UpdatePartnerTemplateNewRequest {
	s.ProdCode = &v
	return s
}

func (s *UpdatePartnerTemplateNewRequest) SetResourceOwnerAccount(v string) *UpdatePartnerTemplateNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdatePartnerTemplateNewRequest) SetResourceOwnerId(v int64) *UpdatePartnerTemplateNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdatePartnerTemplateNewRequest) SetTemplateCode(v string) *UpdatePartnerTemplateNewRequest {
	s.TemplateCode = &v
	return s
}

func (s *UpdatePartnerTemplateNewRequest) SetTemplateName(v string) *UpdatePartnerTemplateNewRequest {
	s.TemplateName = &v
	return s
}

type UpdatePartnerTemplateNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdatePartnerTemplateNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePartnerTemplateNewResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePartnerTemplateNewResponseBody) SetRequestId(v string) *UpdatePartnerTemplateNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePartnerTemplateNewResponseBody) SetResult(v string) *UpdatePartnerTemplateNewResponseBody {
	s.Result = &v
	return s
}

type UpdatePartnerTemplateNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePartnerTemplateNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePartnerTemplateNewResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePartnerTemplateNewResponse) GoString() string {
	return s.String()
}

func (s *UpdatePartnerTemplateNewResponse) SetHeaders(v map[string]*string) *UpdatePartnerTemplateNewResponse {
	s.Headers = v
	return s
}

func (s *UpdatePartnerTemplateNewResponse) SetStatusCode(v int32) *UpdatePartnerTemplateNewResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePartnerTemplateNewResponse) SetBody(v *UpdatePartnerTemplateNewResponseBody) *UpdatePartnerTemplateNewResponse {
	s.Body = v
	return s
}

type UpdateSlsStatusNewRequest struct {
	AuthStatus           *bool   `json:"AuthStatus,omitempty" xml:"AuthStatus,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SaveTime             *int32  `json:"SaveTime,omitempty" xml:"SaveTime,omitempty"`
}

func (s UpdateSlsStatusNewRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsStatusNewRequest) GoString() string {
	return s.String()
}

func (s *UpdateSlsStatusNewRequest) SetAuthStatus(v bool) *UpdateSlsStatusNewRequest {
	s.AuthStatus = &v
	return s
}

func (s *UpdateSlsStatusNewRequest) SetOwnerId(v int64) *UpdateSlsStatusNewRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateSlsStatusNewRequest) SetProdCode(v string) *UpdateSlsStatusNewRequest {
	s.ProdCode = &v
	return s
}

func (s *UpdateSlsStatusNewRequest) SetResourceOwnerAccount(v string) *UpdateSlsStatusNewRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateSlsStatusNewRequest) SetResourceOwnerId(v int64) *UpdateSlsStatusNewRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateSlsStatusNewRequest) SetSaveTime(v int32) *UpdateSlsStatusNewRequest {
	s.SaveTime = &v
	return s
}

type UpdateSlsStatusNewResponseBody struct {
	AuthorizeStatus *bool   `json:"AuthorizeStatus,omitempty" xml:"AuthorizeStatus,omitempty"`
	OpenStatus      *bool   `json:"OpenStatus,omitempty" xml:"OpenStatus,omitempty"`
	ProdCode        *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SaveTime        *int32  `json:"SaveTime,omitempty" xml:"SaveTime,omitempty"`
	Uid             *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s UpdateSlsStatusNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsStatusNewResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSlsStatusNewResponseBody) SetAuthorizeStatus(v bool) *UpdateSlsStatusNewResponseBody {
	s.AuthorizeStatus = &v
	return s
}

func (s *UpdateSlsStatusNewResponseBody) SetOpenStatus(v bool) *UpdateSlsStatusNewResponseBody {
	s.OpenStatus = &v
	return s
}

func (s *UpdateSlsStatusNewResponseBody) SetProdCode(v string) *UpdateSlsStatusNewResponseBody {
	s.ProdCode = &v
	return s
}

func (s *UpdateSlsStatusNewResponseBody) SetRequestId(v string) *UpdateSlsStatusNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSlsStatusNewResponseBody) SetSaveTime(v int32) *UpdateSlsStatusNewResponseBody {
	s.SaveTime = &v
	return s
}

func (s *UpdateSlsStatusNewResponseBody) SetUid(v string) *UpdateSlsStatusNewResponseBody {
	s.Uid = &v
	return s
}

type UpdateSlsStatusNewResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSlsStatusNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSlsStatusNewResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsStatusNewResponse) GoString() string {
	return s.String()
}

func (s *UpdateSlsStatusNewResponse) SetHeaders(v map[string]*string) *UpdateSlsStatusNewResponse {
	s.Headers = v
	return s
}

func (s *UpdateSlsStatusNewResponse) SetStatusCode(v int32) *UpdateSlsStatusNewResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSlsStatusNewResponse) SetBody(v *UpdateSlsStatusNewResponseBody) *UpdateSlsStatusNewResponse {
	s.Body = v
	return s
}

type UploadCardResRequest struct {
	// example:
	//
	// 示例值示例值
	CallerParentId *string `json:"CallerParentId,omitempty" xml:"CallerParentId,omitempty"`
	// example:
	//
	// 示例值示例值
	CallerType *string `json:"CallerType,omitempty" xml:"CallerType,omitempty"`
	// example:
	//
	// 示例值示例值示例值
	CallerUid *string `json:"CallerUid,omitempty" xml:"CallerUid,omitempty"`
	// example:
	//
	// 示例值示例值
	ExtendInfo *string `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	// example:
	//
	// 46
	FileSize *int64 `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// 示例值
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// 示例值
	Memo                 *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// example:
	//
	// 示例值示例值示例值
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s UploadCardResRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadCardResRequest) GoString() string {
	return s.String()
}

func (s *UploadCardResRequest) SetCallerParentId(v string) *UploadCardResRequest {
	s.CallerParentId = &v
	return s
}

func (s *UploadCardResRequest) SetCallerType(v string) *UploadCardResRequest {
	s.CallerType = &v
	return s
}

func (s *UploadCardResRequest) SetCallerUid(v string) *UploadCardResRequest {
	s.CallerUid = &v
	return s
}

func (s *UploadCardResRequest) SetExtendInfo(v string) *UploadCardResRequest {
	s.ExtendInfo = &v
	return s
}

func (s *UploadCardResRequest) SetFileSize(v int64) *UploadCardResRequest {
	s.FileSize = &v
	return s
}

func (s *UploadCardResRequest) SetFileUrl(v string) *UploadCardResRequest {
	s.FileUrl = &v
	return s
}

func (s *UploadCardResRequest) SetMemo(v string) *UploadCardResRequest {
	s.Memo = &v
	return s
}

func (s *UploadCardResRequest) SetOwnerId(v int64) *UploadCardResRequest {
	s.OwnerId = &v
	return s
}

func (s *UploadCardResRequest) SetResourceOwnerAccount(v string) *UploadCardResRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UploadCardResRequest) SetResourceOwnerId(v int64) *UploadCardResRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UploadCardResRequest) SetResourceType(v string) *UploadCardResRequest {
	s.ResourceType = &v
	return s
}

type UploadCardResResponseBody struct {
	AccessDeniedDetail *string `json:"AccessDeniedDetail,omitempty" xml:"AccessDeniedDetail,omitempty"`
	// example:
	//
	// 示例值
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 示例值示例值示例值
	Message *string                         `json:"Message,omitempty" xml:"Message,omitempty"`
	Model   *UploadCardResResponseBodyModel `json:"Model,omitempty" xml:"Model,omitempty" type:"Struct"`
	// example:
	//
	// 示例值示例值
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UploadCardResResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadCardResResponseBody) GoString() string {
	return s.String()
}

func (s *UploadCardResResponseBody) SetAccessDeniedDetail(v string) *UploadCardResResponseBody {
	s.AccessDeniedDetail = &v
	return s
}

func (s *UploadCardResResponseBody) SetCode(v string) *UploadCardResResponseBody {
	s.Code = &v
	return s
}

func (s *UploadCardResResponseBody) SetMessage(v string) *UploadCardResResponseBody {
	s.Message = &v
	return s
}

func (s *UploadCardResResponseBody) SetModel(v *UploadCardResResponseBodyModel) *UploadCardResResponseBody {
	s.Model = v
	return s
}

func (s *UploadCardResResponseBody) SetRequestId(v string) *UploadCardResResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadCardResResponseBody) SetSuccess(v bool) *UploadCardResResponseBody {
	s.Success = &v
	return s
}

type UploadCardResResponseBodyModel struct {
	// example:
	//
	// 示例值示例值
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s UploadCardResResponseBodyModel) String() string {
	return tea.Prettify(s)
}

func (s UploadCardResResponseBodyModel) GoString() string {
	return s.String()
}

func (s *UploadCardResResponseBodyModel) SetResourceId(v string) *UploadCardResResponseBodyModel {
	s.ResourceId = &v
	return s
}

type UploadCardResResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadCardResResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadCardResResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadCardResResponse) GoString() string {
	return s.String()
}

func (s *UploadCardResResponse) SetHeaders(v map[string]*string) *UploadCardResResponse {
	s.Headers = v
	return s
}

func (s *UploadCardResResponse) SetStatusCode(v int32) *UploadCardResResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadCardResResponse) SetBody(v *UploadCardResResponseBody) *UploadCardResResponse {
	s.Body = v
	return s
}

type UploadCardResWithDyncParamRequest struct {
	// example:
	//
	// 示例值示例值示例值
	DynamicParam *string `json:"DynamicParam,omitempty" xml:"DynamicParam,omitempty"`
	// example:
	//
	// 48
	ExpiredTimes *int64 `json:"ExpiredTimes,omitempty" xml:"ExpiredTimes,omitempty"`
	// example:
	//
	// 73
	FileSize *int64 `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// 示例值示例值示例值
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// 示例值示例值示例值
	Memo                 *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// example:
	//
	// 示例值示例值
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// example:
	//
	// 示例值示例值
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s UploadCardResWithDyncParamRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadCardResWithDyncParamRequest) GoString() string {
	return s.String()
}

func (s *UploadCardResWithDyncParamRequest) SetDynamicParam(v string) *UploadCardResWithDyncParamRequest {
	s.DynamicParam = &v
	return s
}

func (s *UploadCardResWithDyncParamRequest) SetExpiredTimes(v int64) *UploadCardResWithDyncParamRequest {
	s.ExpiredTimes = &v
	return s
}

func (s *UploadCardResWithDyncParamRequest) SetFileSize(v int64) *UploadCardResWithDyncParamRequest {
	s.FileSize = &v
	return s
}

func (s *UploadCardResWithDyncParamRequest) SetFileUrl(v string) *UploadCardResWithDyncParamRequest {
	s.FileUrl = &v
	return s
}

func (s *UploadCardResWithDyncParamRequest) SetMemo(v string) *UploadCardResWithDyncParamRequest {
	s.Memo = &v
	return s
}

func (s *UploadCardResWithDyncParamRequest) SetOwnerId(v int64) *UploadCardResWithDyncParamRequest {
	s.OwnerId = &v
	return s
}

func (s *UploadCardResWithDyncParamRequest) SetResourceOwnerAccount(v string) *UploadCardResWithDyncParamRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UploadCardResWithDyncParamRequest) SetResourceOwnerId(v int64) *UploadCardResWithDyncParamRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UploadCardResWithDyncParamRequest) SetResourceType(v string) *UploadCardResWithDyncParamRequest {
	s.ResourceType = &v
	return s
}

func (s *UploadCardResWithDyncParamRequest) SetTemplateCode(v string) *UploadCardResWithDyncParamRequest {
	s.TemplateCode = &v
	return s
}

type UploadCardResWithDyncParamResponseBody struct {
	AccessDeniedDetail *string `json:"AccessDeniedDetail,omitempty" xml:"AccessDeniedDetail,omitempty"`
	// example:
	//
	// 示例值示例值
	Code *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data *UploadCardResWithDyncParamResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// 示例值示例值
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 示例值
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// false
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UploadCardResWithDyncParamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadCardResWithDyncParamResponseBody) GoString() string {
	return s.String()
}

func (s *UploadCardResWithDyncParamResponseBody) SetAccessDeniedDetail(v string) *UploadCardResWithDyncParamResponseBody {
	s.AccessDeniedDetail = &v
	return s
}

func (s *UploadCardResWithDyncParamResponseBody) SetCode(v string) *UploadCardResWithDyncParamResponseBody {
	s.Code = &v
	return s
}

func (s *UploadCardResWithDyncParamResponseBody) SetData(v *UploadCardResWithDyncParamResponseBodyData) *UploadCardResWithDyncParamResponseBody {
	s.Data = v
	return s
}

func (s *UploadCardResWithDyncParamResponseBody) SetMessage(v string) *UploadCardResWithDyncParamResponseBody {
	s.Message = &v
	return s
}

func (s *UploadCardResWithDyncParamResponseBody) SetRequestId(v string) *UploadCardResWithDyncParamResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadCardResWithDyncParamResponseBody) SetSuccess(v bool) *UploadCardResWithDyncParamResponseBody {
	s.Success = &v
	return s
}

type UploadCardResWithDyncParamResponseBodyData struct {
	// example:
	//
	// 25
	ResourceId *int64 `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s UploadCardResWithDyncParamResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UploadCardResWithDyncParamResponseBodyData) GoString() string {
	return s.String()
}

func (s *UploadCardResWithDyncParamResponseBodyData) SetResourceId(v int64) *UploadCardResWithDyncParamResponseBodyData {
	s.ResourceId = &v
	return s
}

type UploadCardResWithDyncParamResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadCardResWithDyncParamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadCardResWithDyncParamResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadCardResWithDyncParamResponse) GoString() string {
	return s.String()
}

func (s *UploadCardResWithDyncParamResponse) SetHeaders(v map[string]*string) *UploadCardResWithDyncParamResponse {
	s.Headers = v
	return s
}

func (s *UploadCardResWithDyncParamResponse) SetStatusCode(v int32) *UploadCardResWithDyncParamResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadCardResWithDyncParamResponse) SetBody(v *UploadCardResWithDyncParamResponseBody) *UploadCardResWithDyncParamResponse {
	s.Body = v
	return s
}

type ValidatYunSmsIdRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProdCode             *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
}

func (s ValidatYunSmsIdRequest) String() string {
	return tea.Prettify(s)
}

func (s ValidatYunSmsIdRequest) GoString() string {
	return s.String()
}

func (s *ValidatYunSmsIdRequest) SetOwnerId(v int64) *ValidatYunSmsIdRequest {
	s.OwnerId = &v
	return s
}

func (s *ValidatYunSmsIdRequest) SetProdCode(v string) *ValidatYunSmsIdRequest {
	s.ProdCode = &v
	return s
}

func (s *ValidatYunSmsIdRequest) SetResourceOwnerAccount(v string) *ValidatYunSmsIdRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ValidatYunSmsIdRequest) SetResourceOwnerId(v int64) *ValidatYunSmsIdRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ValidatYunSmsIdRequest) SetData(v string) *ValidatYunSmsIdRequest {
	s.Data = &v
	return s
}

type ValidatYunSmsIdResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ValidatYunSmsIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ValidatYunSmsIdResponseBody) GoString() string {
	return s.String()
}

func (s *ValidatYunSmsIdResponseBody) SetCode(v string) *ValidatYunSmsIdResponseBody {
	s.Code = &v
	return s
}

func (s *ValidatYunSmsIdResponseBody) SetData(v string) *ValidatYunSmsIdResponseBody {
	s.Data = &v
	return s
}

func (s *ValidatYunSmsIdResponseBody) SetMessage(v string) *ValidatYunSmsIdResponseBody {
	s.Message = &v
	return s
}

func (s *ValidatYunSmsIdResponseBody) SetRequestId(v string) *ValidatYunSmsIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *ValidatYunSmsIdResponseBody) SetSuccess(v string) *ValidatYunSmsIdResponseBody {
	s.Success = &v
	return s
}

type ValidatYunSmsIdResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ValidatYunSmsIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ValidatYunSmsIdResponse) String() string {
	return tea.Prettify(s)
}

func (s ValidatYunSmsIdResponse) GoString() string {
	return s.String()
}

func (s *ValidatYunSmsIdResponse) SetHeaders(v map[string]*string) *ValidatYunSmsIdResponse {
	s.Headers = v
	return s
}

func (s *ValidatYunSmsIdResponse) SetStatusCode(v int32) *ValidatYunSmsIdResponse {
	s.StatusCode = &v
	return s
}

func (s *ValidatYunSmsIdResponse) SetBody(v *ValidatYunSmsIdResponseBody) *ValidatYunSmsIdResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("dysms"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddDomainResponse
func (client *Client) AddDomainWithOptions(request *AddDomainRequest, runtime *util.RuntimeOptions) (_result *AddDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDomain"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddDomainRequest
//
// @return AddDomainResponse
func (client *Client) AddDomain(request *AddDomainRequest) (_result *AddDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDomainResponse{}
	_body, _err := client.AddDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddDomainNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddDomainNewResponse
func (client *Client) AddDomainNewWithOptions(request *AddDomainNewRequest, runtime *util.RuntimeOptions) (_result *AddDomainNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDomainNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDomainNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddDomainNewRequest
//
// @return AddDomainNewResponse
func (client *Client) AddDomainNew(request *AddDomainNewRequest) (_result *AddDomainNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDomainNewResponse{}
	_body, _err := client.AddDomainNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApplyExportSmsSendRecordNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyExportSmsSendRecordNewResponse
func (client *Client) ApplyExportSmsSendRecordNewWithOptions(request *ApplyExportSmsSendRecordNewRequest, runtime *util.RuntimeOptions) (_result *ApplyExportSmsSendRecordNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCode)) {
		query["ErrorCode"] = request.ErrorCode
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNum)) {
		query["PhoneNum"] = request.PhoneNum
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RealTimeDataFlag)) {
		query["RealTimeDataFlag"] = request.RealTimeDataFlag
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SendDate)) {
		query["SendDate"] = request.SendDate
	}

	if !tea.BoolValue(util.IsUnset(request.SendStatus)) {
		query["SendStatus"] = request.SendStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyExportSmsSendRecordNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyExportSmsSendRecordNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApplyExportSmsSendRecordNewRequest
//
// @return ApplyExportSmsSendRecordNewResponse
func (client *Client) ApplyExportSmsSendRecordNew(request *ApplyExportSmsSendRecordNewRequest) (_result *ApplyExportSmsSendRecordNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyExportSmsSendRecordNewResponse{}
	_body, _err := client.ApplyExportSmsSendRecordNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量创建签名
//
// @param tmpReq - BatchCreateSmsSignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchCreateSmsSignResponse
func (client *Client) BatchCreateSmsSignWithOptions(tmpReq *BatchCreateSmsSignRequest, runtime *util.RuntimeOptions) (_result *BatchCreateSmsSignResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchCreateSmsSignShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ColumnIndexMappingRule)) {
		request.ColumnIndexMappingRuleShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ColumnIndexMappingRule, tea.String("ColumnIndexMappingRule"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.MoreData)) {
		request.MoreDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MoreData, tea.String("MoreData"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ColumnIndexMappingRuleShrink)) {
		query["ColumnIndexMappingRule"] = request.ColumnIndexMappingRuleShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendMessage)) {
		query["ExtendMessage"] = request.ExtendMessage
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.MoreDataShrink)) {
		query["MoreData"] = request.MoreDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OperationType)) {
		query["OperationType"] = request.OperationType
	}

	if !tea.BoolValue(util.IsUnset(request.OssKeys)) {
		query["OssKeys"] = request.OssKeys
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneType)) {
		query["SceneType"] = request.SceneType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.SignOssKey)) {
		query["SignOssKey"] = request.SignOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.UserViewFileName)) {
		query["UserViewFileName"] = request.UserViewFileName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchCreateSmsSign"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchCreateSmsSignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量创建签名
//
// @param request - BatchCreateSmsSignRequest
//
// @return BatchCreateSmsSignResponse
func (client *Client) BatchCreateSmsSign(request *BatchCreateSmsSignRequest) (_result *BatchCreateSmsSignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchCreateSmsSignResponse{}
	_body, _err := client.BatchCreateSmsSignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchDeleteExportSendRecordNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchDeleteExportSendRecordNewResponse
func (client *Client) BatchDeleteExportSendRecordNewWithOptions(request *BatchDeleteExportSendRecordNewRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteExportSendRecordNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchDeleteExportSendRecordNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchDeleteExportSendRecordNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchDeleteExportSendRecordNewRequest
//
// @return BatchDeleteExportSendRecordNewResponse
func (client *Client) BatchDeleteExportSendRecordNew(request *BatchDeleteExportSendRecordNewRequest) (_result *BatchDeleteExportSendRecordNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteExportSendRecordNewResponse{}
	_body, _err := client.BatchDeleteExportSendRecordNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BatchDeleteTaskNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchDeleteTaskNewResponse
func (client *Client) BatchDeleteTaskNewWithOptions(request *BatchDeleteTaskNewRequest, runtime *util.RuntimeOptions) (_result *BatchDeleteTaskNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskIds)) {
		query["TaskIds"] = request.TaskIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchDeleteTaskNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchDeleteTaskNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchDeleteTaskNewRequest
//
// @return BatchDeleteTaskNewResponse
func (client *Client) BatchDeleteTaskNew(request *BatchDeleteTaskNewRequest) (_result *BatchDeleteTaskNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchDeleteTaskNewResponse{}
	_body, _err := client.BatchDeleteTaskNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CalculateSmsLengthNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CalculateSmsLengthNewResponse
func (client *Client) CalculateSmsLengthNewWithOptions(request *CalculateSmsLengthNewRequest, runtime *util.RuntimeOptions) (_result *CalculateSmsLengthNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmsContent)) {
		query["SmsContent"] = request.SmsContent
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CalculateSmsLengthNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CalculateSmsLengthNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CalculateSmsLengthNewRequest
//
// @return CalculateSmsLengthNewResponse
func (client *Client) CalculateSmsLengthNew(request *CalculateSmsLengthNewRequest) (_result *CalculateSmsLengthNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CalculateSmsLengthNewResponse{}
	_body, _err := client.CalculateSmsLengthNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 签名取消审核
//
// @param request - CancelSmsSignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelSmsSignResponse
func (client *Client) CancelSmsSignWithOptions(request *CancelSmsSignRequest, runtime *util.RuntimeOptions) (_result *CancelSmsSignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.QualificationId)) {
		query["QualificationId"] = request.QualificationId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureCode)) {
		query["SignatureCode"] = request.SignatureCode
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureId)) {
		query["SignatureId"] = request.SignatureId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelSmsSign"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelSmsSignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 签名取消审核
//
// @param request - CancelSmsSignRequest
//
// @return CancelSmsSignResponse
func (client *Client) CancelSmsSign(request *CancelSmsSignRequest) (_result *CancelSmsSignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelSmsSignResponse{}
	_body, _err := client.CancelSmsSignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CancelSmsTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelSmsTemplateResponse
func (client *Client) CancelSmsTemplateWithOptions(request *CancelSmsTemplateRequest, runtime *util.RuntimeOptions) (_result *CancelSmsTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelSmsTemplate"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelSmsTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CancelSmsTemplateRequest
//
// @return CancelSmsTemplateResponse
func (client *Client) CancelSmsTemplate(request *CancelSmsTemplateRequest) (_result *CancelSmsTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelSmsTemplateResponse{}
	_body, _err := client.CancelSmsTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CancelSmsTemplateNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelSmsTemplateNewResponse
func (client *Client) CancelSmsTemplateNewWithOptions(request *CancelSmsTemplateNewRequest, runtime *util.RuntimeOptions) (_result *CancelSmsTemplateNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IntelligentApproval)) {
		query["IntelligentApproval"] = request.IntelligentApproval
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelSmsTemplateNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelSmsTemplateNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CancelSmsTemplateNewRequest
//
// @return CancelSmsTemplateNewResponse
func (client *Client) CancelSmsTemplateNew(request *CancelSmsTemplateNewRequest) (_result *CancelSmsTemplateNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelSmsTemplateNewResponse{}
	_body, _err := client.CancelSmsTemplateNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CheckSmsSignNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckSmsSignNewResponse
func (client *Client) CheckSmsSignNewWithOptions(request *CheckSmsSignNewRequest, runtime *util.RuntimeOptions) (_result *CheckSmsSignNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckSmsSignNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckSmsSignNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CheckSmsSignNewRequest
//
// @return CheckSmsSignNewResponse
func (client *Client) CheckSmsSignNew(request *CheckSmsSignNewRequest) (_result *CheckSmsSignNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckSmsSignNewResponse{}
	_body, _err := client.CheckSmsSignNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAlicomProductRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAlicomProductResponse
func (client *Client) CreateAlicomProductWithOptions(request *CreateAlicomProductRequest, runtime *util.RuntimeOptions) (_result *CreateAlicomProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusOffer)) {
		query["BusOffer"] = request.BusOffer
	}

	if !tea.BoolValue(util.IsUnset(request.BusOffers)) {
		query["BusOffers"] = request.BusOffers
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAlicomProduct"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAlicomProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAlicomProductRequest
//
// @return CreateAlicomProductResponse
func (client *Client) CreateAlicomProduct(request *CreateAlicomProductRequest) (_result *CreateAlicomProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAlicomProductResponse{}
	_body, _err := client.CreateAlicomProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建授权
//
// @param request - CreateAuthorizationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAuthorizationResponse
func (client *Client) CreateAuthorizationWithOptions(request *CreateAuthorizationRequest, runtime *util.RuntimeOptions) (_result *CreateAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthorizeCode)) {
		query["AuthorizeCode"] = request.AuthorizeCode
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAuthorization"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建授权
//
// @param request - CreateAuthorizationRequest
//
// @return CreateAuthorizationResponse
func (client *Client) CreateAuthorization(request *CreateAuthorizationRequest) (_result *CreateAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAuthorizationResponse{}
	_body, _err := client.CreateAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建消息回调
//
// @param request - CreateCardMessageCallbackRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCardMessageCallbackResponse
func (client *Client) CreateCardMessageCallbackWithOptions(request *CreateCardMessageCallbackRequest, runtime *util.RuntimeOptions) (_result *CreateCardMessageCallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackUrl)) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCardMessageCallback"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCardMessageCallbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建消息回调
//
// @param request - CreateCardMessageCallbackRequest
//
// @return CreateCardMessageCallbackResponse
func (client *Client) CreateCardMessageCallback(request *CreateCardMessageCallbackRequest) (_result *CreateCardMessageCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCardMessageCallbackResponse{}
	_body, _err := client.CreateCardMessageCallbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建mns
//
// @param request - CreateCardMessageQueueRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCardMessageQueueResponse
func (client *Client) CreateCardMessageQueueWithOptions(request *CreateCardMessageQueueRequest, runtime *util.RuntimeOptions) (_result *CreateCardMessageQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.QueueType)) {
		query["QueueType"] = request.QueueType
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCardMessageQueue"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCardMessageQueueResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建mns
//
// @param request - CreateCardMessageQueueRequest
//
// @return CreateCardMessageQueueResponse
func (client *Client) CreateCardMessageQueue(request *CreateCardMessageQueueRequest) (_result *CreateCardMessageQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCardMessageQueueResponse{}
	_body, _err := client.CreateCardMessageQueueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateDigitalSmsTemplateNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDigitalSmsTemplateNewResponse
func (client *Client) CreateDigitalSmsTemplateNewWithOptions(request *CreateDigitalSmsTemplateNewRequest, runtime *util.RuntimeOptions) (_result *CreateDigitalSmsTemplateNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ContentOssKeys)) {
		query["ContentOssKeys"] = request.ContentOssKeys
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateContent)) {
		query["TemplateContent"] = request.TemplateContent
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDigitalSmsTemplateNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDigitalSmsTemplateNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateDigitalSmsTemplateNewRequest
//
// @return CreateDigitalSmsTemplateNewResponse
func (client *Client) CreateDigitalSmsTemplateNew(request *CreateDigitalSmsTemplateNewRequest) (_result *CreateDigitalSmsTemplateNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDigitalSmsTemplateNewResponse{}
	_body, _err := client.CreateDigitalSmsTemplateNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI CreateFileByBiz is deprecated
//
// @param request - CreateFileByBizRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFileByBizResponse
// Deprecated
func (client *Client) CreateFileByBizWithOptions(request *CreateFileByBizRequest, runtime *util.RuntimeOptions) (_result *CreateFileByBizResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFileByBiz"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFileByBizResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI CreateFileByBiz is deprecated
//
// @param request - CreateFileByBizRequest
//
// @return CreateFileByBizResponse
// Deprecated
func (client *Client) CreateFileByBiz(request *CreateFileByBizRequest) (_result *CreateFileByBizResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFileByBizResponse{}
	_body, _err := client.CreateFileByBizWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateFlowLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFlowLimitResponse
func (client *Client) CreateFlowLimitWithOptions(request *CreateFlowLimitRequest, runtime *util.RuntimeOptions) (_result *CreateFlowLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DailyLimit)) {
		query["DailyLimit"] = request.DailyLimit
	}

	if !tea.BoolValue(util.IsUnset(request.HourLimit)) {
		query["HourLimit"] = request.HourLimit
	}

	if !tea.BoolValue(util.IsUnset(request.MinuteLimit)) {
		query["MinuteLimit"] = request.MinuteLimit
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowLimit"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateFlowLimitRequest
//
// @return CreateFlowLimitResponse
func (client *Client) CreateFlowLimit(request *CreateFlowLimitRequest) (_result *CreateFlowLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowLimitResponse{}
	_body, _err := client.CreateFlowLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateFlowLimitNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFlowLimitNewResponse
func (client *Client) CreateFlowLimitNewWithOptions(request *CreateFlowLimitNewRequest, runtime *util.RuntimeOptions) (_result *CreateFlowLimitNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.DailyLimit)) {
		query["DailyLimit"] = request.DailyLimit
	}

	if !tea.BoolValue(util.IsUnset(request.HourLimit)) {
		query["HourLimit"] = request.HourLimit
	}

	if !tea.BoolValue(util.IsUnset(request.MinuteLimit)) {
		query["MinuteLimit"] = request.MinuteLimit
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowLimitNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowLimitNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateFlowLimitNewRequest
//
// @return CreateFlowLimitNewResponse
func (client *Client) CreateFlowLimitNew(request *CreateFlowLimitNewRequest) (_result *CreateFlowLimitNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowLimitNewResponse{}
	_body, _err := client.CreateFlowLimitNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateMessageCallbackNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMessageCallbackNewResponse
func (client *Client) CreateMessageCallbackNewWithOptions(request *CreateMessageCallbackNewRequest, runtime *util.RuntimeOptions) (_result *CreateMessageCallbackNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackUrl)) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMessageCallbackNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMessageCallbackNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateMessageCallbackNewRequest
//
// @return CreateMessageCallbackNewResponse
func (client *Client) CreateMessageCallbackNew(request *CreateMessageCallbackNewRequest) (_result *CreateMessageCallbackNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMessageCallbackNewResponse{}
	_body, _err := client.CreateMessageCallbackNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateMessageCallbackTestNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMessageCallbackTestNewResponse
func (client *Client) CreateMessageCallbackTestNewWithOptions(request *CreateMessageCallbackTestNewRequest, runtime *util.RuntimeOptions) (_result *CreateMessageCallbackTestNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Method)) {
		query["Method"] = request.Method
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMessageCallbackTestNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMessageCallbackTestNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateMessageCallbackTestNewRequest
//
// @return CreateMessageCallbackTestNewResponse
func (client *Client) CreateMessageCallbackTestNew(request *CreateMessageCallbackTestNewRequest) (_result *CreateMessageCallbackTestNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMessageCallbackTestNewResponse{}
	_body, _err := client.CreateMessageCallbackTestNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateMessageQueueNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMessageQueueNewResponse
func (client *Client) CreateMessageQueueNewWithOptions(request *CreateMessageQueueNewRequest, runtime *util.RuntimeOptions) (_result *CreateMessageQueueNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.QueueType)) {
		query["QueueType"] = request.QueueType
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMessageQueueNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMessageQueueNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateMessageQueueNewRequest
//
// @return CreateMessageQueueNewResponse
func (client *Client) CreateMessageQueueNew(request *CreateMessageQueueNewRequest) (_result *CreateMessageQueueNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMessageQueueNewResponse{}
	_body, _err := client.CreateMessageQueueNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreatePhoneWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePhoneWhiteListResponse
func (client *Client) CreatePhoneWhiteListWithOptions(request *CreatePhoneWhiteListRequest, runtime *util.RuntimeOptions) (_result *CreatePhoneWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumbers)) {
		query["PhoneNumbers"] = request.PhoneNumbers
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePhoneWhiteList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePhoneWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreatePhoneWhiteListRequest
//
// @return CreatePhoneWhiteListResponse
func (client *Client) CreatePhoneWhiteList(request *CreatePhoneWhiteListRequest) (_result *CreatePhoneWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePhoneWhiteListResponse{}
	_body, _err := client.CreatePhoneWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - CreatePhoneWhiteListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePhoneWhiteListNewResponse
func (client *Client) CreatePhoneWhiteListNewWithOptions(tmpReq *CreatePhoneWhiteListNewRequest, runtime *util.RuntimeOptions) (_result *CreatePhoneWhiteListNewResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreatePhoneWhiteListNewShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Remarks)) {
		request.RemarksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Remarks, tea.String("Remarks"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumbers)) {
		query["PhoneNumbers"] = request.PhoneNumbers
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RemarksShrink)) {
		query["Remarks"] = request.RemarksShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePhoneWhiteListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePhoneWhiteListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreatePhoneWhiteListNewRequest
//
// @return CreatePhoneWhiteListNewResponse
func (client *Client) CreatePhoneWhiteListNew(request *CreatePhoneWhiteListNewRequest) (_result *CreatePhoneWhiteListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePhoneWhiteListNewResponse{}
	_body, _err := client.CreatePhoneWhiteListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreatePkgThresholdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePkgThresholdResponse
func (client *Client) CreatePkgThresholdWithOptions(request *CreatePkgThresholdRequest, runtime *util.RuntimeOptions) (_result *CreatePkgThresholdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageWarningLimit)) {
		query["PackageWarningLimit"] = request.PackageWarningLimit
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePkgThreshold"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePkgThresholdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreatePkgThresholdRequest
//
// @return CreatePkgThresholdResponse
func (client *Client) CreatePkgThreshold(request *CreatePkgThresholdRequest) (_result *CreatePkgThresholdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePkgThresholdResponse{}
	_body, _err := client.CreatePkgThresholdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreatePkgThresholdNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePkgThresholdNewResponse
func (client *Client) CreatePkgThresholdNewWithOptions(request *CreatePkgThresholdNewRequest, runtime *util.RuntimeOptions) (_result *CreatePkgThresholdNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageWarningLimit)) {
		query["PackageWarningLimit"] = request.PackageWarningLimit
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePkgThresholdNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePkgThresholdNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreatePkgThresholdNewRequest
//
// @return CreatePkgThresholdNewResponse
func (client *Client) CreatePkgThresholdNew(request *CreatePkgThresholdNewRequest) (_result *CreatePkgThresholdNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePkgThresholdNewResponse{}
	_body, _err := client.CreatePkgThresholdNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreatePrevLimitNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePrevLimitNewResponse
func (client *Client) CreatePrevLimitNewWithOptions(request *CreatePrevLimitNewRequest, runtime *util.RuntimeOptions) (_result *CreatePrevLimitNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HourLimit)) {
		query["HourLimit"] = request.HourLimit
	}

	if !tea.BoolValue(util.IsUnset(request.IncreaseRate)) {
		query["IncreaseRate"] = request.IncreaseRate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SuccessRate)) {
		query["SuccessRate"] = request.SuccessRate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePrevLimitNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePrevLimitNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreatePrevLimitNewRequest
//
// @return CreatePrevLimitNewResponse
func (client *Client) CreatePrevLimitNew(request *CreatePrevLimitNewRequest) (_result *CreatePrevLimitNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePrevLimitNewResponse{}
	_body, _err := client.CreatePrevLimitNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateProductRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateProductResponse
func (client *Client) CreateProductWithOptions(request *CreateProductRequest, runtime *util.RuntimeOptions) (_result *CreateProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProduct"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateProductRequest
//
// @return CreateProductResponse
func (client *Client) CreateProduct(request *CreateProductRequest) (_result *CreateProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProductResponse{}
	_body, _err := client.CreateProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateProductNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateProductNewResponse
func (client *Client) CreateProductNewWithOptions(request *CreateProductNewRequest, runtime *util.RuntimeOptions) (_result *CreateProductNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateProductNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateProductNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateProductNewRequest
//
// @return CreateProductNewResponse
func (client *Client) CreateProductNew(request *CreateProductNewRequest) (_result *CreateProductNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateProductNewResponse{}
	_body, _err := client.CreateProductNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateShortUrlNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateShortUrlNewResponse
func (client *Client) CreateShortUrlNewWithOptions(request *CreateShortUrlNewRequest, runtime *util.RuntimeOptions) (_result *CreateShortUrlNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EffectDay)) {
		query["EffectDay"] = request.EffectDay
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["EventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceUrl)) {
		query["SourceUrl"] = request.SourceUrl
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateShortUrlNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateShortUrlNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateShortUrlNewRequest
//
// @return CreateShortUrlNewResponse
func (client *Client) CreateShortUrlNew(request *CreateShortUrlNewRequest) (_result *CreateShortUrlNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateShortUrlNewResponse{}
	_body, _err := client.CreateShortUrlNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateSmsDetectTaskNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSmsDetectTaskNewResponse
func (client *Client) CreateSmsDetectTaskNewWithOptions(request *CreateSmsDetectTaskNewRequest, runtime *util.RuntimeOptions) (_result *CreateSmsDetectTaskNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Check)) {
		query["Check"] = request.Check
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.SmsContent)) {
		query["SmsContent"] = request.SmsContent
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateParam)) {
		query["TemplateParam"] = request.TemplateParam
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmsDetectTaskNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmsDetectTaskNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSmsDetectTaskNewRequest
//
// @return CreateSmsDetectTaskNewResponse
func (client *Client) CreateSmsDetectTaskNew(request *CreateSmsDetectTaskNewRequest) (_result *CreateSmsDetectTaskNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmsDetectTaskNewResponse{}
	_body, _err := client.CreateSmsDetectTaskNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateSmsInternalApplyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSmsInternalApplyResponse
func (client *Client) CreateSmsInternalApplyWithOptions(request *CreateSmsInternalApplyRequest, runtime *util.RuntimeOptions) (_result *CreateSmsInternalApplyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppDownloadLink)) {
		query["AppDownloadLink"] = request.AppDownloadLink
	}

	if !tea.BoolValue(util.IsUnset(request.Country)) {
		query["Country"] = request.Country
	}

	if !tea.BoolValue(util.IsUnset(request.Industry)) {
		query["Industry"] = request.Industry
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageLink)) {
		query["PageLink"] = request.PageLink
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmsInternalApply"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmsInternalApplyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSmsInternalApplyRequest
//
// @return CreateSmsInternalApplyResponse
func (client *Client) CreateSmsInternalApply(request *CreateSmsInternalApplyRequest) (_result *CreateSmsInternalApplyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmsInternalApplyResponse{}
	_body, _err := client.CreateSmsInternalApplyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateSmsProductForChannelCustRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSmsProductForChannelCustResponse
func (client *Client) CreateSmsProductForChannelCustWithOptions(request *CreateSmsProductForChannelCustRequest, runtime *util.RuntimeOptions) (_result *CreateSmsProductForChannelCustResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyCheckOpened)) {
		query["OnlyCheckOpened"] = request.OnlyCheckOpened
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmsProductForChannelCust"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmsProductForChannelCustResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSmsProductForChannelCustRequest
//
// @return CreateSmsProductForChannelCustResponse
func (client *Client) CreateSmsProductForChannelCust(request *CreateSmsProductForChannelCustRequest) (_result *CreateSmsProductForChannelCustResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmsProductForChannelCustResponse{}
	_body, _err := client.CreateSmsProductForChannelCustWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateSmsSaasTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSmsSaasTaskResponse
func (client *Client) CreateSmsSaasTaskWithOptions(request *CreateSmsSaasTaskRequest, runtime *util.RuntimeOptions) (_result *CreateSmsSaasTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ClientIp)) {
		query["ClientIp"] = request.ClientIp
	}

	if !tea.BoolValue(util.IsUnset(request.DataType)) {
		query["DataType"] = request.DataType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderTime)) {
		query["OrderTime"] = request.OrderTime
	}

	if !tea.BoolValue(util.IsUnset(request.OssFileName)) {
		query["OssFileName"] = request.OssFileName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneList)) {
		query["PhoneList"] = request.PhoneList
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleType)) {
		query["ScheduleType"] = request.ScheduleType
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.SmsContent)) {
		query["SmsContent"] = request.SmsContent
	}

	if !tea.BoolValue(util.IsUnset(request.SmsTemplateCode)) {
		query["SmsTemplateCode"] = request.SmsTemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.ValidCount)) {
		query["ValidCount"] = request.ValidCount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmsSaasTask"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmsSaasTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSmsSaasTaskRequest
//
// @return CreateSmsSaasTaskResponse
func (client *Client) CreateSmsSaasTask(request *CreateSmsSaasTaskRequest) (_result *CreateSmsSaasTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmsSaasTaskResponse{}
	_body, _err := client.CreateSmsSaasTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateSmsSaasTaskNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSmsSaasTaskNewResponse
func (client *Client) CreateSmsSaasTaskNewWithOptions(request *CreateSmsSaasTaskNewRequest, runtime *util.RuntimeOptions) (_result *CreateSmsSaasTaskNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.DataAbilityTaskId)) {
		query["DataAbilityTaskId"] = request.DataAbilityTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.DataType)) {
		query["DataType"] = request.DataType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderTime)) {
		query["OrderTime"] = request.OrderTime
	}

	if !tea.BoolValue(util.IsUnset(request.OssFileName)) {
		query["OssFileName"] = request.OssFileName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneList)) {
		query["PhoneList"] = request.PhoneList
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleType)) {
		query["ScheduleType"] = request.ScheduleType
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.SmsContent)) {
		query["SmsContent"] = request.SmsContent
	}

	if !tea.BoolValue(util.IsUnset(request.SmsTemplateCode)) {
		query["SmsTemplateCode"] = request.SmsTemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.ValidCount)) {
		query["ValidCount"] = request.ValidCount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmsSaasTaskNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmsSaasTaskNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSmsSaasTaskNewRequest
//
// @return CreateSmsSaasTaskNewResponse
func (client *Client) CreateSmsSaasTaskNew(request *CreateSmsSaasTaskNewRequest) (_result *CreateSmsSaasTaskNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmsSaasTaskNewResponse{}
	_body, _err := client.CreateSmsSaasTaskNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateSmsSendFailDetailsDownloadRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSmsSendFailDetailsDownloadResponse
func (client *Client) CreateSmsSendFailDetailsDownloadWithOptions(request *CreateSmsSendFailDetailsDownloadRequest, runtime *util.RuntimeOptions) (_result *CreateSmsSendFailDetailsDownloadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SendDate)) {
		query["SendDate"] = request.SendDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmsSendFailDetailsDownload"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmsSendFailDetailsDownloadResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSmsSendFailDetailsDownloadRequest
//
// @return CreateSmsSendFailDetailsDownloadResponse
func (client *Client) CreateSmsSendFailDetailsDownload(request *CreateSmsSendFailDetailsDownloadRequest) (_result *CreateSmsSendFailDetailsDownloadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmsSendFailDetailsDownloadResponse{}
	_body, _err := client.CreateSmsSendFailDetailsDownloadWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateSmsSignRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSmsSignResponse
func (client *Client) CreateSmsSignWithOptions(request *CreateSmsSignRequest, runtime *util.RuntimeOptions) (_result *CreateSmsSignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExtendMessage)) {
		query["ExtendMessage"] = request.ExtendMessage
	}

	if !tea.BoolValue(util.IsUnset(request.FileIds)) {
		query["FileIds"] = request.FileIds
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneType)) {
		query["SceneType"] = request.SceneType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmsSign"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmsSignResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSmsSignRequest
//
// @return CreateSmsSignResponse
func (client *Client) CreateSmsSign(request *CreateSmsSignRequest) (_result *CreateSmsSignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmsSignResponse{}
	_body, _err := client.CreateSmsSignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - CreateSmsSignNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSmsSignNewResponse
func (client *Client) CreateSmsSignNewWithOptions(tmpReq *CreateSmsSignNewRequest, runtime *util.RuntimeOptions) (_result *CreateSmsSignNewResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSmsSignNewShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.MoreData)) {
		request.MoreDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MoreData, tea.String("MoreData"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicationSceneId)) {
		query["ApplicationSceneId"] = request.ApplicationSceneId
	}

	if !tea.BoolValue(util.IsUnset(request.ApplySource)) {
		query["ApplySource"] = request.ApplySource
	}

	if !tea.BoolValue(util.IsUnset(request.Authorization)) {
		query["Authorization"] = request.Authorization
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizationEffTime)) {
		query["AuthorizationEffTime"] = request.AuthorizationEffTime
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizationLetter)) {
		query["AuthorizationLetter"] = request.AuthorizationLetter
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizationLetterAuditPass)) {
		query["AuthorizationLetterAuditPass"] = request.AuthorizationLetterAuditPass
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizationLetterId)) {
		query["AuthorizationLetterId"] = request.AuthorizationLetterId
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizationLetterName)) {
		query["AuthorizationLetterName"] = request.AuthorizationLetterName
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizationSignScope)) {
		query["AuthorizationSignScope"] = request.AuthorizationSignScope
	}

	if !tea.BoolValue(util.IsUnset(request.CreateSignGray)) {
		query["CreateSignGray"] = request.CreateSignGray
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAuthorizationLetter)) {
		query["EnableAuthorizationLetter"] = request.EnableAuthorizationLetter
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendMessage)) {
		query["ExtendMessage"] = request.ExtendMessage
	}

	if !tea.BoolValue(util.IsUnset(request.FileIds)) {
		query["FileIds"] = request.FileIds
	}

	if !tea.BoolValue(util.IsUnset(request.IsAuthorizationLetterOCRComplete)) {
		query["IsAuthorizationLetterOCRComplete"] = request.IsAuthorizationLetterOCRComplete
	}

	if !tea.BoolValue(util.IsUnset(request.IsAuthorizationLetterOCRDiff)) {
		query["IsAuthorizationLetterOCRDiff"] = request.IsAuthorizationLetterOCRDiff
	}

	if !tea.BoolValue(util.IsUnset(request.IsSignScopeOCRDiff)) {
		query["IsSignScopeOCRDiff"] = request.IsSignScopeOCRDiff
	}

	if !tea.BoolValue(util.IsUnset(request.MoreDataShrink)) {
		query["MoreData"] = request.MoreDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationCode)) {
		query["OrganizationCode"] = request.OrganizationCode
	}

	if !tea.BoolValue(util.IsUnset(request.OssKeys)) {
		query["OssKeys"] = request.OssKeys
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProxyAuthorization)) {
		query["ProxyAuthorization"] = request.ProxyAuthorization
	}

	if !tea.BoolValue(util.IsUnset(request.QualificationId)) {
		query["QualificationId"] = request.QualificationId
	}

	if !tea.BoolValue(util.IsUnset(request.QualificationType)) {
		query["QualificationType"] = request.QualificationType
	}

	if !tea.BoolValue(util.IsUnset(request.QualificationVersion)) {
		query["QualificationVersion"] = request.QualificationVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneType)) {
		query["SceneType"] = request.SceneType
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.SignCode)) {
		query["SignCode"] = request.SignCode
	}

	if !tea.BoolValue(util.IsUnset(request.SignId)) {
		query["SignId"] = request.SignId
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.SignScopeOCR)) {
		query["SignScopeOCR"] = request.SignScopeOCR
	}

	if !tea.BoolValue(util.IsUnset(request.SignUpgrade)) {
		query["SignUpgrade"] = request.SignUpgrade
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdParty)) {
		query["ThirdParty"] = request.ThirdParty
	}

	if !tea.BoolValue(util.IsUnset(request.UserViewFileName)) {
		query["UserViewFileName"] = request.UserViewFileName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmsSignNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmsSignNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSmsSignNewRequest
//
// @return CreateSmsSignNewResponse
func (client *Client) CreateSmsSignNew(request *CreateSmsSignNewRequest) (_result *CreateSmsSignNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmsSignNewResponse{}
	_body, _err := client.CreateSmsSignNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - CreateSmsTemplateNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSmsTemplateNewResponse
func (client *Client) CreateSmsTemplateNewWithOptions(tmpReq *CreateSmsTemplateNewRequest, runtime *util.RuntimeOptions) (_result *CreateSmsTemplateNewResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSmsTemplateNewShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.MoreData)) {
		request.MoreDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MoreData, tea.String("MoreData"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AiTemplate)) {
		query["AiTemplate"] = request.AiTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.AiTemplateUuid)) {
		query["AiTemplateUuid"] = request.AiTemplateUuid
	}

	if !tea.BoolValue(util.IsUnset(request.ApplicationSceneId)) {
		query["ApplicationSceneId"] = request.ApplicationSceneId
	}

	if !tea.BoolValue(util.IsUnset(request.ApplySource)) {
		query["ApplySource"] = request.ApplySource
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.IntlType)) {
		query["IntlType"] = request.IntlType
	}

	if !tea.BoolValue(util.IsUnset(request.MoreDataShrink)) {
		query["MoreData"] = request.MoreDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OssKeys)) {
		query["OssKeys"] = request.OssKeys
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductUrl)) {
		query["ProductUrl"] = request.ProductUrl
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedSignName)) {
		query["RelatedSignName"] = request.RelatedSignName
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedSignOrderId)) {
		query["RelatedSignOrderId"] = request.RelatedSignOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedSignUsageName)) {
		query["RelatedSignUsageName"] = request.RelatedSignUsageName
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RmdTemplateId)) {
		query["RmdTemplateId"] = request.RmdTemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateContent)) {
		query["TemplateContent"] = request.TemplateContent
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateRule)) {
		query["TemplateRule"] = request.TemplateRule
	}

	if !tea.BoolValue(util.IsUnset(request.UserViewFileName)) {
		query["UserViewFileName"] = request.UserViewFileName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSmsTemplateNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmsTemplateNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateSmsTemplateNewRequest
//
// @return CreateSmsTemplateNewResponse
func (client *Client) CreateSmsTemplateNew(request *CreateSmsTemplateNewRequest) (_result *CreateSmsTemplateNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmsTemplateNewResponse{}
	_body, _err := client.CreateSmsTemplateNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateWarningThresholdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWarningThresholdResponse
func (client *Client) CreateWarningThresholdWithOptions(request *CreateWarningThresholdRequest, runtime *util.RuntimeOptions) (_result *CreateWarningThresholdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.DailyHaltLimit)) {
		query["DailyHaltLimit"] = request.DailyHaltLimit
	}

	if !tea.BoolValue(util.IsUnset(request.DailyWarningLimit)) {
		query["DailyWarningLimit"] = request.DailyWarningLimit
	}

	if !tea.BoolValue(util.IsUnset(request.MonthlyHaltLimit)) {
		query["MonthlyHaltLimit"] = request.MonthlyHaltLimit
	}

	if !tea.BoolValue(util.IsUnset(request.MonthlyWarningLimit)) {
		query["MonthlyWarningLimit"] = request.MonthlyWarningLimit
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWarningThreshold"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWarningThresholdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateWarningThresholdRequest
//
// @return CreateWarningThresholdResponse
func (client *Client) CreateWarningThreshold(request *CreateWarningThresholdRequest) (_result *CreateWarningThresholdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateWarningThresholdResponse{}
	_body, _err := client.CreateWarningThresholdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateWarningThresholdNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWarningThresholdNewResponse
func (client *Client) CreateWarningThresholdNewWithOptions(request *CreateWarningThresholdNewRequest, runtime *util.RuntimeOptions) (_result *CreateWarningThresholdNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.DailyHaltLimit)) {
		query["DailyHaltLimit"] = request.DailyHaltLimit
	}

	if !tea.BoolValue(util.IsUnset(request.DailyWarningLimit)) {
		query["DailyWarningLimit"] = request.DailyWarningLimit
	}

	if !tea.BoolValue(util.IsUnset(request.MonthlyHaltLimit)) {
		query["MonthlyHaltLimit"] = request.MonthlyHaltLimit
	}

	if !tea.BoolValue(util.IsUnset(request.MonthlyWarningLimit)) {
		query["MonthlyWarningLimit"] = request.MonthlyWarningLimit
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWarningThresholdNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWarningThresholdNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateWarningThresholdNewRequest
//
// @return CreateWarningThresholdNewResponse
func (client *Client) CreateWarningThresholdNew(request *CreateWarningThresholdNewRequest) (_result *CreateWarningThresholdNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateWarningThresholdNewResponse{}
	_body, _err := client.CreateWarningThresholdNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除导出记录
//
// @param request - DelCardSendExportInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DelCardSendExportInfoResponse
func (client *Client) DelCardSendExportInfoWithOptions(request *DelCardSendExportInfoRequest, runtime *util.RuntimeOptions) (_result *DelCardSendExportInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DelCardSendExportInfo"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DelCardSendExportInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除导出记录
//
// @param request - DelCardSendExportInfoRequest
//
// @return DelCardSendExportInfoResponse
func (client *Client) DelCardSendExportInfo(request *DelCardSendExportInfoRequest) (_result *DelCardSendExportInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DelCardSendExportInfoResponse{}
	_body, _err := client.DelCardSendExportInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除消息回调
//
// @param request - DeleteCardMessageCallbackRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCardMessageCallbackResponse
func (client *Client) DeleteCardMessageCallbackWithOptions(request *DeleteCardMessageCallbackRequest, runtime *util.RuntimeOptions) (_result *DeleteCardMessageCallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackUrl)) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCardMessageCallback"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCardMessageCallbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除消息回调
//
// @param request - DeleteCardMessageCallbackRequest
//
// @return DeleteCardMessageCallbackResponse
func (client *Client) DeleteCardMessageCallback(request *DeleteCardMessageCallbackRequest) (_result *DeleteCardMessageCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCardMessageCallbackResponse{}
	_body, _err := client.DeleteCardMessageCallbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteCardMessageQueueRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCardMessageQueueResponse
func (client *Client) DeleteCardMessageQueueWithOptions(request *DeleteCardMessageQueueRequest, runtime *util.RuntimeOptions) (_result *DeleteCardMessageQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.QueueType)) {
		query["QueueType"] = request.QueueType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCardMessageQueue"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCardMessageQueueResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteCardMessageQueueRequest
//
// @return DeleteCardMessageQueueResponse
func (client *Client) DeleteCardMessageQueue(request *DeleteCardMessageQueueRequest) (_result *DeleteCardMessageQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCardMessageQueueResponse{}
	_body, _err := client.DeleteCardMessageQueueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteContactsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteContactsResponse
func (client *Client) DeleteContactsWithOptions(request *DeleteContactsRequest, runtime *util.RuntimeOptions) (_result *DeleteContactsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteContacts"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteContactsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteContactsRequest
//
// @return DeleteContactsResponse
func (client *Client) DeleteContacts(request *DeleteContactsRequest) (_result *DeleteContactsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteContactsResponse{}
	_body, _err := client.DeleteContactsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteContactsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteContactsNewResponse
func (client *Client) DeleteContactsNewWithOptions(request *DeleteContactsNewRequest, runtime *util.RuntimeOptions) (_result *DeleteContactsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteContactsNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteContactsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteContactsNewRequest
//
// @return DeleteContactsNewResponse
func (client *Client) DeleteContactsNew(request *DeleteContactsNewRequest) (_result *DeleteContactsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteContactsNewResponse{}
	_body, _err := client.DeleteContactsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteDigitalTemplateNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDigitalTemplateNewResponse
func (client *Client) DeleteDigitalTemplateNewWithOptions(request *DeleteDigitalTemplateNewRequest, runtime *util.RuntimeOptions) (_result *DeleteDigitalTemplateNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDigitalTemplateNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDigitalTemplateNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteDigitalTemplateNewRequest
//
// @return DeleteDigitalTemplateNewResponse
func (client *Client) DeleteDigitalTemplateNew(request *DeleteDigitalTemplateNewRequest) (_result *DeleteDigitalTemplateNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDigitalTemplateNewResponse{}
	_body, _err := client.DeleteDigitalTemplateNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteMessageCallbackNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMessageCallbackNewResponse
func (client *Client) DeleteMessageCallbackNewWithOptions(request *DeleteMessageCallbackNewRequest, runtime *util.RuntimeOptions) (_result *DeleteMessageCallbackNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMessageCallbackNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMessageCallbackNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteMessageCallbackNewRequest
//
// @return DeleteMessageCallbackNewResponse
func (client *Client) DeleteMessageCallbackNew(request *DeleteMessageCallbackNewRequest) (_result *DeleteMessageCallbackNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMessageCallbackNewResponse{}
	_body, _err := client.DeleteMessageCallbackNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteMessageQueueNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMessageQueueNewResponse
func (client *Client) DeleteMessageQueueNewWithOptions(request *DeleteMessageQueueNewRequest, runtime *util.RuntimeOptions) (_result *DeleteMessageQueueNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.QueueType)) {
		query["QueueType"] = request.QueueType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMessageQueueNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMessageQueueNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteMessageQueueNewRequest
//
// @return DeleteMessageQueueNewResponse
func (client *Client) DeleteMessageQueueNew(request *DeleteMessageQueueNewRequest) (_result *DeleteMessageQueueNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMessageQueueNewResponse{}
	_body, _err := client.DeleteMessageQueueNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteOrCanceleTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteOrCanceleTaskResponse
func (client *Client) DeleteOrCanceleTaskWithOptions(request *DeleteOrCanceleTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteOrCanceleTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IsDeleted)) {
		query["IsDeleted"] = request.IsDeleted
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteOrCanceleTask"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteOrCanceleTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteOrCanceleTaskRequest
//
// @return DeleteOrCanceleTaskResponse
func (client *Client) DeleteOrCanceleTask(request *DeleteOrCanceleTaskRequest) (_result *DeleteOrCanceleTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteOrCanceleTaskResponse{}
	_body, _err := client.DeleteOrCanceleTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteOrCanceleTaskNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteOrCanceleTaskNewResponse
func (client *Client) DeleteOrCanceleTaskNewWithOptions(request *DeleteOrCanceleTaskNewRequest, runtime *util.RuntimeOptions) (_result *DeleteOrCanceleTaskNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IsDeleted)) {
		query["IsDeleted"] = request.IsDeleted
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteOrCanceleTaskNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteOrCanceleTaskNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteOrCanceleTaskNewRequest
//
// @return DeleteOrCanceleTaskNewResponse
func (client *Client) DeleteOrCanceleTaskNew(request *DeleteOrCanceleTaskNewRequest) (_result *DeleteOrCanceleTaskNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteOrCanceleTaskNewResponse{}
	_body, _err := client.DeleteOrCanceleTaskNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeletePhoneWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePhoneWhiteListResponse
func (client *Client) DeletePhoneWhiteListWithOptions(request *DeletePhoneWhiteListRequest, runtime *util.RuntimeOptions) (_result *DeletePhoneWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePhoneWhiteList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePhoneWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeletePhoneWhiteListRequest
//
// @return DeletePhoneWhiteListResponse
func (client *Client) DeletePhoneWhiteList(request *DeletePhoneWhiteListRequest) (_result *DeletePhoneWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePhoneWhiteListResponse{}
	_body, _err := client.DeletePhoneWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeletePhoneWhiteListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePhoneWhiteListNewResponse
func (client *Client) DeletePhoneWhiteListNewWithOptions(request *DeletePhoneWhiteListNewRequest, runtime *util.RuntimeOptions) (_result *DeletePhoneWhiteListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePhoneWhiteListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePhoneWhiteListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeletePhoneWhiteListNewRequest
//
// @return DeletePhoneWhiteListNewResponse
func (client *Client) DeletePhoneWhiteListNew(request *DeletePhoneWhiteListNewRequest) (_result *DeletePhoneWhiteListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePhoneWhiteListNewResponse{}
	_body, _err := client.DeletePhoneWhiteListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteShortUrlNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteShortUrlNewResponse
func (client *Client) DeleteShortUrlNewWithOptions(request *DeleteShortUrlNewRequest, runtime *util.RuntimeOptions) (_result *DeleteShortUrlNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteShortUrlNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteShortUrlNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteShortUrlNewRequest
//
// @return DeleteShortUrlNewResponse
func (client *Client) DeleteShortUrlNew(request *DeleteShortUrlNewRequest) (_result *DeleteShortUrlNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteShortUrlNewResponse{}
	_body, _err := client.DeleteShortUrlNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteSmsTemplateNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSmsTemplateNewResponse
func (client *Client) DeleteSmsTemplateNewWithOptions(request *DeleteSmsTemplateNewRequest, runtime *util.RuntimeOptions) (_result *DeleteSmsTemplateNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IsSmsSign)) {
		query["IsSmsSign"] = request.IsSmsSign
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SmsTemplateIds)) {
		query["SmsTemplateIds"] = request.SmsTemplateIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSmsTemplateNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSmsTemplateNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteSmsTemplateNewRequest
//
// @return DeleteSmsTemplateNewResponse
func (client *Client) DeleteSmsTemplateNew(request *DeleteSmsTemplateNewRequest) (_result *DeleteSmsTemplateNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSmsTemplateNewResponse{}
	_body, _err := client.DeleteSmsTemplateNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发送纪录信息导出
//
// @param request - ExportCardSmsHistoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportCardSmsHistoryResponse
func (client *Client) ExportCardSmsHistoryWithOptions(request *ExportCardSmsHistoryRequest, runtime *util.RuntimeOptions) (_result *ExportCardSmsHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiSend)) {
		query["ApiSend"] = request.ApiSend
	}

	if !tea.BoolValue(util.IsUnset(request.CardTemplateType)) {
		query["CardTemplateType"] = request.CardTemplateType
	}

	if !tea.BoolValue(util.IsUnset(request.GmtCreate)) {
		query["GmtCreate"] = request.GmtCreate
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiveState)) {
		query["ReceiveState"] = request.ReceiveState
	}

	if !tea.BoolValue(util.IsUnset(request.Receiver)) {
		query["Receiver"] = request.Receiver
	}

	if !tea.BoolValue(util.IsUnset(request.RenderState)) {
		query["RenderState"] = request.RenderState
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportCardSmsHistory"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportCardSmsHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发送纪录信息导出
//
// @param request - ExportCardSmsHistoryRequest
//
// @return ExportCardSmsHistoryResponse
func (client *Client) ExportCardSmsHistory(request *ExportCardSmsHistoryRequest) (_result *ExportCardSmsHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportCardSmsHistoryResponse{}
	_body, _err := client.ExportCardSmsHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出发送统计信息-解析统计
//
// @param request - ExportCardSmsStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportCardSmsStatisticsResponse
func (client *Client) ExportCardSmsStatisticsWithOptions(request *ExportCardSmsStatisticsRequest, runtime *util.RuntimeOptions) (_result *ExportCardSmsStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomTmpCode)) {
		query["CustomTmpCode"] = request.CustomTmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateEnd)) {
		query["SendDateEnd"] = request.SendDateEnd
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateStart)) {
		query["SendDateStart"] = request.SendDateStart
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.TmpName)) {
		query["TmpName"] = request.TmpName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportCardSmsStatistics"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportCardSmsStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出发送统计信息-解析统计
//
// @param request - ExportCardSmsStatisticsRequest
//
// @return ExportCardSmsStatisticsResponse
func (client *Client) ExportCardSmsStatistics(request *ExportCardSmsStatisticsRequest) (_result *ExportCardSmsStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportCardSmsStatisticsResponse{}
	_body, _err := client.ExportCardSmsStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 导出发送统计信息-发送+解析统计
//
// @param request - ExportCardSmsStatisticsSendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportCardSmsStatisticsSendResponse
func (client *Client) ExportCardSmsStatisticsSendWithOptions(request *ExportCardSmsStatisticsSendRequest, runtime *util.RuntimeOptions) (_result *ExportCardSmsStatisticsSendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomTmpCode)) {
		query["CustomTmpCode"] = request.CustomTmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateEnd)) {
		query["SendDateEnd"] = request.SendDateEnd
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateStart)) {
		query["SendDateStart"] = request.SendDateStart
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportCardSmsStatisticsSend"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportCardSmsStatisticsSendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 导出发送统计信息-发送+解析统计
//
// @param request - ExportCardSmsStatisticsSendRequest
//
// @return ExportCardSmsStatisticsSendResponse
func (client *Client) ExportCardSmsStatisticsSend(request *ExportCardSmsStatisticsSendRequest) (_result *ExportCardSmsStatisticsSendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportCardSmsStatisticsSendResponse{}
	_body, _err := client.ExportCardSmsStatisticsSendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发送效果统计导出
//
// @param request - ExportTmpEffectReportDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportTmpEffectReportDataResponse
func (client *Client) ExportTmpEffectReportDataWithOptions(request *ExportTmpEffectReportDataRequest, runtime *util.RuntimeOptions) (_result *ExportTmpEffectReportDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.TmpName)) {
		query["TmpName"] = request.TmpName
	}

	if !tea.BoolValue(util.IsUnset(request.VendorCode)) {
		query["VendorCode"] = request.VendorCode
	}

	if !tea.BoolValue(util.IsUnset(request.VendorName)) {
		query["VendorName"] = request.VendorName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportTmpEffectReportData"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportTmpEffectReportDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发送效果统计导出
//
// @param request - ExportTmpEffectReportDataRequest
//
// @return ExportTmpEffectReportDataResponse
func (client *Client) ExportTmpEffectReportData(request *ExportTmpEffectReportDataRequest) (_result *ExportTmpEffectReportDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportTmpEffectReportDataResponse{}
	_body, _err := client.ExportTmpEffectReportDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 授权书下载
//
// @param request - GetLetterOfAuthorizationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLetterOfAuthorizationResponse
func (client *Client) GetLetterOfAuthorizationWithOptions(request *GetLetterOfAuthorizationRequest, runtime *util.RuntimeOptions) (_result *GetLetterOfAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLetterOfAuthorization"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLetterOfAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 授权书下载
//
// @param request - GetLetterOfAuthorizationRequest
//
// @return GetLetterOfAuthorizationResponse
func (client *Client) GetLetterOfAuthorization(request *GetLetterOfAuthorizationRequest) (_result *GetLetterOfAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLetterOfAuthorizationResponse{}
	_body, _err := client.GetLetterOfAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取推送的消息信息
//
// @param request - ListPushMsgRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPushMsgResponse
func (client *Client) ListPushMsgWithOptions(request *ListPushMsgRequest, runtime *util.RuntimeOptions) (_result *ListPushMsgResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MsgType)) {
		query["MsgType"] = request.MsgType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PushTime)) {
		query["PushTime"] = request.PushTime
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPushMsg"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPushMsgResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取推送的消息信息
//
// @param request - ListPushMsgRequest
//
// @return ListPushMsgResponse
func (client *Client) ListPushMsg(request *ListPushMsgRequest) (_result *ListPushMsgResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPushMsgResponse{}
	_body, _err := client.ListPushMsgWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListTagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TagOwnerUid)) {
		query["TagOwnerUid"] = request.TagOwnerUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListTagResourcesRequest
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - OpenShortUrlProductRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenShortUrlProductResponse
func (client *Client) OpenShortUrlProductWithOptions(request *OpenShortUrlProductRequest, runtime *util.RuntimeOptions) (_result *OpenShortUrlProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenShortUrlProduct"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenShortUrlProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - OpenShortUrlProductRequest
//
// @return OpenShortUrlProductResponse
func (client *Client) OpenShortUrlProduct(request *OpenShortUrlProductRequest) (_result *OpenShortUrlProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenShortUrlProductResponse{}
	_body, _err := client.OpenShortUrlProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - OpenShortUrlProductNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenShortUrlProductNewResponse
func (client *Client) OpenShortUrlProductNewWithOptions(request *OpenShortUrlProductNewRequest, runtime *util.RuntimeOptions) (_result *OpenShortUrlProductNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OpenShortUrlProductNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenShortUrlProductNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - OpenShortUrlProductNewRequest
//
// @return OpenShortUrlProductNewResponse
func (client *Client) OpenShortUrlProductNew(request *OpenShortUrlProductNewRequest) (_result *OpenShortUrlProductNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenShortUrlProductNewResponse{}
	_body, _err := client.OpenShortUrlProductNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - OpencPrevFlagNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpencPrevFlagNewResponse
func (client *Client) OpencPrevFlagNewWithOptions(request *OpencPrevFlagNewRequest, runtime *util.RuntimeOptions) (_result *OpencPrevFlagNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IsOpen)) {
		query["IsOpen"] = request.IsOpen
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OpencPrevFlagNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpencPrevFlagNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - OpencPrevFlagNewRequest
//
// @return OpencPrevFlagNewResponse
func (client *Client) OpencPrevFlagNew(request *OpencPrevFlagNewRequest) (_result *OpencPrevFlagNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpencPrevFlagNewResponse{}
	_body, _err := client.OpencPrevFlagNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryAnyParamTemplateUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryAnyParamTemplateUserResponse
func (client *Client) QueryAnyParamTemplateUserWithOptions(request *QueryAnyParamTemplateUserRequest, runtime *util.RuntimeOptions) (_result *QueryAnyParamTemplateUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAnyParamTemplateUser"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAnyParamTemplateUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryAnyParamTemplateUserRequest
//
// @return QueryAnyParamTemplateUserResponse
func (client *Client) QueryAnyParamTemplateUser(request *QueryAnyParamTemplateUserRequest) (_result *QueryAnyParamTemplateUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAnyParamTemplateUserResponse{}
	_body, _err := client.QueryAnyParamTemplateUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取授权状态
//
// @param request - QueryAuthorizationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryAuthorizationResponse
func (client *Client) QueryAuthorizationWithOptions(request *QueryAuthorizationRequest, runtime *util.RuntimeOptions) (_result *QueryAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthorizeCode)) {
		query["AuthorizeCode"] = request.AuthorizeCode
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAuthorization"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取授权状态
//
// @param request - QueryAuthorizationRequest
//
// @return QueryAuthorizationResponse
func (client *Client) QueryAuthorization(request *QueryAuthorizationRequest) (_result *QueryAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAuthorizationResponse{}
	_body, _err := client.QueryAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryBillingStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryBillingStatisticsResponse
func (client *Client) QueryBillingStatisticsWithOptions(request *QueryBillingStatisticsRequest, runtime *util.RuntimeOptions) (_result *QueryBillingStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillCycle)) {
		query["BillCycle"] = request.BillCycle
	}

	if !tea.BoolValue(util.IsUnset(request.ItemName)) {
		query["ItemName"] = request.ItemName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryBillingStatistics"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryBillingStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryBillingStatisticsRequest
//
// @return QueryBillingStatisticsResponse
func (client *Client) QueryBillingStatistics(request *QueryBillingStatisticsRequest) (_result *QueryBillingStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryBillingStatisticsResponse{}
	_body, _err := client.QueryBillingStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryCardMessageQueueRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCardMessageQueueResponse
func (client *Client) QueryCardMessageQueueWithOptions(request *QueryCardMessageQueueRequest, runtime *util.RuntimeOptions) (_result *QueryCardMessageQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.QueueTypes)) {
		query["QueueTypes"] = request.QueueTypes
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCardMessageQueue"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCardMessageQueueResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryCardMessageQueueRequest
//
// @return QueryCardMessageQueueResponse
func (client *Client) QueryCardMessageQueue(request *QueryCardMessageQueueRequest) (_result *QueryCardMessageQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCardMessageQueueResponse{}
	_body, _err := client.QueryCardMessageQueueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询发送记录导出信息
//
// @param request - QueryCardSendExportInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCardSendExportInfoResponse
func (client *Client) QueryCardSendExportInfoWithOptions(request *QueryCardSendExportInfoRequest, runtime *util.RuntimeOptions) (_result *QueryCardSendExportInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCardSendExportInfo"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCardSendExportInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询发送记录导出信息
//
// @param request - QueryCardSendExportInfoRequest
//
// @return QueryCardSendExportInfoResponse
func (client *Client) QueryCardSendExportInfo(request *QueryCardSendExportInfoRequest) (_result *QueryCardSendExportInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCardSendExportInfoResponse{}
	_body, _err := client.QueryCardSendExportInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 分页查询发送纪录信息
//
// @param request - QueryCardSmsHistoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCardSmsHistoryResponse
func (client *Client) QueryCardSmsHistoryWithOptions(request *QueryCardSmsHistoryRequest, runtime *util.RuntimeOptions) (_result *QueryCardSmsHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiSend)) {
		query["ApiSend"] = request.ApiSend
	}

	if !tea.BoolValue(util.IsUnset(request.CardTemplateType)) {
		query["CardTemplateType"] = request.CardTemplateType
	}

	if !tea.BoolValue(util.IsUnset(request.GmtCreate)) {
		query["GmtCreate"] = request.GmtCreate
	}

	if !tea.BoolValue(util.IsUnset(request.MaxId)) {
		query["MaxId"] = request.MaxId
	}

	if !tea.BoolValue(util.IsUnset(request.MinId)) {
		query["MinId"] = request.MinId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiveState)) {
		query["ReceiveState"] = request.ReceiveState
	}

	if !tea.BoolValue(util.IsUnset(request.Receiver)) {
		query["Receiver"] = request.Receiver
	}

	if !tea.BoolValue(util.IsUnset(request.RenderState)) {
		query["RenderState"] = request.RenderState
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCardSmsHistory"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCardSmsHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 分页查询发送纪录信息
//
// @param request - QueryCardSmsHistoryRequest
//
// @return QueryCardSmsHistoryResponse
func (client *Client) QueryCardSmsHistory(request *QueryCardSmsHistoryRequest) (_result *QueryCardSmsHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCardSmsHistoryResponse{}
	_body, _err := client.QueryCardSmsHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询发送纪录信息详情
//
// @param request - QueryCardSmsHistoryDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCardSmsHistoryDetailResponse
func (client *Client) QueryCardSmsHistoryDetailWithOptions(request *QueryCardSmsHistoryDetailRequest, runtime *util.RuntimeOptions) (_result *QueryCardSmsHistoryDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GmtCreate)) {
		query["GmtCreate"] = request.GmtCreate
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCardSmsHistoryDetail"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCardSmsHistoryDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询发送纪录信息详情
//
// @param request - QueryCardSmsHistoryDetailRequest
//
// @return QueryCardSmsHistoryDetailResponse
func (client *Client) QueryCardSmsHistoryDetail(request *QueryCardSmsHistoryDetailRequest) (_result *QueryCardSmsHistoryDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCardSmsHistoryDetailResponse{}
	_body, _err := client.QueryCardSmsHistoryDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 分页查询发送统计信息-解析统计
//
// @param request - QueryCardSmsStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCardSmsStatisticsResponse
func (client *Client) QueryCardSmsStatisticsWithOptions(request *QueryCardSmsStatisticsRequest, runtime *util.RuntimeOptions) (_result *QueryCardSmsStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomTmpCode)) {
		query["CustomTmpCode"] = request.CustomTmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateEnd)) {
		query["SendDateEnd"] = request.SendDateEnd
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateStart)) {
		query["SendDateStart"] = request.SendDateStart
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.TmpName)) {
		query["TmpName"] = request.TmpName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCardSmsStatistics"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCardSmsStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 分页查询发送统计信息-解析统计
//
// @param request - QueryCardSmsStatisticsRequest
//
// @return QueryCardSmsStatisticsResponse
func (client *Client) QueryCardSmsStatistics(request *QueryCardSmsStatisticsRequest) (_result *QueryCardSmsStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCardSmsStatisticsResponse{}
	_body, _err := client.QueryCardSmsStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 按时间查询发送统计信息-解析统计
//
// @param request - QueryCardSmsStatisticsListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCardSmsStatisticsListResponse
func (client *Client) QueryCardSmsStatisticsListWithOptions(request *QueryCardSmsStatisticsListRequest, runtime *util.RuntimeOptions) (_result *QueryCardSmsStatisticsListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomTmpCode)) {
		query["CustomTmpCode"] = request.CustomTmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateEnd)) {
		query["SendDateEnd"] = request.SendDateEnd
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateStart)) {
		query["SendDateStart"] = request.SendDateStart
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.TmpName)) {
		query["TmpName"] = request.TmpName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCardSmsStatisticsList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCardSmsStatisticsListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 按时间查询发送统计信息-解析统计
//
// @param request - QueryCardSmsStatisticsListRequest
//
// @return QueryCardSmsStatisticsListResponse
func (client *Client) QueryCardSmsStatisticsList(request *QueryCardSmsStatisticsListRequest) (_result *QueryCardSmsStatisticsListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCardSmsStatisticsListResponse{}
	_body, _err := client.QueryCardSmsStatisticsListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 分页查询发送统计信息-发送+解析统计
//
// @param request - QueryCardSmsStatisticsSendRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCardSmsStatisticsSendResponse
func (client *Client) QueryCardSmsStatisticsSendWithOptions(request *QueryCardSmsStatisticsSendRequest, runtime *util.RuntimeOptions) (_result *QueryCardSmsStatisticsSendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomTmpCode)) {
		query["CustomTmpCode"] = request.CustomTmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateEnd)) {
		query["SendDateEnd"] = request.SendDateEnd
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateStart)) {
		query["SendDateStart"] = request.SendDateStart
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCardSmsStatisticsSend"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCardSmsStatisticsSendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 分页查询发送统计信息-发送+解析统计
//
// @param request - QueryCardSmsStatisticsSendRequest
//
// @return QueryCardSmsStatisticsSendResponse
func (client *Client) QueryCardSmsStatisticsSend(request *QueryCardSmsStatisticsSendRequest) (_result *QueryCardSmsStatisticsSendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCardSmsStatisticsSendResponse{}
	_body, _err := client.QueryCardSmsStatisticsSendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 按日期查询发送统计信息-发送+解析统计
//
// @param request - QueryCardSmsStatisticsSendListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCardSmsStatisticsSendListResponse
func (client *Client) QueryCardSmsStatisticsSendListWithOptions(request *QueryCardSmsStatisticsSendListRequest, runtime *util.RuntimeOptions) (_result *QueryCardSmsStatisticsSendListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomTmpCode)) {
		query["CustomTmpCode"] = request.CustomTmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateEnd)) {
		query["SendDateEnd"] = request.SendDateEnd
	}

	if !tea.BoolValue(util.IsUnset(request.SendDateStart)) {
		query["SendDateStart"] = request.SendDateStart
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCardSmsStatisticsSendList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCardSmsStatisticsSendListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 按日期查询发送统计信息-发送+解析统计
//
// @param request - QueryCardSmsStatisticsSendListRequest
//
// @return QueryCardSmsStatisticsSendListResponse
func (client *Client) QueryCardSmsStatisticsSendList(request *QueryCardSmsStatisticsSendListRequest) (_result *QueryCardSmsStatisticsSendListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCardSmsStatisticsSendListResponse{}
	_body, _err := client.QueryCardSmsStatisticsSendListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryCommonCustInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCommonCustInfoResponse
func (client *Client) QueryCommonCustInfoWithOptions(request *QueryCommonCustInfoRequest, runtime *util.RuntimeOptions) (_result *QueryCommonCustInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCommonCustInfo"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCommonCustInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryCommonCustInfoRequest
//
// @return QueryCommonCustInfoResponse
func (client *Client) QueryCommonCustInfo(request *QueryCommonCustInfoRequest) (_result *QueryCommonCustInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCommonCustInfoResponse{}
	_body, _err := client.QueryCommonCustInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryContactsListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryContactsListResponse
func (client *Client) QueryContactsListWithOptions(request *QueryContactsListRequest, runtime *util.RuntimeOptions) (_result *QueryContactsListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryContactsList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryContactsListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryContactsListRequest
//
// @return QueryContactsListResponse
func (client *Client) QueryContactsList(request *QueryContactsListRequest) (_result *QueryContactsListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryContactsListResponse{}
	_body, _err := client.QueryContactsListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryContactsListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryContactsListNewResponse
func (client *Client) QueryContactsListNewWithOptions(request *QueryContactsListNewRequest, runtime *util.RuntimeOptions) (_result *QueryContactsListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryContactsListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryContactsListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryContactsListNewRequest
//
// @return QueryContactsListNewResponse
func (client *Client) QueryContactsListNew(request *QueryContactsListNewRequest) (_result *QueryContactsListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryContactsListNewResponse{}
	_body, _err := client.QueryContactsListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryDailyBillInfoLeafNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDailyBillInfoLeafNewResponse
func (client *Client) QueryDailyBillInfoLeafNewWithOptions(request *QueryDailyBillInfoLeafNewRequest, runtime *util.RuntimeOptions) (_result *QueryDailyBillInfoLeafNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillCycle)) {
		query["BillCycle"] = request.BillCycle
	}

	if !tea.BoolValue(util.IsUnset(request.ItemId)) {
		query["ItemId"] = request.ItemId
	}

	if !tea.BoolValue(util.IsUnset(request.ItemName)) {
		query["ItemName"] = request.ItemName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SubjectItemId)) {
		query["SubjectItemId"] = request.SubjectItemId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDailyBillInfoLeafNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDailyBillInfoLeafNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryDailyBillInfoLeafNewRequest
//
// @return QueryDailyBillInfoLeafNewResponse
func (client *Client) QueryDailyBillInfoLeafNew(request *QueryDailyBillInfoLeafNewRequest) (_result *QueryDailyBillInfoLeafNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDailyBillInfoLeafNewResponse{}
	_body, _err := client.QueryDailyBillInfoLeafNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryDigitalTemplateDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDigitalTemplateDetailResponse
func (client *Client) QueryDigitalTemplateDetailWithOptions(request *QueryDigitalTemplateDetailRequest, runtime *util.RuntimeOptions) (_result *QueryDigitalTemplateDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDigitalTemplateDetail"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDigitalTemplateDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryDigitalTemplateDetailRequest
//
// @return QueryDigitalTemplateDetailResponse
func (client *Client) QueryDigitalTemplateDetail(request *QueryDigitalTemplateDetailRequest) (_result *QueryDigitalTemplateDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDigitalTemplateDetailResponse{}
	_body, _err := client.QueryDigitalTemplateDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryDigitalTemplateDetailNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDigitalTemplateDetailNewResponse
func (client *Client) QueryDigitalTemplateDetailNewWithOptions(request *QueryDigitalTemplateDetailNewRequest, runtime *util.RuntimeOptions) (_result *QueryDigitalTemplateDetailNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDigitalTemplateDetailNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDigitalTemplateDetailNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryDigitalTemplateDetailNewRequest
//
// @return QueryDigitalTemplateDetailNewResponse
func (client *Client) QueryDigitalTemplateDetailNew(request *QueryDigitalTemplateDetailNewRequest) (_result *QueryDigitalTemplateDetailNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDigitalTemplateDetailNewResponse{}
	_body, _err := client.QueryDigitalTemplateDetailNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryDigitalTemplateLastRangeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDigitalTemplateLastRangeResponse
func (client *Client) QueryDigitalTemplateLastRangeWithOptions(request *QueryDigitalTemplateLastRangeRequest, runtime *util.RuntimeOptions) (_result *QueryDigitalTemplateLastRangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDigitalTemplateLastRange"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDigitalTemplateLastRangeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryDigitalTemplateLastRangeRequest
//
// @return QueryDigitalTemplateLastRangeResponse
func (client *Client) QueryDigitalTemplateLastRange(request *QueryDigitalTemplateLastRangeRequest) (_result *QueryDigitalTemplateLastRangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDigitalTemplateLastRangeResponse{}
	_body, _err := client.QueryDigitalTemplateLastRangeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryDigitalTemplateLastRangeNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDigitalTemplateLastRangeNewResponse
func (client *Client) QueryDigitalTemplateLastRangeNewWithOptions(request *QueryDigitalTemplateLastRangeNewRequest, runtime *util.RuntimeOptions) (_result *QueryDigitalTemplateLastRangeNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdType)) {
		query["ProdType"] = request.ProdType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDigitalTemplateLastRangeNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDigitalTemplateLastRangeNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryDigitalTemplateLastRangeNewRequest
//
// @return QueryDigitalTemplateLastRangeNewResponse
func (client *Client) QueryDigitalTemplateLastRangeNew(request *QueryDigitalTemplateLastRangeNewRequest) (_result *QueryDigitalTemplateLastRangeNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDigitalTemplateLastRangeNewResponse{}
	_body, _err := client.QueryDigitalTemplateLastRangeNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryDigitalTemplatePageListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDigitalTemplatePageListResponse
func (client *Client) QueryDigitalTemplatePageListWithOptions(request *QueryDigitalTemplatePageListRequest, runtime *util.RuntimeOptions) (_result *QueryDigitalTemplatePageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDigitalTemplatePageList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDigitalTemplatePageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryDigitalTemplatePageListRequest
//
// @return QueryDigitalTemplatePageListResponse
func (client *Client) QueryDigitalTemplatePageList(request *QueryDigitalTemplatePageListRequest) (_result *QueryDigitalTemplatePageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDigitalTemplatePageListResponse{}
	_body, _err := client.QueryDigitalTemplatePageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryDigitalTemplatePageListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDigitalTemplatePageListNewResponse
func (client *Client) QueryDigitalTemplatePageListNewWithOptions(request *QueryDigitalTemplatePageListNewRequest, runtime *util.RuntimeOptions) (_result *QueryDigitalTemplatePageListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDigitalTemplatePageListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDigitalTemplatePageListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryDigitalTemplatePageListNewRequest
//
// @return QueryDigitalTemplatePageListNewResponse
func (client *Client) QueryDigitalTemplatePageListNew(request *QueryDigitalTemplatePageListNewRequest) (_result *QueryDigitalTemplatePageListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDigitalTemplatePageListNewResponse{}
	_body, _err := client.QueryDigitalTemplatePageListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryDomainListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDomainListResponse
func (client *Client) QueryDomainListWithOptions(request *QueryDomainListRequest, runtime *util.RuntimeOptions) (_result *QueryDomainListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDomainList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDomainListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryDomainListRequest
//
// @return QueryDomainListResponse
func (client *Client) QueryDomainList(request *QueryDomainListRequest) (_result *QueryDomainListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDomainListResponse{}
	_body, _err := client.QueryDomainListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryDomainListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDomainListNewResponse
func (client *Client) QueryDomainListNewWithOptions(request *QueryDomainListNewRequest, runtime *util.RuntimeOptions) (_result *QueryDomainListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDomainListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDomainListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryDomainListNewRequest
//
// @return QueryDomainListNewResponse
func (client *Client) QueryDomainListNew(request *QueryDomainListNewRequest) (_result *QueryDomainListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDomainListNewResponse{}
	_body, _err := client.QueryDomainListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryExportSendRecordListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryExportSendRecordListNewResponse
func (client *Client) QueryExportSendRecordListNewWithOptions(request *QueryExportSendRecordListNewRequest, runtime *util.RuntimeOptions) (_result *QueryExportSendRecordListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyStatus)) {
		query["ApplyStatus"] = request.ApplyStatus
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryExportSendRecordListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryExportSendRecordListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryExportSendRecordListNewRequest
//
// @return QueryExportSendRecordListNewResponse
func (client *Client) QueryExportSendRecordListNew(request *QueryExportSendRecordListNewRequest) (_result *QueryExportSendRecordListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryExportSendRecordListNewResponse{}
	_body, _err := client.QueryExportSendRecordListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryFailDetailDownloadRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryFailDetailDownloadResponse
func (client *Client) QueryFailDetailDownloadWithOptions(request *QueryFailDetailDownloadRequest, runtime *util.RuntimeOptions) (_result *QueryFailDetailDownloadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskInstanceId)) {
		query["TaskInstanceId"] = request.TaskInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryFailDetailDownload"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryFailDetailDownloadResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryFailDetailDownloadRequest
//
// @return QueryFailDetailDownloadResponse
func (client *Client) QueryFailDetailDownload(request *QueryFailDetailDownloadRequest) (_result *QueryFailDetailDownloadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFailDetailDownloadResponse{}
	_body, _err := client.QueryFailDetailDownloadWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryFailDetailDownloadNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryFailDetailDownloadNewResponse
func (client *Client) QueryFailDetailDownloadNewWithOptions(request *QueryFailDetailDownloadNewRequest, runtime *util.RuntimeOptions) (_result *QueryFailDetailDownloadNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskInstanceId)) {
		query["TaskInstanceId"] = request.TaskInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryFailDetailDownloadNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryFailDetailDownloadNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryFailDetailDownloadNewRequest
//
// @return QueryFailDetailDownloadNewResponse
func (client *Client) QueryFailDetailDownloadNew(request *QueryFailDetailDownloadNewRequest) (_result *QueryFailDetailDownloadNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFailDetailDownloadNewResponse{}
	_body, _err := client.QueryFailDetailDownloadNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryFlowLimitRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryFlowLimitResponse
func (client *Client) QueryFlowLimitWithOptions(request *QueryFlowLimitRequest, runtime *util.RuntimeOptions) (_result *QueryFlowLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryFlowLimit"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryFlowLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryFlowLimitRequest
//
// @return QueryFlowLimitResponse
func (client *Client) QueryFlowLimit(request *QueryFlowLimitRequest) (_result *QueryFlowLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFlowLimitResponse{}
	_body, _err := client.QueryFlowLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryFlowLimitNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryFlowLimitNewResponse
func (client *Client) QueryFlowLimitNewWithOptions(request *QueryFlowLimitNewRequest, runtime *util.RuntimeOptions) (_result *QueryFlowLimitNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryFlowLimitNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryFlowLimitNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryFlowLimitNewRequest
//
// @return QueryFlowLimitNewResponse
func (client *Client) QueryFlowLimitNew(request *QueryFlowLimitNewRequest) (_result *QueryFlowLimitNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFlowLimitNewResponse{}
	_body, _err := client.QueryFlowLimitNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryIndexColRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryIndexColRecordResponse
func (client *Client) QueryIndexColRecordWithOptions(request *QueryIndexColRecordRequest, runtime *util.RuntimeOptions) (_result *QueryIndexColRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskInstanceId)) {
		query["TaskInstanceId"] = request.TaskInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryIndexColRecord"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryIndexColRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryIndexColRecordRequest
//
// @return QueryIndexColRecordResponse
func (client *Client) QueryIndexColRecord(request *QueryIndexColRecordRequest) (_result *QueryIndexColRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryIndexColRecordResponse{}
	_body, _err := client.QueryIndexColRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryLearningStatusNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryLearningStatusNewResponse
func (client *Client) QueryLearningStatusNewWithOptions(request *QueryLearningStatusNewRequest, runtime *util.RuntimeOptions) (_result *QueryLearningStatusNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryLearningStatusNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryLearningStatusNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryLearningStatusNewRequest
//
// @return QueryLearningStatusNewResponse
func (client *Client) QueryLearningStatusNew(request *QueryLearningStatusNewRequest) (_result *QueryLearningStatusNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryLearningStatusNewResponse{}
	_body, _err := client.QueryLearningStatusNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMarketingAssistantStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMarketingAssistantStatusResponse
func (client *Client) QueryMarketingAssistantStatusWithOptions(request *QueryMarketingAssistantStatusRequest, runtime *util.RuntimeOptions) (_result *QueryMarketingAssistantStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMarketingAssistantStatus"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMarketingAssistantStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMarketingAssistantStatusRequest
//
// @return QueryMarketingAssistantStatusResponse
func (client *Client) QueryMarketingAssistantStatus(request *QueryMarketingAssistantStatusRequest) (_result *QueryMarketingAssistantStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMarketingAssistantStatusResponse{}
	_body, _err := client.QueryMarketingAssistantStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMessageCallbackNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMessageCallbackNewResponse
func (client *Client) QueryMessageCallbackNewWithOptions(request *QueryMessageCallbackNewRequest, runtime *util.RuntimeOptions) (_result *QueryMessageCallbackNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackUrl)) {
		query["CallbackUrl"] = request.CallbackUrl
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMessageCallbackNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMessageCallbackNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMessageCallbackNewRequest
//
// @return QueryMessageCallbackNewResponse
func (client *Client) QueryMessageCallbackNew(request *QueryMessageCallbackNewRequest) (_result *QueryMessageCallbackNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMessageCallbackNewResponse{}
	_body, _err := client.QueryMessageCallbackNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMessageQueueNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMessageQueueNewResponse
func (client *Client) QueryMessageQueueNewWithOptions(request *QueryMessageQueueNewRequest, runtime *util.RuntimeOptions) (_result *QueryMessageQueueNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.QueueTypes)) {
		query["QueueTypes"] = request.QueueTypes
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMessageQueueNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMessageQueueNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMessageQueueNewRequest
//
// @return QueryMessageQueueNewResponse
func (client *Client) QueryMessageQueueNew(request *QueryMessageQueueNewRequest) (_result *QueryMessageQueueNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMessageQueueNewResponse{}
	_body, _err := client.QueryMessageQueueNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMonthlyBillInfoLeafNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMonthlyBillInfoLeafNewResponse
func (client *Client) QueryMonthlyBillInfoLeafNewWithOptions(request *QueryMonthlyBillInfoLeafNewRequest, runtime *util.RuntimeOptions) (_result *QueryMonthlyBillInfoLeafNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillCycle)) {
		query["BillCycle"] = request.BillCycle
	}

	if !tea.BoolValue(util.IsUnset(request.ItemId)) {
		query["ItemId"] = request.ItemId
	}

	if !tea.BoolValue(util.IsUnset(request.ItemName)) {
		query["ItemName"] = request.ItemName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SubjectItemId)) {
		query["SubjectItemId"] = request.SubjectItemId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMonthlyBillInfoLeafNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMonthlyBillInfoLeafNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMonthlyBillInfoLeafNewRequest
//
// @return QueryMonthlyBillInfoLeafNewResponse
func (client *Client) QueryMonthlyBillInfoLeafNew(request *QueryMonthlyBillInfoLeafNewRequest) (_result *QueryMonthlyBillInfoLeafNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMonthlyBillInfoLeafNewResponse{}
	_body, _err := client.QueryMonthlyBillInfoLeafNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMonthlyBillRentalRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMonthlyBillRentalResponse
func (client *Client) QueryMonthlyBillRentalWithOptions(request *QueryMonthlyBillRentalRequest, runtime *util.RuntimeOptions) (_result *QueryMonthlyBillRentalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillCycle)) {
		query["BillCycle"] = request.BillCycle
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMonthlyBillRental"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMonthlyBillRentalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMonthlyBillRentalRequest
//
// @return QueryMonthlyBillRentalResponse
func (client *Client) QueryMonthlyBillRental(request *QueryMonthlyBillRentalRequest) (_result *QueryMonthlyBillRentalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMonthlyBillRentalResponse{}
	_body, _err := client.QueryMonthlyBillRentalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMonthlyBillRentalNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMonthlyBillRentalNewResponse
func (client *Client) QueryMonthlyBillRentalNewWithOptions(request *QueryMonthlyBillRentalNewRequest, runtime *util.RuntimeOptions) (_result *QueryMonthlyBillRentalNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillCycle)) {
		query["BillCycle"] = request.BillCycle
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMonthlyBillRentalNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMonthlyBillRentalNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMonthlyBillRentalNewRequest
//
// @return QueryMonthlyBillRentalNewResponse
func (client *Client) QueryMonthlyBillRentalNew(request *QueryMonthlyBillRentalNewRequest) (_result *QueryMonthlyBillRentalNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMonthlyBillRentalNewResponse{}
	_body, _err := client.QueryMonthlyBillRentalNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMsgCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMsgCountResponse
func (client *Client) QueryMsgCountWithOptions(request *QueryMsgCountRequest, runtime *util.RuntimeOptions) (_result *QueryMsgCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMsgCount"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMsgCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMsgCountRequest
//
// @return QueryMsgCountResponse
func (client *Client) QueryMsgCount(request *QueryMsgCountRequest) (_result *QueryMsgCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMsgCountResponse{}
	_body, _err := client.QueryMsgCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryOpenStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryOpenStatusResponse
func (client *Client) QueryOpenStatusWithOptions(request *QueryOpenStatusRequest, runtime *util.RuntimeOptions) (_result *QueryOpenStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusOffer)) {
		query["BusOffer"] = request.BusOffer
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryOpenStatus"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryOpenStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryOpenStatusRequest
//
// @return QueryOpenStatusResponse
func (client *Client) QueryOpenStatus(request *QueryOpenStatusRequest) (_result *QueryOpenStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOpenStatusResponse{}
	_body, _err := client.QueryOpenStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryOpencFlagNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryOpencFlagNewResponse
func (client *Client) QueryOpencFlagNewWithOptions(request *QueryOpencFlagNewRequest, runtime *util.RuntimeOptions) (_result *QueryOpencFlagNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryOpencFlagNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryOpencFlagNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryOpencFlagNewRequest
//
// @return QueryOpencFlagNewResponse
func (client *Client) QueryOpencFlagNew(request *QueryOpencFlagNewRequest) (_result *QueryOpencFlagNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOpencFlagNewResponse{}
	_body, _err := client.QueryOpencFlagNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryPhoneWhiteListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryPhoneWhiteListResponse
func (client *Client) QueryPhoneWhiteListWithOptions(request *QueryPhoneWhiteListRequest, runtime *util.RuntimeOptions) (_result *QueryPhoneWhiteListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPhoneWhiteList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPhoneWhiteListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryPhoneWhiteListRequest
//
// @return QueryPhoneWhiteListResponse
func (client *Client) QueryPhoneWhiteList(request *QueryPhoneWhiteListRequest) (_result *QueryPhoneWhiteListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPhoneWhiteListResponse{}
	_body, _err := client.QueryPhoneWhiteListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryPhoneWhiteListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryPhoneWhiteListNewResponse
func (client *Client) QueryPhoneWhiteListNewWithOptions(request *QueryPhoneWhiteListNewRequest, runtime *util.RuntimeOptions) (_result *QueryPhoneWhiteListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPhoneWhiteListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPhoneWhiteListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryPhoneWhiteListNewRequest
//
// @return QueryPhoneWhiteListNewResponse
func (client *Client) QueryPhoneWhiteListNew(request *QueryPhoneWhiteListNewRequest) (_result *QueryPhoneWhiteListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPhoneWhiteListNewResponse{}
	_body, _err := client.QueryPhoneWhiteListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryPkgThresholdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryPkgThresholdResponse
func (client *Client) QueryPkgThresholdWithOptions(request *QueryPkgThresholdRequest, runtime *util.RuntimeOptions) (_result *QueryPkgThresholdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPkgThreshold"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPkgThresholdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryPkgThresholdRequest
//
// @return QueryPkgThresholdResponse
func (client *Client) QueryPkgThreshold(request *QueryPkgThresholdRequest) (_result *QueryPkgThresholdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPkgThresholdResponse{}
	_body, _err := client.QueryPkgThresholdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryPkgThresholdNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryPkgThresholdNewResponse
func (client *Client) QueryPkgThresholdNewWithOptions(request *QueryPkgThresholdNewRequest, runtime *util.RuntimeOptions) (_result *QueryPkgThresholdNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPkgThresholdNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPkgThresholdNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryPkgThresholdNewRequest
//
// @return QueryPkgThresholdNewResponse
func (client *Client) QueryPkgThresholdNew(request *QueryPkgThresholdNewRequest) (_result *QueryPkgThresholdNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPkgThresholdNewResponse{}
	_body, _err := client.QueryPkgThresholdNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryPrevLimitNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryPrevLimitNewResponse
func (client *Client) QueryPrevLimitNewWithOptions(request *QueryPrevLimitNewRequest, runtime *util.RuntimeOptions) (_result *QueryPrevLimitNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPrevLimitNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPrevLimitNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryPrevLimitNewRequest
//
// @return QueryPrevLimitNewResponse
func (client *Client) QueryPrevLimitNew(request *QueryPrevLimitNewRequest) (_result *QueryPrevLimitNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPrevLimitNewResponse{}
	_body, _err := client.QueryPrevLimitNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySaasRecordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySaasRecordResponse
func (client *Client) QuerySaasRecordWithOptions(request *QuerySaasRecordRequest, runtime *util.RuntimeOptions) (_result *QuerySaasRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.IndexCol)) {
		query["IndexCol"] = request.IndexCol
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Result)) {
		query["Result"] = request.Result
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskInstanceId)) {
		query["TaskInstanceId"] = request.TaskInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySaasRecord"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySaasRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySaasRecordRequest
//
// @return QuerySaasRecordResponse
func (client *Client) QuerySaasRecord(request *QuerySaasRecordRequest) (_result *QuerySaasRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySaasRecordResponse{}
	_body, _err := client.QuerySaasRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySaasRecordNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySaasRecordNewResponse
func (client *Client) QuerySaasRecordNewWithOptions(request *QuerySaasRecordNewRequest, runtime *util.RuntimeOptions) (_result *QuerySaasRecordNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.IndexCol)) {
		query["IndexCol"] = request.IndexCol
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Result)) {
		query["Result"] = request.Result
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskInstanceId)) {
		query["TaskInstanceId"] = request.TaskInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySaasRecordNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySaasRecordNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySaasRecordNewRequest
//
// @return QuerySaasRecordNewResponse
func (client *Client) QuerySaasRecordNew(request *QuerySaasRecordNewRequest) (_result *QuerySaasRecordNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySaasRecordNewResponse{}
	_body, _err := client.QuerySaasRecordNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySendDetailsByPhoneNumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySendDetailsByPhoneNumResponse
func (client *Client) QuerySendDetailsByPhoneNumWithOptions(request *QuerySendDetailsByPhoneNumRequest, runtime *util.RuntimeOptions) (_result *QuerySendDetailsByPhoneNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCode)) {
		query["ErrorCode"] = request.ErrorCode
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNum)) {
		query["PhoneNum"] = request.PhoneNum
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SendDate)) {
		query["SendDate"] = request.SendDate
	}

	if !tea.BoolValue(util.IsUnset(request.SendStatus)) {
		query["SendStatus"] = request.SendStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySendDetailsByPhoneNum"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySendDetailsByPhoneNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySendDetailsByPhoneNumRequest
//
// @return QuerySendDetailsByPhoneNumResponse
func (client *Client) QuerySendDetailsByPhoneNum(request *QuerySendDetailsByPhoneNumRequest) (_result *QuerySendDetailsByPhoneNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySendDetailsByPhoneNumResponse{}
	_body, _err := client.QuerySendDetailsByPhoneNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySendDetailsByPhoneNumNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySendDetailsByPhoneNumNewResponse
func (client *Client) QuerySendDetailsByPhoneNumNewWithOptions(request *QuerySendDetailsByPhoneNumNewRequest, runtime *util.RuntimeOptions) (_result *QuerySendDetailsByPhoneNumNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCode)) {
		query["ErrorCode"] = request.ErrorCode
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNum)) {
		query["PhoneNum"] = request.PhoneNum
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SendDate)) {
		query["SendDate"] = request.SendDate
	}

	if !tea.BoolValue(util.IsUnset(request.SendStatus)) {
		query["SendStatus"] = request.SendStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.StatisticsStatus)) {
		query["StatisticsStatus"] = request.StatisticsStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySendDetailsByPhoneNumNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySendDetailsByPhoneNumNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySendDetailsByPhoneNumNewRequest
//
// @return QuerySendDetailsByPhoneNumNewResponse
func (client *Client) QuerySendDetailsByPhoneNumNew(request *QuerySendDetailsByPhoneNumNewRequest) (_result *QuerySendDetailsByPhoneNumNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySendDetailsByPhoneNumNewResponse{}
	_body, _err := client.QuerySendDetailsByPhoneNumNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySendFailDetailsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySendFailDetailsResponse
func (client *Client) QuerySendFailDetailsWithOptions(request *QuerySendFailDetailsRequest, runtime *util.RuntimeOptions) (_result *QuerySendFailDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SendDate)) {
		query["SendDate"] = request.SendDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySendFailDetails"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySendFailDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySendFailDetailsRequest
//
// @return QuerySendFailDetailsResponse
func (client *Client) QuerySendFailDetails(request *QuerySendFailDetailsRequest) (_result *QuerySendFailDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySendFailDetailsResponse{}
	_body, _err := client.QuerySendFailDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySendFailDetailsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySendFailDetailsNewResponse
func (client *Client) QuerySendFailDetailsNewWithOptions(request *QuerySendFailDetailsNewRequest, runtime *util.RuntimeOptions) (_result *QuerySendFailDetailsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SendDate)) {
		query["SendDate"] = request.SendDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySendFailDetailsNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySendFailDetailsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySendFailDetailsNewRequest
//
// @return QuerySendFailDetailsNewResponse
func (client *Client) QuerySendFailDetailsNew(request *QuerySendFailDetailsNewRequest) (_result *QuerySendFailDetailsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySendFailDetailsNewResponse{}
	_body, _err := client.QuerySendFailDetailsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySendToGlobeStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySendToGlobeStatusResponse
func (client *Client) QuerySendToGlobeStatusWithOptions(request *QuerySendToGlobeStatusRequest, runtime *util.RuntimeOptions) (_result *QuerySendToGlobeStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySendToGlobeStatus"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySendToGlobeStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySendToGlobeStatusRequest
//
// @return QuerySendToGlobeStatusResponse
func (client *Client) QuerySendToGlobeStatus(request *QuerySendToGlobeStatusRequest) (_result *QuerySendToGlobeStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySendToGlobeStatusResponse{}
	_body, _err := client.QuerySendToGlobeStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryShortUrlDetailNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryShortUrlDetailNewResponse
func (client *Client) QueryShortUrlDetailNewWithOptions(request *QueryShortUrlDetailNewRequest, runtime *util.RuntimeOptions) (_result *QueryShortUrlDetailNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ShortUrlId)) {
		query["ShortUrlId"] = request.ShortUrlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryShortUrlDetailNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryShortUrlDetailNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryShortUrlDetailNewRequest
//
// @return QueryShortUrlDetailNewResponse
func (client *Client) QueryShortUrlDetailNew(request *QueryShortUrlDetailNewRequest) (_result *QueryShortUrlDetailNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryShortUrlDetailNewResponse{}
	_body, _err := client.QueryShortUrlDetailNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryShortUrlListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryShortUrlListNewResponse
func (client *Client) QueryShortUrlListNewWithOptions(request *QueryShortUrlListNewRequest, runtime *util.RuntimeOptions) (_result *QueryShortUrlListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["EventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.KeyWord)) {
		query["KeyWord"] = request.KeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ShortUrl)) {
		query["ShortUrl"] = request.ShortUrl
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryShortUrlListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryShortUrlListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryShortUrlListNewRequest
//
// @return QueryShortUrlListNewResponse
func (client *Client) QueryShortUrlListNew(request *QueryShortUrlListNewRequest) (_result *QueryShortUrlListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryShortUrlListNewResponse{}
	_body, _err := client.QueryShortUrlListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryShortUrlStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryShortUrlStatusResponse
func (client *Client) QueryShortUrlStatusWithOptions(request *QueryShortUrlStatusRequest, runtime *util.RuntimeOptions) (_result *QueryShortUrlStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryShortUrlStatus"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryShortUrlStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryShortUrlStatusRequest
//
// @return QueryShortUrlStatusResponse
func (client *Client) QueryShortUrlStatus(request *QueryShortUrlStatusRequest) (_result *QueryShortUrlStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryShortUrlStatusResponse{}
	_body, _err := client.QueryShortUrlStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySlsStatusNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySlsStatusNewResponse
func (client *Client) QuerySlsStatusNewWithOptions(request *QuerySlsStatusNewRequest, runtime *util.RuntimeOptions) (_result *QuerySlsStatusNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySlsStatusNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySlsStatusNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySlsStatusNewRequest
//
// @return QuerySlsStatusNewResponse
func (client *Client) QuerySlsStatusNew(request *QuerySlsStatusNewRequest) (_result *QuerySlsStatusNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySlsStatusNewResponse{}
	_body, _err := client.QuerySlsStatusNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsBaseScreenNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsBaseScreenNewResponse
func (client *Client) QuerySmsBaseScreenNewWithOptions(request *QuerySmsBaseScreenNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsBaseScreenNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsBaseScreenNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsBaseScreenNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsBaseScreenNewRequest
//
// @return QuerySmsBaseScreenNewResponse
func (client *Client) QuerySmsBaseScreenNew(request *QuerySmsBaseScreenNewRequest) (_result *QuerySmsBaseScreenNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsBaseScreenNewResponse{}
	_body, _err := client.QuerySmsBaseScreenNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsDetectCountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsDetectCountsResponse
func (client *Client) QuerySmsDetectCountsWithOptions(request *QuerySmsDetectCountsRequest, runtime *util.RuntimeOptions) (_result *QuerySmsDetectCountsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsDetectCounts"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsDetectCountsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsDetectCountsRequest
//
// @return QuerySmsDetectCountsResponse
func (client *Client) QuerySmsDetectCounts(request *QuerySmsDetectCountsRequest) (_result *QuerySmsDetectCountsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsDetectCountsResponse{}
	_body, _err := client.QuerySmsDetectCountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsDetectCountsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsDetectCountsNewResponse
func (client *Client) QuerySmsDetectCountsNewWithOptions(request *QuerySmsDetectCountsNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsDetectCountsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsDetectCountsNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsDetectCountsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsDetectCountsNewRequest
//
// @return QuerySmsDetectCountsNewResponse
func (client *Client) QuerySmsDetectCountsNew(request *QuerySmsDetectCountsNewRequest) (_result *QuerySmsDetectCountsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsDetectCountsNewResponse{}
	_body, _err := client.QuerySmsDetectCountsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsDetectListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsDetectListResponse
func (client *Client) QuerySmsDetectListWithOptions(request *QuerySmsDetectListRequest, runtime *util.RuntimeOptions) (_result *QuerySmsDetectListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsDetectList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsDetectListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsDetectListRequest
//
// @return QuerySmsDetectListResponse
func (client *Client) QuerySmsDetectList(request *QuerySmsDetectListRequest) (_result *QuerySmsDetectListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsDetectListResponse{}
	_body, _err := client.QuerySmsDetectListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsDetectListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsDetectListNewResponse
func (client *Client) QuerySmsDetectListNewWithOptions(request *QuerySmsDetectListNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsDetectListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsDetectListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsDetectListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsDetectListNewRequest
//
// @return QuerySmsDetectListNewResponse
func (client *Client) QuerySmsDetectListNew(request *QuerySmsDetectListNewRequest) (_result *QuerySmsDetectListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsDetectListNewResponse{}
	_body, _err := client.QuerySmsDetectListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsPackageDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsPackageDetailResponse
func (client *Client) QuerySmsPackageDetailWithOptions(request *QuerySmsPackageDetailRequest, runtime *util.RuntimeOptions) (_result *QuerySmsPackageDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		query["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsPackageDetail"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsPackageDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsPackageDetailRequest
//
// @return QuerySmsPackageDetailResponse
func (client *Client) QuerySmsPackageDetail(request *QuerySmsPackageDetailRequest) (_result *QuerySmsPackageDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsPackageDetailResponse{}
	_body, _err := client.QuerySmsPackageDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsPackageDetailNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsPackageDetailNewResponse
func (client *Client) QuerySmsPackageDetailNewWithOptions(request *QuerySmsPackageDetailNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsPackageDetailNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		query["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsPackageDetailNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsPackageDetailNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsPackageDetailNewRequest
//
// @return QuerySmsPackageDetailNewResponse
func (client *Client) QuerySmsPackageDetailNew(request *QuerySmsPackageDetailNewRequest) (_result *QuerySmsPackageDetailNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsPackageDetailNewResponse{}
	_body, _err := client.QuerySmsPackageDetailNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsPackageNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsPackageNewResponse
func (client *Client) QuerySmsPackageNewWithOptions(request *QuerySmsPackageNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsPackageNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		query["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductName)) {
		query["ProductName"] = request.ProductName
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	if !tea.BoolValue(util.IsUnset(request.Time)) {
		query["Time"] = request.Time
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsPackageNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsPackageNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsPackageNewRequest
//
// @return QuerySmsPackageNewResponse
func (client *Client) QuerySmsPackageNew(request *QuerySmsPackageNewRequest) (_result *QuerySmsPackageNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsPackageNewResponse{}
	_body, _err := client.QuerySmsPackageNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsPackageOrderListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsPackageOrderListResponse
func (client *Client) QuerySmsPackageOrderListWithOptions(request *QuerySmsPackageOrderListRequest, runtime *util.RuntimeOptions) (_result *QuerySmsPackageOrderListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillCycle)) {
		query["BillCycle"] = request.BillCycle
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsPackageOrderList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsPackageOrderListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsPackageOrderListRequest
//
// @return QuerySmsPackageOrderListResponse
func (client *Client) QuerySmsPackageOrderList(request *QuerySmsPackageOrderListRequest) (_result *QuerySmsPackageOrderListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsPackageOrderListResponse{}
	_body, _err := client.QuerySmsPackageOrderListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsPackageOrderListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsPackageOrderListNewResponse
func (client *Client) QuerySmsPackageOrderListNewWithOptions(request *QuerySmsPackageOrderListNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsPackageOrderListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillCycle)) {
		query["BillCycle"] = request.BillCycle
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsPackageOrderListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsPackageOrderListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsPackageOrderListNewRequest
//
// @return QuerySmsPackageOrderListNewResponse
func (client *Client) QuerySmsPackageOrderListNew(request *QuerySmsPackageOrderListNewRequest) (_result *QuerySmsPackageOrderListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsPackageOrderListNewResponse{}
	_body, _err := client.QuerySmsPackageOrderListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsPackageSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsPackageSummaryResponse
func (client *Client) QuerySmsPackageSummaryWithOptions(request *QuerySmsPackageSummaryRequest, runtime *util.RuntimeOptions) (_result *QuerySmsPackageSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsPackageSummary"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsPackageSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsPackageSummaryRequest
//
// @return QuerySmsPackageSummaryResponse
func (client *Client) QuerySmsPackageSummary(request *QuerySmsPackageSummaryRequest) (_result *QuerySmsPackageSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsPackageSummaryResponse{}
	_body, _err := client.QuerySmsPackageSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsPackageSummaryNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsPackageSummaryNewResponse
func (client *Client) QuerySmsPackageSummaryNewWithOptions(request *QuerySmsPackageSummaryNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsPackageSummaryNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsPackageSummaryNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsPackageSummaryNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsPackageSummaryNewRequest
//
// @return QuerySmsPackageSummaryNewResponse
func (client *Client) QuerySmsPackageSummaryNew(request *QuerySmsPackageSummaryNewRequest) (_result *QuerySmsPackageSummaryNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsPackageSummaryNewResponse{}
	_body, _err := client.QuerySmsPackageSummaryNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSaasTaskDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSaasTaskDetailResponse
func (client *Client) QuerySmsSaasTaskDetailWithOptions(request *QuerySmsSaasTaskDetailRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSaasTaskDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskInstanceId)) {
		query["TaskInstanceId"] = request.TaskInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSaasTaskDetail"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSaasTaskDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSaasTaskDetailRequest
//
// @return QuerySmsSaasTaskDetailResponse
func (client *Client) QuerySmsSaasTaskDetail(request *QuerySmsSaasTaskDetailRequest) (_result *QuerySmsSaasTaskDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSaasTaskDetailResponse{}
	_body, _err := client.QuerySmsSaasTaskDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSaasTaskDetailNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSaasTaskDetailNewResponse
func (client *Client) QuerySmsSaasTaskDetailNewWithOptions(request *QuerySmsSaasTaskDetailNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSaasTaskDetailNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSaasTaskDetailNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSaasTaskDetailNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSaasTaskDetailNewRequest
//
// @return QuerySmsSaasTaskDetailNewResponse
func (client *Client) QuerySmsSaasTaskDetailNew(request *QuerySmsSaasTaskDetailNewRequest) (_result *QuerySmsSaasTaskDetailNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSaasTaskDetailNewResponse{}
	_body, _err := client.QuerySmsSaasTaskDetailNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSaasTaskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSaasTaskListResponse
func (client *Client) QuerySmsSaasTaskListWithOptions(request *QuerySmsSaasTaskListRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSaasTaskListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSaasTaskList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSaasTaskListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSaasTaskListRequest
//
// @return QuerySmsSaasTaskListResponse
func (client *Client) QuerySmsSaasTaskList(request *QuerySmsSaasTaskListRequest) (_result *QuerySmsSaasTaskListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSaasTaskListResponse{}
	_body, _err := client.QuerySmsSaasTaskListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSaasTaskListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSaasTaskListNewResponse
func (client *Client) QuerySmsSaasTaskListNewWithOptions(request *QuerySmsSaasTaskListNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSaasTaskListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSaasTaskListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSaasTaskListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSaasTaskListNewRequest
//
// @return QuerySmsSaasTaskListNewResponse
func (client *Client) QuerySmsSaasTaskListNew(request *QuerySmsSaasTaskListNewRequest) (_result *QuerySmsSaasTaskListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSaasTaskListNewResponse{}
	_body, _err := client.QuerySmsSaasTaskListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSendFailDetailsUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSendFailDetailsUrlResponse
func (client *Client) QuerySmsSendFailDetailsUrlWithOptions(request *QuerySmsSendFailDetailsUrlRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSendFailDetailsUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SendDate)) {
		query["SendDate"] = request.SendDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSendFailDetailsUrl"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSendFailDetailsUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSendFailDetailsUrlRequest
//
// @return QuerySmsSendFailDetailsUrlResponse
func (client *Client) QuerySmsSendFailDetailsUrl(request *QuerySmsSendFailDetailsUrlRequest) (_result *QuerySmsSendFailDetailsUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSendFailDetailsUrlResponse{}
	_body, _err := client.QuerySmsSendFailDetailsUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSendFailDetailsUrlNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSendFailDetailsUrlNewResponse
func (client *Client) QuerySmsSendFailDetailsUrlNewWithOptions(request *QuerySmsSendFailDetailsUrlNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSendFailDetailsUrlNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SendDate)) {
		query["SendDate"] = request.SendDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSendFailDetailsUrlNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSendFailDetailsUrlNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSendFailDetailsUrlNewRequest
//
// @return QuerySmsSendFailDetailsUrlNewResponse
func (client *Client) QuerySmsSendFailDetailsUrlNew(request *QuerySmsSendFailDetailsUrlNewRequest) (_result *QuerySmsSendFailDetailsUrlNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSendFailDetailsUrlNewResponse{}
	_body, _err := client.QuerySmsSendFailDetailsUrlNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSignDetailBySignIdNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSignDetailBySignIdNewResponse
func (client *Client) QuerySmsSignDetailBySignIdNewWithOptions(request *QuerySmsSignDetailBySignIdNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSignDetailBySignIdNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SignGray)) {
		query["SignGray"] = request.SignGray
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSignDetailBySignIdNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSignDetailBySignIdNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSignDetailBySignIdNewRequest
//
// @return QuerySmsSignDetailBySignIdNewResponse
func (client *Client) QuerySmsSignDetailBySignIdNew(request *QuerySmsSignDetailBySignIdNewRequest) (_result *QuerySmsSignDetailBySignIdNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSignDetailBySignIdNewResponse{}
	_body, _err := client.QuerySmsSignDetailBySignIdNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSignLastRangeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSignLastRangeResponse
func (client *Client) QuerySmsSignLastRangeWithOptions(request *QuerySmsSignLastRangeRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSignLastRangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.IsGlobeSign)) {
		query["IsGlobeSign"] = request.IsGlobeSign
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.NeedDefaultSign)) {
		query["NeedDefaultSign"] = request.NeedDefaultSign
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSignLastRange"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSignLastRangeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSignLastRangeRequest
//
// @return QuerySmsSignLastRangeResponse
func (client *Client) QuerySmsSignLastRange(request *QuerySmsSignLastRangeRequest) (_result *QuerySmsSignLastRangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSignLastRangeResponse{}
	_body, _err := client.QuerySmsSignLastRangeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSignLastRangeNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSignLastRangeNewResponse
func (client *Client) QuerySmsSignLastRangeNewWithOptions(request *QuerySmsSignLastRangeNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSignLastRangeNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.IsGlobeSign)) {
		query["IsGlobeSign"] = request.IsGlobeSign
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.NeedDefaultSign)) {
		query["NeedDefaultSign"] = request.NeedDefaultSign
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageIndex)) {
		query["PageIndex"] = request.PageIndex
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneType)) {
		query["SceneType"] = request.SceneType
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSignLastRangeNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSignLastRangeNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSignLastRangeNewRequest
//
// @return QuerySmsSignLastRangeNewResponse
func (client *Client) QuerySmsSignLastRangeNew(request *QuerySmsSignLastRangeNewRequest) (_result *QuerySmsSignLastRangeNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSignLastRangeNewResponse{}
	_body, _err := client.QuerySmsSignLastRangeNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSignListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSignListResponse
func (client *Client) QuerySmsSignListWithOptions(request *QuerySmsSignListRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSignListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.IsGlobeSign)) {
		query["IsGlobeSign"] = request.IsGlobeSign
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSignList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSignListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSignListRequest
//
// @return QuerySmsSignListResponse
func (client *Client) QuerySmsSignList(request *QuerySmsSignListRequest) (_result *QuerySmsSignListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSignListResponse{}
	_body, _err := client.QuerySmsSignListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - QuerySmsSignListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSignListNewResponse
func (client *Client) QuerySmsSignListNewWithOptions(tmpReq *QuerySmsSignListNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSignListNewResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QuerySmsSignListNewShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.OperatorCodes)) {
		request.OperatorCodesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OperatorCodes, tea.String("OperatorCodes"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AggregatedRegisterStatus)) {
		query["AggregatedRegisterStatus"] = request.AggregatedRegisterStatus
	}

	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.IsGlobeSign)) {
		query["IsGlobeSign"] = request.IsGlobeSign
	}

	if !tea.BoolValue(util.IsUnset(request.OperatorCodesShrink)) {
		query["OperatorCodes"] = request.OperatorCodesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OperatorRegisterStatus)) {
		query["OperatorRegisterStatus"] = request.OperatorRegisterStatus
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.QualificationName)) {
		query["QualificationName"] = request.QualificationName
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterResult)) {
		query["RegisterResult"] = request.RegisterResult
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.SignSource)) {
		query["SignSource"] = request.SignSource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSignListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSignListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSignListNewRequest
//
// @return QuerySmsSignListNewResponse
func (client *Client) QuerySmsSignListNew(request *QuerySmsSignListNewRequest) (_result *QuerySmsSignListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSignListNewResponse{}
	_body, _err := client.QuerySmsSignListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSignValidRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSignValidResponse
func (client *Client) QuerySmsSignValidWithOptions(request *QuerySmsSignValidRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSignValidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSignValid"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSignValidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSignValidRequest
//
// @return QuerySmsSignValidResponse
func (client *Client) QuerySmsSignValid(request *QuerySmsSignValidRequest) (_result *QuerySmsSignValidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSignValidResponse{}
	_body, _err := client.QuerySmsSignValidWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsSignValidNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsSignValidNewResponse
func (client *Client) QuerySmsSignValidNewWithOptions(request *QuerySmsSignValidNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsSignValidNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.SignUpgrade)) {
		query["SignUpgrade"] = request.SignUpgrade
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsSignValidNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsSignValidNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsSignValidNewRequest
//
// @return QuerySmsSignValidNewResponse
func (client *Client) QuerySmsSignValidNew(request *QuerySmsSignValidNewRequest) (_result *QuerySmsSignValidNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsSignValidNewResponse{}
	_body, _err := client.QuerySmsSignValidNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsStatisticsResponse
func (client *Client) QuerySmsStatisticsWithOptions(request *QuerySmsStatisticsRequest, runtime *util.RuntimeOptions) (_result *QuerySmsStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsStatistics"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsStatisticsRequest
//
// @return QuerySmsStatisticsResponse
func (client *Client) QuerySmsStatistics(request *QuerySmsStatisticsRequest) (_result *QuerySmsStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsStatisticsResponse{}
	_body, _err := client.QuerySmsStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsStatisticsByTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsStatisticsByTemplateResponse
func (client *Client) QuerySmsStatisticsByTemplateWithOptions(request *QuerySmsStatisticsByTemplateRequest, runtime *util.RuntimeOptions) (_result *QuerySmsStatisticsByTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsStatisticsByTemplate"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsStatisticsByTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsStatisticsByTemplateRequest
//
// @return QuerySmsStatisticsByTemplateResponse
func (client *Client) QuerySmsStatisticsByTemplate(request *QuerySmsStatisticsByTemplateRequest) (_result *QuerySmsStatisticsByTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsStatisticsByTemplateResponse{}
	_body, _err := client.QuerySmsStatisticsByTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsStatisticsByTemplateNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsStatisticsByTemplateNewResponse
func (client *Client) QuerySmsStatisticsByTemplateNewWithOptions(request *QuerySmsStatisticsByTemplateNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsStatisticsByTemplateNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsStatisticsByTemplateNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsStatisticsByTemplateNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsStatisticsByTemplateNewRequest
//
// @return QuerySmsStatisticsByTemplateNewResponse
func (client *Client) QuerySmsStatisticsByTemplateNew(request *QuerySmsStatisticsByTemplateNewRequest) (_result *QuerySmsStatisticsByTemplateNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsStatisticsByTemplateNewResponse{}
	_body, _err := client.QuerySmsStatisticsByTemplateNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsStatisticsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsStatisticsNewResponse
func (client *Client) QuerySmsStatisticsNewWithOptions(request *QuerySmsStatisticsNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsStatisticsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsStatisticsNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsStatisticsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsStatisticsNewRequest
//
// @return QuerySmsStatisticsNewResponse
func (client *Client) QuerySmsStatisticsNew(request *QuerySmsStatisticsNewRequest) (_result *QuerySmsStatisticsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsStatisticsNewResponse{}
	_body, _err := client.QuerySmsStatisticsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsStatisticsUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsStatisticsUrlResponse
func (client *Client) QuerySmsStatisticsUrlWithOptions(request *QuerySmsStatisticsUrlRequest, runtime *util.RuntimeOptions) (_result *QuerySmsStatisticsUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsStatisticsUrl"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsStatisticsUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsStatisticsUrlRequest
//
// @return QuerySmsStatisticsUrlResponse
func (client *Client) QuerySmsStatisticsUrl(request *QuerySmsStatisticsUrlRequest) (_result *QuerySmsStatisticsUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsStatisticsUrlResponse{}
	_body, _err := client.QuerySmsStatisticsUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsStatisticsUrlNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsStatisticsUrlNewResponse
func (client *Client) QuerySmsStatisticsUrlNewWithOptions(request *QuerySmsStatisticsUrlNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsStatisticsUrlNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsStatisticsUrlNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsStatisticsUrlNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsStatisticsUrlNewRequest
//
// @return QuerySmsStatisticsUrlNewResponse
func (client *Client) QuerySmsStatisticsUrlNew(request *QuerySmsStatisticsUrlNewRequest) (_result *QuerySmsStatisticsUrlNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsStatisticsUrlNewResponse{}
	_body, _err := client.QuerySmsStatisticsUrlNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsStepRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsStepResponse
func (client *Client) QuerySmsStepWithOptions(request *QuerySmsStepRequest, runtime *util.RuntimeOptions) (_result *QuerySmsStepResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillCycle)) {
		query["BillCycle"] = request.BillCycle
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsStep"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsStepResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsStepRequest
//
// @return QuerySmsStepResponse
func (client *Client) QuerySmsStep(request *QuerySmsStepRequest) (_result *QuerySmsStepResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsStepResponse{}
	_body, _err := client.QuerySmsStepWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsTemplateByCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsTemplateByCodeResponse
func (client *Client) QuerySmsTemplateByCodeWithOptions(request *QuerySmsTemplateByCodeRequest, runtime *util.RuntimeOptions) (_result *QuerySmsTemplateByCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsTemplateByCode"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsTemplateByCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsTemplateByCodeRequest
//
// @return QuerySmsTemplateByCodeResponse
func (client *Client) QuerySmsTemplateByCode(request *QuerySmsTemplateByCodeRequest) (_result *QuerySmsTemplateByCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsTemplateByCodeResponse{}
	_body, _err := client.QuerySmsTemplateByCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsTemplateByCodeNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsTemplateByCodeNewResponse
func (client *Client) QuerySmsTemplateByCodeNewWithOptions(request *QuerySmsTemplateByCodeNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsTemplateByCodeNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsTemplateByCodeNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsTemplateByCodeNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsTemplateByCodeNewRequest
//
// @return QuerySmsTemplateByCodeNewResponse
func (client *Client) QuerySmsTemplateByCodeNew(request *QuerySmsTemplateByCodeNewRequest) (_result *QuerySmsTemplateByCodeNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsTemplateByCodeNewResponse{}
	_body, _err := client.QuerySmsTemplateByCodeNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsTemplateLastRangeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsTemplateLastRangeResponse
func (client *Client) QuerySmsTemplateLastRangeWithOptions(request *QuerySmsTemplateLastRangeRequest, runtime *util.RuntimeOptions) (_result *QuerySmsTemplateLastRangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.NeedDefaultTemplate)) {
		query["NeedDefaultTemplate"] = request.NeedDefaultTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsTemplateLastRange"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsTemplateLastRangeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsTemplateLastRangeRequest
//
// @return QuerySmsTemplateLastRangeResponse
func (client *Client) QuerySmsTemplateLastRange(request *QuerySmsTemplateLastRangeRequest) (_result *QuerySmsTemplateLastRangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsTemplateLastRangeResponse{}
	_body, _err := client.QuerySmsTemplateLastRangeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsTemplateLastRangeNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsTemplateLastRangeNewResponse
func (client *Client) QuerySmsTemplateLastRangeNewWithOptions(request *QuerySmsTemplateLastRangeNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsTemplateLastRangeNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.FilterAnyParam)) {
		query["FilterAnyParam"] = request.FilterAnyParam
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.NeedDefaultTemplate)) {
		query["NeedDefaultTemplate"] = request.NeedDefaultTemplate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdId)) {
		query["ProdId"] = request.ProdId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsTemplateLastRangeNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsTemplateLastRangeNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsTemplateLastRangeNewRequest
//
// @return QuerySmsTemplateLastRangeNewResponse
func (client *Client) QuerySmsTemplateLastRangeNew(request *QuerySmsTemplateLastRangeNewRequest) (_result *QuerySmsTemplateLastRangeNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsTemplateLastRangeNewResponse{}
	_body, _err := client.QuerySmsTemplateLastRangeNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsTemplateListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsTemplateListResponse
func (client *Client) QuerySmsTemplateListWithOptions(request *QuerySmsTemplateListRequest, runtime *util.RuntimeOptions) (_result *QuerySmsTemplateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdType)) {
		query["ProdType"] = request.ProdType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsTemplateList"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsTemplateListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsTemplateListRequest
//
// @return QuerySmsTemplateListResponse
func (client *Client) QuerySmsTemplateList(request *QuerySmsTemplateListRequest) (_result *QuerySmsTemplateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsTemplateListResponse{}
	_body, _err := client.QuerySmsTemplateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsTemplateListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsTemplateListNewResponse
func (client *Client) QuerySmsTemplateListNewWithOptions(request *QuerySmsTemplateListNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsTemplateListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditState)) {
		query["AuditState"] = request.AuditState
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.IntlType)) {
		query["IntlType"] = request.IntlType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProdType)) {
		query["ProdType"] = request.ProdType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TagListString)) {
		query["TagListString"] = request.TagListString
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsTemplateListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsTemplateListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsTemplateListNewRequest
//
// @return QuerySmsTemplateListNewResponse
func (client *Client) QuerySmsTemplateListNew(request *QuerySmsTemplateListNewRequest) (_result *QuerySmsTemplateListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsTemplateListNewResponse{}
	_body, _err := client.QuerySmsTemplateListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsUserTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsUserTagsResponse
func (client *Client) QuerySmsUserTagsWithOptions(request *QuerySmsUserTagsRequest, runtime *util.RuntimeOptions) (_result *QuerySmsUserTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsUserTags"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsUserTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsUserTagsRequest
//
// @return QuerySmsUserTagsResponse
func (client *Client) QuerySmsUserTags(request *QuerySmsUserTagsRequest) (_result *QuerySmsUserTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsUserTagsResponse{}
	_body, _err := client.QuerySmsUserTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmsUserTagsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmsUserTagsNewResponse
func (client *Client) QuerySmsUserTagsNewWithOptions(request *QuerySmsUserTagsNewRequest, runtime *util.RuntimeOptions) (_result *QuerySmsUserTagsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmsUserTagsNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmsUserTagsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmsUserTagsNewRequest
//
// @return QuerySmsUserTagsNewResponse
func (client *Client) QuerySmsUserTagsNew(request *QuerySmsUserTagsNewRequest) (_result *QuerySmsUserTagsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmsUserTagsNewResponse{}
	_body, _err := client.QuerySmsUserTagsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryStandarTemplateCollectionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryStandarTemplateCollectionsResponse
func (client *Client) QueryStandarTemplateCollectionsWithOptions(request *QueryStandarTemplateCollectionsRequest, runtime *util.RuntimeOptions) (_result *QueryStandarTemplateCollectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateContent)) {
		query["TemplateContent"] = request.TemplateContent
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryStandarTemplateCollections"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryStandarTemplateCollectionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryStandarTemplateCollectionsRequest
//
// @return QueryStandarTemplateCollectionsResponse
func (client *Client) QueryStandarTemplateCollections(request *QueryStandarTemplateCollectionsRequest) (_result *QueryStandarTemplateCollectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryStandarTemplateCollectionsResponse{}
	_body, _err := client.QueryStandarTemplateCollectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryStandarTemplateCollectionsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryStandarTemplateCollectionsNewResponse
func (client *Client) QueryStandarTemplateCollectionsNewWithOptions(request *QueryStandarTemplateCollectionsNewRequest, runtime *util.RuntimeOptions) (_result *QueryStandarTemplateCollectionsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateContent)) {
		query["TemplateContent"] = request.TemplateContent
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryStandarTemplateCollectionsNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryStandarTemplateCollectionsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryStandarTemplateCollectionsNewRequest
//
// @return QueryStandarTemplateCollectionsNewResponse
func (client *Client) QueryStandarTemplateCollectionsNew(request *QueryStandarTemplateCollectionsNewRequest) (_result *QueryStandarTemplateCollectionsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryStandarTemplateCollectionsNewResponse{}
	_body, _err := client.QueryStandarTemplateCollectionsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryStandardProtocolRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryStandardProtocolResponse
func (client *Client) QueryStandardProtocolWithOptions(request *QueryStandardProtocolRequest, runtime *util.RuntimeOptions) (_result *QueryStandardProtocolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolType)) {
		query["ProtocolType"] = request.ProtocolType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryStandardProtocol"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryStandardProtocolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryStandardProtocolRequest
//
// @return QueryStandardProtocolResponse
func (client *Client) QueryStandardProtocol(request *QueryStandardProtocolRequest) (_result *QueryStandardProtocolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryStandardProtocolResponse{}
	_body, _err := client.QueryStandardProtocolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryStandardProtocolListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryStandardProtocolListNewResponse
func (client *Client) QueryStandardProtocolListNewWithOptions(request *QueryStandardProtocolListNewRequest, runtime *util.RuntimeOptions) (_result *QueryStandardProtocolListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolType)) {
		query["ProtocolType"] = request.ProtocolType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryStandardProtocolListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryStandardProtocolListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryStandardProtocolListNewRequest
//
// @return QueryStandardProtocolListNewResponse
func (client *Client) QueryStandardProtocolListNew(request *QueryStandardProtocolListNewRequest) (_result *QueryStandardProtocolListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryStandardProtocolListNewResponse{}
	_body, _err := client.QueryStandardProtocolListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryTagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryTagResourcesResponse
func (client *Client) QueryTagResourcesWithOptions(request *QueryTagResourcesRequest, runtime *util.RuntimeOptions) (_result *QueryTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTagResources"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryTagResourcesRequest
//
// @return QueryTagResourcesResponse
func (client *Client) QueryTagResources(request *QueryTagResourcesRequest) (_result *QueryTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTagResourcesResponse{}
	_body, _err := client.QueryTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryTagResourcesNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryTagResourcesNewResponse
func (client *Client) QueryTagResourcesNewWithOptions(request *QueryTagResourcesNewRequest, runtime *util.RuntimeOptions) (_result *QueryTagResourcesNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceIdListString)) {
		query["ResourceIdListString"] = request.ResourceIdListString
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TagListString)) {
		query["TagListString"] = request.TagListString
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTagResourcesNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTagResourcesNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryTagResourcesNewRequest
//
// @return QueryTagResourcesNewResponse
func (client *Client) QueryTagResourcesNew(request *QueryTagResourcesNewRequest) (_result *QueryTagResourcesNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTagResourcesNewResponse{}
	_body, _err := client.QueryTagResourcesNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发送效果统计
//
// @param request - QueryTmpEffectReportDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryTmpEffectReportDataResponse
func (client *Client) QueryTmpEffectReportDataWithOptions(request *QueryTmpEffectReportDataRequest, runtime *util.RuntimeOptions) (_result *QueryTmpEffectReportDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.TmpName)) {
		query["TmpName"] = request.TmpName
	}

	if !tea.BoolValue(util.IsUnset(request.VendorCode)) {
		query["VendorCode"] = request.VendorCode
	}

	if !tea.BoolValue(util.IsUnset(request.VendorName)) {
		query["VendorName"] = request.VendorName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTmpEffectReportData"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTmpEffectReportDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发送效果统计
//
// @param request - QueryTmpEffectReportDataRequest
//
// @return QueryTmpEffectReportDataResponse
func (client *Client) QueryTmpEffectReportData(request *QueryTmpEffectReportDataRequest) (_result *QueryTmpEffectReportDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTmpEffectReportDataResponse{}
	_body, _err := client.QueryTmpEffectReportDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发送效果统计-日报
//
// @param request - QueryTmpEffectReportDayDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryTmpEffectReportDayDataResponse
func (client *Client) QueryTmpEffectReportDayDataWithOptions(request *QueryTmpEffectReportDayDataRequest, runtime *util.RuntimeOptions) (_result *QueryTmpEffectReportDayDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.TmpCode)) {
		query["TmpCode"] = request.TmpCode
	}

	if !tea.BoolValue(util.IsUnset(request.TmpName)) {
		query["TmpName"] = request.TmpName
	}

	if !tea.BoolValue(util.IsUnset(request.VendorName)) {
		query["VendorName"] = request.VendorName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTmpEffectReportDayData"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTmpEffectReportDayDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发送效果统计-日报
//
// @param request - QueryTmpEffectReportDayDataRequest
//
// @return QueryTmpEffectReportDayDataResponse
func (client *Client) QueryTmpEffectReportDayData(request *QueryTmpEffectReportDayDataRequest) (_result *QueryTmpEffectReportDayDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTmpEffectReportDayDataResponse{}
	_body, _err := client.QueryTmpEffectReportDayDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryUsertagExistenceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryUsertagExistenceResponse
func (client *Client) QueryUsertagExistenceWithOptions(request *QueryUsertagExistenceRequest, runtime *util.RuntimeOptions) (_result *QueryUsertagExistenceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.UsertagPosition)) {
		query["UsertagPosition"] = request.UsertagPosition
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryUsertagExistence"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryUsertagExistenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryUsertagExistenceRequest
//
// @return QueryUsertagExistenceResponse
func (client *Client) QueryUsertagExistence(request *QueryUsertagExistenceRequest) (_result *QueryUsertagExistenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryUsertagExistenceResponse{}
	_body, _err := client.QueryUsertagExistenceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryWarningThresholdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryWarningThresholdResponse
func (client *Client) QueryWarningThresholdWithOptions(request *QueryWarningThresholdRequest, runtime *util.RuntimeOptions) (_result *QueryWarningThresholdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryWarningThreshold"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryWarningThresholdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryWarningThresholdRequest
//
// @return QueryWarningThresholdResponse
func (client *Client) QueryWarningThreshold(request *QueryWarningThresholdRequest) (_result *QueryWarningThresholdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryWarningThresholdResponse{}
	_body, _err := client.QueryWarningThresholdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryWarningThresholdNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryWarningThresholdNewResponse
func (client *Client) QueryWarningThresholdNewWithOptions(request *QueryWarningThresholdNewRequest, runtime *util.RuntimeOptions) (_result *QueryWarningThresholdNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryWarningThresholdNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryWarningThresholdNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryWarningThresholdNewRequest
//
// @return QueryWarningThresholdNewResponse
func (client *Client) QueryWarningThresholdNew(request *QueryWarningThresholdNewRequest) (_result *QueryWarningThresholdNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryWarningThresholdNewResponse{}
	_body, _err := client.QueryWarningThresholdNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryWorkOrdAuditListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryWorkOrdAuditListNewResponse
func (client *Client) QueryWorkOrdAuditListNewWithOptions(request *QueryWorkOrdAuditListNewRequest, runtime *util.RuntimeOptions) (_result *QueryWorkOrdAuditListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryWorkOrdAuditListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryWorkOrdAuditListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryWorkOrdAuditListNewRequest
//
// @return QueryWorkOrdAuditListNewResponse
func (client *Client) QueryWorkOrdAuditListNew(request *QueryWorkOrdAuditListNewRequest) (_result *QueryWorkOrdAuditListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryWorkOrdAuditListNewResponse{}
	_body, _err := client.QueryWorkOrdAuditListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SaveContactsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveContactsNewResponse
func (client *Client) SaveContactsNewWithOptions(request *SaveContactsNewRequest, runtime *util.RuntimeOptions) (_result *SaveContactsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OpenPkgWarning)) {
		query["OpenPkgWarning"] = request.OpenPkgWarning
	}

	if !tea.BoolValue(util.IsUnset(request.OpenPreventBrushWarning)) {
		query["OpenPreventBrushWarning"] = request.OpenPreventBrushWarning
	}

	if !tea.BoolValue(util.IsUnset(request.OpenSendWarning)) {
		query["OpenSendWarning"] = request.OpenSendWarning
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		query["Phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiveSignTemplateAuditResult)) {
		query["ReceiveSignTemplateAuditResult"] = request.ReceiveSignTemplateAuditResult
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.VerificationCode)) {
		query["VerificationCode"] = request.VerificationCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveContactsNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveContactsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SaveContactsNewRequest
//
// @return SaveContactsNewResponse
func (client *Client) SaveContactsNew(request *SaveContactsNewRequest) (_result *SaveContactsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveContactsNewResponse{}
	_body, _err := client.SaveContactsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SaveLearningStatusNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveLearningStatusNewResponse
func (client *Client) SaveLearningStatusNewWithOptions(request *SaveLearningStatusNewRequest, runtime *util.RuntimeOptions) (_result *SaveLearningStatusNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Value)) {
		query["Value"] = request.Value
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveLearningStatusNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveLearningStatusNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SaveLearningStatusNewRequest
//
// @return SaveLearningStatusNewResponse
func (client *Client) SaveLearningStatusNew(request *SaveLearningStatusNewRequest) (_result *SaveLearningStatusNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveLearningStatusNewResponse{}
	_body, _err := client.SaveLearningStatusNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SelectTagResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SelectTagResourceResponse
func (client *Client) SelectTagResourceWithOptions(request *SelectTagResourceRequest, runtime *util.RuntimeOptions) (_result *SelectTagResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	if !tea.BoolValue(util.IsUnset(request.TagValue)) {
		query["TagValue"] = request.TagValue
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SelectTagResource"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SelectTagResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SelectTagResourceRequest
//
// @return SelectTagResourceResponse
func (client *Client) SelectTagResource(request *SelectTagResourceRequest) (_result *SelectTagResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SelectTagResourceResponse{}
	_body, _err := client.SelectTagResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SelectTagResourceNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SelectTagResourceNewResponse
func (client *Client) SelectTagResourceNewWithOptions(request *SelectTagResourceNewRequest, runtime *util.RuntimeOptions) (_result *SelectTagResourceNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	if !tea.BoolValue(util.IsUnset(request.TagValue)) {
		query["TagValue"] = request.TagValue
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SelectTagResourceNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SelectTagResourceNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SelectTagResourceNewRequest
//
// @return SelectTagResourceNewResponse
func (client *Client) SelectTagResourceNew(request *SelectTagResourceNewRequest) (_result *SelectTagResourceNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SelectTagResourceNewResponse{}
	_body, _err := client.SelectTagResourceNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SendSmsTestRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendSmsTestResponse
func (client *Client) SendSmsTestWithOptions(request *SendSmsTestRequest, runtime *util.RuntimeOptions) (_result *SendSmsTestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NcToken)) {
		query["NcToken"] = request.NcToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteIp)) {
		query["RemoteIp"] = request.RemoteIp
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		query["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.Sig)) {
		query["Sig"] = request.Sig
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateParam)) {
		query["TemplateParam"] = request.TemplateParam
	}

	if !tea.BoolValue(util.IsUnset(request.TestType)) {
		query["TestType"] = request.TestType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendSmsTest"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendSmsTestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SendSmsTestRequest
//
// @return SendSmsTestResponse
func (client *Client) SendSmsTest(request *SendSmsTestRequest) (_result *SendSmsTestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendSmsTestResponse{}
	_body, _err := client.SendSmsTestWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SendSmsTestNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendSmsTestNewResponse
func (client *Client) SendSmsTestNewWithOptions(request *SendSmsTestNewRequest, runtime *util.RuntimeOptions) (_result *SendSmsTestNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NcToken)) {
		query["NcToken"] = request.NcToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteIp)) {
		query["RemoteIp"] = request.RemoteIp
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		query["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.Sig)) {
		query["Sig"] = request.Sig
	}

	if !tea.BoolValue(util.IsUnset(request.SignName)) {
		query["SignName"] = request.SignName
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateParam)) {
		query["TemplateParam"] = request.TemplateParam
	}

	if !tea.BoolValue(util.IsUnset(request.TestType)) {
		query["TestType"] = request.TestType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendSmsTestNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendSmsTestNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SendSmsTestNewRequest
//
// @return SendSmsTestNewResponse
func (client *Client) SendSmsTestNew(request *SendSmsTestNewRequest) (_result *SendSmsTestNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendSmsTestNewResponse{}
	_body, _err := client.SendSmsTestNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SendVerificationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendVerificationResponse
func (client *Client) SendVerificationWithOptions(request *SendVerificationRequest, runtime *util.RuntimeOptions) (_result *SendVerificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	if !tea.BoolValue(util.IsUnset(request.VerifyType)) {
		query["VerifyType"] = request.VerifyType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendVerification"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendVerificationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SendVerificationRequest
//
// @return SendVerificationResponse
func (client *Client) SendVerification(request *SendVerificationRequest) (_result *SendVerificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendVerificationResponse{}
	_body, _err := client.SendVerificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SendVerificationNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendVerificationNewResponse
func (client *Client) SendVerificationNewWithOptions(request *SendVerificationNewRequest, runtime *util.RuntimeOptions) (_result *SendVerificationNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	if !tea.BoolValue(util.IsUnset(request.VerifyType)) {
		query["VerifyType"] = request.VerifyType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendVerificationNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendVerificationNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SendVerificationNewRequest
//
// @return SendVerificationNewResponse
func (client *Client) SendVerificationNew(request *SendVerificationNewRequest) (_result *SendVerificationNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendVerificationNewResponse{}
	_body, _err := client.SendVerificationNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - TagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - TagResourcesNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesNewResponse
func (client *Client) TagResourcesNewWithOptions(request *TagResourcesNewRequest, runtime *util.RuntimeOptions) (_result *TagResourcesNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceIdListString)) {
		query["ResourceIdListString"] = request.ResourceIdListString
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TagListString)) {
		query["TagListString"] = request.TagListString
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResourcesNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - TagResourcesNewRequest
//
// @return TagResourcesNewResponse
func (client *Client) TagResourcesNew(request *TagResourcesNewRequest) (_result *TagResourcesNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesNewResponse{}
	_body, _err := client.TagResourcesNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - TagResourcesSystemTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesSystemTagsResponse
func (client *Client) TagResourcesSystemTagsWithOptions(request *TagResourcesSystemTagsRequest, runtime *util.RuntimeOptions) (_result *TagResourcesSystemTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TagOwnerUid)) {
		query["TagOwnerUid"] = request.TagOwnerUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResourcesSystemTags"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesSystemTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - TagResourcesSystemTagsRequest
//
// @return TagResourcesSystemTagsResponse
func (client *Client) TagResourcesSystemTags(request *TagResourcesSystemTagsRequest) (_result *TagResourcesSystemTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesSystemTagsResponse{}
	_body, _err := client.TagResourcesSystemTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UntagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UntagResourcesNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesNewResponse
func (client *Client) UntagResourcesNewWithOptions(request *UntagResourcesNewRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceIdListString)) {
		query["ResourceIdListString"] = request.ResourceIdListString
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagListString)) {
		query["TagListString"] = request.TagListString
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResourcesNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UntagResourcesNewRequest
//
// @return UntagResourcesNewResponse
func (client *Client) UntagResourcesNew(request *UntagResourcesNewRequest) (_result *UntagResourcesNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesNewResponse{}
	_body, _err := client.UntagResourcesNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UntagResourcesSystemTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesSystemTagsResponse
func (client *Client) UntagResourcesSystemTagsWithOptions(request *UntagResourcesSystemTagsRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesSystemTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	if !tea.BoolValue(util.IsUnset(request.TagOwnerUid)) {
		query["TagOwnerUid"] = request.TagOwnerUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResourcesSystemTags"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesSystemTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UntagResourcesSystemTagsRequest
//
// @return UntagResourcesSystemTagsResponse
func (client *Client) UntagResourcesSystemTags(request *UntagResourcesSystemTagsRequest) (_result *UntagResourcesSystemTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesSystemTagsResponse{}
	_body, _err := client.UntagResourcesSystemTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateIpWhiteListNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateIpWhiteListNewResponse
func (client *Client) UpdateIpWhiteListNewWithOptions(request *UpdateIpWhiteListNewRequest, runtime *util.RuntimeOptions) (_result *UpdateIpWhiteListNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FeatureCode)) {
		query["FeatureCode"] = request.FeatureCode
	}

	if !tea.BoolValue(util.IsUnset(request.IpWhiteList)) {
		query["IpWhiteList"] = request.IpWhiteList
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.RealNameInsId)) {
		query["RealNameInsId"] = request.RealNameInsId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateIpWhiteListNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateIpWhiteListNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateIpWhiteListNewRequest
//
// @return UpdateIpWhiteListNewResponse
func (client *Client) UpdateIpWhiteListNew(request *UpdateIpWhiteListNewRequest) (_result *UpdateIpWhiteListNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateIpWhiteListNewResponse{}
	_body, _err := client.UpdateIpWhiteListNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdatePartnerTemplateNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePartnerTemplateNewResponse
func (client *Client) UpdatePartnerTemplateNewWithOptions(request *UpdatePartnerTemplateNewRequest, runtime *util.RuntimeOptions) (_result *UpdatePartnerTemplateNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePartnerTemplateNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePartnerTemplateNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdatePartnerTemplateNewRequest
//
// @return UpdatePartnerTemplateNewResponse
func (client *Client) UpdatePartnerTemplateNew(request *UpdatePartnerTemplateNewRequest) (_result *UpdatePartnerTemplateNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePartnerTemplateNewResponse{}
	_body, _err := client.UpdatePartnerTemplateNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateSlsStatusNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateSlsStatusNewResponse
func (client *Client) UpdateSlsStatusNewWithOptions(request *UpdateSlsStatusNewRequest, runtime *util.RuntimeOptions) (_result *UpdateSlsStatusNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthStatus)) {
		query["AuthStatus"] = request.AuthStatus
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SaveTime)) {
		query["SaveTime"] = request.SaveTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSlsStatusNew"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSlsStatusNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateSlsStatusNewRequest
//
// @return UpdateSlsStatusNewResponse
func (client *Client) UpdateSlsStatusNew(request *UpdateSlsStatusNewRequest) (_result *UpdateSlsStatusNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSlsStatusNewResponse{}
	_body, _err := client.UpdateSlsStatusNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 上传卡片素材并获取素材id
//
// @param request - UploadCardResRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadCardResResponse
func (client *Client) UploadCardResWithOptions(request *UploadCardResRequest, runtime *util.RuntimeOptions) (_result *UploadCardResResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallerParentId)) {
		query["CallerParentId"] = request.CallerParentId
	}

	if !tea.BoolValue(util.IsUnset(request.CallerType)) {
		query["CallerType"] = request.CallerType
	}

	if !tea.BoolValue(util.IsUnset(request.CallerUid)) {
		query["CallerUid"] = request.CallerUid
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendInfo)) {
		query["ExtendInfo"] = request.ExtendInfo
	}

	if !tea.BoolValue(util.IsUnset(request.FileSize)) {
		query["FileSize"] = request.FileSize
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		query["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		query["Memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadCardRes"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadCardResResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 上传卡片素材并获取素材id
//
// @param request - UploadCardResRequest
//
// @return UploadCardResResponse
func (client *Client) UploadCardRes(request *UploadCardResRequest) (_result *UploadCardResResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadCardResResponse{}
	_body, _err := client.UploadCardResWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 上传动参图片素材
//
// @param request - UploadCardResWithDyncParamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadCardResWithDyncParamResponse
func (client *Client) UploadCardResWithDyncParamWithOptions(request *UploadCardResWithDyncParamRequest, runtime *util.RuntimeOptions) (_result *UploadCardResWithDyncParamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DynamicParam)) {
		query["DynamicParam"] = request.DynamicParam
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTimes)) {
		query["ExpiredTimes"] = request.ExpiredTimes
	}

	if !tea.BoolValue(util.IsUnset(request.FileSize)) {
		query["FileSize"] = request.FileSize
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		query["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Memo)) {
		query["Memo"] = request.Memo
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateCode)) {
		query["TemplateCode"] = request.TemplateCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadCardResWithDyncParam"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadCardResWithDyncParamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 上传动参图片素材
//
// @param request - UploadCardResWithDyncParamRequest
//
// @return UploadCardResWithDyncParamResponse
func (client *Client) UploadCardResWithDyncParam(request *UploadCardResWithDyncParamRequest) (_result *UploadCardResWithDyncParamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadCardResWithDyncParamResponse{}
	_body, _err := client.UploadCardResWithDyncParamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ValidatYunSmsIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ValidatYunSmsIdResponse
func (client *Client) ValidatYunSmsIdWithOptions(request *ValidatYunSmsIdRequest, runtime *util.RuntimeOptions) (_result *ValidatYunSmsIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["data"] = request.Data
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ValidatYunSmsId"),
		Version:     tea.String("2017-06-20"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ValidatYunSmsIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ValidatYunSmsIdRequest
//
// @return ValidatYunSmsIdResponse
func (client *Client) ValidatYunSmsId(request *ValidatYunSmsIdRequest) (_result *ValidatYunSmsIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ValidatYunSmsIdResponse{}
	_body, _err := client.ValidatYunSmsIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
