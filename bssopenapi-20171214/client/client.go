// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddAccountRelationRequest struct {
	// The display name of the member. This helps clarify the scenario in which the account is used.
	ChildNick *string `json:"ChildNick,omitempty" xml:"ChildNick,omitempty"`
	// The ID of the Alibaba Cloud account that is used as the member.
	ChildUserId *int64 `json:"ChildUserId,omitempty" xml:"ChildUserId,omitempty"`
	// The ID of the Alibaba Cloud account that is used as the management account.
	ParentUserId *int64 `json:"ParentUserId,omitempty" xml:"ParentUserId,omitempty"`
	// The permissions that can be granted to the member. Valid values:
	//
	// *   SYNCHRONIZE_FINANCE_IDENTITY: allows the credit control identity to be shared with the member.
	// *   SYNCHRONIZE_FINANCE_DISCOUNT_POLICY_TO_TARGET: allows the discount policy to be shared with the member.
	// *   FORBID_WITHDRAW_CASH: does not allow the member to withdraw the balance.
	// *   FORBID_MANAGE_INVOICE: does not allow the member to manage invoices.
	// *   CHECK_FINANCE_INFO: requests to view information about the financial relationship.
	// *   MANAGE_TARGET_INVOICE: allows the member to manage invoices.
	// *   CHECK_TARGET_CONSUMPTION: allows the member to view the bills.
	PermissionCodes []*string `json:"PermissionCodes,omitempty" xml:"PermissionCodes,omitempty" type:"Repeated"`
	// The type of the financial relationship. Set the value to enterprise_group.
	RelationType *string `json:"RelationType,omitempty" xml:"RelationType,omitempty"`
	// The unique ID of the request. The ID is used to mark a request and troubleshoot a problem.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The roles that can be assigned to the member. Set the value to trusteeship.
	RoleCodes []*string `json:"RoleCodes,omitempty" xml:"RoleCodes,omitempty" type:"Repeated"`
}

func (s AddAccountRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAccountRelationRequest) GoString() string {
	return s.String()
}

func (s *AddAccountRelationRequest) SetChildNick(v string) *AddAccountRelationRequest {
	s.ChildNick = &v
	return s
}

func (s *AddAccountRelationRequest) SetChildUserId(v int64) *AddAccountRelationRequest {
	s.ChildUserId = &v
	return s
}

func (s *AddAccountRelationRequest) SetParentUserId(v int64) *AddAccountRelationRequest {
	s.ParentUserId = &v
	return s
}

func (s *AddAccountRelationRequest) SetPermissionCodes(v []*string) *AddAccountRelationRequest {
	s.PermissionCodes = v
	return s
}

func (s *AddAccountRelationRequest) SetRelationType(v string) *AddAccountRelationRequest {
	s.RelationType = &v
	return s
}

func (s *AddAccountRelationRequest) SetRequestId(v string) *AddAccountRelationRequest {
	s.RequestId = &v
	return s
}

func (s *AddAccountRelationRequest) SetRoleCodes(v []*string) *AddAccountRelationRequest {
	s.RoleCodes = v
	return s
}

type AddAccountRelationResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *AddAccountRelationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddAccountRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAccountRelationResponseBody) GoString() string {
	return s.String()
}

func (s *AddAccountRelationResponseBody) SetCode(v string) *AddAccountRelationResponseBody {
	s.Code = &v
	return s
}

func (s *AddAccountRelationResponseBody) SetData(v *AddAccountRelationResponseBodyData) *AddAccountRelationResponseBody {
	s.Data = v
	return s
}

func (s *AddAccountRelationResponseBody) SetMessage(v string) *AddAccountRelationResponseBody {
	s.Message = &v
	return s
}

func (s *AddAccountRelationResponseBody) SetRequestId(v string) *AddAccountRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddAccountRelationResponseBody) SetSuccess(v bool) *AddAccountRelationResponseBody {
	s.Success = &v
	return s
}

type AddAccountRelationResponseBodyData struct {
	// HostId
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the financial relationship.
	RelationId *int64 `json:"RelationId,omitempty" xml:"RelationId,omitempty"`
}

func (s AddAccountRelationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddAccountRelationResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddAccountRelationResponseBodyData) SetHostId(v string) *AddAccountRelationResponseBodyData {
	s.HostId = &v
	return s
}

func (s *AddAccountRelationResponseBodyData) SetRelationId(v int64) *AddAccountRelationResponseBodyData {
	s.RelationId = &v
	return s
}

type AddAccountRelationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddAccountRelationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddAccountRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAccountRelationResponse) GoString() string {
	return s.String()
}

func (s *AddAccountRelationResponse) SetHeaders(v map[string]*string) *AddAccountRelationResponse {
	s.Headers = v
	return s
}

func (s *AddAccountRelationResponse) SetStatusCode(v int32) *AddAccountRelationResponse {
	s.StatusCode = &v
	return s
}

func (s *AddAccountRelationResponse) SetBody(v *AddAccountRelationResponseBody) *AddAccountRelationResponse {
	s.Body = v
	return s
}

type AllocateCostUnitResourceRequest struct {
	// The ID of the source cost center.
	//
	// *   A value of 0 indicates that the resources to be transferred have not been allocated to a cost center.
	// *   A value greater than 0 indicates the ID of an existing cost center.
	FromUnitId *int64 `json:"FromUnitId,omitempty" xml:"FromUnitId,omitempty"`
	// The user ID of the owner of the source cost center.
	FromUnitUserId *int64 `json:"FromUnitUserId,omitempty" xml:"FromUnitUserId,omitempty"`
	// The resource instances to be transferred.
	ResourceInstanceList []*AllocateCostUnitResourceRequestResourceInstanceList `json:"ResourceInstanceList,omitempty" xml:"ResourceInstanceList,omitempty" type:"Repeated"`
	// The ID of the destination cost center.
	//
	// *   A value of -1 indicates that the allocated resources are changed to unallocated.
	// *   A value greater than 0 indicates the ID of an existing cost center.
	ToUnitId *int64 `json:"ToUnitId,omitempty" xml:"ToUnitId,omitempty"`
	// The user ID of the owner of the destination cost center.
	ToUnitUserId *int64 `json:"ToUnitUserId,omitempty" xml:"ToUnitUserId,omitempty"`
}

func (s AllocateCostUnitResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateCostUnitResourceRequest) GoString() string {
	return s.String()
}

func (s *AllocateCostUnitResourceRequest) SetFromUnitId(v int64) *AllocateCostUnitResourceRequest {
	s.FromUnitId = &v
	return s
}

func (s *AllocateCostUnitResourceRequest) SetFromUnitUserId(v int64) *AllocateCostUnitResourceRequest {
	s.FromUnitUserId = &v
	return s
}

func (s *AllocateCostUnitResourceRequest) SetResourceInstanceList(v []*AllocateCostUnitResourceRequestResourceInstanceList) *AllocateCostUnitResourceRequest {
	s.ResourceInstanceList = v
	return s
}

func (s *AllocateCostUnitResourceRequest) SetToUnitId(v int64) *AllocateCostUnitResourceRequest {
	s.ToUnitId = &v
	return s
}

func (s *AllocateCostUnitResourceRequest) SetToUnitUserId(v int64) *AllocateCostUnitResourceRequest {
	s.ToUnitUserId = &v
	return s
}

type AllocateCostUnitResourceRequestResourceInstanceList struct {
	// The split item of the shared instance. This parameter is required only for shared instances.
	//
	// *   Eight cloud services support bill splitting. The commodity codes of the eight services are oss, dcdn, snapshot, vod, cdn, live, cbwp, and pcdn.
	// *   You can obtain the split item of a shared instance by calling QueryCostUnitResource operation to obtain all resource instances within a cost center.
	ApportionCode *string `json:"ApportionCode,omitempty" xml:"ApportionCode,omitempty"`
	// The commodity code of the resource instance.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The ID of the resource instance.
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The user ID of the resource instance owner.
	ResourceUserId *int64 `json:"ResourceUserId,omitempty" xml:"ResourceUserId,omitempty"`
}

func (s AllocateCostUnitResourceRequestResourceInstanceList) String() string {
	return tea.Prettify(s)
}

func (s AllocateCostUnitResourceRequestResourceInstanceList) GoString() string {
	return s.String()
}

func (s *AllocateCostUnitResourceRequestResourceInstanceList) SetApportionCode(v string) *AllocateCostUnitResourceRequestResourceInstanceList {
	s.ApportionCode = &v
	return s
}

func (s *AllocateCostUnitResourceRequestResourceInstanceList) SetCommodityCode(v string) *AllocateCostUnitResourceRequestResourceInstanceList {
	s.CommodityCode = &v
	return s
}

func (s *AllocateCostUnitResourceRequestResourceInstanceList) SetResourceId(v string) *AllocateCostUnitResourceRequestResourceInstanceList {
	s.ResourceId = &v
	return s
}

func (s *AllocateCostUnitResourceRequestResourceInstanceList) SetResourceUserId(v int64) *AllocateCostUnitResourceRequestResourceInstanceList {
	s.ResourceUserId = &v
	return s
}

type AllocateCostUnitResourceResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *AllocateCostUnitResourceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AllocateCostUnitResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllocateCostUnitResourceResponseBody) GoString() string {
	return s.String()
}

func (s *AllocateCostUnitResourceResponseBody) SetCode(v string) *AllocateCostUnitResourceResponseBody {
	s.Code = &v
	return s
}

func (s *AllocateCostUnitResourceResponseBody) SetData(v *AllocateCostUnitResourceResponseBodyData) *AllocateCostUnitResourceResponseBody {
	s.Data = v
	return s
}

func (s *AllocateCostUnitResourceResponseBody) SetMessage(v string) *AllocateCostUnitResourceResponseBody {
	s.Message = &v
	return s
}

func (s *AllocateCostUnitResourceResponseBody) SetRequestId(v string) *AllocateCostUnitResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *AllocateCostUnitResourceResponseBody) SetSuccess(v bool) *AllocateCostUnitResourceResponseBody {
	s.Success = &v
	return s
}

type AllocateCostUnitResourceResponseBodyData struct {
	// Indicates whether resources are allocated to the specified cost center. Valid values:
	//
	// *   true: The resources are allocated to the specified cost center.
	// *   false: The resources fail to be allocated to the specified cost center.
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The ID of the destination cost center.
	ToUnitId *int64 `json:"ToUnitId,omitempty" xml:"ToUnitId,omitempty"`
	// The user ID of the owner of the destination cost center.
	ToUnitUserId *int64 `json:"ToUnitUserId,omitempty" xml:"ToUnitUserId,omitempty"`
}

func (s AllocateCostUnitResourceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AllocateCostUnitResourceResponseBodyData) GoString() string {
	return s.String()
}

func (s *AllocateCostUnitResourceResponseBodyData) SetIsSuccess(v bool) *AllocateCostUnitResourceResponseBodyData {
	s.IsSuccess = &v
	return s
}

func (s *AllocateCostUnitResourceResponseBodyData) SetToUnitId(v int64) *AllocateCostUnitResourceResponseBodyData {
	s.ToUnitId = &v
	return s
}

func (s *AllocateCostUnitResourceResponseBodyData) SetToUnitUserId(v int64) *AllocateCostUnitResourceResponseBodyData {
	s.ToUnitUserId = &v
	return s
}

type AllocateCostUnitResourceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AllocateCostUnitResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AllocateCostUnitResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateCostUnitResourceResponse) GoString() string {
	return s.String()
}

func (s *AllocateCostUnitResourceResponse) SetHeaders(v map[string]*string) *AllocateCostUnitResourceResponse {
	s.Headers = v
	return s
}

func (s *AllocateCostUnitResourceResponse) SetStatusCode(v int32) *AllocateCostUnitResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *AllocateCostUnitResourceResponse) SetBody(v *AllocateCostUnitResourceResponseBody) *AllocateCostUnitResourceResponse {
	s.Body = v
	return s
}

type ApplyInvoiceRequest struct {
	// The ID of the address to which the invoice is delivered. This parameter is required if the invoice is a paper invoice. Set the ID to the value of the AddressId parameter returned by calling the QueryCustomerAddressList operation.
	AddressId *int64 `json:"AddressId,omitempty" xml:"AddressId,omitempty"`
	// The nickname of the applicant. The system does not verify the nickname.
	ApplyUserNick *string `json:"ApplyUserNick,omitempty" xml:"ApplyUserNick,omitempty"`
	// The ID of the customer. Set the ID to the value of the CustomerId parameter returned by calling the QueryInvoicingCustomerList operation.
	CustomerId *int64 `json:"CustomerId,omitempty" xml:"CustomerId,omitempty"`
	// The amount of the invoice. Unit: Cent.
	InvoiceAmount *int64 `json:"InvoiceAmount,omitempty" xml:"InvoiceAmount,omitempty"`
	// Specifies whether to invoice by amount. A value of true indicates that the user applies for the invoice based on the InvoiceAmount parameter. A value of false indicates that the user applies for the invoice based on the total amount of the invoicing items.
	InvoiceByAmount *bool `json:"InvoiceByAmount,omitempty" xml:"InvoiceByAmount,omitempty"`
	// The type of the invoice. Valid values:
	//
	// *   0: paper invoice
	// *   1: electronic invoice
	InvoicingType *int32 `json:"InvoicingType,omitempty" xml:"InvoicingType,omitempty"`
	OwnerId       *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The channel that is used to process the invoice. A value of 0 indicates that the invoice is processed by Alibaba Cloud. A value of 1 indicates that the invoice is processed by the tax platform. Set the value to 1.
	ProcessWay *int32 `json:"ProcessWay,omitempty" xml:"ProcessWay,omitempty"`
	// The IDs of the selected invoicing items. Set the IDs to the IDs returned by calling the QueryEvaluateList operation.
	SelectedIds []*int64 `json:"SelectedIds,omitempty" xml:"SelectedIds,omitempty" type:"Repeated"`
	// The remarks made by the user.
	UserRemark *string `json:"UserRemark,omitempty" xml:"UserRemark,omitempty"`
}

func (s ApplyInvoiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyInvoiceRequest) GoString() string {
	return s.String()
}

func (s *ApplyInvoiceRequest) SetAddressId(v int64) *ApplyInvoiceRequest {
	s.AddressId = &v
	return s
}

func (s *ApplyInvoiceRequest) SetApplyUserNick(v string) *ApplyInvoiceRequest {
	s.ApplyUserNick = &v
	return s
}

func (s *ApplyInvoiceRequest) SetCustomerId(v int64) *ApplyInvoiceRequest {
	s.CustomerId = &v
	return s
}

func (s *ApplyInvoiceRequest) SetInvoiceAmount(v int64) *ApplyInvoiceRequest {
	s.InvoiceAmount = &v
	return s
}

func (s *ApplyInvoiceRequest) SetInvoiceByAmount(v bool) *ApplyInvoiceRequest {
	s.InvoiceByAmount = &v
	return s
}

func (s *ApplyInvoiceRequest) SetInvoicingType(v int32) *ApplyInvoiceRequest {
	s.InvoicingType = &v
	return s
}

func (s *ApplyInvoiceRequest) SetOwnerId(v int64) *ApplyInvoiceRequest {
	s.OwnerId = &v
	return s
}

func (s *ApplyInvoiceRequest) SetProcessWay(v int32) *ApplyInvoiceRequest {
	s.ProcessWay = &v
	return s
}

func (s *ApplyInvoiceRequest) SetSelectedIds(v []*int64) *ApplyInvoiceRequest {
	s.SelectedIds = v
	return s
}

func (s *ApplyInvoiceRequest) SetUserRemark(v string) *ApplyInvoiceRequest {
	s.UserRemark = &v
	return s
}

type ApplyInvoiceResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *ApplyInvoiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ApplyInvoiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyInvoiceResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyInvoiceResponseBody) SetCode(v string) *ApplyInvoiceResponseBody {
	s.Code = &v
	return s
}

func (s *ApplyInvoiceResponseBody) SetData(v *ApplyInvoiceResponseBodyData) *ApplyInvoiceResponseBody {
	s.Data = v
	return s
}

func (s *ApplyInvoiceResponseBody) SetMessage(v string) *ApplyInvoiceResponseBody {
	s.Message = &v
	return s
}

func (s *ApplyInvoiceResponseBody) SetRequestId(v string) *ApplyInvoiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyInvoiceResponseBody) SetSuccess(v bool) *ApplyInvoiceResponseBody {
	s.Success = &v
	return s
}

type ApplyInvoiceResponseBodyData struct {
	// The ID of the application.
	InvoiceApplyId *int64 `json:"InvoiceApplyId,omitempty" xml:"InvoiceApplyId,omitempty"`
}

func (s ApplyInvoiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ApplyInvoiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ApplyInvoiceResponseBodyData) SetInvoiceApplyId(v int64) *ApplyInvoiceResponseBodyData {
	s.InvoiceApplyId = &v
	return s
}

type ApplyInvoiceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyInvoiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyInvoiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyInvoiceResponse) GoString() string {
	return s.String()
}

func (s *ApplyInvoiceResponse) SetHeaders(v map[string]*string) *ApplyInvoiceResponse {
	s.Headers = v
	return s
}

func (s *ApplyInvoiceResponse) SetStatusCode(v int32) *ApplyInvoiceResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyInvoiceResponse) SetBody(v *ApplyInvoiceResponseBody) *ApplyInvoiceResponse {
	s.Body = v
	return s
}

type CancelOrderRequest struct {
	// The ID of the order.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s CancelOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelOrderRequest) GoString() string {
	return s.String()
}

func (s *CancelOrderRequest) SetOrderId(v string) *CancelOrderRequest {
	s.OrderId = &v
	return s
}

func (s *CancelOrderRequest) SetOwnerId(v int64) *CancelOrderRequest {
	s.OwnerId = &v
	return s
}

type CancelOrderResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *CancelOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CancelOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelOrderResponseBody) GoString() string {
	return s.String()
}

func (s *CancelOrderResponseBody) SetCode(v string) *CancelOrderResponseBody {
	s.Code = &v
	return s
}

func (s *CancelOrderResponseBody) SetData(v *CancelOrderResponseBodyData) *CancelOrderResponseBody {
	s.Data = v
	return s
}

func (s *CancelOrderResponseBody) SetMessage(v string) *CancelOrderResponseBody {
	s.Message = &v
	return s
}

func (s *CancelOrderResponseBody) SetRequestId(v string) *CancelOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelOrderResponseBody) SetSuccess(v bool) *CancelOrderResponseBody {
	s.Success = &v
	return s
}

type CancelOrderResponseBodyData struct {
	// The ID of the host.
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s CancelOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CancelOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *CancelOrderResponseBodyData) SetHostId(v string) *CancelOrderResponseBodyData {
	s.HostId = &v
	return s
}

type CancelOrderResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelOrderResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelOrderResponse) GoString() string {
	return s.String()
}

func (s *CancelOrderResponse) SetHeaders(v map[string]*string) *CancelOrderResponse {
	s.Headers = v
	return s
}

func (s *CancelOrderResponse) SetStatusCode(v int32) *CancelOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelOrderResponse) SetBody(v *CancelOrderResponseBody) *CancelOrderResponse {
	s.Body = v
	return s
}

type ChangeResellerConsumeAmountRequest struct {
	// The type of the consumption amount adjustment. Valid values: increase: The consumption amount increases because new consumption occurs. decrease: The consumption amount decreases because funds are added to the account. This parameter is required.
	AdjustType *string `json:"AdjustType,omitempty" xml:"AdjustType,omitempty"`
	// The amount to be adjusted. Unit: CNY
	Amount *string `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The type of the business.
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// The type of the currency.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The extended field of a message.
	ExtendMap *string `json:"ExtendMap,omitempty" xml:"ExtendMap,omitempty"`
	// The ID of the primary key for external business. The ID is used for idempotence verification.
	OutBizId *string `json:"OutBizId,omitempty" xml:"OutBizId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The source of the request. Specify the system name for the parameter.
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s ChangeResellerConsumeAmountRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeResellerConsumeAmountRequest) GoString() string {
	return s.String()
}

func (s *ChangeResellerConsumeAmountRequest) SetAdjustType(v string) *ChangeResellerConsumeAmountRequest {
	s.AdjustType = &v
	return s
}

func (s *ChangeResellerConsumeAmountRequest) SetAmount(v string) *ChangeResellerConsumeAmountRequest {
	s.Amount = &v
	return s
}

func (s *ChangeResellerConsumeAmountRequest) SetBusinessType(v string) *ChangeResellerConsumeAmountRequest {
	s.BusinessType = &v
	return s
}

func (s *ChangeResellerConsumeAmountRequest) SetCurrency(v string) *ChangeResellerConsumeAmountRequest {
	s.Currency = &v
	return s
}

func (s *ChangeResellerConsumeAmountRequest) SetExtendMap(v string) *ChangeResellerConsumeAmountRequest {
	s.ExtendMap = &v
	return s
}

func (s *ChangeResellerConsumeAmountRequest) SetOutBizId(v string) *ChangeResellerConsumeAmountRequest {
	s.OutBizId = &v
	return s
}

func (s *ChangeResellerConsumeAmountRequest) SetOwnerId(v int64) *ChangeResellerConsumeAmountRequest {
	s.OwnerId = &v
	return s
}

func (s *ChangeResellerConsumeAmountRequest) SetSource(v string) *ChangeResellerConsumeAmountRequest {
	s.Source = &v
	return s
}

type ChangeResellerConsumeAmountResponseBody struct {
	// The error code returned if the call failed. For more information, see the "Error codes" section of the topic.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The consumption quota for the quota ledger after adjustment.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. A value of true indicates that the call is successful. A value of false indicates that the call failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ChangeResellerConsumeAmountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeResellerConsumeAmountResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeResellerConsumeAmountResponseBody) SetCode(v string) *ChangeResellerConsumeAmountResponseBody {
	s.Code = &v
	return s
}

func (s *ChangeResellerConsumeAmountResponseBody) SetData(v string) *ChangeResellerConsumeAmountResponseBody {
	s.Data = &v
	return s
}

func (s *ChangeResellerConsumeAmountResponseBody) SetMessage(v string) *ChangeResellerConsumeAmountResponseBody {
	s.Message = &v
	return s
}

func (s *ChangeResellerConsumeAmountResponseBody) SetRequestId(v string) *ChangeResellerConsumeAmountResponseBody {
	s.RequestId = &v
	return s
}

func (s *ChangeResellerConsumeAmountResponseBody) SetSuccess(v bool) *ChangeResellerConsumeAmountResponseBody {
	s.Success = &v
	return s
}

type ChangeResellerConsumeAmountResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ChangeResellerConsumeAmountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ChangeResellerConsumeAmountResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeResellerConsumeAmountResponse) GoString() string {
	return s.String()
}

func (s *ChangeResellerConsumeAmountResponse) SetHeaders(v map[string]*string) *ChangeResellerConsumeAmountResponse {
	s.Headers = v
	return s
}

func (s *ChangeResellerConsumeAmountResponse) SetStatusCode(v int32) *ChangeResellerConsumeAmountResponse {
	s.StatusCode = &v
	return s
}

func (s *ChangeResellerConsumeAmountResponse) SetBody(v *ChangeResellerConsumeAmountResponseBody) *ChangeResellerConsumeAmountResponse {
	s.Body = v
	return s
}

type ConfirmRelationRequest struct {
	// The ID of the Alibaba Cloud account that is used as the member.
	ChildUserId *int64 `json:"ChildUserId,omitempty" xml:"ChildUserId,omitempty"`
	// The operation to be performed to confirm the invitation. Valid values:
	//
	// *   child_agree: The member accepts the invitation.
	// *   child_disagree: The member rejects the invitation.
	// *   Canceled by the master account: The management account cancels the confirmation.
	ConfirmCode *string `json:"ConfirmCode,omitempty" xml:"ConfirmCode,omitempty"`
	// The ID of the Alibaba Cloud account that is used as the management account.
	ParentUserId *int64 `json:"ParentUserId,omitempty" xml:"ParentUserId,omitempty"`
	// The permissions that can be granted to the member. Valid values:
	//
	// *   SYNCHRONIZE_FINANCE_IDENTITY: allows the credit control identity to be shared with the member.
	// *   SYNCHRONIZE_FINANCE_DISCOUNT_POLICY_TO_TARGET: allows the discount policy to be shared with the member.
	// *   FORBID_WITHDRAW_CASH: does not allow the member to withdraw the balance.
	// *   FORBID_MANAGE_INVOICE: does not allow the member to manage invoices.
	// *   CHECK_FINANCE_INFO: requests to view information about the financial relationship.
	// *   MANAGE_TARGET_INVOICE: allows the member to manage invoices.
	// *   CHECK_TARGET_CONSUMPTION: allows the member to view the bills.
	PermissionCodes []*string `json:"PermissionCodes,omitempty" xml:"PermissionCodes,omitempty" type:"Repeated"`
	// The ID of the financial relationship. Set this parameter to the value of the RelationId response parameter returned by calling the QueryRelationList operation.
	RelationId *int64 `json:"RelationId,omitempty" xml:"RelationId,omitempty"`
	// The type of the financial relationship. Set the value to enterprise_group.
	RelationType *string `json:"RelationType,omitempty" xml:"RelationType,omitempty"`
	// The unique ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConfirmRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmRelationRequest) GoString() string {
	return s.String()
}

func (s *ConfirmRelationRequest) SetChildUserId(v int64) *ConfirmRelationRequest {
	s.ChildUserId = &v
	return s
}

func (s *ConfirmRelationRequest) SetConfirmCode(v string) *ConfirmRelationRequest {
	s.ConfirmCode = &v
	return s
}

func (s *ConfirmRelationRequest) SetParentUserId(v int64) *ConfirmRelationRequest {
	s.ParentUserId = &v
	return s
}

func (s *ConfirmRelationRequest) SetPermissionCodes(v []*string) *ConfirmRelationRequest {
	s.PermissionCodes = v
	return s
}

func (s *ConfirmRelationRequest) SetRelationId(v int64) *ConfirmRelationRequest {
	s.RelationId = &v
	return s
}

func (s *ConfirmRelationRequest) SetRelationType(v string) *ConfirmRelationRequest {
	s.RelationType = &v
	return s
}

func (s *ConfirmRelationRequest) SetRequestId(v string) *ConfirmRelationRequest {
	s.RequestId = &v
	return s
}

type ConfirmRelationResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *ConfirmRelationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The unique ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfirmRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfirmRelationResponseBody) GoString() string {
	return s.String()
}

func (s *ConfirmRelationResponseBody) SetCode(v string) *ConfirmRelationResponseBody {
	s.Code = &v
	return s
}

func (s *ConfirmRelationResponseBody) SetData(v *ConfirmRelationResponseBodyData) *ConfirmRelationResponseBody {
	s.Data = v
	return s
}

func (s *ConfirmRelationResponseBody) SetMessage(v string) *ConfirmRelationResponseBody {
	s.Message = &v
	return s
}

func (s *ConfirmRelationResponseBody) SetRequestId(v string) *ConfirmRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfirmRelationResponseBody) SetSuccess(v bool) *ConfirmRelationResponseBody {
	s.Success = &v
	return s
}

type ConfirmRelationResponseBodyData struct {
	// HostId
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s ConfirmRelationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ConfirmRelationResponseBodyData) GoString() string {
	return s.String()
}

func (s *ConfirmRelationResponseBodyData) SetHostId(v string) *ConfirmRelationResponseBodyData {
	s.HostId = &v
	return s
}

type ConfirmRelationResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ConfirmRelationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ConfirmRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmRelationResponse) GoString() string {
	return s.String()
}

func (s *ConfirmRelationResponse) SetHeaders(v map[string]*string) *ConfirmRelationResponse {
	s.Headers = v
	return s
}

func (s *ConfirmRelationResponse) SetStatusCode(v int32) *ConfirmRelationResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfirmRelationResponse) SetBody(v *ConfirmRelationResponseBody) *ConfirmRelationResponse {
	s.Body = v
	return s
}

type ConvertChargeTypeRequest struct {
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The subscription duration. Unit: months. This parameter is required if you switch the billing method to subscription. Valid values:
	//
	// *   1 to 9
	// *   12
	// *   24
	// *   36
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The code of the service to which the instance belongs.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service to which the instance belongs.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The billing method of the instance. Valid values:
	//
	// *   Subscription: subscription
	// *   PayAsYouGo: pay-as-you-go
	//
	// >  After the call is successful, the billing method of the instance is switched.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s ConvertChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ConvertChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *ConvertChargeTypeRequest) SetInstanceId(v string) *ConvertChargeTypeRequest {
	s.InstanceId = &v
	return s
}

func (s *ConvertChargeTypeRequest) SetOwnerId(v int64) *ConvertChargeTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *ConvertChargeTypeRequest) SetPeriod(v int32) *ConvertChargeTypeRequest {
	s.Period = &v
	return s
}

func (s *ConvertChargeTypeRequest) SetProductCode(v string) *ConvertChargeTypeRequest {
	s.ProductCode = &v
	return s
}

func (s *ConvertChargeTypeRequest) SetProductType(v string) *ConvertChargeTypeRequest {
	s.ProductType = &v
	return s
}

func (s *ConvertChargeTypeRequest) SetSubscriptionType(v string) *ConvertChargeTypeRequest {
	s.SubscriptionType = &v
	return s
}

type ConvertChargeTypeResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *ConvertChargeTypeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConvertChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConvertChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ConvertChargeTypeResponseBody) SetCode(v string) *ConvertChargeTypeResponseBody {
	s.Code = &v
	return s
}

func (s *ConvertChargeTypeResponseBody) SetData(v *ConvertChargeTypeResponseBodyData) *ConvertChargeTypeResponseBody {
	s.Data = v
	return s
}

func (s *ConvertChargeTypeResponseBody) SetMessage(v string) *ConvertChargeTypeResponseBody {
	s.Message = &v
	return s
}

func (s *ConvertChargeTypeResponseBody) SetRequestId(v string) *ConvertChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConvertChargeTypeResponseBody) SetSuccess(v bool) *ConvertChargeTypeResponseBody {
	s.Success = &v
	return s
}

type ConvertChargeTypeResponseBodyData struct {
	// The ID of the order.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ConvertChargeTypeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ConvertChargeTypeResponseBodyData) GoString() string {
	return s.String()
}

func (s *ConvertChargeTypeResponseBodyData) SetOrderId(v string) *ConvertChargeTypeResponseBodyData {
	s.OrderId = &v
	return s
}

type ConvertChargeTypeResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ConvertChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ConvertChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ConvertChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *ConvertChargeTypeResponse) SetHeaders(v map[string]*string) *ConvertChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *ConvertChargeTypeResponse) SetStatusCode(v int32) *ConvertChargeTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ConvertChargeTypeResponse) SetBody(v *ConvertChargeTypeResponseBody) *ConvertChargeTypeResponse {
	s.Body = v
	return s
}

type CreateAgAccountRequest struct {
	// The attribute of the account. To view the attribute of the account, use the account to log on to the Alibaba Cloud Management Console, move the pointer over the profile picture in the upper-right corner, and then click **Security Settings**.
	AccountAttr *string `json:"AccountAttr,omitempty" xml:"AccountAttr,omitempty"`
	// The name of the city.
	CityName *string `json:"CityName,omitempty" xml:"CityName,omitempty"`
	// The name of the enterprise.
	EnterpriseName *string `json:"EnterpriseName,omitempty" xml:"EnterpriseName,omitempty"`
	// The first name.
	FirstName *string `json:"FirstName,omitempty" xml:"FirstName,omitempty"`
	// The last name.
	//
	// The last name can be up to 64 characters in length.
	LastName *string `json:"LastName,omitempty" xml:"LastName,omitempty"`
	// The email address used to log on to the account.
	LoginEmail *string `json:"LoginEmail,omitempty" xml:"LoginEmail,omitempty"`
	// The country code.
	NationCode *string `json:"NationCode,omitempty" xml:"NationCode,omitempty"`
	// The zip code.
	Postcode *string `json:"Postcode,omitempty" xml:"Postcode,omitempty"`
	// The name of the province. This parameter is optional.
	ProvinceName *string `json:"ProvinceName,omitempty" xml:"ProvinceName,omitempty"`
}

func (s CreateAgAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAgAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateAgAccountRequest) SetAccountAttr(v string) *CreateAgAccountRequest {
	s.AccountAttr = &v
	return s
}

func (s *CreateAgAccountRequest) SetCityName(v string) *CreateAgAccountRequest {
	s.CityName = &v
	return s
}

func (s *CreateAgAccountRequest) SetEnterpriseName(v string) *CreateAgAccountRequest {
	s.EnterpriseName = &v
	return s
}

func (s *CreateAgAccountRequest) SetFirstName(v string) *CreateAgAccountRequest {
	s.FirstName = &v
	return s
}

func (s *CreateAgAccountRequest) SetLastName(v string) *CreateAgAccountRequest {
	s.LastName = &v
	return s
}

func (s *CreateAgAccountRequest) SetLoginEmail(v string) *CreateAgAccountRequest {
	s.LoginEmail = &v
	return s
}

func (s *CreateAgAccountRequest) SetNationCode(v string) *CreateAgAccountRequest {
	s.NationCode = &v
	return s
}

func (s *CreateAgAccountRequest) SetPostcode(v string) *CreateAgAccountRequest {
	s.Postcode = &v
	return s
}

func (s *CreateAgAccountRequest) SetProvinceName(v string) *CreateAgAccountRequest {
	s.ProvinceName = &v
	return s
}

type CreateAgAccountResponseBody struct {
	// The relationship between the account that is used to call the CreateAgAccount operation and the account that is created.
	AgRelationDto *CreateAgAccountResponseBodyAgRelationDto `json:"AgRelationDto,omitempty" xml:"AgRelationDto,omitempty" type:"Struct"`
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateAgAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAgAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAgAccountResponseBody) SetAgRelationDto(v *CreateAgAccountResponseBodyAgRelationDto) *CreateAgAccountResponseBody {
	s.AgRelationDto = v
	return s
}

func (s *CreateAgAccountResponseBody) SetCode(v string) *CreateAgAccountResponseBody {
	s.Code = &v
	return s
}

func (s *CreateAgAccountResponseBody) SetMessage(v string) *CreateAgAccountResponseBody {
	s.Message = &v
	return s
}

func (s *CreateAgAccountResponseBody) SetRequestId(v string) *CreateAgAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAgAccountResponseBody) SetSuccess(v bool) *CreateAgAccountResponseBody {
	s.Success = &v
	return s
}

type CreateAgAccountResponseBodyAgRelationDto struct {
	// The ID of the account that is used to call the CreateAgAccount operation.
	Mpk *string `json:"Mpk,omitempty" xml:"Mpk,omitempty"`
	// The ID of the account that is created.
	Pk *string `json:"Pk,omitempty" xml:"Pk,omitempty"`
	// The role of the account that is created.
	RamAdminRoleName *string `json:"RamAdminRoleName,omitempty" xml:"RamAdminRoleName,omitempty"`
	// The type of the relationship.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateAgAccountResponseBodyAgRelationDto) String() string {
	return tea.Prettify(s)
}

func (s CreateAgAccountResponseBodyAgRelationDto) GoString() string {
	return s.String()
}

func (s *CreateAgAccountResponseBodyAgRelationDto) SetMpk(v string) *CreateAgAccountResponseBodyAgRelationDto {
	s.Mpk = &v
	return s
}

func (s *CreateAgAccountResponseBodyAgRelationDto) SetPk(v string) *CreateAgAccountResponseBodyAgRelationDto {
	s.Pk = &v
	return s
}

func (s *CreateAgAccountResponseBodyAgRelationDto) SetRamAdminRoleName(v string) *CreateAgAccountResponseBodyAgRelationDto {
	s.RamAdminRoleName = &v
	return s
}

func (s *CreateAgAccountResponseBodyAgRelationDto) SetType(v string) *CreateAgAccountResponseBodyAgRelationDto {
	s.Type = &v
	return s
}

type CreateAgAccountResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAgAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAgAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAgAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateAgAccountResponse) SetHeaders(v map[string]*string) *CreateAgAccountResponse {
	s.Headers = v
	return s
}

func (s *CreateAgAccountResponse) SetStatusCode(v int32) *CreateAgAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAgAccountResponse) SetBody(v *CreateAgAccountResponseBody) *CreateAgAccountResponse {
	s.Body = v
	return s
}

type CreateCostUnitRequest struct {
	// The list of cost centers.
	UnitEntityList []*CreateCostUnitRequestUnitEntityList `json:"UnitEntityList,omitempty" xml:"UnitEntityList,omitempty" type:"Repeated"`
}

func (s CreateCostUnitRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCostUnitRequest) GoString() string {
	return s.String()
}

func (s *CreateCostUnitRequest) SetUnitEntityList(v []*CreateCostUnitRequestUnitEntityList) *CreateCostUnitRequest {
	s.UnitEntityList = v
	return s
}

type CreateCostUnitRequestUnitEntityList struct {
	// The user ID of the owner of the cost center.
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// The ID of the parent cost center. A value of -1 indicates the root cost center.
	ParentUnitId *int64 `json:"ParentUnitId,omitempty" xml:"ParentUnitId,omitempty"`
	// The name of the cost center.
	UnitName *string `json:"UnitName,omitempty" xml:"UnitName,omitempty"`
}

func (s CreateCostUnitRequestUnitEntityList) String() string {
	return tea.Prettify(s)
}

func (s CreateCostUnitRequestUnitEntityList) GoString() string {
	return s.String()
}

func (s *CreateCostUnitRequestUnitEntityList) SetOwnerUid(v int64) *CreateCostUnitRequestUnitEntityList {
	s.OwnerUid = &v
	return s
}

func (s *CreateCostUnitRequestUnitEntityList) SetParentUnitId(v int64) *CreateCostUnitRequestUnitEntityList {
	s.ParentUnitId = &v
	return s
}

func (s *CreateCostUnitRequestUnitEntityList) SetUnitName(v string) *CreateCostUnitRequestUnitEntityList {
	s.UnitName = &v
	return s
}

type CreateCostUnitResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *CreateCostUnitResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCostUnitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCostUnitResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCostUnitResponseBody) SetCode(v string) *CreateCostUnitResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCostUnitResponseBody) SetData(v *CreateCostUnitResponseBodyData) *CreateCostUnitResponseBody {
	s.Data = v
	return s
}

func (s *CreateCostUnitResponseBody) SetMessage(v string) *CreateCostUnitResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCostUnitResponseBody) SetRequestId(v string) *CreateCostUnitResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCostUnitResponseBody) SetSuccess(v bool) *CreateCostUnitResponseBody {
	s.Success = &v
	return s
}

type CreateCostUnitResponseBodyData struct {
	// The list of cost center entities.
	CostUnitDtoList []*CreateCostUnitResponseBodyDataCostUnitDtoList `json:"CostUnitDtoList,omitempty" xml:"CostUnitDtoList,omitempty" type:"Repeated"`
}

func (s CreateCostUnitResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateCostUnitResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateCostUnitResponseBodyData) SetCostUnitDtoList(v []*CreateCostUnitResponseBodyDataCostUnitDtoList) *CreateCostUnitResponseBodyData {
	s.CostUnitDtoList = v
	return s
}

type CreateCostUnitResponseBodyDataCostUnitDtoList struct {
	// The user ID of the owner of the cost center.
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// The ID of the parent cost center. A value of -1 indicates the root cost center.
	ParentUnitId *int64 `json:"ParentUnitId,omitempty" xml:"ParentUnitId,omitempty"`
	// The ID of the cost center.
	UnitId *int64 `json:"UnitId,omitempty" xml:"UnitId,omitempty"`
	// The name of the cost center.
	UnitName *string `json:"UnitName,omitempty" xml:"UnitName,omitempty"`
}

func (s CreateCostUnitResponseBodyDataCostUnitDtoList) String() string {
	return tea.Prettify(s)
}

func (s CreateCostUnitResponseBodyDataCostUnitDtoList) GoString() string {
	return s.String()
}

func (s *CreateCostUnitResponseBodyDataCostUnitDtoList) SetOwnerUid(v int64) *CreateCostUnitResponseBodyDataCostUnitDtoList {
	s.OwnerUid = &v
	return s
}

func (s *CreateCostUnitResponseBodyDataCostUnitDtoList) SetParentUnitId(v int64) *CreateCostUnitResponseBodyDataCostUnitDtoList {
	s.ParentUnitId = &v
	return s
}

func (s *CreateCostUnitResponseBodyDataCostUnitDtoList) SetUnitId(v int64) *CreateCostUnitResponseBodyDataCostUnitDtoList {
	s.UnitId = &v
	return s
}

func (s *CreateCostUnitResponseBodyDataCostUnitDtoList) SetUnitName(v string) *CreateCostUnitResponseBodyDataCostUnitDtoList {
	s.UnitName = &v
	return s
}

type CreateCostUnitResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCostUnitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCostUnitResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCostUnitResponse) GoString() string {
	return s.String()
}

func (s *CreateCostUnitResponse) SetHeaders(v map[string]*string) *CreateCostUnitResponse {
	s.Headers = v
	return s
}

func (s *CreateCostUnitResponse) SetStatusCode(v int32) *CreateCostUnitResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCostUnitResponse) SetBody(v *CreateCostUnitResponseBody) *CreateCostUnitResponse {
	s.Body = v
	return s
}

type CreateInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. The server checks whether a request that uses the same client token has been received. If a request that uses the same client token has been received, the server returns the same request result as the previous request.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The logistics address of this order. This parameter is generally valid for physical orders.
	Logistics *string `json:"Logistics,omitempty" xml:"Logistics,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The details of the modules.
	Parameter []*CreateInstanceRequestParameter `json:"Parameter,omitempty" xml:"Parameter,omitempty" type:"Repeated"`
	// The subscription duration. Unit: month. The value must be an integral multiple of 12.
	//
	// >  This parameter is required if you create a subscription instance.
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The code of the service to which the instance belongs. You can query the service code by calling the **QueryProductList** operation or viewing **Codes of Alibaba Cloud Services**.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The auto-renewal period. Unit: month.
	//
	// >  This parameter is required if the **RenewalStatus** parameter is set to **AutoRenewal**.
	RenewPeriod *int32 `json:"RenewPeriod,omitempty" xml:"RenewPeriod,omitempty"`
	// The renewal method. Valid values:
	//
	// *   AutoRenewal: The instance is automatically renewed.
	// *   ManualRenewal: The instance is manually renewed.
	//
	// Default value: ManualRenewal.
	RenewalStatus *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method.
	// *   PayAsYouGo: the pay-as-you-go billing method.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetClientToken(v string) *CreateInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateInstanceRequest) SetLogistics(v string) *CreateInstanceRequest {
	s.Logistics = &v
	return s
}

func (s *CreateInstanceRequest) SetOwnerId(v int64) *CreateInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateInstanceRequest) SetParameter(v []*CreateInstanceRequestParameter) *CreateInstanceRequest {
	s.Parameter = v
	return s
}

func (s *CreateInstanceRequest) SetPeriod(v int32) *CreateInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateInstanceRequest) SetProductCode(v string) *CreateInstanceRequest {
	s.ProductCode = &v
	return s
}

func (s *CreateInstanceRequest) SetProductType(v string) *CreateInstanceRequest {
	s.ProductType = &v
	return s
}

func (s *CreateInstanceRequest) SetRenewPeriod(v int32) *CreateInstanceRequest {
	s.RenewPeriod = &v
	return s
}

func (s *CreateInstanceRequest) SetRenewalStatus(v string) *CreateInstanceRequest {
	s.RenewalStatus = &v
	return s
}

func (s *CreateInstanceRequest) SetSubscriptionType(v string) *CreateInstanceRequest {
	s.SubscriptionType = &v
	return s
}

type CreateInstanceRequestParameter struct {
	// The code property of the Nth module. Value of N: 1 to 100. If multiple module property parameters are involved, concatenate multiple parameters based on the value of N in sequence.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The value property of the Nth module. Value of N: 1 to 100.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateInstanceRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestParameter) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestParameter) SetCode(v string) *CreateInstanceRequestParameter {
	s.Code = &v
	return s
}

func (s *CreateInstanceRequestParameter) SetValue(v string) *CreateInstanceRequestParameter {
	s.Value = &v
	return s
}

type CreateInstanceResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *CreateInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBody) SetCode(v string) *CreateInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateInstanceResponseBody) SetData(v *CreateInstanceResponseBodyData) *CreateInstanceResponseBody {
	s.Data = v
	return s
}

func (s *CreateInstanceResponseBody) SetMessage(v string) *CreateInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateInstanceResponseBody) SetRequestId(v string) *CreateInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInstanceResponseBody) SetSuccess(v bool) *CreateInstanceResponseBody {
	s.Success = &v
	return s
}

type CreateInstanceResponseBodyData struct {
	// The ID of the instance for which the order was created.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the order that was created.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s CreateInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyData) SetInstanceId(v string) *CreateInstanceResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceResponseBodyData) SetOrderId(v string) *CreateInstanceResponseBodyData {
	s.OrderId = &v
	return s
}

type CreateInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetHeaders(v map[string]*string) *CreateInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceResponse) SetStatusCode(v int32) *CreateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceResponse) SetBody(v *CreateInstanceResponseBody) *CreateInstanceResponse {
	s.Body = v
	return s
}

type CreateResellerUserQuotaRequest struct {
	Amount   *string `json:"Amount,omitempty" xml:"Amount,omitempty"`
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	OutBizId *string `json:"OutBizId,omitempty" xml:"OutBizId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s CreateResellerUserQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResellerUserQuotaRequest) GoString() string {
	return s.String()
}

func (s *CreateResellerUserQuotaRequest) SetAmount(v string) *CreateResellerUserQuotaRequest {
	s.Amount = &v
	return s
}

func (s *CreateResellerUserQuotaRequest) SetCurrency(v string) *CreateResellerUserQuotaRequest {
	s.Currency = &v
	return s
}

func (s *CreateResellerUserQuotaRequest) SetOutBizId(v string) *CreateResellerUserQuotaRequest {
	s.OutBizId = &v
	return s
}

func (s *CreateResellerUserQuotaRequest) SetOwnerId(v int64) *CreateResellerUserQuotaRequest {
	s.OwnerId = &v
	return s
}

type CreateResellerUserQuotaResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateResellerUserQuotaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResellerUserQuotaResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResellerUserQuotaResponseBody) SetCode(v string) *CreateResellerUserQuotaResponseBody {
	s.Code = &v
	return s
}

func (s *CreateResellerUserQuotaResponseBody) SetData(v bool) *CreateResellerUserQuotaResponseBody {
	s.Data = &v
	return s
}

func (s *CreateResellerUserQuotaResponseBody) SetMessage(v string) *CreateResellerUserQuotaResponseBody {
	s.Message = &v
	return s
}

func (s *CreateResellerUserQuotaResponseBody) SetRequestId(v string) *CreateResellerUserQuotaResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateResellerUserQuotaResponseBody) SetSuccess(v bool) *CreateResellerUserQuotaResponseBody {
	s.Success = &v
	return s
}

type CreateResellerUserQuotaResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateResellerUserQuotaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateResellerUserQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResellerUserQuotaResponse) GoString() string {
	return s.String()
}

func (s *CreateResellerUserQuotaResponse) SetHeaders(v map[string]*string) *CreateResellerUserQuotaResponse {
	s.Headers = v
	return s
}

func (s *CreateResellerUserQuotaResponse) SetStatusCode(v int32) *CreateResellerUserQuotaResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateResellerUserQuotaResponse) SetBody(v *CreateResellerUserQuotaResponseBody) *CreateResellerUserQuotaResponse {
	s.Body = v
	return s
}

type CreateResourcePackageRequest struct {
	// The validity period of the resource plan.
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The time when the resource plan takes effect. If you leave this parameter empty, the resource plan immediately takes effect by default.
	//
	// Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EffectiveDate *string `json:"EffectiveDate,omitempty" xml:"EffectiveDate,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The type of the resource plan. Set this parameter to the code of the **resource plan** returned by calling the **DescribeResourcePackageProduct** operation.
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// The unit of the validity period of the resource plan. Valid values:
	//
	// *   Month
	// *   Year
	//
	// Default value: Month.
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	// The code of the service. You can query the code by calling the **QueryProductList** operation or viewing **Codes of Alibaba Cloud services**.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The specifications of the resource plan. Set this parameter to the value of the **specifications** returned by calling the **DescribeResourcePackageProduct** operation.
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
}

func (s CreateResourcePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePackageRequest) GoString() string {
	return s.String()
}

func (s *CreateResourcePackageRequest) SetDuration(v int32) *CreateResourcePackageRequest {
	s.Duration = &v
	return s
}

func (s *CreateResourcePackageRequest) SetEffectiveDate(v string) *CreateResourcePackageRequest {
	s.EffectiveDate = &v
	return s
}

func (s *CreateResourcePackageRequest) SetOwnerId(v int64) *CreateResourcePackageRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateResourcePackageRequest) SetPackageType(v string) *CreateResourcePackageRequest {
	s.PackageType = &v
	return s
}

func (s *CreateResourcePackageRequest) SetPricingCycle(v string) *CreateResourcePackageRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateResourcePackageRequest) SetProductCode(v string) *CreateResourcePackageRequest {
	s.ProductCode = &v
	return s
}

func (s *CreateResourcePackageRequest) SetSpecification(v string) *CreateResourcePackageRequest {
	s.Specification = &v
	return s
}

type CreateResourcePackageResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *CreateResourcePackageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the order.
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateResourcePackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePackageResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResourcePackageResponseBody) SetCode(v string) *CreateResourcePackageResponseBody {
	s.Code = &v
	return s
}

func (s *CreateResourcePackageResponseBody) SetData(v *CreateResourcePackageResponseBodyData) *CreateResourcePackageResponseBody {
	s.Data = v
	return s
}

func (s *CreateResourcePackageResponseBody) SetMessage(v string) *CreateResourcePackageResponseBody {
	s.Message = &v
	return s
}

func (s *CreateResourcePackageResponseBody) SetOrderId(v int64) *CreateResourcePackageResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateResourcePackageResponseBody) SetRequestId(v string) *CreateResourcePackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateResourcePackageResponseBody) SetSuccess(v bool) *CreateResourcePackageResponseBody {
	s.Success = &v
	return s
}

type CreateResourcePackageResponseBodyData struct {
	// The ID of the resource plan.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the order.
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s CreateResourcePackageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePackageResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateResourcePackageResponseBodyData) SetInstanceId(v string) *CreateResourcePackageResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *CreateResourcePackageResponseBodyData) SetOrderId(v int64) *CreateResourcePackageResponseBodyData {
	s.OrderId = &v
	return s
}

type CreateResourcePackageResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateResourcePackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateResourcePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePackageResponse) GoString() string {
	return s.String()
}

func (s *CreateResourcePackageResponse) SetHeaders(v map[string]*string) *CreateResourcePackageResponse {
	s.Headers = v
	return s
}

func (s *CreateResourcePackageResponse) SetStatusCode(v int32) *CreateResourcePackageResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateResourcePackageResponse) SetBody(v *CreateResourcePackageResponseBody) *CreateResourcePackageResponse {
	s.Body = v
	return s
}

type CreateSavingsPlansInstanceRequest struct {
	// The code of the service.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The service duration. This parameter is used together with the PricingCycle parameter.
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The time when the savings plan takes effect. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EffectiveDate *string            `json:"EffectiveDate,omitempty" xml:"EffectiveDate,omitempty"`
	ExtendMap     map[string]*string `json:"ExtendMap,omitempty" xml:"ExtendMap,omitempty"`
	// The payment mode. Valid values:
	//
	// *   total: all upfront
	// *   half: partial upfront
	// *   zero: no upfront
	PayMode *string `json:"PayMode,omitempty" xml:"PayMode,omitempty"`
	// The contracted amount. unit: CNY
	PoolValue *string `json:"PoolValue,omitempty" xml:"PoolValue,omitempty"`
	// The unit of the service duration. This parameter is used together with the During parameter. Valid values:
	//
	// *   Year
	// *   Month
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	// The ID of the region in which you create the savings plan. You must specify this parameter if the Type parameter is not set to universal.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The specification type. This parameter is used together with the Specification parameter. You must specify this parameter if the Type parameter is not set to universal. Valid values:
	//
	// *   group: specification group
	// *   family: specification family
	SpecType *string `json:"SpecType,omitempty" xml:"SpecType,omitempty"`
	// The specifications of the savings plan. This parameter is used together with the SpecType parameter.
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// The type of the savings plan. Valid values:
	//
	// *   universal: general-purpose type
	// *   ecs: ECS compute type
	// *   elasticy: elastic type
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateSavingsPlansInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSavingsPlansInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateSavingsPlansInstanceRequest) SetCommodityCode(v string) *CreateSavingsPlansInstanceRequest {
	s.CommodityCode = &v
	return s
}

func (s *CreateSavingsPlansInstanceRequest) SetDuration(v string) *CreateSavingsPlansInstanceRequest {
	s.Duration = &v
	return s
}

func (s *CreateSavingsPlansInstanceRequest) SetEffectiveDate(v string) *CreateSavingsPlansInstanceRequest {
	s.EffectiveDate = &v
	return s
}

func (s *CreateSavingsPlansInstanceRequest) SetExtendMap(v map[string]*string) *CreateSavingsPlansInstanceRequest {
	s.ExtendMap = v
	return s
}

func (s *CreateSavingsPlansInstanceRequest) SetPayMode(v string) *CreateSavingsPlansInstanceRequest {
	s.PayMode = &v
	return s
}

func (s *CreateSavingsPlansInstanceRequest) SetPoolValue(v string) *CreateSavingsPlansInstanceRequest {
	s.PoolValue = &v
	return s
}

func (s *CreateSavingsPlansInstanceRequest) SetPricingCycle(v string) *CreateSavingsPlansInstanceRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateSavingsPlansInstanceRequest) SetRegion(v string) *CreateSavingsPlansInstanceRequest {
	s.Region = &v
	return s
}

func (s *CreateSavingsPlansInstanceRequest) SetSpecType(v string) *CreateSavingsPlansInstanceRequest {
	s.SpecType = &v
	return s
}

func (s *CreateSavingsPlansInstanceRequest) SetSpecification(v string) *CreateSavingsPlansInstanceRequest {
	s.Specification = &v
	return s
}

func (s *CreateSavingsPlansInstanceRequest) SetType(v string) *CreateSavingsPlansInstanceRequest {
	s.Type = &v
	return s
}

type CreateSavingsPlansInstanceShrinkRequest struct {
	// The code of the service.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The service duration. This parameter is used together with the PricingCycle parameter.
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The time when the savings plan takes effect. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EffectiveDate   *string `json:"EffectiveDate,omitempty" xml:"EffectiveDate,omitempty"`
	ExtendMapShrink *string `json:"ExtendMap,omitempty" xml:"ExtendMap,omitempty"`
	// The payment mode. Valid values:
	//
	// *   total: all upfront
	// *   half: partial upfront
	// *   zero: no upfront
	PayMode *string `json:"PayMode,omitempty" xml:"PayMode,omitempty"`
	// The contracted amount. unit: CNY
	PoolValue *string `json:"PoolValue,omitempty" xml:"PoolValue,omitempty"`
	// The unit of the service duration. This parameter is used together with the During parameter. Valid values:
	//
	// *   Year
	// *   Month
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	// The ID of the region in which you create the savings plan. You must specify this parameter if the Type parameter is not set to universal.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The specification type. This parameter is used together with the Specification parameter. You must specify this parameter if the Type parameter is not set to universal. Valid values:
	//
	// *   group: specification group
	// *   family: specification family
	SpecType *string `json:"SpecType,omitempty" xml:"SpecType,omitempty"`
	// The specifications of the savings plan. This parameter is used together with the SpecType parameter.
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// The type of the savings plan. Valid values:
	//
	// *   universal: general-purpose type
	// *   ecs: ECS compute type
	// *   elasticy: elastic type
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateSavingsPlansInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSavingsPlansInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetCommodityCode(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.CommodityCode = &v
	return s
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetDuration(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.Duration = &v
	return s
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetEffectiveDate(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.EffectiveDate = &v
	return s
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetExtendMapShrink(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.ExtendMapShrink = &v
	return s
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetPayMode(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.PayMode = &v
	return s
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetPoolValue(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.PoolValue = &v
	return s
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetPricingCycle(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetRegion(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.Region = &v
	return s
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetSpecType(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.SpecType = &v
	return s
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetSpecification(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.Specification = &v
	return s
}

func (s *CreateSavingsPlansInstanceShrinkRequest) SetType(v string) *CreateSavingsPlansInstanceShrinkRequest {
	s.Type = &v
	return s
}

type CreateSavingsPlansInstanceResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *CreateSavingsPlansInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSavingsPlansInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSavingsPlansInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSavingsPlansInstanceResponseBody) SetCode(v string) *CreateSavingsPlansInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSavingsPlansInstanceResponseBody) SetData(v *CreateSavingsPlansInstanceResponseBodyData) *CreateSavingsPlansInstanceResponseBody {
	s.Data = v
	return s
}

func (s *CreateSavingsPlansInstanceResponseBody) SetMessage(v string) *CreateSavingsPlansInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSavingsPlansInstanceResponseBody) SetRequestId(v string) *CreateSavingsPlansInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSavingsPlansInstanceResponseBody) SetSuccess(v bool) *CreateSavingsPlansInstanceResponseBody {
	s.Success = &v
	return s
}

type CreateSavingsPlansInstanceResponseBodyData struct {
	// The ID of the order.
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s CreateSavingsPlansInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateSavingsPlansInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateSavingsPlansInstanceResponseBodyData) SetOrderId(v int64) *CreateSavingsPlansInstanceResponseBodyData {
	s.OrderId = &v
	return s
}

type CreateSavingsPlansInstanceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSavingsPlansInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSavingsPlansInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSavingsPlansInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateSavingsPlansInstanceResponse) SetHeaders(v map[string]*string) *CreateSavingsPlansInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateSavingsPlansInstanceResponse) SetStatusCode(v int32) *CreateSavingsPlansInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSavingsPlansInstanceResponse) SetBody(v *CreateSavingsPlansInstanceResponseBody) *CreateSavingsPlansInstanceResponse {
	s.Body = v
	return s
}

type DeleteCostUnitRequest struct {
	// The user ID of the cost center owner.
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// The ID of the cost center. A value of -1 indicates the root cost center.
	UnitId *int64 `json:"UnitId,omitempty" xml:"UnitId,omitempty"`
}

func (s DeleteCostUnitRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCostUnitRequest) GoString() string {
	return s.String()
}

func (s *DeleteCostUnitRequest) SetOwnerUid(v int64) *DeleteCostUnitRequest {
	s.OwnerUid = &v
	return s
}

func (s *DeleteCostUnitRequest) SetUnitId(v int64) *DeleteCostUnitRequest {
	s.UnitId = &v
	return s
}

type DeleteCostUnitResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DeleteCostUnitResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCostUnitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCostUnitResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCostUnitResponseBody) SetCode(v string) *DeleteCostUnitResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCostUnitResponseBody) SetData(v *DeleteCostUnitResponseBodyData) *DeleteCostUnitResponseBody {
	s.Data = v
	return s
}

func (s *DeleteCostUnitResponseBody) SetMessage(v string) *DeleteCostUnitResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCostUnitResponseBody) SetRequestId(v string) *DeleteCostUnitResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCostUnitResponseBody) SetSuccess(v bool) *DeleteCostUnitResponseBody {
	s.Success = &v
	return s
}

type DeleteCostUnitResponseBodyData struct {
	// Indicates whether the call is complete.
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The user ID of the cost center owner.
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// The ID of the cost center.
	UnitId *int64 `json:"UnitId,omitempty" xml:"UnitId,omitempty"`
}

func (s DeleteCostUnitResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteCostUnitResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteCostUnitResponseBodyData) SetIsSuccess(v bool) *DeleteCostUnitResponseBodyData {
	s.IsSuccess = &v
	return s
}

func (s *DeleteCostUnitResponseBodyData) SetOwnerUid(v int64) *DeleteCostUnitResponseBodyData {
	s.OwnerUid = &v
	return s
}

func (s *DeleteCostUnitResponseBodyData) SetUnitId(v int64) *DeleteCostUnitResponseBodyData {
	s.UnitId = &v
	return s
}

type DeleteCostUnitResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCostUnitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCostUnitResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCostUnitResponse) GoString() string {
	return s.String()
}

func (s *DeleteCostUnitResponse) SetHeaders(v map[string]*string) *DeleteCostUnitResponse {
	s.Headers = v
	return s
}

func (s *DeleteCostUnitResponse) SetStatusCode(v int32) *DeleteCostUnitResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCostUnitResponse) SetBody(v *DeleteCostUnitResponseBody) *DeleteCostUnitResponse {
	s.Body = v
	return s
}

type DescribeCostBudgetsSummaryRequest struct {
	// The name of the budget. Fuzzy match is supported.
	BudgetName *string `json:"BudgetName,omitempty" xml:"BudgetName,omitempty"`
	// The status of the budget. Valid values: overdue and notOverdue. A value of overdue specifies to filter expired budgets. A value of notOverdue specifies to filter budgets that do not expire. By default, if you do not specify this parameter, information about all budgets is to be returned.
	BudgetStatus *string `json:"BudgetStatus,omitempty" xml:"BudgetStatus,omitempty"`
	// The type of the budget. Valid values: cost, byquantity, and asset. A value of cost specifies to filter expense budgets. A value of byquantity specifies to filter budgets calculated based on the resource usage. A value of asset specifies to filter usage or coverage budgets. By default, information about all budgets is returned if you do not specify this parameter.
	BudgetType *string `json:"BudgetType,omitempty" xml:"BudgetType,omitempty"`
	// The number of entries to return on each page. Default value: 10. Maximum value: 10. Minimum value: 1.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The position in which the query starts. You must set this parameter to null or the token that is obtained from the previous query. Otherwise, an error is returned. If you set the NextToken parameter to null, the query starts from the beginning. The default value is null.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
}

func (s DescribeCostBudgetsSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCostBudgetsSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeCostBudgetsSummaryRequest) SetBudgetName(v string) *DescribeCostBudgetsSummaryRequest {
	s.BudgetName = &v
	return s
}

func (s *DescribeCostBudgetsSummaryRequest) SetBudgetStatus(v string) *DescribeCostBudgetsSummaryRequest {
	s.BudgetStatus = &v
	return s
}

func (s *DescribeCostBudgetsSummaryRequest) SetBudgetType(v string) *DescribeCostBudgetsSummaryRequest {
	s.BudgetType = &v
	return s
}

func (s *DescribeCostBudgetsSummaryRequest) SetMaxResults(v int32) *DescribeCostBudgetsSummaryRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeCostBudgetsSummaryRequest) SetNextToken(v string) *DescribeCostBudgetsSummaryRequest {
	s.NextToken = &v
	return s
}

type DescribeCostBudgetsSummaryResponseBody struct {
	// The HTTP status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data that is returned.
	Data *DescribeCostBudgetsSummaryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCostBudgetsSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCostBudgetsSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCostBudgetsSummaryResponseBody) SetCode(v string) *DescribeCostBudgetsSummaryResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBody) SetData(v *DescribeCostBudgetsSummaryResponseBodyData) *DescribeCostBudgetsSummaryResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBody) SetMessage(v string) *DescribeCostBudgetsSummaryResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBody) SetRequestId(v string) *DescribeCostBudgetsSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBody) SetSuccess(v bool) *DescribeCostBudgetsSummaryResponseBody {
	s.Success = &v
	return s
}

type DescribeCostBudgetsSummaryResponseBodyData struct {
	// The site of the host.
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The data that is returned.
	Items []*DescribeCostBudgetsSummaryResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The maximum number of entries that are returned.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used to retrieve the next page
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of entries that are returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCostBudgetsSummaryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCostBudgetsSummaryResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCostBudgetsSummaryResponseBodyData) SetHostId(v string) *DescribeCostBudgetsSummaryResponseBodyData {
	s.HostId = &v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBodyData) SetItems(v []*DescribeCostBudgetsSummaryResponseBodyDataItems) *DescribeCostBudgetsSummaryResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBodyData) SetMaxResults(v int32) *DescribeCostBudgetsSummaryResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBodyData) SetNextToken(v string) *DescribeCostBudgetsSummaryResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBodyData) SetTotalCount(v int32) *DescribeCostBudgetsSummaryResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeCostBudgetsSummaryResponseBodyDataItems struct {
	// The information about the budget. The BudgetCycleType parameter indicates the cycle of the budget. Valid values: daily, monthly, quarterly, and yearly. The TotalBudgetAmount parameter indicates the total budget. The BudgetMemo parameter indicates the remarks of the budget.
	Budget map[string]interface{} `json:"Budget,omitempty" xml:"Budget,omitempty"`
	// The name of the budget.
	BudgetName *string `json:"BudgetName,omitempty" xml:"BudgetName,omitempty"`
	// The status of the budget.
	BudgetStatus *string `json:"BudgetStatus,omitempty" xml:"BudgetStatus,omitempty"`
	// The type of the budget.
	BudgetType *string `json:"BudgetType,omitempty" xml:"BudgetType,omitempty"`
	// The information about the estimate-to-actual analysis. The ActualConsumeSum parameter indicates the accumulated actual value. The ActualAddForecastedAmount parameter indicates the sum of accumulated actual value and predicted value. If the BudgetType parameter is set to cost, the sum of actual value and predicted value includes the actual cost incurred from the budget start date to the current date and the predicted cost from the current date to the budget end date. If the BudgetType parameter is set to asset, the sum of actual value and predicted value includes the actual usage or coverage from the budget start date to the budget end date. If the budget end date minus the current date is more than one year, the part that exceeds one year is not included. The ActualAndBudgetComparison parameter indicates the comparison between the actual value and the predicted value. The value of the ActualAndBudgetComparison parameter is calculated based on the following formula: Accumulated actual value/Total budget × 100%.
	CalculatedValues map[string]interface{} `json:"CalculatedValues,omitempty" xml:"CalculatedValues,omitempty"`
	// The information about the billing cycle. The ConsumePeriodBegin parameter indicates the start date of the budget. The ConsumePeriodEnd parameter indicates the end date of the budget.
	ConsumePeriod map[string]interface{} `json:"ConsumePeriod,omitempty" xml:"ConsumePeriod,omitempty"`
}

func (s DescribeCostBudgetsSummaryResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCostBudgetsSummaryResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeCostBudgetsSummaryResponseBodyDataItems) SetBudget(v map[string]interface{}) *DescribeCostBudgetsSummaryResponseBodyDataItems {
	s.Budget = v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBodyDataItems) SetBudgetName(v string) *DescribeCostBudgetsSummaryResponseBodyDataItems {
	s.BudgetName = &v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBodyDataItems) SetBudgetStatus(v string) *DescribeCostBudgetsSummaryResponseBodyDataItems {
	s.BudgetStatus = &v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBodyDataItems) SetBudgetType(v string) *DescribeCostBudgetsSummaryResponseBodyDataItems {
	s.BudgetType = &v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBodyDataItems) SetCalculatedValues(v map[string]interface{}) *DescribeCostBudgetsSummaryResponseBodyDataItems {
	s.CalculatedValues = v
	return s
}

func (s *DescribeCostBudgetsSummaryResponseBodyDataItems) SetConsumePeriod(v map[string]interface{}) *DescribeCostBudgetsSummaryResponseBodyDataItems {
	s.ConsumePeriod = v
	return s
}

type DescribeCostBudgetsSummaryResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCostBudgetsSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCostBudgetsSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCostBudgetsSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeCostBudgetsSummaryResponse) SetHeaders(v map[string]*string) *DescribeCostBudgetsSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeCostBudgetsSummaryResponse) SetStatusCode(v int32) *DescribeCostBudgetsSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCostBudgetsSummaryResponse) SetBody(v *DescribeCostBudgetsSummaryResponseBody) *DescribeCostBudgetsSummaryResponse {
	s.Body = v
	return s
}

type DescribeInstanceAmortizedCostByAmortizationPeriodRequest struct {
	// The ID of the member to which the bill belongs. The member ID is used to filter bills. If you specify a value for this parameter, you can query the bills of the specified member. If you leave this parameter empty, the bills of the current account and all members of the current account are queried. You can specify a maximum of 10 IDs.
	BillOwnerIdList []*string `json:"BillOwnerIdList,omitempty" xml:"BillOwnerIdList,omitempty" type:"Repeated"`
	// The ID of the member that needs to settle the bill. The member ID is used to filter bills. If you specify a value for this parameter, you can query the bills of the specified member account. If you leave this parameter empty, the bills of the current account and all members of the current account are queried by default. You can specify a maximum of 10 IDs.
	BillUserIdList []*string `json:"BillUserIdList,omitempty" xml:"BillUserIdList,omitempty" type:"Repeated"`
	// The allocation month. Format: YYYY-MM.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The billing cycle that is used to filter bills. You can specify a maximum of 10 billing cycles.
	ConsumePeriodFilter []*string `json:"ConsumePeriodFilter,omitempty" xml:"ConsumePeriodFilter,omitempty" type:"Repeated"`
	// The code of the cost center.
	CostUnitCode *string `json:"CostUnitCode,omitempty" xml:"CostUnitCode,omitempty"`
	// The instance ID that is used to filter bills. You can specify multiple instance IDs to query bills of multiple instances. If you leave this parameter empty, the bills of all instances are queried by default. You can specify a maximum of 10 instance IDs.
	InstanceIdList []*string `json:"InstanceIdList,omitempty" xml:"InstanceIdList,omitempty" type:"Repeated"`
	// The maximum number of entries to return. Default value: 20. Maximum value: 300.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The position from which the query starts. The parameter must be left empty or set to the value of the NextToken parameter returned from the last call. Otherwise, an error is returned. If this parameter is left empty, data is queried from the beginning.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The code of the service. You can obtain the value of this parameter by calling the QueryProductList operation or the DescribeResourcePackageProduct operation.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The specific service resource.
	ProductDetail *string `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method
	// *   PayAsYouGo: the pay-as-you-go billing method
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetBillOwnerIdList(v []*string) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.BillOwnerIdList = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetBillUserIdList(v []*string) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.BillUserIdList = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetBillingCycle(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.BillingCycle = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetConsumePeriodFilter(v []*string) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.ConsumePeriodFilter = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetCostUnitCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.CostUnitCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetInstanceIdList(v []*string) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.InstanceIdList = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetMaxResults(v int32) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetNextToken(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetProductCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetProductDetail(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.ProductDetail = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) SetSubscriptionType(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
	s.SubscriptionType = &v
	return s
}

type DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody) SetCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody) SetData(v *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody) SetMessage(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody) SetRequestId(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody) SetSuccess(v bool) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody {
	s.Success = &v
	return s
}

type DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData struct {
	// The ID of the account.
	AccountID *string `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// The name of the account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The data entries returned.
	Items []*DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The maximum number of entries returned.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The position from which the results started to return. The parameter must be left empty or set to the value of the NextToken parameter returned from the last call. Otherwise, an error is returned. If this parameter is left empty, data is queried from the beginning.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData) SetAccountID(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData) SetAccountName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData) SetItems(v []*DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData) SetMaxResults(v int32) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData) SetNextToken(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData) SetTotalCount(v int32) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems struct {
	// The allocation month. Format: YYYYMM.
	AmortizationPeriod *string `json:"AmortizationPeriod,omitempty" xml:"AmortizationPeriod,omitempty"`
	// The allocation status. Valid values:
	//
	// *   amortized: allocated
	// *   unAmortized: not allocated
	AmortizationStatus *string `json:"AmortizationStatus,omitempty" xml:"AmortizationStatus,omitempty"`
	// The ID of the account to which the bill belongs.
	BillAccountID *int64 `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	// The name of the account to which the bill belongs.
	BillAccountName *string `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	// The ID of the account to which the resource belongs.
	BillOwnerID *int64 `json:"BillOwnerID,omitempty" xml:"BillOwnerID,omitempty"`
	// The name of the account to which the resource belongs.
	BillOwnerName *string `json:"BillOwnerName,omitempty" xml:"BillOwnerName,omitempty"`
	// The business type.
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The billing cycle. Format: YYYYMM.
	ConsumePeriod *string `json:"ConsumePeriod,omitempty" xml:"ConsumePeriod,omitempty"`
	// The cost center.
	CostUnit *string `json:"CostUnit,omitempty" xml:"CostUnit,omitempty"`
	// The code of the cost center.
	CostUnitCode *string `json:"CostUnitCode,omitempty" xml:"CostUnitCode,omitempty"`
	// The amount deducted by using vouchers and allocated to the current allocation month.
	CurrentAmortizationDeductedByCashCoupons *float64 `json:"CurrentAmortizationDeductedByCashCoupons,omitempty" xml:"CurrentAmortizationDeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons and allocated to the current allocation month.
	CurrentAmortizationDeductedByCoupons *float64 `json:"CurrentAmortizationDeductedByCoupons,omitempty" xml:"CurrentAmortizationDeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards and allocated to the current allocation month.
	CurrentAmortizationDeductedByPrepaidCard *float64 `json:"CurrentAmortizationDeductedByPrepaidCard,omitempty" xml:"CurrentAmortizationDeductedByPrepaidCard,omitempty"`
	// The expenditure amount allocated to the current allocation month. Invoicing is supported.
	CurrentAmortizationExpenditureAmount *float64 `json:"CurrentAmortizationExpenditureAmount,omitempty" xml:"CurrentAmortizationExpenditureAmount,omitempty"`
	// The discount amount allocated to the current allocation month.
	CurrentAmortizationInvoiceDiscount *float64 `json:"CurrentAmortizationInvoiceDiscount,omitempty" xml:"CurrentAmortizationInvoiceDiscount,omitempty"`
	// The pretax amount allocated to the current allocation month.
	CurrentAmortizationPretaxAmount *float64 `json:"CurrentAmortizationPretaxAmount,omitempty" xml:"CurrentAmortizationPretaxAmount,omitempty"`
	// The pretax gross amount allocated to the current allocation month.
	CurrentAmortizationPretaxGrossAmount *float64 `json:"CurrentAmortizationPretaxGrossAmount,omitempty" xml:"CurrentAmortizationPretaxGrossAmount,omitempty"`
	// The round-off amount allocated to the current allocation month.
	CurrentAmortizationRoundDownDiscount *float64 `json:"CurrentAmortizationRoundDownDiscount,omitempty" xml:"CurrentAmortizationRoundDownDiscount,omitempty"`
	// The amount deducted by using vouchers.
	DeductedByCashCoupons *float64 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons.
	DeductedByCoupons *float64 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards.
	DeductedByPrepaidCard *float64 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	// The expenditure amount. Invoicing is supported.
	ExpenditureAmount *float64 `json:"ExpenditureAmount,omitempty" xml:"ExpenditureAmount,omitempty"`
	// The ID of the instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The public IP address of the instance.
	InternetIP *string `json:"InternetIP,omitempty" xml:"InternetIP,omitempty"`
	// The private IP address of the instance.
	IntranetIP *string `json:"IntranetIP,omitempty" xml:"IntranetIP,omitempty"`
	// The discount amount.
	InvoiceDiscount *float64 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The pretax amount.
	PretaxAmount *float64 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	// The pretax gross amount.
	PretaxGrossAmount *float64 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The amount deducted by using vouchers and allocated before the current allocation month.
	PreviouslyAmortizedDeductedByCashCoupons *float64 `json:"PreviouslyAmortizedDeductedByCashCoupons,omitempty" xml:"PreviouslyAmortizedDeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons and allocated before the current allocation month.
	PreviouslyAmortizedDeductedByCoupons *float64 `json:"PreviouslyAmortizedDeductedByCoupons,omitempty" xml:"PreviouslyAmortizedDeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards and allocated before the current allocation month.
	PreviouslyAmortizedDeductedByPrepaidCard *float64 `json:"PreviouslyAmortizedDeductedByPrepaidCard,omitempty" xml:"PreviouslyAmortizedDeductedByPrepaidCard,omitempty"`
	// The expenditure amount allocated before the allocation month. Invoicing is supported.
	PreviouslyAmortizedExpenditureAmount *float64 `json:"PreviouslyAmortizedExpenditureAmount,omitempty" xml:"PreviouslyAmortizedExpenditureAmount,omitempty"`
	// The discount amount allocated before the current allocation month.
	PreviouslyAmortizedInvoiceDiscount *float64 `json:"PreviouslyAmortizedInvoiceDiscount,omitempty" xml:"PreviouslyAmortizedInvoiceDiscount,omitempty"`
	// The pretax amount allocated before the current allocation month.
	PreviouslyAmortizedPretaxAmount *float64 `json:"PreviouslyAmortizedPretaxAmount,omitempty" xml:"PreviouslyAmortizedPretaxAmount,omitempty"`
	// The pretax gross amount allocated before the current allocation month.
	PreviouslyAmortizedPretaxGrossAmount *float64 `json:"PreviouslyAmortizedPretaxGrossAmount,omitempty" xml:"PreviouslyAmortizedPretaxGrossAmount,omitempty"`
	// The round-off amount allocated before the current allocation month.
	PreviouslyAmortizedRoundDownDiscount *float64 `json:"PreviouslyAmortizedRoundDownDiscount,omitempty" xml:"PreviouslyAmortizedRoundDownDiscount,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The specific service resource.
	ProductDetail *string `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	// The code of the specific service resource.
	ProductDetailCode *string `json:"ProductDetailCode,omitempty" xml:"ProductDetailCode,omitempty"`
	// The name of the service.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The amount deducted by using vouchers and to be allocated to one or more future allocation months.
	RemainingAmortizationDeductedByCashCoupons *float64 `json:"RemainingAmortizationDeductedByCashCoupons,omitempty" xml:"RemainingAmortizationDeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons and to be allocated to one or more future allocation months.
	RemainingAmortizationDeductedByCoupons *float64 `json:"RemainingAmortizationDeductedByCoupons,omitempty" xml:"RemainingAmortizationDeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards and to be allocated to one or more future allocation months.
	RemainingAmortizationDeductedByPrepaidCard *float64 `json:"RemainingAmortizationDeductedByPrepaidCard,omitempty" xml:"RemainingAmortizationDeductedByPrepaidCard,omitempty"`
	// The expenditure amount to be allocated to one or more future allocation months. Invoicing is supported.
	RemainingAmortizationExpenditureAmount *float64 `json:"RemainingAmortizationExpenditureAmount,omitempty" xml:"RemainingAmortizationExpenditureAmount,omitempty"`
	// The discount amount to be allocated to one or more future allocation months.
	RemainingAmortizationInvoiceDiscount *float64 `json:"RemainingAmortizationInvoiceDiscount,omitempty" xml:"RemainingAmortizationInvoiceDiscount,omitempty"`
	// The pretax amount to be allocated to one or more future allocation months.
	RemainingAmortizationPretaxAmount *float64 `json:"RemainingAmortizationPretaxAmount,omitempty" xml:"RemainingAmortizationPretaxAmount,omitempty"`
	// The pretax gross amount to be allocated to one or more future allocation months.
	RemainingAmortizationPretaxGrossAmount *float64 `json:"RemainingAmortizationPretaxGrossAmount,omitempty" xml:"RemainingAmortizationPretaxGrossAmount,omitempty"`
	// The round-off amount to be allocated to one or more future allocation months.
	RemainingAmortizationRoundDownDiscount *float64 `json:"RemainingAmortizationRoundDownDiscount,omitempty" xml:"RemainingAmortizationRoundDownDiscount,omitempty"`
	// The name of the resource group.
	ResourceGroup *string `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	// The round-off amount.
	RoundDownDiscount *float64 `json:"RoundDownDiscount,omitempty" xml:"RoundDownDiscount,omitempty"`
	// The name of the account to which the split item belongs.
	SplitAccountName *string `json:"SplitAccountName,omitempty" xml:"SplitAccountName,omitempty"`
	// The ID of the split item.
	SplitItemID *string `json:"SplitItemID,omitempty" xml:"SplitItemID,omitempty"`
	// The name of the split item.
	SplitItemName *string `json:"SplitItemName,omitempty" xml:"SplitItemName,omitempty"`
	// The name of the specific service resource to which the split item belongs.
	SplitProductDetail *string `json:"SplitProductDetail,omitempty" xml:"SplitProductDetail,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method
	// *   PayAsYouGo: the pay-as-you-go billing method
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	// The tag of the instance.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The ID of the zone.
	Zone *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetAmortizationPeriod(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.AmortizationPeriod = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetAmortizationStatus(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.AmortizationStatus = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillAccountID(v int64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillAccountID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillAccountName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillAccountName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillOwnerID(v int64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillOwnerID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillOwnerName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillOwnerName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBizType(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BizType = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetConsumePeriod(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ConsumePeriod = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCostUnit(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CostUnit = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCostUnitCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CostUnitCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationPretaxAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.DeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetInstanceID(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.InstanceID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetInternetIP(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.InternetIP = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetIntranetIP(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.IntranetIP = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.InvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPretaxAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedPretaxAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedPretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductDetail(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductDetail = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductDetailCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductDetailCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRegion(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationPretaxAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetResourceGroup(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ResourceGroup = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSplitAccountName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SplitAccountName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSplitItemID(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SplitItemID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSplitItemName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SplitItemName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSplitProductDetail(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SplitProductDetail = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSubscriptionType(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SubscriptionType = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetTag(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.Tag = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetZone(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.Zone = &v
	return s
}

type DescribeInstanceAmortizedCostByAmortizationPeriodResponse struct {
	Headers    map[string]*string                                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponse) SetHeaders(v map[string]*string) *DescribeInstanceAmortizedCostByAmortizationPeriodResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponse) SetStatusCode(v int32) *DescribeInstanceAmortizedCostByAmortizationPeriodResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodResponse) SetBody(v *DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody) *DescribeInstanceAmortizedCostByAmortizationPeriodResponse {
	s.Body = v
	return s
}

type DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest struct {
	AmortizationDateEnd   *string   `json:"AmortizationDateEnd,omitempty" xml:"AmortizationDateEnd,omitempty"`
	AmortizationDateStart *string   `json:"AmortizationDateStart,omitempty" xml:"AmortizationDateStart,omitempty"`
	BillOwnerIdList       []*string `json:"BillOwnerIdList,omitempty" xml:"BillOwnerIdList,omitempty" type:"Repeated"`
	BillUserIdList        []*string `json:"BillUserIdList,omitempty" xml:"BillUserIdList,omitempty" type:"Repeated"`
	BillingCycle          *string   `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	CostUnitCode          *string   `json:"CostUnitCode,omitempty" xml:"CostUnitCode,omitempty"`
	InstanceIdList        []*string `json:"InstanceIdList,omitempty" xml:"InstanceIdList,omitempty" type:"Repeated"`
	MaxResults            *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken             *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ProductCode           *string   `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductDetail         *string   `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	SubscriptionType      *string   `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetAmortizationDateEnd(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.AmortizationDateEnd = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetAmortizationDateStart(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.AmortizationDateStart = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetBillOwnerIdList(v []*string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.BillOwnerIdList = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetBillUserIdList(v []*string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.BillUserIdList = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetBillingCycle(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.BillingCycle = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetCostUnitCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.CostUnitCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetInstanceIdList(v []*string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.InstanceIdList = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetMaxResults(v int32) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetNextToken(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetProductCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetProductDetail(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.ProductDetail = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) SetSubscriptionType(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
	s.SubscriptionType = &v
	return s
}

type DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody struct {
	Code      *string                                                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody) SetCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody) SetData(v *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody) SetMessage(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody) SetRequestId(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody) SetSuccess(v bool) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody {
	s.Success = &v
	return s
}

type DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData struct {
	AccountID   *string                                                                       `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	AccountName *string                                                                       `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	HostId      *string                                                                       `json:"HostId,omitempty" xml:"HostId,omitempty"`
	Items       []*DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	MaxResults  *int32                                                                        `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken   *string                                                                       `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TotalCount  *int32                                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData) SetAccountID(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData) SetAccountName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData) SetHostId(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData {
	s.HostId = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData) SetItems(v []*DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData) SetMaxResults(v int32) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData) SetNextToken(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData) SetTotalCount(v int32) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems struct {
	AmortizationPeriod                         *string  `json:"AmortizationPeriod,omitempty" xml:"AmortizationPeriod,omitempty"`
	AmortizationPeriodDay                      *string  `json:"AmortizationPeriodDay,omitempty" xml:"AmortizationPeriodDay,omitempty"`
	AmortizationStatus                         *string  `json:"AmortizationStatus,omitempty" xml:"AmortizationStatus,omitempty"`
	BillAccountID                              *int64   `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	BillAccountName                            *string  `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	BillOwnerID                                *int64   `json:"BillOwnerID,omitempty" xml:"BillOwnerID,omitempty"`
	BillOwnerName                              *string  `json:"BillOwnerName,omitempty" xml:"BillOwnerName,omitempty"`
	BizType                                    *string  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ConsumePeriod                              *string  `json:"ConsumePeriod,omitempty" xml:"ConsumePeriod,omitempty"`
	ConsumePeriodDay                           *string  `json:"ConsumePeriodDay,omitempty" xml:"ConsumePeriodDay,omitempty"`
	CostUnit                                   *string  `json:"CostUnit,omitempty" xml:"CostUnit,omitempty"`
	CostUnitCode                               *string  `json:"CostUnitCode,omitempty" xml:"CostUnitCode,omitempty"`
	CurrentAmortizationDeductedByCashCoupons   *float64 `json:"CurrentAmortizationDeductedByCashCoupons,omitempty" xml:"CurrentAmortizationDeductedByCashCoupons,omitempty"`
	CurrentAmortizationDeductedByCoupons       *float64 `json:"CurrentAmortizationDeductedByCoupons,omitempty" xml:"CurrentAmortizationDeductedByCoupons,omitempty"`
	CurrentAmortizationDeductedByPrepaidCard   *float64 `json:"CurrentAmortizationDeductedByPrepaidCard,omitempty" xml:"CurrentAmortizationDeductedByPrepaidCard,omitempty"`
	CurrentAmortizationExpenditureAmount       *float64 `json:"CurrentAmortizationExpenditureAmount,omitempty" xml:"CurrentAmortizationExpenditureAmount,omitempty"`
	CurrentAmortizationInvoiceDiscount         *float64 `json:"CurrentAmortizationInvoiceDiscount,omitempty" xml:"CurrentAmortizationInvoiceDiscount,omitempty"`
	CurrentAmortizationPretaxAmount            *float64 `json:"CurrentAmortizationPretaxAmount,omitempty" xml:"CurrentAmortizationPretaxAmount,omitempty"`
	CurrentAmortizationPretaxGrossAmount       *float64 `json:"CurrentAmortizationPretaxGrossAmount,omitempty" xml:"CurrentAmortizationPretaxGrossAmount,omitempty"`
	CurrentAmortizationRoundDownDiscount       *float64 `json:"CurrentAmortizationRoundDownDiscount,omitempty" xml:"CurrentAmortizationRoundDownDiscount,omitempty"`
	DeductedByCashCoupons                      *float64 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	DeductedByCoupons                          *float64 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	DeductedByPrepaidCard                      *float64 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	ExpenditureAmount                          *float64 `json:"ExpenditureAmount,omitempty" xml:"ExpenditureAmount,omitempty"`
	InstanceID                                 *string  `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InternetIP                                 *string  `json:"InternetIP,omitempty" xml:"InternetIP,omitempty"`
	IntranetIP                                 *string  `json:"IntranetIP,omitempty" xml:"IntranetIP,omitempty"`
	InvoiceDiscount                            *float64 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	PretaxAmount                               *float64 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	PretaxGrossAmount                          *float64 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	PreviouslyAmortizedDeductedByCashCoupons   *float64 `json:"PreviouslyAmortizedDeductedByCashCoupons,omitempty" xml:"PreviouslyAmortizedDeductedByCashCoupons,omitempty"`
	PreviouslyAmortizedDeductedByCoupons       *float64 `json:"PreviouslyAmortizedDeductedByCoupons,omitempty" xml:"PreviouslyAmortizedDeductedByCoupons,omitempty"`
	PreviouslyAmortizedDeductedByPrepaidCard   *float64 `json:"PreviouslyAmortizedDeductedByPrepaidCard,omitempty" xml:"PreviouslyAmortizedDeductedByPrepaidCard,omitempty"`
	PreviouslyAmortizedExpenditureAmount       *float64 `json:"PreviouslyAmortizedExpenditureAmount,omitempty" xml:"PreviouslyAmortizedExpenditureAmount,omitempty"`
	PreviouslyAmortizedInvoiceDiscount         *float64 `json:"PreviouslyAmortizedInvoiceDiscount,omitempty" xml:"PreviouslyAmortizedInvoiceDiscount,omitempty"`
	PreviouslyAmortizedPretaxAmount            *float64 `json:"PreviouslyAmortizedPretaxAmount,omitempty" xml:"PreviouslyAmortizedPretaxAmount,omitempty"`
	PreviouslyAmortizedPretaxGrossAmount       *float64 `json:"PreviouslyAmortizedPretaxGrossAmount,omitempty" xml:"PreviouslyAmortizedPretaxGrossAmount,omitempty"`
	PreviouslyAmortizedRoundDownDiscount       *float64 `json:"PreviouslyAmortizedRoundDownDiscount,omitempty" xml:"PreviouslyAmortizedRoundDownDiscount,omitempty"`
	ProductCode                                *string  `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductDetail                              *string  `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	ProductDetailCode                          *string  `json:"ProductDetailCode,omitempty" xml:"ProductDetailCode,omitempty"`
	ProductName                                *string  `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	Region                                     *string  `json:"Region,omitempty" xml:"Region,omitempty"`
	RemainingAmortizationDeductedByCashCoupons *float64 `json:"RemainingAmortizationDeductedByCashCoupons,omitempty" xml:"RemainingAmortizationDeductedByCashCoupons,omitempty"`
	RemainingAmortizationDeductedByCoupons     *float64 `json:"RemainingAmortizationDeductedByCoupons,omitempty" xml:"RemainingAmortizationDeductedByCoupons,omitempty"`
	RemainingAmortizationDeductedByPrepaidCard *float64 `json:"RemainingAmortizationDeductedByPrepaidCard,omitempty" xml:"RemainingAmortizationDeductedByPrepaidCard,omitempty"`
	RemainingAmortizationExpenditureAmount     *float64 `json:"RemainingAmortizationExpenditureAmount,omitempty" xml:"RemainingAmortizationExpenditureAmount,omitempty"`
	RemainingAmortizationInvoiceDiscount       *float64 `json:"RemainingAmortizationInvoiceDiscount,omitempty" xml:"RemainingAmortizationInvoiceDiscount,omitempty"`
	RemainingAmortizationPretaxAmount          *float64 `json:"RemainingAmortizationPretaxAmount,omitempty" xml:"RemainingAmortizationPretaxAmount,omitempty"`
	RemainingAmortizationPretaxGrossAmount     *float64 `json:"RemainingAmortizationPretaxGrossAmount,omitempty" xml:"RemainingAmortizationPretaxGrossAmount,omitempty"`
	RemainingAmortizationRoundDownDiscount     *float64 `json:"RemainingAmortizationRoundDownDiscount,omitempty" xml:"RemainingAmortizationRoundDownDiscount,omitempty"`
	ResourceGroup                              *string  `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	RoundDownDiscount                          *float64 `json:"RoundDownDiscount,omitempty" xml:"RoundDownDiscount,omitempty"`
	SplitAccountName                           *string  `json:"SplitAccountName,omitempty" xml:"SplitAccountName,omitempty"`
	SplitItemID                                *string  `json:"SplitItemID,omitempty" xml:"SplitItemID,omitempty"`
	SplitItemName                              *string  `json:"SplitItemName,omitempty" xml:"SplitItemName,omitempty"`
	SplitProductDetail                         *string  `json:"SplitProductDetail,omitempty" xml:"SplitProductDetail,omitempty"`
	SubscriptionType                           *string  `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	Tag                                        *string  `json:"Tag,omitempty" xml:"Tag,omitempty"`
	Zone                                       *string  `json:"Zone,omitempty" xml:"Zone,omitempty"`
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetAmortizationPeriod(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.AmortizationPeriod = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetAmortizationPeriodDay(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.AmortizationPeriodDay = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetAmortizationStatus(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.AmortizationStatus = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetBillAccountID(v int64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.BillAccountID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetBillAccountName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.BillAccountName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetBillOwnerID(v int64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.BillOwnerID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetBillOwnerName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.BillOwnerName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetBizType(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.BizType = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetConsumePeriod(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.ConsumePeriod = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetConsumePeriodDay(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.ConsumePeriodDay = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetCostUnit(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.CostUnit = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetCostUnitCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.CostUnitCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetCurrentAmortizationDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetCurrentAmortizationDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetCurrentAmortizationDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.CurrentAmortizationDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetCurrentAmortizationExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.CurrentAmortizationExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetCurrentAmortizationInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.CurrentAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetCurrentAmortizationPretaxAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.CurrentAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetCurrentAmortizationPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.CurrentAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetCurrentAmortizationRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.CurrentAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.DeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.ExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetInstanceID(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.InstanceID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetInternetIP(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.InternetIP = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetIntranetIP(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.IntranetIP = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.InvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetPretaxAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.PretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.PretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetPreviouslyAmortizedDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetPreviouslyAmortizedDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetPreviouslyAmortizedDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetPreviouslyAmortizedExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.PreviouslyAmortizedExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetPreviouslyAmortizedInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.PreviouslyAmortizedInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetPreviouslyAmortizedPretaxAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.PreviouslyAmortizedPretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetPreviouslyAmortizedPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.PreviouslyAmortizedPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetPreviouslyAmortizedRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.PreviouslyAmortizedRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetProductCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.ProductCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetProductDetail(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.ProductDetail = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetProductDetailCode(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.ProductDetailCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetProductName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.ProductName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetRegion(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetRemainingAmortizationDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.RemainingAmortizationDeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetRemainingAmortizationDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.RemainingAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetRemainingAmortizationDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.RemainingAmortizationDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetRemainingAmortizationExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.RemainingAmortizationExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetRemainingAmortizationInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.RemainingAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetRemainingAmortizationPretaxAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.RemainingAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetRemainingAmortizationPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.RemainingAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetRemainingAmortizationRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.RemainingAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetResourceGroup(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.ResourceGroup = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.RoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetSplitAccountName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.SplitAccountName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetSplitItemID(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.SplitItemID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetSplitItemName(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.SplitItemName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetSplitProductDetail(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.SplitProductDetail = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetSubscriptionType(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.SubscriptionType = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetTag(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.Tag = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems) SetZone(v string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBodyDataItems {
	s.Zone = &v
	return s
}

type DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse struct {
	Headers    map[string]*string                                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse) SetHeaders(v map[string]*string) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse) SetStatusCode(v int32) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse) SetBody(v *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody) *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse {
	s.Body = v
	return s
}

type DescribeInstanceAmortizedCostByConsumePeriodRequest struct {
	AmortizationPeriodFilter []*string `json:"AmortizationPeriodFilter,omitempty" xml:"AmortizationPeriodFilter,omitempty" type:"Repeated"`
	BillOwnerIdList          []*string `json:"BillOwnerIdList,omitempty" xml:"BillOwnerIdList,omitempty" type:"Repeated"`
	BillUserIdList           []*string `json:"BillUserIdList,omitempty" xml:"BillUserIdList,omitempty" type:"Repeated"`
	BillingCycle             *string   `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	CostUnitCode             *string   `json:"CostUnitCode,omitempty" xml:"CostUnitCode,omitempty"`
	InstanceIdList           []*string `json:"InstanceIdList,omitempty" xml:"InstanceIdList,omitempty" type:"Repeated"`
	MaxResults               *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken                *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ProductCode              *string   `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductDetail            *string   `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	SubscriptionType         *string   `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s DescribeInstanceAmortizedCostByConsumePeriodRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByConsumePeriodRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetAmortizationPeriodFilter(v []*string) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.AmortizationPeriodFilter = v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetBillOwnerIdList(v []*string) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.BillOwnerIdList = v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetBillUserIdList(v []*string) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.BillUserIdList = v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetBillingCycle(v string) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.BillingCycle = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetCostUnitCode(v string) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.CostUnitCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetInstanceIdList(v []*string) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.InstanceIdList = v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetMaxResults(v int32) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetNextToken(v string) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetProductCode(v string) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetProductDetail(v string) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.ProductDetail = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodRequest) SetSubscriptionType(v string) *DescribeInstanceAmortizedCostByConsumePeriodRequest {
	s.SubscriptionType = &v
	return s
}

type DescribeInstanceAmortizedCostByConsumePeriodResponseBody struct {
	Code      *string                                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInstanceAmortizedCostByConsumePeriodResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByConsumePeriodResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBody) SetCode(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBody) SetData(v *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData) *DescribeInstanceAmortizedCostByConsumePeriodResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBody) SetMessage(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBody) SetRequestId(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBody) SetSuccess(v bool) *DescribeInstanceAmortizedCostByConsumePeriodResponseBody {
	s.Success = &v
	return s
}

type DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData struct {
	AccountID   *string                                                              `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	AccountName *string                                                              `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	Items       []*DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	MaxResults  *int32                                                               `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken   *string                                                              `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TotalCount  *int32                                                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData) SetAccountID(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData) SetAccountName(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData) SetItems(v []*DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData) SetMaxResults(v int32) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData) SetNextToken(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData) SetTotalCount(v int32) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems struct {
	AmortizationPeriod                         *string  `json:"AmortizationPeriod,omitempty" xml:"AmortizationPeriod,omitempty"`
	AmortizationStatus                         *string  `json:"AmortizationStatus,omitempty" xml:"AmortizationStatus,omitempty"`
	BillAccountID                              *int64   `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	BillAccountName                            *string  `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	BillOwnerID                                *int64   `json:"BillOwnerID,omitempty" xml:"BillOwnerID,omitempty"`
	BillOwnerName                              *string  `json:"BillOwnerName,omitempty" xml:"BillOwnerName,omitempty"`
	BizType                                    *string  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ConsumePeriod                              *string  `json:"ConsumePeriod,omitempty" xml:"ConsumePeriod,omitempty"`
	CostUnit                                   *string  `json:"CostUnit,omitempty" xml:"CostUnit,omitempty"`
	CostUnitCode                               *string  `json:"CostUnitCode,omitempty" xml:"CostUnitCode,omitempty"`
	CurrentAmortizationDeductedByCashCoupons   *float64 `json:"CurrentAmortizationDeductedByCashCoupons,omitempty" xml:"CurrentAmortizationDeductedByCashCoupons,omitempty"`
	CurrentAmortizationDeductedByCoupons       *float64 `json:"CurrentAmortizationDeductedByCoupons,omitempty" xml:"CurrentAmortizationDeductedByCoupons,omitempty"`
	CurrentAmortizationDeductedByPrepaidCard   *float64 `json:"CurrentAmortizationDeductedByPrepaidCard,omitempty" xml:"CurrentAmortizationDeductedByPrepaidCard,omitempty"`
	CurrentAmortizationExpenditureAmount       *float64 `json:"CurrentAmortizationExpenditureAmount,omitempty" xml:"CurrentAmortizationExpenditureAmount,omitempty"`
	CurrentAmortizationInvoiceDiscount         *float64 `json:"CurrentAmortizationInvoiceDiscount,omitempty" xml:"CurrentAmortizationInvoiceDiscount,omitempty"`
	CurrentAmortizationPretaxAmount            *float64 `json:"CurrentAmortizationPretaxAmount,omitempty" xml:"CurrentAmortizationPretaxAmount,omitempty"`
	CurrentAmortizationPretaxGrossAmount       *float64 `json:"CurrentAmortizationPretaxGrossAmount,omitempty" xml:"CurrentAmortizationPretaxGrossAmount,omitempty"`
	CurrentAmortizationRoundDownDiscount       *float64 `json:"CurrentAmortizationRoundDownDiscount,omitempty" xml:"CurrentAmortizationRoundDownDiscount,omitempty"`
	DeductedByCashCoupons                      *float64 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	DeductedByCoupons                          *float64 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	DeductedByPrepaidCard                      *float64 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	ExpenditureAmount                          *float64 `json:"ExpenditureAmount,omitempty" xml:"ExpenditureAmount,omitempty"`
	InstanceID                                 *string  `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InternetIP                                 *string  `json:"InternetIP,omitempty" xml:"InternetIP,omitempty"`
	IntranetIP                                 *string  `json:"IntranetIP,omitempty" xml:"IntranetIP,omitempty"`
	InvoiceDiscount                            *float64 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	PretaxAmount                               *float64 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	PretaxGrossAmount                          *float64 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	PreviouslyAmortizedDeductedByCashCoupons   *float64 `json:"PreviouslyAmortizedDeductedByCashCoupons,omitempty" xml:"PreviouslyAmortizedDeductedByCashCoupons,omitempty"`
	PreviouslyAmortizedDeductedByCoupons       *float64 `json:"PreviouslyAmortizedDeductedByCoupons,omitempty" xml:"PreviouslyAmortizedDeductedByCoupons,omitempty"`
	PreviouslyAmortizedDeductedByPrepaidCard   *float64 `json:"PreviouslyAmortizedDeductedByPrepaidCard,omitempty" xml:"PreviouslyAmortizedDeductedByPrepaidCard,omitempty"`
	PreviouslyAmortizedExpenditureAmount       *float64 `json:"PreviouslyAmortizedExpenditureAmount,omitempty" xml:"PreviouslyAmortizedExpenditureAmount,omitempty"`
	PreviouslyAmortizedInvoiceDiscount         *float64 `json:"PreviouslyAmortizedInvoiceDiscount,omitempty" xml:"PreviouslyAmortizedInvoiceDiscount,omitempty"`
	PreviouslyAmortizedPretaxAmount            *float64 `json:"PreviouslyAmortizedPretaxAmount,omitempty" xml:"PreviouslyAmortizedPretaxAmount,omitempty"`
	PreviouslyAmortizedPretaxGrossAmount       *float64 `json:"PreviouslyAmortizedPretaxGrossAmount,omitempty" xml:"PreviouslyAmortizedPretaxGrossAmount,omitempty"`
	PreviouslyAmortizedRoundDownDiscount       *float64 `json:"PreviouslyAmortizedRoundDownDiscount,omitempty" xml:"PreviouslyAmortizedRoundDownDiscount,omitempty"`
	ProductCode                                *string  `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductDetail                              *string  `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	ProductDetailCode                          *string  `json:"ProductDetailCode,omitempty" xml:"ProductDetailCode,omitempty"`
	ProductName                                *string  `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	Region                                     *string  `json:"Region,omitempty" xml:"Region,omitempty"`
	RemainingAmortizationDeductedByCashCoupons *float64 `json:"RemainingAmortizationDeductedByCashCoupons,omitempty" xml:"RemainingAmortizationDeductedByCashCoupons,omitempty"`
	RemainingAmortizationDeductedByCoupons     *float64 `json:"RemainingAmortizationDeductedByCoupons,omitempty" xml:"RemainingAmortizationDeductedByCoupons,omitempty"`
	RemainingAmortizationDeductedByPrepaidCard *float64 `json:"RemainingAmortizationDeductedByPrepaidCard,omitempty" xml:"RemainingAmortizationDeductedByPrepaidCard,omitempty"`
	RemainingAmortizationExpenditureAmount     *float64 `json:"RemainingAmortizationExpenditureAmount,omitempty" xml:"RemainingAmortizationExpenditureAmount,omitempty"`
	RemainingAmortizationInvoiceDiscount       *float64 `json:"RemainingAmortizationInvoiceDiscount,omitempty" xml:"RemainingAmortizationInvoiceDiscount,omitempty"`
	RemainingAmortizationPretaxAmount          *float64 `json:"RemainingAmortizationPretaxAmount,omitempty" xml:"RemainingAmortizationPretaxAmount,omitempty"`
	RemainingAmortizationPretaxGrossAmount     *float64 `json:"RemainingAmortizationPretaxGrossAmount,omitempty" xml:"RemainingAmortizationPretaxGrossAmount,omitempty"`
	RemainingAmortizationRoundDownDiscount     *float64 `json:"RemainingAmortizationRoundDownDiscount,omitempty" xml:"RemainingAmortizationRoundDownDiscount,omitempty"`
	ResourceGroup                              *string  `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	RoundDownDiscount                          *float64 `json:"RoundDownDiscount,omitempty" xml:"RoundDownDiscount,omitempty"`
	SplitAccountName                           *string  `json:"SplitAccountName,omitempty" xml:"SplitAccountName,omitempty"`
	SplitItemID                                *string  `json:"SplitItemID,omitempty" xml:"SplitItemID,omitempty"`
	SplitItemName                              *string  `json:"SplitItemName,omitempty" xml:"SplitItemName,omitempty"`
	SplitProductDetail                         *string  `json:"SplitProductDetail,omitempty" xml:"SplitProductDetail,omitempty"`
	SubscriptionType                           *string  `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	Tag                                        *string  `json:"Tag,omitempty" xml:"Tag,omitempty"`
	Zone                                       *string  `json:"Zone,omitempty" xml:"Zone,omitempty"`
}

func (s DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetAmortizationPeriod(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.AmortizationPeriod = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetAmortizationStatus(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.AmortizationStatus = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetBillAccountID(v int64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.BillAccountID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetBillAccountName(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.BillAccountName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetBillOwnerID(v int64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.BillOwnerID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetBillOwnerName(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.BillOwnerName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetBizType(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.BizType = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetConsumePeriod(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ConsumePeriod = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetCostUnit(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CostUnit = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetCostUnitCode(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CostUnitCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationPretaxAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.DeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetInstanceID(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.InstanceID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetInternetIP(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.InternetIP = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetIntranetIP(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.IntranetIP = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.InvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetPretaxAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedPretaxAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedPretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetProductCode(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ProductCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetProductDetail(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ProductDetail = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetProductDetailCode(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ProductDetailCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetProductName(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ProductName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetRegion(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByCashCoupons(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByCoupons(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByPrepaidCard(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationExpenditureAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationExpenditureAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationInvoiceDiscount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationPretaxAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationPretaxGrossAmount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetResourceGroup(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ResourceGroup = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetRoundDownDiscount(v float64) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetSplitAccountName(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.SplitAccountName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetSplitItemID(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.SplitItemID = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetSplitItemName(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.SplitItemName = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetSplitProductDetail(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.SplitProductDetail = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetSubscriptionType(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.SubscriptionType = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetTag(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.Tag = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems) SetZone(v string) *DescribeInstanceAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.Zone = &v
	return s
}

type DescribeInstanceAmortizedCostByConsumePeriodResponse struct {
	Headers    map[string]*string                                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceAmortizedCostByConsumePeriodResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceAmortizedCostByConsumePeriodResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAmortizedCostByConsumePeriodResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponse) SetHeaders(v map[string]*string) *DescribeInstanceAmortizedCostByConsumePeriodResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponse) SetStatusCode(v int32) *DescribeInstanceAmortizedCostByConsumePeriodResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceAmortizedCostByConsumePeriodResponse) SetBody(v *DescribeInstanceAmortizedCostByConsumePeriodResponseBody) *DescribeInstanceAmortizedCostByConsumePeriodResponse {
	s.Body = v
	return s
}

type DescribeInstanceBillRequest struct {
	// The ID of the member. If you specify this parameter, the bills of the member are queried. If you do not specify this parameter, the bills of the current account are queried by default.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The billing cycle. Specify the parameter in the YYYY-MM format.
	// Only the latest 18 month billing cycle is supported.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The billing date. This parameter is required only when the Granularity parameter is set to DAILY. Format: YYYY-MM-DD.
	BillingDate *string `json:"BillingDate,omitempty" xml:"BillingDate,omitempty"`
	// The granularity at which bills are queried. Valid values:
	//
	// *   MONTHLY: queries bills on a monthly basis. The data that you query is the same as the data searched by instances on the Billing Details tab of the Bill Details page in the User Center console.
	// *   DAILY: queries bills on a daily basis. The data that you query is the same as the data searched by days on the Billing Details tab of the Bill Details page in the User Center console.
	//
	// The BillingDate parameter is required if you set the Granularity parameter to DAILY.
	Granularity *string `json:"Granularity,omitempty" xml:"Granularity,omitempty"`
	// The ID of the instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// Specifies whether to query data by billable items. Valid values:
	//
	// *   false: The data that you query is the same as the data searched by instances on the Billing Details tab of the Bill Details page in the User Center console.
	// *   true: The data that you query is the same as the data searched by billable items on the Billing Details tab of the Bill Details page in the User Center console.
	//
	// Default value: false.
	IsBillingItem *bool `json:"IsBillingItem,omitempty" xml:"IsBillingItem,omitempty"`
	// Specifies whether to filter bills if both the pretax gross amount and pretax amount are 0. Valid values:
	//
	// *   false: does not filter bills.
	// *   true: filters bills.
	IsHideZeroCharge *bool `json:"IsHideZeroCharge,omitempty" xml:"IsHideZeroCharge,omitempty"`
	// The maximum number of entries to return. Default value: 20. Maximum value: 300.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used to indicate the position where the results for the current call start. The parameter must be left empty or set to the value of the NextToken parameter that is returned from the last call. Otherwise, an error is returned. If the parameter is left empty, data is queried from the first item.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PipCode   *string `json:"PipCode,omitempty" xml:"PipCode,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method.
	// *   PayAsYouGo: the pay-as-you-go billing method.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s DescribeInstanceBillRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBillRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBillRequest) SetBillOwnerId(v int64) *DescribeInstanceBillRequest {
	s.BillOwnerId = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetBillingCycle(v string) *DescribeInstanceBillRequest {
	s.BillingCycle = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetBillingDate(v string) *DescribeInstanceBillRequest {
	s.BillingDate = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetGranularity(v string) *DescribeInstanceBillRequest {
	s.Granularity = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetInstanceID(v string) *DescribeInstanceBillRequest {
	s.InstanceID = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetIsBillingItem(v bool) *DescribeInstanceBillRequest {
	s.IsBillingItem = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetIsHideZeroCharge(v bool) *DescribeInstanceBillRequest {
	s.IsHideZeroCharge = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetMaxResults(v int32) *DescribeInstanceBillRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetNextToken(v string) *DescribeInstanceBillRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetOwnerId(v int64) *DescribeInstanceBillRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetPipCode(v string) *DescribeInstanceBillRequest {
	s.PipCode = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetProductCode(v string) *DescribeInstanceBillRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetProductType(v string) *DescribeInstanceBillRequest {
	s.ProductType = &v
	return s
}

func (s *DescribeInstanceBillRequest) SetSubscriptionType(v string) *DescribeInstanceBillRequest {
	s.SubscriptionType = &v
	return s
}

type DescribeInstanceBillResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DescribeInstanceBillResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInstanceBillResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBillResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBillResponseBody) SetCode(v string) *DescribeInstanceBillResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceBillResponseBody) SetData(v *DescribeInstanceBillResponseBodyData) *DescribeInstanceBillResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInstanceBillResponseBody) SetMessage(v string) *DescribeInstanceBillResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInstanceBillResponseBody) SetRequestId(v string) *DescribeInstanceBillResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceBillResponseBody) SetSuccess(v bool) *DescribeInstanceBillResponseBody {
	s.Success = &v
	return s
}

type DescribeInstanceBillResponseBodyData struct {
	// The ID of the account.
	AccountID *string `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// The name of the account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The billing cycle in the YYYY-MM format.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The details of the bill.
	Items []*DescribeInstanceBillResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The maximum number of entries returned.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The position where the query stopped. If this parameter is left empty, all the results are returned. If you perform another call, you must set the NextToken parameter to the value of this parameter.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceBillResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBillResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBillResponseBodyData) SetAccountID(v string) *DescribeInstanceBillResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyData) SetAccountName(v string) *DescribeInstanceBillResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyData) SetBillingCycle(v string) *DescribeInstanceBillResponseBodyData {
	s.BillingCycle = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyData) SetItems(v []*DescribeInstanceBillResponseBodyDataItems) *DescribeInstanceBillResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeInstanceBillResponseBodyData) SetMaxResults(v int32) *DescribeInstanceBillResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyData) SetNextToken(v string) *DescribeInstanceBillResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyData) SetTotalCount(v int32) *DescribeInstanceBillResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeInstanceBillResponseBodyDataItems struct {
	// The amount deducted with credit refund.
	AdjustAmount *float32 `json:"AdjustAmount,omitempty" xml:"AdjustAmount,omitempty"`
	// The ID of the account to which the bill belongs.
	BillAccountID *string `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	// The name of the account to which the bill belongs.
	BillAccountName *string `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	// The billing date. This parameter is returned only if the Granularity parameter is set to DAILY. Format: YYYY-MM-DD.
	BillingDate *string `json:"BillingDate,omitempty" xml:"BillingDate,omitempty"`
	// The billable item. A value is returned only if the IsBillingItem parameter is set to true.
	BillingItem *string `json:"BillingItem,omitempty" xml:"BillingItem,omitempty"`
	// The code of the billable item.
	BillingItemCode *string `json:"BillingItemCode,omitempty" xml:"BillingItemCode,omitempty"`
	// The billing method.
	BillingType *string `json:"BillingType,omitempty" xml:"BillingType,omitempty"`
	// The type of business.
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The amount paid in cash. The amount deducted with credit refund is not included.
	CashAmount *float32 `json:"CashAmount,omitempty" xml:"CashAmount,omitempty"`
	// The code of the commodity. The code is the same as that in Cost Center.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The cost center.
	CostUnit *string `json:"CostUnit,omitempty" xml:"CostUnit,omitempty"`
	// The type of currency. Valid values:
	//
	// *   CNY
	// *   USD
	// *   JPY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The amount deducted with vouchers.
	DeductedByCashCoupons *float32 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	// The amount deducted with coupons.
	DeductedByCoupons *float32 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	// The amount deducted with prepaid cards.
	DeductedByPrepaidCard *float32 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	// The amount deducted with resource plans. This parameter is valid only when the isBillingItem parameter is set to true.
	DeductedByResourcePackage *string `json:"DeductedByResourcePackage,omitempty" xml:"DeductedByResourcePackage,omitempty"`
	// The configurations of the instance.
	InstanceConfig *string `json:"InstanceConfig,omitempty" xml:"InstanceConfig,omitempty"`
	// The ID of the instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the instance.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The public IP address.
	InternetIP *string `json:"InternetIP,omitempty" xml:"InternetIP,omitempty"`
	// The private IP address.
	IntranetIP *string `json:"IntranetIP,omitempty" xml:"IntranetIP,omitempty"`
	// The discount amount.
	InvoiceDiscount *float32 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The type of the bill.
	//
	// *   SubscriptionOrder: the subscription bill.
	// *   PayAsYouGoBill: the pay-as-you-go bill,
	// *   Refund: the refund.
	// *   Adjustment: the adjustment bill.
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The name of the project.
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	// The unit price of the service. This parameter is valid only when the isBillingItem parameter is set to true.
	ListPrice *string `json:"ListPrice,omitempty" xml:"ListPrice,omitempty"`
	// The unit of the unit price. This parameter is valid only when the isBillingItem parameter is set to true.
	ListPriceUnit *string `json:"ListPriceUnit,omitempty" xml:"ListPriceUnit,omitempty"`
	// The name of the instance.
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// The unsettled amount.
	OutstandingAmount *float32 `json:"OutstandingAmount,omitempty" xml:"OutstandingAmount,omitempty"`
	// The ID of the account that owns the resource. This parameter is returned in multi-account payment scenario.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The amount paid in cash. The amount deducted with credit refund is not included.
	PaymentAmount *float32 `json:"PaymentAmount,omitempty" xml:"PaymentAmount,omitempty"`
	// The code of the service. The code is the same as that in Cost Center.
	PipCode *string `json:"PipCode,omitempty" xml:"PipCode,omitempty"`
	// The pretax amount.
	PretaxAmount *float32 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	// The pretax gross amount.
	PretaxGrossAmount *float32 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The details of the service.
	ProductDetail *string `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	// The name of the service.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The ID of the region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The ID of the resource group.
	ResourceGroup *string `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	// The service duration.
	ServicePeriod *string `json:"ServicePeriod,omitempty" xml:"ServicePeriod,omitempty"`
	// The unit of the service duration.
	ServicePeriodUnit *string `json:"ServicePeriodUnit,omitempty" xml:"ServicePeriodUnit,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method.
	// *   PayAsYouGo: the pay-as-you-go billing method.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	// The tag of the resource.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The usage of the service. This parameter is valid only when the isBillingItem parameter is set to true. The usage is the total usage in all bills in the billing cycle, not the amount that you purchase. For example, if 1 GB of storage is used and bills are generated every hour, the usage is 1 GB per hour. In this case, the usage is 24 GB per day.
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
	// The unit of usage. This parameter is valid only when the isBillingItem parameter is set to true.
	UsageUnit *string `json:"UsageUnit,omitempty" xml:"UsageUnit,omitempty"`
	// The ID of the zone.
	Zone *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
}

func (s DescribeInstanceBillResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBillResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetAdjustAmount(v float32) *DescribeInstanceBillResponseBodyDataItems {
	s.AdjustAmount = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetBillAccountID(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.BillAccountID = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetBillAccountName(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.BillAccountName = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetBillingDate(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.BillingDate = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetBillingItem(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.BillingItem = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetBillingItemCode(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.BillingItemCode = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetBillingType(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.BillingType = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetBizType(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.BizType = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetCashAmount(v float32) *DescribeInstanceBillResponseBodyDataItems {
	s.CashAmount = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetCommodityCode(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.CommodityCode = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetCostUnit(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.CostUnit = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetCurrency(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.Currency = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetDeductedByCashCoupons(v float32) *DescribeInstanceBillResponseBodyDataItems {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetDeductedByCoupons(v float32) *DescribeInstanceBillResponseBodyDataItems {
	s.DeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetDeductedByPrepaidCard(v float32) *DescribeInstanceBillResponseBodyDataItems {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetDeductedByResourcePackage(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.DeductedByResourcePackage = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetInstanceConfig(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.InstanceConfig = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetInstanceID(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.InstanceID = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetInstanceSpec(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetInternetIP(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.InternetIP = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetIntranetIP(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.IntranetIP = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetInvoiceDiscount(v float32) *DescribeInstanceBillResponseBodyDataItems {
	s.InvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetItem(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.Item = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetItemName(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.ItemName = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetListPrice(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.ListPrice = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetListPriceUnit(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.ListPriceUnit = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetNickName(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.NickName = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetOutstandingAmount(v float32) *DescribeInstanceBillResponseBodyDataItems {
	s.OutstandingAmount = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetOwnerID(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.OwnerID = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetPaymentAmount(v float32) *DescribeInstanceBillResponseBodyDataItems {
	s.PaymentAmount = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetPipCode(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.PipCode = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetPretaxAmount(v float32) *DescribeInstanceBillResponseBodyDataItems {
	s.PretaxAmount = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetPretaxGrossAmount(v float32) *DescribeInstanceBillResponseBodyDataItems {
	s.PretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetProductCode(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.ProductCode = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetProductDetail(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.ProductDetail = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetProductName(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.ProductName = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetProductType(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.ProductType = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetRegion(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetResourceGroup(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.ResourceGroup = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetServicePeriod(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.ServicePeriod = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetServicePeriodUnit(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.ServicePeriodUnit = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetSubscriptionType(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.SubscriptionType = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetTag(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.Tag = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetUsage(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.Usage = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetUsageUnit(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.UsageUnit = &v
	return s
}

func (s *DescribeInstanceBillResponseBodyDataItems) SetZone(v string) *DescribeInstanceBillResponseBodyDataItems {
	s.Zone = &v
	return s
}

type DescribeInstanceBillResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceBillResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceBillResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBillResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBillResponse) SetHeaders(v map[string]*string) *DescribeInstanceBillResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceBillResponse) SetStatusCode(v int32) *DescribeInstanceBillResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceBillResponse) SetBody(v *DescribeInstanceBillResponseBody) *DescribeInstanceBillResponse {
	s.Body = v
	return s
}

type DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest struct {
	BillOwnerIdList  []*string `json:"BillOwnerIdList,omitempty" xml:"BillOwnerIdList,omitempty" type:"Repeated"`
	BillUserIdList   []*string `json:"BillUserIdList,omitempty" xml:"BillUserIdList,omitempty" type:"Repeated"`
	BillingCycle     *string   `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	CostUnitCode     *string   `json:"CostUnitCode,omitempty" xml:"CostUnitCode,omitempty"`
	InstanceIdList   []*string `json:"InstanceIdList,omitempty" xml:"InstanceIdList,omitempty" type:"Repeated"`
	MaxResults       *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken        *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ProductCode      *string   `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductDetail    *string   `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	SubscriptionType *string   `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) SetBillOwnerIdList(v []*string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
	s.BillOwnerIdList = v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) SetBillUserIdList(v []*string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
	s.BillUserIdList = v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) SetBillingCycle(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
	s.BillingCycle = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) SetCostUnitCode(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
	s.CostUnitCode = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) SetInstanceIdList(v []*string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
	s.InstanceIdList = v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) SetMaxResults(v int32) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) SetNextToken(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) SetProductCode(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) SetProductDetail(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
	s.ProductDetail = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) SetSubscriptionType(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
	s.SubscriptionType = &v
	return s
}

type DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody struct {
	Code      *string                                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody) SetCode(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody) SetData(v *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody) SetMessage(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody) SetRequestId(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody) SetSuccess(v bool) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody {
	s.Success = &v
	return s
}

type DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData struct {
	AccountID   *string                                                                         `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	AccountName *string                                                                         `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	Items       []*DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	MaxResults  *int32                                                                          `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken   *string                                                                         `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TotalCount  *int32                                                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData) SetAccountID(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData) SetAccountName(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData) SetItems(v []*DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData) SetMaxResults(v int32) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData) SetNextToken(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData) SetTotalCount(v int32) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems struct {
	AmortizationPeriod                   *string  `json:"AmortizationPeriod,omitempty" xml:"AmortizationPeriod,omitempty"`
	AmortizationPeriodDay                *string  `json:"AmortizationPeriodDay,omitempty" xml:"AmortizationPeriodDay,omitempty"`
	AmortizationStatus                   *string  `json:"AmortizationStatus,omitempty" xml:"AmortizationStatus,omitempty"`
	BillAccountID                        *int64   `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	BillAccountName                      *string  `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	BillOwnerID                          *int64   `json:"BillOwnerID,omitempty" xml:"BillOwnerID,omitempty"`
	BillOwnerName                        *string  `json:"BillOwnerName,omitempty" xml:"BillOwnerName,omitempty"`
	BizType                              *string  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ConsumePeriod                        *string  `json:"ConsumePeriod,omitempty" xml:"ConsumePeriod,omitempty"`
	CostUnit                             *string  `json:"CostUnit,omitempty" xml:"CostUnit,omitempty"`
	CostUnitCode                         *string  `json:"CostUnitCode,omitempty" xml:"CostUnitCode,omitempty"`
	CurrentAmortizationDeductedByCoupons *float64 `json:"CurrentAmortizationDeductedByCoupons,omitempty" xml:"CurrentAmortizationDeductedByCoupons,omitempty"`
	CurrentAmortizationInvoiceDiscount   *float64 `json:"CurrentAmortizationInvoiceDiscount,omitempty" xml:"CurrentAmortizationInvoiceDiscount,omitempty"`
	CurrentAmortizationPretaxAmount      *float64 `json:"CurrentAmortizationPretaxAmount,omitempty" xml:"CurrentAmortizationPretaxAmount,omitempty"`
	CurrentAmortizationPretaxGrossAmount *float64 `json:"CurrentAmortizationPretaxGrossAmount,omitempty" xml:"CurrentAmortizationPretaxGrossAmount,omitempty"`
	CurrentAmortizationRoundDownDiscount *float64 `json:"CurrentAmortizationRoundDownDiscount,omitempty" xml:"CurrentAmortizationRoundDownDiscount,omitempty"`
	DeductedByCoupons                    *float64 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	InstanceConfig                       *string  `json:"InstanceConfig,omitempty" xml:"InstanceConfig,omitempty"`
	InstanceID                           *string  `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InternetIP                           *string  `json:"InternetIP,omitempty" xml:"InternetIP,omitempty"`
	IntranetIP                           *string  `json:"IntranetIP,omitempty" xml:"IntranetIP,omitempty"`
	InvoiceDiscount                      *float64 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	PretaxAmount                         *float64 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	PretaxGrossAmount                    *float64 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	ProductCode                          *string  `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductDetail                        *string  `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	ProductDetailCode                    *string  `json:"ProductDetailCode,omitempty" xml:"ProductDetailCode,omitempty"`
	ProductName                          *string  `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	ReferFrInstanceID                    *string  `json:"ReferFrInstanceID,omitempty" xml:"ReferFrInstanceID,omitempty"`
	ReferFrOwnerID                       *string  `json:"ReferFrOwnerID,omitempty" xml:"ReferFrOwnerID,omitempty"`
	ReferFrProductDetailCode             *string  `json:"ReferFrProductDetailCode,omitempty" xml:"ReferFrProductDetailCode,omitempty"`
	Region                               *string  `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceGroup                        *string  `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	RoundDownDiscount                    *float64 `json:"RoundDownDiscount,omitempty" xml:"RoundDownDiscount,omitempty"`
	SplitAccountName                     *string  `json:"SplitAccountName,omitempty" xml:"SplitAccountName,omitempty"`
	SplitItemID                          *string  `json:"SplitItemID,omitempty" xml:"SplitItemID,omitempty"`
	SplitItemName                        *string  `json:"SplitItemName,omitempty" xml:"SplitItemName,omitempty"`
	SplitProductDetail                   *string  `json:"SplitProductDetail,omitempty" xml:"SplitProductDetail,omitempty"`
	SubscriptionType                     *string  `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	Tag                                  *string  `json:"Tag,omitempty" xml:"Tag,omitempty"`
	UnusedAmortizationDeductedByCoupons  *float64 `json:"UnusedAmortizationDeductedByCoupons,omitempty" xml:"UnusedAmortizationDeductedByCoupons,omitempty"`
	UnusedAmortizationInvoiceDiscount    *float64 `json:"UnusedAmortizationInvoiceDiscount,omitempty" xml:"UnusedAmortizationInvoiceDiscount,omitempty"`
	UnusedAmortizationPretaxAmount       *float64 `json:"UnusedAmortizationPretaxAmount,omitempty" xml:"UnusedAmortizationPretaxAmount,omitempty"`
	UnusedAmortizationPretaxGrossAmount  *float64 `json:"UnusedAmortizationPretaxGrossAmount,omitempty" xml:"UnusedAmortizationPretaxGrossAmount,omitempty"`
	UnusedAmortizationRoundDownDiscount  *float64 `json:"UnusedAmortizationRoundDownDiscount,omitempty" xml:"UnusedAmortizationRoundDownDiscount,omitempty"`
	Zone                                 *string  `json:"Zone,omitempty" xml:"Zone,omitempty"`
}

func (s DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetAmortizationPeriod(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.AmortizationPeriod = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetAmortizationPeriodDay(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.AmortizationPeriodDay = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetAmortizationStatus(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.AmortizationStatus = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillAccountID(v int64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillAccountID = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillAccountName(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillAccountName = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillOwnerID(v int64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillOwnerID = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillOwnerName(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillOwnerName = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBizType(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BizType = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetConsumePeriod(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ConsumePeriod = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCostUnit(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CostUnit = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCostUnitCode(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CostUnitCode = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByCoupons(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationInvoiceDiscount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationPretaxAmount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationPretaxGrossAmount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationRoundDownDiscount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetDeductedByCoupons(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.DeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetInstanceConfig(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.InstanceConfig = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetInstanceID(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.InstanceID = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetInternetIP(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.InternetIP = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetIntranetIP(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.IntranetIP = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetInvoiceDiscount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.InvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPretaxAmount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PretaxAmount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPretaxGrossAmount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductCode(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductCode = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductDetail(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductDetail = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductDetailCode(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductDetailCode = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductName(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductName = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetReferFrInstanceID(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ReferFrInstanceID = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetReferFrOwnerID(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ReferFrOwnerID = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetReferFrProductDetailCode(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ReferFrProductDetailCode = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRegion(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetResourceGroup(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ResourceGroup = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRoundDownDiscount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSplitAccountName(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SplitAccountName = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSplitItemID(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SplitItemID = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSplitItemName(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SplitItemName = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSplitProductDetail(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SplitProductDetail = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSubscriptionType(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SubscriptionType = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetTag(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.Tag = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetUnusedAmortizationDeductedByCoupons(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.UnusedAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetUnusedAmortizationInvoiceDiscount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.UnusedAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetUnusedAmortizationPretaxAmount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.UnusedAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetUnusedAmortizationPretaxGrossAmount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.UnusedAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetUnusedAmortizationRoundDownDiscount(v float64) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.UnusedAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetZone(v string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.Zone = &v
	return s
}

type DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse struct {
	Headers    map[string]*string                                                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse) SetHeaders(v map[string]*string) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse) SetStatusCode(v int32) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse) SetBody(v *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody) *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse {
	s.Body = v
	return s
}

type DescribePricingModuleRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The service code. You can query the service code by calling the **QueryProductList** operation.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service. You can query the service type by calling the **QueryProductList** operation.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: subscription
	// *   PayAsYouGo: pay-as-you-go
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s DescribePricingModuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleRequest) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleRequest) SetOwnerId(v int64) *DescribePricingModuleRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribePricingModuleRequest) SetProductCode(v string) *DescribePricingModuleRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribePricingModuleRequest) SetProductType(v string) *DescribePricingModuleRequest {
	s.ProductType = &v
	return s
}

func (s *DescribePricingModuleRequest) SetSubscriptionType(v string) *DescribePricingModuleRequest {
	s.SubscriptionType = &v
	return s
}

type DescribePricingModuleResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DescribePricingModuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribePricingModuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleResponseBody) SetCode(v string) *DescribePricingModuleResponseBody {
	s.Code = &v
	return s
}

func (s *DescribePricingModuleResponseBody) SetData(v *DescribePricingModuleResponseBodyData) *DescribePricingModuleResponseBody {
	s.Data = v
	return s
}

func (s *DescribePricingModuleResponseBody) SetMessage(v string) *DescribePricingModuleResponseBody {
	s.Message = &v
	return s
}

func (s *DescribePricingModuleResponseBody) SetRequestId(v string) *DescribePricingModuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePricingModuleResponseBody) SetSuccess(v bool) *DescribePricingModuleResponseBody {
	s.Success = &v
	return s
}

type DescribePricingModuleResponseBodyData struct {
	// The module attributes.
	AttributeList *DescribePricingModuleResponseBodyDataAttributeList `json:"AttributeList,omitempty" xml:"AttributeList,omitempty" type:"Struct"`
	// The pricing information of modules.
	ModuleList *DescribePricingModuleResponseBodyDataModuleList `json:"ModuleList,omitempty" xml:"ModuleList,omitempty" type:"Struct"`
}

func (s DescribePricingModuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleResponseBodyData) SetAttributeList(v *DescribePricingModuleResponseBodyDataAttributeList) *DescribePricingModuleResponseBodyData {
	s.AttributeList = v
	return s
}

func (s *DescribePricingModuleResponseBodyData) SetModuleList(v *DescribePricingModuleResponseBodyDataModuleList) *DescribePricingModuleResponseBodyData {
	s.ModuleList = v
	return s
}

type DescribePricingModuleResponseBodyDataAttributeList struct {
	Attribute []*DescribePricingModuleResponseBodyDataAttributeListAttribute `json:"Attribute,omitempty" xml:"Attribute,omitempty" type:"Repeated"`
}

func (s DescribePricingModuleResponseBodyDataAttributeList) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleResponseBodyDataAttributeList) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleResponseBodyDataAttributeList) SetAttribute(v []*DescribePricingModuleResponseBodyDataAttributeListAttribute) *DescribePricingModuleResponseBodyDataAttributeList {
	s.Attribute = v
	return s
}

type DescribePricingModuleResponseBodyDataAttributeListAttribute struct {
	// The code of the attribute.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the attribute.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The unit of the attribute.
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	// The attribute values.
	Values *DescribePricingModuleResponseBodyDataAttributeListAttributeValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Struct"`
}

func (s DescribePricingModuleResponseBodyDataAttributeListAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleResponseBodyDataAttributeListAttribute) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleResponseBodyDataAttributeListAttribute) SetCode(v string) *DescribePricingModuleResponseBodyDataAttributeListAttribute {
	s.Code = &v
	return s
}

func (s *DescribePricingModuleResponseBodyDataAttributeListAttribute) SetName(v string) *DescribePricingModuleResponseBodyDataAttributeListAttribute {
	s.Name = &v
	return s
}

func (s *DescribePricingModuleResponseBodyDataAttributeListAttribute) SetUnit(v string) *DescribePricingModuleResponseBodyDataAttributeListAttribute {
	s.Unit = &v
	return s
}

func (s *DescribePricingModuleResponseBodyDataAttributeListAttribute) SetValues(v *DescribePricingModuleResponseBodyDataAttributeListAttributeValues) *DescribePricingModuleResponseBodyDataAttributeListAttribute {
	s.Values = v
	return s
}

type DescribePricingModuleResponseBodyDataAttributeListAttributeValues struct {
	AttributeValue []*DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue `json:"AttributeValue,omitempty" xml:"AttributeValue,omitempty" type:"Repeated"`
}

func (s DescribePricingModuleResponseBodyDataAttributeListAttributeValues) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleResponseBodyDataAttributeListAttributeValues) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleResponseBodyDataAttributeListAttributeValues) SetAttributeValue(v []*DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue) *DescribePricingModuleResponseBodyDataAttributeListAttributeValues {
	s.AttributeValue = v
	return s
}

type DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue struct {
	// The attribute value that corresponds to the module code.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The description of the module values.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The type of the attribute value that corresponds to the module code. Valid values:
	//
	// *   single_float: single value
	// *   range_float: range value
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The attribute value that corresponds to the module code.
	//
	// >  If the Type parameter is set to range_float, the valid values of this parameter range from 1024 to 1024000. A value of 1024 indicates that the step size is 1024.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue) SetName(v string) *DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue {
	s.Name = &v
	return s
}

func (s *DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue) SetRemark(v string) *DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue {
	s.Remark = &v
	return s
}

func (s *DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue) SetType(v string) *DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue {
	s.Type = &v
	return s
}

func (s *DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue) SetValue(v string) *DescribePricingModuleResponseBodyDataAttributeListAttributeValuesAttributeValue {
	s.Value = &v
	return s
}

type DescribePricingModuleResponseBodyDataModuleList struct {
	Module []*DescribePricingModuleResponseBodyDataModuleListModule `json:"Module,omitempty" xml:"Module,omitempty" type:"Repeated"`
}

func (s DescribePricingModuleResponseBodyDataModuleList) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleResponseBodyDataModuleList) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleResponseBodyDataModuleList) SetModule(v []*DescribePricingModuleResponseBodyDataModuleListModule) *DescribePricingModuleResponseBodyDataModuleList {
	s.Module = v
	return s
}

type DescribePricingModuleResponseBodyDataModuleListModule struct {
	ConfigList *DescribePricingModuleResponseBodyDataModuleListModuleConfigList `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Struct"`
	// The currency. Default value: CNY.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The code of the pricing module.
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	// The name of the pricing module.
	ModuleName *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	// The price type. Valid values:
	//
	// *   Usage: usage price
	// *   Hour: hourly price
	// *   Day: daily price
	// *   Week: weekly price
	// *   Month: monthly price
	// *   Year: annual price
	PriceType *string `json:"PriceType,omitempty" xml:"PriceType,omitempty"`
}

func (s DescribePricingModuleResponseBodyDataModuleListModule) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleResponseBodyDataModuleListModule) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleResponseBodyDataModuleListModule) SetConfigList(v *DescribePricingModuleResponseBodyDataModuleListModuleConfigList) *DescribePricingModuleResponseBodyDataModuleListModule {
	s.ConfigList = v
	return s
}

func (s *DescribePricingModuleResponseBodyDataModuleListModule) SetCurrency(v string) *DescribePricingModuleResponseBodyDataModuleListModule {
	s.Currency = &v
	return s
}

func (s *DescribePricingModuleResponseBodyDataModuleListModule) SetModuleCode(v string) *DescribePricingModuleResponseBodyDataModuleListModule {
	s.ModuleCode = &v
	return s
}

func (s *DescribePricingModuleResponseBodyDataModuleListModule) SetModuleName(v string) *DescribePricingModuleResponseBodyDataModuleListModule {
	s.ModuleName = &v
	return s
}

func (s *DescribePricingModuleResponseBodyDataModuleListModule) SetPriceType(v string) *DescribePricingModuleResponseBodyDataModuleListModule {
	s.PriceType = &v
	return s
}

type DescribePricingModuleResponseBodyDataModuleListModuleConfigList struct {
	ConfigList []*string `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Repeated"`
}

func (s DescribePricingModuleResponseBodyDataModuleListModuleConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleResponseBodyDataModuleListModuleConfigList) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleResponseBodyDataModuleListModuleConfigList) SetConfigList(v []*string) *DescribePricingModuleResponseBodyDataModuleListModuleConfigList {
	s.ConfigList = v
	return s
}

type DescribePricingModuleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePricingModuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePricingModuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePricingModuleResponse) GoString() string {
	return s.String()
}

func (s *DescribePricingModuleResponse) SetHeaders(v map[string]*string) *DescribePricingModuleResponse {
	s.Headers = v
	return s
}

func (s *DescribePricingModuleResponse) SetStatusCode(v int32) *DescribePricingModuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePricingModuleResponse) SetBody(v *DescribePricingModuleResponseBody) *DescribePricingModuleResponse {
	s.Body = v
	return s
}

type DescribeProductAmortizedCostByAmortizationPeriodRequest struct {
	// The instance ID that is used to filter bills. You can specify multiple instance IDs to query bills of multiple instances. If you leave this parameter empty, the bills of all instances are queried by default. You can specify a maximum of 10 instance IDs.
	BillOwnerIdList []*string `json:"BillOwnerIdList,omitempty" xml:"BillOwnerIdList,omitempty" type:"Repeated"`
	// The ID of the member that needs to settle the bill. The member ID is used to filter bills. If you specify a value for this parameter, you can query the bills of the specified member. If you leave this parameter empty, the bills of the current account and all members of the current account are queried by default. You can specify a maximum of 10 IDs.
	BillUserIdList []*string `json:"BillUserIdList,omitempty" xml:"BillUserIdList,omitempty" type:"Repeated"`
	// The allocation month. Format: YYYY-MM.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The billing cycle that is used to filter bills. You can specify a maximum of 10 billing cycles.
	ConsumePeriodFilter []*string `json:"ConsumePeriodFilter,omitempty" xml:"ConsumePeriodFilter,omitempty" type:"Repeated"`
	// The code of the cost center.
	CostUnitCode *string `json:"CostUnitCode,omitempty" xml:"CostUnitCode,omitempty"`
	// The maximum number of entries to return. Default value: 20. Maximum value: 300.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The position from which the query starts. The parameter must be left empty or set to the value of the NextToken parameter returned from the last call. Otherwise, an error is returned. If this parameter is left empty, data is queried from the beginning.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The code of the service. You can obtain the value of this parameter by calling the QueryProductList operation or the DescribeResourcePackageProduct operation.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The specific service resource.
	ProductDetail *string `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method
	// *   PayAsYouGo: the pay-as-you-go billing method
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s DescribeProductAmortizedCostByAmortizationPeriodRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductAmortizedCostByAmortizationPeriodRequest) GoString() string {
	return s.String()
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodRequest) SetBillOwnerIdList(v []*string) *DescribeProductAmortizedCostByAmortizationPeriodRequest {
	s.BillOwnerIdList = v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodRequest) SetBillUserIdList(v []*string) *DescribeProductAmortizedCostByAmortizationPeriodRequest {
	s.BillUserIdList = v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodRequest) SetBillingCycle(v string) *DescribeProductAmortizedCostByAmortizationPeriodRequest {
	s.BillingCycle = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodRequest) SetConsumePeriodFilter(v []*string) *DescribeProductAmortizedCostByAmortizationPeriodRequest {
	s.ConsumePeriodFilter = v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodRequest) SetCostUnitCode(v string) *DescribeProductAmortizedCostByAmortizationPeriodRequest {
	s.CostUnitCode = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodRequest) SetMaxResults(v int32) *DescribeProductAmortizedCostByAmortizationPeriodRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodRequest) SetNextToken(v string) *DescribeProductAmortizedCostByAmortizationPeriodRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodRequest) SetProductCode(v string) *DescribeProductAmortizedCostByAmortizationPeriodRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodRequest) SetProductDetail(v string) *DescribeProductAmortizedCostByAmortizationPeriodRequest {
	s.ProductDetail = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodRequest) SetSubscriptionType(v string) *DescribeProductAmortizedCostByAmortizationPeriodRequest {
	s.SubscriptionType = &v
	return s
}

type DescribeProductAmortizedCostByAmortizationPeriodResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeProductAmortizedCostByAmortizationPeriodResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductAmortizedCostByAmortizationPeriodResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBody) SetCode(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBody) SetData(v *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData) *DescribeProductAmortizedCostByAmortizationPeriodResponseBody {
	s.Data = v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBody) SetMessage(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBody) SetRequestId(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBody) SetSuccess(v bool) *DescribeProductAmortizedCostByAmortizationPeriodResponseBody {
	s.Success = &v
	return s
}

type DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData struct {
	// The ID of the account.
	AccountID *string `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// The name of the account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The data entries returned.
	Items []*DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The maximum number of entries returned.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The position from which the results started to return. The parameter must be left empty or set to the value of the NextToken parameter returned from the last call. Otherwise, an error is returned. If this parameter is left empty, data is queried from the beginning.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData) SetAccountID(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData) SetAccountName(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData) SetItems(v []*DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData) SetMaxResults(v int32) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData) SetNextToken(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData) SetTotalCount(v int32) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems struct {
	// The allocation month. Format: YYYYMM.
	AmortizationPeriod *string `json:"AmortizationPeriod,omitempty" xml:"AmortizationPeriod,omitempty"`
	// The allocation status. Valid values:
	//
	// *   amortized: allocated
	// *   unAmortized: not allocated
	AmortizationStatus *string `json:"AmortizationStatus,omitempty" xml:"AmortizationStatus,omitempty"`
	// The ID of the account to which the bill belongs.
	BillAccountID *int64 `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	// The name of the account to which the bill belongs.
	BillAccountName *string `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	// The ID of the account to which the resource belongs.
	BillOwnerID *int64 `json:"BillOwnerID,omitempty" xml:"BillOwnerID,omitempty"`
	// The name of the account to which the resource belongs.
	BillOwnerName *string `json:"BillOwnerName,omitempty" xml:"BillOwnerName,omitempty"`
	// The business type.
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The billing cycle. Format: YYYYMM.
	ConsumePeriod *string `json:"ConsumePeriod,omitempty" xml:"ConsumePeriod,omitempty"`
	// The amount deducted by using vouchers and allocated to the current allocation month.
	CurrentAmortizationDeductedByCashCoupons *float64 `json:"CurrentAmortizationDeductedByCashCoupons,omitempty" xml:"CurrentAmortizationDeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons and allocated to the current allocation month.
	CurrentAmortizationDeductedByCoupons *float64 `json:"CurrentAmortizationDeductedByCoupons,omitempty" xml:"CurrentAmortizationDeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards and allocated to the current allocation month.
	CurrentAmortizationDeductedByPrepaidCard *float64 `json:"CurrentAmortizationDeductedByPrepaidCard,omitempty" xml:"CurrentAmortizationDeductedByPrepaidCard,omitempty"`
	// The expenditure amount allocated to the current allocation month. Invoicing is supported.
	CurrentAmortizationExpenditureAmount *float64 `json:"CurrentAmortizationExpenditureAmount,omitempty" xml:"CurrentAmortizationExpenditureAmount,omitempty"`
	// The discount amount allocated to the current allocation month.
	CurrentAmortizationInvoiceDiscount *float64 `json:"CurrentAmortizationInvoiceDiscount,omitempty" xml:"CurrentAmortizationInvoiceDiscount,omitempty"`
	// The pretax amount allocated to the current allocation month.
	CurrentAmortizationPretaxAmount *float64 `json:"CurrentAmortizationPretaxAmount,omitempty" xml:"CurrentAmortizationPretaxAmount,omitempty"`
	// The pretax gross amount allocated to the current allocation month.
	CurrentAmortizationPretaxGrossAmount *float64 `json:"CurrentAmortizationPretaxGrossAmount,omitempty" xml:"CurrentAmortizationPretaxGrossAmount,omitempty"`
	// The round-off amount allocated to the current allocation month.
	CurrentAmortizationRoundDownDiscount *float64 `json:"CurrentAmortizationRoundDownDiscount,omitempty" xml:"CurrentAmortizationRoundDownDiscount,omitempty"`
	// The amount deducted by using vouchers.
	DeductedByCashCoupons *float64 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons.
	DeductedByCoupons *float64 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards.
	DeductedByPrepaidCard *float64 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	// The expenditure amount. Invoicing is supported.
	ExpenditureAmount *float64 `json:"ExpenditureAmount,omitempty" xml:"ExpenditureAmount,omitempty"`
	// The discount amount.
	InvoiceDiscount *float64 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The pretax amount.
	PretaxAmount *float64 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	// The pretax gross amount.
	PretaxGrossAmount *float64 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The amount deducted by using vouchers and allocated before the current allocation month.
	PreviouslyAmortizedDeductedByCashCoupons *float64 `json:"PreviouslyAmortizedDeductedByCashCoupons,omitempty" xml:"PreviouslyAmortizedDeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons and allocated before the current allocation month.
	PreviouslyAmortizedDeductedByCoupons *float64 `json:"PreviouslyAmortizedDeductedByCoupons,omitempty" xml:"PreviouslyAmortizedDeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards and allocated before the current allocation month.
	PreviouslyAmortizedDeductedByPrepaidCard *float64 `json:"PreviouslyAmortizedDeductedByPrepaidCard,omitempty" xml:"PreviouslyAmortizedDeductedByPrepaidCard,omitempty"`
	// The expenditure amount allocated before the current allocation month. Invoicing is supported.
	PreviouslyAmortizedExpenditureAmount *float64 `json:"PreviouslyAmortizedExpenditureAmount,omitempty" xml:"PreviouslyAmortizedExpenditureAmount,omitempty"`
	// The discount amount allocated before the current allocation month.
	PreviouslyAmortizedInvoiceDiscount *float64 `json:"PreviouslyAmortizedInvoiceDiscount,omitempty" xml:"PreviouslyAmortizedInvoiceDiscount,omitempty"`
	// The pretax amount allocated before the current allocation month.
	PreviouslyAmortizedPretaxAmount *float64 `json:"PreviouslyAmortizedPretaxAmount,omitempty" xml:"PreviouslyAmortizedPretaxAmount,omitempty"`
	// The pretax gross amount allocated before the current allocation month.
	PreviouslyAmortizedPretaxGrossAmount *float64 `json:"PreviouslyAmortizedPretaxGrossAmount,omitempty" xml:"PreviouslyAmortizedPretaxGrossAmount,omitempty"`
	// The round-off amount allocated before the current allocation month.
	PreviouslyAmortizedRoundDownDiscount *float64 `json:"PreviouslyAmortizedRoundDownDiscount,omitempty" xml:"PreviouslyAmortizedRoundDownDiscount,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The specific service resource.
	ProductDetail *string `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	// The code of the specific service resource.
	ProductDetailCode *string `json:"ProductDetailCode,omitempty" xml:"ProductDetailCode,omitempty"`
	// The name of the service.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The amount deducted by using vouchers and to be allocated to one or more future allocation months.
	RemainingAmortizationDeductedByCashCoupons *float64 `json:"RemainingAmortizationDeductedByCashCoupons,omitempty" xml:"RemainingAmortizationDeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons and to be allocated to one or more future allocation months.
	RemainingAmortizationDeductedByCoupons *float64 `json:"RemainingAmortizationDeductedByCoupons,omitempty" xml:"RemainingAmortizationDeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards and to be allocated to one or more future allocation months.
	RemainingAmortizationDeductedByPrepaidCard *float64 `json:"RemainingAmortizationDeductedByPrepaidCard,omitempty" xml:"RemainingAmortizationDeductedByPrepaidCard,omitempty"`
	// The expenditure amount to be allocated to one or more future allocation months. Invoicing is supported.
	RemainingAmortizationExpenditureAmount *float64 `json:"RemainingAmortizationExpenditureAmount,omitempty" xml:"RemainingAmortizationExpenditureAmount,omitempty"`
	// The discount amount to be allocated to one or more future allocation months.
	RemainingAmortizationInvoiceDiscount *float64 `json:"RemainingAmortizationInvoiceDiscount,omitempty" xml:"RemainingAmortizationInvoiceDiscount,omitempty"`
	// The pretax amount to be allocated to one or more future allocation months.
	RemainingAmortizationPretaxAmount *float64 `json:"RemainingAmortizationPretaxAmount,omitempty" xml:"RemainingAmortizationPretaxAmount,omitempty"`
	// The pretax gross amount to be allocated to one or more future allocation months.
	RemainingAmortizationPretaxGrossAmount *float64 `json:"RemainingAmortizationPretaxGrossAmount,omitempty" xml:"RemainingAmortizationPretaxGrossAmount,omitempty"`
	// The round-off amount to be allocated to one or more future allocation months.
	RemainingAmortizationRoundDownDiscount *float64 `json:"RemainingAmortizationRoundDownDiscount,omitempty" xml:"RemainingAmortizationRoundDownDiscount,omitempty"`
	// The round-off amount.
	RoundDownDiscount *float64 `json:"RoundDownDiscount,omitempty" xml:"RoundDownDiscount,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method
	// *   PayAsYouGo: the pay-as-you-go billing method
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetAmortizationPeriod(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.AmortizationPeriod = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetAmortizationStatus(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.AmortizationStatus = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillAccountID(v int64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillAccountID = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillAccountName(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillAccountName = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillOwnerID(v int64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillOwnerID = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBillOwnerName(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BillOwnerName = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetBizType(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.BizType = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetConsumePeriod(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ConsumePeriod = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByCashCoupons(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCashCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByCoupons(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByPrepaidCard(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationExpenditureAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationExpenditureAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationInvoiceDiscount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationPretaxAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationPretaxGrossAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetCurrentAmortizationRoundDownDiscount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.CurrentAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetDeductedByCashCoupons(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetDeductedByCoupons(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.DeductedByCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetDeductedByPrepaidCard(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetExpenditureAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ExpenditureAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetInvoiceDiscount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.InvoiceDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPretaxAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PretaxAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPretaxGrossAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PretaxGrossAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByCashCoupons(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByCashCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByCoupons(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByPrepaidCard(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedExpenditureAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedExpenditureAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedInvoiceDiscount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedInvoiceDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedPretaxAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedPretaxAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedPretaxGrossAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedPretaxGrossAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetPreviouslyAmortizedRoundDownDiscount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.PreviouslyAmortizedRoundDownDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductCode(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductCode = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductDetail(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductDetail = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductDetailCode(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductDetailCode = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetProductName(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.ProductName = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByCashCoupons(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByCashCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByCoupons(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByPrepaidCard(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationExpenditureAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationExpenditureAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationInvoiceDiscount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationPretaxAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationPretaxGrossAmount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRemainingAmortizationRoundDownDiscount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RemainingAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetRoundDownDiscount(v float64) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.RoundDownDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems) SetSubscriptionType(v string) *DescribeProductAmortizedCostByAmortizationPeriodResponseBodyDataItems {
	s.SubscriptionType = &v
	return s
}

type DescribeProductAmortizedCostByAmortizationPeriodResponse struct {
	Headers    map[string]*string                                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProductAmortizedCostByAmortizationPeriodResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProductAmortizedCostByAmortizationPeriodResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductAmortizedCostByAmortizationPeriodResponse) GoString() string {
	return s.String()
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponse) SetHeaders(v map[string]*string) *DescribeProductAmortizedCostByAmortizationPeriodResponse {
	s.Headers = v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponse) SetStatusCode(v int32) *DescribeProductAmortizedCostByAmortizationPeriodResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProductAmortizedCostByAmortizationPeriodResponse) SetBody(v *DescribeProductAmortizedCostByAmortizationPeriodResponseBody) *DescribeProductAmortizedCostByAmortizationPeriodResponse {
	s.Body = v
	return s
}

type DescribeProductAmortizedCostByConsumePeriodRequest struct {
	AmortizationPeriodFilter []*string `json:"AmortizationPeriodFilter,omitempty" xml:"AmortizationPeriodFilter,omitempty" type:"Repeated"`
	BillOwnerIdList          []*string `json:"BillOwnerIdList,omitempty" xml:"BillOwnerIdList,omitempty" type:"Repeated"`
	BillUserIdList           []*string `json:"BillUserIdList,omitempty" xml:"BillUserIdList,omitempty" type:"Repeated"`
	BillingCycle             *string   `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	CostUnitCode             *string   `json:"CostUnitCode,omitempty" xml:"CostUnitCode,omitempty"`
	MaxResults               *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken                *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ProductCode              *string   `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductDetail            *string   `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	SubscriptionType         *string   `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s DescribeProductAmortizedCostByConsumePeriodRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductAmortizedCostByConsumePeriodRequest) GoString() string {
	return s.String()
}

func (s *DescribeProductAmortizedCostByConsumePeriodRequest) SetAmortizationPeriodFilter(v []*string) *DescribeProductAmortizedCostByConsumePeriodRequest {
	s.AmortizationPeriodFilter = v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodRequest) SetBillOwnerIdList(v []*string) *DescribeProductAmortizedCostByConsumePeriodRequest {
	s.BillOwnerIdList = v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodRequest) SetBillUserIdList(v []*string) *DescribeProductAmortizedCostByConsumePeriodRequest {
	s.BillUserIdList = v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodRequest) SetBillingCycle(v string) *DescribeProductAmortizedCostByConsumePeriodRequest {
	s.BillingCycle = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodRequest) SetCostUnitCode(v string) *DescribeProductAmortizedCostByConsumePeriodRequest {
	s.CostUnitCode = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodRequest) SetMaxResults(v int32) *DescribeProductAmortizedCostByConsumePeriodRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodRequest) SetNextToken(v string) *DescribeProductAmortizedCostByConsumePeriodRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodRequest) SetProductCode(v string) *DescribeProductAmortizedCostByConsumePeriodRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodRequest) SetProductDetail(v string) *DescribeProductAmortizedCostByConsumePeriodRequest {
	s.ProductDetail = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodRequest) SetSubscriptionType(v string) *DescribeProductAmortizedCostByConsumePeriodRequest {
	s.SubscriptionType = &v
	return s
}

type DescribeProductAmortizedCostByConsumePeriodResponseBody struct {
	Code      *string                                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeProductAmortizedCostByConsumePeriodResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeProductAmortizedCostByConsumePeriodResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductAmortizedCostByConsumePeriodResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBody) SetCode(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBody) SetData(v *DescribeProductAmortizedCostByConsumePeriodResponseBodyData) *DescribeProductAmortizedCostByConsumePeriodResponseBody {
	s.Data = v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBody) SetMessage(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBody) SetRequestId(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBody) SetSuccess(v bool) *DescribeProductAmortizedCostByConsumePeriodResponseBody {
	s.Success = &v
	return s
}

type DescribeProductAmortizedCostByConsumePeriodResponseBodyData struct {
	AccountID   *string                                                             `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	AccountName *string                                                             `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	Items       []*DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	MaxResults  *int32                                                              `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken   *string                                                             `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TotalCount  *int32                                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeProductAmortizedCostByConsumePeriodResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductAmortizedCostByConsumePeriodResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyData) SetAccountID(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyData) SetAccountName(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyData) SetItems(v []*DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) *DescribeProductAmortizedCostByConsumePeriodResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyData) SetMaxResults(v int32) *DescribeProductAmortizedCostByConsumePeriodResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyData) SetNextToken(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyData) SetTotalCount(v int32) *DescribeProductAmortizedCostByConsumePeriodResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems struct {
	AmortizationPeriod                         *string  `json:"AmortizationPeriod,omitempty" xml:"AmortizationPeriod,omitempty"`
	AmortizationStatus                         *string  `json:"AmortizationStatus,omitempty" xml:"AmortizationStatus,omitempty"`
	BillAccountID                              *int64   `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	BillAccountName                            *string  `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	BillOwnerID                                *int64   `json:"BillOwnerID,omitempty" xml:"BillOwnerID,omitempty"`
	BillOwnerName                              *string  `json:"BillOwnerName,omitempty" xml:"BillOwnerName,omitempty"`
	BizType                                    *string  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ConsumePeriod                              *string  `json:"ConsumePeriod,omitempty" xml:"ConsumePeriod,omitempty"`
	CurrentAmortizationDeductedByCashCoupons   *float64 `json:"CurrentAmortizationDeductedByCashCoupons,omitempty" xml:"CurrentAmortizationDeductedByCashCoupons,omitempty"`
	CurrentAmortizationDeductedByCoupons       *float64 `json:"CurrentAmortizationDeductedByCoupons,omitempty" xml:"CurrentAmortizationDeductedByCoupons,omitempty"`
	CurrentAmortizationDeductedByPrepaidCard   *float64 `json:"CurrentAmortizationDeductedByPrepaidCard,omitempty" xml:"CurrentAmortizationDeductedByPrepaidCard,omitempty"`
	CurrentAmortizationExpenditureAmount       *float64 `json:"CurrentAmortizationExpenditureAmount,omitempty" xml:"CurrentAmortizationExpenditureAmount,omitempty"`
	CurrentAmortizationInvoiceDiscount         *float64 `json:"CurrentAmortizationInvoiceDiscount,omitempty" xml:"CurrentAmortizationInvoiceDiscount,omitempty"`
	CurrentAmortizationPretaxAmount            *float64 `json:"CurrentAmortizationPretaxAmount,omitempty" xml:"CurrentAmortizationPretaxAmount,omitempty"`
	CurrentAmortizationPretaxGrossAmount       *float64 `json:"CurrentAmortizationPretaxGrossAmount,omitempty" xml:"CurrentAmortizationPretaxGrossAmount,omitempty"`
	CurrentAmortizationRoundDownDiscount       *float64 `json:"CurrentAmortizationRoundDownDiscount,omitempty" xml:"CurrentAmortizationRoundDownDiscount,omitempty"`
	DeductedByCashCoupons                      *float64 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	DeductedByCoupons                          *float64 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	DeductedByPrepaidCard                      *float64 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	ExpenditureAmount                          *float64 `json:"ExpenditureAmount,omitempty" xml:"ExpenditureAmount,omitempty"`
	InvoiceDiscount                            *float64 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	PretaxAmount                               *float64 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	PretaxGrossAmount                          *float64 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	PreviouslyAmortizedDeductedByCashCoupons   *float64 `json:"PreviouslyAmortizedDeductedByCashCoupons,omitempty" xml:"PreviouslyAmortizedDeductedByCashCoupons,omitempty"`
	PreviouslyAmortizedDeductedByCoupons       *float64 `json:"PreviouslyAmortizedDeductedByCoupons,omitempty" xml:"PreviouslyAmortizedDeductedByCoupons,omitempty"`
	PreviouslyAmortizedDeductedByPrepaidCard   *float64 `json:"PreviouslyAmortizedDeductedByPrepaidCard,omitempty" xml:"PreviouslyAmortizedDeductedByPrepaidCard,omitempty"`
	PreviouslyAmortizedExpenditureAmount       *float64 `json:"PreviouslyAmortizedExpenditureAmount,omitempty" xml:"PreviouslyAmortizedExpenditureAmount,omitempty"`
	PreviouslyAmortizedInvoiceDiscount         *float64 `json:"PreviouslyAmortizedInvoiceDiscount,omitempty" xml:"PreviouslyAmortizedInvoiceDiscount,omitempty"`
	PreviouslyAmortizedPretaxAmount            *float64 `json:"PreviouslyAmortizedPretaxAmount,omitempty" xml:"PreviouslyAmortizedPretaxAmount,omitempty"`
	PreviouslyAmortizedPretaxGrossAmount       *float64 `json:"PreviouslyAmortizedPretaxGrossAmount,omitempty" xml:"PreviouslyAmortizedPretaxGrossAmount,omitempty"`
	PreviouslyAmortizedRoundDownDiscount       *float64 `json:"PreviouslyAmortizedRoundDownDiscount,omitempty" xml:"PreviouslyAmortizedRoundDownDiscount,omitempty"`
	ProductCode                                *string  `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductDetail                              *string  `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	ProductDetailCode                          *string  `json:"ProductDetailCode,omitempty" xml:"ProductDetailCode,omitempty"`
	ProductName                                *string  `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	RemainingAmortizationDeductedByCashCoupons *float64 `json:"RemainingAmortizationDeductedByCashCoupons,omitempty" xml:"RemainingAmortizationDeductedByCashCoupons,omitempty"`
	RemainingAmortizationDeductedByCoupons     *float64 `json:"RemainingAmortizationDeductedByCoupons,omitempty" xml:"RemainingAmortizationDeductedByCoupons,omitempty"`
	RemainingAmortizationDeductedByPrepaidCard *float64 `json:"RemainingAmortizationDeductedByPrepaidCard,omitempty" xml:"RemainingAmortizationDeductedByPrepaidCard,omitempty"`
	RemainingAmortizationExpenditureAmount     *float64 `json:"RemainingAmortizationExpenditureAmount,omitempty" xml:"RemainingAmortizationExpenditureAmount,omitempty"`
	RemainingAmortizationInvoiceDiscount       *float64 `json:"RemainingAmortizationInvoiceDiscount,omitempty" xml:"RemainingAmortizationInvoiceDiscount,omitempty"`
	RemainingAmortizationPretaxAmount          *float64 `json:"RemainingAmortizationPretaxAmount,omitempty" xml:"RemainingAmortizationPretaxAmount,omitempty"`
	RemainingAmortizationPretaxGrossAmount     *float64 `json:"RemainingAmortizationPretaxGrossAmount,omitempty" xml:"RemainingAmortizationPretaxGrossAmount,omitempty"`
	RemainingAmortizationRoundDownDiscount     *float64 `json:"RemainingAmortizationRoundDownDiscount,omitempty" xml:"RemainingAmortizationRoundDownDiscount,omitempty"`
	RoundDownDiscount                          *float64 `json:"RoundDownDiscount,omitempty" xml:"RoundDownDiscount,omitempty"`
	SubscriptionType                           *string  `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetAmortizationPeriod(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.AmortizationPeriod = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetAmortizationStatus(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.AmortizationStatus = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetBillAccountID(v int64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.BillAccountID = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetBillAccountName(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.BillAccountName = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetBillOwnerID(v int64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.BillOwnerID = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetBillOwnerName(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.BillOwnerName = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetBizType(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.BizType = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetConsumePeriod(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ConsumePeriod = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByCashCoupons(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCashCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByCoupons(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationDeductedByPrepaidCard(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationExpenditureAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationExpenditureAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationInvoiceDiscount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationPretaxAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationPretaxGrossAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetCurrentAmortizationRoundDownDiscount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.CurrentAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetDeductedByCashCoupons(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetDeductedByCoupons(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.DeductedByCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetDeductedByPrepaidCard(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetExpenditureAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ExpenditureAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetInvoiceDiscount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.InvoiceDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetPretaxAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PretaxAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetPretaxGrossAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PretaxGrossAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByCashCoupons(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByCashCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByCoupons(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedDeductedByPrepaidCard(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedExpenditureAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedExpenditureAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedInvoiceDiscount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedInvoiceDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedPretaxAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedPretaxAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedPretaxGrossAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedPretaxGrossAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetPreviouslyAmortizedRoundDownDiscount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.PreviouslyAmortizedRoundDownDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetProductCode(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ProductCode = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetProductDetail(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ProductDetail = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetProductDetailCode(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ProductDetailCode = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetProductName(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.ProductName = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByCashCoupons(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByCashCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByCoupons(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByCoupons = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationDeductedByPrepaidCard(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationDeductedByPrepaidCard = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationExpenditureAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationExpenditureAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationInvoiceDiscount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationInvoiceDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationPretaxAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationPretaxAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationPretaxGrossAmount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationPretaxGrossAmount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetRemainingAmortizationRoundDownDiscount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RemainingAmortizationRoundDownDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetRoundDownDiscount(v float64) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.RoundDownDiscount = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems) SetSubscriptionType(v string) *DescribeProductAmortizedCostByConsumePeriodResponseBodyDataItems {
	s.SubscriptionType = &v
	return s
}

type DescribeProductAmortizedCostByConsumePeriodResponse struct {
	Headers    map[string]*string                                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProductAmortizedCostByConsumePeriodResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProductAmortizedCostByConsumePeriodResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductAmortizedCostByConsumePeriodResponse) GoString() string {
	return s.String()
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponse) SetHeaders(v map[string]*string) *DescribeProductAmortizedCostByConsumePeriodResponse {
	s.Headers = v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponse) SetStatusCode(v int32) *DescribeProductAmortizedCostByConsumePeriodResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProductAmortizedCostByConsumePeriodResponse) SetBody(v *DescribeProductAmortizedCostByConsumePeriodResponseBody) *DescribeProductAmortizedCostByConsumePeriodResponse {
	s.Body = v
	return s
}

type DescribeResourceCoverageDetailRequest struct {
	// The ID of the account for which you want to query coverage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	EndPeriod *string `json:"EndPeriod,omitempty" xml:"EndPeriod,omitempty"`
	// The maximum number of entries to return. Default value: 20. Maximum value: 300.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used to retrieve the next page of results. You do not need to set this parameter if you query coverage details within a specific time range for the first time. The response returns a token that you can use to query coverage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The time granularity at which coverage details are queried. Valid values: MONTH, DAY, and HOUR.
	PeriodType *string `json:"PeriodType,omitempty" xml:"PeriodType,omitempty"`
	// The type of deduction plans whose coverage details are queried. Valid values: RI and SCU.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The beginning of the time range to query.
	//
	// The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	StartPeriod *string `json:"StartPeriod,omitempty" xml:"StartPeriod,omitempty"`
}

func (s DescribeResourceCoverageDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageDetailRequest) SetBillOwnerId(v int64) *DescribeResourceCoverageDetailRequest {
	s.BillOwnerId = &v
	return s
}

func (s *DescribeResourceCoverageDetailRequest) SetEndPeriod(v string) *DescribeResourceCoverageDetailRequest {
	s.EndPeriod = &v
	return s
}

func (s *DescribeResourceCoverageDetailRequest) SetMaxResults(v int32) *DescribeResourceCoverageDetailRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeResourceCoverageDetailRequest) SetNextToken(v string) *DescribeResourceCoverageDetailRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeResourceCoverageDetailRequest) SetPeriodType(v string) *DescribeResourceCoverageDetailRequest {
	s.PeriodType = &v
	return s
}

func (s *DescribeResourceCoverageDetailRequest) SetResourceType(v string) *DescribeResourceCoverageDetailRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceCoverageDetailRequest) SetStartPeriod(v string) *DescribeResourceCoverageDetailRequest {
	s.StartPeriod = &v
	return s
}

type DescribeResourceCoverageDetailResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DescribeResourceCoverageDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeResourceCoverageDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageDetailResponseBody) SetCode(v string) *DescribeResourceCoverageDetailResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBody) SetData(v *DescribeResourceCoverageDetailResponseBodyData) *DescribeResourceCoverageDetailResponseBody {
	s.Data = v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBody) SetMessage(v string) *DescribeResourceCoverageDetailResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBody) SetRequestId(v string) *DescribeResourceCoverageDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBody) SetSuccess(v bool) *DescribeResourceCoverageDetailResponseBody {
	s.Success = &v
	return s
}

type DescribeResourceCoverageDetailResponseBodyData struct {
	// The data entries.
	Items []*DescribeResourceCoverageDetailResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The number of entries returned on the current page.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token of the next page.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeResourceCoverageDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageDetailResponseBodyData) SetItems(v []*DescribeResourceCoverageDetailResponseBodyDataItems) *DescribeResourceCoverageDetailResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyData) SetMaxResults(v int32) *DescribeResourceCoverageDetailResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyData) SetNextToken(v string) *DescribeResourceCoverageDetailResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyData) SetTotalCount(v int32) *DescribeResourceCoverageDetailResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeResourceCoverageDetailResponseBodyDataItems struct {
	// The unit that is used to measure the resources deducted from deduction plans.
	CapacityUnit *string `json:"CapacityUnit,omitempty" xml:"CapacityUnit,omitempty"`
	// The code of the service.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The name and billing method of the service.
	CommodityName *string `json:"CommodityName,omitempty" xml:"CommodityName,omitempty"`
	// The coverage rate of a deduction plan.
	CoveragePercentage *float32 `json:"CoveragePercentage,omitempty" xml:"CoveragePercentage,omitempty"`
	// The currency in which deduction plans were priced.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The amount of the resources deducted from a deduction plan.
	DeductQuantity *float32 `json:"DeductQuantity,omitempty" xml:"DeductQuantity,omitempty"`
	// The end of the time range in which the coverage details were queried.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of a pay-as-you-go instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The specifications of a deduction plan.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The amount of the bill.
	PaymentAmount *float32 `json:"PaymentAmount,omitempty" xml:"PaymentAmount,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The name of the service.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The code of the region.
	RegionNo *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	// The beginning of the time range in which the coverage details were queried.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The total amount of resources consumed.
	TotalQuantity *float32 `json:"TotalQuantity,omitempty" xml:"TotalQuantity,omitempty"`
	// The ID of the account.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The username of the account.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// The code of the zone.
	Zone *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
	// The zone.
	ZoneName *string `json:"ZoneName,omitempty" xml:"ZoneName,omitempty"`
}

func (s DescribeResourceCoverageDetailResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageDetailResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetCapacityUnit(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.CapacityUnit = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetCommodityCode(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.CommodityCode = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetCommodityName(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.CommodityName = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetCoveragePercentage(v float32) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.CoveragePercentage = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetCurrency(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.Currency = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetDeductQuantity(v float32) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.DeductQuantity = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetEndTime(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.EndTime = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetInstanceId(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.InstanceId = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetInstanceSpec(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetPaymentAmount(v float32) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.PaymentAmount = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetProductCode(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.ProductCode = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetProductName(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.ProductName = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetRegion(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetRegionNo(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.RegionNo = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetStartTime(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.StartTime = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetTotalQuantity(v float32) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.TotalQuantity = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetUserId(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.UserId = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetUserName(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.UserName = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetZone(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.Zone = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponseBodyDataItems) SetZoneName(v string) *DescribeResourceCoverageDetailResponseBodyDataItems {
	s.ZoneName = &v
	return s
}

type DescribeResourceCoverageDetailResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeResourceCoverageDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeResourceCoverageDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageDetailResponse) SetHeaders(v map[string]*string) *DescribeResourceCoverageDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceCoverageDetailResponse) SetStatusCode(v int32) *DescribeResourceCoverageDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceCoverageDetailResponse) SetBody(v *DescribeResourceCoverageDetailResponseBody) *DescribeResourceCoverageDetailResponse {
	s.Body = v
	return s
}

type DescribeResourceCoverageTotalRequest struct {
	// The ID of the account for which you want to query total coverage data. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	EndPeriod *string `json:"EndPeriod,omitempty" xml:"EndPeriod,omitempty"`
	// The time granularity at which total coverage data is queried. Valid values: MONTH, DAY, and HOUR.
	PeriodType *string `json:"PeriodType,omitempty" xml:"PeriodType,omitempty"`
	// The type of deduction plans whose total coverage data is queried. Valid values: RI and SCU.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	StartPeriod *string `json:"StartPeriod,omitempty" xml:"StartPeriod,omitempty"`
}

func (s DescribeResourceCoverageTotalRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageTotalRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageTotalRequest) SetBillOwnerId(v int64) *DescribeResourceCoverageTotalRequest {
	s.BillOwnerId = &v
	return s
}

func (s *DescribeResourceCoverageTotalRequest) SetEndPeriod(v string) *DescribeResourceCoverageTotalRequest {
	s.EndPeriod = &v
	return s
}

func (s *DescribeResourceCoverageTotalRequest) SetPeriodType(v string) *DescribeResourceCoverageTotalRequest {
	s.PeriodType = &v
	return s
}

func (s *DescribeResourceCoverageTotalRequest) SetResourceType(v string) *DescribeResourceCoverageTotalRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceCoverageTotalRequest) SetStartPeriod(v string) *DescribeResourceCoverageTotalRequest {
	s.StartPeriod = &v
	return s
}

type DescribeResourceCoverageTotalResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DescribeResourceCoverageTotalResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeResourceCoverageTotalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageTotalResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageTotalResponseBody) SetCode(v string) *DescribeResourceCoverageTotalResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeResourceCoverageTotalResponseBody) SetData(v *DescribeResourceCoverageTotalResponseBodyData) *DescribeResourceCoverageTotalResponseBody {
	s.Data = v
	return s
}

func (s *DescribeResourceCoverageTotalResponseBody) SetMessage(v string) *DescribeResourceCoverageTotalResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeResourceCoverageTotalResponseBody) SetRequestId(v string) *DescribeResourceCoverageTotalResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceCoverageTotalResponseBody) SetSuccess(v bool) *DescribeResourceCoverageTotalResponseBody {
	s.Success = &v
	return s
}

type DescribeResourceCoverageTotalResponseBodyData struct {
	// The information about the coverage rate of deduction plans within a period.
	PeriodCoverage []*DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage `json:"PeriodCoverage,omitempty" xml:"PeriodCoverage,omitempty" type:"Repeated"`
	// The information about the total coverage data of deduction plans.
	TotalCoverage *DescribeResourceCoverageTotalResponseBodyDataTotalCoverage `json:"TotalCoverage,omitempty" xml:"TotalCoverage,omitempty" type:"Struct"`
}

func (s DescribeResourceCoverageTotalResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageTotalResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageTotalResponseBodyData) SetPeriodCoverage(v []*DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage) *DescribeResourceCoverageTotalResponseBodyData {
	s.PeriodCoverage = v
	return s
}

func (s *DescribeResourceCoverageTotalResponseBodyData) SetTotalCoverage(v *DescribeResourceCoverageTotalResponseBodyDataTotalCoverage) *DescribeResourceCoverageTotalResponseBodyData {
	s.TotalCoverage = v
	return s
}

type DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage struct {
	// The coverage rate of deduction plans within the specified period.
	CoveragePercentage *float32 `json:"CoveragePercentage,omitempty" xml:"CoveragePercentage,omitempty"`
	// The period.
	//
	// The value is in the format of yyyyMMddHH.
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage) SetCoveragePercentage(v float32) *DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage {
	s.CoveragePercentage = &v
	return s
}

func (s *DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage) SetPeriod(v string) *DescribeResourceCoverageTotalResponseBodyDataPeriodCoverage {
	s.Period = &v
	return s
}

type DescribeResourceCoverageTotalResponseBodyDataTotalCoverage struct {
	// The unit that is used to measure the resources deducted from deduction plans.
	CapacityUnit *string `json:"CapacityUnit,omitempty" xml:"CapacityUnit,omitempty"`
	// The total coverage rate of deduction plans.
	CoveragePercentage *float32 `json:"CoveragePercentage,omitempty" xml:"CoveragePercentage,omitempty"`
	// The total amount of the resources deducted from deduction plans.
	DeductQuantity *float32 `json:"DeductQuantity,omitempty" xml:"DeductQuantity,omitempty"`
	// The total amount of resources consumed.
	TotalQuantity *float32 `json:"TotalQuantity,omitempty" xml:"TotalQuantity,omitempty"`
}

func (s DescribeResourceCoverageTotalResponseBodyDataTotalCoverage) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageTotalResponseBodyDataTotalCoverage) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageTotalResponseBodyDataTotalCoverage) SetCapacityUnit(v string) *DescribeResourceCoverageTotalResponseBodyDataTotalCoverage {
	s.CapacityUnit = &v
	return s
}

func (s *DescribeResourceCoverageTotalResponseBodyDataTotalCoverage) SetCoveragePercentage(v float32) *DescribeResourceCoverageTotalResponseBodyDataTotalCoverage {
	s.CoveragePercentage = &v
	return s
}

func (s *DescribeResourceCoverageTotalResponseBodyDataTotalCoverage) SetDeductQuantity(v float32) *DescribeResourceCoverageTotalResponseBodyDataTotalCoverage {
	s.DeductQuantity = &v
	return s
}

func (s *DescribeResourceCoverageTotalResponseBodyDataTotalCoverage) SetTotalQuantity(v float32) *DescribeResourceCoverageTotalResponseBodyDataTotalCoverage {
	s.TotalQuantity = &v
	return s
}

type DescribeResourceCoverageTotalResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeResourceCoverageTotalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeResourceCoverageTotalResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceCoverageTotalResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceCoverageTotalResponse) SetHeaders(v map[string]*string) *DescribeResourceCoverageTotalResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceCoverageTotalResponse) SetStatusCode(v int32) *DescribeResourceCoverageTotalResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceCoverageTotalResponse) SetBody(v *DescribeResourceCoverageTotalResponseBody) *DescribeResourceCoverageTotalResponse {
	s.Body = v
	return s
}

type DescribeResourcePackageProductRequest struct {
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s DescribeResourcePackageProductRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductRequest) SetProductCode(v string) *DescribeResourcePackageProductRequest {
	s.ProductCode = &v
	return s
}

type DescribeResourcePackageProductResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DescribeResourcePackageProductResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the order.
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeResourcePackageProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBody) SetCode(v string) *DescribeResourcePackageProductResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBody) SetData(v *DescribeResourcePackageProductResponseBodyData) *DescribeResourcePackageProductResponseBody {
	s.Data = v
	return s
}

func (s *DescribeResourcePackageProductResponseBody) SetMessage(v string) *DescribeResourcePackageProductResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBody) SetOrderId(v int64) *DescribeResourcePackageProductResponseBody {
	s.OrderId = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBody) SetRequestId(v string) *DescribeResourcePackageProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBody) SetSuccess(v bool) *DescribeResourcePackageProductResponseBody {
	s.Success = &v
	return s
}

type DescribeResourcePackageProductResponseBodyData struct {
	// The details about the resource plans.
	ResourcePackages *DescribeResourcePackageProductResponseBodyDataResourcePackages `json:"ResourcePackages,omitempty" xml:"ResourcePackages,omitempty" type:"Struct"`
}

func (s DescribeResourcePackageProductResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyData) SetResourcePackages(v *DescribeResourcePackageProductResponseBodyDataResourcePackages) *DescribeResourcePackageProductResponseBodyData {
	s.ResourcePackages = v
	return s
}

type DescribeResourcePackageProductResponseBodyDataResourcePackages struct {
	ResourcePackage []*DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage `json:"ResourcePackage,omitempty" xml:"ResourcePackage,omitempty" type:"Repeated"`
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackages) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackages) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackages) SetResourcePackage(v []*DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage) *DescribeResourcePackageProductResponseBodyDataResourcePackages {
	s.ResourcePackage = v
	return s
}

type DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage struct {
	// The name of the resource plan.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The types of the resource plans.
	PackageTypes *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypes `json:"PackageTypes,omitempty" xml:"PackageTypes,omitempty" type:"Struct"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage) SetName(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage {
	s.Name = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage) SetPackageTypes(v *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypes) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage {
	s.PackageTypes = v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage) SetProductCode(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage {
	s.ProductCode = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage) SetProductType(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackage {
	s.ProductType = &v
	return s
}

type DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypes struct {
	PackageType []*DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType `json:"PackageType,omitempty" xml:"PackageType,omitempty" type:"Repeated"`
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypes) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypes) SetPackageType(v []*DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypes {
	s.PackageType = v
	return s
}

type DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType struct {
	// The code of the resource plan.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the resource plan type.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The properties of the resource plan.
	Properties *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
	// The specifications of the resource plan.
	Specifications *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecifications `json:"Specifications,omitempty" xml:"Specifications,omitempty" type:"Struct"`
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType) SetCode(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType {
	s.Code = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType) SetName(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType {
	s.Name = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType) SetProperties(v *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeProperties) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType {
	s.Properties = v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType) SetSpecifications(v *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecifications) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageType {
	s.Specifications = v
	return s
}

type DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeProperties struct {
	Property []*DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty `json:"Property,omitempty" xml:"Property,omitempty" type:"Repeated"`
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeProperties) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeProperties) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeProperties) SetProperty(v []*DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeProperties {
	s.Property = v
	return s
}

type DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty struct {
	// The name of the property.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the property.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty) SetName(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty {
	s.Name = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty) SetValue(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypePropertiesProperty {
	s.Value = &v
	return s
}

type DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecifications struct {
	Specification []*DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification `json:"Specification,omitempty" xml:"Specification,omitempty" type:"Repeated"`
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecifications) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecifications) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecifications) SetSpecification(v []*DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecifications {
	s.Specification = v
	return s
}

type DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification struct {
	// The validity periods available for the resource plan.
	AvailableDurations *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurations `json:"AvailableDurations,omitempty" xml:"AvailableDurations,omitempty" type:"Struct"`
	// The name of the specification.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the specification.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification) SetAvailableDurations(v *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurations) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification {
	s.AvailableDurations = v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification) SetName(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification {
	s.Name = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification) SetValue(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecification {
	s.Value = &v
	return s
}

type DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurations struct {
	AvailableDuration []*DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration `json:"AvailableDuration,omitempty" xml:"AvailableDuration,omitempty" type:"Repeated"`
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurations) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurations) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurations) SetAvailableDuration(v []*DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurations {
	s.AvailableDuration = v
	return s
}

type DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration struct {
	// The name of the validity period.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The unit of the validity period for the resource plan. Valid values:
	//
	// *   Month
	// *   Year
	//
	// Default value: Month.
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	// The value of the validity period.
	Value *int32 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration) SetName(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration {
	s.Name = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration) SetUnit(v string) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration {
	s.Unit = &v
	return s
}

func (s *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration) SetValue(v int32) *DescribeResourcePackageProductResponseBodyDataResourcePackagesResourcePackagePackageTypesPackageTypeSpecificationsSpecificationAvailableDurationsAvailableDuration {
	s.Value = &v
	return s
}

type DescribeResourcePackageProductResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeResourcePackageProductResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeResourcePackageProductResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourcePackageProductResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourcePackageProductResponse) SetHeaders(v map[string]*string) *DescribeResourcePackageProductResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourcePackageProductResponse) SetStatusCode(v int32) *DescribeResourcePackageProductResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourcePackageProductResponse) SetBody(v *DescribeResourcePackageProductResponseBody) *DescribeResourcePackageProductResponse {
	s.Body = v
	return s
}

type DescribeResourceUsageDetailRequest struct {
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	EndPeriod *string `json:"EndPeriod,omitempty" xml:"EndPeriod,omitempty"`
	// The maximum number of entries to return. Default value: 20. Maximum value: 300.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used to retrieve the next page of results. You do not need to set this parameter if you query usage details within a specific time range for the first time. The response returns a token that you can use to query usage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more usage details can be queried.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The time granularity at which usage details are queried. Valid values: MONTH, DAY, and HOUR.
	PeriodType *string `json:"PeriodType,omitempty" xml:"PeriodType,omitempty"`
	// The type of deduction plans whose usage details are queried. Valid values: RI and SCU.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	StartPeriod *string `json:"StartPeriod,omitempty" xml:"StartPeriod,omitempty"`
}

func (s DescribeResourceUsageDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageDetailRequest) SetBillOwnerId(v int64) *DescribeResourceUsageDetailRequest {
	s.BillOwnerId = &v
	return s
}

func (s *DescribeResourceUsageDetailRequest) SetEndPeriod(v string) *DescribeResourceUsageDetailRequest {
	s.EndPeriod = &v
	return s
}

func (s *DescribeResourceUsageDetailRequest) SetMaxResults(v int32) *DescribeResourceUsageDetailRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeResourceUsageDetailRequest) SetNextToken(v string) *DescribeResourceUsageDetailRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeResourceUsageDetailRequest) SetPeriodType(v string) *DescribeResourceUsageDetailRequest {
	s.PeriodType = &v
	return s
}

func (s *DescribeResourceUsageDetailRequest) SetResourceType(v string) *DescribeResourceUsageDetailRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceUsageDetailRequest) SetStartPeriod(v string) *DescribeResourceUsageDetailRequest {
	s.StartPeriod = &v
	return s
}

type DescribeResourceUsageDetailResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DescribeResourceUsageDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeResourceUsageDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageDetailResponseBody) SetCode(v string) *DescribeResourceUsageDetailResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBody) SetData(v *DescribeResourceUsageDetailResponseBodyData) *DescribeResourceUsageDetailResponseBody {
	s.Data = v
	return s
}

func (s *DescribeResourceUsageDetailResponseBody) SetMessage(v string) *DescribeResourceUsageDetailResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBody) SetRequestId(v string) *DescribeResourceUsageDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBody) SetSuccess(v bool) *DescribeResourceUsageDetailResponseBody {
	s.Success = &v
	return s
}

type DescribeResourceUsageDetailResponseBodyData struct {
	// The data entries.
	Items []*DescribeResourceUsageDetailResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The number of entries returned on the current page.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token of the next page.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeResourceUsageDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageDetailResponseBodyData) SetItems(v []*DescribeResourceUsageDetailResponseBodyDataItems) *DescribeResourceUsageDetailResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyData) SetMaxResults(v int32) *DescribeResourceUsageDetailResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyData) SetNextToken(v string) *DescribeResourceUsageDetailResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyData) SetTotalCount(v int32) *DescribeResourceUsageDetailResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeResourceUsageDetailResponseBodyDataItems struct {
	// The unit that is used to measure the resources deducted from deduction plans.
	CapacityUnit *string `json:"CapacityUnit,omitempty" xml:"CapacityUnit,omitempty"`
	// The currency in which deduction plans were priced.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The amount of the resources deducted from deduction plans.
	DeductQuantity *float32 `json:"DeductQuantity,omitempty" xml:"DeductQuantity,omitempty"`
	// The end of the time range in which the usage details were queried.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The operating system.
	ImageType *string `json:"ImageType,omitempty" xml:"ImageType,omitempty"`
	// The specifications of a deduction plan.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The equivalent of pay-as-you-go costs.
	PostpaidCost *string `json:"PostpaidCost,omitempty" xml:"PostpaidCost,omitempty"`
	// The potential net savings.
	PotentialSavedCost *string `json:"PotentialSavedCost,omitempty" xml:"PotentialSavedCost,omitempty"`
	// The number of deduction plans.
	Quantity *int64 `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	// The region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The code of the region.
	RegionNo *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty"`
	// The fee of purchased deduction plans.
	ReservationCost *string `json:"ReservationCost,omitempty" xml:"ReservationCost,omitempty"`
	// The ID of a deduction plan.
	ResourceInstanceId *string `json:"ResourceInstanceId,omitempty" xml:"ResourceInstanceId,omitempty"`
	// The net savings.
	SavedCost *string `json:"SavedCost,omitempty" xml:"SavedCost,omitempty"`
	// The beginning of the time range in which the usage details were queried.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the deduction plan.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the state.
	StatusName *string `json:"StatusName,omitempty" xml:"StatusName,omitempty"`
	// The total capacity of deduction plans.
	TotalQuantity *float32 `json:"TotalQuantity,omitempty" xml:"TotalQuantity,omitempty"`
	// The usage of deduction plans.
	UsagePercentage *float32 `json:"UsagePercentage,omitempty" xml:"UsagePercentage,omitempty"`
	// The ID of the account.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The username of the account.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// The code of the zone.
	Zone *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
	// The zone.
	ZoneName *string `json:"ZoneName,omitempty" xml:"ZoneName,omitempty"`
}

func (s DescribeResourceUsageDetailResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageDetailResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetCapacityUnit(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.CapacityUnit = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetCurrency(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.Currency = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetDeductQuantity(v float32) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.DeductQuantity = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetEndTime(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.EndTime = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetImageType(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.ImageType = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetInstanceSpec(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetPostpaidCost(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.PostpaidCost = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetPotentialSavedCost(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.PotentialSavedCost = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetQuantity(v int64) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.Quantity = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetRegion(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetRegionNo(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.RegionNo = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetReservationCost(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.ReservationCost = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetResourceInstanceId(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.ResourceInstanceId = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetSavedCost(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.SavedCost = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetStartTime(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.StartTime = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetStatus(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.Status = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetStatusName(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.StatusName = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetTotalQuantity(v float32) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.TotalQuantity = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetUsagePercentage(v float32) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.UsagePercentage = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetUserId(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.UserId = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetUserName(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.UserName = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetZone(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.Zone = &v
	return s
}

func (s *DescribeResourceUsageDetailResponseBodyDataItems) SetZoneName(v string) *DescribeResourceUsageDetailResponseBodyDataItems {
	s.ZoneName = &v
	return s
}

type DescribeResourceUsageDetailResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeResourceUsageDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeResourceUsageDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageDetailResponse) SetHeaders(v map[string]*string) *DescribeResourceUsageDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceUsageDetailResponse) SetStatusCode(v int32) *DescribeResourceUsageDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceUsageDetailResponse) SetBody(v *DescribeResourceUsageDetailResponseBody) *DescribeResourceUsageDetailResponse {
	s.Body = v
	return s
}

type DescribeResourceUsageTotalRequest struct {
	// The ID of the account whose data you want to query. If you do not specify this parameter, the data of the current account and its linked accounts is queried. To query the data of a linked account, specify the ID of the linked account. You can specify only one account ID.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The end of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format. The specified time is excluded from the time range. If you do not specify this parameter, this parameter is set to the current time.
	EndPeriod *string `json:"EndPeriod,omitempty" xml:"EndPeriod,omitempty"`
	// The time granularity at which the data is queried. Valid values: MONTH, DAY, and HOUR.
	PeriodType *string `json:"PeriodType,omitempty" xml:"PeriodType,omitempty"`
	// The type of the resource plan. Valid values: RI and SCU.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format. The specified time is included in the time range.
	StartPeriod *string `json:"StartPeriod,omitempty" xml:"StartPeriod,omitempty"`
}

func (s DescribeResourceUsageTotalRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageTotalRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageTotalRequest) SetBillOwnerId(v int64) *DescribeResourceUsageTotalRequest {
	s.BillOwnerId = &v
	return s
}

func (s *DescribeResourceUsageTotalRequest) SetEndPeriod(v string) *DescribeResourceUsageTotalRequest {
	s.EndPeriod = &v
	return s
}

func (s *DescribeResourceUsageTotalRequest) SetPeriodType(v string) *DescribeResourceUsageTotalRequest {
	s.PeriodType = &v
	return s
}

func (s *DescribeResourceUsageTotalRequest) SetResourceType(v string) *DescribeResourceUsageTotalRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeResourceUsageTotalRequest) SetStartPeriod(v string) *DescribeResourceUsageTotalRequest {
	s.StartPeriod = &v
	return s
}

type DescribeResourceUsageTotalResponseBody struct {
	// The response code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The queried data.
	Data *DescribeResourceUsageTotalResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message. If the request was successful, a success message is returned. If the request failed, an error message is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeResourceUsageTotalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageTotalResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageTotalResponseBody) SetCode(v string) *DescribeResourceUsageTotalResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeResourceUsageTotalResponseBody) SetData(v *DescribeResourceUsageTotalResponseBodyData) *DescribeResourceUsageTotalResponseBody {
	s.Data = v
	return s
}

func (s *DescribeResourceUsageTotalResponseBody) SetMessage(v string) *DescribeResourceUsageTotalResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeResourceUsageTotalResponseBody) SetRequestId(v string) *DescribeResourceUsageTotalResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceUsageTotalResponseBody) SetSuccess(v bool) *DescribeResourceUsageTotalResponseBody {
	s.Success = &v
	return s
}

type DescribeResourceUsageTotalResponseBodyData struct {
	// The usage of resource plans in the specified period.
	PeriodCoverage []*DescribeResourceUsageTotalResponseBodyDataPeriodCoverage `json:"PeriodCoverage,omitempty" xml:"PeriodCoverage,omitempty" type:"Repeated"`
	// The total usage of resource plans.
	TotalUsage *DescribeResourceUsageTotalResponseBodyDataTotalUsage `json:"TotalUsage,omitempty" xml:"TotalUsage,omitempty" type:"Struct"`
}

func (s DescribeResourceUsageTotalResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageTotalResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageTotalResponseBodyData) SetPeriodCoverage(v []*DescribeResourceUsageTotalResponseBodyDataPeriodCoverage) *DescribeResourceUsageTotalResponseBodyData {
	s.PeriodCoverage = v
	return s
}

func (s *DescribeResourceUsageTotalResponseBodyData) SetTotalUsage(v *DescribeResourceUsageTotalResponseBodyDataTotalUsage) *DescribeResourceUsageTotalResponseBodyData {
	s.TotalUsage = v
	return s
}

type DescribeResourceUsageTotalResponseBodyDataPeriodCoverage struct {
	// The period.
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The usage of resource plans.
	UsagePercentage *float32 `json:"UsagePercentage,omitempty" xml:"UsagePercentage,omitempty"`
}

func (s DescribeResourceUsageTotalResponseBodyDataPeriodCoverage) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageTotalResponseBodyDataPeriodCoverage) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageTotalResponseBodyDataPeriodCoverage) SetPeriod(v string) *DescribeResourceUsageTotalResponseBodyDataPeriodCoverage {
	s.Period = &v
	return s
}

func (s *DescribeResourceUsageTotalResponseBodyDataPeriodCoverage) SetUsagePercentage(v float32) *DescribeResourceUsageTotalResponseBodyDataPeriodCoverage {
	s.UsagePercentage = &v
	return s
}

type DescribeResourceUsageTotalResponseBodyDataTotalUsage struct {
	// The total costs of pay-as-you-go instances.
	PostpaidCost *float32 `json:"PostpaidCost,omitempty" xml:"PostpaidCost,omitempty"`
	// The total potential savings.
	PotentialSavedCost *float32 `json:"PotentialSavedCost,omitempty" xml:"PotentialSavedCost,omitempty"`
	// The fee of purchased resource plans.
	ReservationCost *float32 `json:"ReservationCost,omitempty" xml:"ReservationCost,omitempty"`
	// The total savings.
	SavedCost *float32 `json:"SavedCost,omitempty" xml:"SavedCost,omitempty"`
	// The total usage of resource plans.
	UsagePercentage *float32 `json:"UsagePercentage,omitempty" xml:"UsagePercentage,omitempty"`
}

func (s DescribeResourceUsageTotalResponseBodyDataTotalUsage) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageTotalResponseBodyDataTotalUsage) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageTotalResponseBodyDataTotalUsage) SetPostpaidCost(v float32) *DescribeResourceUsageTotalResponseBodyDataTotalUsage {
	s.PostpaidCost = &v
	return s
}

func (s *DescribeResourceUsageTotalResponseBodyDataTotalUsage) SetPotentialSavedCost(v float32) *DescribeResourceUsageTotalResponseBodyDataTotalUsage {
	s.PotentialSavedCost = &v
	return s
}

func (s *DescribeResourceUsageTotalResponseBodyDataTotalUsage) SetReservationCost(v float32) *DescribeResourceUsageTotalResponseBodyDataTotalUsage {
	s.ReservationCost = &v
	return s
}

func (s *DescribeResourceUsageTotalResponseBodyDataTotalUsage) SetSavedCost(v float32) *DescribeResourceUsageTotalResponseBodyDataTotalUsage {
	s.SavedCost = &v
	return s
}

func (s *DescribeResourceUsageTotalResponseBodyDataTotalUsage) SetUsagePercentage(v float32) *DescribeResourceUsageTotalResponseBodyDataTotalUsage {
	s.UsagePercentage = &v
	return s
}

type DescribeResourceUsageTotalResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeResourceUsageTotalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeResourceUsageTotalResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageTotalResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageTotalResponse) SetHeaders(v map[string]*string) *DescribeResourceUsageTotalResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceUsageTotalResponse) SetStatusCode(v int32) *DescribeResourceUsageTotalResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceUsageTotalResponse) SetBody(v *DescribeResourceUsageTotalResponseBody) *DescribeResourceUsageTotalResponse {
	s.Body = v
	return s
}

type DescribeSavingsPlansCoverageDetailRequest struct {
	// The ID of the account for which you want to query coverage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	EndPeriod *string `json:"EndPeriod,omitempty" xml:"EndPeriod,omitempty"`
	// The maximum number of entries to return. Default value: 20. Maximum value: 300.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The time granularity at which coverage details are queried. Valid values: MONTH, DAY, and HOUR.
	PeriodType *string `json:"PeriodType,omitempty" xml:"PeriodType,omitempty"`
	// The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	StartPeriod *string `json:"StartPeriod,omitempty" xml:"StartPeriod,omitempty"`
	// The token that is used to retrieve the next page of results. You do not need to set this parameter if you query coverage details within a specific time range for the first time. The response returns a token that you can use to query coverage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s DescribeSavingsPlansCoverageDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageDetailRequest) SetBillOwnerId(v int64) *DescribeSavingsPlansCoverageDetailRequest {
	s.BillOwnerId = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailRequest) SetEndPeriod(v string) *DescribeSavingsPlansCoverageDetailRequest {
	s.EndPeriod = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailRequest) SetMaxResults(v int32) *DescribeSavingsPlansCoverageDetailRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailRequest) SetPeriodType(v string) *DescribeSavingsPlansCoverageDetailRequest {
	s.PeriodType = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailRequest) SetStartPeriod(v string) *DescribeSavingsPlansCoverageDetailRequest {
	s.StartPeriod = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailRequest) SetToken(v string) *DescribeSavingsPlansCoverageDetailRequest {
	s.Token = &v
	return s
}

type DescribeSavingsPlansCoverageDetailResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The return data.
	Data *DescribeSavingsPlansCoverageDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSavingsPlansCoverageDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageDetailResponseBody) SetCode(v string) *DescribeSavingsPlansCoverageDetailResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBody) SetData(v *DescribeSavingsPlansCoverageDetailResponseBodyData) *DescribeSavingsPlansCoverageDetailResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBody) SetMessage(v string) *DescribeSavingsPlansCoverageDetailResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBody) SetRequestId(v string) *DescribeSavingsPlansCoverageDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBody) SetSuccess(v bool) *DescribeSavingsPlansCoverageDetailResponseBody {
	s.Success = &v
	return s
}

type DescribeSavingsPlansCoverageDetailResponseBodyData struct {
	// The data entries.
	Items []*DescribeSavingsPlansCoverageDetailResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The token of the next page.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSavingsPlansCoverageDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyData) SetItems(v []*DescribeSavingsPlansCoverageDetailResponseBodyDataItems) *DescribeSavingsPlansCoverageDetailResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyData) SetNextToken(v string) *DescribeSavingsPlansCoverageDetailResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyData) SetTotalCount(v int32) *DescribeSavingsPlansCoverageDetailResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeSavingsPlansCoverageDetailResponseBodyDataItems struct {
	// The coverage.
	CoveragePercentage *float32 `json:"CoveragePercentage,omitempty" xml:"CoveragePercentage,omitempty"`
	// The currency.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The deducted amount.
	DeductAmount *float32 `json:"DeductAmount,omitempty" xml:"DeductAmount,omitempty"`
	// The end time.
	EndPeriod *string `json:"EndPeriod,omitempty" xml:"EndPeriod,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The specifications.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The pay-as-you-go cost.
	PostpaidCost *float32 `json:"PostpaidCost,omitempty" xml:"PostpaidCost,omitempty"`
	// The region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The start time.
	StartPeriod *string `json:"StartPeriod,omitempty" xml:"StartPeriod,omitempty"`
	// The total expenditure.
	TotalAmount *float32 `json:"TotalAmount,omitempty" xml:"TotalAmount,omitempty"`
	// The ID of the account.
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The username of the account.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSavingsPlansCoverageDetailResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageDetailResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetCoveragePercentage(v float32) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.CoveragePercentage = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetCurrency(v string) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.Currency = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetDeductAmount(v float32) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.DeductAmount = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetEndPeriod(v string) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.EndPeriod = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetInstanceId(v string) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.InstanceId = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetInstanceSpec(v string) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetOwnerId(v int64) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.OwnerId = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetPostpaidCost(v float32) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.PostpaidCost = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetRegion(v string) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetStartPeriod(v string) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.StartPeriod = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetTotalAmount(v float32) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.TotalAmount = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetUserId(v int64) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.UserId = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponseBodyDataItems) SetUserName(v string) *DescribeSavingsPlansCoverageDetailResponseBodyDataItems {
	s.UserName = &v
	return s
}

type DescribeSavingsPlansCoverageDetailResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSavingsPlansCoverageDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSavingsPlansCoverageDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageDetailResponse) SetHeaders(v map[string]*string) *DescribeSavingsPlansCoverageDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponse) SetStatusCode(v int32) *DescribeSavingsPlansCoverageDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSavingsPlansCoverageDetailResponse) SetBody(v *DescribeSavingsPlansCoverageDetailResponseBody) *DescribeSavingsPlansCoverageDetailResponse {
	s.Body = v
	return s
}

type DescribeSavingsPlansCoverageTotalRequest struct {
	// The ID of the account for which you want to query coverage summary. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	EndPeriod *string `json:"EndPeriod,omitempty" xml:"EndPeriod,omitempty"`
	// The time granularity at which coverage summary are queried. Valid values: MONTH, DAY, and HOUR.
	PeriodType *string `json:"PeriodType,omitempty" xml:"PeriodType,omitempty"`
	// The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	StartPeriod *string `json:"StartPeriod,omitempty" xml:"StartPeriod,omitempty"`
}

func (s DescribeSavingsPlansCoverageTotalRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageTotalRequest) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageTotalRequest) SetBillOwnerId(v int64) *DescribeSavingsPlansCoverageTotalRequest {
	s.BillOwnerId = &v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalRequest) SetEndPeriod(v string) *DescribeSavingsPlansCoverageTotalRequest {
	s.EndPeriod = &v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalRequest) SetPeriodType(v string) *DescribeSavingsPlansCoverageTotalRequest {
	s.PeriodType = &v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalRequest) SetStartPeriod(v string) *DescribeSavingsPlansCoverageTotalRequest {
	s.StartPeriod = &v
	return s
}

type DescribeSavingsPlansCoverageTotalResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The return data.
	Data *DescribeSavingsPlansCoverageTotalResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSavingsPlansCoverageTotalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageTotalResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageTotalResponseBody) SetCode(v string) *DescribeSavingsPlansCoverageTotalResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalResponseBody) SetData(v *DescribeSavingsPlansCoverageTotalResponseBodyData) *DescribeSavingsPlansCoverageTotalResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalResponseBody) SetMessage(v string) *DescribeSavingsPlansCoverageTotalResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalResponseBody) SetRequestId(v string) *DescribeSavingsPlansCoverageTotalResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalResponseBody) SetSuccess(v bool) *DescribeSavingsPlansCoverageTotalResponseBody {
	s.Success = &v
	return s
}

type DescribeSavingsPlansCoverageTotalResponseBodyData struct {
	// The coverage in different periods.
	PeriodCoverage []*DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage `json:"PeriodCoverage,omitempty" xml:"PeriodCoverage,omitempty" type:"Repeated"`
	// The coverage summary.
	TotalCoverage *DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage `json:"TotalCoverage,omitempty" xml:"TotalCoverage,omitempty" type:"Struct"`
}

func (s DescribeSavingsPlansCoverageTotalResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageTotalResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageTotalResponseBodyData) SetPeriodCoverage(v []*DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage) *DescribeSavingsPlansCoverageTotalResponseBodyData {
	s.PeriodCoverage = v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalResponseBodyData) SetTotalCoverage(v *DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage) *DescribeSavingsPlansCoverageTotalResponseBodyData {
	s.TotalCoverage = v
	return s
}

type DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage struct {
	// The coverage.
	Percentage *float32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	// The period.
	//
	// The value is in the format of yyyyMMddHH.
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage) SetPercentage(v float32) *DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage {
	s.Percentage = &v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage) SetPeriod(v string) *DescribeSavingsPlansCoverageTotalResponseBodyDataPeriodCoverage {
	s.Period = &v
	return s
}

type DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage struct {
	// The total coverage.
	CoveragePercentage *float32 `json:"CoveragePercentage,omitempty" xml:"CoveragePercentage,omitempty"`
	// The total deducted amount.
	DeductAmount *float32 `json:"DeductAmount,omitempty" xml:"DeductAmount,omitempty"`
}

func (s DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage) SetCoveragePercentage(v float32) *DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage {
	s.CoveragePercentage = &v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage) SetDeductAmount(v float32) *DescribeSavingsPlansCoverageTotalResponseBodyDataTotalCoverage {
	s.DeductAmount = &v
	return s
}

type DescribeSavingsPlansCoverageTotalResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSavingsPlansCoverageTotalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSavingsPlansCoverageTotalResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansCoverageTotalResponse) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansCoverageTotalResponse) SetHeaders(v map[string]*string) *DescribeSavingsPlansCoverageTotalResponse {
	s.Headers = v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalResponse) SetStatusCode(v int32) *DescribeSavingsPlansCoverageTotalResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSavingsPlansCoverageTotalResponse) SetBody(v *DescribeSavingsPlansCoverageTotalResponseBody) *DescribeSavingsPlansCoverageTotalResponse {
	s.Body = v
	return s
}

type DescribeSavingsPlansUsageDetailRequest struct {
	// The ID of the account for which you want to query usage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	EndPeriod *string `json:"EndPeriod,omitempty" xml:"EndPeriod,omitempty"`
	// The maximum number of entries to return. Default value: 20. Maximum value: 300.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The time granularity at which usage details are queried. Valid values: MONTH, DAY, and HOUR.
	PeriodType *string `json:"PeriodType,omitempty" xml:"PeriodType,omitempty"`
	// The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	StartPeriod *string `json:"StartPeriod,omitempty" xml:"StartPeriod,omitempty"`
	// The token that is used to retrieve the next page of results. You do not need to set this parameter if you query usage details within a specific time range for the first time. The response returns a token that you can use to query usage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s DescribeSavingsPlansUsageDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageDetailRequest) SetBillOwnerId(v int64) *DescribeSavingsPlansUsageDetailRequest {
	s.BillOwnerId = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailRequest) SetEndPeriod(v string) *DescribeSavingsPlansUsageDetailRequest {
	s.EndPeriod = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailRequest) SetMaxResults(v int32) *DescribeSavingsPlansUsageDetailRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailRequest) SetPeriodType(v string) *DescribeSavingsPlansUsageDetailRequest {
	s.PeriodType = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailRequest) SetStartPeriod(v string) *DescribeSavingsPlansUsageDetailRequest {
	s.StartPeriod = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailRequest) SetToken(v string) *DescribeSavingsPlansUsageDetailRequest {
	s.Token = &v
	return s
}

type DescribeSavingsPlansUsageDetailResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The return data.
	Data *DescribeSavingsPlansUsageDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSavingsPlansUsageDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageDetailResponseBody) SetCode(v string) *DescribeSavingsPlansUsageDetailResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBody) SetData(v *DescribeSavingsPlansUsageDetailResponseBodyData) *DescribeSavingsPlansUsageDetailResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBody) SetMessage(v string) *DescribeSavingsPlansUsageDetailResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBody) SetRequestId(v string) *DescribeSavingsPlansUsageDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBody) SetSuccess(v bool) *DescribeSavingsPlansUsageDetailResponseBody {
	s.Success = &v
	return s
}

type DescribeSavingsPlansUsageDetailResponseBodyData struct {
	// The data entries.
	Items []*DescribeSavingsPlansUsageDetailResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The token of the next page.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSavingsPlansUsageDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyData) SetItems(v []*DescribeSavingsPlansUsageDetailResponseBodyDataItems) *DescribeSavingsPlansUsageDetailResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyData) SetNextToken(v string) *DescribeSavingsPlansUsageDetailResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyData) SetTotalCount(v int32) *DescribeSavingsPlansUsageDetailResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeSavingsPlansUsageDetailResponseBodyDataItems struct {
	// The currency.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The used amount of the savings plan.
	DeductValue *float32 `json:"DeductValue,omitempty" xml:"DeductValue,omitempty"`
	// The end time.
	EndPeriod *string `json:"EndPeriod,omitempty" xml:"EndPeriod,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The total amount of the savings plan.
	PoolValue *float32 `json:"PoolValue,omitempty" xml:"PoolValue,omitempty"`
	// The pay-as-you-go cost.
	PostpaidCost *float32 `json:"PostpaidCost,omitempty" xml:"PostpaidCost,omitempty"`
	// The amount that is saved.
	SavedCost *float32 `json:"SavedCost,omitempty" xml:"SavedCost,omitempty"`
	// The start time.
	StartPeriod *string `json:"StartPeriod,omitempty" xml:"StartPeriod,omitempty"`
	// The status of the instance.
	//
	// A value of -1 indicates that the payment is overdue. A value of 1 indicates that the instance is active.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the savings plan. Valid values: universal and ECS compute.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The usage.
	UsagePercentage *float32 `json:"UsagePercentage,omitempty" xml:"UsagePercentage,omitempty"`
	// The ID of the account.
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The username of the account.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSavingsPlansUsageDetailResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageDetailResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetCurrency(v string) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.Currency = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetDeductValue(v float32) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.DeductValue = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetEndPeriod(v string) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.EndPeriod = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetInstanceId(v string) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.InstanceId = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetPoolValue(v float32) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.PoolValue = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetPostpaidCost(v float32) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.PostpaidCost = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetSavedCost(v float32) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.SavedCost = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetStartPeriod(v string) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.StartPeriod = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetStatus(v string) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.Status = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetType(v string) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.Type = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetUsagePercentage(v float32) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.UsagePercentage = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetUserId(v int64) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.UserId = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponseBodyDataItems) SetUserName(v string) *DescribeSavingsPlansUsageDetailResponseBodyDataItems {
	s.UserName = &v
	return s
}

type DescribeSavingsPlansUsageDetailResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSavingsPlansUsageDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSavingsPlansUsageDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageDetailResponse) SetHeaders(v map[string]*string) *DescribeSavingsPlansUsageDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponse) SetStatusCode(v int32) *DescribeSavingsPlansUsageDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSavingsPlansUsageDetailResponse) SetBody(v *DescribeSavingsPlansUsageDetailResponseBody) *DescribeSavingsPlansUsageDetailResponse {
	s.Body = v
	return s
}

type DescribeSavingsPlansUsageTotalRequest struct {
	// The ID of the account for which you want to query usage summary. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	EndPeriod *string `json:"EndPeriod,omitempty" xml:"EndPeriod,omitempty"`
	// The time granularity at which usage summary are queried. Valid values: MONTH, DAY, and HOUR.
	PeriodType *string `json:"PeriodType,omitempty" xml:"PeriodType,omitempty"`
	// The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	StartPeriod *string `json:"StartPeriod,omitempty" xml:"StartPeriod,omitempty"`
}

func (s DescribeSavingsPlansUsageTotalRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageTotalRequest) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageTotalRequest) SetBillOwnerId(v int64) *DescribeSavingsPlansUsageTotalRequest {
	s.BillOwnerId = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalRequest) SetEndPeriod(v string) *DescribeSavingsPlansUsageTotalRequest {
	s.EndPeriod = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalRequest) SetPeriodType(v string) *DescribeSavingsPlansUsageTotalRequest {
	s.PeriodType = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalRequest) SetStartPeriod(v string) *DescribeSavingsPlansUsageTotalRequest {
	s.StartPeriod = &v
	return s
}

type DescribeSavingsPlansUsageTotalResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The return data.
	Data *DescribeSavingsPlansUsageTotalResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSavingsPlansUsageTotalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageTotalResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageTotalResponseBody) SetCode(v string) *DescribeSavingsPlansUsageTotalResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponseBody) SetData(v *DescribeSavingsPlansUsageTotalResponseBodyData) *DescribeSavingsPlansUsageTotalResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponseBody) SetMessage(v string) *DescribeSavingsPlansUsageTotalResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponseBody) SetRequestId(v string) *DescribeSavingsPlansUsageTotalResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponseBody) SetSuccess(v bool) *DescribeSavingsPlansUsageTotalResponseBody {
	s.Success = &v
	return s
}

type DescribeSavingsPlansUsageTotalResponseBodyData struct {
	// The usage in different periods.
	PeriodCoverage []*DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage `json:"PeriodCoverage,omitempty" xml:"PeriodCoverage,omitempty" type:"Repeated"`
	// The usage summary.
	TotalUsage *DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage `json:"TotalUsage,omitempty" xml:"TotalUsage,omitempty" type:"Struct"`
}

func (s DescribeSavingsPlansUsageTotalResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageTotalResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageTotalResponseBodyData) SetPeriodCoverage(v []*DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage) *DescribeSavingsPlansUsageTotalResponseBodyData {
	s.PeriodCoverage = v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponseBodyData) SetTotalUsage(v *DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage) *DescribeSavingsPlansUsageTotalResponseBodyData {
	s.TotalUsage = v
	return s
}

type DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage struct {
	// The usage.
	Percentage *float32 `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	// The period.
	//
	// The value is in the format of yyyyMMddHH.
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage) SetPercentage(v float32) *DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage {
	s.Percentage = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage) SetPeriod(v string) *DescribeSavingsPlansUsageTotalResponseBodyDataPeriodCoverage {
	s.Period = &v
	return s
}

type DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage struct {
	// The total amount of the savings plan.
	PoolValue *float32 `json:"PoolValue,omitempty" xml:"PoolValue,omitempty"`
	// The pay-as-you-go cost.
	PostpaidCost *float32 `json:"PostpaidCost,omitempty" xml:"PostpaidCost,omitempty"`
	// The amount that is saved.
	SavedCost *float32 `json:"SavedCost,omitempty" xml:"SavedCost,omitempty"`
	// The total usage.
	UsagePercentage *float32 `json:"UsagePercentage,omitempty" xml:"UsagePercentage,omitempty"`
}

func (s DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage) SetPoolValue(v float32) *DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage {
	s.PoolValue = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage) SetPostpaidCost(v float32) *DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage {
	s.PostpaidCost = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage) SetSavedCost(v float32) *DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage {
	s.SavedCost = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage) SetUsagePercentage(v float32) *DescribeSavingsPlansUsageTotalResponseBodyDataTotalUsage {
	s.UsagePercentage = &v
	return s
}

type DescribeSavingsPlansUsageTotalResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSavingsPlansUsageTotalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSavingsPlansUsageTotalResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSavingsPlansUsageTotalResponse) GoString() string {
	return s.String()
}

func (s *DescribeSavingsPlansUsageTotalResponse) SetHeaders(v map[string]*string) *DescribeSavingsPlansUsageTotalResponse {
	s.Headers = v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponse) SetStatusCode(v int32) *DescribeSavingsPlansUsageTotalResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSavingsPlansUsageTotalResponse) SetBody(v *DescribeSavingsPlansUsageTotalResponseBody) *DescribeSavingsPlansUsageTotalResponse {
	s.Body = v
	return s
}

type DescribeSplitItemBillRequest struct {
	// The ID of the member. If you specify this parameter, the bills of the member are queried. If you do not specify this parameter, the bills of the current account are queried by default.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The billing cycle. Specify the parameter in the YYYY-MM format.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The billing date. This parameter is required only when the Granularity parameter is set to DAILY. Format: YYYY-MM-DD.
	BillingDate *string `json:"BillingDate,omitempty" xml:"BillingDate,omitempty"`
	// The granularity at which bills are queried. Valid values:
	//
	// *   MONTHLY: queries bills on a monthly basis. The data that you query is the same as the data that is queried by billing cycles in the Split Bill module of the User Center console.
	// *   DAILY: queries bills on a daily basis. The data that you query is the same as the data that is queried by days in the Split Bill module of the User Center console.
	//
	// If you specify DAILY for this parameter, the BillingDate parameter is required.
	Granularity *string `json:"Granularity,omitempty" xml:"Granularity,omitempty"`
	// The ID of the instance.
	InstanceID       *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	IsHideZeroCharge *bool   `json:"IsHideZeroCharge,omitempty" xml:"IsHideZeroCharge,omitempty"`
	// The maximum number of entries to query. Default value: 20. Maximum value: 300.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used for the next query. The parameter must be left empty or set to the value of the NextToken parameter returned in the last call. Otherwise, an error is returned. If the parameter is left empty, the data is queried from the first entry.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The ID of the split item.
	SplitItemID *string `json:"SplitItemID,omitempty" xml:"SplitItemID,omitempty"`
	// The billing method. Valid values: Subscription: the subscription billing method. PayAsYouGo: the pay-as-you-go billing method. This parameter must be used with the ProductCode parameter.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	// The tags that are used to filter split bills. You can specify multiple tag values. If you specify multiple tag values, split bills that match one of the tag values are queried.
	TagFilter []*DescribeSplitItemBillRequestTagFilter `json:"TagFilter,omitempty" xml:"TagFilter,omitempty" type:"Repeated"`
}

func (s DescribeSplitItemBillRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSplitItemBillRequest) GoString() string {
	return s.String()
}

func (s *DescribeSplitItemBillRequest) SetBillOwnerId(v int64) *DescribeSplitItemBillRequest {
	s.BillOwnerId = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetBillingCycle(v string) *DescribeSplitItemBillRequest {
	s.BillingCycle = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetBillingDate(v string) *DescribeSplitItemBillRequest {
	s.BillingDate = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetGranularity(v string) *DescribeSplitItemBillRequest {
	s.Granularity = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetInstanceID(v string) *DescribeSplitItemBillRequest {
	s.InstanceID = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetIsHideZeroCharge(v bool) *DescribeSplitItemBillRequest {
	s.IsHideZeroCharge = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetMaxResults(v int32) *DescribeSplitItemBillRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetNextToken(v string) *DescribeSplitItemBillRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetOwnerId(v int64) *DescribeSplitItemBillRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetProductCode(v string) *DescribeSplitItemBillRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetProductType(v string) *DescribeSplitItemBillRequest {
	s.ProductType = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetSplitItemID(v string) *DescribeSplitItemBillRequest {
	s.SplitItemID = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetSubscriptionType(v string) *DescribeSplitItemBillRequest {
	s.SubscriptionType = &v
	return s
}

func (s *DescribeSplitItemBillRequest) SetTagFilter(v []*DescribeSplitItemBillRequestTagFilter) *DescribeSplitItemBillRequest {
	s.TagFilter = v
	return s
}

type DescribeSplitItemBillRequestTagFilter struct {
	// The TagFilter.N parameter is used to query bills that match a specified tag. The value of the TagFilter.N parameter must be a key-value pair. The tag key must be 1 to 128 characters in length. Valid values of N: 1 to 20.
	//
	// *   If only the TagFilter.N.TagKey parameter is specified, all bills associated with the tag key are queried.
	// *   If you specify multiple tag key-value pairs at the same time, bills that meet any one of the tag key-value pairs are queried.
	// *   If the tags added to resources change, you can query only the bills that are generated within the period in which the tags and resources are associated.
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// You can specify the TagValues.N parameter to query bills that match the specified tag value. The value of the TagValues.N parameter must be a string. The tag value must be 1 to 128 characters in length. Valid values of N: 1 to 20.
	//
	// *   If you specify the TagValues.N parameter, the TagFilter.N.TagKey parameter is required. Otherwise, the error message InvalidParameter.TagValues is returned.
	// *   If you specify multiple tag values, split bills that match one of the tag values are queried.
	TagValues []*string `json:"TagValues,omitempty" xml:"TagValues,omitempty" type:"Repeated"`
}

func (s DescribeSplitItemBillRequestTagFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeSplitItemBillRequestTagFilter) GoString() string {
	return s.String()
}

func (s *DescribeSplitItemBillRequestTagFilter) SetTagKey(v string) *DescribeSplitItemBillRequestTagFilter {
	s.TagKey = &v
	return s
}

func (s *DescribeSplitItemBillRequestTagFilter) SetTagValues(v []*string) *DescribeSplitItemBillRequestTagFilter {
	s.TagValues = v
	return s
}

type DescribeSplitItemBillResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DescribeSplitItemBillResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSplitItemBillResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSplitItemBillResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSplitItemBillResponseBody) SetCode(v string) *DescribeSplitItemBillResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSplitItemBillResponseBody) SetData(v *DescribeSplitItemBillResponseBodyData) *DescribeSplitItemBillResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSplitItemBillResponseBody) SetMessage(v string) *DescribeSplitItemBillResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSplitItemBillResponseBody) SetRequestId(v string) *DescribeSplitItemBillResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSplitItemBillResponseBody) SetSuccess(v bool) *DescribeSplitItemBillResponseBody {
	s.Success = &v
	return s
}

type DescribeSplitItemBillResponseBodyData struct {
	// The ID of the account.
	AccountID *string `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// The ID of the account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The billing cycle. Format: YYYY-MM.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The details of the bill.
	Items []*DescribeSplitItemBillResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The maximum number of entries returned.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token used for the next query. If this parameter is empty, all the results are returned. When you perform the next query, you must set the NextToken parameter to this value.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSplitItemBillResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSplitItemBillResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSplitItemBillResponseBodyData) SetAccountID(v string) *DescribeSplitItemBillResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyData) SetAccountName(v string) *DescribeSplitItemBillResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyData) SetBillingCycle(v string) *DescribeSplitItemBillResponseBodyData {
	s.BillingCycle = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyData) SetItems(v []*DescribeSplitItemBillResponseBodyDataItems) *DescribeSplitItemBillResponseBodyData {
	s.Items = v
	return s
}

func (s *DescribeSplitItemBillResponseBodyData) SetMaxResults(v int32) *DescribeSplitItemBillResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyData) SetNextToken(v string) *DescribeSplitItemBillResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyData) SetTotalCount(v int32) *DescribeSplitItemBillResponseBodyData {
	s.TotalCount = &v
	return s
}

type DescribeSplitItemBillResponseBodyDataItems struct {
	// The amount deducted with credit refund.
	AdjustAmount *float32 `json:"AdjustAmount,omitempty" xml:"AdjustAmount,omitempty"`
	// The ID of the account to which the bill belongs.
	BillAccountID *string `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	// The name of the account to which the bill belongs.
	BillAccountName *string `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	// The billing date. Format: YYYY-MM-DD. This parameter is not supported.
	BillingDate *string `json:"BillingDate,omitempty" xml:"BillingDate,omitempty"`
	// The billable item.
	BillingItem *string `json:"BillingItem,omitempty" xml:"BillingItem,omitempty"`
	// The code of the billable item.
	BillingItemCode *string `json:"BillingItemCode,omitempty" xml:"BillingItemCode,omitempty"`
	// The billing method.
	BillingType *string `json:"BillingType,omitempty" xml:"BillingType,omitempty"`
	// The type of the business.
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The amount paid in cash. The amount deducted with credit refund is not included.
	CashAmount *float32 `json:"CashAmount,omitempty" xml:"CashAmount,omitempty"`
	// The code of the commodity. The code is the same as that displayed in the Split Bill module of the User Center console.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The cost center.
	CostUnit *string `json:"CostUnit,omitempty" xml:"CostUnit,omitempty"`
	// The type of currency. Valid values: CNY, USD, and JPY.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The amount deducted with vouchers.
	DeductedByCashCoupons *float32 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	// The amount deducted with coupons.
	DeductedByCoupons *float32 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	// The amount deducted with prepaid cards.
	DeductedByPrepaidCard *float32 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	// The amount deducted with resource plans.
	DeductedByResourcePackage *string `json:"DeductedByResourcePackage,omitempty" xml:"DeductedByResourcePackage,omitempty"`
	// The configurations of the instance.
	InstanceConfig *string `json:"InstanceConfig,omitempty" xml:"InstanceConfig,omitempty"`
	// The ID of the instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the instance.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The public IP address.
	InternetIP *string `json:"InternetIP,omitempty" xml:"InternetIP,omitempty"`
	// The private IP address.
	IntranetIP *string `json:"IntranetIP,omitempty" xml:"IntranetIP,omitempty"`
	// The discount amount.
	InvoiceDiscount *float32 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The type of the bill. Valid values: SubscriptionOrder: the subscription bill. PayAsYouGoBill: the pay-as-you-go bill. Refund: the refund. Adjustment: the adjustment bill.
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The name of the split item.
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	// The unit price.
	ListPrice *string `json:"ListPrice,omitempty" xml:"ListPrice,omitempty"`
	// The unit of the unit price.
	ListPriceUnit *string `json:"ListPriceUnit,omitempty" xml:"ListPriceUnit,omitempty"`
	// The name of the instance.
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// The amount that is unsettled.
	OutstandingAmount *float32 `json:"OutstandingAmount,omitempty" xml:"OutstandingAmount,omitempty"`
	// The ID of the account that owns the resource. This parameter is returned in multi-account scenario.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The amount paid in cash. The amount deducted with credit refund is included.
	PaymentAmount *float32 `json:"PaymentAmount,omitempty" xml:"PaymentAmount,omitempty"`
	// The code of the service. The code is the same as that displayed in the Split Bill module of the User Center console.
	PipCode *string `json:"PipCode,omitempty" xml:"PipCode,omitempty"`
	// The pretax amount.
	PretaxAmount *float32 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	// The pretax gross amount.
	PretaxGrossAmount *float32 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The details of the service.
	ProductDetail *string `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	// The name of the service.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The ID of the region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The ID of the resource group.
	ResourceGroup *string `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	// The duration of the service.
	ServicePeriod *string `json:"ServicePeriod,omitempty" xml:"ServicePeriod,omitempty"`
	// The unit of the service duration.
	ServicePeriodUnit *string `json:"ServicePeriodUnit,omitempty" xml:"ServicePeriodUnit,omitempty"`
	// The ID of the account to which the split bill belongs.
	SplitAccountID *string `json:"SplitAccountID,omitempty" xml:"SplitAccountID,omitempty"`
	// The name of the account to which the split item belongs.
	SplitAccountName *string `json:"SplitAccountName,omitempty" xml:"SplitAccountName,omitempty"`
	// The billing cycle in which the bill is split.
	SplitBillingCycle *string `json:"SplitBillingCycle,omitempty" xml:"SplitBillingCycle,omitempty"`
	// The day on which the bill is split.
	SplitBillingDate *string `json:"SplitBillingDate,omitempty" xml:"SplitBillingDate,omitempty"`
	// The code of the split item.
	SplitCommodityCode *string `json:"SplitCommodityCode,omitempty" xml:"SplitCommodityCode,omitempty"`
	// The ID of the split item.
	SplitItemID *string `json:"SplitItemID,omitempty" xml:"SplitItemID,omitempty"`
	// The name of the split item.
	SplitItemName *string `json:"SplitItemName,omitempty" xml:"SplitItemName,omitempty"`
	// The details of the service.
	SplitProductDetail *string `json:"SplitProductDetail,omitempty" xml:"SplitProductDetail,omitempty"`
	// The billing method. Valid values: Subscription: the subscription billing method. PayAsYouGo: the pay-as-you-go billing method.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	// The tag of the resource. If tags added to resources change, the bills generated during the period in which resources and tags are associated are returned.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The amount of resource usage.
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
	// The unit of usage.
	UsageUnit *string `json:"UsageUnit,omitempty" xml:"UsageUnit,omitempty"`
	// The zone.
	Zone *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
}

func (s DescribeSplitItemBillResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSplitItemBillResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetAdjustAmount(v float32) *DescribeSplitItemBillResponseBodyDataItems {
	s.AdjustAmount = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetBillAccountID(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.BillAccountID = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetBillAccountName(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.BillAccountName = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetBillingDate(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.BillingDate = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetBillingItem(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.BillingItem = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetBillingItemCode(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.BillingItemCode = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetBillingType(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.BillingType = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetBizType(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.BizType = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetCashAmount(v float32) *DescribeSplitItemBillResponseBodyDataItems {
	s.CashAmount = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetCommodityCode(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.CommodityCode = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetCostUnit(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.CostUnit = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetCurrency(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.Currency = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetDeductedByCashCoupons(v float32) *DescribeSplitItemBillResponseBodyDataItems {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetDeductedByCoupons(v float32) *DescribeSplitItemBillResponseBodyDataItems {
	s.DeductedByCoupons = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetDeductedByPrepaidCard(v float32) *DescribeSplitItemBillResponseBodyDataItems {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetDeductedByResourcePackage(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.DeductedByResourcePackage = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetInstanceConfig(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.InstanceConfig = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetInstanceID(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.InstanceID = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetInstanceSpec(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetInternetIP(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.InternetIP = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetIntranetIP(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.IntranetIP = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetInvoiceDiscount(v float32) *DescribeSplitItemBillResponseBodyDataItems {
	s.InvoiceDiscount = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetItem(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.Item = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetItemName(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.ItemName = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetListPrice(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.ListPrice = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetListPriceUnit(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.ListPriceUnit = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetNickName(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.NickName = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetOutstandingAmount(v float32) *DescribeSplitItemBillResponseBodyDataItems {
	s.OutstandingAmount = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetOwnerID(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.OwnerID = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetPaymentAmount(v float32) *DescribeSplitItemBillResponseBodyDataItems {
	s.PaymentAmount = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetPipCode(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.PipCode = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetPretaxAmount(v float32) *DescribeSplitItemBillResponseBodyDataItems {
	s.PretaxAmount = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetPretaxGrossAmount(v float32) *DescribeSplitItemBillResponseBodyDataItems {
	s.PretaxGrossAmount = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetProductCode(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.ProductCode = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetProductDetail(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.ProductDetail = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetProductName(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.ProductName = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetProductType(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.ProductType = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetRegion(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetResourceGroup(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.ResourceGroup = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetServicePeriod(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.ServicePeriod = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetServicePeriodUnit(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.ServicePeriodUnit = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetSplitAccountID(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.SplitAccountID = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetSplitAccountName(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.SplitAccountName = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetSplitBillingCycle(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.SplitBillingCycle = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetSplitBillingDate(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.SplitBillingDate = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetSplitCommodityCode(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.SplitCommodityCode = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetSplitItemID(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.SplitItemID = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetSplitItemName(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.SplitItemName = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetSplitProductDetail(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.SplitProductDetail = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetSubscriptionType(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.SubscriptionType = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetTag(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.Tag = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetUsage(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.Usage = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetUsageUnit(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.UsageUnit = &v
	return s
}

func (s *DescribeSplitItemBillResponseBodyDataItems) SetZone(v string) *DescribeSplitItemBillResponseBodyDataItems {
	s.Zone = &v
	return s
}

type DescribeSplitItemBillResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSplitItemBillResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSplitItemBillResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSplitItemBillResponse) GoString() string {
	return s.String()
}

func (s *DescribeSplitItemBillResponse) SetHeaders(v map[string]*string) *DescribeSplitItemBillResponse {
	s.Headers = v
	return s
}

func (s *DescribeSplitItemBillResponse) SetStatusCode(v int32) *DescribeSplitItemBillResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSplitItemBillResponse) SetBody(v *DescribeSplitItemBillResponseBody) *DescribeSplitItemBillResponse {
	s.Body = v
	return s
}

type EnableBillGenerationRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The code of the product.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s EnableBillGenerationRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableBillGenerationRequest) GoString() string {
	return s.String()
}

func (s *EnableBillGenerationRequest) SetOwnerId(v int64) *EnableBillGenerationRequest {
	s.OwnerId = &v
	return s
}

func (s *EnableBillGenerationRequest) SetProductCode(v string) *EnableBillGenerationRequest {
	s.ProductCode = &v
	return s
}

type EnableBillGenerationResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *EnableBillGenerationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableBillGenerationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableBillGenerationResponseBody) GoString() string {
	return s.String()
}

func (s *EnableBillGenerationResponseBody) SetCode(v string) *EnableBillGenerationResponseBody {
	s.Code = &v
	return s
}

func (s *EnableBillGenerationResponseBody) SetData(v *EnableBillGenerationResponseBodyData) *EnableBillGenerationResponseBody {
	s.Data = v
	return s
}

func (s *EnableBillGenerationResponseBody) SetMessage(v string) *EnableBillGenerationResponseBody {
	s.Message = &v
	return s
}

func (s *EnableBillGenerationResponseBody) SetRequestId(v string) *EnableBillGenerationResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableBillGenerationResponseBody) SetSuccess(v bool) *EnableBillGenerationResponseBody {
	s.Success = &v
	return s
}

type EnableBillGenerationResponseBodyData struct {
	// Indicates whether the feature is enabled.
	Boolean *bool `json:"Boolean,omitempty" xml:"Boolean,omitempty"`
}

func (s EnableBillGenerationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s EnableBillGenerationResponseBodyData) GoString() string {
	return s.String()
}

func (s *EnableBillGenerationResponseBodyData) SetBoolean(v bool) *EnableBillGenerationResponseBodyData {
	s.Boolean = &v
	return s
}

type EnableBillGenerationResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableBillGenerationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableBillGenerationResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableBillGenerationResponse) GoString() string {
	return s.String()
}

func (s *EnableBillGenerationResponse) SetHeaders(v map[string]*string) *EnableBillGenerationResponse {
	s.Headers = v
	return s
}

func (s *EnableBillGenerationResponse) SetStatusCode(v int32) *EnableBillGenerationResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableBillGenerationResponse) SetBody(v *EnableBillGenerationResponseBody) *EnableBillGenerationResponse {
	s.Body = v
	return s
}

type GetAccountRelationRequest struct {
	// The ID of the financial relationship.
	RelationId *int64 `json:"RelationId,omitempty" xml:"RelationId,omitempty"`
	// The unique ID of the request. The ID is used to mark a request and troubleshoot a problem.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAccountRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAccountRelationRequest) GoString() string {
	return s.String()
}

func (s *GetAccountRelationRequest) SetRelationId(v int64) *GetAccountRelationRequest {
	s.RelationId = &v
	return s
}

func (s *GetAccountRelationRequest) SetRequestId(v string) *GetAccountRelationRequest {
	s.RequestId = &v
	return s
}

type GetAccountRelationResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// data
	Data *GetAccountRelationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAccountRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAccountRelationResponseBody) GoString() string {
	return s.String()
}

func (s *GetAccountRelationResponseBody) SetCode(v string) *GetAccountRelationResponseBody {
	s.Code = &v
	return s
}

func (s *GetAccountRelationResponseBody) SetData(v *GetAccountRelationResponseBodyData) *GetAccountRelationResponseBody {
	s.Data = v
	return s
}

func (s *GetAccountRelationResponseBody) SetMessage(v string) *GetAccountRelationResponseBody {
	s.Message = &v
	return s
}

func (s *GetAccountRelationResponseBody) SetRequestId(v string) *GetAccountRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAccountRelationResponseBody) SetSuccess(v bool) *GetAccountRelationResponseBody {
	s.Success = &v
	return s
}

type GetAccountRelationResponseBodyData struct {
	// The ID of the Alibaba Cloud account that is used as a member.
	ChildUserId *int64 `json:"ChildUserId,omitempty" xml:"ChildUserId,omitempty"`
	// The time when the financial relationship between the management account and the member was terminated.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The time when the financial relationship between the management account and the member was modified.
	GmtModified *int64 `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The ID of the financial relationship.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the Alibaba Cloud account that is used as the management account.
	ParentUserId *int64 `json:"ParentUserId,omitempty" xml:"ParentUserId,omitempty"`
	// The time when the financial relationship between the management account and the member was established.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the financial relationship between the management account and the member.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the financial relationship.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetAccountRelationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAccountRelationResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAccountRelationResponseBodyData) SetChildUserId(v int64) *GetAccountRelationResponseBodyData {
	s.ChildUserId = &v
	return s
}

func (s *GetAccountRelationResponseBodyData) SetEndTime(v int64) *GetAccountRelationResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *GetAccountRelationResponseBodyData) SetGmtModified(v int64) *GetAccountRelationResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetAccountRelationResponseBodyData) SetId(v int64) *GetAccountRelationResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetAccountRelationResponseBodyData) SetParentUserId(v int64) *GetAccountRelationResponseBodyData {
	s.ParentUserId = &v
	return s
}

func (s *GetAccountRelationResponseBodyData) SetStartTime(v int64) *GetAccountRelationResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *GetAccountRelationResponseBodyData) SetStatus(v string) *GetAccountRelationResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetAccountRelationResponseBodyData) SetType(v string) *GetAccountRelationResponseBodyData {
	s.Type = &v
	return s
}

type GetAccountRelationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAccountRelationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAccountRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAccountRelationResponse) GoString() string {
	return s.String()
}

func (s *GetAccountRelationResponse) SetHeaders(v map[string]*string) *GetAccountRelationResponse {
	s.Headers = v
	return s
}

func (s *GetAccountRelationResponse) SetStatusCode(v int32) *GetAccountRelationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAccountRelationResponse) SetBody(v *GetAccountRelationResponseBody) *GetAccountRelationResponse {
	s.Body = v
	return s
}

type GetCustomerAccountInfoRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s GetCustomerAccountInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomerAccountInfoRequest) GoString() string {
	return s.String()
}

func (s *GetCustomerAccountInfoRequest) SetOwnerId(v int64) *GetCustomerAccountInfoRequest {
	s.OwnerId = &v
	return s
}

type GetCustomerAccountInfoResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetCustomerAccountInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. A value of true indicates that the call is successful. A value of false indicates that the call failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCustomerAccountInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomerAccountInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomerAccountInfoResponseBody) SetCode(v string) *GetCustomerAccountInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetCustomerAccountInfoResponseBody) SetData(v *GetCustomerAccountInfoResponseBodyData) *GetCustomerAccountInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetCustomerAccountInfoResponseBody) SetMessage(v string) *GetCustomerAccountInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetCustomerAccountInfoResponseBody) SetRequestId(v string) *GetCustomerAccountInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomerAccountInfoResponseBody) SetSuccess(v bool) *GetCustomerAccountInfoResponseBody {
	s.Success = &v
	return s
}

type GetCustomerAccountInfoResponseBodyData struct {
	// The type of the account. A value of 1 indicates an enterprise account. A value of 0 indicates an individual account.
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// The business status of the customer. Valid values:
	//
	// Freeze: The business is frozen.
	//
	// Thaw: The business is unfrozen.
	//
	// Trusteeship: The business is hosted.
	//
	// TrusteeshipCancel: The business is not hosted.
	CreditLimitStatus *string `json:"CreditLimitStatus,omitempty" xml:"CreditLimitStatus,omitempty"`
	// The hosting status of the credit information and instances of the customer. If the credit information and instances of the customer are managed on Alibaba Cloud, Alibaba Cloud suspends a customer service upon overdue payment. Valid values:
	//
	// FREEZE: The business of the customer is frozen.
	//
	// TRUSTEESHIP: The business of the customer is hosted.
	HostingStatus *string `json:"HostingStatus,omitempty" xml:"HostingStatus,omitempty"`
	// Indicates whether the account passes the real-name verification.
	IsCertified *bool `json:"IsCertified,omitempty" xml:"IsCertified,omitempty"`
	// The email address of the customer.
	LoginEmail *string `json:"LoginEmail,omitempty" xml:"LoginEmail,omitempty"`
	// The ID of the management account.
	Mpk *int64 `json:"Mpk,omitempty" xml:"Mpk,omitempty"`
}

func (s GetCustomerAccountInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCustomerAccountInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCustomerAccountInfoResponseBodyData) SetAccountType(v string) *GetCustomerAccountInfoResponseBodyData {
	s.AccountType = &v
	return s
}

func (s *GetCustomerAccountInfoResponseBodyData) SetCreditLimitStatus(v string) *GetCustomerAccountInfoResponseBodyData {
	s.CreditLimitStatus = &v
	return s
}

func (s *GetCustomerAccountInfoResponseBodyData) SetHostingStatus(v string) *GetCustomerAccountInfoResponseBodyData {
	s.HostingStatus = &v
	return s
}

func (s *GetCustomerAccountInfoResponseBodyData) SetIsCertified(v bool) *GetCustomerAccountInfoResponseBodyData {
	s.IsCertified = &v
	return s
}

func (s *GetCustomerAccountInfoResponseBodyData) SetLoginEmail(v string) *GetCustomerAccountInfoResponseBodyData {
	s.LoginEmail = &v
	return s
}

func (s *GetCustomerAccountInfoResponseBodyData) SetMpk(v int64) *GetCustomerAccountInfoResponseBodyData {
	s.Mpk = &v
	return s
}

type GetCustomerAccountInfoResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomerAccountInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomerAccountInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomerAccountInfoResponse) GoString() string {
	return s.String()
}

func (s *GetCustomerAccountInfoResponse) SetHeaders(v map[string]*string) *GetCustomerAccountInfoResponse {
	s.Headers = v
	return s
}

func (s *GetCustomerAccountInfoResponse) SetStatusCode(v int32) *GetCustomerAccountInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomerAccountInfoResponse) SetBody(v *GetCustomerAccountInfoResponseBody) *GetCustomerAccountInfoResponse {
	s.Body = v
	return s
}

type GetCustomerListResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetCustomerListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request. You can use the ID to query logs and troubleshoot issues.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. Valid values:
	//
	// *   **true**: The call is successful.
	// *   **false**: The call failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCustomerListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomerListResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomerListResponseBody) SetCode(v string) *GetCustomerListResponseBody {
	s.Code = &v
	return s
}

func (s *GetCustomerListResponseBody) SetData(v *GetCustomerListResponseBodyData) *GetCustomerListResponseBody {
	s.Data = v
	return s
}

func (s *GetCustomerListResponseBody) SetMessage(v string) *GetCustomerListResponseBody {
	s.Message = &v
	return s
}

func (s *GetCustomerListResponseBody) SetRequestId(v string) *GetCustomerListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomerListResponseBody) SetSuccess(v bool) *GetCustomerListResponseBody {
	s.Success = &v
	return s
}

type GetCustomerListResponseBodyData struct {
	// The list of customer IDs.
	UidList []*string `json:"UidList,omitempty" xml:"UidList,omitempty" type:"Repeated"`
}

func (s GetCustomerListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCustomerListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCustomerListResponseBodyData) SetUidList(v []*string) *GetCustomerListResponseBodyData {
	s.UidList = v
	return s
}

type GetCustomerListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomerListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomerListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomerListResponse) GoString() string {
	return s.String()
}

func (s *GetCustomerListResponse) SetHeaders(v map[string]*string) *GetCustomerListResponse {
	s.Headers = v
	return s
}

func (s *GetCustomerListResponse) SetStatusCode(v int32) *GetCustomerListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomerListResponse) SetBody(v *GetCustomerListResponseBody) *GetCustomerListResponse {
	s.Body = v
	return s
}

type GetOrderDetailRequest struct {
	// The ID of the order.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s GetOrderDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOrderDetailRequest) GoString() string {
	return s.String()
}

func (s *GetOrderDetailRequest) SetOrderId(v string) *GetOrderDetailRequest {
	s.OrderId = &v
	return s
}

func (s *GetOrderDetailRequest) SetOwnerId(v int64) *GetOrderDetailRequest {
	s.OwnerId = &v
	return s
}

type GetOrderDetailResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetOrderDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetOrderDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOrderDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetOrderDetailResponseBody) SetCode(v string) *GetOrderDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetOrderDetailResponseBody) SetData(v *GetOrderDetailResponseBodyData) *GetOrderDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetOrderDetailResponseBody) SetMessage(v string) *GetOrderDetailResponseBody {
	s.Message = &v
	return s
}

func (s *GetOrderDetailResponseBody) SetRequestId(v string) *GetOrderDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetOrderDetailResponseBody) SetSuccess(v bool) *GetOrderDetailResponseBody {
	s.Success = &v
	return s
}

type GetOrderDetailResponseBodyData struct {
	// The hostname.
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The details of the order.
	OrderList *GetOrderDetailResponseBodyDataOrderList `json:"OrderList,omitempty" xml:"OrderList,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetOrderDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetOrderDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetOrderDetailResponseBodyData) SetHostName(v string) *GetOrderDetailResponseBodyData {
	s.HostName = &v
	return s
}

func (s *GetOrderDetailResponseBodyData) SetOrderList(v *GetOrderDetailResponseBodyDataOrderList) *GetOrderDetailResponseBodyData {
	s.OrderList = v
	return s
}

func (s *GetOrderDetailResponseBodyData) SetPageNum(v int32) *GetOrderDetailResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *GetOrderDetailResponseBodyData) SetPageSize(v int32) *GetOrderDetailResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetOrderDetailResponseBodyData) SetTotalCount(v int32) *GetOrderDetailResponseBodyData {
	s.TotalCount = &v
	return s
}

type GetOrderDetailResponseBodyDataOrderList struct {
	Order []*GetOrderDetailResponseBodyDataOrderListOrder `json:"Order,omitempty" xml:"Order,omitempty" type:"Repeated"`
}

func (s GetOrderDetailResponseBodyDataOrderList) String() string {
	return tea.Prettify(s)
}

func (s GetOrderDetailResponseBodyDataOrderList) GoString() string {
	return s.String()
}

func (s *GetOrderDetailResponseBodyDataOrderList) SetOrder(v []*GetOrderDetailResponseBodyDataOrderListOrder) *GetOrderDetailResponseBodyDataOrderList {
	s.Order = v
	return s
}

type GetOrderDetailResponseBodyDataOrderListOrder struct {
	// The after-tax amount of the order.
	AfterTaxAmount *string `json:"AfterTaxAmount,omitempty" xml:"AfterTaxAmount,omitempty"`
	// The service code.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The configurations of the main service.
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The time when the order was created.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The currency.
	Currency    *string            `json:"Currency,omitempty" xml:"Currency,omitempty"`
	ExtendInfos map[string]*string `json:"ExtendInfos,omitempty" xml:"ExtendInfos,omitempty"`
	// The instance IDs.
	InstanceIDs *string `json:"InstanceIDs,omitempty" xml:"InstanceIDs,omitempty"`
	// The ID of the Resource Access Management (RAM) user who performs operations on the order. If no RAM user is involved, leave this parameter blank.
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The ID of the order.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The type of the suborder. Valid values:
	//
	// *   ProductSubOrder: the service suborder
	// *   RefundSubOrder: the refund suborder
	OrderSubType *string `json:"OrderSubType,omitempty" xml:"OrderSubType,omitempty"`
	// The type of the order. Valid values:
	//
	// *   New: purchases an instance.
	// *   Renew: renews an instance.
	// *   Upgrade: upgrades the configurations of an instance.
	// *   Refund: applies for a refund.
	// *   Convert: switches the billing method.
	// *   Downgrade: downgrades the configurations of an instance.
	// *   ResizeDisk: resizes the disk.
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	// The module information without standardized conversion.
	OriginalConfig *string `json:"OriginalConfig,omitempty" xml:"OriginalConfig,omitempty"`
	// The currency of payment.
	PaymentCurrency *string `json:"PaymentCurrency,omitempty" xml:"PaymentCurrency,omitempty"`
	// The status of payment. Valid values:
	//
	// *   Unpaid: The order is not paid.
	// *   Paid: The order is paid.
	// *   Cancelled: The order is canceled.
	PaymentStatus *string `json:"PaymentStatus,omitempty" xml:"PaymentStatus,omitempty"`
	// The time of payment.
	PaymentTime *string `json:"PaymentTime,omitempty" xml:"PaymentTime,omitempty"`
	// The pretax amount of the order.
	PretaxAmount *string `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	// The pretax amount of the order in local currency.
	PretaxAmountLocal *string `json:"PretaxAmountLocal,omitempty" xml:"PretaxAmountLocal,omitempty"`
	// The pretax gross amount of the order.
	PretaxGrossAmount *string `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The code of the main service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the main service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The number of main services.
	Quantity *string `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	// The ID of the region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The ID of the associated order.
	RelatedOrderId *string `json:"RelatedOrderId,omitempty" xml:"RelatedOrderId,omitempty"`
	// The ID of the suborder.
	SubOrderId *string `json:"SubOrderId,omitempty" xml:"SubOrderId,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: subscription
	// *   PayAsYouGo: pay-as-you-go
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	// The tax of the order.
	Tax *string `json:"Tax,omitempty" xml:"Tax,omitempty"`
	// The time when the service ends.
	UsageEndTime *string `json:"UsageEndTime,omitempty" xml:"UsageEndTime,omitempty"`
	// The time when the service starts.
	UsageStartTime *string `json:"UsageStartTime,omitempty" xml:"UsageStartTime,omitempty"`
}

func (s GetOrderDetailResponseBodyDataOrderListOrder) String() string {
	return tea.Prettify(s)
}

func (s GetOrderDetailResponseBodyDataOrderListOrder) GoString() string {
	return s.String()
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetAfterTaxAmount(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.AfterTaxAmount = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetCommodityCode(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.CommodityCode = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetConfig(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.Config = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetCreateTime(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.CreateTime = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetCurrency(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.Currency = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetExtendInfos(v map[string]*string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.ExtendInfos = v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetInstanceIDs(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.InstanceIDs = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetOperator(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.Operator = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetOrderId(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.OrderId = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetOrderSubType(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.OrderSubType = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetOrderType(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.OrderType = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetOriginalConfig(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.OriginalConfig = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetPaymentCurrency(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.PaymentCurrency = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetPaymentStatus(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.PaymentStatus = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetPaymentTime(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.PaymentTime = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetPretaxAmount(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.PretaxAmount = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetPretaxAmountLocal(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.PretaxAmountLocal = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetPretaxGrossAmount(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.PretaxGrossAmount = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetProductCode(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.ProductCode = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetProductType(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.ProductType = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetQuantity(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.Quantity = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetRegion(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.Region = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetRelatedOrderId(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.RelatedOrderId = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetSubOrderId(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.SubOrderId = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetSubscriptionType(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.SubscriptionType = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetTax(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.Tax = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetUsageEndTime(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.UsageEndTime = &v
	return s
}

func (s *GetOrderDetailResponseBodyDataOrderListOrder) SetUsageStartTime(v string) *GetOrderDetailResponseBodyDataOrderListOrder {
	s.UsageStartTime = &v
	return s
}

type GetOrderDetailResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetOrderDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetOrderDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOrderDetailResponse) GoString() string {
	return s.String()
}

func (s *GetOrderDetailResponse) SetHeaders(v map[string]*string) *GetOrderDetailResponse {
	s.Headers = v
	return s
}

func (s *GetOrderDetailResponse) SetStatusCode(v int32) *GetOrderDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOrderDetailResponse) SetBody(v *GetOrderDetailResponseBody) *GetOrderDetailResponse {
	s.Body = v
	return s
}

type GetPayAsYouGoPriceRequest struct {
	// The details of pricing modules.
	ModuleList []*GetPayAsYouGoPriceRequestModuleList `json:"ModuleList,omitempty" xml:"ModuleList,omitempty" type:"Repeated"`
	OwnerId    *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The ID of the region in which the instance resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The billing method. Set the value to PayAsYouGo.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s GetPayAsYouGoPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPayAsYouGoPriceRequest) GoString() string {
	return s.String()
}

func (s *GetPayAsYouGoPriceRequest) SetModuleList(v []*GetPayAsYouGoPriceRequestModuleList) *GetPayAsYouGoPriceRequest {
	s.ModuleList = v
	return s
}

func (s *GetPayAsYouGoPriceRequest) SetOwnerId(v int64) *GetPayAsYouGoPriceRequest {
	s.OwnerId = &v
	return s
}

func (s *GetPayAsYouGoPriceRequest) SetProductCode(v string) *GetPayAsYouGoPriceRequest {
	s.ProductCode = &v
	return s
}

func (s *GetPayAsYouGoPriceRequest) SetProductType(v string) *GetPayAsYouGoPriceRequest {
	s.ProductType = &v
	return s
}

func (s *GetPayAsYouGoPriceRequest) SetRegion(v string) *GetPayAsYouGoPriceRequest {
	s.Region = &v
	return s
}

func (s *GetPayAsYouGoPriceRequest) SetSubscriptionType(v string) *GetPayAsYouGoPriceRequest {
	s.SubscriptionType = &v
	return s
}

type GetPayAsYouGoPriceRequestModuleList struct {
	// The configuration of the Nth pricing module. Valid values of N: 1 to 50. Format: AA:aa,BB:bb. The values of AA and BB are the property IDs of the pricing module. The values of aa and bb are the property values of the pricing module.
	//
	// >  You can call the [DescribePricingModule](~~96469~~) operation to obtain the configuration parameters of the pricing module.
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The code of the Nth pricing module.
	//
	// >  You can call the [DescribePricingModule](~~96469~~) operation to obtain the module code.
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	// The price type of the Nth pricing module. Valid values:
	//
	// *   Hour: hourly price
	// *   Usage: usage price
	// *   Month: monthly price
	// *   Year: annual price
	//
	// >  You can call the [DescribePricingModule](~~96469~~) operation to obtain the configuration parameters of the pricing module.
	PriceType *string `json:"PriceType,omitempty" xml:"PriceType,omitempty"`
}

func (s GetPayAsYouGoPriceRequestModuleList) String() string {
	return tea.Prettify(s)
}

func (s GetPayAsYouGoPriceRequestModuleList) GoString() string {
	return s.String()
}

func (s *GetPayAsYouGoPriceRequestModuleList) SetConfig(v string) *GetPayAsYouGoPriceRequestModuleList {
	s.Config = &v
	return s
}

func (s *GetPayAsYouGoPriceRequestModuleList) SetModuleCode(v string) *GetPayAsYouGoPriceRequestModuleList {
	s.ModuleCode = &v
	return s
}

func (s *GetPayAsYouGoPriceRequestModuleList) SetPriceType(v string) *GetPayAsYouGoPriceRequestModuleList {
	s.PriceType = &v
	return s
}

type GetPayAsYouGoPriceResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetPayAsYouGoPriceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPayAsYouGoPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPayAsYouGoPriceResponseBody) GoString() string {
	return s.String()
}

func (s *GetPayAsYouGoPriceResponseBody) SetCode(v string) *GetPayAsYouGoPriceResponseBody {
	s.Code = &v
	return s
}

func (s *GetPayAsYouGoPriceResponseBody) SetData(v *GetPayAsYouGoPriceResponseBodyData) *GetPayAsYouGoPriceResponseBody {
	s.Data = v
	return s
}

func (s *GetPayAsYouGoPriceResponseBody) SetMessage(v string) *GetPayAsYouGoPriceResponseBody {
	s.Message = &v
	return s
}

func (s *GetPayAsYouGoPriceResponseBody) SetRequestId(v string) *GetPayAsYouGoPriceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPayAsYouGoPriceResponseBody) SetSuccess(v bool) *GetPayAsYouGoPriceResponseBody {
	s.Success = &v
	return s
}

type GetPayAsYouGoPriceResponseBodyData struct {
	// The type of the currency. Valid values:
	//
	// *   CNY: Chinese Yuan
	// *   USD: US dollar
	// *   JPY: Japanese Yen
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The price details of the pricing module.
	ModuleDetails *GetPayAsYouGoPriceResponseBodyDataModuleDetails `json:"ModuleDetails,omitempty" xml:"ModuleDetails,omitempty" type:"Struct"`
	// The details of the discount.
	PromotionDetails *GetPayAsYouGoPriceResponseBodyDataPromotionDetails `json:"PromotionDetails,omitempty" xml:"PromotionDetails,omitempty" type:"Struct"`
}

func (s GetPayAsYouGoPriceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPayAsYouGoPriceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPayAsYouGoPriceResponseBodyData) SetCurrency(v string) *GetPayAsYouGoPriceResponseBodyData {
	s.Currency = &v
	return s
}

func (s *GetPayAsYouGoPriceResponseBodyData) SetModuleDetails(v *GetPayAsYouGoPriceResponseBodyDataModuleDetails) *GetPayAsYouGoPriceResponseBodyData {
	s.ModuleDetails = v
	return s
}

func (s *GetPayAsYouGoPriceResponseBodyData) SetPromotionDetails(v *GetPayAsYouGoPriceResponseBodyDataPromotionDetails) *GetPayAsYouGoPriceResponseBodyData {
	s.PromotionDetails = v
	return s
}

type GetPayAsYouGoPriceResponseBodyDataModuleDetails struct {
	ModuleDetail []*GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail `json:"ModuleDetail,omitempty" xml:"ModuleDetail,omitempty" type:"Repeated"`
}

func (s GetPayAsYouGoPriceResponseBodyDataModuleDetails) String() string {
	return tea.Prettify(s)
}

func (s GetPayAsYouGoPriceResponseBodyDataModuleDetails) GoString() string {
	return s.String()
}

func (s *GetPayAsYouGoPriceResponseBodyDataModuleDetails) SetModuleDetail(v []*GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail) *GetPayAsYouGoPriceResponseBodyDataModuleDetails {
	s.ModuleDetail = v
	return s
}

type GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail struct {
	// The discount price.
	CostAfterDiscount *float32 `json:"CostAfterDiscount,omitempty" xml:"CostAfterDiscount,omitempty"`
	// The discount that was applied.
	InvoiceDiscount *float32 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The code of the pricing module.
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	// The original price.
	OriginalCost *float32 `json:"OriginalCost,omitempty" xml:"OriginalCost,omitempty"`
	// The unit price.
	UnitPrice *float32 `json:"UnitPrice,omitempty" xml:"UnitPrice,omitempty"`
}

func (s GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail) String() string {
	return tea.Prettify(s)
}

func (s GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail) GoString() string {
	return s.String()
}

func (s *GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail) SetCostAfterDiscount(v float32) *GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail {
	s.CostAfterDiscount = &v
	return s
}

func (s *GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail) SetInvoiceDiscount(v float32) *GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail {
	s.InvoiceDiscount = &v
	return s
}

func (s *GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail) SetModuleCode(v string) *GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail {
	s.ModuleCode = &v
	return s
}

func (s *GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail) SetOriginalCost(v float32) *GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail {
	s.OriginalCost = &v
	return s
}

func (s *GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail) SetUnitPrice(v float32) *GetPayAsYouGoPriceResponseBodyDataModuleDetailsModuleDetail {
	s.UnitPrice = &v
	return s
}

type GetPayAsYouGoPriceResponseBodyDataPromotionDetails struct {
	PromotionDetail []*GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail `json:"PromotionDetail,omitempty" xml:"PromotionDetail,omitempty" type:"Repeated"`
}

func (s GetPayAsYouGoPriceResponseBodyDataPromotionDetails) String() string {
	return tea.Prettify(s)
}

func (s GetPayAsYouGoPriceResponseBodyDataPromotionDetails) GoString() string {
	return s.String()
}

func (s *GetPayAsYouGoPriceResponseBodyDataPromotionDetails) SetPromotionDetail(v []*GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail) *GetPayAsYouGoPriceResponseBodyDataPromotionDetails {
	s.PromotionDetail = v
	return s
}

type GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail struct {
	// The description of the discount.
	PromotionDesc *string `json:"PromotionDesc,omitempty" xml:"PromotionDesc,omitempty"`
	// The ID of the discount.
	PromotionId *int64 `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The name of the discount.
	PromotionName *string `json:"PromotionName,omitempty" xml:"PromotionName,omitempty"`
}

func (s GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail) String() string {
	return tea.Prettify(s)
}

func (s GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail) GoString() string {
	return s.String()
}

func (s *GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail) SetPromotionDesc(v string) *GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail {
	s.PromotionDesc = &v
	return s
}

func (s *GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail) SetPromotionId(v int64) *GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail {
	s.PromotionId = &v
	return s
}

func (s *GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail) SetPromotionName(v string) *GetPayAsYouGoPriceResponseBodyDataPromotionDetailsPromotionDetail {
	s.PromotionName = &v
	return s
}

type GetPayAsYouGoPriceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPayAsYouGoPriceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPayAsYouGoPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPayAsYouGoPriceResponse) GoString() string {
	return s.String()
}

func (s *GetPayAsYouGoPriceResponse) SetHeaders(v map[string]*string) *GetPayAsYouGoPriceResponse {
	s.Headers = v
	return s
}

func (s *GetPayAsYouGoPriceResponse) SetStatusCode(v int32) *GetPayAsYouGoPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPayAsYouGoPriceResponse) SetBody(v *GetPayAsYouGoPriceResponseBody) *GetPayAsYouGoPriceResponse {
	s.Body = v
	return s
}

type GetResourcePackagePriceRequest struct {
	// The validity period of the resource plan. The value must be the same as the duration of the resource plan specified in the specifications.
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The time when the resource plan takes effect. If you do not specify this parameter, the resource plan immediately takes effect by default. Specify the time in the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time must be in UTC.
	EffectiveDate *string `json:"EffectiveDate,omitempty" xml:"EffectiveDate,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the order. Valid values:
	//
	// *   BUY: You place the order to purchase an instance.
	// *   UPGRADE: You place the order to upgrade an instance.
	// *   RENEW: You place the order to renew an instance.
	//
	// Default value: BUY.
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The type of the resource plan. The value must be the same as the value of the **ProductCode** parameter that is returned when you call the **DescribeResourcePackageProduct** operation.
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// The unit of validity period of the resource plan. Valid values:
	//
	// *   Month
	// *   Year
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	// The code of service. You can query the service code by calling the **QueryProductList** operation or viewing **Codes of Alibaba Cloud Services**.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The specifications of the resource plan.
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
}

func (s GetResourcePackagePriceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetResourcePackagePriceRequest) GoString() string {
	return s.String()
}

func (s *GetResourcePackagePriceRequest) SetDuration(v int32) *GetResourcePackagePriceRequest {
	s.Duration = &v
	return s
}

func (s *GetResourcePackagePriceRequest) SetEffectiveDate(v string) *GetResourcePackagePriceRequest {
	s.EffectiveDate = &v
	return s
}

func (s *GetResourcePackagePriceRequest) SetInstanceId(v string) *GetResourcePackagePriceRequest {
	s.InstanceId = &v
	return s
}

func (s *GetResourcePackagePriceRequest) SetOrderType(v string) *GetResourcePackagePriceRequest {
	s.OrderType = &v
	return s
}

func (s *GetResourcePackagePriceRequest) SetOwnerId(v int64) *GetResourcePackagePriceRequest {
	s.OwnerId = &v
	return s
}

func (s *GetResourcePackagePriceRequest) SetPackageType(v string) *GetResourcePackagePriceRequest {
	s.PackageType = &v
	return s
}

func (s *GetResourcePackagePriceRequest) SetPricingCycle(v string) *GetResourcePackagePriceRequest {
	s.PricingCycle = &v
	return s
}

func (s *GetResourcePackagePriceRequest) SetProductCode(v string) *GetResourcePackagePriceRequest {
	s.ProductCode = &v
	return s
}

func (s *GetResourcePackagePriceRequest) SetSpecification(v string) *GetResourcePackagePriceRequest {
	s.Specification = &v
	return s
}

type GetResourcePackagePriceResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetResourcePackagePriceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetResourcePackagePriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetResourcePackagePriceResponseBody) GoString() string {
	return s.String()
}

func (s *GetResourcePackagePriceResponseBody) SetCode(v string) *GetResourcePackagePriceResponseBody {
	s.Code = &v
	return s
}

func (s *GetResourcePackagePriceResponseBody) SetData(v *GetResourcePackagePriceResponseBodyData) *GetResourcePackagePriceResponseBody {
	s.Data = v
	return s
}

func (s *GetResourcePackagePriceResponseBody) SetMessage(v string) *GetResourcePackagePriceResponseBody {
	s.Message = &v
	return s
}

func (s *GetResourcePackagePriceResponseBody) SetRequestId(v string) *GetResourcePackagePriceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetResourcePackagePriceResponseBody) SetSuccess(v bool) *GetResourcePackagePriceResponseBody {
	s.Success = &v
	return s
}

type GetResourcePackagePriceResponseBodyData struct {
	// The type of the currency.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The discounted amount. Unit: CNY.
	DiscountPrice *float32 `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	// The original price. Unit: CNY.
	OriginalPrice *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	// The details of the discount.
	Promotions *GetResourcePackagePriceResponseBodyDataPromotions `json:"Promotions,omitempty" xml:"Promotions,omitempty" type:"Struct"`
	// The price at which the transaction is made. Unit: CNY.
	TradePrice *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s GetResourcePackagePriceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetResourcePackagePriceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetResourcePackagePriceResponseBodyData) SetCurrency(v string) *GetResourcePackagePriceResponseBodyData {
	s.Currency = &v
	return s
}

func (s *GetResourcePackagePriceResponseBodyData) SetDiscountPrice(v float32) *GetResourcePackagePriceResponseBodyData {
	s.DiscountPrice = &v
	return s
}

func (s *GetResourcePackagePriceResponseBodyData) SetOriginalPrice(v float32) *GetResourcePackagePriceResponseBodyData {
	s.OriginalPrice = &v
	return s
}

func (s *GetResourcePackagePriceResponseBodyData) SetPromotions(v *GetResourcePackagePriceResponseBodyDataPromotions) *GetResourcePackagePriceResponseBodyData {
	s.Promotions = v
	return s
}

func (s *GetResourcePackagePriceResponseBodyData) SetTradePrice(v float32) *GetResourcePackagePriceResponseBodyData {
	s.TradePrice = &v
	return s
}

type GetResourcePackagePriceResponseBodyDataPromotions struct {
	Promotion []*GetResourcePackagePriceResponseBodyDataPromotionsPromotion `json:"Promotion,omitempty" xml:"Promotion,omitempty" type:"Repeated"`
}

func (s GetResourcePackagePriceResponseBodyDataPromotions) String() string {
	return tea.Prettify(s)
}

func (s GetResourcePackagePriceResponseBodyDataPromotions) GoString() string {
	return s.String()
}

func (s *GetResourcePackagePriceResponseBodyDataPromotions) SetPromotion(v []*GetResourcePackagePriceResponseBodyDataPromotionsPromotion) *GetResourcePackagePriceResponseBodyDataPromotions {
	s.Promotion = v
	return s
}

type GetResourcePackagePriceResponseBodyDataPromotionsPromotion struct {
	// The ID of the promotion.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The description of the discount.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetResourcePackagePriceResponseBodyDataPromotionsPromotion) String() string {
	return tea.Prettify(s)
}

func (s GetResourcePackagePriceResponseBodyDataPromotionsPromotion) GoString() string {
	return s.String()
}

func (s *GetResourcePackagePriceResponseBodyDataPromotionsPromotion) SetId(v int64) *GetResourcePackagePriceResponseBodyDataPromotionsPromotion {
	s.Id = &v
	return s
}

func (s *GetResourcePackagePriceResponseBodyDataPromotionsPromotion) SetName(v string) *GetResourcePackagePriceResponseBodyDataPromotionsPromotion {
	s.Name = &v
	return s
}

type GetResourcePackagePriceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetResourcePackagePriceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetResourcePackagePriceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetResourcePackagePriceResponse) GoString() string {
	return s.String()
}

func (s *GetResourcePackagePriceResponse) SetHeaders(v map[string]*string) *GetResourcePackagePriceResponse {
	s.Headers = v
	return s
}

func (s *GetResourcePackagePriceResponse) SetStatusCode(v int32) *GetResourcePackagePriceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetResourcePackagePriceResponse) SetBody(v *GetResourcePackagePriceResponseBody) *GetResourcePackagePriceResponse {
	s.Body = v
	return s
}

type GetSubscriptionPriceRequest struct {
	// The ID of the instance for which the price is queried. This parameter is required if you upgrade an instance. You can specify this parameter to obtain the pre-upgrade configurations of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The information about the pricing module.
	ModuleList []*GetSubscriptionPriceRequestModuleList `json:"ModuleList,omitempty" xml:"ModuleList,omitempty" type:"Repeated"`
	// The type of the order. Valid values:
	//
	// *   NewOrder: purchases an instance of an Alibaba Cloud service.
	// *   Renewal: renews an instance of an Alibaba Cloud service.
	// *   Upgrade: upgrades an instance of an Alibaba Cloud service.
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The code of the service. For more information about the service code, see **Codes of Alibaba Cloud Services**.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service. Specify the parameter based on the pricing document of the specific service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The quantity.
	Quantity *int32 `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	// The ID of the region in which the instance resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The service duration.
	ServicePeriodQuantity *int32 `json:"ServicePeriodQuantity,omitempty" xml:"ServicePeriodQuantity,omitempty"`
	// The unit of the service duration. Valid values:
	//
	// *   Year
	// *   Month
	ServicePeriodUnit *string `json:"ServicePeriodUnit,omitempty" xml:"ServicePeriodUnit,omitempty"`
	// The billing method. Set the value to Subscription.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s GetSubscriptionPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSubscriptionPriceRequest) GoString() string {
	return s.String()
}

func (s *GetSubscriptionPriceRequest) SetInstanceId(v string) *GetSubscriptionPriceRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSubscriptionPriceRequest) SetModuleList(v []*GetSubscriptionPriceRequestModuleList) *GetSubscriptionPriceRequest {
	s.ModuleList = v
	return s
}

func (s *GetSubscriptionPriceRequest) SetOrderType(v string) *GetSubscriptionPriceRequest {
	s.OrderType = &v
	return s
}

func (s *GetSubscriptionPriceRequest) SetOwnerId(v int64) *GetSubscriptionPriceRequest {
	s.OwnerId = &v
	return s
}

func (s *GetSubscriptionPriceRequest) SetProductCode(v string) *GetSubscriptionPriceRequest {
	s.ProductCode = &v
	return s
}

func (s *GetSubscriptionPriceRequest) SetProductType(v string) *GetSubscriptionPriceRequest {
	s.ProductType = &v
	return s
}

func (s *GetSubscriptionPriceRequest) SetQuantity(v int32) *GetSubscriptionPriceRequest {
	s.Quantity = &v
	return s
}

func (s *GetSubscriptionPriceRequest) SetRegion(v string) *GetSubscriptionPriceRequest {
	s.Region = &v
	return s
}

func (s *GetSubscriptionPriceRequest) SetServicePeriodQuantity(v int32) *GetSubscriptionPriceRequest {
	s.ServicePeriodQuantity = &v
	return s
}

func (s *GetSubscriptionPriceRequest) SetServicePeriodUnit(v string) *GetSubscriptionPriceRequest {
	s.ServicePeriodUnit = &v
	return s
}

func (s *GetSubscriptionPriceRequest) SetSubscriptionType(v string) *GetSubscriptionPriceRequest {
	s.SubscriptionType = &v
	return s
}

type GetSubscriptionPriceRequestModuleList struct {
	// The configurations of the Nth pricing module. Valid values of N: 1 to 50. Format: AA:aa,BB:bb. The values of AA and BB are the property IDs of the pricing module. The values of aa and bb are the property values of the pricing module.
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// The identifier of the Nth pricing module.
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	// The status of the pricing module. This parameter is required only if the order type is Upgrade. Valid values:
	//
	// *   1: adds one or more instances.
	// *   2: modifies the configurations of an instance. In the upgrade scenario, if the configurations of the pricing module change, you must specify this value for the parameter.
	//
	// Default value: 1.
	ModuleStatus *int32 `json:"ModuleStatus,omitempty" xml:"ModuleStatus,omitempty"`
	// The tag of the specified resource. This parameter is required only if you upgrade or modify the configurations of an Alibaba Cloud service. For example, if you want to modify the configurations of a disk, you can use a tag to identify the ID of the disk.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s GetSubscriptionPriceRequestModuleList) String() string {
	return tea.Prettify(s)
}

func (s GetSubscriptionPriceRequestModuleList) GoString() string {
	return s.String()
}

func (s *GetSubscriptionPriceRequestModuleList) SetConfig(v string) *GetSubscriptionPriceRequestModuleList {
	s.Config = &v
	return s
}

func (s *GetSubscriptionPriceRequestModuleList) SetModuleCode(v string) *GetSubscriptionPriceRequestModuleList {
	s.ModuleCode = &v
	return s
}

func (s *GetSubscriptionPriceRequestModuleList) SetModuleStatus(v int32) *GetSubscriptionPriceRequestModuleList {
	s.ModuleStatus = &v
	return s
}

func (s *GetSubscriptionPriceRequestModuleList) SetTag(v string) *GetSubscriptionPriceRequestModuleList {
	s.Tag = &v
	return s
}

type GetSubscriptionPriceResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the service price.
	Data *GetSubscriptionPriceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSubscriptionPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSubscriptionPriceResponseBody) GoString() string {
	return s.String()
}

func (s *GetSubscriptionPriceResponseBody) SetCode(v string) *GetSubscriptionPriceResponseBody {
	s.Code = &v
	return s
}

func (s *GetSubscriptionPriceResponseBody) SetData(v *GetSubscriptionPriceResponseBodyData) *GetSubscriptionPriceResponseBody {
	s.Data = v
	return s
}

func (s *GetSubscriptionPriceResponseBody) SetMessage(v string) *GetSubscriptionPriceResponseBody {
	s.Message = &v
	return s
}

func (s *GetSubscriptionPriceResponseBody) SetRequestId(v string) *GetSubscriptionPriceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSubscriptionPriceResponseBody) SetSuccess(v bool) *GetSubscriptionPriceResponseBody {
	s.Success = &v
	return s
}

type GetSubscriptionPriceResponseBodyData struct {
	// The type of currency. Valid values:
	//
	// *   CNY: Chinese Yuan
	// *   USD: US dollar
	// *   JPY: Japanese Yen
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The discount that was applied.
	DiscountPrice *float32 `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	// The price details of the pricing module.
	ModuleDetails *GetSubscriptionPriceResponseBodyDataModuleDetails `json:"ModuleDetails,omitempty" xml:"ModuleDetails,omitempty" type:"Struct"`
	// The original price of the service.
	OriginalPrice *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	// The details of the discount.
	PromotionDetails *GetSubscriptionPriceResponseBodyDataPromotionDetails `json:"PromotionDetails,omitempty" xml:"PromotionDetails,omitempty" type:"Struct"`
	// The quantity.
	Quantity *int32 `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	// The discount price.
	TradePrice *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s GetSubscriptionPriceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSubscriptionPriceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSubscriptionPriceResponseBodyData) SetCurrency(v string) *GetSubscriptionPriceResponseBodyData {
	s.Currency = &v
	return s
}

func (s *GetSubscriptionPriceResponseBodyData) SetDiscountPrice(v float32) *GetSubscriptionPriceResponseBodyData {
	s.DiscountPrice = &v
	return s
}

func (s *GetSubscriptionPriceResponseBodyData) SetModuleDetails(v *GetSubscriptionPriceResponseBodyDataModuleDetails) *GetSubscriptionPriceResponseBodyData {
	s.ModuleDetails = v
	return s
}

func (s *GetSubscriptionPriceResponseBodyData) SetOriginalPrice(v float32) *GetSubscriptionPriceResponseBodyData {
	s.OriginalPrice = &v
	return s
}

func (s *GetSubscriptionPriceResponseBodyData) SetPromotionDetails(v *GetSubscriptionPriceResponseBodyDataPromotionDetails) *GetSubscriptionPriceResponseBodyData {
	s.PromotionDetails = v
	return s
}

func (s *GetSubscriptionPriceResponseBodyData) SetQuantity(v int32) *GetSubscriptionPriceResponseBodyData {
	s.Quantity = &v
	return s
}

func (s *GetSubscriptionPriceResponseBodyData) SetTradePrice(v float32) *GetSubscriptionPriceResponseBodyData {
	s.TradePrice = &v
	return s
}

type GetSubscriptionPriceResponseBodyDataModuleDetails struct {
	ModuleDetail []*GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail `json:"ModuleDetail,omitempty" xml:"ModuleDetail,omitempty" type:"Repeated"`
}

func (s GetSubscriptionPriceResponseBodyDataModuleDetails) String() string {
	return tea.Prettify(s)
}

func (s GetSubscriptionPriceResponseBodyDataModuleDetails) GoString() string {
	return s.String()
}

func (s *GetSubscriptionPriceResponseBodyDataModuleDetails) SetModuleDetail(v []*GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail) *GetSubscriptionPriceResponseBodyDataModuleDetails {
	s.ModuleDetail = v
	return s
}

type GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail struct {
	// The discount price.
	CostAfterDiscount *float32 `json:"CostAfterDiscount,omitempty" xml:"CostAfterDiscount,omitempty"`
	// The discount that was applied.
	InvoiceDiscount *float32 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The identifier of the pricing module.
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	// The original price of the service.
	OriginalCost *float32 `json:"OriginalCost,omitempty" xml:"OriginalCost,omitempty"`
	// The unit price.
	UnitPrice *float32 `json:"UnitPrice,omitempty" xml:"UnitPrice,omitempty"`
}

func (s GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail) String() string {
	return tea.Prettify(s)
}

func (s GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail) GoString() string {
	return s.String()
}

func (s *GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail) SetCostAfterDiscount(v float32) *GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail {
	s.CostAfterDiscount = &v
	return s
}

func (s *GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail) SetInvoiceDiscount(v float32) *GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail {
	s.InvoiceDiscount = &v
	return s
}

func (s *GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail) SetModuleCode(v string) *GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail {
	s.ModuleCode = &v
	return s
}

func (s *GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail) SetOriginalCost(v float32) *GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail {
	s.OriginalCost = &v
	return s
}

func (s *GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail) SetUnitPrice(v float32) *GetSubscriptionPriceResponseBodyDataModuleDetailsModuleDetail {
	s.UnitPrice = &v
	return s
}

type GetSubscriptionPriceResponseBodyDataPromotionDetails struct {
	PromotionDetail []*GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail `json:"PromotionDetail,omitempty" xml:"PromotionDetail,omitempty" type:"Repeated"`
}

func (s GetSubscriptionPriceResponseBodyDataPromotionDetails) String() string {
	return tea.Prettify(s)
}

func (s GetSubscriptionPriceResponseBodyDataPromotionDetails) GoString() string {
	return s.String()
}

func (s *GetSubscriptionPriceResponseBodyDataPromotionDetails) SetPromotionDetail(v []*GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail) *GetSubscriptionPriceResponseBodyDataPromotionDetails {
	s.PromotionDetail = v
	return s
}

type GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail struct {
	// The description of the discount.
	PromotionDesc *string `json:"PromotionDesc,omitempty" xml:"PromotionDesc,omitempty"`
	// The ID of the discount.
	PromotionId *int64 `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The name of the discount.
	PromotionName *string `json:"PromotionName,omitempty" xml:"PromotionName,omitempty"`
}

func (s GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail) String() string {
	return tea.Prettify(s)
}

func (s GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail) GoString() string {
	return s.String()
}

func (s *GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail) SetPromotionDesc(v string) *GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail {
	s.PromotionDesc = &v
	return s
}

func (s *GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail) SetPromotionId(v int64) *GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail {
	s.PromotionId = &v
	return s
}

func (s *GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail) SetPromotionName(v string) *GetSubscriptionPriceResponseBodyDataPromotionDetailsPromotionDetail {
	s.PromotionName = &v
	return s
}

type GetSubscriptionPriceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSubscriptionPriceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSubscriptionPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSubscriptionPriceResponse) GoString() string {
	return s.String()
}

func (s *GetSubscriptionPriceResponse) SetHeaders(v map[string]*string) *GetSubscriptionPriceResponse {
	s.Headers = v
	return s
}

func (s *GetSubscriptionPriceResponse) SetStatusCode(v int32) *GetSubscriptionPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSubscriptionPriceResponse) SetBody(v *GetSubscriptionPriceResponseBody) *GetSubscriptionPriceResponse {
	s.Body = v
	return s
}

type InquiryPriceRefundInstanceRequest struct {
	// This parameter is required for scenarios that need idempotence. The UUID that is used to ensure the idempotence of the request.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the instance. This parameter is required for unsubscription scenarios.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The code of the service. This parameter is required for unsubscription scenarios.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service. This parameter is required for unsubscription scenarios. Unless otherwise specified, set this parameter to an empty string.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
}

func (s InquiryPriceRefundInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s InquiryPriceRefundInstanceRequest) GoString() string {
	return s.String()
}

func (s *InquiryPriceRefundInstanceRequest) SetClientToken(v string) *InquiryPriceRefundInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *InquiryPriceRefundInstanceRequest) SetInstanceId(v string) *InquiryPriceRefundInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *InquiryPriceRefundInstanceRequest) SetProductCode(v string) *InquiryPriceRefundInstanceRequest {
	s.ProductCode = &v
	return s
}

func (s *InquiryPriceRefundInstanceRequest) SetProductType(v string) *InquiryPriceRefundInstanceRequest {
	s.ProductType = &v
	return s
}

type InquiryPriceRefundInstanceResponseBody struct {
	// The HTTP status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// data
	Data *InquiryPriceRefundInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The description of the execution result.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InquiryPriceRefundInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InquiryPriceRefundInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *InquiryPriceRefundInstanceResponseBody) SetCode(v string) *InquiryPriceRefundInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *InquiryPriceRefundInstanceResponseBody) SetData(v *InquiryPriceRefundInstanceResponseBodyData) *InquiryPriceRefundInstanceResponseBody {
	s.Data = v
	return s
}

func (s *InquiryPriceRefundInstanceResponseBody) SetMessage(v string) *InquiryPriceRefundInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *InquiryPriceRefundInstanceResponseBody) SetRequestId(v string) *InquiryPriceRefundInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *InquiryPriceRefundInstanceResponseBody) SetSuccess(v bool) *InquiryPriceRefundInstanceResponseBody {
	s.Success = &v
	return s
}

type InquiryPriceRefundInstanceResponseBodyData struct {
	// The currency.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The site of the execution host.
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The refundable amount.
	RefundAmount *float64 `json:"RefundAmount,omitempty" xml:"RefundAmount,omitempty"`
}

func (s InquiryPriceRefundInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InquiryPriceRefundInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *InquiryPriceRefundInstanceResponseBodyData) SetCurrency(v string) *InquiryPriceRefundInstanceResponseBodyData {
	s.Currency = &v
	return s
}

func (s *InquiryPriceRefundInstanceResponseBodyData) SetHostId(v string) *InquiryPriceRefundInstanceResponseBodyData {
	s.HostId = &v
	return s
}

func (s *InquiryPriceRefundInstanceResponseBodyData) SetInstanceId(v string) *InquiryPriceRefundInstanceResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *InquiryPriceRefundInstanceResponseBodyData) SetRefundAmount(v float64) *InquiryPriceRefundInstanceResponseBodyData {
	s.RefundAmount = &v
	return s
}

type InquiryPriceRefundInstanceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InquiryPriceRefundInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InquiryPriceRefundInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s InquiryPriceRefundInstanceResponse) GoString() string {
	return s.String()
}

func (s *InquiryPriceRefundInstanceResponse) SetHeaders(v map[string]*string) *InquiryPriceRefundInstanceResponse {
	s.Headers = v
	return s
}

func (s *InquiryPriceRefundInstanceResponse) SetStatusCode(v int32) *InquiryPriceRefundInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *InquiryPriceRefundInstanceResponse) SetBody(v *InquiryPriceRefundInstanceResponseBody) *InquiryPriceRefundInstanceResponse {
	s.Body = v
	return s
}

type ModifyAccountRelationRequest struct {
	// The display name of the member. This helps clarify the scenario in which the account is used.
	ChildNick *string `json:"ChildNick,omitempty" xml:"ChildNick,omitempty"`
	// The ID of the Alibaba Cloud account that is used as the member.
	ChildUserId *int64 `json:"ChildUserId,omitempty" xml:"ChildUserId,omitempty"`
	// The ID of the Alibaba Cloud account that is used as the management account.
	ParentUserId *int64 `json:"ParentUserId,omitempty" xml:"ParentUserId,omitempty"`
	// The permissions that can be modified. Valid values:
	//
	// *   SYNCHRONIZE_FINANCE_IDENTITY: allows the credit control identity to be shared with the member.
	// *   SYNCHRONIZE_FINANCE_DISCOUNT_POLICY_TO_TARGET: allows the discount policy to be shared with the member.
	// *   FORBID_WITHDRAW_CASH: does not allow the member to withdraw the balance.
	// *   FORBID_MANAGE_INVOICE: does not allow the member to manage invoices.
	// *   CHECK_FINANCE_INFO: requests to view information about the financial relationship.
	// *   MANAGE_TARGET_INVOICE: allows the member to manage invoices.
	// *   CHECK_TARGET_CONSUMPTION: allows the member to view the bills.
	PermissionCodes []*string `json:"PermissionCodes,omitempty" xml:"PermissionCodes,omitempty" type:"Repeated"`
	// The ID of the financial relationship. Set this parameter to the value of the relationId response parameter returned by calling the QueryRelationList operation.
	RelationId *int64 `json:"RelationId,omitempty" xml:"RelationId,omitempty"`
	// The operation to be performed. Valid values:
	//
	// *   ADD
	// *   DELETE
	RelationOperation *string `json:"RelationOperation,omitempty" xml:"RelationOperation,omitempty"`
	// The type of the financial relationship. Set the value to enterprise_group.
	RelationType *string `json:"RelationType,omitempty" xml:"RelationType,omitempty"`
	// The unique ID of the request. The ID is used to mark a request and troubleshoot a problem.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The roles that can be assigned to the member. You cannot modify the roles.
	RoleCodes []*string `json:"RoleCodes,omitempty" xml:"RoleCodes,omitempty" type:"Repeated"`
}

func (s ModifyAccountRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountRelationRequest) GoString() string {
	return s.String()
}

func (s *ModifyAccountRelationRequest) SetChildNick(v string) *ModifyAccountRelationRequest {
	s.ChildNick = &v
	return s
}

func (s *ModifyAccountRelationRequest) SetChildUserId(v int64) *ModifyAccountRelationRequest {
	s.ChildUserId = &v
	return s
}

func (s *ModifyAccountRelationRequest) SetParentUserId(v int64) *ModifyAccountRelationRequest {
	s.ParentUserId = &v
	return s
}

func (s *ModifyAccountRelationRequest) SetPermissionCodes(v []*string) *ModifyAccountRelationRequest {
	s.PermissionCodes = v
	return s
}

func (s *ModifyAccountRelationRequest) SetRelationId(v int64) *ModifyAccountRelationRequest {
	s.RelationId = &v
	return s
}

func (s *ModifyAccountRelationRequest) SetRelationOperation(v string) *ModifyAccountRelationRequest {
	s.RelationOperation = &v
	return s
}

func (s *ModifyAccountRelationRequest) SetRelationType(v string) *ModifyAccountRelationRequest {
	s.RelationType = &v
	return s
}

func (s *ModifyAccountRelationRequest) SetRequestId(v string) *ModifyAccountRelationRequest {
	s.RequestId = &v
	return s
}

func (s *ModifyAccountRelationRequest) SetRoleCodes(v []*string) *ModifyAccountRelationRequest {
	s.RoleCodes = v
	return s
}

type ModifyAccountRelationResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *ModifyAccountRelationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The unique ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyAccountRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountRelationResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAccountRelationResponseBody) SetCode(v string) *ModifyAccountRelationResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyAccountRelationResponseBody) SetData(v *ModifyAccountRelationResponseBodyData) *ModifyAccountRelationResponseBody {
	s.Data = v
	return s
}

func (s *ModifyAccountRelationResponseBody) SetMessage(v string) *ModifyAccountRelationResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyAccountRelationResponseBody) SetRequestId(v string) *ModifyAccountRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyAccountRelationResponseBody) SetSuccess(v bool) *ModifyAccountRelationResponseBody {
	s.Success = &v
	return s
}

type ModifyAccountRelationResponseBodyData struct {
	// HostId
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s ModifyAccountRelationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountRelationResponseBodyData) GoString() string {
	return s.String()
}

func (s *ModifyAccountRelationResponseBodyData) SetHostId(v string) *ModifyAccountRelationResponseBodyData {
	s.HostId = &v
	return s
}

type ModifyAccountRelationResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyAccountRelationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyAccountRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountRelationResponse) GoString() string {
	return s.String()
}

func (s *ModifyAccountRelationResponse) SetHeaders(v map[string]*string) *ModifyAccountRelationResponse {
	s.Headers = v
	return s
}

func (s *ModifyAccountRelationResponse) SetStatusCode(v int32) *ModifyAccountRelationResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAccountRelationResponse) SetBody(v *ModifyAccountRelationResponseBody) *ModifyAccountRelationResponse {
	s.Body = v
	return s
}

type ModifyCostUnitRequest struct {
	// The cost centers to be modified.
	UnitEntityList []*ModifyCostUnitRequestUnitEntityList `json:"UnitEntityList,omitempty" xml:"UnitEntityList,omitempty" type:"Repeated"`
}

func (s ModifyCostUnitRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCostUnitRequest) GoString() string {
	return s.String()
}

func (s *ModifyCostUnitRequest) SetUnitEntityList(v []*ModifyCostUnitRequestUnitEntityList) *ModifyCostUnitRequest {
	s.UnitEntityList = v
	return s
}

type ModifyCostUnitRequestUnitEntityList struct {
	// The new name of the cost center.
	NewUnitName *string `json:"NewUnitName,omitempty" xml:"NewUnitName,omitempty"`
	// The user ID of the cost center owner.
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// The ID of the cost center.
	UnitId *int64 `json:"UnitId,omitempty" xml:"UnitId,omitempty"`
}

func (s ModifyCostUnitRequestUnitEntityList) String() string {
	return tea.Prettify(s)
}

func (s ModifyCostUnitRequestUnitEntityList) GoString() string {
	return s.String()
}

func (s *ModifyCostUnitRequestUnitEntityList) SetNewUnitName(v string) *ModifyCostUnitRequestUnitEntityList {
	s.NewUnitName = &v
	return s
}

func (s *ModifyCostUnitRequestUnitEntityList) SetOwnerUid(v int64) *ModifyCostUnitRequestUnitEntityList {
	s.OwnerUid = &v
	return s
}

func (s *ModifyCostUnitRequestUnitEntityList) SetUnitId(v int64) *ModifyCostUnitRequestUnitEntityList {
	s.UnitId = &v
	return s
}

type ModifyCostUnitResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data []*ModifyCostUnitResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyCostUnitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCostUnitResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCostUnitResponseBody) SetCode(v string) *ModifyCostUnitResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyCostUnitResponseBody) SetData(v []*ModifyCostUnitResponseBodyData) *ModifyCostUnitResponseBody {
	s.Data = v
	return s
}

func (s *ModifyCostUnitResponseBody) SetMessage(v string) *ModifyCostUnitResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyCostUnitResponseBody) SetRequestId(v string) *ModifyCostUnitResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCostUnitResponseBody) SetSuccess(v bool) *ModifyCostUnitResponseBody {
	s.Success = &v
	return s
}

type ModifyCostUnitResponseBodyData struct {
	// Indicates whether the cost center was modified.
	IsSuccess *bool `json:"IsSuccess,omitempty" xml:"IsSuccess,omitempty"`
	// The user ID of the cost center owner.
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// The ID of the cost center.
	UnitId *int64 `json:"UnitId,omitempty" xml:"UnitId,omitempty"`
}

func (s ModifyCostUnitResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ModifyCostUnitResponseBodyData) GoString() string {
	return s.String()
}

func (s *ModifyCostUnitResponseBodyData) SetIsSuccess(v bool) *ModifyCostUnitResponseBodyData {
	s.IsSuccess = &v
	return s
}

func (s *ModifyCostUnitResponseBodyData) SetOwnerUid(v int64) *ModifyCostUnitResponseBodyData {
	s.OwnerUid = &v
	return s
}

func (s *ModifyCostUnitResponseBodyData) SetUnitId(v int64) *ModifyCostUnitResponseBodyData {
	s.UnitId = &v
	return s
}

type ModifyCostUnitResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyCostUnitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyCostUnitResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCostUnitResponse) GoString() string {
	return s.String()
}

func (s *ModifyCostUnitResponse) SetHeaders(v map[string]*string) *ModifyCostUnitResponse {
	s.Headers = v
	return s
}

func (s *ModifyCostUnitResponse) SetStatusCode(v int32) *ModifyCostUnitResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCostUnitResponse) SetBody(v *ModifyCostUnitResponseBody) *ModifyCostUnitResponse {
	s.Body = v
	return s
}

type ModifyInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the instance for which you want to modify the configurations.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of configuration modifications. Valid values:
	//
	// *   Upgrade: upgrades the configurations of the instance.
	// *   Downgrade: downgrades the configurations of the instance.
	ModifyType *string `json:"ModifyType,omitempty" xml:"ModifyType,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The details about the parameters.
	Parameter []*ModifyInstanceRequestParameter `json:"Parameter,omitempty" xml:"Parameter,omitempty" type:"Repeated"`
	// The code of the service to which the instance belongs.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service to which the instance belongs.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: subscription
	// *   PayAsYouGo: pay-as-you-go
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s ModifyInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceRequest) SetClientToken(v string) *ModifyInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyInstanceRequest) SetInstanceId(v string) *ModifyInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceRequest) SetModifyType(v string) *ModifyInstanceRequest {
	s.ModifyType = &v
	return s
}

func (s *ModifyInstanceRequest) SetOwnerId(v int64) *ModifyInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceRequest) SetParameter(v []*ModifyInstanceRequestParameter) *ModifyInstanceRequest {
	s.Parameter = v
	return s
}

func (s *ModifyInstanceRequest) SetProductCode(v string) *ModifyInstanceRequest {
	s.ProductCode = &v
	return s
}

func (s *ModifyInstanceRequest) SetProductType(v string) *ModifyInstanceRequest {
	s.ProductType = &v
	return s
}

func (s *ModifyInstanceRequest) SetSubscriptionType(v string) *ModifyInstanceRequest {
	s.SubscriptionType = &v
	return s
}

type ModifyInstanceRequestParameter struct {
	// The code of the parameter n. Valid values of n: 1 to 100. Multiple parameters are concatenated in the order of n.
	//
	// >  Only the parameters of the attributes that you want to modify for the instance must be configured. For example, if the instance has Attribute A and Attribute B and only Attribute A must be modified, configure only the parameter of Attribute A.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The value of the parameter n. Valid values of n: 1 to 100.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyInstanceRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceRequestParameter) GoString() string {
	return s.String()
}

func (s *ModifyInstanceRequestParameter) SetCode(v string) *ModifyInstanceRequestParameter {
	s.Code = &v
	return s
}

func (s *ModifyInstanceRequestParameter) SetValue(v string) *ModifyInstanceRequestParameter {
	s.Value = &v
	return s
}

type ModifyInstanceResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *ModifyInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceResponseBody) SetCode(v string) *ModifyInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetData(v *ModifyInstanceResponseBodyData) *ModifyInstanceResponseBody {
	s.Data = v
	return s
}

func (s *ModifyInstanceResponseBody) SetMessage(v string) *ModifyInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetRequestId(v string) *ModifyInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyInstanceResponseBody) SetSuccess(v bool) *ModifyInstanceResponseBody {
	s.Success = &v
	return s
}

type ModifyInstanceResponseBodyData struct {
	// The ID of the host.
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the order that was created.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ModifyInstanceResponseBodyData) SetHostId(v string) *ModifyInstanceResponseBodyData {
	s.HostId = &v
	return s
}

func (s *ModifyInstanceResponseBodyData) SetOrderId(v string) *ModifyInstanceResponseBodyData {
	s.OrderId = &v
	return s
}

type ModifyInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceResponse) SetHeaders(v map[string]*string) *ModifyInstanceResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceResponse) SetStatusCode(v int32) *ModifyInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceResponse) SetBody(v *ModifyInstanceResponseBody) *ModifyInstanceResponse {
	s.Body = v
	return s
}

type QueryAccountBalanceResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryAccountBalanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryAccountBalanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountBalanceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAccountBalanceResponseBody) SetCode(v string) *QueryAccountBalanceResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAccountBalanceResponseBody) SetData(v *QueryAccountBalanceResponseBodyData) *QueryAccountBalanceResponseBody {
	s.Data = v
	return s
}

func (s *QueryAccountBalanceResponseBody) SetMessage(v string) *QueryAccountBalanceResponseBody {
	s.Message = &v
	return s
}

func (s *QueryAccountBalanceResponseBody) SetRequestId(v string) *QueryAccountBalanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAccountBalanceResponseBody) SetSuccess(v bool) *QueryAccountBalanceResponseBody {
	s.Success = &v
	return s
}

type QueryAccountBalanceResponseBodyData struct {
	// The available balance of the account.
	AvailableAmount *string `json:"AvailableAmount,omitempty" xml:"AvailableAmount,omitempty"`
	// The available balance in cash.
	AvailableCashAmount *string `json:"AvailableCashAmount,omitempty" xml:"AvailableCashAmount,omitempty"`
	// The credit balance of the account.
	CreditAmount *string `json:"CreditAmount,omitempty" xml:"CreditAmount,omitempty"`
	// The type of the currency. Valid values:
	//
	// *   CNY: Chinese Yuan
	// *   USD: US dollar
	// *   JPY: Japanese Yen
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The credit line controlled by MYbank.
	MybankCreditAmount *string `json:"MybankCreditAmount,omitempty" xml:"MybankCreditAmount,omitempty"`
	QuotaLimit         *string `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
}

func (s QueryAccountBalanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountBalanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryAccountBalanceResponseBodyData) SetAvailableAmount(v string) *QueryAccountBalanceResponseBodyData {
	s.AvailableAmount = &v
	return s
}

func (s *QueryAccountBalanceResponseBodyData) SetAvailableCashAmount(v string) *QueryAccountBalanceResponseBodyData {
	s.AvailableCashAmount = &v
	return s
}

func (s *QueryAccountBalanceResponseBodyData) SetCreditAmount(v string) *QueryAccountBalanceResponseBodyData {
	s.CreditAmount = &v
	return s
}

func (s *QueryAccountBalanceResponseBodyData) SetCurrency(v string) *QueryAccountBalanceResponseBodyData {
	s.Currency = &v
	return s
}

func (s *QueryAccountBalanceResponseBodyData) SetMybankCreditAmount(v string) *QueryAccountBalanceResponseBodyData {
	s.MybankCreditAmount = &v
	return s
}

func (s *QueryAccountBalanceResponseBodyData) SetQuotaLimit(v string) *QueryAccountBalanceResponseBodyData {
	s.QuotaLimit = &v
	return s
}

type QueryAccountBalanceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAccountBalanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAccountBalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountBalanceResponse) GoString() string {
	return s.String()
}

func (s *QueryAccountBalanceResponse) SetHeaders(v map[string]*string) *QueryAccountBalanceResponse {
	s.Headers = v
	return s
}

func (s *QueryAccountBalanceResponse) SetStatusCode(v int32) *QueryAccountBalanceResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAccountBalanceResponse) SetBody(v *QueryAccountBalanceResponseBody) *QueryAccountBalanceResponse {
	s.Body = v
	return s
}

type QueryAccountBillRequest struct {
	// The ID of the member. If you specify a value for this parameter, you can query the bills of the specified member. If you leave this parameter empty, the bills of the current account are queried by default.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The billing cycle. Format: YYYY-MM.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The billing date. This parameter is required only if the Granularity parameter is set to DAILY. Format: YYYY-MM-DD.
	BillingDate *string `json:"BillingDate,omitempty" xml:"BillingDate,omitempty"`
	// The granularity at which bills are queried. Valid values:
	//
	// *   MONTHLY: queries bills by month. The data queried is consistent with the data that is displayed for the specified billing cycle on the Billing Details tab of the Bill Details page in User Center.
	// *   DAILY: queries bills by day. The data queried is consistent with the data that is displayed for the specified day on the Billing Details tab of the Bill Details page in User Center.
	//
	// You must set the BillingDate parameter before you can set the Granularity parameter to DAILY.
	Granularity *string `json:"Granularity,omitempty" xml:"Granularity,omitempty"`
	// Specifies whether to summarize bills based on service codes. Valid values:
	//
	// *   true: summarizes bills based on service codes.
	// *   false: does not summarize bills based on service codes.
	//
	// Default value: false.
	IsGroupByProduct *bool  `json:"IsGroupByProduct,omitempty" xml:"IsGroupByProduct,omitempty"`
	OwnerID          *int64 `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The number of the page to return. Default value: 1.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Default value: 20. Maximum value: 300.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s QueryAccountBillRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountBillRequest) GoString() string {
	return s.String()
}

func (s *QueryAccountBillRequest) SetBillOwnerId(v int64) *QueryAccountBillRequest {
	s.BillOwnerId = &v
	return s
}

func (s *QueryAccountBillRequest) SetBillingCycle(v string) *QueryAccountBillRequest {
	s.BillingCycle = &v
	return s
}

func (s *QueryAccountBillRequest) SetBillingDate(v string) *QueryAccountBillRequest {
	s.BillingDate = &v
	return s
}

func (s *QueryAccountBillRequest) SetGranularity(v string) *QueryAccountBillRequest {
	s.Granularity = &v
	return s
}

func (s *QueryAccountBillRequest) SetIsGroupByProduct(v bool) *QueryAccountBillRequest {
	s.IsGroupByProduct = &v
	return s
}

func (s *QueryAccountBillRequest) SetOwnerID(v int64) *QueryAccountBillRequest {
	s.OwnerID = &v
	return s
}

func (s *QueryAccountBillRequest) SetPageNum(v int32) *QueryAccountBillRequest {
	s.PageNum = &v
	return s
}

func (s *QueryAccountBillRequest) SetPageSize(v int32) *QueryAccountBillRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAccountBillRequest) SetProductCode(v string) *QueryAccountBillRequest {
	s.ProductCode = &v
	return s
}

type QueryAccountBillResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryAccountBillResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryAccountBillResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountBillResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAccountBillResponseBody) SetCode(v string) *QueryAccountBillResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAccountBillResponseBody) SetData(v *QueryAccountBillResponseBodyData) *QueryAccountBillResponseBody {
	s.Data = v
	return s
}

func (s *QueryAccountBillResponseBody) SetMessage(v string) *QueryAccountBillResponseBody {
	s.Message = &v
	return s
}

func (s *QueryAccountBillResponseBody) SetRequestId(v string) *QueryAccountBillResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAccountBillResponseBody) SetSuccess(v bool) *QueryAccountBillResponseBody {
	s.Success = &v
	return s
}

type QueryAccountBillResponseBodyData struct {
	// The ID of your Alibaba Cloud account.
	AccountID *string `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// The name of the Alibaba Cloud account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The billing cycle. Format: YYYY-MM.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The details of the bills.
	Items *QueryAccountBillResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryAccountBillResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountBillResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryAccountBillResponseBodyData) SetAccountID(v string) *QueryAccountBillResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *QueryAccountBillResponseBodyData) SetAccountName(v string) *QueryAccountBillResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *QueryAccountBillResponseBodyData) SetBillingCycle(v string) *QueryAccountBillResponseBodyData {
	s.BillingCycle = &v
	return s
}

func (s *QueryAccountBillResponseBodyData) SetItems(v *QueryAccountBillResponseBodyDataItems) *QueryAccountBillResponseBodyData {
	s.Items = v
	return s
}

func (s *QueryAccountBillResponseBodyData) SetPageNum(v int32) *QueryAccountBillResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryAccountBillResponseBodyData) SetPageSize(v int32) *QueryAccountBillResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryAccountBillResponseBodyData) SetTotalCount(v int32) *QueryAccountBillResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryAccountBillResponseBodyDataItems struct {
	Item []*QueryAccountBillResponseBodyDataItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s QueryAccountBillResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountBillResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *QueryAccountBillResponseBodyDataItems) SetItem(v []*QueryAccountBillResponseBodyDataItemsItem) *QueryAccountBillResponseBodyDataItems {
	s.Item = v
	return s
}

type QueryAccountBillResponseBodyDataItemsItem struct {
	// The amount deducted by using credit refunds.
	AdjustAmount *float32 `json:"AdjustAmount,omitempty" xml:"AdjustAmount,omitempty"`
	// The ID of the account to which the bill belongs.
	BillAccountID *string `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	// The name of the account to which the bill belongs.
	BillAccountName *string `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	// The billing date.
	BillingDate *string `json:"BillingDate,omitempty" xml:"BillingDate,omitempty"`
	// The business type.
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The amount paid in cash. The amount that was deducted by using credit refunds is not included.
	CashAmount *float32 `json:"CashAmount,omitempty" xml:"CashAmount,omitempty"`
	// The cost center.
	CostUnit *string `json:"CostUnit,omitempty" xml:"CostUnit,omitempty"`
	// The type of the currency. Valid values:
	//
	// *   CNY
	// *   USD
	// *   JPY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The amount deducted by using vouchers.
	DeductedByCashCoupons *float32 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons.
	DeductedByCoupons *float32 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards.
	DeductedByPrepaidCard *float32 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	// The discount amount.
	InvoiceDiscount *float32 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The unsettled amount or the amount settled with credits.
	OutstandingAmount *float32 `json:"OutstandingAmount,omitempty" xml:"OutstandingAmount,omitempty"`
	// The ID of the member.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The name of the member.
	OwnerName *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	// The amount paid in cash. The amount that was deducted by using credit refunds is included.
	PaymentAmount *float32 `json:"PaymentAmount,omitempty" xml:"PaymentAmount,omitempty"`
	// The code of the service. The service code is consistent with that displayed in User Center.
	PipCode *string `json:"PipCode,omitempty" xml:"PipCode,omitempty"`
	// The pretax amount.
	PretaxAmount *float32 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	// The pretax gross amount.
	PretaxGrossAmount *float32 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The code of the service.
	//
	// > A value is returned only if the **IsGroupByProduct** parameter is set to true.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The name of the service.
	//
	// > A value is returned only if the **IsGroupByProduct** parameter is set to true.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method
	// *   PayAsYouGo: the pay-as-you-go billing method
	//
	// > A value is returned only if the IsGroupByProduct parameter is set to true.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s QueryAccountBillResponseBodyDataItemsItem) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountBillResponseBodyDataItemsItem) GoString() string {
	return s.String()
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetAdjustAmount(v float32) *QueryAccountBillResponseBodyDataItemsItem {
	s.AdjustAmount = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetBillAccountID(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.BillAccountID = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetBillAccountName(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.BillAccountName = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetBillingDate(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.BillingDate = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetBizType(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.BizType = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetCashAmount(v float32) *QueryAccountBillResponseBodyDataItemsItem {
	s.CashAmount = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetCostUnit(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.CostUnit = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetCurrency(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.Currency = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetDeductedByCashCoupons(v float32) *QueryAccountBillResponseBodyDataItemsItem {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetDeductedByCoupons(v float32) *QueryAccountBillResponseBodyDataItemsItem {
	s.DeductedByCoupons = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetDeductedByPrepaidCard(v float32) *QueryAccountBillResponseBodyDataItemsItem {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetInvoiceDiscount(v float32) *QueryAccountBillResponseBodyDataItemsItem {
	s.InvoiceDiscount = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetOutstandingAmount(v float32) *QueryAccountBillResponseBodyDataItemsItem {
	s.OutstandingAmount = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetOwnerID(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.OwnerID = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetOwnerName(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.OwnerName = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetPaymentAmount(v float32) *QueryAccountBillResponseBodyDataItemsItem {
	s.PaymentAmount = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetPipCode(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.PipCode = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetPretaxAmount(v float32) *QueryAccountBillResponseBodyDataItemsItem {
	s.PretaxAmount = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetPretaxGrossAmount(v float32) *QueryAccountBillResponseBodyDataItemsItem {
	s.PretaxGrossAmount = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetProductCode(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.ProductCode = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetProductName(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.ProductName = &v
	return s
}

func (s *QueryAccountBillResponseBodyDataItemsItem) SetSubscriptionType(v string) *QueryAccountBillResponseBodyDataItemsItem {
	s.SubscriptionType = &v
	return s
}

type QueryAccountBillResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAccountBillResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAccountBillResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountBillResponse) GoString() string {
	return s.String()
}

func (s *QueryAccountBillResponse) SetHeaders(v map[string]*string) *QueryAccountBillResponse {
	s.Headers = v
	return s
}

func (s *QueryAccountBillResponse) SetStatusCode(v int32) *QueryAccountBillResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAccountBillResponse) SetBody(v *QueryAccountBillResponseBody) *QueryAccountBillResponse {
	s.Body = v
	return s
}

type QueryAccountTransactionDetailsRequest struct {
	// The end of the creation time range to query.
	CreateTimeEnd *string `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// The beginning of the creation time range to query.
	CreateTimeStart *string `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// This parameter is invalid.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used for paging.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the order or bill.
	RecordID *string `json:"RecordID,omitempty" xml:"RecordID,omitempty"`
	// The transaction channel.
	TransactionChannel *string `json:"TransactionChannel,omitempty" xml:"TransactionChannel,omitempty"`
	// The serial number of the transaction channel.
	TransactionChannelSN *string `json:"TransactionChannelSN,omitempty" xml:"TransactionChannelSN,omitempty"`
	// The number of the transaction.
	TransactionNumber *string `json:"TransactionNumber,omitempty" xml:"TransactionNumber,omitempty"`
	// The type of the transaction.
	TransactionType *string `json:"TransactionType,omitempty" xml:"TransactionType,omitempty"`
}

func (s QueryAccountTransactionDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionDetailsRequest) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionDetailsRequest) SetCreateTimeEnd(v string) *QueryAccountTransactionDetailsRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *QueryAccountTransactionDetailsRequest) SetCreateTimeStart(v string) *QueryAccountTransactionDetailsRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *QueryAccountTransactionDetailsRequest) SetMaxResults(v int32) *QueryAccountTransactionDetailsRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryAccountTransactionDetailsRequest) SetNextToken(v string) *QueryAccountTransactionDetailsRequest {
	s.NextToken = &v
	return s
}

func (s *QueryAccountTransactionDetailsRequest) SetRecordID(v string) *QueryAccountTransactionDetailsRequest {
	s.RecordID = &v
	return s
}

func (s *QueryAccountTransactionDetailsRequest) SetTransactionChannel(v string) *QueryAccountTransactionDetailsRequest {
	s.TransactionChannel = &v
	return s
}

func (s *QueryAccountTransactionDetailsRequest) SetTransactionChannelSN(v string) *QueryAccountTransactionDetailsRequest {
	s.TransactionChannelSN = &v
	return s
}

func (s *QueryAccountTransactionDetailsRequest) SetTransactionNumber(v string) *QueryAccountTransactionDetailsRequest {
	s.TransactionNumber = &v
	return s
}

func (s *QueryAccountTransactionDetailsRequest) SetTransactionType(v string) *QueryAccountTransactionDetailsRequest {
	s.TransactionType = &v
	return s
}

type QueryAccountTransactionDetailsResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryAccountTransactionDetailsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryAccountTransactionDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionDetailsResponseBody) SetCode(v string) *QueryAccountTransactionDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBody) SetData(v *QueryAccountTransactionDetailsResponseBodyData) *QueryAccountTransactionDetailsResponseBody {
	s.Data = v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBody) SetMessage(v string) *QueryAccountTransactionDetailsResponseBody {
	s.Message = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBody) SetRequestId(v string) *QueryAccountTransactionDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBody) SetSuccess(v bool) *QueryAccountTransactionDetailsResponseBody {
	s.Success = &v
	return s
}

type QueryAccountTransactionDetailsResponseBodyData struct {
	// The name of the account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The details of the transactions within the account.
	AccountTransactionsList *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsList `json:"AccountTransactionsList,omitempty" xml:"AccountTransactionsList,omitempty" type:"Struct"`
	// This parameter is invalid.
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used for paging.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryAccountTransactionDetailsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionDetailsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionDetailsResponseBodyData) SetAccountName(v string) *QueryAccountTransactionDetailsResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyData) SetAccountTransactionsList(v *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsList) *QueryAccountTransactionDetailsResponseBodyData {
	s.AccountTransactionsList = v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyData) SetMaxResults(v int32) *QueryAccountTransactionDetailsResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyData) SetNextToken(v string) *QueryAccountTransactionDetailsResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyData) SetTotalCount(v int32) *QueryAccountTransactionDetailsResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsList struct {
	AccountTransactionsList []*QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList `json:"AccountTransactionsList,omitempty" xml:"AccountTransactionsList,omitempty" type:"Repeated"`
}

func (s QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsList) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsList) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsList) SetAccountTransactionsList(v []*QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsList {
	s.AccountTransactionsList = v
	return s
}

type QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList struct {
	// The amount of the transaction.
	Amount *string `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The balance of the account.
	Balance *string `json:"Balance,omitempty" xml:"Balance,omitempty"`
	// The billing cycle.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The type of transaction payment. Valid values:
	//
	// Cash: pay for the transaction in cash. Deposit: pay for the transaction with deposit. RegularBankCreditRefund: pay for the transaction with credit refund controlled by a bank. DirectPay: directly pay for the transaction.
	FundType *string `json:"FundType,omitempty" xml:"FundType,omitempty"`
	// The ID of the order or bill.
	RecordID *string `json:"RecordID,omitempty" xml:"RecordID,omitempty"`
	// The remarks.
	Remarks *string `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
	// The transaction account.
	TransactionAccount *string `json:"TransactionAccount,omitempty" xml:"TransactionAccount,omitempty"`
	// The transaction channel.
	TransactionChannel *string `json:"TransactionChannel,omitempty" xml:"TransactionChannel,omitempty"`
	// The serial number of the transaction channel.
	TransactionChannelSN *string `json:"TransactionChannelSN,omitempty" xml:"TransactionChannelSN,omitempty"`
	// Indicates whether the transaction is of the income type or the expenditure type. If one of the following types is specified, results for the specific type are returned. If the type that you specified for the parameter does not belong to the following types, no result is returned. If the parameter is left empty, results for transactions of the income and expenditure types are all returned. Valid values:
	//
	// Income and Expense.
	TransactionFlow *string `json:"TransactionFlow,omitempty" xml:"TransactionFlow,omitempty"`
	// The number of the transaction.
	TransactionNumber *string `json:"TransactionNumber,omitempty" xml:"TransactionNumber,omitempty"`
	// The time when the transaction was made.
	TransactionTime *string `json:"TransactionTime,omitempty" xml:"TransactionTime,omitempty"`
	// The type of the transaction. If one of the following transaction types is specified, results for the specified transaction type are returned. If the transaction type that you specified does not belong to the following transaction types, no result is returned. If the parameter is left empty, results for all transaction types are returned. Valid values:
	//
	// Payment, Withdraw, Refund, Consumption, Transfer, and Adjust.
	TransactionType *string `json:"TransactionType,omitempty" xml:"TransactionType,omitempty"`
}

func (s QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetAmount(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.Amount = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetBalance(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.Balance = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetBillingCycle(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.BillingCycle = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetFundType(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.FundType = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetRecordID(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.RecordID = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetRemarks(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.Remarks = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionAccount(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionAccount = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionChannel(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionChannel = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionChannelSN(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionChannelSN = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionFlow(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionFlow = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionNumber(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionNumber = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionTime(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionTime = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionType(v string) *QueryAccountTransactionDetailsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionType = &v
	return s
}

type QueryAccountTransactionDetailsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAccountTransactionDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAccountTransactionDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionDetailsResponse) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionDetailsResponse) SetHeaders(v map[string]*string) *QueryAccountTransactionDetailsResponse {
	s.Headers = v
	return s
}

func (s *QueryAccountTransactionDetailsResponse) SetStatusCode(v int32) *QueryAccountTransactionDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAccountTransactionDetailsResponse) SetBody(v *QueryAccountTransactionDetailsResponseBody) *QueryAccountTransactionDetailsResponse {
	s.Body = v
	return s
}

type QueryAccountTransactionsRequest struct {
	// The end of the creation time range to query. By default, the transactions in the last month are queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2018-01-01T00:00:00Z.
	CreateTimeEnd *string `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// The beginning of the creation time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2018-01-01T00:00:00Z.
	CreateTimeStart *string `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// The number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the order or bill.
	RecordID *string `json:"RecordID,omitempty" xml:"RecordID,omitempty"`
	// The transaction channel. If you specify one of the following transaction channels for this parameter, the results for the specified transaction channel are returned. If the transaction channel that you specify does not belong to the following transaction channels, no result is returned. If you leave this parameter empty, the results for all the following transaction channels are returned by default. Valid values:
	//
	// *   AccountBalance
	// *   BankTransfer
	// *   Alipay
	// *   AntCreditPay
	// *   OfflineRemittance
	// *   RegularBankCreditRefund
	// *   CreditCard
	// *   MyBankCredit
	// *   HuaxiaBankCInstallment
	// *   ApplePay
	TransactionChannel *string `json:"TransactionChannel,omitempty" xml:"TransactionChannel,omitempty"`
	// The serial number of the transaction channel.
	TransactionChannelSN *string `json:"TransactionChannelSN,omitempty" xml:"TransactionChannelSN,omitempty"`
	// The type of the transaction flow. If you specify one of the following types for this parameter, the results for the specified type are returned. If the type that you specify does not belong to the following types, no result is returned. If you leave this parameter empty, the results for the following two types are returned by default. Valid values:
	//
	// *   Income
	// *   Expense
	TransactionFlow *string `json:"TransactionFlow,omitempty" xml:"TransactionFlow,omitempty"`
	// The number of the transaction.
	TransactionNumber *string `json:"TransactionNumber,omitempty" xml:"TransactionNumber,omitempty"`
	// The type of the transaction. If you specify one of the following transaction types for this parameter, the results for the specified transaction type are returned. If the transaction type that you specify does not belong to the following types, no result is returned. If you leave this parameter empty, the results for all the following transaction types are returned by default. Valid values:
	//
	// *   Payment
	// *   Withdraw
	// *   Refund
	// *   Consumption
	// *   Transfer
	// *   Adjust
	TransactionType *string `json:"TransactionType,omitempty" xml:"TransactionType,omitempty"`
}

func (s QueryAccountTransactionsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionsRequest) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionsRequest) SetCreateTimeEnd(v string) *QueryAccountTransactionsRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *QueryAccountTransactionsRequest) SetCreateTimeStart(v string) *QueryAccountTransactionsRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *QueryAccountTransactionsRequest) SetPageNum(v int32) *QueryAccountTransactionsRequest {
	s.PageNum = &v
	return s
}

func (s *QueryAccountTransactionsRequest) SetPageSize(v int32) *QueryAccountTransactionsRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAccountTransactionsRequest) SetRecordID(v string) *QueryAccountTransactionsRequest {
	s.RecordID = &v
	return s
}

func (s *QueryAccountTransactionsRequest) SetTransactionChannel(v string) *QueryAccountTransactionsRequest {
	s.TransactionChannel = &v
	return s
}

func (s *QueryAccountTransactionsRequest) SetTransactionChannelSN(v string) *QueryAccountTransactionsRequest {
	s.TransactionChannelSN = &v
	return s
}

func (s *QueryAccountTransactionsRequest) SetTransactionFlow(v string) *QueryAccountTransactionsRequest {
	s.TransactionFlow = &v
	return s
}

func (s *QueryAccountTransactionsRequest) SetTransactionNumber(v string) *QueryAccountTransactionsRequest {
	s.TransactionNumber = &v
	return s
}

func (s *QueryAccountTransactionsRequest) SetTransactionType(v string) *QueryAccountTransactionsRequest {
	s.TransactionType = &v
	return s
}

type QueryAccountTransactionsResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryAccountTransactionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryAccountTransactionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionsResponseBody) SetCode(v string) *QueryAccountTransactionsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAccountTransactionsResponseBody) SetData(v *QueryAccountTransactionsResponseBodyData) *QueryAccountTransactionsResponseBody {
	s.Data = v
	return s
}

func (s *QueryAccountTransactionsResponseBody) SetMessage(v string) *QueryAccountTransactionsResponseBody {
	s.Message = &v
	return s
}

func (s *QueryAccountTransactionsResponseBody) SetRequestId(v string) *QueryAccountTransactionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAccountTransactionsResponseBody) SetSuccess(v bool) *QueryAccountTransactionsResponseBody {
	s.Success = &v
	return s
}

type QueryAccountTransactionsResponseBodyData struct {
	// The name of your Alibaba Cloud account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The information about transactions.
	AccountTransactionsList *QueryAccountTransactionsResponseBodyDataAccountTransactionsList `json:"AccountTransactionsList,omitempty" xml:"AccountTransactionsList,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryAccountTransactionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionsResponseBodyData) SetAccountName(v string) *QueryAccountTransactionsResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyData) SetAccountTransactionsList(v *QueryAccountTransactionsResponseBodyDataAccountTransactionsList) *QueryAccountTransactionsResponseBodyData {
	s.AccountTransactionsList = v
	return s
}

func (s *QueryAccountTransactionsResponseBodyData) SetPageNum(v int32) *QueryAccountTransactionsResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyData) SetPageSize(v int32) *QueryAccountTransactionsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyData) SetTotalCount(v int32) *QueryAccountTransactionsResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryAccountTransactionsResponseBodyDataAccountTransactionsList struct {
	AccountTransactionsList []*QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList `json:"AccountTransactionsList,omitempty" xml:"AccountTransactionsList,omitempty" type:"Repeated"`
}

func (s QueryAccountTransactionsResponseBodyDataAccountTransactionsList) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionsResponseBodyDataAccountTransactionsList) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsList) SetAccountTransactionsList(v []*QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) *QueryAccountTransactionsResponseBodyDataAccountTransactionsList {
	s.AccountTransactionsList = v
	return s
}

type QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList struct {
	// The amount.
	Amount *string `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The balance of the account.
	Balance *string `json:"Balance,omitempty" xml:"Balance,omitempty"`
	// The billing cycle. Format: YYYY-MM.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The type of transaction payment. Valid values:
	//
	// *   Cash: pay for the transaction in cash.
	// *   Deposit: pay for the transaction with deposit.
	// *   RegularBankCreditRefund: pay for the transaction with credit refund controlled by a bank.
	// *   DirectPay: directly pay for the transaction.
	FundType *string `json:"FundType,omitempty" xml:"FundType,omitempty"`
	// The number of the order or bill.
	RecordID *string `json:"RecordID,omitempty" xml:"RecordID,omitempty"`
	// The remarks on the transaction.
	Remarks *string `json:"Remarks,omitempty" xml:"Remarks,omitempty"`
	// The transaction account. For example, the account is a recharge account in Alipay or a transfer account.
	TransactionAccount *string `json:"TransactionAccount,omitempty" xml:"TransactionAccount,omitempty"`
	// The transaction channel.
	//
	// *   AccountBalance
	// *   BankTransfer
	// *   Alipay
	// *   AntCreditPay
	// *   OfflineRemittance
	// *   RegularBankCreditRefund
	// *   CreditCard
	// *   MyBankCredit
	// *   HuaxiaBankCInstallment
	// *   ApplePay
	TransactionChannel *string `json:"TransactionChannel,omitempty" xml:"TransactionChannel,omitempty"`
	// The serial number of the transaction channel.
	TransactionChannelSN *string `json:"TransactionChannelSN,omitempty" xml:"TransactionChannelSN,omitempty"`
	// The type of the transaction flow.
	//
	// *   Income
	// *   Expense
	TransactionFlow *string `json:"TransactionFlow,omitempty" xml:"TransactionFlow,omitempty"`
	// The number of the transaction.
	TransactionNumber *string `json:"TransactionNumber,omitempty" xml:"TransactionNumber,omitempty"`
	// The time when the transaction was made.
	TransactionTime *string `json:"TransactionTime,omitempty" xml:"TransactionTime,omitempty"`
	// The type of the transaction.
	//
	// *   Payment
	// *   Withdraw
	// *   Refund
	// *   Consumption
	// *   Transfer
	// *   Adjust
	TransactionType *string `json:"TransactionType,omitempty" xml:"TransactionType,omitempty"`
}

func (s QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetAmount(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.Amount = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetBalance(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.Balance = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetBillingCycle(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.BillingCycle = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetFundType(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.FundType = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetRecordID(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.RecordID = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetRemarks(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.Remarks = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionAccount(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionAccount = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionChannel(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionChannel = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionChannelSN(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionChannelSN = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionFlow(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionFlow = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionNumber(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionNumber = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionTime(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionTime = &v
	return s
}

func (s *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList) SetTransactionType(v string) *QueryAccountTransactionsResponseBodyDataAccountTransactionsListAccountTransactionsList {
	s.TransactionType = &v
	return s
}

type QueryAccountTransactionsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAccountTransactionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAccountTransactionsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAccountTransactionsResponse) GoString() string {
	return s.String()
}

func (s *QueryAccountTransactionsResponse) SetHeaders(v map[string]*string) *QueryAccountTransactionsResponse {
	s.Headers = v
	return s
}

func (s *QueryAccountTransactionsResponse) SetStatusCode(v int32) *QueryAccountTransactionsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAccountTransactionsResponse) SetBody(v *QueryAccountTransactionsResponseBody) *QueryAccountTransactionsResponse {
	s.Body = v
	return s
}

type QueryAvailableInstancesRequest struct {
	// The end time when the specified instance is created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	CreateTimeEnd *string `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// The start time when the specified instance is created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	CreateTimeStart *string `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. Example: 2016-05-23T12:00:00Z.
	EndTimeEnd *string `json:"EndTimeEnd,omitempty" xml:"EndTimeEnd,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. Example: 2016-05-23T12:00:00Z.
	EndTimeStart *string `json:"EndTimeStart,omitempty" xml:"EndTimeStart,omitempty"`
	// The ID of the instance. Separate multiple IDs with commas (,). You can specify a maximum of 100 IDs.
	InstanceIDs *string `json:"InstanceIDs,omitempty" xml:"InstanceIDs,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The code of the service. You can query the service code by calling the **QueryProductList** operation or viewing **Codes of Alibaba Cloud services**.
	//
	// >This parameter cannot be left empty if the region is specified.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The ID of the region in which the instance resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The renewal status of the specified instance. Valid values:
	//
	// *   AutoRenewal: The instance is automatically renewed.
	// *   ManualRenewal: The instance is manually renewed.
	// *   NotRenewal: The instance is not renewed.
	RenewStatus *string `json:"RenewStatus,omitempty" xml:"RenewStatus,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: subscription
	// *   PayAsYouGo: pay-as-you-go
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s QueryAvailableInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAvailableInstancesRequest) GoString() string {
	return s.String()
}

func (s *QueryAvailableInstancesRequest) SetCreateTimeEnd(v string) *QueryAvailableInstancesRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetCreateTimeStart(v string) *QueryAvailableInstancesRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetEndTimeEnd(v string) *QueryAvailableInstancesRequest {
	s.EndTimeEnd = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetEndTimeStart(v string) *QueryAvailableInstancesRequest {
	s.EndTimeStart = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetInstanceIDs(v string) *QueryAvailableInstancesRequest {
	s.InstanceIDs = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetOwnerId(v int64) *QueryAvailableInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetPageNum(v int32) *QueryAvailableInstancesRequest {
	s.PageNum = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetPageSize(v int32) *QueryAvailableInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetProductCode(v string) *QueryAvailableInstancesRequest {
	s.ProductCode = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetProductType(v string) *QueryAvailableInstancesRequest {
	s.ProductType = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetRegion(v string) *QueryAvailableInstancesRequest {
	s.Region = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetRenewStatus(v string) *QueryAvailableInstancesRequest {
	s.RenewStatus = &v
	return s
}

func (s *QueryAvailableInstancesRequest) SetSubscriptionType(v string) *QueryAvailableInstancesRequest {
	s.SubscriptionType = &v
	return s
}

type QueryAvailableInstancesResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryAvailableInstancesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryAvailableInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAvailableInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAvailableInstancesResponseBody) SetCode(v string) *QueryAvailableInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *QueryAvailableInstancesResponseBody) SetData(v *QueryAvailableInstancesResponseBodyData) *QueryAvailableInstancesResponseBody {
	s.Data = v
	return s
}

func (s *QueryAvailableInstancesResponseBody) SetMessage(v string) *QueryAvailableInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *QueryAvailableInstancesResponseBody) SetRequestId(v string) *QueryAvailableInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAvailableInstancesResponseBody) SetSuccess(v bool) *QueryAvailableInstancesResponseBody {
	s.Success = &v
	return s
}

type QueryAvailableInstancesResponseBodyData struct {
	// The instances returned.
	InstanceList []*QueryAvailableInstancesResponseBodyDataInstanceList `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Repeated"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryAvailableInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryAvailableInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryAvailableInstancesResponseBodyData) SetInstanceList(v []*QueryAvailableInstancesResponseBodyDataInstanceList) *QueryAvailableInstancesResponseBodyData {
	s.InstanceList = v
	return s
}

func (s *QueryAvailableInstancesResponseBodyData) SetPageNum(v int32) *QueryAvailableInstancesResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyData) SetPageSize(v int32) *QueryAvailableInstancesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyData) SetTotalCount(v int32) *QueryAvailableInstancesResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryAvailableInstancesResponseBodyDataInstanceList struct {
	// The time when the specified instance was created.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the instance was expired.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The time when the specified instance was expected to be released.
	ExpectedReleaseTime *string `json:"ExpectedReleaseTime,omitempty" xml:"ExpectedReleaseTime,omitempty"`
	// The ID of the instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The ID of the instance owner.
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The ID of the region in which the instance resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The time when the instance was released.
	ReleaseTime *string `json:"ReleaseTime,omitempty" xml:"ReleaseTime,omitempty"`
	// The renewal status of the specified instance. Valid values:
	//
	// *   AutoRenewal: The instance is automatically renewed.
	// *   ManualRenewal: The instance is manually renewed.
	// *   NotRenewal: The instance is not renewed.
	RenewStatus *string `json:"RenewStatus,omitempty" xml:"RenewStatus,omitempty"`
	// The number of auto-renewal cycles.
	RenewalDuration *int32 `json:"RenewalDuration,omitempty" xml:"RenewalDuration,omitempty"`
	// The unit of the auto-renewal cycle. Valid values:
	//
	// *   M: month
	// *   Y: year
	RenewalDurationUnit *string `json:"RenewalDurationUnit,omitempty" xml:"RenewalDurationUnit,omitempty"`
	// The seller.
	Seller *string `json:"Seller,omitempty" xml:"Seller,omitempty"`
	// The ID of the seller.
	SellerId *int64 `json:"SellerId,omitempty" xml:"SellerId,omitempty"`
	// The status of the instance.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the specified instance was suspended.
	StopTime *string `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	// The sub-status of the specified instance.
	SubStatus *string `json:"SubStatus,omitempty" xml:"SubStatus,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: subscription
	// *   PayAsYouGo: pay-as-you-go
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s QueryAvailableInstancesResponseBodyDataInstanceList) String() string {
	return tea.Prettify(s)
}

func (s QueryAvailableInstancesResponseBodyDataInstanceList) GoString() string {
	return s.String()
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetCreateTime(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.CreateTime = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetEndTime(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.EndTime = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetExpectedReleaseTime(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.ExpectedReleaseTime = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetInstanceID(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.InstanceID = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetOwnerId(v int64) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.OwnerId = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetProductCode(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.ProductCode = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetProductType(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.ProductType = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetRegion(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.Region = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetReleaseTime(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.ReleaseTime = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetRenewStatus(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.RenewStatus = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetRenewalDuration(v int32) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.RenewalDuration = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetRenewalDurationUnit(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.RenewalDurationUnit = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetSeller(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.Seller = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetSellerId(v int64) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.SellerId = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetStatus(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.Status = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetStopTime(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.StopTime = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetSubStatus(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.SubStatus = &v
	return s
}

func (s *QueryAvailableInstancesResponseBodyDataInstanceList) SetSubscriptionType(v string) *QueryAvailableInstancesResponseBodyDataInstanceList {
	s.SubscriptionType = &v
	return s
}

type QueryAvailableInstancesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAvailableInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAvailableInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAvailableInstancesResponse) GoString() string {
	return s.String()
}

func (s *QueryAvailableInstancesResponse) SetHeaders(v map[string]*string) *QueryAvailableInstancesResponse {
	s.Headers = v
	return s
}

func (s *QueryAvailableInstancesResponse) SetStatusCode(v int32) *QueryAvailableInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAvailableInstancesResponse) SetBody(v *QueryAvailableInstancesResponseBody) *QueryAvailableInstancesResponse {
	s.Body = v
	return s
}

type QueryBillRequest struct {
	// The ID of the member.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The billing cycle, in the YYYY-MM format.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// Specifies whether to display local currency information in bills. The parameter will be discontinued.
	IsDisplayLocalCurrency *bool `json:"IsDisplayLocalCurrency,omitempty" xml:"IsDisplayLocalCurrency,omitempty"`
	// Specifies whether to filter out a bill whose pretax gross amount is 0. By default, a bill whose pretax gross amount is 0 is not filtered out. Valid values:
	//
	// *   true: filters out a bill whose pretax gross amount is 0.
	// *   false: does not filter out a bill whose pretax gross amount is 0.
	IsHideZeroCharge *bool  `json:"IsHideZeroCharge,omitempty" xml:"IsHideZeroCharge,omitempty"`
	OwnerId          *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. Default value: 1.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Default value: 20. Maximum value: 300.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription
	// *   PayAsYouGo
	//
	// **
	//
	// ****This parameter must be used together with the ProductCode parameter.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	// The type of the bill. Valid values:
	//
	// *   SubscriptionOrder
	// *   PayAsYouGoBill
	// *   Refund
	// *   Adjustment
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryBillRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBillRequest) GoString() string {
	return s.String()
}

func (s *QueryBillRequest) SetBillOwnerId(v int64) *QueryBillRequest {
	s.BillOwnerId = &v
	return s
}

func (s *QueryBillRequest) SetBillingCycle(v string) *QueryBillRequest {
	s.BillingCycle = &v
	return s
}

func (s *QueryBillRequest) SetIsDisplayLocalCurrency(v bool) *QueryBillRequest {
	s.IsDisplayLocalCurrency = &v
	return s
}

func (s *QueryBillRequest) SetIsHideZeroCharge(v bool) *QueryBillRequest {
	s.IsHideZeroCharge = &v
	return s
}

func (s *QueryBillRequest) SetOwnerId(v int64) *QueryBillRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryBillRequest) SetPageNum(v int32) *QueryBillRequest {
	s.PageNum = &v
	return s
}

func (s *QueryBillRequest) SetPageSize(v int32) *QueryBillRequest {
	s.PageSize = &v
	return s
}

func (s *QueryBillRequest) SetProductCode(v string) *QueryBillRequest {
	s.ProductCode = &v
	return s
}

func (s *QueryBillRequest) SetProductType(v string) *QueryBillRequest {
	s.ProductType = &v
	return s
}

func (s *QueryBillRequest) SetSubscriptionType(v string) *QueryBillRequest {
	s.SubscriptionType = &v
	return s
}

func (s *QueryBillRequest) SetType(v string) *QueryBillRequest {
	s.Type = &v
	return s
}

type QueryBillResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *QueryBillResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryBillResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryBillResponseBody) GoString() string {
	return s.String()
}

func (s *QueryBillResponseBody) SetCode(v string) *QueryBillResponseBody {
	s.Code = &v
	return s
}

func (s *QueryBillResponseBody) SetData(v *QueryBillResponseBodyData) *QueryBillResponseBody {
	s.Data = v
	return s
}

func (s *QueryBillResponseBody) SetMessage(v string) *QueryBillResponseBody {
	s.Message = &v
	return s
}

func (s *QueryBillResponseBody) SetRequestId(v string) *QueryBillResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryBillResponseBody) SetSuccess(v bool) *QueryBillResponseBody {
	s.Success = &v
	return s
}

type QueryBillResponseBodyData struct {
	// The ID of the account.
	AccountID *string `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// The name of the account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The billing cycle, in the YYYY-MM format.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The details of the bills.
	Items *QueryBillResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryBillResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryBillResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryBillResponseBodyData) SetAccountID(v string) *QueryBillResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *QueryBillResponseBodyData) SetAccountName(v string) *QueryBillResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *QueryBillResponseBodyData) SetBillingCycle(v string) *QueryBillResponseBodyData {
	s.BillingCycle = &v
	return s
}

func (s *QueryBillResponseBodyData) SetItems(v *QueryBillResponseBodyDataItems) *QueryBillResponseBodyData {
	s.Items = v
	return s
}

func (s *QueryBillResponseBodyData) SetPageNum(v int32) *QueryBillResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryBillResponseBodyData) SetPageSize(v int32) *QueryBillResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryBillResponseBodyData) SetTotalCount(v int32) *QueryBillResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryBillResponseBodyDataItems struct {
	Item []*QueryBillResponseBodyDataItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s QueryBillResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s QueryBillResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *QueryBillResponseBodyDataItems) SetItem(v []*QueryBillResponseBodyDataItemsItem) *QueryBillResponseBodyDataItems {
	s.Item = v
	return s
}

type QueryBillResponseBodyDataItemsItem struct {
	// The amount deducted by using credit refunds.
	AdjustAmount *float32 `json:"AdjustAmount,omitempty" xml:"AdjustAmount,omitempty"`
	// The amount paid after tax is deducted.
	AfterTaxAmount *float32 `json:"AfterTaxAmount,omitempty" xml:"AfterTaxAmount,omitempty"`
	// The amount paid in cash. The amount that was deducted by using credit refunds is not included.
	CashAmount *float32 `json:"CashAmount,omitempty" xml:"CashAmount,omitempty"`
	// The code of the commodity.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The type of the currency.
	//
	// *   CNY
	// *   USD
	// *   JPY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The amount deducted by using vouchers.
	DeductedByCashCoupons *float32 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons.
	DeductedByCoupons *float32 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards.
	DeductedByPrepaidCard *float32 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	// The discount amount.
	InvoiceDiscount *float32 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The type of the bill.
	//
	// *   SubscriptionOrder
	// *   PayAsYouGoBill
	// *   Refund
	// *   Adjustment
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The unsettled amount of the bill.
	OutstandingAmount *float32 `json:"OutstandingAmount,omitempty" xml:"OutstandingAmount,omitempty"`
	// The ID of the member. This parameter is returned in a multi-account payment scenario.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The amount paid with cash.
	PaymentAmount *float32 `json:"PaymentAmount,omitempty" xml:"PaymentAmount,omitempty"`
	// The currency used for payment.
	PaymentCurrency *string `json:"PaymentCurrency,omitempty" xml:"PaymentCurrency,omitempty"`
	// The time when the order was paid.
	PaymentTime *string `json:"PaymentTime,omitempty" xml:"PaymentTime,omitempty"`
	// The ID of the transaction.
	PaymentTransactionID *string `json:"PaymentTransactionID,omitempty" xml:"PaymentTransactionID,omitempty"`
	// The code of the service.
	PipCode *string `json:"PipCode,omitempty" xml:"PipCode,omitempty"`
	// The pretax amount
	PretaxAmount *float32 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	// The pretax amount paid in local currency.
	PretaxAmountLocal *float32 `json:"PretaxAmountLocal,omitempty" xml:"PretaxAmountLocal,omitempty"`
	// The pretax gross amount.
	PretaxGrossAmount *float32 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The details of the service.
	ProductDetail *string `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	// The name of the service.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The ID of the order or bill.
	RecordID *string `json:"RecordID,omitempty" xml:"RecordID,omitempty"`
	// The round down discount.
	RoundDownDiscount *string `json:"RoundDownDiscount,omitempty" xml:"RoundDownDiscount,omitempty"`
	// The payment status of the bill. Valid values:
	//
	// *   PayFinish: The bill is paid.
	// *   PayUnclear: The bill is not cleared.
	// *   PayUnsettle: The bill is not settled.
	// *   NoSettle: The bill is free of settlement.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the order corresponding to the bill.
	SubOrderId *string `json:"SubOrderId,omitempty" xml:"SubOrderId,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription
	// *   PayAsYouGo
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	// The tax.
	Tax *float32 `json:"Tax,omitempty" xml:"Tax,omitempty"`
	// The time when the bill ends.
	UsageEndTime *string `json:"UsageEndTime,omitempty" xml:"UsageEndTime,omitempty"`
	// The time when the bill starts.
	UsageStartTime *string `json:"UsageStartTime,omitempty" xml:"UsageStartTime,omitempty"`
}

func (s QueryBillResponseBodyDataItemsItem) String() string {
	return tea.Prettify(s)
}

func (s QueryBillResponseBodyDataItemsItem) GoString() string {
	return s.String()
}

func (s *QueryBillResponseBodyDataItemsItem) SetAdjustAmount(v float32) *QueryBillResponseBodyDataItemsItem {
	s.AdjustAmount = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetAfterTaxAmount(v float32) *QueryBillResponseBodyDataItemsItem {
	s.AfterTaxAmount = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetCashAmount(v float32) *QueryBillResponseBodyDataItemsItem {
	s.CashAmount = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetCommodityCode(v string) *QueryBillResponseBodyDataItemsItem {
	s.CommodityCode = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetCurrency(v string) *QueryBillResponseBodyDataItemsItem {
	s.Currency = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetDeductedByCashCoupons(v float32) *QueryBillResponseBodyDataItemsItem {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetDeductedByCoupons(v float32) *QueryBillResponseBodyDataItemsItem {
	s.DeductedByCoupons = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetDeductedByPrepaidCard(v float32) *QueryBillResponseBodyDataItemsItem {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetInvoiceDiscount(v float32) *QueryBillResponseBodyDataItemsItem {
	s.InvoiceDiscount = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetItem(v string) *QueryBillResponseBodyDataItemsItem {
	s.Item = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetOutstandingAmount(v float32) *QueryBillResponseBodyDataItemsItem {
	s.OutstandingAmount = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetOwnerID(v string) *QueryBillResponseBodyDataItemsItem {
	s.OwnerID = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetPaymentAmount(v float32) *QueryBillResponseBodyDataItemsItem {
	s.PaymentAmount = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetPaymentCurrency(v string) *QueryBillResponseBodyDataItemsItem {
	s.PaymentCurrency = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetPaymentTime(v string) *QueryBillResponseBodyDataItemsItem {
	s.PaymentTime = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetPaymentTransactionID(v string) *QueryBillResponseBodyDataItemsItem {
	s.PaymentTransactionID = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetPipCode(v string) *QueryBillResponseBodyDataItemsItem {
	s.PipCode = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetPretaxAmount(v float32) *QueryBillResponseBodyDataItemsItem {
	s.PretaxAmount = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetPretaxAmountLocal(v float32) *QueryBillResponseBodyDataItemsItem {
	s.PretaxAmountLocal = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetPretaxGrossAmount(v float32) *QueryBillResponseBodyDataItemsItem {
	s.PretaxGrossAmount = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetProductCode(v string) *QueryBillResponseBodyDataItemsItem {
	s.ProductCode = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetProductDetail(v string) *QueryBillResponseBodyDataItemsItem {
	s.ProductDetail = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetProductName(v string) *QueryBillResponseBodyDataItemsItem {
	s.ProductName = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetProductType(v string) *QueryBillResponseBodyDataItemsItem {
	s.ProductType = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetRecordID(v string) *QueryBillResponseBodyDataItemsItem {
	s.RecordID = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetRoundDownDiscount(v string) *QueryBillResponseBodyDataItemsItem {
	s.RoundDownDiscount = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetStatus(v string) *QueryBillResponseBodyDataItemsItem {
	s.Status = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetSubOrderId(v string) *QueryBillResponseBodyDataItemsItem {
	s.SubOrderId = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetSubscriptionType(v string) *QueryBillResponseBodyDataItemsItem {
	s.SubscriptionType = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetTax(v float32) *QueryBillResponseBodyDataItemsItem {
	s.Tax = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetUsageEndTime(v string) *QueryBillResponseBodyDataItemsItem {
	s.UsageEndTime = &v
	return s
}

func (s *QueryBillResponseBodyDataItemsItem) SetUsageStartTime(v string) *QueryBillResponseBodyDataItemsItem {
	s.UsageStartTime = &v
	return s
}

type QueryBillResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryBillResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryBillResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBillResponse) GoString() string {
	return s.String()
}

func (s *QueryBillResponse) SetHeaders(v map[string]*string) *QueryBillResponse {
	s.Headers = v
	return s
}

func (s *QueryBillResponse) SetStatusCode(v int32) *QueryBillResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryBillResponse) SetBody(v *QueryBillResponseBody) *QueryBillResponse {
	s.Body = v
	return s
}

type QueryBillOverviewRequest struct {
	// The ID of the member. If you specify a value for this parameter, you can query the bills of the specified member. If you leave this parameter empty, the bills of the current account are queried by default.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The billing cycle, in the YYYY-MM format.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method
	// *   PayAsYouGo: the pay-as-you-go billing method
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s QueryBillOverviewRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBillOverviewRequest) GoString() string {
	return s.String()
}

func (s *QueryBillOverviewRequest) SetBillOwnerId(v int64) *QueryBillOverviewRequest {
	s.BillOwnerId = &v
	return s
}

func (s *QueryBillOverviewRequest) SetBillingCycle(v string) *QueryBillOverviewRequest {
	s.BillingCycle = &v
	return s
}

func (s *QueryBillOverviewRequest) SetProductCode(v string) *QueryBillOverviewRequest {
	s.ProductCode = &v
	return s
}

func (s *QueryBillOverviewRequest) SetProductType(v string) *QueryBillOverviewRequest {
	s.ProductType = &v
	return s
}

func (s *QueryBillOverviewRequest) SetSubscriptionType(v string) *QueryBillOverviewRequest {
	s.SubscriptionType = &v
	return s
}

type QueryBillOverviewResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryBillOverviewResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryBillOverviewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryBillOverviewResponseBody) GoString() string {
	return s.String()
}

func (s *QueryBillOverviewResponseBody) SetCode(v string) *QueryBillOverviewResponseBody {
	s.Code = &v
	return s
}

func (s *QueryBillOverviewResponseBody) SetData(v *QueryBillOverviewResponseBodyData) *QueryBillOverviewResponseBody {
	s.Data = v
	return s
}

func (s *QueryBillOverviewResponseBody) SetMessage(v string) *QueryBillOverviewResponseBody {
	s.Message = &v
	return s
}

func (s *QueryBillOverviewResponseBody) SetRequestId(v string) *QueryBillOverviewResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryBillOverviewResponseBody) SetSuccess(v bool) *QueryBillOverviewResponseBody {
	s.Success = &v
	return s
}

type QueryBillOverviewResponseBodyData struct {
	// The ID of the account.
	AccountID *string `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// The name of the account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The billing cycle, in the YYYY-MM format.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The details of the bills.
	Items *QueryBillOverviewResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s QueryBillOverviewResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryBillOverviewResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryBillOverviewResponseBodyData) SetAccountID(v string) *QueryBillOverviewResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *QueryBillOverviewResponseBodyData) SetAccountName(v string) *QueryBillOverviewResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *QueryBillOverviewResponseBodyData) SetBillingCycle(v string) *QueryBillOverviewResponseBodyData {
	s.BillingCycle = &v
	return s
}

func (s *QueryBillOverviewResponseBodyData) SetItems(v *QueryBillOverviewResponseBodyDataItems) *QueryBillOverviewResponseBodyData {
	s.Items = v
	return s
}

type QueryBillOverviewResponseBodyDataItems struct {
	Item []*QueryBillOverviewResponseBodyDataItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s QueryBillOverviewResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s QueryBillOverviewResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *QueryBillOverviewResponseBodyDataItems) SetItem(v []*QueryBillOverviewResponseBodyDataItemsItem) *QueryBillOverviewResponseBodyDataItems {
	s.Item = v
	return s
}

type QueryBillOverviewResponseBodyDataItemsItem struct {
	// The amount deducted by using credit refunds.
	AdjustAmount   *float32 `json:"AdjustAmount,omitempty" xml:"AdjustAmount,omitempty"`
	AfterTaxAmount *float32 `json:"AfterTaxAmount,omitempty" xml:"AfterTaxAmount,omitempty"`
	// The ID of the account to which the bill belongs.
	BillAccountID *string `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	// The name of the account to which the bill belongs.
	BillAccountName *string `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	// The business type.
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The amount paid in cash. The amount that was deducted by using credit refunds is not included.
	CashAmount *float32 `json:"CashAmount,omitempty" xml:"CashAmount,omitempty"`
	// The code of the commodity. The commodity code is the same as that displayed in User Center.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The type of the currency. Valid values:
	//
	// *   CNY
	// *   USD
	// *   JPY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The amount deducted by using vouchers.
	DeductedByCashCoupons *float32 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons.
	DeductedByCoupons *float32 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards.
	DeductedByPrepaidCard *float32 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	// The discount amount.
	InvoiceDiscount *float32 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The type of the bill. Valid values:
	//
	// *   SubscriptionOrder
	// *   PayAsYouGoBill
	// *   Refund
	// *   Adjustment
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The unsettled amount or the amount deducted by using credits. This may be an unsettled amount of a regular user or credits consumed by a credit user.
	OutstandingAmount *float32 `json:"OutstandingAmount,omitempty" xml:"OutstandingAmount,omitempty"`
	// The ID of the bill owner.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The amount paid in cash. The amount that was deducted by using credit refunds is included.
	PaymentAmount   *float32 `json:"PaymentAmount,omitempty" xml:"PaymentAmount,omitempty"`
	PaymentCurrency *string  `json:"PaymentCurrency,omitempty" xml:"PaymentCurrency,omitempty"`
	// The code of the service. The service code is the same as that displayed in User Center.
	PipCode *string `json:"PipCode,omitempty" xml:"PipCode,omitempty"`
	// The pretax amount.
	PretaxAmount      *float32 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	PretaxAmountLocal *float32 `json:"PretaxAmountLocal,omitempty" xml:"PretaxAmountLocal,omitempty"`
	// The pretax gross amount.
	PretaxGrossAmount *float32 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The details of the service.
	ProductDetail *string `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	// The name of the service.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The round down discount.
	RoundDownDiscount *string `json:"RoundDownDiscount,omitempty" xml:"RoundDownDiscount,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method
	// *   PayAsYouGo: the pay-as-you-go billing method
	SubscriptionType *string  `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	Tax              *float32 `json:"Tax,omitempty" xml:"Tax,omitempty"`
}

func (s QueryBillOverviewResponseBodyDataItemsItem) String() string {
	return tea.Prettify(s)
}

func (s QueryBillOverviewResponseBodyDataItemsItem) GoString() string {
	return s.String()
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetAdjustAmount(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.AdjustAmount = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetAfterTaxAmount(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.AfterTaxAmount = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetBillAccountID(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.BillAccountID = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetBillAccountName(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.BillAccountName = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetBizType(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.BizType = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetCashAmount(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.CashAmount = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetCommodityCode(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.CommodityCode = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetCurrency(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.Currency = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetDeductedByCashCoupons(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetDeductedByCoupons(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.DeductedByCoupons = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetDeductedByPrepaidCard(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetInvoiceDiscount(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.InvoiceDiscount = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetItem(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.Item = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetOutstandingAmount(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.OutstandingAmount = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetOwnerID(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.OwnerID = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetPaymentAmount(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.PaymentAmount = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetPaymentCurrency(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.PaymentCurrency = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetPipCode(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.PipCode = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetPretaxAmount(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.PretaxAmount = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetPretaxAmountLocal(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.PretaxAmountLocal = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetPretaxGrossAmount(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.PretaxGrossAmount = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetProductCode(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.ProductCode = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetProductDetail(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.ProductDetail = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetProductName(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.ProductName = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetProductType(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.ProductType = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetRoundDownDiscount(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.RoundDownDiscount = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetSubscriptionType(v string) *QueryBillOverviewResponseBodyDataItemsItem {
	s.SubscriptionType = &v
	return s
}

func (s *QueryBillOverviewResponseBodyDataItemsItem) SetTax(v float32) *QueryBillOverviewResponseBodyDataItemsItem {
	s.Tax = &v
	return s
}

type QueryBillOverviewResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryBillOverviewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryBillOverviewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBillOverviewResponse) GoString() string {
	return s.String()
}

func (s *QueryBillOverviewResponse) SetHeaders(v map[string]*string) *QueryBillOverviewResponse {
	s.Headers = v
	return s
}

func (s *QueryBillOverviewResponse) SetStatusCode(v int32) *QueryBillOverviewResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryBillOverviewResponse) SetBody(v *QueryBillOverviewResponseBody) *QueryBillOverviewResponse {
	s.Body = v
	return s
}

type QueryBillToOSSSubscriptionResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *QueryBillToOSSSubscriptionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryBillToOSSSubscriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryBillToOSSSubscriptionResponseBody) GoString() string {
	return s.String()
}

func (s *QueryBillToOSSSubscriptionResponseBody) SetCode(v string) *QueryBillToOSSSubscriptionResponseBody {
	s.Code = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBody) SetData(v *QueryBillToOSSSubscriptionResponseBodyData) *QueryBillToOSSSubscriptionResponseBody {
	s.Data = v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBody) SetMessage(v string) *QueryBillToOSSSubscriptionResponseBody {
	s.Message = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBody) SetRequestId(v string) *QueryBillToOSSSubscriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBody) SetSuccess(v bool) *QueryBillToOSSSubscriptionResponseBody {
	s.Success = &v
	return s
}

type QueryBillToOSSSubscriptionResponseBodyData struct {
	// The ID of the account used to perform the query.
	AccountID *string `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// The name of the account used to perform the query.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The details of the subscribed bill.
	Items *QueryBillToOSSSubscriptionResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s QueryBillToOSSSubscriptionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryBillToOSSSubscriptionResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryBillToOSSSubscriptionResponseBodyData) SetAccountID(v string) *QueryBillToOSSSubscriptionResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBodyData) SetAccountName(v string) *QueryBillToOSSSubscriptionResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBodyData) SetItems(v *QueryBillToOSSSubscriptionResponseBodyDataItems) *QueryBillToOSSSubscriptionResponseBodyData {
	s.Items = v
	return s
}

type QueryBillToOSSSubscriptionResponseBodyDataItems struct {
	Item []*QueryBillToOSSSubscriptionResponseBodyDataItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s QueryBillToOSSSubscriptionResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s QueryBillToOSSSubscriptionResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *QueryBillToOSSSubscriptionResponseBodyDataItems) SetItem(v []*QueryBillToOSSSubscriptionResponseBodyDataItemsItem) *QueryBillToOSSSubscriptionResponseBodyDataItems {
	s.Item = v
	return s
}

type QueryBillToOSSSubscriptionResponseBodyDataItemsItem struct {
	// The owner ID of the Object Storage Service (OSS) bucket.
	BucketOwnerId *int64 `json:"BucketOwnerId,omitempty" xml:"BucketOwnerId,omitempty"`
	// The path in the OSS bucket.
	BucketPath *string `json:"BucketPath,omitempty" xml:"BucketPath,omitempty"`
	// The maximum number of data rows in a single file. If the number of data rows in a bill exceeds the upper limit, the bill is split into multiple files. Then, multiple files are merged and compressed into a package.
	RowLimitPerFile *int32 `json:"RowLimitPerFile,omitempty" xml:"RowLimitPerFile,omitempty"`
	// The ID of the OSS bucket that stores the subscribed bill.
	SubscribeBucket *string `json:"SubscribeBucket,omitempty" xml:"SubscribeBucket,omitempty"`
	// The code of the language.
	//
	// Valid values:
	//
	// *   en: English
	// *   zh: Chinese
	SubscribeLanguage *string `json:"SubscribeLanguage,omitempty" xml:"SubscribeLanguage,omitempty"`
	// The time when the subscribed bill was stored in the OSS bucket. The time is displayed in the YYYY-MM-DD hh:mm:ss format.
	SubscribeTime *string `json:"SubscribeTime,omitempty" xml:"SubscribeTime,omitempty"`
	// The type of the subscribed bill. Valid values:
	//
	// *   BillingItemDetailForBillingPeriod: the bill of a billable item.
	// *   InstanceDetailForBillingPeriod: the bill of an instance.
	SubscribeType *string `json:"SubscribeType,omitempty" xml:"SubscribeType,omitempty"`
}

func (s QueryBillToOSSSubscriptionResponseBodyDataItemsItem) String() string {
	return tea.Prettify(s)
}

func (s QueryBillToOSSSubscriptionResponseBodyDataItemsItem) GoString() string {
	return s.String()
}

func (s *QueryBillToOSSSubscriptionResponseBodyDataItemsItem) SetBucketOwnerId(v int64) *QueryBillToOSSSubscriptionResponseBodyDataItemsItem {
	s.BucketOwnerId = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBodyDataItemsItem) SetBucketPath(v string) *QueryBillToOSSSubscriptionResponseBodyDataItemsItem {
	s.BucketPath = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBodyDataItemsItem) SetRowLimitPerFile(v int32) *QueryBillToOSSSubscriptionResponseBodyDataItemsItem {
	s.RowLimitPerFile = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBodyDataItemsItem) SetSubscribeBucket(v string) *QueryBillToOSSSubscriptionResponseBodyDataItemsItem {
	s.SubscribeBucket = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBodyDataItemsItem) SetSubscribeLanguage(v string) *QueryBillToOSSSubscriptionResponseBodyDataItemsItem {
	s.SubscribeLanguage = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBodyDataItemsItem) SetSubscribeTime(v string) *QueryBillToOSSSubscriptionResponseBodyDataItemsItem {
	s.SubscribeTime = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponseBodyDataItemsItem) SetSubscribeType(v string) *QueryBillToOSSSubscriptionResponseBodyDataItemsItem {
	s.SubscribeType = &v
	return s
}

type QueryBillToOSSSubscriptionResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryBillToOSSSubscriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryBillToOSSSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBillToOSSSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *QueryBillToOSSSubscriptionResponse) SetHeaders(v map[string]*string) *QueryBillToOSSSubscriptionResponse {
	s.Headers = v
	return s
}

func (s *QueryBillToOSSSubscriptionResponse) SetStatusCode(v int32) *QueryBillToOSSSubscriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryBillToOSSSubscriptionResponse) SetBody(v *QueryBillToOSSSubscriptionResponseBody) *QueryBillToOSSSubscriptionResponse {
	s.Body = v
	return s
}

type QueryCashCouponsRequest struct {
	// Specifies whether the voucher takes effect. Valid values:
	//
	// *   true: The voucher takes effect.
	// *   false: The voucher does not take effect.
	EffectiveOrNot *bool `json:"EffectiveOrNot,omitempty" xml:"EffectiveOrNot,omitempty"`
	// The end time of the validity period of the voucher. Specify the parameter in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2018-08-01T00:00:00Z.
	ExpiryTimeEnd *string `json:"ExpiryTimeEnd,omitempty" xml:"ExpiryTimeEnd,omitempty"`
	// The start time of the validity period of the voucher. Specify the parameter in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2018-08-01T00:00:00Z.
	ExpiryTimeStart *string `json:"ExpiryTimeStart,omitempty" xml:"ExpiryTimeStart,omitempty"`
}

func (s QueryCashCouponsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCashCouponsRequest) GoString() string {
	return s.String()
}

func (s *QueryCashCouponsRequest) SetEffectiveOrNot(v bool) *QueryCashCouponsRequest {
	s.EffectiveOrNot = &v
	return s
}

func (s *QueryCashCouponsRequest) SetExpiryTimeEnd(v string) *QueryCashCouponsRequest {
	s.ExpiryTimeEnd = &v
	return s
}

func (s *QueryCashCouponsRequest) SetExpiryTimeStart(v string) *QueryCashCouponsRequest {
	s.ExpiryTimeStart = &v
	return s
}

type QueryCashCouponsResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryCashCouponsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCashCouponsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCashCouponsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCashCouponsResponseBody) SetCode(v string) *QueryCashCouponsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCashCouponsResponseBody) SetData(v *QueryCashCouponsResponseBodyData) *QueryCashCouponsResponseBody {
	s.Data = v
	return s
}

func (s *QueryCashCouponsResponseBody) SetMessage(v string) *QueryCashCouponsResponseBody {
	s.Message = &v
	return s
}

func (s *QueryCashCouponsResponseBody) SetRequestId(v string) *QueryCashCouponsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCashCouponsResponseBody) SetSuccess(v bool) *QueryCashCouponsResponseBody {
	s.Success = &v
	return s
}

type QueryCashCouponsResponseBodyData struct {
	CashCoupon []*QueryCashCouponsResponseBodyDataCashCoupon `json:"CashCoupon,omitempty" xml:"CashCoupon,omitempty" type:"Repeated"`
}

func (s QueryCashCouponsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryCashCouponsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryCashCouponsResponseBodyData) SetCashCoupon(v []*QueryCashCouponsResponseBodyDataCashCoupon) *QueryCashCouponsResponseBodyData {
	s.CashCoupon = v
	return s
}

type QueryCashCouponsResponseBodyDataCashCoupon struct {
	// The service to which the voucher is applicable.
	ApplicableProducts *string `json:"ApplicableProducts,omitempty" xml:"ApplicableProducts,omitempty"`
	// The scenario to which the voucher is applicable.
	ApplicableScenarios *string `json:"ApplicableScenarios,omitempty" xml:"ApplicableScenarios,omitempty"`
	// The remaining quota of the voucher.
	Balance *string `json:"Balance,omitempty" xml:"Balance,omitempty"`
	// The ID of the voucher.
	CashCouponId *int64 `json:"CashCouponId,omitempty" xml:"CashCouponId,omitempty"`
	// The code of the voucher.
	CashCouponNo *string `json:"CashCouponNo,omitempty" xml:"CashCouponNo,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The time when the voucher took effect.
	EffectiveTime *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	// The time when the voucher expired.
	ExpiryTime *string `json:"ExpiryTime,omitempty" xml:"ExpiryTime,omitempty"`
	// The time when the voucher was released.
	GrantedTime *string `json:"GrantedTime,omitempty" xml:"GrantedTime,omitempty"`
	// The denomination of the voucher.
	NominalValue *string `json:"NominalValue,omitempty" xml:"NominalValue,omitempty"`
	// The state of the voucher. Valid values:
	//
	// *   Available: The voucher is valid.
	// *   Expired: The voucher has expired.
	// *   Cancelled: The voucher is canceled.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QueryCashCouponsResponseBodyDataCashCoupon) String() string {
	return tea.Prettify(s)
}

func (s QueryCashCouponsResponseBodyDataCashCoupon) GoString() string {
	return s.String()
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetApplicableProducts(v string) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.ApplicableProducts = &v
	return s
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetApplicableScenarios(v string) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.ApplicableScenarios = &v
	return s
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetBalance(v string) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.Balance = &v
	return s
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetCashCouponId(v int64) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.CashCouponId = &v
	return s
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetCashCouponNo(v string) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.CashCouponNo = &v
	return s
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetDescription(v string) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.Description = &v
	return s
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetEffectiveTime(v string) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.EffectiveTime = &v
	return s
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetExpiryTime(v string) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.ExpiryTime = &v
	return s
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetGrantedTime(v string) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.GrantedTime = &v
	return s
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetNominalValue(v string) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.NominalValue = &v
	return s
}

func (s *QueryCashCouponsResponseBodyDataCashCoupon) SetStatus(v string) *QueryCashCouponsResponseBodyDataCashCoupon {
	s.Status = &v
	return s
}

type QueryCashCouponsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCashCouponsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCashCouponsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCashCouponsResponse) GoString() string {
	return s.String()
}

func (s *QueryCashCouponsResponse) SetHeaders(v map[string]*string) *QueryCashCouponsResponse {
	s.Headers = v
	return s
}

func (s *QueryCashCouponsResponse) SetStatusCode(v int32) *QueryCashCouponsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCashCouponsResponse) SetBody(v *QueryCashCouponsResponseBody) *QueryCashCouponsResponse {
	s.Body = v
	return s
}

type QueryCommodityListRequest struct {
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s QueryCommodityListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCommodityListRequest) GoString() string {
	return s.String()
}

func (s *QueryCommodityListRequest) SetLang(v string) *QueryCommodityListRequest {
	s.Lang = &v
	return s
}

func (s *QueryCommodityListRequest) SetProductCode(v string) *QueryCommodityListRequest {
	s.ProductCode = &v
	return s
}

type QueryCommodityListResponseBody struct {
	// The HTTP status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *QueryCommodityListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the information about the service was queried.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCommodityListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCommodityListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCommodityListResponseBody) SetCode(v string) *QueryCommodityListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCommodityListResponseBody) SetData(v *QueryCommodityListResponseBodyData) *QueryCommodityListResponseBody {
	s.Data = v
	return s
}

func (s *QueryCommodityListResponseBody) SetMessage(v string) *QueryCommodityListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryCommodityListResponseBody) SetRequestId(v string) *QueryCommodityListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCommodityListResponseBody) SetSuccess(v bool) *QueryCommodityListResponseBody {
	s.Success = &v
	return s
}

type QueryCommodityListResponseBodyData struct {
	// The information about the service.
	CommodityList []*QueryCommodityListResponseBodyDataCommodityList `json:"CommodityList,omitempty" xml:"CommodityList,omitempty" type:"Repeated"`
}

func (s QueryCommodityListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryCommodityListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryCommodityListResponseBodyData) SetCommodityList(v []*QueryCommodityListResponseBodyDataCommodityList) *QueryCommodityListResponseBodyData {
	s.CommodityList = v
	return s
}

type QueryCommodityListResponseBodyDataCommodityList struct {
	// The payment type. Valid values: POSTPAY (pay-as-you-go) and PREPAY (subscription).
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The code of the service, which is the same as that on the Billing Management page.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The name of the service.
	CommodityName *string `json:"CommodityName,omitempty" xml:"CommodityName,omitempty"`
}

func (s QueryCommodityListResponseBodyDataCommodityList) String() string {
	return tea.Prettify(s)
}

func (s QueryCommodityListResponseBodyDataCommodityList) GoString() string {
	return s.String()
}

func (s *QueryCommodityListResponseBodyDataCommodityList) SetChargeType(v string) *QueryCommodityListResponseBodyDataCommodityList {
	s.ChargeType = &v
	return s
}

func (s *QueryCommodityListResponseBodyDataCommodityList) SetCommodityCode(v string) *QueryCommodityListResponseBodyDataCommodityList {
	s.CommodityCode = &v
	return s
}

func (s *QueryCommodityListResponseBodyDataCommodityList) SetCommodityName(v string) *QueryCommodityListResponseBodyDataCommodityList {
	s.CommodityName = &v
	return s
}

type QueryCommodityListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCommodityListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCommodityListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCommodityListResponse) GoString() string {
	return s.String()
}

func (s *QueryCommodityListResponse) SetHeaders(v map[string]*string) *QueryCommodityListResponse {
	s.Headers = v
	return s
}

func (s *QueryCommodityListResponse) SetStatusCode(v int32) *QueryCommodityListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCommodityListResponse) SetBody(v *QueryCommodityListResponseBody) *QueryCommodityListResponse {
	s.Body = v
	return s
}

type QueryCostUnitRequest struct {
	// The user ID of the cost center owner.
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// The page number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries per page. A maximum of 300 entries can be returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the parent cost center. A value of -1 indicates the root cost center.
	ParentUnitId *int64 `json:"ParentUnitId,omitempty" xml:"ParentUnitId,omitempty"`
}

func (s QueryCostUnitRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitRequest) GoString() string {
	return s.String()
}

func (s *QueryCostUnitRequest) SetOwnerUid(v int64) *QueryCostUnitRequest {
	s.OwnerUid = &v
	return s
}

func (s *QueryCostUnitRequest) SetPageNum(v int32) *QueryCostUnitRequest {
	s.PageNum = &v
	return s
}

func (s *QueryCostUnitRequest) SetPageSize(v int32) *QueryCostUnitRequest {
	s.PageSize = &v
	return s
}

func (s *QueryCostUnitRequest) SetParentUnitId(v int64) *QueryCostUnitRequest {
	s.ParentUnitId = &v
	return s
}

type QueryCostUnitResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryCostUnitResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCostUnitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResponseBody) SetCode(v string) *QueryCostUnitResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCostUnitResponseBody) SetData(v *QueryCostUnitResponseBodyData) *QueryCostUnitResponseBody {
	s.Data = v
	return s
}

func (s *QueryCostUnitResponseBody) SetMessage(v string) *QueryCostUnitResponseBody {
	s.Message = &v
	return s
}

func (s *QueryCostUnitResponseBody) SetRequestId(v string) *QueryCostUnitResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCostUnitResponseBody) SetSuccess(v bool) *QueryCostUnitResponseBody {
	s.Success = &v
	return s
}

type QueryCostUnitResponseBodyData struct {
	// The cost centers.
	CostUnitDtoList []*QueryCostUnitResponseBodyDataCostUnitDtoList `json:"CostUnitDtoList,omitempty" xml:"CostUnitDtoList,omitempty" type:"Repeated"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryCostUnitResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResponseBodyData) SetCostUnitDtoList(v []*QueryCostUnitResponseBodyDataCostUnitDtoList) *QueryCostUnitResponseBodyData {
	s.CostUnitDtoList = v
	return s
}

func (s *QueryCostUnitResponseBodyData) SetPageNum(v int32) *QueryCostUnitResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryCostUnitResponseBodyData) SetPageSize(v int32) *QueryCostUnitResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryCostUnitResponseBodyData) SetTotalCount(v int32) *QueryCostUnitResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryCostUnitResponseBodyDataCostUnitDtoList struct {
	// The user ID of the cost center owner.
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// The ID of the parent cost center. A value of -1 indicates the root cost center.
	ParentUnitId *int64 `json:"ParentUnitId,omitempty" xml:"ParentUnitId,omitempty"`
	// The ID of the cost center.
	UnitId *int64 `json:"UnitId,omitempty" xml:"UnitId,omitempty"`
	// The name of the cost center.
	UnitName *string `json:"UnitName,omitempty" xml:"UnitName,omitempty"`
}

func (s QueryCostUnitResponseBodyDataCostUnitDtoList) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResponseBodyDataCostUnitDtoList) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResponseBodyDataCostUnitDtoList) SetOwnerUid(v int64) *QueryCostUnitResponseBodyDataCostUnitDtoList {
	s.OwnerUid = &v
	return s
}

func (s *QueryCostUnitResponseBodyDataCostUnitDtoList) SetParentUnitId(v int64) *QueryCostUnitResponseBodyDataCostUnitDtoList {
	s.ParentUnitId = &v
	return s
}

func (s *QueryCostUnitResponseBodyDataCostUnitDtoList) SetUnitId(v int64) *QueryCostUnitResponseBodyDataCostUnitDtoList {
	s.UnitId = &v
	return s
}

func (s *QueryCostUnitResponseBodyDataCostUnitDtoList) SetUnitName(v string) *QueryCostUnitResponseBodyDataCostUnitDtoList {
	s.UnitName = &v
	return s
}

type QueryCostUnitResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCostUnitResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCostUnitResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResponse) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResponse) SetHeaders(v map[string]*string) *QueryCostUnitResponse {
	s.Headers = v
	return s
}

func (s *QueryCostUnitResponse) SetStatusCode(v int32) *QueryCostUnitResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCostUnitResponse) SetBody(v *QueryCostUnitResponseBody) *QueryCostUnitResponse {
	s.Body = v
	return s
}

type QueryCostUnitResourceRequest struct {
	// The user ID of the cost center owner.
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// The number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the cost center.
	UnitId *int64 `json:"UnitId,omitempty" xml:"UnitId,omitempty"`
}

func (s QueryCostUnitResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResourceRequest) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResourceRequest) SetOwnerUid(v int64) *QueryCostUnitResourceRequest {
	s.OwnerUid = &v
	return s
}

func (s *QueryCostUnitResourceRequest) SetPageNum(v int32) *QueryCostUnitResourceRequest {
	s.PageNum = &v
	return s
}

func (s *QueryCostUnitResourceRequest) SetPageSize(v int32) *QueryCostUnitResourceRequest {
	s.PageSize = &v
	return s
}

func (s *QueryCostUnitResourceRequest) SetUnitId(v int64) *QueryCostUnitResourceRequest {
	s.UnitId = &v
	return s
}

type QueryCostUnitResourceResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryCostUnitResourceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCostUnitResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResourceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResourceResponseBody) SetCode(v string) *QueryCostUnitResourceResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCostUnitResourceResponseBody) SetData(v *QueryCostUnitResourceResponseBodyData) *QueryCostUnitResourceResponseBody {
	s.Data = v
	return s
}

func (s *QueryCostUnitResourceResponseBody) SetMessage(v string) *QueryCostUnitResourceResponseBody {
	s.Message = &v
	return s
}

func (s *QueryCostUnitResourceResponseBody) SetRequestId(v string) *QueryCostUnitResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCostUnitResourceResponseBody) SetSuccess(v bool) *QueryCostUnitResourceResponseBody {
	s.Success = &v
	return s
}

type QueryCostUnitResourceResponseBodyData struct {
	// The information about the cost center.
	CostUnit *QueryCostUnitResourceResponseBodyDataCostUnit `json:"CostUnit,omitempty" xml:"CostUnit,omitempty" type:"Struct"`
	// The statistical information about the cost center.
	CostUnitStatisInfo *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo `json:"CostUnitStatisInfo,omitempty" xml:"CostUnitStatisInfo,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The resource instances.
	ResourceInstanceDtoList []*QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList `json:"ResourceInstanceDtoList,omitempty" xml:"ResourceInstanceDtoList,omitempty" type:"Repeated"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryCostUnitResourceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResourceResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResourceResponseBodyData) SetCostUnit(v *QueryCostUnitResourceResponseBodyDataCostUnit) *QueryCostUnitResourceResponseBodyData {
	s.CostUnit = v
	return s
}

func (s *QueryCostUnitResourceResponseBodyData) SetCostUnitStatisInfo(v *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo) *QueryCostUnitResourceResponseBodyData {
	s.CostUnitStatisInfo = v
	return s
}

func (s *QueryCostUnitResourceResponseBodyData) SetPageNum(v int32) *QueryCostUnitResourceResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyData) SetPageSize(v int32) *QueryCostUnitResourceResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyData) SetResourceInstanceDtoList(v []*QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) *QueryCostUnitResourceResponseBodyData {
	s.ResourceInstanceDtoList = v
	return s
}

func (s *QueryCostUnitResourceResponseBodyData) SetTotalCount(v int32) *QueryCostUnitResourceResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryCostUnitResourceResponseBodyDataCostUnit struct {
	// The user ID of the cost center owner.
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// The ID of the parent cost center. A value of -1 indicates the root cost center.
	ParentUnitId *int64 `json:"ParentUnitId,omitempty" xml:"ParentUnitId,omitempty"`
	// The ID of the cost center.
	UnitId *int64 `json:"UnitId,omitempty" xml:"UnitId,omitempty"`
	// The name of the cost center.
	UnitName *string `json:"UnitName,omitempty" xml:"UnitName,omitempty"`
}

func (s QueryCostUnitResourceResponseBodyDataCostUnit) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResourceResponseBodyDataCostUnit) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnit) SetOwnerUid(v int64) *QueryCostUnitResourceResponseBodyDataCostUnit {
	s.OwnerUid = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnit) SetParentUnitId(v int64) *QueryCostUnitResourceResponseBodyDataCostUnit {
	s.ParentUnitId = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnit) SetUnitId(v int64) *QueryCostUnitResourceResponseBodyDataCostUnit {
	s.UnitId = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnit) SetUnitName(v string) *QueryCostUnitResourceResponseBodyDataCostUnit {
	s.UnitName = &v
	return s
}

type QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo struct {
	// The number of resource instances in the cost center.
	ResourceCount *int64 `json:"ResourceCount,omitempty" xml:"ResourceCount,omitempty"`
	// The number of resource groups in the cost center.
	ResourceGroupCount *int64 `json:"ResourceGroupCount,omitempty" xml:"ResourceGroupCount,omitempty"`
	// The number of sub-cost centers in the cost center.
	SubUnitCount *int64 `json:"SubUnitCount,omitempty" xml:"SubUnitCount,omitempty"`
	// The total number of resource instances, including resource instances of sub-cost centers, in the cost center.
	TotalResourceCount *int64 `json:"TotalResourceCount,omitempty" xml:"TotalResourceCount,omitempty"`
	// The total number of resource groups, including resource groups of sub-cost centers, in the cost center.
	TotalResourceGroupCount *int64 `json:"TotalResourceGroupCount,omitempty" xml:"TotalResourceGroupCount,omitempty"`
	// The total number of the associated accounts, including associated accounts of sub-cost centers, in the cost center.
	TotalUserCount *int64 `json:"TotalUserCount,omitempty" xml:"TotalUserCount,omitempty"`
	// The number of sub-cost centers in the cost center.
	UserCount *int64 `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo) SetResourceCount(v int64) *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo {
	s.ResourceCount = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo) SetResourceGroupCount(v int64) *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo {
	s.ResourceGroupCount = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo) SetSubUnitCount(v int64) *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo {
	s.SubUnitCount = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo) SetTotalResourceCount(v int64) *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo {
	s.TotalResourceCount = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo) SetTotalResourceGroupCount(v int64) *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo {
	s.TotalResourceGroupCount = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo) SetTotalUserCount(v int64) *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo {
	s.TotalUserCount = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo) SetUserCount(v int64) *QueryCostUnitResourceResponseBodyDataCostUnitStatisInfo {
	s.UserCount = &v
	return s
}

type QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList struct {
	// The split code of the resource.
	ApportionCode *string `json:"ApportionCode,omitempty" xml:"ApportionCode,omitempty"`
	// The split name of the resource.
	ApportionName *string `json:"ApportionName,omitempty" xml:"ApportionName,omitempty"`
	// The product code of the resource.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The commodity name of the resource.
	CommodityName *string `json:"CommodityName,omitempty" xml:"CommodityName,omitempty"`
	// The resources related to the resource instance.
	RelatedResources *string `json:"RelatedResources,omitempty" xml:"RelatedResources,omitempty"`
	// The resource group to which the resource belongs.
	ResourceGroup *string `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	// The instance ID of the resource.
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The custom name of the resource.
	ResourceNick *string `json:"ResourceNick,omitempty" xml:"ResourceNick,omitempty"`
	// The status of the resource.
	ResourceStatus *string `json:"ResourceStatus,omitempty" xml:"ResourceStatus,omitempty"`
	// The tags of the resource.
	ResourceTag *string `json:"ResourceTag,omitempty" xml:"ResourceTag,omitempty"`
	// The type of the resource.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The user ID of the resource owner.
	ResourceUserId *int64 `json:"ResourceUserId,omitempty" xml:"ResourceUserId,omitempty"`
	// The username of the resource owner.
	ResourceUserName *string `json:"ResourceUserName,omitempty" xml:"ResourceUserName,omitempty"`
}

func (s QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetApportionCode(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.ApportionCode = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetApportionName(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.ApportionName = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetCommodityCode(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.CommodityCode = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetCommodityName(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.CommodityName = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetRelatedResources(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.RelatedResources = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetResourceGroup(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.ResourceGroup = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetResourceId(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.ResourceId = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetResourceNick(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.ResourceNick = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetResourceStatus(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.ResourceStatus = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetResourceTag(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.ResourceTag = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetResourceType(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.ResourceType = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetResourceUserId(v int64) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.ResourceUserId = &v
	return s
}

func (s *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList) SetResourceUserName(v string) *QueryCostUnitResourceResponseBodyDataResourceInstanceDtoList {
	s.ResourceUserName = &v
	return s
}

type QueryCostUnitResourceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCostUnitResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCostUnitResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCostUnitResourceResponse) GoString() string {
	return s.String()
}

func (s *QueryCostUnitResourceResponse) SetHeaders(v map[string]*string) *QueryCostUnitResourceResponse {
	s.Headers = v
	return s
}

func (s *QueryCostUnitResourceResponse) SetStatusCode(v int32) *QueryCostUnitResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCostUnitResourceResponse) SetBody(v *QueryCostUnitResourceResponseBody) *QueryCostUnitResourceResponse {
	s.Body = v
	return s
}

type QueryCustomerAddressListRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s QueryCustomerAddressListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomerAddressListRequest) GoString() string {
	return s.String()
}

func (s *QueryCustomerAddressListRequest) SetOwnerId(v int64) *QueryCustomerAddressListRequest {
	s.OwnerId = &v
	return s
}

type QueryCustomerAddressListResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryCustomerAddressListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryCustomerAddressListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomerAddressListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCustomerAddressListResponseBody) SetCode(v string) *QueryCustomerAddressListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryCustomerAddressListResponseBody) SetData(v *QueryCustomerAddressListResponseBodyData) *QueryCustomerAddressListResponseBody {
	s.Data = v
	return s
}

func (s *QueryCustomerAddressListResponseBody) SetMessage(v string) *QueryCustomerAddressListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryCustomerAddressListResponseBody) SetRequestId(v string) *QueryCustomerAddressListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCustomerAddressListResponseBody) SetSuccess(v bool) *QueryCustomerAddressListResponseBody {
	s.Success = &v
	return s
}

type QueryCustomerAddressListResponseBodyData struct {
	// The details of addresses to which invoices are mailed.
	CustomerInvoiceAddressList *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressList `json:"CustomerInvoiceAddressList,omitempty" xml:"CustomerInvoiceAddressList,omitempty" type:"Struct"`
}

func (s QueryCustomerAddressListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomerAddressListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryCustomerAddressListResponseBodyData) SetCustomerInvoiceAddressList(v *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressList) *QueryCustomerAddressListResponseBodyData {
	s.CustomerInvoiceAddressList = v
	return s
}

type QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressList struct {
	CustomerInvoiceAddress []*QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress `json:"CustomerInvoiceAddress,omitempty" xml:"CustomerInvoiceAddress,omitempty" type:"Repeated"`
}

func (s QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressList) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressList) GoString() string {
	return s.String()
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressList) SetCustomerInvoiceAddress(v []*QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressList {
	s.CustomerInvoiceAddress = v
	return s
}

type QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress struct {
	// The addressee.
	Addressee *string `json:"Addressee,omitempty" xml:"Addressee,omitempty"`
	// The business type.
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The city to which the invoice is mailed.
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// The name of the district to which the invoice is mailed.
	County *string `json:"County,omitempty" xml:"County,omitempty"`
	// The detailed address to which the invoice is mailed. This parameter is returned after fields are concatenated.
	DeliveryAddress *string `json:"DeliveryAddress,omitempty" xml:"DeliveryAddress,omitempty"`
	// The ID.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The phone number of the addressee.
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	// The postcode.
	PostalCode *string `json:"PostalCode,omitempty" xml:"PostalCode,omitempty"`
	// The province to which the invoice is mailed.
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
	// The name of the street to which the invoice is mailed.
	Street *string `json:"Street,omitempty" xml:"Street,omitempty"`
	// The ID of the user.
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The nickname of the user.
	UserNick *string `json:"UserNick,omitempty" xml:"UserNick,omitempty"`
}

func (s QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) GoString() string {
	return s.String()
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetAddressee(v string) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.Addressee = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetBizType(v string) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.BizType = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetCity(v string) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.City = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetCounty(v string) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.County = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetDeliveryAddress(v string) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.DeliveryAddress = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetId(v int64) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.Id = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetPhone(v string) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.Phone = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetPostalCode(v string) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.PostalCode = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetProvince(v string) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.Province = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetStreet(v string) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.Street = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetUserId(v int64) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.UserId = &v
	return s
}

func (s *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress) SetUserNick(v string) *QueryCustomerAddressListResponseBodyDataCustomerInvoiceAddressListCustomerInvoiceAddress {
	s.UserNick = &v
	return s
}

type QueryCustomerAddressListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCustomerAddressListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCustomerAddressListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCustomerAddressListResponse) GoString() string {
	return s.String()
}

func (s *QueryCustomerAddressListResponse) SetHeaders(v map[string]*string) *QueryCustomerAddressListResponse {
	s.Headers = v
	return s
}

func (s *QueryCustomerAddressListResponse) SetStatusCode(v int32) *QueryCustomerAddressListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCustomerAddressListResponse) SetBody(v *QueryCustomerAddressListResponseBody) *QueryCustomerAddressListResponse {
	s.Body = v
	return s
}

type QueryDPUtilizationDetailRequest struct {
	// The code of the resource, such as ecsRi and scu_bag. If this parameter is specified, the ProdCode parameter does not take effect for the request.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The ID of the deducted instance. If this parameter is not specified, the details of all instances are returned.
	DeductedInstanceId *string `json:"DeductedInstanceId,omitempty" xml:"DeductedInstanceId,omitempty"`
	// The end of the time range to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Specifies whether to query the resource plan usage of linked accounts. Valid values:
	//
	// *   true: queries the resource plan usage of linked accounts.
	// *   false: does not query the resource plan usage of linked accounts.
	IncludeShare *bool `json:"IncludeShare,omitempty" xml:"IncludeShare,omitempty"`
	// The ID of the instance to query. If this parameter is not specified, the details of all used instances are returned.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The instance type of the instance.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The token that is used to retrieve the next page of results. For the first query, set the value to null. For subsequent queries, set the value to the token that is obtained from the NextToken parameter.
	LastToken *string `json:"LastToken,omitempty" xml:"LastToken,omitempty"`
	// The number of entries to return on each page. Default value: 20. Maximum value: 300.
	Limit *int32 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// The code of the service. Example: ecs.
	ProdCode *string `json:"ProdCode,omitempty" xml:"ProdCode,omitempty"`
	// The beginning of the time range to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryDPUtilizationDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDPUtilizationDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryDPUtilizationDetailRequest) SetCommodityCode(v string) *QueryDPUtilizationDetailRequest {
	s.CommodityCode = &v
	return s
}

func (s *QueryDPUtilizationDetailRequest) SetDeductedInstanceId(v string) *QueryDPUtilizationDetailRequest {
	s.DeductedInstanceId = &v
	return s
}

func (s *QueryDPUtilizationDetailRequest) SetEndTime(v string) *QueryDPUtilizationDetailRequest {
	s.EndTime = &v
	return s
}

func (s *QueryDPUtilizationDetailRequest) SetIncludeShare(v bool) *QueryDPUtilizationDetailRequest {
	s.IncludeShare = &v
	return s
}

func (s *QueryDPUtilizationDetailRequest) SetInstanceId(v string) *QueryDPUtilizationDetailRequest {
	s.InstanceId = &v
	return s
}

func (s *QueryDPUtilizationDetailRequest) SetInstanceSpec(v string) *QueryDPUtilizationDetailRequest {
	s.InstanceSpec = &v
	return s
}

func (s *QueryDPUtilizationDetailRequest) SetLastToken(v string) *QueryDPUtilizationDetailRequest {
	s.LastToken = &v
	return s
}

func (s *QueryDPUtilizationDetailRequest) SetLimit(v int32) *QueryDPUtilizationDetailRequest {
	s.Limit = &v
	return s
}

func (s *QueryDPUtilizationDetailRequest) SetProdCode(v string) *QueryDPUtilizationDetailRequest {
	s.ProdCode = &v
	return s
}

func (s *QueryDPUtilizationDetailRequest) SetStartTime(v string) *QueryDPUtilizationDetailRequest {
	s.StartTime = &v
	return s
}

type QueryDPUtilizationDetailResponseBody struct {
	// The HTTP status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *QueryDPUtilizationDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryDPUtilizationDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDPUtilizationDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDPUtilizationDetailResponseBody) SetCode(v string) *QueryDPUtilizationDetailResponseBody {
	s.Code = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBody) SetData(v *QueryDPUtilizationDetailResponseBodyData) *QueryDPUtilizationDetailResponseBody {
	s.Data = v
	return s
}

func (s *QueryDPUtilizationDetailResponseBody) SetMessage(v string) *QueryDPUtilizationDetailResponseBody {
	s.Message = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBody) SetRequestId(v string) *QueryDPUtilizationDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBody) SetSuccess(v bool) *QueryDPUtilizationDetailResponseBody {
	s.Success = &v
	return s
}

type QueryDPUtilizationDetailResponseBodyData struct {
	// The detailed resource plan usage.
	DetailList *QueryDPUtilizationDetailResponseBodyDataDetailList `json:"DetailList,omitempty" xml:"DetailList,omitempty" type:"Struct"`
	// The token that is used to retrieve the next page of results. You can set the LastToken parameter to this value in the next request. If null is returned, all results are queried.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
}

func (s QueryDPUtilizationDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryDPUtilizationDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryDPUtilizationDetailResponseBodyData) SetDetailList(v *QueryDPUtilizationDetailResponseBodyDataDetailList) *QueryDPUtilizationDetailResponseBodyData {
	s.DetailList = v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyData) SetNextToken(v string) *QueryDPUtilizationDetailResponseBodyData {
	s.NextToken = &v
	return s
}

type QueryDPUtilizationDetailResponseBodyDataDetailList struct {
	DetailList []*QueryDPUtilizationDetailResponseBodyDataDetailListDetailList `json:"DetailList,omitempty" xml:"DetailList,omitempty" type:"Repeated"`
}

func (s QueryDPUtilizationDetailResponseBodyDataDetailList) String() string {
	return tea.Prettify(s)
}

func (s QueryDPUtilizationDetailResponseBodyDataDetailList) GoString() string {
	return s.String()
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailList) SetDetailList(v []*QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) *QueryDPUtilizationDetailResponseBodyDataDetailList {
	s.DetailList = v
	return s
}

type QueryDPUtilizationDetailResponseBodyDataDetailListDetailList struct {
	// The deduction date.
	DeductDate *string `json:"DeductDate,omitempty" xml:"DeductDate,omitempty"`
	// The total computing capacity or storage capacity of the RI or SCU during the deduction.
	DeductFactorTotal *float32 `json:"DeductFactorTotal,omitempty" xml:"DeductFactorTotal,omitempty"`
	// The deduct factor. This parameter is returned only if the CommodityCode parameter is set to ecsRi.
	DeductHours *float32 `json:"DeductHours,omitempty" xml:"DeductHours,omitempty"`
	// The original measured amount.
	DeductMeasure *float32 `json:"DeductMeasure,omitempty" xml:"DeductMeasure,omitempty"`
	// The computing capacity or storage capacity that is deducted in a pay-as-you-go instance.
	DeductQuantity *float32 `json:"DeductQuantity,omitempty" xml:"DeductQuantity,omitempty"`
	// The code of the deducted service.
	DeductedCommodityCode *string `json:"DeductedCommodityCode,omitempty" xml:"DeductedCommodityCode,omitempty"`
	// The ID of the deducted instance.
	DeductedInstanceId *string `json:"DeductedInstanceId,omitempty" xml:"DeductedInstanceId,omitempty"`
	// The name of the deducted service.
	DeductedProductDetail *string `json:"DeductedProductDetail,omitempty" xml:"DeductedProductDetail,omitempty"`
	// The ID of the RI.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The instance type of the deducted instance.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The region in which the instance resides. This parameter can be left empty.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The billable item.
	ResCode *string `json:"ResCode,omitempty" xml:"ResCode,omitempty"`
	// The UID of the deducted instance.
	//
	// *   If the deduction is shared, the value of this parameter indicates the UID of the deducted instance.
	// *   If the deduction is not shared, the value of this parameter is the same as that of the uid parameter.
	ShareUid *int64 `json:"ShareUid,omitempty" xml:"ShareUid,omitempty"`
	// The UID of the deducted instance.
	Uid *int64 `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) String() string {
	return tea.Prettify(s)
}

func (s QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) GoString() string {
	return s.String()
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductDate(v string) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductDate = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductFactorTotal(v float32) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductFactorTotal = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductHours(v float32) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductHours = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductMeasure(v float32) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductMeasure = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductQuantity(v float32) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductQuantity = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductedCommodityCode(v string) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductedCommodityCode = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductedInstanceId(v string) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductedInstanceId = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductedProductDetail(v string) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductedProductDetail = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetInstanceId(v string) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.InstanceId = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetInstanceSpec(v string) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.InstanceSpec = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetRegion(v string) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.Region = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetResCode(v string) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.ResCode = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetShareUid(v int64) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.ShareUid = &v
	return s
}

func (s *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList) SetUid(v int64) *QueryDPUtilizationDetailResponseBodyDataDetailListDetailList {
	s.Uid = &v
	return s
}

type QueryDPUtilizationDetailResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDPUtilizationDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDPUtilizationDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDPUtilizationDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryDPUtilizationDetailResponse) SetHeaders(v map[string]*string) *QueryDPUtilizationDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryDPUtilizationDetailResponse) SetStatusCode(v int32) *QueryDPUtilizationDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDPUtilizationDetailResponse) SetBody(v *QueryDPUtilizationDetailResponseBody) *QueryDPUtilizationDetailResponse {
	s.Body = v
	return s
}

type QueryEvaluateListRequest struct {
	// The billing cycle.
	BillCycle *string `json:"BillCycle,omitempty" xml:"BillCycle,omitempty"`
	// The market types in invoices.
	//
	// >  By default, this parameter is left empty. If this parameter is left empty, all market types are queried.
	BizTypeList []*string `json:"BizTypeList,omitempty" xml:"BizTypeList,omitempty" type:"Repeated"`
	// The maximum amount to be queried.
	EndAmount *int64 `json:"EndAmount,omitempty" xml:"EndAmount,omitempty"`
	// The latest time when an order is paid Specify the time in the yyyy-mm-dd hh:mm:ss format.
	EndBizTime *string `json:"EndBizTime,omitempty" xml:"EndBizTime,omitempty"`
	// The end of the time range to query.
	EndSearchTime *string `json:"EndSearchTime,omitempty" xml:"EndSearchTime,omitempty"`
	// The ID of the external order.
	OutBizId *string `json:"OutBizId,omitempty" xml:"OutBizId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The type of the sort. Valid values:
	//
	// *   1: Sort invoices by ID in descending order.
	// *   2: Sort invoices by invoice type in descending order, and then sort invoices of the same type by ID in descending order.
	// *   3: Sort invoices by invoice type in ascending order, and then sort invoices of the same type by ID in descending order.
	SortType *int32 `json:"SortType,omitempty" xml:"SortType,omitempty"`
	// The minimum amount to be queried.
	StartAmount *int64 `json:"StartAmount,omitempty" xml:"StartAmount,omitempty"`
	// The earliest time when an order is paid. Specify the time in the yyyy-mm-dd hh:mm:ss format.
	StartBizTime *string `json:"StartBizTime,omitempty" xml:"StartBizTime,omitempty"`
	// The beginning of the time range to query.
	StartSearchTime *string `json:"StartSearchTime,omitempty" xml:"StartSearchTime,omitempty"`
	// The type of orders to be queried. Valid values:
	//
	// *   1: the orders in which the invoiceable amount is negative.
	// *   2: the orders in which the invoiceable amount is positive.
	// *   3: the orders in which the invoiceable amount is not 0.
	// *   4: the orders in which the amount that has been invoiced is greater than 0.
	//
	// >  By default, this parameter is left empty. If this parameter is left empty, all orders are queried.
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryEvaluateListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEvaluateListRequest) GoString() string {
	return s.String()
}

func (s *QueryEvaluateListRequest) SetBillCycle(v string) *QueryEvaluateListRequest {
	s.BillCycle = &v
	return s
}

func (s *QueryEvaluateListRequest) SetBizTypeList(v []*string) *QueryEvaluateListRequest {
	s.BizTypeList = v
	return s
}

func (s *QueryEvaluateListRequest) SetEndAmount(v int64) *QueryEvaluateListRequest {
	s.EndAmount = &v
	return s
}

func (s *QueryEvaluateListRequest) SetEndBizTime(v string) *QueryEvaluateListRequest {
	s.EndBizTime = &v
	return s
}

func (s *QueryEvaluateListRequest) SetEndSearchTime(v string) *QueryEvaluateListRequest {
	s.EndSearchTime = &v
	return s
}

func (s *QueryEvaluateListRequest) SetOutBizId(v string) *QueryEvaluateListRequest {
	s.OutBizId = &v
	return s
}

func (s *QueryEvaluateListRequest) SetOwnerId(v int64) *QueryEvaluateListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryEvaluateListRequest) SetPageNum(v int32) *QueryEvaluateListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryEvaluateListRequest) SetPageSize(v int32) *QueryEvaluateListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryEvaluateListRequest) SetSortType(v int32) *QueryEvaluateListRequest {
	s.SortType = &v
	return s
}

func (s *QueryEvaluateListRequest) SetStartAmount(v int64) *QueryEvaluateListRequest {
	s.StartAmount = &v
	return s
}

func (s *QueryEvaluateListRequest) SetStartBizTime(v string) *QueryEvaluateListRequest {
	s.StartBizTime = &v
	return s
}

func (s *QueryEvaluateListRequest) SetStartSearchTime(v string) *QueryEvaluateListRequest {
	s.StartSearchTime = &v
	return s
}

func (s *QueryEvaluateListRequest) SetType(v int32) *QueryEvaluateListRequest {
	s.Type = &v
	return s
}

type QueryEvaluateListResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryEvaluateListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryEvaluateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEvaluateListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEvaluateListResponseBody) SetCode(v string) *QueryEvaluateListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEvaluateListResponseBody) SetData(v *QueryEvaluateListResponseBodyData) *QueryEvaluateListResponseBody {
	s.Data = v
	return s
}

func (s *QueryEvaluateListResponseBody) SetMessage(v string) *QueryEvaluateListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryEvaluateListResponseBody) SetRequestId(v string) *QueryEvaluateListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEvaluateListResponseBody) SetSuccess(v bool) *QueryEvaluateListResponseBody {
	s.Success = &v
	return s
}

type QueryEvaluateListResponseBodyData struct {
	// The data returned.
	EvaluateList *QueryEvaluateListResponseBodyDataEvaluateList `json:"EvaluateList,omitempty" xml:"EvaluateList,omitempty" type:"Struct"`
	// The ID of the host.
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The number of the page returned.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The invoiced amount that meets the query conditions. Unit: Cent.
	TotalInvoiceAmount *int64 `json:"TotalInvoiceAmount,omitempty" xml:"TotalInvoiceAmount,omitempty"`
	// The invoiceable amount that meets the query conditions. Unit: Cent.
	TotalUnAppliedInvoiceAmount *int64 `json:"TotalUnAppliedInvoiceAmount,omitempty" xml:"TotalUnAppliedInvoiceAmount,omitempty"`
}

func (s QueryEvaluateListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryEvaluateListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryEvaluateListResponseBodyData) SetEvaluateList(v *QueryEvaluateListResponseBodyDataEvaluateList) *QueryEvaluateListResponseBodyData {
	s.EvaluateList = v
	return s
}

func (s *QueryEvaluateListResponseBodyData) SetHostId(v string) *QueryEvaluateListResponseBodyData {
	s.HostId = &v
	return s
}

func (s *QueryEvaluateListResponseBodyData) SetPageNum(v int32) *QueryEvaluateListResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryEvaluateListResponseBodyData) SetPageSize(v int32) *QueryEvaluateListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryEvaluateListResponseBodyData) SetTotalCount(v int32) *QueryEvaluateListResponseBodyData {
	s.TotalCount = &v
	return s
}

func (s *QueryEvaluateListResponseBodyData) SetTotalInvoiceAmount(v int64) *QueryEvaluateListResponseBodyData {
	s.TotalInvoiceAmount = &v
	return s
}

func (s *QueryEvaluateListResponseBodyData) SetTotalUnAppliedInvoiceAmount(v int64) *QueryEvaluateListResponseBodyData {
	s.TotalUnAppliedInvoiceAmount = &v
	return s
}

type QueryEvaluateListResponseBodyDataEvaluateList struct {
	Evaluate []*QueryEvaluateListResponseBodyDataEvaluateListEvaluate `json:"Evaluate,omitempty" xml:"Evaluate,omitempty" type:"Repeated"`
}

func (s QueryEvaluateListResponseBodyDataEvaluateList) String() string {
	return tea.Prettify(s)
}

func (s QueryEvaluateListResponseBodyDataEvaluateList) GoString() string {
	return s.String()
}

func (s *QueryEvaluateListResponseBodyDataEvaluateList) SetEvaluate(v []*QueryEvaluateListResponseBodyDataEvaluateListEvaluate) *QueryEvaluateListResponseBodyDataEvaluateList {
	s.Evaluate = v
	return s
}

type QueryEvaluateListResponseBodyDataEvaluateListEvaluate struct {
	// The billing cycle.
	BillCycle *string `json:"BillCycle,omitempty" xml:"BillCycle,omitempty"`
	// The ID of the bill.
	BillId *int64 `json:"BillId,omitempty" xml:"BillId,omitempty"`
	// The time.
	BizTime *string `json:"BizTime,omitempty" xml:"BizTime,omitempty"`
	// The market type in the invoice. Valid values:
	//
	// *   ALIYUN: Alibaba Cloud
	// *   MARKETPLACE: Alibaba Cloud Marketplace
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// The invoiceable amount.
	CanInvoiceAmount *int64 `json:"CanInvoiceAmount,omitempty" xml:"CanInvoiceAmount,omitempty"`
	// The creation time.
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The modification time.
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The ID of the invoice.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The invoiced amount.
	InvoicedAmount *int64 `json:"InvoicedAmount,omitempty" xml:"InvoicedAmount,omitempty"`
	// The ID of the item.
	ItemId *int64 `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	// The name of the object to be invoiced.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// If a refund is issued due to an order such as an unsubscription order or a configuration downgrade order, the refund amount is used to offset the amount of the invoice. The value is consistent with the value of the **OffsetCostAmount** parameter.
	OffsetAcceptAmount *int64 `json:"OffsetAcceptAmount,omitempty" xml:"OffsetAcceptAmount,omitempty"`
	// The refund amount used to offset the amount of the invoice. If a refund is issued due to an order such as an unsubscription order or a configuration downgrade order, the refund amount is used to offset the amount of the invoice. The value is consistent with the value of the **OffsetAcceptAmount** parameter.
	OffsetCostAmount *int64 `json:"OffsetCostAmount,omitempty" xml:"OffsetCostAmount,omitempty"`
	// The ID of the external object.
	OpId *string `json:"OpId,omitempty" xml:"OpId,omitempty"`
	// The original amount.
	OriginalAmount *int64 `json:"OriginalAmount,omitempty" xml:"OriginalAmount,omitempty"`
	// The ID of the external order.
	OutBizId *string `json:"OutBizId,omitempty" xml:"OutBizId,omitempty"`
	// The balance.
	PresentAmount *int64 `json:"PresentAmount,omitempty" xml:"PresentAmount,omitempty"`
	// The status of the invoiceable amount.
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of orders that are queried. Valid values:
	//
	// *   1: the orders in which the invoiceable amount is negative.
	// *   2: the orders in which the invoiceable amount is positive.
	// *   3: the orders in which the invoiceable amount is not 0.
	// *   4: the orders in which the amount that has been invoiced is greater than 0.
	//
	// >  By default, this parameter is left empty. If this parameter is left empty, all orders are queried.
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the user.
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The nickname of the user.
	UserNick *string `json:"UserNick,omitempty" xml:"UserNick,omitempty"`
}

func (s QueryEvaluateListResponseBodyDataEvaluateListEvaluate) String() string {
	return tea.Prettify(s)
}

func (s QueryEvaluateListResponseBodyDataEvaluateListEvaluate) GoString() string {
	return s.String()
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetBillCycle(v string) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.BillCycle = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetBillId(v int64) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.BillId = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetBizTime(v string) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.BizTime = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetBizType(v string) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.BizType = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetCanInvoiceAmount(v int64) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.CanInvoiceAmount = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetGmtCreate(v string) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.GmtCreate = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetGmtModified(v string) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.GmtModified = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetId(v int64) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.Id = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetInvoicedAmount(v int64) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.InvoicedAmount = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetItemId(v int64) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.ItemId = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetName(v string) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.Name = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetOffsetAcceptAmount(v int64) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.OffsetAcceptAmount = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetOffsetCostAmount(v int64) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.OffsetCostAmount = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetOpId(v string) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.OpId = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetOriginalAmount(v int64) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.OriginalAmount = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetOutBizId(v string) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.OutBizId = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetPresentAmount(v int64) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.PresentAmount = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetStatus(v int32) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.Status = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetType(v int32) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.Type = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetUserId(v int64) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.UserId = &v
	return s
}

func (s *QueryEvaluateListResponseBodyDataEvaluateListEvaluate) SetUserNick(v string) *QueryEvaluateListResponseBodyDataEvaluateListEvaluate {
	s.UserNick = &v
	return s
}

type QueryEvaluateListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryEvaluateListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryEvaluateListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEvaluateListResponse) GoString() string {
	return s.String()
}

func (s *QueryEvaluateListResponse) SetHeaders(v map[string]*string) *QueryEvaluateListResponse {
	s.Headers = v
	return s
}

func (s *QueryEvaluateListResponse) SetStatusCode(v int32) *QueryEvaluateListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryEvaluateListResponse) SetBody(v *QueryEvaluateListResponseBody) *QueryEvaluateListResponse {
	s.Body = v
	return s
}

type QueryFinancialAccountInfoRequest struct {
	// The ID of the Alibaba Cloud account.
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryFinancialAccountInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFinancialAccountInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryFinancialAccountInfoRequest) SetUserId(v int64) *QueryFinancialAccountInfoRequest {
	s.UserId = &v
	return s
}

type QueryFinancialAccountInfoResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryFinancialAccountInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryFinancialAccountInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFinancialAccountInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFinancialAccountInfoResponseBody) SetCode(v string) *QueryFinancialAccountInfoResponseBody {
	s.Code = &v
	return s
}

func (s *QueryFinancialAccountInfoResponseBody) SetData(v *QueryFinancialAccountInfoResponseBodyData) *QueryFinancialAccountInfoResponseBody {
	s.Data = v
	return s
}

func (s *QueryFinancialAccountInfoResponseBody) SetMessage(v string) *QueryFinancialAccountInfoResponseBody {
	s.Message = &v
	return s
}

func (s *QueryFinancialAccountInfoResponseBody) SetRequestId(v string) *QueryFinancialAccountInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryFinancialAccountInfoResponseBody) SetSuccess(v bool) *QueryFinancialAccountInfoResponseBody {
	s.Success = &v
	return s
}

type QueryFinancialAccountInfoResponseBodyData struct {
	// The type of the financial account. A value of MASTER indicates that the account is a management account. A value of MEMBER indicates that the account is a member.
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// Indicates whether the account is a financial account. A value of true indicates that the account is a financial account. A value of false indicates that the account is not a financial account.
	IsFinancialAccount *bool `json:"IsFinancialAccount,omitempty" xml:"IsFinancialAccount,omitempty"`
	// The ID of the group to which the member belongs.
	MemberGroupId *int64 `json:"MemberGroupId,omitempty" xml:"MemberGroupId,omitempty"`
	// The name of the group to which the member belongs.
	MemberGroupName *string `json:"MemberGroupName,omitempty" xml:"MemberGroupName,omitempty"`
	// The display name of the member.
	MemberNickName *string `json:"MemberNickName,omitempty" xml:"MemberNickName,omitempty"`
	// The username of the account.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s QueryFinancialAccountInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryFinancialAccountInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryFinancialAccountInfoResponseBodyData) SetAccountType(v string) *QueryFinancialAccountInfoResponseBodyData {
	s.AccountType = &v
	return s
}

func (s *QueryFinancialAccountInfoResponseBodyData) SetIsFinancialAccount(v bool) *QueryFinancialAccountInfoResponseBodyData {
	s.IsFinancialAccount = &v
	return s
}

func (s *QueryFinancialAccountInfoResponseBodyData) SetMemberGroupId(v int64) *QueryFinancialAccountInfoResponseBodyData {
	s.MemberGroupId = &v
	return s
}

func (s *QueryFinancialAccountInfoResponseBodyData) SetMemberGroupName(v string) *QueryFinancialAccountInfoResponseBodyData {
	s.MemberGroupName = &v
	return s
}

func (s *QueryFinancialAccountInfoResponseBodyData) SetMemberNickName(v string) *QueryFinancialAccountInfoResponseBodyData {
	s.MemberNickName = &v
	return s
}

func (s *QueryFinancialAccountInfoResponseBodyData) SetUserName(v string) *QueryFinancialAccountInfoResponseBodyData {
	s.UserName = &v
	return s
}

type QueryFinancialAccountInfoResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryFinancialAccountInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryFinancialAccountInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFinancialAccountInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryFinancialAccountInfoResponse) SetHeaders(v map[string]*string) *QueryFinancialAccountInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryFinancialAccountInfoResponse) SetStatusCode(v int32) *QueryFinancialAccountInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryFinancialAccountInfoResponse) SetBody(v *QueryFinancialAccountInfoResponseBody) *QueryFinancialAccountInfoResponse {
	s.Body = v
	return s
}

type QueryInstanceBillRequest struct {
	// The ID of the member. If you specify a value for this parameter, you can query the bills of the specified member. If you leave this parameter empty, the bills of the current account are queried by default.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The billing cycle. Format: YYYY-MM.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The billing date. This parameter is required only if the **Granularity** parameter is set to DAILY. Format: YYYY-MM-DD.
	BillingDate *string `json:"BillingDate,omitempty" xml:"BillingDate,omitempty"`
	// The granularity at which bills are queried. Valid values:
	//
	// *   MONTHLY: queries bills by month. The data queried is consistent with the data that is displayed for the specified billing cycle on the Billing Details tab of the Bill Details page in User Center.
	// *   DAILY: queries bills by day. The data queried is consistent with the data that is displayed for the specified day on the Billing Details tab of the Bill Details page in User Center.
	//
	// You must set the **BillingDate** parameter before you can set the Granularity parameter to DAILY.
	Granularity *string `json:"Granularity,omitempty" xml:"Granularity,omitempty"`
	// Specifies whether to query data by billable item. Valid values:
	//
	// *   false: does not query data by billable item. The data queried is consistent with the data that is displayed for the specified instance on the Billing Details tab of the Bill Details page in User Center.
	// *   true: queries data by billable item. The data queried is consistent with the data that is displayed for the specified billable item on the Billing Details tab of the Bill Details page in User Center.
	//
	// Default value: false.
	IsBillingItem *bool `json:"IsBillingItem,omitempty" xml:"IsBillingItem,omitempty"`
	// Specifies whether to filter out a bill whose pretax gross amount and pretax amount are 0. Default value: false.******** Valid values:
	//
	// *   false: does not filter the bill.
	// *   true: filters the bill.
	IsHideZeroCharge *bool  `json:"IsHideZeroCharge,omitempty" xml:"IsHideZeroCharge,omitempty"`
	OwnerId          *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. Default value: 1.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Default value: 20. Maximum value: 300.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service. This parameter is required if the ProductCode parameter is set to the service code of Alibaba Cloud Marketplace.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method
	// *   PayAsYouGo: the pay-as-you-go billing method
	//
	// **
	//
	// ****This parameter must be used together with the **ProductCode** parameter.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s QueryInstanceBillRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceBillRequest) GoString() string {
	return s.String()
}

func (s *QueryInstanceBillRequest) SetBillOwnerId(v int64) *QueryInstanceBillRequest {
	s.BillOwnerId = &v
	return s
}

func (s *QueryInstanceBillRequest) SetBillingCycle(v string) *QueryInstanceBillRequest {
	s.BillingCycle = &v
	return s
}

func (s *QueryInstanceBillRequest) SetBillingDate(v string) *QueryInstanceBillRequest {
	s.BillingDate = &v
	return s
}

func (s *QueryInstanceBillRequest) SetGranularity(v string) *QueryInstanceBillRequest {
	s.Granularity = &v
	return s
}

func (s *QueryInstanceBillRequest) SetIsBillingItem(v bool) *QueryInstanceBillRequest {
	s.IsBillingItem = &v
	return s
}

func (s *QueryInstanceBillRequest) SetIsHideZeroCharge(v bool) *QueryInstanceBillRequest {
	s.IsHideZeroCharge = &v
	return s
}

func (s *QueryInstanceBillRequest) SetOwnerId(v int64) *QueryInstanceBillRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryInstanceBillRequest) SetPageNum(v int32) *QueryInstanceBillRequest {
	s.PageNum = &v
	return s
}

func (s *QueryInstanceBillRequest) SetPageSize(v int32) *QueryInstanceBillRequest {
	s.PageSize = &v
	return s
}

func (s *QueryInstanceBillRequest) SetProductCode(v string) *QueryInstanceBillRequest {
	s.ProductCode = &v
	return s
}

func (s *QueryInstanceBillRequest) SetProductType(v string) *QueryInstanceBillRequest {
	s.ProductType = &v
	return s
}

func (s *QueryInstanceBillRequest) SetSubscriptionType(v string) *QueryInstanceBillRequest {
	s.SubscriptionType = &v
	return s
}

type QueryInstanceBillResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryInstanceBillResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryInstanceBillResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceBillResponseBody) GoString() string {
	return s.String()
}

func (s *QueryInstanceBillResponseBody) SetCode(v string) *QueryInstanceBillResponseBody {
	s.Code = &v
	return s
}

func (s *QueryInstanceBillResponseBody) SetData(v *QueryInstanceBillResponseBodyData) *QueryInstanceBillResponseBody {
	s.Data = v
	return s
}

func (s *QueryInstanceBillResponseBody) SetMessage(v string) *QueryInstanceBillResponseBody {
	s.Message = &v
	return s
}

func (s *QueryInstanceBillResponseBody) SetRequestId(v string) *QueryInstanceBillResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryInstanceBillResponseBody) SetSuccess(v bool) *QueryInstanceBillResponseBody {
	s.Success = &v
	return s
}

type QueryInstanceBillResponseBodyData struct {
	// The ID of the account.
	AccountID *string `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// The name of the account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The billing cycle in the YYYY-MM format.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The details of the bill.
	Items *QueryInstanceBillResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryInstanceBillResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceBillResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryInstanceBillResponseBodyData) SetAccountID(v string) *QueryInstanceBillResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *QueryInstanceBillResponseBodyData) SetAccountName(v string) *QueryInstanceBillResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *QueryInstanceBillResponseBodyData) SetBillingCycle(v string) *QueryInstanceBillResponseBodyData {
	s.BillingCycle = &v
	return s
}

func (s *QueryInstanceBillResponseBodyData) SetItems(v *QueryInstanceBillResponseBodyDataItems) *QueryInstanceBillResponseBodyData {
	s.Items = v
	return s
}

func (s *QueryInstanceBillResponseBodyData) SetPageNum(v int32) *QueryInstanceBillResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryInstanceBillResponseBodyData) SetPageSize(v int32) *QueryInstanceBillResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryInstanceBillResponseBodyData) SetTotalCount(v int32) *QueryInstanceBillResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryInstanceBillResponseBodyDataItems struct {
	Item []*QueryInstanceBillResponseBodyDataItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s QueryInstanceBillResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceBillResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *QueryInstanceBillResponseBodyDataItems) SetItem(v []*QueryInstanceBillResponseBodyDataItemsItem) *QueryInstanceBillResponseBodyDataItems {
	s.Item = v
	return s
}

type QueryInstanceBillResponseBodyDataItemsItem struct {
	// The amount deducted by using credit refunds.
	AdjustAmount *float32 `json:"AdjustAmount,omitempty" xml:"AdjustAmount,omitempty"`
	// The billing date. This parameter is returned only if the Granularity parameter is set to DAILY. Format: YYYY-MM-DD.
	BillingDate *string `json:"BillingDate,omitempty" xml:"BillingDate,omitempty"`
	// The billable item. This parameter is returned only if the IsBillingItem parameter is set to true.
	BillingItem *string `json:"BillingItem,omitempty" xml:"BillingItem,omitempty"`
	// The billing type.
	BillingType *string `json:"BillingType,omitempty" xml:"BillingType,omitempty"`
	// The amount paid in cash. The amount that was deducted by using credit refunds is not included.
	CashAmount *float32 `json:"CashAmount,omitempty" xml:"CashAmount,omitempty"`
	// The code of the commodity. The commodity code is the same as that displayed in User Center.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The cost center.
	CostUnit *string `json:"CostUnit,omitempty" xml:"CostUnit,omitempty"`
	// The type of the currency. Valid values:
	//
	// *   CNY
	// *   USD
	// *   JPY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The amount deducted by using vouchers.
	DeductedByCashCoupons *float32 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons.
	DeductedByCoupons *float32 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards.
	DeductedByPrepaidCard *float32 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	// The amount deducted by using resource plans.
	DeductedByResourcePackage *string `json:"DeductedByResourcePackage,omitempty" xml:"DeductedByResourcePackage,omitempty"`
	// The configurations of the instance.
	InstanceConfig *string `json:"InstanceConfig,omitempty" xml:"InstanceConfig,omitempty"`
	// The ID of the instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The instance type of the instance.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The public IP address.
	InternetIP *string `json:"InternetIP,omitempty" xml:"InternetIP,omitempty"`
	// The private IP address.
	IntranetIP *string `json:"IntranetIP,omitempty" xml:"IntranetIP,omitempty"`
	// The discount amount.
	InvoiceDiscount *float32 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The type of the bill.
	//
	// *   SubscriptionOrder: subscription order
	// *   PayAsYouGoBill: pay-as-you-go bill
	// *   Refund: refund
	// *   Adjustment: reconciliation
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The unit price. This parameter is returned only if the isBillingItem parameter is set to true.
	ListPrice *string `json:"ListPrice,omitempty" xml:"ListPrice,omitempty"`
	// The unit of the unit price. This parameter is returned only if the isBillingItem parameter is set to true.
	ListPriceUnit *string `json:"ListPriceUnit,omitempty" xml:"ListPriceUnit,omitempty"`
	// The name of the instance.
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// The unsettled amount.
	OutstandingAmount *float32 `json:"OutstandingAmount,omitempty" xml:"OutstandingAmount,omitempty"`
	// The ID of the member account. This parameter is returned in a multi-account payment scenario.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The amount paid in cash.
	PaymentAmount *float32 `json:"PaymentAmount,omitempty" xml:"PaymentAmount,omitempty"`
	// The code of the service. The service code is the same as that displayed in User Center.
	PipCode *string `json:"PipCode,omitempty" xml:"PipCode,omitempty"`
	// The pretax amount.
	PretaxAmount *float32 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	// The pretax gross amount.
	PretaxGrossAmount *float32 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The details of the service.
	ProductDetail *string `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	// The name of the service.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The resource group.
	ResourceGroup *string `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	// The validity period.
	ServicePeriod *string `json:"ServicePeriod,omitempty" xml:"ServicePeriod,omitempty"`
	// The unit of the validity period.
	ServicePeriodUnit *string `json:"ServicePeriodUnit,omitempty" xml:"ServicePeriodUnit,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: the subscription billing method
	// *   PayAsYouGo: the pay-as-you-go billing method
	//
	// **
	//
	// ****This parameter is returned together with the ProductCode parameter.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	// The tag.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The usage of the billable item. This parameter is returned only if the isBillingItem parameter is set to true.
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
	// The unit of usage. This parameter is returned only if the isBillingItem parameter is set to true.
	UsageUnit *string `json:"UsageUnit,omitempty" xml:"UsageUnit,omitempty"`
	// The ID of the zone.
	Zone *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
}

func (s QueryInstanceBillResponseBodyDataItemsItem) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceBillResponseBodyDataItemsItem) GoString() string {
	return s.String()
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetAdjustAmount(v float32) *QueryInstanceBillResponseBodyDataItemsItem {
	s.AdjustAmount = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetBillingDate(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.BillingDate = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetBillingItem(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.BillingItem = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetBillingType(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.BillingType = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetCashAmount(v float32) *QueryInstanceBillResponseBodyDataItemsItem {
	s.CashAmount = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetCommodityCode(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.CommodityCode = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetCostUnit(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.CostUnit = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetCurrency(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.Currency = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetDeductedByCashCoupons(v float32) *QueryInstanceBillResponseBodyDataItemsItem {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetDeductedByCoupons(v float32) *QueryInstanceBillResponseBodyDataItemsItem {
	s.DeductedByCoupons = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetDeductedByPrepaidCard(v float32) *QueryInstanceBillResponseBodyDataItemsItem {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetDeductedByResourcePackage(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.DeductedByResourcePackage = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetInstanceConfig(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.InstanceConfig = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetInstanceID(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.InstanceID = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetInstanceSpec(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.InstanceSpec = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetInternetIP(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.InternetIP = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetIntranetIP(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.IntranetIP = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetInvoiceDiscount(v float32) *QueryInstanceBillResponseBodyDataItemsItem {
	s.InvoiceDiscount = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetItem(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.Item = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetListPrice(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.ListPrice = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetListPriceUnit(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.ListPriceUnit = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetNickName(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.NickName = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetOutstandingAmount(v float32) *QueryInstanceBillResponseBodyDataItemsItem {
	s.OutstandingAmount = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetOwnerID(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.OwnerID = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetPaymentAmount(v float32) *QueryInstanceBillResponseBodyDataItemsItem {
	s.PaymentAmount = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetPipCode(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.PipCode = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetPretaxAmount(v float32) *QueryInstanceBillResponseBodyDataItemsItem {
	s.PretaxAmount = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetPretaxGrossAmount(v float32) *QueryInstanceBillResponseBodyDataItemsItem {
	s.PretaxGrossAmount = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetProductCode(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.ProductCode = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetProductDetail(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.ProductDetail = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetProductName(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.ProductName = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetProductType(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.ProductType = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetRegion(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.Region = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetResourceGroup(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.ResourceGroup = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetServicePeriod(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.ServicePeriod = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetServicePeriodUnit(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.ServicePeriodUnit = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetSubscriptionType(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.SubscriptionType = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetTag(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.Tag = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetUsage(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.Usage = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetUsageUnit(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.UsageUnit = &v
	return s
}

func (s *QueryInstanceBillResponseBodyDataItemsItem) SetZone(v string) *QueryInstanceBillResponseBodyDataItemsItem {
	s.Zone = &v
	return s
}

type QueryInstanceBillResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryInstanceBillResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryInstanceBillResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceBillResponse) GoString() string {
	return s.String()
}

func (s *QueryInstanceBillResponse) SetHeaders(v map[string]*string) *QueryInstanceBillResponse {
	s.Headers = v
	return s
}

func (s *QueryInstanceBillResponse) SetStatusCode(v int32) *QueryInstanceBillResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryInstanceBillResponse) SetBody(v *QueryInstanceBillResponseBody) *QueryInstanceBillResponse {
	s.Body = v
	return s
}

type QueryInstanceByTagRequest struct {
	// The IDs of resources.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource. Specify the savings plan instance as the type of the resource.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags.
	Tag []*QueryInstanceByTagRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryInstanceByTagRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceByTagRequest) GoString() string {
	return s.String()
}

func (s *QueryInstanceByTagRequest) SetResourceId(v []*string) *QueryInstanceByTagRequest {
	s.ResourceId = v
	return s
}

func (s *QueryInstanceByTagRequest) SetResourceType(v string) *QueryInstanceByTagRequest {
	s.ResourceType = &v
	return s
}

func (s *QueryInstanceByTagRequest) SetTag(v []*QueryInstanceByTagRequestTag) *QueryInstanceByTagRequest {
	s.Tag = v
	return s
}

type QueryInstanceByTagRequestTag struct {
	// The tag key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryInstanceByTagRequestTag) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceByTagRequestTag) GoString() string {
	return s.String()
}

func (s *QueryInstanceByTagRequestTag) SetKey(v string) *QueryInstanceByTagRequestTag {
	s.Key = &v
	return s
}

func (s *QueryInstanceByTagRequestTag) SetValue(v string) *QueryInstanceByTagRequestTag {
	s.Value = &v
	return s
}

type QueryInstanceByTagResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The token that determines the start point of the query. The return value is the value of the NextToken response parameter that was returned last time the QueryInstanceByTag operation was called.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The instances returned.
	TagResource []*QueryInstanceByTagResponseBodyTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s QueryInstanceByTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceByTagResponseBody) GoString() string {
	return s.String()
}

func (s *QueryInstanceByTagResponseBody) SetCode(v string) *QueryInstanceByTagResponseBody {
	s.Code = &v
	return s
}

func (s *QueryInstanceByTagResponseBody) SetMessage(v string) *QueryInstanceByTagResponseBody {
	s.Message = &v
	return s
}

func (s *QueryInstanceByTagResponseBody) SetNextToken(v string) *QueryInstanceByTagResponseBody {
	s.NextToken = &v
	return s
}

func (s *QueryInstanceByTagResponseBody) SetRequestId(v string) *QueryInstanceByTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryInstanceByTagResponseBody) SetSuccess(v bool) *QueryInstanceByTagResponseBody {
	s.Success = &v
	return s
}

func (s *QueryInstanceByTagResponseBody) SetTagResource(v []*QueryInstanceByTagResponseBodyTagResource) *QueryInstanceByTagResponseBody {
	s.TagResource = v
	return s
}

type QueryInstanceByTagResponseBodyTagResource struct {
	// The ID of the resource.
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the resource. The returned resource type indicates a savings plan instance.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags.
	Tag []*QueryInstanceByTagResponseBodyTagResourceTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryInstanceByTagResponseBodyTagResource) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceByTagResponseBodyTagResource) GoString() string {
	return s.String()
}

func (s *QueryInstanceByTagResponseBodyTagResource) SetResourceId(v string) *QueryInstanceByTagResponseBodyTagResource {
	s.ResourceId = &v
	return s
}

func (s *QueryInstanceByTagResponseBodyTagResource) SetResourceType(v string) *QueryInstanceByTagResponseBodyTagResource {
	s.ResourceType = &v
	return s
}

func (s *QueryInstanceByTagResponseBodyTagResource) SetTag(v []*QueryInstanceByTagResponseBodyTagResourceTag) *QueryInstanceByTagResponseBodyTagResource {
	s.Tag = v
	return s
}

type QueryInstanceByTagResponseBodyTagResourceTag struct {
	// The tag key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryInstanceByTagResponseBodyTagResourceTag) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceByTagResponseBodyTagResourceTag) GoString() string {
	return s.String()
}

func (s *QueryInstanceByTagResponseBodyTagResourceTag) SetKey(v string) *QueryInstanceByTagResponseBodyTagResourceTag {
	s.Key = &v
	return s
}

func (s *QueryInstanceByTagResponseBodyTagResourceTag) SetValue(v string) *QueryInstanceByTagResponseBodyTagResourceTag {
	s.Value = &v
	return s
}

type QueryInstanceByTagResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryInstanceByTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryInstanceByTagResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceByTagResponse) GoString() string {
	return s.String()
}

func (s *QueryInstanceByTagResponse) SetHeaders(v map[string]*string) *QueryInstanceByTagResponse {
	s.Headers = v
	return s
}

func (s *QueryInstanceByTagResponse) SetStatusCode(v int32) *QueryInstanceByTagResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryInstanceByTagResponse) SetBody(v *QueryInstanceByTagResponseBody) *QueryInstanceByTagResponse {
	s.Body = v
	return s
}

type QueryInstanceGaapCostRequest struct {
	BillingCycle     *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	PageNum          *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductCode      *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductType      *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s QueryInstanceGaapCostRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceGaapCostRequest) GoString() string {
	return s.String()
}

func (s *QueryInstanceGaapCostRequest) SetBillingCycle(v string) *QueryInstanceGaapCostRequest {
	s.BillingCycle = &v
	return s
}

func (s *QueryInstanceGaapCostRequest) SetPageNum(v int32) *QueryInstanceGaapCostRequest {
	s.PageNum = &v
	return s
}

func (s *QueryInstanceGaapCostRequest) SetPageSize(v int32) *QueryInstanceGaapCostRequest {
	s.PageSize = &v
	return s
}

func (s *QueryInstanceGaapCostRequest) SetProductCode(v string) *QueryInstanceGaapCostRequest {
	s.ProductCode = &v
	return s
}

func (s *QueryInstanceGaapCostRequest) SetProductType(v string) *QueryInstanceGaapCostRequest {
	s.ProductType = &v
	return s
}

func (s *QueryInstanceGaapCostRequest) SetSubscriptionType(v string) *QueryInstanceGaapCostRequest {
	s.SubscriptionType = &v
	return s
}

type QueryInstanceGaapCostResponseBody struct {
	Code      *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *QueryInstanceGaapCostResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryInstanceGaapCostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceGaapCostResponseBody) GoString() string {
	return s.String()
}

func (s *QueryInstanceGaapCostResponseBody) SetCode(v string) *QueryInstanceGaapCostResponseBody {
	s.Code = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBody) SetData(v *QueryInstanceGaapCostResponseBodyData) *QueryInstanceGaapCostResponseBody {
	s.Data = v
	return s
}

func (s *QueryInstanceGaapCostResponseBody) SetMessage(v string) *QueryInstanceGaapCostResponseBody {
	s.Message = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBody) SetRequestId(v string) *QueryInstanceGaapCostResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBody) SetSuccess(v bool) *QueryInstanceGaapCostResponseBody {
	s.Success = &v
	return s
}

type QueryInstanceGaapCostResponseBodyData struct {
	HostId     *string                                       `json:"HostId,omitempty" xml:"HostId,omitempty"`
	Modules    *QueryInstanceGaapCostResponseBodyDataModules `json:"Modules,omitempty" xml:"Modules,omitempty" type:"Struct"`
	PageNum    *int32                                        `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryInstanceGaapCostResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceGaapCostResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryInstanceGaapCostResponseBodyData) SetHostId(v string) *QueryInstanceGaapCostResponseBodyData {
	s.HostId = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyData) SetModules(v *QueryInstanceGaapCostResponseBodyDataModules) *QueryInstanceGaapCostResponseBodyData {
	s.Modules = v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyData) SetPageNum(v int32) *QueryInstanceGaapCostResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyData) SetPageSize(v int32) *QueryInstanceGaapCostResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyData) SetTotalCount(v int32) *QueryInstanceGaapCostResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryInstanceGaapCostResponseBodyDataModules struct {
	Module []*QueryInstanceGaapCostResponseBodyDataModulesModule `json:"Module,omitempty" xml:"Module,omitempty" type:"Repeated"`
}

func (s QueryInstanceGaapCostResponseBodyDataModules) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceGaapCostResponseBodyDataModules) GoString() string {
	return s.String()
}

func (s *QueryInstanceGaapCostResponseBodyDataModules) SetModule(v []*QueryInstanceGaapCostResponseBodyDataModulesModule) *QueryInstanceGaapCostResponseBodyDataModules {
	s.Module = v
	return s
}

type QueryInstanceGaapCostResponseBodyDataModulesModule struct {
	AccountingUnit                   *string `json:"AccountingUnit,omitempty" xml:"AccountingUnit,omitempty"`
	BillType                         *string `json:"BillType,omitempty" xml:"BillType,omitempty"`
	BillingCycle                     *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	Currency                         *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	DeductedByCashCoupons            *string `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	DeductedByCoupons                *string `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	DeductedByPrepaidCard            *string `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	GaapDeductedByCashCoupons        *string `json:"GaapDeductedByCashCoupons,omitempty" xml:"GaapDeductedByCashCoupons,omitempty"`
	GaapDeductedByCoupons            *string `json:"GaapDeductedByCoupons,omitempty" xml:"GaapDeductedByCoupons,omitempty"`
	GaapDeductedByPrepaidCard        *string `json:"GaapDeductedByPrepaidCard,omitempty" xml:"GaapDeductedByPrepaidCard,omitempty"`
	GaapPaymentAmount                *string `json:"GaapPaymentAmount,omitempty" xml:"GaapPaymentAmount,omitempty"`
	GaapPretaxAmount                 *string `json:"GaapPretaxAmount,omitempty" xml:"GaapPretaxAmount,omitempty"`
	GaapPretaxAmountLocal            *string `json:"GaapPretaxAmountLocal,omitempty" xml:"GaapPretaxAmountLocal,omitempty"`
	GaapPretaxGrossAmount            *string `json:"GaapPretaxGrossAmount,omitempty" xml:"GaapPretaxGrossAmount,omitempty"`
	GaapPricingDiscount              *string `json:"GaapPricingDiscount,omitempty" xml:"GaapPricingDiscount,omitempty"`
	InstanceID                       *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	MonthGaapDeductedByCashCoupons   *string `json:"MonthGaapDeductedByCashCoupons,omitempty" xml:"MonthGaapDeductedByCashCoupons,omitempty"`
	MonthGaapDeductedByCoupons       *string `json:"MonthGaapDeductedByCoupons,omitempty" xml:"MonthGaapDeductedByCoupons,omitempty"`
	MonthGaapDeductedByPrepaidCard   *string `json:"MonthGaapDeductedByPrepaidCard,omitempty" xml:"MonthGaapDeductedByPrepaidCard,omitempty"`
	MonthGaapPaymentAmount           *string `json:"MonthGaapPaymentAmount,omitempty" xml:"MonthGaapPaymentAmount,omitempty"`
	MonthGaapPretaxAmount            *string `json:"MonthGaapPretaxAmount,omitempty" xml:"MonthGaapPretaxAmount,omitempty"`
	MonthGaapPretaxAmountLocal       *string `json:"MonthGaapPretaxAmountLocal,omitempty" xml:"MonthGaapPretaxAmountLocal,omitempty"`
	MonthGaapPretaxGrossAmount       *string `json:"MonthGaapPretaxGrossAmount,omitempty" xml:"MonthGaapPretaxGrossAmount,omitempty"`
	MonthGaapPricingDiscount         *string `json:"MonthGaapPricingDiscount,omitempty" xml:"MonthGaapPricingDiscount,omitempty"`
	OrderId                          *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrderType                        *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	OwnerID                          *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	PayTime                          *string `json:"PayTime,omitempty" xml:"PayTime,omitempty"`
	PayerAccount                     *string `json:"PayerAccount,omitempty" xml:"PayerAccount,omitempty"`
	PaymentAmount                    *string `json:"PaymentAmount,omitempty" xml:"PaymentAmount,omitempty"`
	PaymentCurrency                  *string `json:"PaymentCurrency,omitempty" xml:"PaymentCurrency,omitempty"`
	PretaxAmount                     *string `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	PretaxAmountLocal                *string `json:"PretaxAmountLocal,omitempty" xml:"PretaxAmountLocal,omitempty"`
	PretaxGrossAmount                *string `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	PricingDiscount                  *string `json:"PricingDiscount,omitempty" xml:"PricingDiscount,omitempty"`
	ProductCode                      *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductType                      *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	Region                           *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceGroup                    *string `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	SubOrderId                       *string `json:"SubOrderId,omitempty" xml:"SubOrderId,omitempty"`
	SubscriptionType                 *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	Tag                              *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	UnallocatedDeductedByCashCoupons *string `json:"UnallocatedDeductedByCashCoupons,omitempty" xml:"UnallocatedDeductedByCashCoupons,omitempty"`
	UnallocatedDeductedByCoupons     *string `json:"UnallocatedDeductedByCoupons,omitempty" xml:"UnallocatedDeductedByCoupons,omitempty"`
	UnallocatedDeductedByPrepaidCard *string `json:"UnallocatedDeductedByPrepaidCard,omitempty" xml:"UnallocatedDeductedByPrepaidCard,omitempty"`
	UnallocatedPaymentAmount         *string `json:"UnallocatedPaymentAmount,omitempty" xml:"UnallocatedPaymentAmount,omitempty"`
	UnallocatedPretaxAmount          *string `json:"UnallocatedPretaxAmount,omitempty" xml:"UnallocatedPretaxAmount,omitempty"`
	UnallocatedPretaxAmountLocal     *string `json:"UnallocatedPretaxAmountLocal,omitempty" xml:"UnallocatedPretaxAmountLocal,omitempty"`
	UnallocatedPretaxGrossAmount     *string `json:"UnallocatedPretaxGrossAmount,omitempty" xml:"UnallocatedPretaxGrossAmount,omitempty"`
	UnallocatedPricingDiscount       *string `json:"UnallocatedPricingDiscount,omitempty" xml:"UnallocatedPricingDiscount,omitempty"`
	UsageEndDate                     *string `json:"UsageEndDate,omitempty" xml:"UsageEndDate,omitempty"`
	UsageStartDate                   *string `json:"UsageStartDate,omitempty" xml:"UsageStartDate,omitempty"`
}

func (s QueryInstanceGaapCostResponseBodyDataModulesModule) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceGaapCostResponseBodyDataModulesModule) GoString() string {
	return s.String()
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetAccountingUnit(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.AccountingUnit = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetBillType(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.BillType = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetBillingCycle(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.BillingCycle = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetCurrency(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.Currency = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetDeductedByCashCoupons(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetDeductedByCoupons(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.DeductedByCoupons = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetDeductedByPrepaidCard(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetGaapDeductedByCashCoupons(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.GaapDeductedByCashCoupons = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetGaapDeductedByCoupons(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.GaapDeductedByCoupons = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetGaapDeductedByPrepaidCard(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.GaapDeductedByPrepaidCard = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetGaapPaymentAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.GaapPaymentAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetGaapPretaxAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.GaapPretaxAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetGaapPretaxAmountLocal(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.GaapPretaxAmountLocal = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetGaapPretaxGrossAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.GaapPretaxGrossAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetGaapPricingDiscount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.GaapPricingDiscount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetInstanceID(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.InstanceID = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetMonthGaapDeductedByCashCoupons(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.MonthGaapDeductedByCashCoupons = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetMonthGaapDeductedByCoupons(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.MonthGaapDeductedByCoupons = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetMonthGaapDeductedByPrepaidCard(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.MonthGaapDeductedByPrepaidCard = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetMonthGaapPaymentAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.MonthGaapPaymentAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetMonthGaapPretaxAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.MonthGaapPretaxAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetMonthGaapPretaxAmountLocal(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.MonthGaapPretaxAmountLocal = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetMonthGaapPretaxGrossAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.MonthGaapPretaxGrossAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetMonthGaapPricingDiscount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.MonthGaapPricingDiscount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetOrderId(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.OrderId = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetOrderType(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.OrderType = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetOwnerID(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.OwnerID = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetPayTime(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.PayTime = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetPayerAccount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.PayerAccount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetPaymentAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.PaymentAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetPaymentCurrency(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.PaymentCurrency = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetPretaxAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.PretaxAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetPretaxAmountLocal(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.PretaxAmountLocal = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetPretaxGrossAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.PretaxGrossAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetPricingDiscount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.PricingDiscount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetProductCode(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.ProductCode = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetProductType(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.ProductType = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetRegion(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.Region = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetResourceGroup(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.ResourceGroup = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetSubOrderId(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.SubOrderId = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetSubscriptionType(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.SubscriptionType = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetTag(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.Tag = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetUnallocatedDeductedByCashCoupons(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.UnallocatedDeductedByCashCoupons = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetUnallocatedDeductedByCoupons(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.UnallocatedDeductedByCoupons = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetUnallocatedDeductedByPrepaidCard(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.UnallocatedDeductedByPrepaidCard = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetUnallocatedPaymentAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.UnallocatedPaymentAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetUnallocatedPretaxAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.UnallocatedPretaxAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetUnallocatedPretaxAmountLocal(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.UnallocatedPretaxAmountLocal = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetUnallocatedPretaxGrossAmount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.UnallocatedPretaxGrossAmount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetUnallocatedPricingDiscount(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.UnallocatedPricingDiscount = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetUsageEndDate(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.UsageEndDate = &v
	return s
}

func (s *QueryInstanceGaapCostResponseBodyDataModulesModule) SetUsageStartDate(v string) *QueryInstanceGaapCostResponseBodyDataModulesModule {
	s.UsageStartDate = &v
	return s
}

type QueryInstanceGaapCostResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryInstanceGaapCostResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryInstanceGaapCostResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryInstanceGaapCostResponse) GoString() string {
	return s.String()
}

func (s *QueryInstanceGaapCostResponse) SetHeaders(v map[string]*string) *QueryInstanceGaapCostResponse {
	s.Headers = v
	return s
}

func (s *QueryInstanceGaapCostResponse) SetStatusCode(v int32) *QueryInstanceGaapCostResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryInstanceGaapCostResponse) SetBody(v *QueryInstanceGaapCostResponseBody) *QueryInstanceGaapCostResponse {
	s.Body = v
	return s
}

type QueryInvoicingCustomerListRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s QueryInvoicingCustomerListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryInvoicingCustomerListRequest) GoString() string {
	return s.String()
}

func (s *QueryInvoicingCustomerListRequest) SetOwnerId(v int64) *QueryInvoicingCustomerListRequest {
	s.OwnerId = &v
	return s
}

type QueryInvoicingCustomerListResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryInvoicingCustomerListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryInvoicingCustomerListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryInvoicingCustomerListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryInvoicingCustomerListResponseBody) SetCode(v string) *QueryInvoicingCustomerListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBody) SetData(v *QueryInvoicingCustomerListResponseBodyData) *QueryInvoicingCustomerListResponseBody {
	s.Data = v
	return s
}

func (s *QueryInvoicingCustomerListResponseBody) SetMessage(v string) *QueryInvoicingCustomerListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBody) SetRequestId(v string) *QueryInvoicingCustomerListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBody) SetSuccess(v bool) *QueryInvoicingCustomerListResponseBody {
	s.Success = &v
	return s
}

type QueryInvoicingCustomerListResponseBodyData struct {
	// The information about the invoice.
	CustomerInvoiceList *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceList `json:"CustomerInvoiceList,omitempty" xml:"CustomerInvoiceList,omitempty" type:"Struct"`
}

func (s QueryInvoicingCustomerListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryInvoicingCustomerListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryInvoicingCustomerListResponseBodyData) SetCustomerInvoiceList(v *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceList) *QueryInvoicingCustomerListResponseBodyData {
	s.CustomerInvoiceList = v
	return s
}

type QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceList struct {
	CustomerInvoice []*QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice `json:"CustomerInvoice,omitempty" xml:"CustomerInvoice,omitempty" type:"Repeated"`
}

func (s QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceList) String() string {
	return tea.Prettify(s)
}

func (s QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceList) GoString() string {
	return s.String()
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceList) SetCustomerInvoice(v []*QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceList {
	s.CustomerInvoice = v
	return s
}

type QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice struct {
	// The type of invoice that was changed to.
	AdjustType *int64 `json:"AdjustType,omitempty" xml:"AdjustType,omitempty"`
	// The bank that issues the invoice.
	Bank *string `json:"Bank,omitempty" xml:"Bank,omitempty"`
	// The bank account number.
	BankNo *string `json:"BankNo,omitempty" xml:"BankNo,omitempty"`
	// The authentication type of Alipay. Valid values:
	//
	// *   1: individual
	// *   2: company
	CustomerType *int64 `json:"CustomerType,omitempty" xml:"CustomerType,omitempty"`
	// The default note that is attached when the title is specified.
	DefaultRemark *string `json:"DefaultRemark,omitempty" xml:"DefaultRemark,omitempty"`
	// The time when the payment ended.
	EndCycle *int64 `json:"EndCycle,omitempty" xml:"EndCycle,omitempty"`
	// The time when the invoice was created. The time was in the yyyy-mm-dd hh:mm:ss format.
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The ID of the invoice.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The company name in the invoice title.
	InvoiceTitle *string `json:"InvoiceTitle,omitempty" xml:"InvoiceTitle,omitempty"`
	// The type of issue.
	IssueType *int64 `json:"IssueType,omitempty" xml:"IssueType,omitempty"`
	// The address of the business license.
	OperatingLicenseAddress *string `json:"OperatingLicenseAddress,omitempty" xml:"OperatingLicenseAddress,omitempty"`
	// The phone number of the business license.
	OperatingLicensePhone *string `json:"OperatingLicensePhone,omitempty" xml:"OperatingLicensePhone,omitempty"`
	// The tax registration number.
	RegisterNo *string `json:"RegisterNo,omitempty" xml:"RegisterNo,omitempty"`
	// The time when the payment started.
	StartCycle *int64 `json:"StartCycle,omitempty" xml:"StartCycle,omitempty"`
	// The status of the invoice title.
	Status *int64 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The path and file name of the scanned copy of the tax registration certificate.
	TaxationLicense *string `json:"TaxationLicense,omitempty" xml:"TaxationLicense,omitempty"`
	// The type of the taxpayer. Valid values:
	//
	// *   1: general taxpayer
	// *   2: special taxpayer
	TaxpayerType *int64 `json:"TaxpayerType,omitempty" xml:"TaxpayerType,omitempty"`
	// The instruction document of the invoice title change.
	TitleChangeInstructions *string `json:"TitleChangeInstructions,omitempty" xml:"TitleChangeInstructions,omitempty"`
	// The type of the invoice. Valid values:
	//
	// *   0: plain value-added tax (VAT) invoice
	// *   1: special VAT invoice
	Type *int64 `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the user.
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The nickname of the user.
	UserNick *string `json:"UserNick,omitempty" xml:"UserNick,omitempty"`
}

func (s QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) String() string {
	return tea.Prettify(s)
}

func (s QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) GoString() string {
	return s.String()
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetAdjustType(v int64) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.AdjustType = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetBank(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.Bank = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetBankNo(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.BankNo = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetCustomerType(v int64) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.CustomerType = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetDefaultRemark(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.DefaultRemark = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetEndCycle(v int64) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.EndCycle = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetGmtCreate(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.GmtCreate = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetId(v int64) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.Id = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetInvoiceTitle(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.InvoiceTitle = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetIssueType(v int64) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.IssueType = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetOperatingLicenseAddress(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.OperatingLicenseAddress = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetOperatingLicensePhone(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.OperatingLicensePhone = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetRegisterNo(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.RegisterNo = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetStartCycle(v int64) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.StartCycle = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetStatus(v int64) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.Status = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetTaxationLicense(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.TaxationLicense = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetTaxpayerType(v int64) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.TaxpayerType = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetTitleChangeInstructions(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.TitleChangeInstructions = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetType(v int64) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.Type = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetUserId(v int64) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.UserId = &v
	return s
}

func (s *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice) SetUserNick(v string) *QueryInvoicingCustomerListResponseBodyDataCustomerInvoiceListCustomerInvoice {
	s.UserNick = &v
	return s
}

type QueryInvoicingCustomerListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryInvoicingCustomerListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryInvoicingCustomerListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryInvoicingCustomerListResponse) GoString() string {
	return s.String()
}

func (s *QueryInvoicingCustomerListResponse) SetHeaders(v map[string]*string) *QueryInvoicingCustomerListResponse {
	s.Headers = v
	return s
}

func (s *QueryInvoicingCustomerListResponse) SetStatusCode(v int32) *QueryInvoicingCustomerListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryInvoicingCustomerListResponse) SetBody(v *QueryInvoicingCustomerListResponseBody) *QueryInvoicingCustomerListResponse {
	s.Body = v
	return s
}

type QueryOrdersRequest struct {
	// The end time of the period during which the orders were created. By default, orders within the last hour are queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	CreateTimeEnd *string `json:"CreateTimeEnd,omitempty" xml:"CreateTimeEnd,omitempty"`
	// The start time of the period during which the orders were created. By default, orders within the last hour are queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	CreateTimeStart *string `json:"CreateTimeStart,omitempty" xml:"CreateTimeStart,omitempty"`
	// The type of the order. Valid values:
	//
	// *   New: purchases an instance.
	// *   Renew: renews an instance.
	// *   Upgrade: upgrades the configurations of an instance.
	// *   Refund: applies for a refund.
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The page number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The status of payment. Valid values for a non-refund order:
	//
	// *   Unpaid: The order is not paid.
	// *   Paid: The order is paid.
	// *   Cancelled: The order is canceled.
	//
	// > : You can set this parameter to NULL for a refund order.
	PaymentStatus *string `json:"PaymentStatus,omitempty" xml:"PaymentStatus,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: subscription
	// *   PayAsYouGo: pay-as-you-go
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s QueryOrdersRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOrdersRequest) GoString() string {
	return s.String()
}

func (s *QueryOrdersRequest) SetCreateTimeEnd(v string) *QueryOrdersRequest {
	s.CreateTimeEnd = &v
	return s
}

func (s *QueryOrdersRequest) SetCreateTimeStart(v string) *QueryOrdersRequest {
	s.CreateTimeStart = &v
	return s
}

func (s *QueryOrdersRequest) SetOrderType(v string) *QueryOrdersRequest {
	s.OrderType = &v
	return s
}

func (s *QueryOrdersRequest) SetOwnerId(v int64) *QueryOrdersRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryOrdersRequest) SetPageNum(v int32) *QueryOrdersRequest {
	s.PageNum = &v
	return s
}

func (s *QueryOrdersRequest) SetPageSize(v int32) *QueryOrdersRequest {
	s.PageSize = &v
	return s
}

func (s *QueryOrdersRequest) SetPaymentStatus(v string) *QueryOrdersRequest {
	s.PaymentStatus = &v
	return s
}

func (s *QueryOrdersRequest) SetProductCode(v string) *QueryOrdersRequest {
	s.ProductCode = &v
	return s
}

func (s *QueryOrdersRequest) SetProductType(v string) *QueryOrdersRequest {
	s.ProductType = &v
	return s
}

func (s *QueryOrdersRequest) SetSubscriptionType(v string) *QueryOrdersRequest {
	s.SubscriptionType = &v
	return s
}

type QueryOrdersResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The message returned.
	Data *QueryOrdersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryOrdersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOrdersResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOrdersResponseBody) SetCode(v string) *QueryOrdersResponseBody {
	s.Code = &v
	return s
}

func (s *QueryOrdersResponseBody) SetData(v *QueryOrdersResponseBodyData) *QueryOrdersResponseBody {
	s.Data = v
	return s
}

func (s *QueryOrdersResponseBody) SetMessage(v string) *QueryOrdersResponseBody {
	s.Message = &v
	return s
}

func (s *QueryOrdersResponseBody) SetRequestId(v string) *QueryOrdersResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryOrdersResponseBody) SetSuccess(v bool) *QueryOrdersResponseBody {
	s.Success = &v
	return s
}

type QueryOrdersResponseBodyData struct {
	// The hostname.
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The orders returned.
	OrderList *QueryOrdersResponseBodyDataOrderList `json:"OrderList,omitempty" xml:"OrderList,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryOrdersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryOrdersResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryOrdersResponseBodyData) SetHostName(v string) *QueryOrdersResponseBodyData {
	s.HostName = &v
	return s
}

func (s *QueryOrdersResponseBodyData) SetOrderList(v *QueryOrdersResponseBodyDataOrderList) *QueryOrdersResponseBodyData {
	s.OrderList = v
	return s
}

func (s *QueryOrdersResponseBodyData) SetPageNum(v int32) *QueryOrdersResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryOrdersResponseBodyData) SetPageSize(v int32) *QueryOrdersResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryOrdersResponseBodyData) SetTotalCount(v int32) *QueryOrdersResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryOrdersResponseBodyDataOrderList struct {
	Order []*QueryOrdersResponseBodyDataOrderListOrder `json:"Order,omitempty" xml:"Order,omitempty" type:"Repeated"`
}

func (s QueryOrdersResponseBodyDataOrderList) String() string {
	return tea.Prettify(s)
}

func (s QueryOrdersResponseBodyDataOrderList) GoString() string {
	return s.String()
}

func (s *QueryOrdersResponseBodyDataOrderList) SetOrder(v []*QueryOrdersResponseBodyDataOrderListOrder) *QueryOrdersResponseBodyDataOrderList {
	s.Order = v
	return s
}

type QueryOrdersResponseBodyDataOrderListOrder struct {
	// The aftertax amount of the order.
	AfterTaxAmount *string `json:"AfterTaxAmount,omitempty" xml:"AfterTaxAmount,omitempty"`
	// The service code.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The time when the order was created.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The currency.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The ID of the order.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The type of the order. Valid values:
	//
	// *   New: purchases an instance.
	// *   Renew: renews an instance.
	// *   Upgrade: upgrades the configurations of an instance.
	// *   Refund: applies for a refund.
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	// The currency of payment.
	PaymentCurrency *string `json:"PaymentCurrency,omitempty" xml:"PaymentCurrency,omitempty"`
	// The status of payment. Valid values for a non-refund order:
	//
	// *   Unpaid: The order is not paid.
	// *   Paid: The order is paid.
	// *   Cancelled: The order is canceled.
	//
	// > : The value is NULL for a refund order.
	PaymentStatus *string `json:"PaymentStatus,omitempty" xml:"PaymentStatus,omitempty"`
	// The time of payment.
	PaymentTime *string `json:"PaymentTime,omitempty" xml:"PaymentTime,omitempty"`
	// The pretax amount of the order.
	PretaxAmount *string `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	// The pretax amount of the order in local currency.
	PretaxAmountLocal *string `json:"PretaxAmountLocal,omitempty" xml:"PretaxAmountLocal,omitempty"`
	// The pretax gross amount of the order.
	PretaxGrossAmount *string `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The code of the main service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the main service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The ID of the associated order.
	RelatedOrderId *string `json:"RelatedOrderId,omitempty" xml:"RelatedOrderId,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: subscription
	// *   PayAsYouGo: pay-as-you-go
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	// The tax of the order.
	Tax *string `json:"Tax,omitempty" xml:"Tax,omitempty"`
}

func (s QueryOrdersResponseBodyDataOrderListOrder) String() string {
	return tea.Prettify(s)
}

func (s QueryOrdersResponseBodyDataOrderListOrder) GoString() string {
	return s.String()
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetAfterTaxAmount(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.AfterTaxAmount = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetCommodityCode(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.CommodityCode = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetCreateTime(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.CreateTime = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetCurrency(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.Currency = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetOrderId(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.OrderId = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetOrderType(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.OrderType = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetPaymentCurrency(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.PaymentCurrency = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetPaymentStatus(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.PaymentStatus = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetPaymentTime(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.PaymentTime = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetPretaxAmount(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.PretaxAmount = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetPretaxAmountLocal(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.PretaxAmountLocal = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetPretaxGrossAmount(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.PretaxGrossAmount = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetProductCode(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.ProductCode = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetProductType(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.ProductType = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetRelatedOrderId(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.RelatedOrderId = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetSubscriptionType(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.SubscriptionType = &v
	return s
}

func (s *QueryOrdersResponseBodyDataOrderListOrder) SetTax(v string) *QueryOrdersResponseBodyDataOrderListOrder {
	s.Tax = &v
	return s
}

type QueryOrdersResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryOrdersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryOrdersResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOrdersResponse) GoString() string {
	return s.String()
}

func (s *QueryOrdersResponse) SetHeaders(v map[string]*string) *QueryOrdersResponse {
	s.Headers = v
	return s
}

func (s *QueryOrdersResponse) SetStatusCode(v int32) *QueryOrdersResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryOrdersResponse) SetBody(v *QueryOrdersResponseBody) *QueryOrdersResponse {
	s.Body = v
	return s
}

type QueryPermissionListRequest struct {
	// The ID of the relationship. Set this parameter to the value of the RelationId response parameter returned by calling the QueryRelationList operation.
	RelationId *int64 `json:"RelationId,omitempty" xml:"RelationId,omitempty"`
}

func (s QueryPermissionListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPermissionListRequest) GoString() string {
	return s.String()
}

func (s *QueryPermissionListRequest) SetRelationId(v int64) *QueryPermissionListRequest {
	s.RelationId = &v
	return s
}

type QueryPermissionListResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryPermissionListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryPermissionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPermissionListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPermissionListResponseBody) SetCode(v string) *QueryPermissionListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryPermissionListResponseBody) SetData(v *QueryPermissionListResponseBodyData) *QueryPermissionListResponseBody {
	s.Data = v
	return s
}

func (s *QueryPermissionListResponseBody) SetMessage(v string) *QueryPermissionListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryPermissionListResponseBody) SetRequestId(v string) *QueryPermissionListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPermissionListResponseBody) SetSuccess(v bool) *QueryPermissionListResponseBody {
	s.Success = &v
	return s
}

type QueryPermissionListResponseBodyData struct {
	// The time when the relationship expired. If no value is returned, the relationship is still valid.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the management account.
	MasterId *int64 `json:"MasterId,omitempty" xml:"MasterId,omitempty"`
	// The ID of the member.
	MemberId *int64 `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	// The list of permissions.
	PermissionList []*QueryPermissionListResponseBodyDataPermissionList `json:"PermissionList,omitempty" xml:"PermissionList,omitempty" type:"Repeated"`
	// The type of the relationship. Valid values: FinancialManagement and FinancialTrusteeship.
	RelationType *string `json:"RelationType,omitempty" xml:"RelationType,omitempty"`
	// The time when the relationship was established. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. For example, 2016-05-23T12:00:00Z indicates that the relationship was established at 20:00:00 on May 23, 2016 (UTC+8).
	SetupTime *string `json:"SetupTime,omitempty" xml:"SetupTime,omitempty"`
	// The time when the relationship took effect. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. For example, 2016-05-23T12:00:00Z indicates that the relationship took effect at 20:00:00 on May 23, 2016 (UTC+8).
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the relationship. For more information about valid values of this parameter, see the enumeration values of the RelationshipStatusEnum type in the following table.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryPermissionListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryPermissionListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryPermissionListResponseBodyData) SetEndTime(v string) *QueryPermissionListResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *QueryPermissionListResponseBodyData) SetMasterId(v int64) *QueryPermissionListResponseBodyData {
	s.MasterId = &v
	return s
}

func (s *QueryPermissionListResponseBodyData) SetMemberId(v int64) *QueryPermissionListResponseBodyData {
	s.MemberId = &v
	return s
}

func (s *QueryPermissionListResponseBodyData) SetPermissionList(v []*QueryPermissionListResponseBodyDataPermissionList) *QueryPermissionListResponseBodyData {
	s.PermissionList = v
	return s
}

func (s *QueryPermissionListResponseBodyData) SetRelationType(v string) *QueryPermissionListResponseBodyData {
	s.RelationType = &v
	return s
}

func (s *QueryPermissionListResponseBodyData) SetSetupTime(v string) *QueryPermissionListResponseBodyData {
	s.SetupTime = &v
	return s
}

func (s *QueryPermissionListResponseBodyData) SetStartTime(v string) *QueryPermissionListResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *QueryPermissionListResponseBodyData) SetState(v string) *QueryPermissionListResponseBodyData {
	s.State = &v
	return s
}

type QueryPermissionListResponseBodyDataPermissionList struct {
	// The time when the permission expired. If no value is returned, the permission is still valid. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. For example, 2016-05-23T12:00:00Z indicates that the permission expired at 20:00:00 on May 23, 2016 (UTC+8).
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The code of the permission.
	PermissionCode *string `json:"PermissionCode,omitempty" xml:"PermissionCode,omitempty"`
	// The name of the permission.
	PermissionName *string `json:"PermissionName,omitempty" xml:"PermissionName,omitempty"`
	// The time when the permission took effect. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. For example, 2016-05-23T12:00:00Z indicates that the permission took effect at 20:00:00 on May 23, 2016 (UTC+8).
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryPermissionListResponseBodyDataPermissionList) String() string {
	return tea.Prettify(s)
}

func (s QueryPermissionListResponseBodyDataPermissionList) GoString() string {
	return s.String()
}

func (s *QueryPermissionListResponseBodyDataPermissionList) SetEndTime(v string) *QueryPermissionListResponseBodyDataPermissionList {
	s.EndTime = &v
	return s
}

func (s *QueryPermissionListResponseBodyDataPermissionList) SetPermissionCode(v string) *QueryPermissionListResponseBodyDataPermissionList {
	s.PermissionCode = &v
	return s
}

func (s *QueryPermissionListResponseBodyDataPermissionList) SetPermissionName(v string) *QueryPermissionListResponseBodyDataPermissionList {
	s.PermissionName = &v
	return s
}

func (s *QueryPermissionListResponseBodyDataPermissionList) SetStartTime(v string) *QueryPermissionListResponseBodyDataPermissionList {
	s.StartTime = &v
	return s
}

type QueryPermissionListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryPermissionListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryPermissionListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPermissionListResponse) GoString() string {
	return s.String()
}

func (s *QueryPermissionListResponse) SetHeaders(v map[string]*string) *QueryPermissionListResponse {
	s.Headers = v
	return s
}

func (s *QueryPermissionListResponse) SetStatusCode(v int32) *QueryPermissionListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPermissionListResponse) SetBody(v *QueryPermissionListResponseBody) *QueryPermissionListResponse {
	s.Body = v
	return s
}

type QueryPrepaidCardsRequest struct {
	// Specifies whether the prepaid card takes effect. Valid values:
	//
	// *   true
	// *   false
	EffectiveOrNot *bool `json:"EffectiveOrNot,omitempty" xml:"EffectiveOrNot,omitempty"`
	// The end of the expiration time of prepaid cards to query. The value must be in the yyyy-MM-ddTHH:mm:ssZ format.
	ExpiryTimeEnd *string `json:"ExpiryTimeEnd,omitempty" xml:"ExpiryTimeEnd,omitempty"`
	// The start of the expiration time of prepaid cards to query. The value must be in the yyyy-MM-ddTHH:mm:ssZ format.
	ExpiryTimeStart *string `json:"ExpiryTimeStart,omitempty" xml:"ExpiryTimeStart,omitempty"`
}

func (s QueryPrepaidCardsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPrepaidCardsRequest) GoString() string {
	return s.String()
}

func (s *QueryPrepaidCardsRequest) SetEffectiveOrNot(v bool) *QueryPrepaidCardsRequest {
	s.EffectiveOrNot = &v
	return s
}

func (s *QueryPrepaidCardsRequest) SetExpiryTimeEnd(v string) *QueryPrepaidCardsRequest {
	s.ExpiryTimeEnd = &v
	return s
}

func (s *QueryPrepaidCardsRequest) SetExpiryTimeStart(v string) *QueryPrepaidCardsRequest {
	s.ExpiryTimeStart = &v
	return s
}

type QueryPrepaidCardsResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryPrepaidCardsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryPrepaidCardsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPrepaidCardsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPrepaidCardsResponseBody) SetCode(v string) *QueryPrepaidCardsResponseBody {
	s.Code = &v
	return s
}

func (s *QueryPrepaidCardsResponseBody) SetData(v *QueryPrepaidCardsResponseBodyData) *QueryPrepaidCardsResponseBody {
	s.Data = v
	return s
}

func (s *QueryPrepaidCardsResponseBody) SetMessage(v string) *QueryPrepaidCardsResponseBody {
	s.Message = &v
	return s
}

func (s *QueryPrepaidCardsResponseBody) SetRequestId(v string) *QueryPrepaidCardsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPrepaidCardsResponseBody) SetSuccess(v bool) *QueryPrepaidCardsResponseBody {
	s.Success = &v
	return s
}

type QueryPrepaidCardsResponseBodyData struct {
	PrepaidCard []*QueryPrepaidCardsResponseBodyDataPrepaidCard `json:"PrepaidCard,omitempty" xml:"PrepaidCard,omitempty" type:"Repeated"`
}

func (s QueryPrepaidCardsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryPrepaidCardsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryPrepaidCardsResponseBodyData) SetPrepaidCard(v []*QueryPrepaidCardsResponseBodyDataPrepaidCard) *QueryPrepaidCardsResponseBodyData {
	s.PrepaidCard = v
	return s
}

type QueryPrepaidCardsResponseBodyDataPrepaidCard struct {
	// The services to which the prepaid card is applicable.
	ApplicableProducts *string `json:"ApplicableProducts,omitempty" xml:"ApplicableProducts,omitempty"`
	// The scenario to which the prepaid card is applicable.
	ApplicableScenarios *string `json:"ApplicableScenarios,omitempty" xml:"ApplicableScenarios,omitempty"`
	// The balance of the prepaid card.
	Balance *string `json:"Balance,omitempty" xml:"Balance,omitempty"`
	// The time when the prepaid card took effect.
	EffectiveTime *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	// The time when the prepaid card expired.
	ExpiryTime *string `json:"ExpiryTime,omitempty" xml:"ExpiryTime,omitempty"`
	// The time when the prepaid card was issued.
	GrantedTime *string `json:"GrantedTime,omitempty" xml:"GrantedTime,omitempty"`
	// The nominal value of the prepaid card.
	NominalValue *string `json:"NominalValue,omitempty" xml:"NominalValue,omitempty"`
	// The ID of the prepaid card.
	PrepaidCardId *int64 `json:"PrepaidCardId,omitempty" xml:"PrepaidCardId,omitempty"`
	// The number of the prepaid card.
	PrepaidCardNo *string `json:"PrepaidCardNo,omitempty" xml:"PrepaidCardNo,omitempty"`
	// The status of the prepaid card. Valid values:
	//
	// *   Available: The prepaid card is valid.
	// *   Expired: The prepaid card expired.
	// *   Cancelled: The prepaid card is invalid.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QueryPrepaidCardsResponseBodyDataPrepaidCard) String() string {
	return tea.Prettify(s)
}

func (s QueryPrepaidCardsResponseBodyDataPrepaidCard) GoString() string {
	return s.String()
}

func (s *QueryPrepaidCardsResponseBodyDataPrepaidCard) SetApplicableProducts(v string) *QueryPrepaidCardsResponseBodyDataPrepaidCard {
	s.ApplicableProducts = &v
	return s
}

func (s *QueryPrepaidCardsResponseBodyDataPrepaidCard) SetApplicableScenarios(v string) *QueryPrepaidCardsResponseBodyDataPrepaidCard {
	s.ApplicableScenarios = &v
	return s
}

func (s *QueryPrepaidCardsResponseBodyDataPrepaidCard) SetBalance(v string) *QueryPrepaidCardsResponseBodyDataPrepaidCard {
	s.Balance = &v
	return s
}

func (s *QueryPrepaidCardsResponseBodyDataPrepaidCard) SetEffectiveTime(v string) *QueryPrepaidCardsResponseBodyDataPrepaidCard {
	s.EffectiveTime = &v
	return s
}

func (s *QueryPrepaidCardsResponseBodyDataPrepaidCard) SetExpiryTime(v string) *QueryPrepaidCardsResponseBodyDataPrepaidCard {
	s.ExpiryTime = &v
	return s
}

func (s *QueryPrepaidCardsResponseBodyDataPrepaidCard) SetGrantedTime(v string) *QueryPrepaidCardsResponseBodyDataPrepaidCard {
	s.GrantedTime = &v
	return s
}

func (s *QueryPrepaidCardsResponseBodyDataPrepaidCard) SetNominalValue(v string) *QueryPrepaidCardsResponseBodyDataPrepaidCard {
	s.NominalValue = &v
	return s
}

func (s *QueryPrepaidCardsResponseBodyDataPrepaidCard) SetPrepaidCardId(v int64) *QueryPrepaidCardsResponseBodyDataPrepaidCard {
	s.PrepaidCardId = &v
	return s
}

func (s *QueryPrepaidCardsResponseBodyDataPrepaidCard) SetPrepaidCardNo(v string) *QueryPrepaidCardsResponseBodyDataPrepaidCard {
	s.PrepaidCardNo = &v
	return s
}

func (s *QueryPrepaidCardsResponseBodyDataPrepaidCard) SetStatus(v string) *QueryPrepaidCardsResponseBodyDataPrepaidCard {
	s.Status = &v
	return s
}

type QueryPrepaidCardsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryPrepaidCardsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryPrepaidCardsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPrepaidCardsResponse) GoString() string {
	return s.String()
}

func (s *QueryPrepaidCardsResponse) SetHeaders(v map[string]*string) *QueryPrepaidCardsResponse {
	s.Headers = v
	return s
}

func (s *QueryPrepaidCardsResponse) SetStatusCode(v int32) *QueryPrepaidCardsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPrepaidCardsResponse) SetBody(v *QueryPrepaidCardsResponseBody) *QueryPrepaidCardsResponse {
	s.Body = v
	return s
}

type QueryPriceEntityListRequest struct {
	// The code of the service.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryPriceEntityListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPriceEntityListRequest) GoString() string {
	return s.String()
}

func (s *QueryPriceEntityListRequest) SetCommodityCode(v string) *QueryPriceEntityListRequest {
	s.CommodityCode = &v
	return s
}

func (s *QueryPriceEntityListRequest) SetLang(v string) *QueryPriceEntityListRequest {
	s.Lang = &v
	return s
}

type QueryPriceEntityListResponseBody struct {
	// The HTTP status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data that is returned.
	Data *QueryPriceEntityListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message that is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryPriceEntityListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPriceEntityListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPriceEntityListResponseBody) SetCode(v string) *QueryPriceEntityListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryPriceEntityListResponseBody) SetData(v *QueryPriceEntityListResponseBodyData) *QueryPriceEntityListResponseBody {
	s.Data = v
	return s
}

func (s *QueryPriceEntityListResponseBody) SetMessage(v string) *QueryPriceEntityListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryPriceEntityListResponseBody) SetRequestId(v string) *QueryPriceEntityListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPriceEntityListResponseBody) SetSuccess(v bool) *QueryPriceEntityListResponseBody {
	s.Success = &v
	return s
}

type QueryPriceEntityListResponseBodyData struct {
	// The information about the billable items.
	PriceEntityInfoList []*QueryPriceEntityListResponseBodyDataPriceEntityInfoList `json:"PriceEntityInfoList,omitempty" xml:"PriceEntityInfoList,omitempty" type:"Repeated"`
}

func (s QueryPriceEntityListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryPriceEntityListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryPriceEntityListResponseBodyData) SetPriceEntityInfoList(v []*QueryPriceEntityListResponseBodyDataPriceEntityInfoList) *QueryPriceEntityListResponseBodyData {
	s.PriceEntityInfoList = v
	return s
}

type QueryPriceEntityListResponseBodyDataPriceEntityInfoList struct {
	// The code of the billable item.
	PriceEntityCode *string `json:"PriceEntityCode,omitempty" xml:"PriceEntityCode,omitempty"`
	// The name of the billable item.
	PriceEntityName *string `json:"PriceEntityName,omitempty" xml:"PriceEntityName,omitempty"`
	// The factors of the billable item.
	PriceFactorList []*QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList `json:"PriceFactorList,omitempty" xml:"PriceFactorList,omitempty" type:"Repeated"`
}

func (s QueryPriceEntityListResponseBodyDataPriceEntityInfoList) String() string {
	return tea.Prettify(s)
}

func (s QueryPriceEntityListResponseBodyDataPriceEntityInfoList) GoString() string {
	return s.String()
}

func (s *QueryPriceEntityListResponseBodyDataPriceEntityInfoList) SetPriceEntityCode(v string) *QueryPriceEntityListResponseBodyDataPriceEntityInfoList {
	s.PriceEntityCode = &v
	return s
}

func (s *QueryPriceEntityListResponseBodyDataPriceEntityInfoList) SetPriceEntityName(v string) *QueryPriceEntityListResponseBodyDataPriceEntityInfoList {
	s.PriceEntityName = &v
	return s
}

func (s *QueryPriceEntityListResponseBodyDataPriceEntityInfoList) SetPriceFactorList(v []*QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList) *QueryPriceEntityListResponseBodyDataPriceEntityInfoList {
	s.PriceFactorList = v
	return s
}

type QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList struct {
	// The code of the factor.
	PriceFactorCode *string `json:"PriceFactorCode,omitempty" xml:"PriceFactorCode,omitempty"`
	// The name of the factor.
	PriceFactorName *string `json:"PriceFactorName,omitempty" xml:"PriceFactorName,omitempty"`
	// The values of the factor.
	PriceFactorValueList []*string `json:"PriceFactorValueList,omitempty" xml:"PriceFactorValueList,omitempty" type:"Repeated"`
}

func (s QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList) String() string {
	return tea.Prettify(s)
}

func (s QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList) GoString() string {
	return s.String()
}

func (s *QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList) SetPriceFactorCode(v string) *QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList {
	s.PriceFactorCode = &v
	return s
}

func (s *QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList) SetPriceFactorName(v string) *QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList {
	s.PriceFactorName = &v
	return s
}

func (s *QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList) SetPriceFactorValueList(v []*string) *QueryPriceEntityListResponseBodyDataPriceEntityInfoListPriceFactorList {
	s.PriceFactorValueList = v
	return s
}

type QueryPriceEntityListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryPriceEntityListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryPriceEntityListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPriceEntityListResponse) GoString() string {
	return s.String()
}

func (s *QueryPriceEntityListResponse) SetHeaders(v map[string]*string) *QueryPriceEntityListResponse {
	s.Headers = v
	return s
}

func (s *QueryPriceEntityListResponse) SetStatusCode(v int32) *QueryPriceEntityListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPriceEntityListResponse) SetBody(v *QueryPriceEntityListResponseBody) *QueryPriceEntityListResponse {
	s.Body = v
	return s
}

type QueryProductListRequest struct {
	// The page number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Specifies whether to return the total number of services. Default value: false.
	QueryTotalCount *bool `json:"QueryTotalCount,omitempty" xml:"QueryTotalCount,omitempty"`
}

func (s QueryProductListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListRequest) GoString() string {
	return s.String()
}

func (s *QueryProductListRequest) SetPageNum(v int32) *QueryProductListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryProductListRequest) SetPageSize(v int32) *QueryProductListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryProductListRequest) SetQueryTotalCount(v bool) *QueryProductListRequest {
	s.QueryTotalCount = &v
	return s
}

type QueryProductListResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about all Alibaba Cloud services.
	Data *QueryProductListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryProductListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseBody) SetCode(v string) *QueryProductListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryProductListResponseBody) SetData(v *QueryProductListResponseBodyData) *QueryProductListResponseBody {
	s.Data = v
	return s
}

func (s *QueryProductListResponseBody) SetMessage(v string) *QueryProductListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryProductListResponseBody) SetRequestId(v string) *QueryProductListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryProductListResponseBody) SetSuccess(v bool) *QueryProductListResponseBody {
	s.Success = &v
	return s
}

type QueryProductListResponseBodyData struct {
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The service definitions.
	ProductList *QueryProductListResponseBodyDataProductList `json:"ProductList,omitempty" xml:"ProductList,omitempty" type:"Struct"`
	// The total number of services.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryProductListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseBodyData) SetPageNum(v int32) *QueryProductListResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryProductListResponseBodyData) SetPageSize(v int32) *QueryProductListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryProductListResponseBodyData) SetProductList(v *QueryProductListResponseBodyDataProductList) *QueryProductListResponseBodyData {
	s.ProductList = v
	return s
}

func (s *QueryProductListResponseBodyData) SetTotalCount(v int32) *QueryProductListResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryProductListResponseBodyDataProductList struct {
	Product []*QueryProductListResponseBodyDataProductListProduct `json:"Product,omitempty" xml:"Product,omitempty" type:"Repeated"`
}

func (s QueryProductListResponseBodyDataProductList) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseBodyDataProductList) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseBodyDataProductList) SetProduct(v []*QueryProductListResponseBodyDataProductListProduct) *QueryProductListResponseBodyDataProductList {
	s.Product = v
	return s
}

type QueryProductListResponseBodyDataProductListProduct struct {
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The name of the service.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: subscription
	// *   PayAsYouGo: pay-as-you-go
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s QueryProductListResponseBodyDataProductListProduct) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponseBodyDataProductListProduct) GoString() string {
	return s.String()
}

func (s *QueryProductListResponseBodyDataProductListProduct) SetProductCode(v string) *QueryProductListResponseBodyDataProductListProduct {
	s.ProductCode = &v
	return s
}

func (s *QueryProductListResponseBodyDataProductListProduct) SetProductName(v string) *QueryProductListResponseBodyDataProductListProduct {
	s.ProductName = &v
	return s
}

func (s *QueryProductListResponseBodyDataProductListProduct) SetProductType(v string) *QueryProductListResponseBodyDataProductListProduct {
	s.ProductType = &v
	return s
}

func (s *QueryProductListResponseBodyDataProductListProduct) SetSubscriptionType(v string) *QueryProductListResponseBodyDataProductListProduct {
	s.SubscriptionType = &v
	return s
}

type QueryProductListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryProductListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryProductListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProductListResponse) GoString() string {
	return s.String()
}

func (s *QueryProductListResponse) SetHeaders(v map[string]*string) *QueryProductListResponse {
	s.Headers = v
	return s
}

func (s *QueryProductListResponse) SetStatusCode(v int32) *QueryProductListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryProductListResponse) SetBody(v *QueryProductListResponseBody) *QueryProductListResponse {
	s.Body = v
	return s
}

type QueryRIUtilizationDetailRequest struct {
	// The ID of the instance whose fees are deducted by using the RI. If this parameter is left empty, the usage details of all instances are queried.
	DeductedInstanceId *string `json:"DeductedInstanceId,omitempty" xml:"DeductedInstanceId,omitempty"`
	// The time when the RI expires. Specify the time in the YYYY-MM-DD HH:mm:ss format.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance type of the RI.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The number of the page to return. Default value: 1.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Default value: 20. Maximum value: 300.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The code of the service to which the RI is applied. Default value: ecsRi. Valid values:
	//
	// *   ecsRi: ECS RI.
	// *   scu_bag: storage capacity unit (SCU).
	RICommodityCode *string `json:"RICommodityCode,omitempty" xml:"RICommodityCode,omitempty"`
	// The ID of the RI. If this parameter is left empty, the usage details of all RIs are queried.
	RIInstanceId *string `json:"RIInstanceId,omitempty" xml:"RIInstanceId,omitempty"`
	// The time when the RI was created. Specify the time in the YYYY-MM-DD HH:mm:ss format.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryRIUtilizationDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRIUtilizationDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryRIUtilizationDetailRequest) SetDeductedInstanceId(v string) *QueryRIUtilizationDetailRequest {
	s.DeductedInstanceId = &v
	return s
}

func (s *QueryRIUtilizationDetailRequest) SetEndTime(v string) *QueryRIUtilizationDetailRequest {
	s.EndTime = &v
	return s
}

func (s *QueryRIUtilizationDetailRequest) SetInstanceSpec(v string) *QueryRIUtilizationDetailRequest {
	s.InstanceSpec = &v
	return s
}

func (s *QueryRIUtilizationDetailRequest) SetPageNum(v int32) *QueryRIUtilizationDetailRequest {
	s.PageNum = &v
	return s
}

func (s *QueryRIUtilizationDetailRequest) SetPageSize(v int32) *QueryRIUtilizationDetailRequest {
	s.PageSize = &v
	return s
}

func (s *QueryRIUtilizationDetailRequest) SetRICommodityCode(v string) *QueryRIUtilizationDetailRequest {
	s.RICommodityCode = &v
	return s
}

func (s *QueryRIUtilizationDetailRequest) SetRIInstanceId(v string) *QueryRIUtilizationDetailRequest {
	s.RIInstanceId = &v
	return s
}

func (s *QueryRIUtilizationDetailRequest) SetStartTime(v string) *QueryRIUtilizationDetailRequest {
	s.StartTime = &v
	return s
}

type QueryRIUtilizationDetailResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryRIUtilizationDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryRIUtilizationDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryRIUtilizationDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryRIUtilizationDetailResponseBody) SetCode(v string) *QueryRIUtilizationDetailResponseBody {
	s.Code = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBody) SetData(v *QueryRIUtilizationDetailResponseBodyData) *QueryRIUtilizationDetailResponseBody {
	s.Data = v
	return s
}

func (s *QueryRIUtilizationDetailResponseBody) SetMessage(v string) *QueryRIUtilizationDetailResponseBody {
	s.Message = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBody) SetRequestId(v string) *QueryRIUtilizationDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBody) SetSuccess(v bool) *QueryRIUtilizationDetailResponseBody {
	s.Success = &v
	return s
}

type QueryRIUtilizationDetailResponseBodyData struct {
	// The usage details of the RI.
	DetailList *QueryRIUtilizationDetailResponseBodyDataDetailList `json:"DetailList,omitempty" xml:"DetailList,omitempty" type:"Struct"`
	// The number of the returned page.
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryRIUtilizationDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryRIUtilizationDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryRIUtilizationDetailResponseBodyData) SetDetailList(v *QueryRIUtilizationDetailResponseBodyDataDetailList) *QueryRIUtilizationDetailResponseBodyData {
	s.DetailList = v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyData) SetPageNum(v int64) *QueryRIUtilizationDetailResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyData) SetPageSize(v int64) *QueryRIUtilizationDetailResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyData) SetTotalCount(v int64) *QueryRIUtilizationDetailResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryRIUtilizationDetailResponseBodyDataDetailList struct {
	DetailList []*QueryRIUtilizationDetailResponseBodyDataDetailListDetailList `json:"DetailList,omitempty" xml:"DetailList,omitempty" type:"Repeated"`
}

func (s QueryRIUtilizationDetailResponseBodyDataDetailList) String() string {
	return tea.Prettify(s)
}

func (s QueryRIUtilizationDetailResponseBodyDataDetailList) GoString() string {
	return s.String()
}

func (s *QueryRIUtilizationDetailResponseBodyDataDetailList) SetDetailList(v []*QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) *QueryRIUtilizationDetailResponseBodyDataDetailList {
	s.DetailList = v
	return s
}

type QueryRIUtilizationDetailResponseBodyDataDetailListDetailList struct {
	// The time when the fees are deducted by using the RI.
	DeductDate *string `json:"DeductDate,omitempty" xml:"DeductDate,omitempty"`
	// The total amount of computing power of the RI or capacity of SCU in the time period.
	DeductFactorTotal *float32 `json:"DeductFactorTotal,omitempty" xml:"DeductFactorTotal,omitempty"`
	// The deduct factor. This parameter is returned only if the RICommodityCode parameter is set to ecsRi.
	DeductHours *string `json:"DeductHours,omitempty" xml:"DeductHours,omitempty"`
	// The computing power or capacity of the pay-as-you-go instance whose fees are deducted by using the RI.
	DeductQuantity *float32 `json:"DeductQuantity,omitempty" xml:"DeductQuantity,omitempty"`
	// The code of the service whose fees are deducted by using the RI.
	DeductedCommodityCode *string `json:"DeductedCommodityCode,omitempty" xml:"DeductedCommodityCode,omitempty"`
	// The ID of the instance whose fees are deducted by using the RI.
	DeductedInstanceId *string `json:"DeductedInstanceId,omitempty" xml:"DeductedInstanceId,omitempty"`
	// The name of the service whose fees are deducted by using the RI.
	DeductedProductDetail *string `json:"DeductedProductDetail,omitempty" xml:"DeductedProductDetail,omitempty"`
	// The instance type of the instance whose fees are deducted by using the RI.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The ID of the RI.
	RIInstanceId *string `json:"RIInstanceId,omitempty" xml:"RIInstanceId,omitempty"`
}

func (s QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) String() string {
	return tea.Prettify(s)
}

func (s QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) GoString() string {
	return s.String()
}

func (s *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductDate(v string) *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductDate = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductFactorTotal(v float32) *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductFactorTotal = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductHours(v string) *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductHours = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductQuantity(v float32) *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductQuantity = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductedCommodityCode(v string) *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductedCommodityCode = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductedInstanceId(v string) *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductedInstanceId = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) SetDeductedProductDetail(v string) *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList {
	s.DeductedProductDetail = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) SetInstanceSpec(v string) *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList {
	s.InstanceSpec = &v
	return s
}

func (s *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList) SetRIInstanceId(v string) *QueryRIUtilizationDetailResponseBodyDataDetailListDetailList {
	s.RIInstanceId = &v
	return s
}

type QueryRIUtilizationDetailResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryRIUtilizationDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryRIUtilizationDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRIUtilizationDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryRIUtilizationDetailResponse) SetHeaders(v map[string]*string) *QueryRIUtilizationDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryRIUtilizationDetailResponse) SetStatusCode(v int32) *QueryRIUtilizationDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryRIUtilizationDetailResponse) SetBody(v *QueryRIUtilizationDetailResponseBody) *QueryRIUtilizationDetailResponse {
	s.Body = v
	return s
}

type QueryRedeemRequest struct {
	// Specifies whether the redemption coupon takes effect. Valid values:
	//
	// *   true
	// *   false
	//
	// Default value: false.
	EffectiveOrNot *bool `json:"EffectiveOrNot,omitempty" xml:"EffectiveOrNot,omitempty"`
	// The end time when the redemption coupon expires. The value must be in the yyyy-MM-ddTHH:mm:ssZ format.
	ExpiryTimeEnd *string `json:"ExpiryTimeEnd,omitempty" xml:"ExpiryTimeEnd,omitempty"`
	// The start time when the redemption coupon expires. The value must be in the yyyy-MM-ddTHH:mm:ssZ format.
	ExpiryTimeStart *string `json:"ExpiryTimeStart,omitempty" xml:"ExpiryTimeStart,omitempty"`
	// The number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryRedeemRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRedeemRequest) GoString() string {
	return s.String()
}

func (s *QueryRedeemRequest) SetEffectiveOrNot(v bool) *QueryRedeemRequest {
	s.EffectiveOrNot = &v
	return s
}

func (s *QueryRedeemRequest) SetExpiryTimeEnd(v string) *QueryRedeemRequest {
	s.ExpiryTimeEnd = &v
	return s
}

func (s *QueryRedeemRequest) SetExpiryTimeStart(v string) *QueryRedeemRequest {
	s.ExpiryTimeStart = &v
	return s
}

func (s *QueryRedeemRequest) SetPageNum(v int32) *QueryRedeemRequest {
	s.PageNum = &v
	return s
}

func (s *QueryRedeemRequest) SetPageSize(v int32) *QueryRedeemRequest {
	s.PageSize = &v
	return s
}

type QueryRedeemResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryRedeemResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryRedeemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryRedeemResponseBody) GoString() string {
	return s.String()
}

func (s *QueryRedeemResponseBody) SetCode(v string) *QueryRedeemResponseBody {
	s.Code = &v
	return s
}

func (s *QueryRedeemResponseBody) SetData(v *QueryRedeemResponseBodyData) *QueryRedeemResponseBody {
	s.Data = v
	return s
}

func (s *QueryRedeemResponseBody) SetMessage(v string) *QueryRedeemResponseBody {
	s.Message = &v
	return s
}

func (s *QueryRedeemResponseBody) SetRequestId(v string) *QueryRedeemResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryRedeemResponseBody) SetSuccess(v bool) *QueryRedeemResponseBody {
	s.Success = &v
	return s
}

type QueryRedeemResponseBodyData struct {
	// The page number of the returned page.
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The details of the redemption coupon.
	Redeem *QueryRedeemResponseBodyDataRedeem `json:"Redeem,omitempty" xml:"Redeem,omitempty" type:"Struct"`
	// The total number of returned entries.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryRedeemResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryRedeemResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryRedeemResponseBodyData) SetPageNum(v int64) *QueryRedeemResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryRedeemResponseBodyData) SetPageSize(v int64) *QueryRedeemResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryRedeemResponseBodyData) SetRedeem(v *QueryRedeemResponseBodyDataRedeem) *QueryRedeemResponseBodyData {
	s.Redeem = v
	return s
}

func (s *QueryRedeemResponseBodyData) SetTotalCount(v int64) *QueryRedeemResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryRedeemResponseBodyDataRedeem struct {
	Redeem []*QueryRedeemResponseBodyDataRedeemRedeem `json:"Redeem,omitempty" xml:"Redeem,omitempty" type:"Repeated"`
}

func (s QueryRedeemResponseBodyDataRedeem) String() string {
	return tea.Prettify(s)
}

func (s QueryRedeemResponseBodyDataRedeem) GoString() string {
	return s.String()
}

func (s *QueryRedeemResponseBodyDataRedeem) SetRedeem(v []*QueryRedeemResponseBodyDataRedeemRedeem) *QueryRedeemResponseBodyDataRedeem {
	s.Redeem = v
	return s
}

type QueryRedeemResponseBodyDataRedeemRedeem struct {
	// The services to which the redemption coupon is applicable.
	ApplicableProducts *string `json:"ApplicableProducts,omitempty" xml:"ApplicableProducts,omitempty"`
	// The balance of the redemption coupon.
	Balance *string `json:"Balance,omitempty" xml:"Balance,omitempty"`
	// The time when the redemption coupon took effect.
	EffectiveTime *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	// The time when the redemption coupon expired.
	ExpiryTime *string `json:"ExpiryTime,omitempty" xml:"ExpiryTime,omitempty"`
	// The time when the redemption coupon was issued.
	GrantedTime *string `json:"GrantedTime,omitempty" xml:"GrantedTime,omitempty"`
	// The nominal value of the redemption coupon.
	NominalValue *string `json:"NominalValue,omitempty" xml:"NominalValue,omitempty"`
	// The ID of the redemption coupon.
	RedeemId *string `json:"RedeemId,omitempty" xml:"RedeemId,omitempty"`
	// The number of the redemption coupon.
	RedeemNo *string `json:"RedeemNo,omitempty" xml:"RedeemNo,omitempty"`
	// The specifications of the redemption coupon.
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// The status of the redemption coupon. Valid values:
	//
	// *   Generated
	// *   CallBack
	// *   RefundPending
	// *   Canceled
	// *   Order_Canceled
	// *   ActivePending
	// *   ActiveSuccess
	// *   ExchangePending
	// *   ExchangeSuccess
	// *   Expired
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QueryRedeemResponseBodyDataRedeemRedeem) String() string {
	return tea.Prettify(s)
}

func (s QueryRedeemResponseBodyDataRedeemRedeem) GoString() string {
	return s.String()
}

func (s *QueryRedeemResponseBodyDataRedeemRedeem) SetApplicableProducts(v string) *QueryRedeemResponseBodyDataRedeemRedeem {
	s.ApplicableProducts = &v
	return s
}

func (s *QueryRedeemResponseBodyDataRedeemRedeem) SetBalance(v string) *QueryRedeemResponseBodyDataRedeemRedeem {
	s.Balance = &v
	return s
}

func (s *QueryRedeemResponseBodyDataRedeemRedeem) SetEffectiveTime(v string) *QueryRedeemResponseBodyDataRedeemRedeem {
	s.EffectiveTime = &v
	return s
}

func (s *QueryRedeemResponseBodyDataRedeemRedeem) SetExpiryTime(v string) *QueryRedeemResponseBodyDataRedeemRedeem {
	s.ExpiryTime = &v
	return s
}

func (s *QueryRedeemResponseBodyDataRedeemRedeem) SetGrantedTime(v string) *QueryRedeemResponseBodyDataRedeemRedeem {
	s.GrantedTime = &v
	return s
}

func (s *QueryRedeemResponseBodyDataRedeemRedeem) SetNominalValue(v string) *QueryRedeemResponseBodyDataRedeemRedeem {
	s.NominalValue = &v
	return s
}

func (s *QueryRedeemResponseBodyDataRedeemRedeem) SetRedeemId(v string) *QueryRedeemResponseBodyDataRedeemRedeem {
	s.RedeemId = &v
	return s
}

func (s *QueryRedeemResponseBodyDataRedeemRedeem) SetRedeemNo(v string) *QueryRedeemResponseBodyDataRedeemRedeem {
	s.RedeemNo = &v
	return s
}

func (s *QueryRedeemResponseBodyDataRedeemRedeem) SetSpecification(v string) *QueryRedeemResponseBodyDataRedeemRedeem {
	s.Specification = &v
	return s
}

func (s *QueryRedeemResponseBodyDataRedeemRedeem) SetStatus(v string) *QueryRedeemResponseBodyDataRedeemRedeem {
	s.Status = &v
	return s
}

type QueryRedeemResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryRedeemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryRedeemResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRedeemResponse) GoString() string {
	return s.String()
}

func (s *QueryRedeemResponse) SetHeaders(v map[string]*string) *QueryRedeemResponse {
	s.Headers = v
	return s
}

func (s *QueryRedeemResponse) SetStatusCode(v int32) *QueryRedeemResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryRedeemResponse) SetBody(v *QueryRedeemResponseBody) *QueryRedeemResponse {
	s.Body = v
	return s
}

type QueryRelationListRequest struct {
	// The number of the page to return. Default value: 1.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The states of the relationships between the management account and its members. The valid values of this parameter are the enumeration members of the RelationshipStatusEnum data type. If you do not specify this parameter, valid relationship states are queried by default.
	StatusList []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
	// The ID of the Alibaba Cloud account.
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryRelationListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRelationListRequest) GoString() string {
	return s.String()
}

func (s *QueryRelationListRequest) SetPageNum(v int32) *QueryRelationListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryRelationListRequest) SetPageSize(v int32) *QueryRelationListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryRelationListRequest) SetStatusList(v []*string) *QueryRelationListRequest {
	s.StatusList = v
	return s
}

func (s *QueryRelationListRequest) SetUserId(v int64) *QueryRelationListRequest {
	s.UserId = &v
	return s
}

type QueryRelationListResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryRelationListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryRelationListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryRelationListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryRelationListResponseBody) SetCode(v string) *QueryRelationListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryRelationListResponseBody) SetData(v *QueryRelationListResponseBodyData) *QueryRelationListResponseBody {
	s.Data = v
	return s
}

func (s *QueryRelationListResponseBody) SetMessage(v string) *QueryRelationListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryRelationListResponseBody) SetRequestId(v string) *QueryRelationListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryRelationListResponseBody) SetSuccess(v bool) *QueryRelationListResponseBody {
	s.Success = &v
	return s
}

type QueryRelationListResponseBodyData struct {
	// The relationships.
	FinancialRelationInfoList []*QueryRelationListResponseBodyDataFinancialRelationInfoList `json:"FinancialRelationInfoList,omitempty" xml:"FinancialRelationInfoList,omitempty" type:"Repeated"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryRelationListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryRelationListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryRelationListResponseBodyData) SetFinancialRelationInfoList(v []*QueryRelationListResponseBodyDataFinancialRelationInfoList) *QueryRelationListResponseBodyData {
	s.FinancialRelationInfoList = v
	return s
}

func (s *QueryRelationListResponseBodyData) SetPageNum(v int32) *QueryRelationListResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryRelationListResponseBodyData) SetPageSize(v int32) *QueryRelationListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryRelationListResponseBodyData) SetTotalCount(v int32) *QueryRelationListResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryRelationListResponseBodyDataFinancialRelationInfoList struct {
	// The ID of the Alibaba Cloud account.
	AccountId *int64 `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The name of the account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The display name of the account.
	AccountNickName *string `json:"AccountNickName,omitempty" xml:"AccountNickName,omitempty"`
	// The type of the account. Valid values: MASTER and MEMBER.
	AccountType *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	// The time when the relationship became invalid. If no value is returned, the relationship is still valid.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the relationship.
	RelationId *int64 `json:"RelationId,omitempty" xml:"RelationId,omitempty"`
	// The type of the relationship. Valid values: FinancialManagement and FinancialTrusteeship.
	RelationType *string `json:"RelationType,omitempty" xml:"RelationType,omitempty"`
	// The time when the relationship was established. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. Example: 2016-05-23T12:00:00Z.
	SetupTime *string `json:"SetupTime,omitempty" xml:"SetupTime,omitempty"`
	// The time when the relationship became valid. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. Example: 2016-05-23T12:00:00Z.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The state of the relationship. One of the enumeration members of the RelationshipStatusEnum data type is returned.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryRelationListResponseBodyDataFinancialRelationInfoList) String() string {
	return tea.Prettify(s)
}

func (s QueryRelationListResponseBodyDataFinancialRelationInfoList) GoString() string {
	return s.String()
}

func (s *QueryRelationListResponseBodyDataFinancialRelationInfoList) SetAccountId(v int64) *QueryRelationListResponseBodyDataFinancialRelationInfoList {
	s.AccountId = &v
	return s
}

func (s *QueryRelationListResponseBodyDataFinancialRelationInfoList) SetAccountName(v string) *QueryRelationListResponseBodyDataFinancialRelationInfoList {
	s.AccountName = &v
	return s
}

func (s *QueryRelationListResponseBodyDataFinancialRelationInfoList) SetAccountNickName(v string) *QueryRelationListResponseBodyDataFinancialRelationInfoList {
	s.AccountNickName = &v
	return s
}

func (s *QueryRelationListResponseBodyDataFinancialRelationInfoList) SetAccountType(v string) *QueryRelationListResponseBodyDataFinancialRelationInfoList {
	s.AccountType = &v
	return s
}

func (s *QueryRelationListResponseBodyDataFinancialRelationInfoList) SetEndTime(v string) *QueryRelationListResponseBodyDataFinancialRelationInfoList {
	s.EndTime = &v
	return s
}

func (s *QueryRelationListResponseBodyDataFinancialRelationInfoList) SetRelationId(v int64) *QueryRelationListResponseBodyDataFinancialRelationInfoList {
	s.RelationId = &v
	return s
}

func (s *QueryRelationListResponseBodyDataFinancialRelationInfoList) SetRelationType(v string) *QueryRelationListResponseBodyDataFinancialRelationInfoList {
	s.RelationType = &v
	return s
}

func (s *QueryRelationListResponseBodyDataFinancialRelationInfoList) SetSetupTime(v string) *QueryRelationListResponseBodyDataFinancialRelationInfoList {
	s.SetupTime = &v
	return s
}

func (s *QueryRelationListResponseBodyDataFinancialRelationInfoList) SetStartTime(v string) *QueryRelationListResponseBodyDataFinancialRelationInfoList {
	s.StartTime = &v
	return s
}

func (s *QueryRelationListResponseBodyDataFinancialRelationInfoList) SetState(v string) *QueryRelationListResponseBodyDataFinancialRelationInfoList {
	s.State = &v
	return s
}

type QueryRelationListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryRelationListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryRelationListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRelationListResponse) GoString() string {
	return s.String()
}

func (s *QueryRelationListResponse) SetHeaders(v map[string]*string) *QueryRelationListResponse {
	s.Headers = v
	return s
}

func (s *QueryRelationListResponse) SetStatusCode(v int32) *QueryRelationListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryRelationListResponse) SetBody(v *QueryRelationListResponseBody) *QueryRelationListResponse {
	s.Body = v
	return s
}

type QueryResellerAvailableQuotaRequest struct {
	ItemCodes *string `json:"ItemCodes,omitempty" xml:"ItemCodes,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s QueryResellerAvailableQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResellerAvailableQuotaRequest) GoString() string {
	return s.String()
}

func (s *QueryResellerAvailableQuotaRequest) SetItemCodes(v string) *QueryResellerAvailableQuotaRequest {
	s.ItemCodes = &v
	return s
}

func (s *QueryResellerAvailableQuotaRequest) SetOwnerId(v int64) *QueryResellerAvailableQuotaRequest {
	s.OwnerId = &v
	return s
}

type QueryResellerAvailableQuotaResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryResellerAvailableQuotaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryResellerAvailableQuotaResponseBody) GoString() string {
	return s.String()
}

func (s *QueryResellerAvailableQuotaResponseBody) SetCode(v string) *QueryResellerAvailableQuotaResponseBody {
	s.Code = &v
	return s
}

func (s *QueryResellerAvailableQuotaResponseBody) SetData(v string) *QueryResellerAvailableQuotaResponseBody {
	s.Data = &v
	return s
}

func (s *QueryResellerAvailableQuotaResponseBody) SetMessage(v string) *QueryResellerAvailableQuotaResponseBody {
	s.Message = &v
	return s
}

func (s *QueryResellerAvailableQuotaResponseBody) SetRequestId(v string) *QueryResellerAvailableQuotaResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryResellerAvailableQuotaResponseBody) SetSuccess(v bool) *QueryResellerAvailableQuotaResponseBody {
	s.Success = &v
	return s
}

type QueryResellerAvailableQuotaResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryResellerAvailableQuotaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryResellerAvailableQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResellerAvailableQuotaResponse) GoString() string {
	return s.String()
}

func (s *QueryResellerAvailableQuotaResponse) SetHeaders(v map[string]*string) *QueryResellerAvailableQuotaResponse {
	s.Headers = v
	return s
}

func (s *QueryResellerAvailableQuotaResponse) SetStatusCode(v int32) *QueryResellerAvailableQuotaResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryResellerAvailableQuotaResponse) SetBody(v *QueryResellerAvailableQuotaResponseBody) *QueryResellerAvailableQuotaResponse {
	s.Body = v
	return s
}

type QueryResellerUserAlarmThresholdRequest struct {
	AlarmType *string `json:"AlarmType,omitempty" xml:"AlarmType,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s QueryResellerUserAlarmThresholdRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResellerUserAlarmThresholdRequest) GoString() string {
	return s.String()
}

func (s *QueryResellerUserAlarmThresholdRequest) SetAlarmType(v string) *QueryResellerUserAlarmThresholdRequest {
	s.AlarmType = &v
	return s
}

func (s *QueryResellerUserAlarmThresholdRequest) SetOwnerId(v int64) *QueryResellerUserAlarmThresholdRequest {
	s.OwnerId = &v
	return s
}

type QueryResellerUserAlarmThresholdResponseBody struct {
	Code      *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Count     *int32                                             `json:"Count,omitempty" xml:"Count,omitempty"`
	Data      []*QueryResellerUserAlarmThresholdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryResellerUserAlarmThresholdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryResellerUserAlarmThresholdResponseBody) GoString() string {
	return s.String()
}

func (s *QueryResellerUserAlarmThresholdResponseBody) SetCode(v string) *QueryResellerUserAlarmThresholdResponseBody {
	s.Code = &v
	return s
}

func (s *QueryResellerUserAlarmThresholdResponseBody) SetCount(v int32) *QueryResellerUserAlarmThresholdResponseBody {
	s.Count = &v
	return s
}

func (s *QueryResellerUserAlarmThresholdResponseBody) SetData(v []*QueryResellerUserAlarmThresholdResponseBodyData) *QueryResellerUserAlarmThresholdResponseBody {
	s.Data = v
	return s
}

func (s *QueryResellerUserAlarmThresholdResponseBody) SetMessage(v string) *QueryResellerUserAlarmThresholdResponseBody {
	s.Message = &v
	return s
}

func (s *QueryResellerUserAlarmThresholdResponseBody) SetRequestId(v string) *QueryResellerUserAlarmThresholdResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryResellerUserAlarmThresholdResponseBody) SetSuccess(v bool) *QueryResellerUserAlarmThresholdResponseBody {
	s.Success = &v
	return s
}

type QueryResellerUserAlarmThresholdResponseBodyData struct {
	Denominator     *int32  `json:"Denominator,omitempty" xml:"Denominator,omitempty"`
	Numerator       *int32  `json:"Numerator,omitempty" xml:"Numerator,omitempty"`
	ThresholdAmount *string `json:"ThresholdAmount,omitempty" xml:"ThresholdAmount,omitempty"`
	ThresholdType   *int32  `json:"ThresholdType,omitempty" xml:"ThresholdType,omitempty"`
}

func (s QueryResellerUserAlarmThresholdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryResellerUserAlarmThresholdResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryResellerUserAlarmThresholdResponseBodyData) SetDenominator(v int32) *QueryResellerUserAlarmThresholdResponseBodyData {
	s.Denominator = &v
	return s
}

func (s *QueryResellerUserAlarmThresholdResponseBodyData) SetNumerator(v int32) *QueryResellerUserAlarmThresholdResponseBodyData {
	s.Numerator = &v
	return s
}

func (s *QueryResellerUserAlarmThresholdResponseBodyData) SetThresholdAmount(v string) *QueryResellerUserAlarmThresholdResponseBodyData {
	s.ThresholdAmount = &v
	return s
}

func (s *QueryResellerUserAlarmThresholdResponseBodyData) SetThresholdType(v int32) *QueryResellerUserAlarmThresholdResponseBodyData {
	s.ThresholdType = &v
	return s
}

type QueryResellerUserAlarmThresholdResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryResellerUserAlarmThresholdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryResellerUserAlarmThresholdResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResellerUserAlarmThresholdResponse) GoString() string {
	return s.String()
}

func (s *QueryResellerUserAlarmThresholdResponse) SetHeaders(v map[string]*string) *QueryResellerUserAlarmThresholdResponse {
	s.Headers = v
	return s
}

func (s *QueryResellerUserAlarmThresholdResponse) SetStatusCode(v int32) *QueryResellerUserAlarmThresholdResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryResellerUserAlarmThresholdResponse) SetBody(v *QueryResellerUserAlarmThresholdResponseBody) *QueryResellerUserAlarmThresholdResponse {
	s.Body = v
	return s
}

type QueryResourcePackageInstancesRequest struct {
	// The end of the expiration time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	ExpiryTimeEnd *string `json:"ExpiryTimeEnd,omitempty" xml:"ExpiryTimeEnd,omitempty"`
	// The beginning of the expiration time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	ExpiryTimeStart *string `json:"ExpiryTimeStart,omitempty" xml:"ExpiryTimeStart,omitempty"`
	// Specifies whether partners are involved.
	IncludePartner *bool  `json:"IncludePartner,omitempty" xml:"IncludePartner,omitempty"`
	OwnerId        *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. Default value: 1.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Default value: 20. Maximum value: 300.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s QueryResourcePackageInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcePackageInstancesRequest) GoString() string {
	return s.String()
}

func (s *QueryResourcePackageInstancesRequest) SetExpiryTimeEnd(v string) *QueryResourcePackageInstancesRequest {
	s.ExpiryTimeEnd = &v
	return s
}

func (s *QueryResourcePackageInstancesRequest) SetExpiryTimeStart(v string) *QueryResourcePackageInstancesRequest {
	s.ExpiryTimeStart = &v
	return s
}

func (s *QueryResourcePackageInstancesRequest) SetIncludePartner(v bool) *QueryResourcePackageInstancesRequest {
	s.IncludePartner = &v
	return s
}

func (s *QueryResourcePackageInstancesRequest) SetOwnerId(v int64) *QueryResourcePackageInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryResourcePackageInstancesRequest) SetPageNum(v int32) *QueryResourcePackageInstancesRequest {
	s.PageNum = &v
	return s
}

func (s *QueryResourcePackageInstancesRequest) SetPageSize(v int32) *QueryResourcePackageInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *QueryResourcePackageInstancesRequest) SetProductCode(v string) *QueryResourcePackageInstancesRequest {
	s.ProductCode = &v
	return s
}

type QueryResourcePackageInstancesResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryResourcePackageInstancesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number of the returned page.
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of returned entries.
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryResourcePackageInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcePackageInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *QueryResourcePackageInstancesResponseBody) SetCode(v string) *QueryResourcePackageInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBody) SetData(v *QueryResourcePackageInstancesResponseBodyData) *QueryResourcePackageInstancesResponseBody {
	s.Data = v
	return s
}

func (s *QueryResourcePackageInstancesResponseBody) SetMessage(v string) *QueryResourcePackageInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBody) SetPage(v int32) *QueryResourcePackageInstancesResponseBody {
	s.Page = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBody) SetPageSize(v int32) *QueryResourcePackageInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBody) SetRequestId(v string) *QueryResourcePackageInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBody) SetSuccess(v bool) *QueryResourcePackageInstancesResponseBody {
	s.Success = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBody) SetTotal(v int32) *QueryResourcePackageInstancesResponseBody {
	s.Total = &v
	return s
}

type QueryResourcePackageInstancesResponseBodyData struct {
	// The ID of the host.
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The details of the instances.
	Instances *QueryResourcePackageInstancesResponseBodyDataInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNum *string `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QueryResourcePackageInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcePackageInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryResourcePackageInstancesResponseBodyData) SetHostId(v string) *QueryResourcePackageInstancesResponseBodyData {
	s.HostId = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyData) SetInstances(v *QueryResourcePackageInstancesResponseBodyDataInstances) *QueryResourcePackageInstancesResponseBodyData {
	s.Instances = v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyData) SetPageNum(v string) *QueryResourcePackageInstancesResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyData) SetPageSize(v string) *QueryResourcePackageInstancesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyData) SetTotalCount(v string) *QueryResourcePackageInstancesResponseBodyData {
	s.TotalCount = &v
	return s
}

type QueryResourcePackageInstancesResponseBodyDataInstances struct {
	Instance []*QueryResourcePackageInstancesResponseBodyDataInstancesInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Repeated"`
}

func (s QueryResourcePackageInstancesResponseBodyDataInstances) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcePackageInstancesResponseBodyDataInstances) GoString() string {
	return s.String()
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstances) SetInstance(v []*QueryResourcePackageInstancesResponseBodyDataInstancesInstance) *QueryResourcePackageInstancesResponseBodyDataInstances {
	s.Instance = v
	return s
}

type QueryResourcePackageInstancesResponseBodyDataInstancesInstance struct {
	// The services to which the resource plan is applicable.
	ApplicableProducts *QueryResourcePackageInstancesResponseBodyDataInstancesInstanceApplicableProducts `json:"ApplicableProducts,omitempty" xml:"ApplicableProducts,omitempty" type:"Struct"`
	// The commodity code.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The deduction type. Example: Absolute.
	DeductType *string `json:"DeductType,omitempty" xml:"DeductType,omitempty"`
	// The time when the resource plan took effect.
	EffectiveTime *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	// The time when the resource plan expired.
	ExpiryTime *string `json:"ExpiryTime,omitempty" xml:"ExpiryTime,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the resource plan.
	PackageType *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	// The ID of the region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The remaining quota.
	RemainingAmount *string `json:"RemainingAmount,omitempty" xml:"RemainingAmount,omitempty"`
	// The unit of the remaining quota.
	RemainingAmountUnit *string `json:"RemainingAmountUnit,omitempty" xml:"RemainingAmountUnit,omitempty"`
	// The remarks on the resource plan. The remarks must be made in Chinese.
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// The status of the resource plan. Valid values:
	//
	// *   Available
	// *   Expired
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The total quota of the resource plan.
	TotalAmount *string `json:"TotalAmount,omitempty" xml:"TotalAmount,omitempty"`
	// The unit of the total quota.
	TotalAmountUnit *string `json:"TotalAmountUnit,omitempty" xml:"TotalAmountUnit,omitempty"`
}

func (s QueryResourcePackageInstancesResponseBodyDataInstancesInstance) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcePackageInstancesResponseBodyDataInstancesInstance) GoString() string {
	return s.String()
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetApplicableProducts(v *QueryResourcePackageInstancesResponseBodyDataInstancesInstanceApplicableProducts) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.ApplicableProducts = v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetCommodityCode(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.CommodityCode = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetDeductType(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.DeductType = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetEffectiveTime(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.EffectiveTime = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetExpiryTime(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.ExpiryTime = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetInstanceId(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.InstanceId = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetPackageType(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.PackageType = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetRegion(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.Region = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetRemainingAmount(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.RemainingAmount = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetRemainingAmountUnit(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.RemainingAmountUnit = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetRemark(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.Remark = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetStatus(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.Status = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetTotalAmount(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.TotalAmount = &v
	return s
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstance) SetTotalAmountUnit(v string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstance {
	s.TotalAmountUnit = &v
	return s
}

type QueryResourcePackageInstancesResponseBodyDataInstancesInstanceApplicableProducts struct {
	Product []*string `json:"Product,omitempty" xml:"Product,omitempty" type:"Repeated"`
}

func (s QueryResourcePackageInstancesResponseBodyDataInstancesInstanceApplicableProducts) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcePackageInstancesResponseBodyDataInstancesInstanceApplicableProducts) GoString() string {
	return s.String()
}

func (s *QueryResourcePackageInstancesResponseBodyDataInstancesInstanceApplicableProducts) SetProduct(v []*string) *QueryResourcePackageInstancesResponseBodyDataInstancesInstanceApplicableProducts {
	s.Product = v
	return s
}

type QueryResourcePackageInstancesResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryResourcePackageInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryResourcePackageInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryResourcePackageInstancesResponse) GoString() string {
	return s.String()
}

func (s *QueryResourcePackageInstancesResponse) SetHeaders(v map[string]*string) *QueryResourcePackageInstancesResponse {
	s.Headers = v
	return s
}

func (s *QueryResourcePackageInstancesResponse) SetStatusCode(v int32) *QueryResourcePackageInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryResourcePackageInstancesResponse) SetBody(v *QueryResourcePackageInstancesResponseBody) *QueryResourcePackageInstancesResponse {
	s.Body = v
	return s
}

type QuerySavingsPlansDeductLogRequest struct {
	// The end of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the instance ID based on which the data is queried. Valid values:
	//
	// *   spn: queries data based on the ID of the savings plan instance.
	// *   product: queries data based on the ID of the cloud service instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The language of the return data. Valid values:
	//
	// *   ZH: Chinese
	// *   EN: English
	Locale *string `json:"Locale,omitempty" xml:"Locale,omitempty"`
	// The number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QuerySavingsPlansDeductLogRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansDeductLogRequest) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansDeductLogRequest) SetEndTime(v string) *QuerySavingsPlansDeductLogRequest {
	s.EndTime = &v
	return s
}

func (s *QuerySavingsPlansDeductLogRequest) SetInstanceId(v string) *QuerySavingsPlansDeductLogRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySavingsPlansDeductLogRequest) SetInstanceType(v string) *QuerySavingsPlansDeductLogRequest {
	s.InstanceType = &v
	return s
}

func (s *QuerySavingsPlansDeductLogRequest) SetLocale(v string) *QuerySavingsPlansDeductLogRequest {
	s.Locale = &v
	return s
}

func (s *QuerySavingsPlansDeductLogRequest) SetPageNum(v int32) *QuerySavingsPlansDeductLogRequest {
	s.PageNum = &v
	return s
}

func (s *QuerySavingsPlansDeductLogRequest) SetPageSize(v int32) *QuerySavingsPlansDeductLogRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySavingsPlansDeductLogRequest) SetStartTime(v string) *QuerySavingsPlansDeductLogRequest {
	s.StartTime = &v
	return s
}

type QuerySavingsPlansDeductLogResponseBody struct {
	// The error code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The return data.
	Data *QuerySavingsPlansDeductLogResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QuerySavingsPlansDeductLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansDeductLogResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansDeductLogResponseBody) SetCode(v string) *QuerySavingsPlansDeductLogResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBody) SetData(v *QuerySavingsPlansDeductLogResponseBodyData) *QuerySavingsPlansDeductLogResponseBody {
	s.Data = v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBody) SetMessage(v string) *QuerySavingsPlansDeductLogResponseBody {
	s.Message = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBody) SetRequestId(v string) *QuerySavingsPlansDeductLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBody) SetSuccess(v bool) *QuerySavingsPlansDeductLogResponseBody {
	s.Success = &v
	return s
}

type QuerySavingsPlansDeductLogResponseBodyData struct {
	// The deduction details.
	Items []*QuerySavingsPlansDeductLogResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QuerySavingsPlansDeductLogResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansDeductLogResponseBodyData) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansDeductLogResponseBodyData) SetItems(v []*QuerySavingsPlansDeductLogResponseBodyDataItems) *QuerySavingsPlansDeductLogResponseBodyData {
	s.Items = v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyData) SetPageNum(v int32) *QuerySavingsPlansDeductLogResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyData) SetPageSize(v int32) *QuerySavingsPlansDeductLogResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyData) SetTotalCount(v int32) *QuerySavingsPlansDeductLogResponseBodyData {
	s.TotalCount = &v
	return s
}

type QuerySavingsPlansDeductLogResponseBodyDataItems struct {
	// The billable item for which the fee is deducted.
	BillModule           *string `json:"BillModule,omitempty" xml:"BillModule,omitempty"`
	BillingCycle         *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	BillingOfficialPrice *string `json:"BillingOfficialPrice,omitempty" xml:"BillingOfficialPrice,omitempty"`
	// The service for which the fee is deducted.
	DeductCommodity *string `json:"DeductCommodity,omitempty" xml:"DeductCommodity,omitempty"`
	// The deducted amount.
	DeductFee *string `json:"DeductFee,omitempty" xml:"DeductFee,omitempty"`
	// The ID of the instance for which the fee is deducted.
	DeductInstanceId *string `json:"DeductInstanceId,omitempty" xml:"DeductInstanceId,omitempty"`
	// The deduction rate.
	DeductRate            *string `json:"DeductRate,omitempty" xml:"DeductRate,omitempty"`
	DeductedOfficialPrice *string `json:"DeductedOfficialPrice,omitempty" xml:"DeductedOfficialPrice,omitempty"`
	// The discount used for the current deduction.
	DiscountRate *string `json:"DiscountRate,omitempty" xml:"DiscountRate,omitempty"`
	// The end of the billing cycle for which the fee is deducted.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the savings plan instance.
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceSpec       *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	InstanceTypeFamily *string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	OwnerId            *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Region             *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The type of the savings plan. Valid values:
	//
	// *   universal: general-purpose
	// *   ecs: ECS compute
	SavingsType *string `json:"SavingsType,omitempty" xml:"SavingsType,omitempty"`
	// The beginning of the billing cycle for which the fee is deducted. The time is in the format of yyyy-MM-dd HH:mm:ss.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the user.
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QuerySavingsPlansDeductLogResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansDeductLogResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetBillModule(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.BillModule = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetBillingCycle(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.BillingCycle = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetBillingOfficialPrice(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.BillingOfficialPrice = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetDeductCommodity(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.DeductCommodity = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetDeductFee(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.DeductFee = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetDeductInstanceId(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.DeductInstanceId = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetDeductRate(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.DeductRate = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetDeductedOfficialPrice(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.DeductedOfficialPrice = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetDiscountRate(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.DiscountRate = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetEndTime(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.EndTime = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetInstanceId(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.InstanceId = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetInstanceSpec(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.InstanceSpec = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetInstanceTypeFamily(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.InstanceTypeFamily = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetOwnerId(v int64) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.OwnerId = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetRegion(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetSavingsType(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.SavingsType = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetStartTime(v string) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.StartTime = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponseBodyDataItems) SetUserId(v int64) *QuerySavingsPlansDeductLogResponseBodyDataItems {
	s.UserId = &v
	return s
}

type QuerySavingsPlansDeductLogResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySavingsPlansDeductLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySavingsPlansDeductLogResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansDeductLogResponse) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansDeductLogResponse) SetHeaders(v map[string]*string) *QuerySavingsPlansDeductLogResponse {
	s.Headers = v
	return s
}

func (s *QuerySavingsPlansDeductLogResponse) SetStatusCode(v int32) *QuerySavingsPlansDeductLogResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySavingsPlansDeductLogResponse) SetBody(v *QuerySavingsPlansDeductLogResponseBody) *QuerySavingsPlansDeductLogResponse {
	s.Body = v
	return s
}

type QuerySavingsPlansDiscountRequest struct {
	// The code of the service.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The cycle based on which queries are performed.
	Cycle *string `json:"Cycle,omitempty" xml:"Cycle,omitempty"`
	// The identifier of the language.
	Locale *string `json:"Locale,omitempty" xml:"Locale,omitempty"`
	// The code of the pricing module.
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	// The number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The payment mode.
	PayMode *string `json:"PayMode,omitempty" xml:"PayMode,omitempty"`
	// The ID of the region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The type of the resource.
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	// The type of the savings plan.
	SpnType *string `json:"SpnType,omitempty" xml:"SpnType,omitempty"`
}

func (s QuerySavingsPlansDiscountRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansDiscountRequest) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansDiscountRequest) SetCommodityCode(v string) *QuerySavingsPlansDiscountRequest {
	s.CommodityCode = &v
	return s
}

func (s *QuerySavingsPlansDiscountRequest) SetCycle(v string) *QuerySavingsPlansDiscountRequest {
	s.Cycle = &v
	return s
}

func (s *QuerySavingsPlansDiscountRequest) SetLocale(v string) *QuerySavingsPlansDiscountRequest {
	s.Locale = &v
	return s
}

func (s *QuerySavingsPlansDiscountRequest) SetModuleCode(v string) *QuerySavingsPlansDiscountRequest {
	s.ModuleCode = &v
	return s
}

func (s *QuerySavingsPlansDiscountRequest) SetPageNum(v int32) *QuerySavingsPlansDiscountRequest {
	s.PageNum = &v
	return s
}

func (s *QuerySavingsPlansDiscountRequest) SetPageSize(v int32) *QuerySavingsPlansDiscountRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySavingsPlansDiscountRequest) SetPayMode(v string) *QuerySavingsPlansDiscountRequest {
	s.PayMode = &v
	return s
}

func (s *QuerySavingsPlansDiscountRequest) SetRegion(v string) *QuerySavingsPlansDiscountRequest {
	s.Region = &v
	return s
}

func (s *QuerySavingsPlansDiscountRequest) SetSpec(v string) *QuerySavingsPlansDiscountRequest {
	s.Spec = &v
	return s
}

func (s *QuerySavingsPlansDiscountRequest) SetSpnType(v string) *QuerySavingsPlansDiscountRequest {
	s.SpnType = &v
	return s
}

type QuerySavingsPlansDiscountResponseBody struct {
	// The error code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QuerySavingsPlansDiscountResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QuerySavingsPlansDiscountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansDiscountResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansDiscountResponseBody) SetCode(v string) *QuerySavingsPlansDiscountResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBody) SetData(v *QuerySavingsPlansDiscountResponseBodyData) *QuerySavingsPlansDiscountResponseBody {
	s.Data = v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBody) SetMessage(v string) *QuerySavingsPlansDiscountResponseBody {
	s.Message = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBody) SetRequestId(v string) *QuerySavingsPlansDiscountResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBody) SetSuccess(v bool) *QuerySavingsPlansDiscountResponseBody {
	s.Success = &v
	return s
}

type QuerySavingsPlansDiscountResponseBodyData struct {
	// The IP address of the request.
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The information about the discounts on saving plans.
	Items []*QuerySavingsPlansDiscountResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
}

func (s QuerySavingsPlansDiscountResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansDiscountResponseBodyData) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansDiscountResponseBodyData) SetHostId(v string) *QuerySavingsPlansDiscountResponseBodyData {
	s.HostId = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBodyData) SetItems(v []*QuerySavingsPlansDiscountResponseBodyDataItems) *QuerySavingsPlansDiscountResponseBodyData {
	s.Items = v
	return s
}

type QuerySavingsPlansDiscountResponseBodyDataItems struct {
	// The details of the service.
	CommodityName *string `json:"CommodityName,omitempty" xml:"CommodityName,omitempty"`
	// The contracted discount.
	ContractDiscountRate *string `json:"ContractDiscountRate,omitempty" xml:"ContractDiscountRate,omitempty"`
	// The cycle based on which queries were performed.
	Cycle *string `json:"Cycle,omitempty" xml:"Cycle,omitempty"`
	// The discount provided by the official website.
	DiscountRate *string `json:"DiscountRate,omitempty" xml:"DiscountRate,omitempty"`
	// The name of the pricing module.
	ModuleName *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
	// The payment mode. Valid values:
	//
	// *   total: all upfront
	// *   half: half upfront
	// *   zero: no upfront
	PayMode *string `json:"PayMode,omitempty" xml:"PayMode,omitempty"`
	// The ID of the region.
	Region     *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RegionCode *string `json:"RegionCode,omitempty" xml:"RegionCode,omitempty"`
	// The type of the resource.
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	// The type of the savings plan.
	SpnType *string `json:"SpnType,omitempty" xml:"SpnType,omitempty"`
}

func (s QuerySavingsPlansDiscountResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansDiscountResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansDiscountResponseBodyDataItems) SetCommodityName(v string) *QuerySavingsPlansDiscountResponseBodyDataItems {
	s.CommodityName = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBodyDataItems) SetContractDiscountRate(v string) *QuerySavingsPlansDiscountResponseBodyDataItems {
	s.ContractDiscountRate = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBodyDataItems) SetCycle(v string) *QuerySavingsPlansDiscountResponseBodyDataItems {
	s.Cycle = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBodyDataItems) SetDiscountRate(v string) *QuerySavingsPlansDiscountResponseBodyDataItems {
	s.DiscountRate = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBodyDataItems) SetModuleName(v string) *QuerySavingsPlansDiscountResponseBodyDataItems {
	s.ModuleName = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBodyDataItems) SetPayMode(v string) *QuerySavingsPlansDiscountResponseBodyDataItems {
	s.PayMode = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBodyDataItems) SetRegion(v string) *QuerySavingsPlansDiscountResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBodyDataItems) SetRegionCode(v string) *QuerySavingsPlansDiscountResponseBodyDataItems {
	s.RegionCode = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBodyDataItems) SetSpec(v string) *QuerySavingsPlansDiscountResponseBodyDataItems {
	s.Spec = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponseBodyDataItems) SetSpnType(v string) *QuerySavingsPlansDiscountResponseBodyDataItems {
	s.SpnType = &v
	return s
}

type QuerySavingsPlansDiscountResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySavingsPlansDiscountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySavingsPlansDiscountResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansDiscountResponse) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansDiscountResponse) SetHeaders(v map[string]*string) *QuerySavingsPlansDiscountResponse {
	s.Headers = v
	return s
}

func (s *QuerySavingsPlansDiscountResponse) SetStatusCode(v int32) *QuerySavingsPlansDiscountResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySavingsPlansDiscountResponse) SetBody(v *QuerySavingsPlansDiscountResponseBody) *QuerySavingsPlansDiscountResponse {
	s.Body = v
	return s
}

type QuerySavingsPlansInstanceRequest struct {
	// The end of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the savings plan instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The language of the return data. Valid values:
	//
	// *   ZH: Chinese
	// *   EN: English
	Locale *string `json:"Locale,omitempty" xml:"Locale,omitempty"`
	// The number of the page to return.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the Instance.
	//
	// *  NORMAL
	// * RELEASE
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags.
	Tag []*QuerySavingsPlansInstanceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QuerySavingsPlansInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansInstanceRequest) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansInstanceRequest) SetEndTime(v string) *QuerySavingsPlansInstanceRequest {
	s.EndTime = &v
	return s
}

func (s *QuerySavingsPlansInstanceRequest) SetInstanceId(v string) *QuerySavingsPlansInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *QuerySavingsPlansInstanceRequest) SetLocale(v string) *QuerySavingsPlansInstanceRequest {
	s.Locale = &v
	return s
}

func (s *QuerySavingsPlansInstanceRequest) SetPageNum(v int32) *QuerySavingsPlansInstanceRequest {
	s.PageNum = &v
	return s
}

func (s *QuerySavingsPlansInstanceRequest) SetPageSize(v int32) *QuerySavingsPlansInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySavingsPlansInstanceRequest) SetStartTime(v string) *QuerySavingsPlansInstanceRequest {
	s.StartTime = &v
	return s
}

func (s *QuerySavingsPlansInstanceRequest) SetStatus(v string) *QuerySavingsPlansInstanceRequest {
	s.Status = &v
	return s
}

func (s *QuerySavingsPlansInstanceRequest) SetTag(v []*QuerySavingsPlansInstanceRequestTag) *QuerySavingsPlansInstanceRequest {
	s.Tag = v
	return s
}

type QuerySavingsPlansInstanceRequestTag struct {
	// The key of the tag to query.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag to query.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QuerySavingsPlansInstanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansInstanceRequestTag) SetKey(v string) *QuerySavingsPlansInstanceRequestTag {
	s.Key = &v
	return s
}

func (s *QuerySavingsPlansInstanceRequestTag) SetValue(v string) *QuerySavingsPlansInstanceRequestTag {
	s.Value = &v
	return s
}

type QuerySavingsPlansInstanceResponseBody struct {
	// The error code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The return data.
	Data *QuerySavingsPlansInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QuerySavingsPlansInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansInstanceResponseBody) SetCode(v string) *QuerySavingsPlansInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBody) SetData(v *QuerySavingsPlansInstanceResponseBodyData) *QuerySavingsPlansInstanceResponseBody {
	s.Data = v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBody) SetMessage(v string) *QuerySavingsPlansInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBody) SetRequestId(v string) *QuerySavingsPlansInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBody) SetSuccess(v bool) *QuerySavingsPlansInstanceResponseBody {
	s.Success = &v
	return s
}

type QuerySavingsPlansInstanceResponseBodyData struct {
	// The details about the instances.
	Items []*QuerySavingsPlansInstanceResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
	// The page number of the returned page.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QuerySavingsPlansInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansInstanceResponseBodyData) SetItems(v []*QuerySavingsPlansInstanceResponseBodyDataItems) *QuerySavingsPlansInstanceResponseBodyData {
	s.Items = v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyData) SetPageNum(v int32) *QuerySavingsPlansInstanceResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyData) SetPageSize(v int32) *QuerySavingsPlansInstanceResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyData) SetTotalCount(v int32) *QuerySavingsPlansInstanceResponseBodyData {
	s.TotalCount = &v
	return s
}

type QuerySavingsPlansInstanceResponseBodyDataItems struct {
	// The allocation status. Valid values:
	//
	// *   unallocated
	// *   allocated
	// *   beAllocated
	AllocationStatus *string `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty"`
	CommodityCode    *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The currency. Valid values: CNY and USD.
	Currency         *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	CurrentPoolValue *string `json:"CurrentPoolValue,omitempty" xml:"CurrentPoolValue,omitempty"`
	Cycle            *string `json:"Cycle,omitempty" xml:"Cycle,omitempty"`
	DeductCycleType  *string `json:"DeductCycleType,omitempty" xml:"DeductCycleType,omitempty"`
	// The time when the instance expires. The time is in the format of yyyy-MM-dd HH:mm:ss.
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EndTimestamp *int64  `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	// The instance family information. For an instance of the Elastic Compute Service (ECS) compute type, the value indicates the ECS instance family or the ECS instance family package.
	InstanceFamily *string `json:"InstanceFamily,omitempty" xml:"InstanceFamily,omitempty"`
	// The ID of the savings plan instance.
	InstanceId          *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LastBillTotalUsage  *string `json:"LastBillTotalUsage,omitempty" xml:"LastBillTotalUsage,omitempty"`
	LastBillUtilization *string `json:"LastBillUtilization,omitempty" xml:"LastBillUtilization,omitempty"`
	// The payment type. Valid values:
	//
	// *   total: All Upfront
	// *   half: Partial Upfront
	// *   zero: No Upfront
	PayMode *string `json:"PayMode,omitempty" xml:"PayMode,omitempty"`
	// The commitment.
	PoolValue *string `json:"PoolValue,omitempty" xml:"PoolValue,omitempty"`
	// The prepaid amount.
	PrepayFee *string `json:"PrepayFee,omitempty" xml:"PrepayFee,omitempty"`
	// The region.
	Region        *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RestPoolValue *string `json:"RestPoolValue,omitempty" xml:"RestPoolValue,omitempty"`
	// The type of the savings plan. Valid values:
	//
	// *   universal: general-purpose
	// *   ecs: ECS compute
	SavingsType *string `json:"SavingsType,omitempty" xml:"SavingsType,omitempty"`
	// The time when the instance takes effect. The time is in the format of yyyy-MM-dd HH:mm:ss.
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StartTimestamp *int64  `json:"StartTimestamp,omitempty" xml:"StartTimestamp,omitempty"`
	// The status of the instance. Valid values:
	//
	// *   NORMAL: normal
	// *   LIMIT: stopped due to overdue payment
	// *   RELEASE: released
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The details about the tags.
	Tags []*QuerySavingsPlansInstanceResponseBodyDataItemsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The total amount that is saved.
	TotalSave *string `json:"TotalSave,omitempty" xml:"TotalSave,omitempty"`
	// The total usage.
	Utilization *string `json:"Utilization,omitempty" xml:"Utilization,omitempty"`
}

func (s QuerySavingsPlansInstanceResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansInstanceResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetAllocationStatus(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.AllocationStatus = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetCommodityCode(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.CommodityCode = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetCurrency(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.Currency = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetCurrentPoolValue(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.CurrentPoolValue = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetCycle(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.Cycle = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetDeductCycleType(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.DeductCycleType = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetEndTime(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.EndTime = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetEndTimestamp(v int64) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.EndTimestamp = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetInstanceFamily(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.InstanceFamily = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetInstanceId(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.InstanceId = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetLastBillTotalUsage(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.LastBillTotalUsage = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetLastBillUtilization(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.LastBillUtilization = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetPayMode(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.PayMode = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetPoolValue(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.PoolValue = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetPrepayFee(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.PrepayFee = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetRegion(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.Region = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetRestPoolValue(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.RestPoolValue = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetSavingsType(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.SavingsType = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetStartTime(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.StartTime = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetStartTimestamp(v int64) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.StartTimestamp = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetStatus(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.Status = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetTags(v []*QuerySavingsPlansInstanceResponseBodyDataItemsTags) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.Tags = v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetTotalSave(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.TotalSave = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItems) SetUtilization(v string) *QuerySavingsPlansInstanceResponseBodyDataItems {
	s.Utilization = &v
	return s
}

type QuerySavingsPlansInstanceResponseBodyDataItemsTags struct {
	// The key of the tag.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QuerySavingsPlansInstanceResponseBodyDataItemsTags) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansInstanceResponseBodyDataItemsTags) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItemsTags) SetKey(v string) *QuerySavingsPlansInstanceResponseBodyDataItemsTags {
	s.Key = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponseBodyDataItemsTags) SetValue(v string) *QuerySavingsPlansInstanceResponseBodyDataItemsTags {
	s.Value = &v
	return s
}

type QuerySavingsPlansInstanceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySavingsPlansInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySavingsPlansInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySavingsPlansInstanceResponse) GoString() string {
	return s.String()
}

func (s *QuerySavingsPlansInstanceResponse) SetHeaders(v map[string]*string) *QuerySavingsPlansInstanceResponse {
	s.Headers = v
	return s
}

func (s *QuerySavingsPlansInstanceResponse) SetStatusCode(v int32) *QuerySavingsPlansInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySavingsPlansInstanceResponse) SetBody(v *QuerySavingsPlansInstanceResponseBody) *QuerySavingsPlansInstanceResponse {
	s.Body = v
	return s
}

type QuerySettleBillRequest struct {
	BillOwnerId            *int64  `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	BillingCycle           *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	IsDisplayLocalCurrency *bool   `json:"IsDisplayLocalCurrency,omitempty" xml:"IsDisplayLocalCurrency,omitempty"`
	IsHideZeroCharge       *bool   `json:"IsHideZeroCharge,omitempty" xml:"IsHideZeroCharge,omitempty"`
	MaxResults             *int32  `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken              *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProductCode            *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductType            *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RecordID               *string `json:"RecordID,omitempty" xml:"RecordID,omitempty"`
	SubscriptionType       *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QuerySettleBillRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySettleBillRequest) GoString() string {
	return s.String()
}

func (s *QuerySettleBillRequest) SetBillOwnerId(v int64) *QuerySettleBillRequest {
	s.BillOwnerId = &v
	return s
}

func (s *QuerySettleBillRequest) SetBillingCycle(v string) *QuerySettleBillRequest {
	s.BillingCycle = &v
	return s
}

func (s *QuerySettleBillRequest) SetIsDisplayLocalCurrency(v bool) *QuerySettleBillRequest {
	s.IsDisplayLocalCurrency = &v
	return s
}

func (s *QuerySettleBillRequest) SetIsHideZeroCharge(v bool) *QuerySettleBillRequest {
	s.IsHideZeroCharge = &v
	return s
}

func (s *QuerySettleBillRequest) SetMaxResults(v int32) *QuerySettleBillRequest {
	s.MaxResults = &v
	return s
}

func (s *QuerySettleBillRequest) SetNextToken(v string) *QuerySettleBillRequest {
	s.NextToken = &v
	return s
}

func (s *QuerySettleBillRequest) SetOwnerId(v int64) *QuerySettleBillRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySettleBillRequest) SetProductCode(v string) *QuerySettleBillRequest {
	s.ProductCode = &v
	return s
}

func (s *QuerySettleBillRequest) SetProductType(v string) *QuerySettleBillRequest {
	s.ProductType = &v
	return s
}

func (s *QuerySettleBillRequest) SetRecordID(v string) *QuerySettleBillRequest {
	s.RecordID = &v
	return s
}

func (s *QuerySettleBillRequest) SetSubscriptionType(v string) *QuerySettleBillRequest {
	s.SubscriptionType = &v
	return s
}

func (s *QuerySettleBillRequest) SetType(v string) *QuerySettleBillRequest {
	s.Type = &v
	return s
}

type QuerySettleBillResponseBody struct {
	Code      *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *QuerySettleBillResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QuerySettleBillResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySettleBillResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySettleBillResponseBody) SetCode(v string) *QuerySettleBillResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySettleBillResponseBody) SetData(v *QuerySettleBillResponseBodyData) *QuerySettleBillResponseBody {
	s.Data = v
	return s
}

func (s *QuerySettleBillResponseBody) SetMessage(v string) *QuerySettleBillResponseBody {
	s.Message = &v
	return s
}

func (s *QuerySettleBillResponseBody) SetRequestId(v string) *QuerySettleBillResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySettleBillResponseBody) SetSuccess(v bool) *QuerySettleBillResponseBody {
	s.Success = &v
	return s
}

type QuerySettleBillResponseBodyData struct {
	AccountID    *string                               `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	AccountName  *string                               `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	BillingCycle *string                               `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	Items        *QuerySettleBillResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	MaxResults   *int32                                `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken    *string                               `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TotalCount   *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QuerySettleBillResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QuerySettleBillResponseBodyData) GoString() string {
	return s.String()
}

func (s *QuerySettleBillResponseBodyData) SetAccountID(v string) *QuerySettleBillResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *QuerySettleBillResponseBodyData) SetAccountName(v string) *QuerySettleBillResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *QuerySettleBillResponseBodyData) SetBillingCycle(v string) *QuerySettleBillResponseBodyData {
	s.BillingCycle = &v
	return s
}

func (s *QuerySettleBillResponseBodyData) SetItems(v *QuerySettleBillResponseBodyDataItems) *QuerySettleBillResponseBodyData {
	s.Items = v
	return s
}

func (s *QuerySettleBillResponseBodyData) SetMaxResults(v int32) *QuerySettleBillResponseBodyData {
	s.MaxResults = &v
	return s
}

func (s *QuerySettleBillResponseBodyData) SetNextToken(v string) *QuerySettleBillResponseBodyData {
	s.NextToken = &v
	return s
}

func (s *QuerySettleBillResponseBodyData) SetTotalCount(v int32) *QuerySettleBillResponseBodyData {
	s.TotalCount = &v
	return s
}

type QuerySettleBillResponseBodyDataItems struct {
	Item []*QuerySettleBillResponseBodyDataItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s QuerySettleBillResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s QuerySettleBillResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *QuerySettleBillResponseBodyDataItems) SetItem(v []*QuerySettleBillResponseBodyDataItemsItem) *QuerySettleBillResponseBodyDataItems {
	s.Item = v
	return s
}

type QuerySettleBillResponseBodyDataItemsItem struct {
	AdjustAmount          *float32 `json:"AdjustAmount,omitempty" xml:"AdjustAmount,omitempty"`
	AfterTaxAmount        *float32 `json:"AfterTaxAmount,omitempty" xml:"AfterTaxAmount,omitempty"`
	BillAccountID         *string  `json:"BillAccountID,omitempty" xml:"BillAccountID,omitempty"`
	BillAccountName       *string  `json:"BillAccountName,omitempty" xml:"BillAccountName,omitempty"`
	BizType               *string  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	CashAmount            *float32 `json:"CashAmount,omitempty" xml:"CashAmount,omitempty"`
	CommodityCode         *string  `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	Currency              *string  `json:"Currency,omitempty" xml:"Currency,omitempty"`
	DeductedByCashCoupons *float32 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	DeductedByCoupons     *float32 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	DeductedByPrepaidCard *float32 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	InvoiceDiscount       *float32 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	Item                  *string  `json:"Item,omitempty" xml:"Item,omitempty"`
	OutstandingAmount     *float32 `json:"OutstandingAmount,omitempty" xml:"OutstandingAmount,omitempty"`
	OwnerID               *string  `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	PaymentAmount         *float32 `json:"PaymentAmount,omitempty" xml:"PaymentAmount,omitempty"`
	PaymentCurrency       *string  `json:"PaymentCurrency,omitempty" xml:"PaymentCurrency,omitempty"`
	PaymentTime           *string  `json:"PaymentTime,omitempty" xml:"PaymentTime,omitempty"`
	PaymentTransactionID  *string  `json:"PaymentTransactionID,omitempty" xml:"PaymentTransactionID,omitempty"`
	PipCode               *string  `json:"PipCode,omitempty" xml:"PipCode,omitempty"`
	PretaxAmount          *float32 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	PretaxAmountLocal     *float32 `json:"PretaxAmountLocal,omitempty" xml:"PretaxAmountLocal,omitempty"`
	PretaxGrossAmount     *float32 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	ProductCode           *string  `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductDetail         *string  `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	ProductName           *string  `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	ProductType           *string  `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RecordID              *string  `json:"RecordID,omitempty" xml:"RecordID,omitempty"`
	RoundDownDiscount     *string  `json:"RoundDownDiscount,omitempty" xml:"RoundDownDiscount,omitempty"`
	Status                *string  `json:"Status,omitempty" xml:"Status,omitempty"`
	SubOrderId            *string  `json:"SubOrderId,omitempty" xml:"SubOrderId,omitempty"`
	SubscriptionType      *string  `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	Tax                   *float32 `json:"Tax,omitempty" xml:"Tax,omitempty"`
	UsageEndTime          *string  `json:"UsageEndTime,omitempty" xml:"UsageEndTime,omitempty"`
	UsageStartTime        *string  `json:"UsageStartTime,omitempty" xml:"UsageStartTime,omitempty"`
}

func (s QuerySettleBillResponseBodyDataItemsItem) String() string {
	return tea.Prettify(s)
}

func (s QuerySettleBillResponseBodyDataItemsItem) GoString() string {
	return s.String()
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetAdjustAmount(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.AdjustAmount = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetAfterTaxAmount(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.AfterTaxAmount = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetBillAccountID(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.BillAccountID = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetBillAccountName(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.BillAccountName = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetBizType(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.BizType = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetCashAmount(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.CashAmount = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetCommodityCode(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.CommodityCode = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetCurrency(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.Currency = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetDeductedByCashCoupons(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetDeductedByCoupons(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.DeductedByCoupons = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetDeductedByPrepaidCard(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetInvoiceDiscount(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.InvoiceDiscount = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetItem(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.Item = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetOutstandingAmount(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.OutstandingAmount = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetOwnerID(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.OwnerID = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetPaymentAmount(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.PaymentAmount = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetPaymentCurrency(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.PaymentCurrency = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetPaymentTime(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.PaymentTime = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetPaymentTransactionID(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.PaymentTransactionID = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetPipCode(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.PipCode = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetPretaxAmount(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.PretaxAmount = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetPretaxAmountLocal(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.PretaxAmountLocal = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetPretaxGrossAmount(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.PretaxGrossAmount = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetProductCode(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.ProductCode = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetProductDetail(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.ProductDetail = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetProductName(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.ProductName = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetProductType(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.ProductType = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetRecordID(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.RecordID = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetRoundDownDiscount(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.RoundDownDiscount = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetStatus(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.Status = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetSubOrderId(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.SubOrderId = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetSubscriptionType(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.SubscriptionType = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetTax(v float32) *QuerySettleBillResponseBodyDataItemsItem {
	s.Tax = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetUsageEndTime(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.UsageEndTime = &v
	return s
}

func (s *QuerySettleBillResponseBodyDataItemsItem) SetUsageStartTime(v string) *QuerySettleBillResponseBodyDataItemsItem {
	s.UsageStartTime = &v
	return s
}

type QuerySettleBillResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySettleBillResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySettleBillResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySettleBillResponse) GoString() string {
	return s.String()
}

func (s *QuerySettleBillResponse) SetHeaders(v map[string]*string) *QuerySettleBillResponse {
	s.Headers = v
	return s
}

func (s *QuerySettleBillResponse) SetStatusCode(v int32) *QuerySettleBillResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySettleBillResponse) SetBody(v *QuerySettleBillResponseBody) *QuerySettleBillResponse {
	s.Body = v
	return s
}

type QuerySkuPriceListRequest struct {
	// The code of the service.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The token that is used to retrieve the next page. You do not need to set this parameter if you query coverage details for the first time. The response returns a token that you can use to query coverage details of the next page. If a null value is returned for the NextPageToken parameter, no more coverage details can be queried.
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The number of entries to be returned on each page. Maximum value: 50.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The code of the pricing object.
	PriceEntityCode *string `json:"PriceEntityCode,omitempty" xml:"PriceEntityCode,omitempty"`
	// The conditions of the pricing factors.
	PriceFactorConditionMap map[string][]*string `json:"PriceFactorConditionMap,omitempty" xml:"PriceFactorConditionMap,omitempty"`
}

func (s QuerySkuPriceListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySkuPriceListRequest) GoString() string {
	return s.String()
}

func (s *QuerySkuPriceListRequest) SetCommodityCode(v string) *QuerySkuPriceListRequest {
	s.CommodityCode = &v
	return s
}

func (s *QuerySkuPriceListRequest) SetLang(v string) *QuerySkuPriceListRequest {
	s.Lang = &v
	return s
}

func (s *QuerySkuPriceListRequest) SetNextPageToken(v string) *QuerySkuPriceListRequest {
	s.NextPageToken = &v
	return s
}

func (s *QuerySkuPriceListRequest) SetPageSize(v int32) *QuerySkuPriceListRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySkuPriceListRequest) SetPriceEntityCode(v string) *QuerySkuPriceListRequest {
	s.PriceEntityCode = &v
	return s
}

func (s *QuerySkuPriceListRequest) SetPriceFactorConditionMap(v map[string][]*string) *QuerySkuPriceListRequest {
	s.PriceFactorConditionMap = v
	return s
}

type QuerySkuPriceListShrinkRequest struct {
	// The code of the service.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	Lang          *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The token that is used to retrieve the next page. You do not need to set this parameter if you query coverage details for the first time. The response returns a token that you can use to query coverage details of the next page. If a null value is returned for the NextPageToken parameter, no more coverage details can be queried.
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The number of entries to be returned on each page. Maximum value: 50.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The code of the pricing object.
	PriceEntityCode *string `json:"PriceEntityCode,omitempty" xml:"PriceEntityCode,omitempty"`
	// The conditions of the pricing factors.
	PriceFactorConditionMapShrink *string `json:"PriceFactorConditionMap,omitempty" xml:"PriceFactorConditionMap,omitempty"`
}

func (s QuerySkuPriceListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySkuPriceListShrinkRequest) GoString() string {
	return s.String()
}

func (s *QuerySkuPriceListShrinkRequest) SetCommodityCode(v string) *QuerySkuPriceListShrinkRequest {
	s.CommodityCode = &v
	return s
}

func (s *QuerySkuPriceListShrinkRequest) SetLang(v string) *QuerySkuPriceListShrinkRequest {
	s.Lang = &v
	return s
}

func (s *QuerySkuPriceListShrinkRequest) SetNextPageToken(v string) *QuerySkuPriceListShrinkRequest {
	s.NextPageToken = &v
	return s
}

func (s *QuerySkuPriceListShrinkRequest) SetPageSize(v int32) *QuerySkuPriceListShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySkuPriceListShrinkRequest) SetPriceEntityCode(v string) *QuerySkuPriceListShrinkRequest {
	s.PriceEntityCode = &v
	return s
}

func (s *QuerySkuPriceListShrinkRequest) SetPriceFactorConditionMapShrink(v string) *QuerySkuPriceListShrinkRequest {
	s.PriceFactorConditionMapShrink = &v
	return s
}

type QuerySkuPriceListResponseBody struct {
	// The HTTP status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data that is returned.
	Data *QuerySkuPriceListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message that is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QuerySkuPriceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySkuPriceListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySkuPriceListResponseBody) SetCode(v string) *QuerySkuPriceListResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySkuPriceListResponseBody) SetData(v *QuerySkuPriceListResponseBodyData) *QuerySkuPriceListResponseBody {
	s.Data = v
	return s
}

func (s *QuerySkuPriceListResponseBody) SetMessage(v string) *QuerySkuPriceListResponseBody {
	s.Message = &v
	return s
}

func (s *QuerySkuPriceListResponseBody) SetRequestId(v string) *QuerySkuPriceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySkuPriceListResponseBody) SetSuccess(v bool) *QuerySkuPriceListResponseBody {
	s.Success = &v
	return s
}

type QuerySkuPriceListResponseBodyData struct {
	// The SKUs of the pricing object.
	SkuPricePage *QuerySkuPriceListResponseBodyDataSkuPricePage `json:"SkuPricePage,omitempty" xml:"SkuPricePage,omitempty" type:"Struct"`
}

func (s QuerySkuPriceListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QuerySkuPriceListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QuerySkuPriceListResponseBodyData) SetSkuPricePage(v *QuerySkuPriceListResponseBodyDataSkuPricePage) *QuerySkuPriceListResponseBodyData {
	s.SkuPricePage = v
	return s
}

type QuerySkuPriceListResponseBodyDataSkuPricePage struct {
	// The token that is used to query the next page.
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// The SKUs.
	SkuPriceList []*QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList `json:"SkuPriceList,omitempty" xml:"SkuPriceList,omitempty" type:"Repeated"`
	// The total number of SKUs.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QuerySkuPriceListResponseBodyDataSkuPricePage) String() string {
	return tea.Prettify(s)
}

func (s QuerySkuPriceListResponseBodyDataSkuPricePage) GoString() string {
	return s.String()
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePage) SetNextPageToken(v string) *QuerySkuPriceListResponseBodyDataSkuPricePage {
	s.NextPageToken = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePage) SetSkuPriceList(v []*QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList) *QuerySkuPriceListResponseBodyDataSkuPricePage {
	s.SkuPriceList = v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePage) SetTotalCount(v int32) *QuerySkuPriceListResponseBodyDataSkuPricePage {
	s.TotalCount = &v
	return s
}

type QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList struct {
	// The prices of the SKUs.
	CskuPriceList []*QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList `json:"CskuPriceList,omitempty" xml:"CskuPriceList,omitempty" type:"Repeated"`
	// The code of the SKU.
	SkuCode *string `json:"SkuCode,omitempty" xml:"SkuCode,omitempty"`
	// The values of the pricing factors.
	SkuFactorMap map[string]*string `json:"SkuFactorMap,omitempty" xml:"SkuFactorMap,omitempty"`
}

func (s QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList) String() string {
	return tea.Prettify(s)
}

func (s QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList) GoString() string {
	return s.String()
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList) SetCskuPriceList(v []*QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList {
	s.CskuPriceList = v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList) SetSkuCode(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList {
	s.SkuCode = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList) SetSkuFactorMap(v map[string]*string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceList {
	s.SkuFactorMap = v
	return s
}

type QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList struct {
	// The unique code of the SKU price.
	CskuCode *string `json:"CskuCode,omitempty" xml:"CskuCode,omitempty"`
	// The currency.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The price.
	Price *string `json:"Price,omitempty" xml:"Price,omitempty"`
	// The pricing mode.
	PriceMode *string `json:"PriceMode,omitempty" xml:"PriceMode,omitempty"`
	// The pricing type.
	PriceType *string `json:"PriceType,omitempty" xml:"PriceType,omitempty"`
	// The unit of the price.
	PriceUnit *string `json:"PriceUnit,omitempty" xml:"PriceUnit,omitempty"`
	// If the PriceMode parameter is set to STEP_ACCUMULATION or STEP_ARRIVE, the value of this field exists and specifies the range. If the PriceMode parameter is set to NORMAL_PRICE, the value of this field is null.
	RangeList []*QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList `json:"RangeList,omitempty" xml:"RangeList,omitempty" type:"Repeated"`
	// The usage unit.
	UsageUnit *string `json:"UsageUnit,omitempty" xml:"UsageUnit,omitempty"`
}

func (s QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) String() string {
	return tea.Prettify(s)
}

func (s QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) GoString() string {
	return s.String()
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) SetCskuCode(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList {
	s.CskuCode = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) SetCurrency(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList {
	s.Currency = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) SetPrice(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList {
	s.Price = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) SetPriceMode(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList {
	s.PriceMode = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) SetPriceType(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList {
	s.PriceType = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) SetPriceUnit(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList {
	s.PriceUnit = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) SetRangeList(v []*QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList {
	s.RangeList = v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList) SetUsageUnit(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceList {
	s.UsageUnit = &v
	return s
}

type QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList struct {
	// The code of the pricing factor.
	FactorCode *string `json:"FactorCode,omitempty" xml:"FactorCode,omitempty"`
	// The maximum value.
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	// The minimum value.
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
	// The closure type of the interval.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList) String() string {
	return tea.Prettify(s)
}

func (s QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList) GoString() string {
	return s.String()
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList) SetFactorCode(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList {
	s.FactorCode = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList) SetMax(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList {
	s.Max = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList) SetMin(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList {
	s.Min = &v
	return s
}

func (s *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList) SetType(v string) *QuerySkuPriceListResponseBodyDataSkuPricePageSkuPriceListCskuPriceListRangeList {
	s.Type = &v
	return s
}

type QuerySkuPriceListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySkuPriceListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySkuPriceListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySkuPriceListResponse) GoString() string {
	return s.String()
}

func (s *QuerySkuPriceListResponse) SetHeaders(v map[string]*string) *QuerySkuPriceListResponse {
	s.Headers = v
	return s
}

func (s *QuerySkuPriceListResponse) SetStatusCode(v int32) *QuerySkuPriceListResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySkuPriceListResponse) SetBody(v *QuerySkuPriceListResponseBody) *QuerySkuPriceListResponse {
	s.Body = v
	return s
}

type QuerySplitItemBillRequest struct {
	// The ID of the member. If you specify a value for this parameter, you can query the split bills of the specified member. If you leave this parameter empty, the split bills of the current account are queried by default.
	BillOwnerId *int64 `json:"BillOwnerId,omitempty" xml:"BillOwnerId,omitempty"`
	// The billing cycle, in the YYYY-MM format.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. Default value: 1.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Default value: 20. Maximum value: 300.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The billing method. Valid values: Subscription: subscription PayAsYouGo: pay-as-you-go This parameter must be used together with the ProductCode parameter.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s QuerySplitItemBillRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySplitItemBillRequest) GoString() string {
	return s.String()
}

func (s *QuerySplitItemBillRequest) SetBillOwnerId(v int64) *QuerySplitItemBillRequest {
	s.BillOwnerId = &v
	return s
}

func (s *QuerySplitItemBillRequest) SetBillingCycle(v string) *QuerySplitItemBillRequest {
	s.BillingCycle = &v
	return s
}

func (s *QuerySplitItemBillRequest) SetOwnerId(v int64) *QuerySplitItemBillRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySplitItemBillRequest) SetPageNum(v int32) *QuerySplitItemBillRequest {
	s.PageNum = &v
	return s
}

func (s *QuerySplitItemBillRequest) SetPageSize(v int32) *QuerySplitItemBillRequest {
	s.PageSize = &v
	return s
}

func (s *QuerySplitItemBillRequest) SetProductCode(v string) *QuerySplitItemBillRequest {
	s.ProductCode = &v
	return s
}

func (s *QuerySplitItemBillRequest) SetProductType(v string) *QuerySplitItemBillRequest {
	s.ProductType = &v
	return s
}

func (s *QuerySplitItemBillRequest) SetSubscriptionType(v string) *QuerySplitItemBillRequest {
	s.SubscriptionType = &v
	return s
}

type QuerySplitItemBillResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QuerySplitItemBillResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QuerySplitItemBillResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySplitItemBillResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySplitItemBillResponseBody) SetCode(v string) *QuerySplitItemBillResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySplitItemBillResponseBody) SetData(v *QuerySplitItemBillResponseBodyData) *QuerySplitItemBillResponseBody {
	s.Data = v
	return s
}

func (s *QuerySplitItemBillResponseBody) SetMessage(v string) *QuerySplitItemBillResponseBody {
	s.Message = &v
	return s
}

func (s *QuerySplitItemBillResponseBody) SetRequestId(v string) *QuerySplitItemBillResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySplitItemBillResponseBody) SetSuccess(v bool) *QuerySplitItemBillResponseBody {
	s.Success = &v
	return s
}

type QuerySplitItemBillResponseBodyData struct {
	// The ID of the account.
	AccountID *string `json:"AccountID,omitempty" xml:"AccountID,omitempty"`
	// The name of the account.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The billing cycle, in the YYYY-MM format.
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The details of the bills.
	Items *QuerySplitItemBillResponseBodyDataItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	// The page number of the returned page. Default value: 1.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries returned on each page. Default value: 20. Maximum value: 300.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned entries.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s QuerySplitItemBillResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QuerySplitItemBillResponseBodyData) GoString() string {
	return s.String()
}

func (s *QuerySplitItemBillResponseBodyData) SetAccountID(v string) *QuerySplitItemBillResponseBodyData {
	s.AccountID = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyData) SetAccountName(v string) *QuerySplitItemBillResponseBodyData {
	s.AccountName = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyData) SetBillingCycle(v string) *QuerySplitItemBillResponseBodyData {
	s.BillingCycle = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyData) SetItems(v *QuerySplitItemBillResponseBodyDataItems) *QuerySplitItemBillResponseBodyData {
	s.Items = v
	return s
}

func (s *QuerySplitItemBillResponseBodyData) SetPageNum(v int32) *QuerySplitItemBillResponseBodyData {
	s.PageNum = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyData) SetPageSize(v int32) *QuerySplitItemBillResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyData) SetTotalCount(v int32) *QuerySplitItemBillResponseBodyData {
	s.TotalCount = &v
	return s
}

type QuerySplitItemBillResponseBodyDataItems struct {
	Item []*QuerySplitItemBillResponseBodyDataItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s QuerySplitItemBillResponseBodyDataItems) String() string {
	return tea.Prettify(s)
}

func (s QuerySplitItemBillResponseBodyDataItems) GoString() string {
	return s.String()
}

func (s *QuerySplitItemBillResponseBodyDataItems) SetItem(v []*QuerySplitItemBillResponseBodyDataItemsItem) *QuerySplitItemBillResponseBodyDataItems {
	s.Item = v
	return s
}

type QuerySplitItemBillResponseBodyDataItemsItem struct {
	// The amount deducted by using credit refunds.
	AdjustAmount *float32 `json:"AdjustAmount,omitempty" xml:"AdjustAmount,omitempty"`
	// The billing date, in the YYYY-MM-DD format.
	BillingDate *string `json:"BillingDate,omitempty" xml:"BillingDate,omitempty"`
	// The billable item.
	BillingItem *string `json:"BillingItem,omitempty" xml:"BillingItem,omitempty"`
	// The billing type.
	BillingType *string `json:"BillingType,omitempty" xml:"BillingType,omitempty"`
	// The amount paid in cash. The amount that was deducted by using credit refunds is not included.
	CashAmount *float32 `json:"CashAmount,omitempty" xml:"CashAmount,omitempty"`
	// The code of the commodity. The commodity code is the same as that displayed in User Center.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	// The cost center.
	CostUnit *string `json:"CostUnit,omitempty" xml:"CostUnit,omitempty"`
	// The type of the currency. Valid values: CNY, USD, and JPY.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The amount deducted by using vouchers.
	DeductedByCashCoupons *float32 `json:"DeductedByCashCoupons,omitempty" xml:"DeductedByCashCoupons,omitempty"`
	// The amount deducted by using coupons.
	DeductedByCoupons *float32 `json:"DeductedByCoupons,omitempty" xml:"DeductedByCoupons,omitempty"`
	// The amount deducted by using prepaid cards.
	DeductedByPrepaidCard *float32 `json:"DeductedByPrepaidCard,omitempty" xml:"DeductedByPrepaidCard,omitempty"`
	// The amount deducted by using resource plans.
	DeductedByResourcePackage *string `json:"DeductedByResourcePackage,omitempty" xml:"DeductedByResourcePackage,omitempty"`
	// The configurations of the instance.
	InstanceConfig *string `json:"InstanceConfig,omitempty" xml:"InstanceConfig,omitempty"`
	// The ID of the instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The instance type of the instance.
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The public IP address.
	InternetIP *string `json:"InternetIP,omitempty" xml:"InternetIP,omitempty"`
	// The private IP address.
	IntranetIP *string `json:"IntranetIP,omitempty" xml:"IntranetIP,omitempty"`
	// The discount amount.
	InvoiceDiscount *float32 `json:"InvoiceDiscount,omitempty" xml:"InvoiceDiscount,omitempty"`
	// The type of the bill. Valid values: SubscriptionOrder: subscription order PayAsYouGoBill: pay-as-you-go bill Refund: refund Adjustment: reconciliation
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The unit price. This parameter is returned only if the isBillingItem parameter is set to true.
	ListPrice *string `json:"ListPrice,omitempty" xml:"ListPrice,omitempty"`
	// The unit of the unit price. This parameter is returned only if the isBillingItem parameter is set to true.
	ListPriceUnit *string `json:"ListPriceUnit,omitempty" xml:"ListPriceUnit,omitempty"`
	// The name of the instance.
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// The unsettled amount of the bill.
	OutstandingAmount *float32 `json:"OutstandingAmount,omitempty" xml:"OutstandingAmount,omitempty"`
	// The ID of the member. This parameter is returned in a multi-account payment scenario.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The amount paid in cash.
	PaymentAmount *float32 `json:"PaymentAmount,omitempty" xml:"PaymentAmount,omitempty"`
	// The code of the service. The service code is the same as that displayed in User Center.
	PipCode *string `json:"PipCode,omitempty" xml:"PipCode,omitempty"`
	// The pretax amount.
	PretaxAmount *float32 `json:"PretaxAmount,omitempty" xml:"PretaxAmount,omitempty"`
	// The pretax gross amount.
	PretaxGrossAmount *float32 `json:"PretaxGrossAmount,omitempty" xml:"PretaxGrossAmount,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The details of the service.
	ProductDetail *string `json:"ProductDetail,omitempty" xml:"ProductDetail,omitempty"`
	// The name of the service.
	ProductName *string `json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The ID of the region.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The resource group.
	ResourceGroup *string `json:"ResourceGroup,omitempty" xml:"ResourceGroup,omitempty"`
	// The validity period.
	ServicePeriod *string `json:"ServicePeriod,omitempty" xml:"ServicePeriod,omitempty"`
	// The unit of the validity period.
	ServicePeriodUnit *string `json:"ServicePeriodUnit,omitempty" xml:"ServicePeriodUnit,omitempty"`
	// The ID of the account to which the split bill belongs.
	SplitAccountID *string `json:"SplitAccountID,omitempty" xml:"SplitAccountID,omitempty"`
	// The name of the account to which the split item belongs.
	SplitAccountName *string `json:"SplitAccountName,omitempty" xml:"SplitAccountName,omitempty"`
	// The month in which the split item is used.
	SplitBillingCycle *string `json:"SplitBillingCycle,omitempty" xml:"SplitBillingCycle,omitempty"`
	// The commodity code of the split item.
	SplitCommodityCode *string `json:"SplitCommodityCode,omitempty" xml:"SplitCommodityCode,omitempty"`
	// The ID of the split item.
	SplitItemID *string `json:"SplitItemID,omitempty" xml:"SplitItemID,omitempty"`
	// The name of the split item.
	SplitItemName *string `json:"SplitItemName,omitempty" xml:"SplitItemName,omitempty"`
	// The name of the service to which the split item belongs.
	SplitProductDetail *string `json:"SplitProductDetail,omitempty" xml:"SplitProductDetail,omitempty"`
	// The billing method. Valid values: Subscription: subscription PayAsYouGo: pay-as-you-go This parameter is returned together with the ProductCode parameter.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
	// The tag.
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The usage of the split item. This parameter is returned only if the isBillingItem parameter is set to true.
	Usage *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
	// The unit of usage. This parameter is returned only if the isBillingItem parameter is set to true.
	UsageUnit *string `json:"UsageUnit,omitempty" xml:"UsageUnit,omitempty"`
	// The ID of the zone.
	Zone *string `json:"Zone,omitempty" xml:"Zone,omitempty"`
}

func (s QuerySplitItemBillResponseBodyDataItemsItem) String() string {
	return tea.Prettify(s)
}

func (s QuerySplitItemBillResponseBodyDataItemsItem) GoString() string {
	return s.String()
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetAdjustAmount(v float32) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.AdjustAmount = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetBillingDate(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.BillingDate = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetBillingItem(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.BillingItem = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetBillingType(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.BillingType = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetCashAmount(v float32) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.CashAmount = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetCommodityCode(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.CommodityCode = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetCostUnit(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.CostUnit = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetCurrency(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.Currency = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetDeductedByCashCoupons(v float32) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.DeductedByCashCoupons = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetDeductedByCoupons(v float32) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.DeductedByCoupons = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetDeductedByPrepaidCard(v float32) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.DeductedByPrepaidCard = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetDeductedByResourcePackage(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.DeductedByResourcePackage = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetInstanceConfig(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.InstanceConfig = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetInstanceID(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.InstanceID = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetInstanceSpec(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.InstanceSpec = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetInternetIP(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.InternetIP = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetIntranetIP(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.IntranetIP = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetInvoiceDiscount(v float32) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.InvoiceDiscount = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetItem(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.Item = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetListPrice(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.ListPrice = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetListPriceUnit(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.ListPriceUnit = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetNickName(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.NickName = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetOutstandingAmount(v float32) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.OutstandingAmount = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetOwnerID(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.OwnerID = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetPaymentAmount(v float32) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.PaymentAmount = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetPipCode(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.PipCode = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetPretaxAmount(v float32) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.PretaxAmount = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetPretaxGrossAmount(v float32) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.PretaxGrossAmount = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetProductCode(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.ProductCode = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetProductDetail(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.ProductDetail = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetProductName(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.ProductName = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetProductType(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.ProductType = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetRegion(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.Region = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetResourceGroup(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.ResourceGroup = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetServicePeriod(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.ServicePeriod = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetServicePeriodUnit(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.ServicePeriodUnit = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetSplitAccountID(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.SplitAccountID = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetSplitAccountName(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.SplitAccountName = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetSplitBillingCycle(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.SplitBillingCycle = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetSplitCommodityCode(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.SplitCommodityCode = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetSplitItemID(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.SplitItemID = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetSplitItemName(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.SplitItemName = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetSplitProductDetail(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.SplitProductDetail = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetSubscriptionType(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.SubscriptionType = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetTag(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.Tag = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetUsage(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.Usage = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetUsageUnit(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.UsageUnit = &v
	return s
}

func (s *QuerySplitItemBillResponseBodyDataItemsItem) SetZone(v string) *QuerySplitItemBillResponseBodyDataItemsItem {
	s.Zone = &v
	return s
}

type QuerySplitItemBillResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySplitItemBillResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySplitItemBillResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySplitItemBillResponse) GoString() string {
	return s.String()
}

func (s *QuerySplitItemBillResponse) SetHeaders(v map[string]*string) *QuerySplitItemBillResponse {
	s.Headers = v
	return s
}

func (s *QuerySplitItemBillResponse) SetStatusCode(v int32) *QuerySplitItemBillResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySplitItemBillResponse) SetBody(v *QuerySplitItemBillResponseBody) *QuerySplitItemBillResponse {
	s.Body = v
	return s
}

type QueryUserOmsDataRequest struct {
	// The time type of the usage data. Set the parameter based on the description in the documentation of the specified service. Valid values:
	//
	// *   Raw
	// *   Hour
	// *   Day
	// *   Month
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// The end of the time range to query.
	//
	// Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The name of the record from which the usage data starts to return. The usage data records whose names are alphabetically after the value of the Marker parameter are returned. By default, the usage data starts to return from the earliest record.
	Marker  *string `json:"Marker,omitempty" xml:"Marker,omitempty"`
	OwnerId *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of entries to return on each page. Valid values: 1 to 200. Default value: 100.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query.
	//
	// Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The service whose usage data you want to query and the details of the usage data. The parameter value is usually set to the code of a service. Various usage models are provided for different services.
	Table *string `json:"Table,omitempty" xml:"Table,omitempty"`
}

func (s QueryUserOmsDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUserOmsDataRequest) GoString() string {
	return s.String()
}

func (s *QueryUserOmsDataRequest) SetDataType(v string) *QueryUserOmsDataRequest {
	s.DataType = &v
	return s
}

func (s *QueryUserOmsDataRequest) SetEndTime(v string) *QueryUserOmsDataRequest {
	s.EndTime = &v
	return s
}

func (s *QueryUserOmsDataRequest) SetMarker(v string) *QueryUserOmsDataRequest {
	s.Marker = &v
	return s
}

func (s *QueryUserOmsDataRequest) SetOwnerId(v int64) *QueryUserOmsDataRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryUserOmsDataRequest) SetPageSize(v int32) *QueryUserOmsDataRequest {
	s.PageSize = &v
	return s
}

func (s *QueryUserOmsDataRequest) SetStartTime(v string) *QueryUserOmsDataRequest {
	s.StartTime = &v
	return s
}

func (s *QueryUserOmsDataRequest) SetTable(v string) *QueryUserOmsDataRequest {
	s.Table = &v
	return s
}

type QueryUserOmsDataResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *QueryUserOmsDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryUserOmsDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryUserOmsDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryUserOmsDataResponseBody) SetCode(v string) *QueryUserOmsDataResponseBody {
	s.Code = &v
	return s
}

func (s *QueryUserOmsDataResponseBody) SetData(v *QueryUserOmsDataResponseBodyData) *QueryUserOmsDataResponseBody {
	s.Data = v
	return s
}

func (s *QueryUserOmsDataResponseBody) SetMessage(v string) *QueryUserOmsDataResponseBody {
	s.Message = &v
	return s
}

func (s *QueryUserOmsDataResponseBody) SetRequestId(v string) *QueryUserOmsDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryUserOmsDataResponseBody) SetSuccess(v bool) *QueryUserOmsDataResponseBody {
	s.Success = &v
	return s
}

type QueryUserOmsDataResponseBodyData struct {
	// The ID of the host.
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// Indicates that the returned usage data starts from the next page. If no value is returned for this parameter or this parameter is not returned, no data can be queried.
	Marker  *string                  `json:"Marker,omitempty" xml:"Marker,omitempty"`
	OmsData []map[string]interface{} `json:"OmsData,omitempty" xml:"OmsData,omitempty" type:"Repeated"`
}

func (s QueryUserOmsDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryUserOmsDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryUserOmsDataResponseBodyData) SetHostId(v string) *QueryUserOmsDataResponseBodyData {
	s.HostId = &v
	return s
}

func (s *QueryUserOmsDataResponseBodyData) SetMarker(v string) *QueryUserOmsDataResponseBodyData {
	s.Marker = &v
	return s
}

func (s *QueryUserOmsDataResponseBodyData) SetOmsData(v []map[string]interface{}) *QueryUserOmsDataResponseBodyData {
	s.OmsData = v
	return s
}

type QueryUserOmsDataResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryUserOmsDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryUserOmsDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUserOmsDataResponse) GoString() string {
	return s.String()
}

func (s *QueryUserOmsDataResponse) SetHeaders(v map[string]*string) *QueryUserOmsDataResponse {
	s.Headers = v
	return s
}

func (s *QueryUserOmsDataResponse) SetStatusCode(v int32) *QueryUserOmsDataResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryUserOmsDataResponse) SetBody(v *QueryUserOmsDataResponseBody) *QueryUserOmsDataResponse {
	s.Body = v
	return s
}

type RefundInstanceRequest struct {
	// This parameter is required for scenarios that need idempotence. The UUID that is used to ensure the idempotence of the request.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// This parameter is required for unsubscription scenarios. Valid values: 1 and 0. A value of 1 specifies that the instance is immediately released. A value of 0 specifies that the instance is shut down based on the shutdown policy. This parameter is supported only for specified services. Default value: 1.
	ImmediatelyRelease *string `json:"ImmediatelyRelease,omitempty" xml:"ImmediatelyRelease,omitempty"`
	// The ID of the instance. This parameter is required for unsubscription scenarios. Do not specify a custom name for this parameter.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The code of the service. This parameter is required for unsubscription scenarios.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service. This parameter is required for unsubscription scenarios. Unless otherwise specified, set this parameter to an empty string.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
}

func (s RefundInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RefundInstanceRequest) GoString() string {
	return s.String()
}

func (s *RefundInstanceRequest) SetClientToken(v string) *RefundInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RefundInstanceRequest) SetImmediatelyRelease(v string) *RefundInstanceRequest {
	s.ImmediatelyRelease = &v
	return s
}

func (s *RefundInstanceRequest) SetInstanceId(v string) *RefundInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RefundInstanceRequest) SetProductCode(v string) *RefundInstanceRequest {
	s.ProductCode = &v
	return s
}

func (s *RefundInstanceRequest) SetProductType(v string) *RefundInstanceRequest {
	s.ProductType = &v
	return s
}

type RefundInstanceResponseBody struct {
	// The HTTP status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *RefundInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The description of the execution result.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RefundInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefundInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RefundInstanceResponseBody) SetCode(v string) *RefundInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *RefundInstanceResponseBody) SetData(v *RefundInstanceResponseBodyData) *RefundInstanceResponseBody {
	s.Data = v
	return s
}

func (s *RefundInstanceResponseBody) SetMessage(v string) *RefundInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *RefundInstanceResponseBody) SetRequestId(v string) *RefundInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefundInstanceResponseBody) SetSuccess(v bool) *RefundInstanceResponseBody {
	s.Success = &v
	return s
}

type RefundInstanceResponseBodyData struct {
	// The site of the execution host.
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// The ID of the refund order that is returned only if the instance is unsubscribed from.
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s RefundInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RefundInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *RefundInstanceResponseBodyData) SetHostId(v string) *RefundInstanceResponseBodyData {
	s.HostId = &v
	return s
}

func (s *RefundInstanceResponseBodyData) SetOrderId(v int64) *RefundInstanceResponseBodyData {
	s.OrderId = &v
	return s
}

type RefundInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RefundInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RefundInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RefundInstanceResponse) GoString() string {
	return s.String()
}

func (s *RefundInstanceResponse) SetHeaders(v map[string]*string) *RefundInstanceResponse {
	s.Headers = v
	return s
}

func (s *RefundInstanceResponse) SetStatusCode(v int32) *RefundInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RefundInstanceResponse) SetBody(v *RefundInstanceResponseBody) *RefundInstanceResponse {
	s.Body = v
	return s
}

type ReleaseInstanceRequest struct {
	// The ID of the instance. Separate multiple IDs with commas (,). A maximum of 100 IDs can be specified.
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The region in which the instance resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The method that is used to renew the instance. Valid values:
	//
	// AutoRenewal: automatically renews the instance.
	//
	// ManualRenewal: manually renews the instance.
	//
	// NotRenewal: does not renew the instance.
	RenewStatus *string `json:"RenewStatus,omitempty" xml:"RenewStatus,omitempty"`
	// The billing method. Valid values:
	//
	// Subscription: the subscription billing method.
	//
	// PayAsYouGo: the pay-as-you-go billing method.
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s ReleaseInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceRequest) SetInstanceIds(v string) *ReleaseInstanceRequest {
	s.InstanceIds = &v
	return s
}

func (s *ReleaseInstanceRequest) SetOwnerId(v int64) *ReleaseInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseInstanceRequest) SetProductCode(v string) *ReleaseInstanceRequest {
	s.ProductCode = &v
	return s
}

func (s *ReleaseInstanceRequest) SetProductType(v string) *ReleaseInstanceRequest {
	s.ProductType = &v
	return s
}

func (s *ReleaseInstanceRequest) SetRegion(v string) *ReleaseInstanceRequest {
	s.Region = &v
	return s
}

func (s *ReleaseInstanceRequest) SetRenewStatus(v string) *ReleaseInstanceRequest {
	s.RenewStatus = &v
	return s
}

func (s *ReleaseInstanceRequest) SetSubscriptionType(v string) *ReleaseInstanceRequest {
	s.SubscriptionType = &v
	return s
}

type ReleaseInstanceResponseBody struct {
	// The HTTP status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// data
	Data *ReleaseInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The description of the execution result.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request, which can be used for troubleshooting.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// A value of true indicates that the execution is complete.
	//
	// A value of false indicates that an error occurs during the execution.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ReleaseInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceResponseBody) SetCode(v string) *ReleaseInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *ReleaseInstanceResponseBody) SetData(v *ReleaseInstanceResponseBodyData) *ReleaseInstanceResponseBody {
	s.Data = v
	return s
}

func (s *ReleaseInstanceResponseBody) SetMessage(v string) *ReleaseInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *ReleaseInstanceResponseBody) SetRequestId(v string) *ReleaseInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReleaseInstanceResponseBody) SetSuccess(v bool) *ReleaseInstanceResponseBody {
	s.Success = &v
	return s
}

type ReleaseInstanceResponseBodyData struct {
	// The site of the execution host.
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	// Indicates whether the instance is released.
	ReleaseResult *bool `json:"ReleaseResult,omitempty" xml:"ReleaseResult,omitempty"`
}

func (s ReleaseInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceResponseBodyData) SetHostId(v string) *ReleaseInstanceResponseBodyData {
	s.HostId = &v
	return s
}

func (s *ReleaseInstanceResponseBodyData) SetReleaseResult(v bool) *ReleaseInstanceResponseBodyData {
	s.ReleaseResult = &v
	return s
}

type ReleaseInstanceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceResponse) SetHeaders(v map[string]*string) *ReleaseInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleaseInstanceResponse) SetStatusCode(v int32) *ReleaseInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseInstanceResponse) SetBody(v *ReleaseInstanceResponseBody) *ReleaseInstanceResponse {
	s.Body = v
	return s
}

type RelieveAccountRelationRequest struct {
	// The ID of the Alibaba Cloud account that is used as the member. You must set the RelationId parameter or all of the ParentUserId, ChildUserId, and RelationType parameters.
	ChildUserId *int64 `json:"ChildUserId,omitempty" xml:"ChildUserId,omitempty"`
	// The ID of the Alibaba Cloud account that is used as the management account. You must set the RelationId parameter or all of the ParentUserId, ChildUserId, and RelationType parameters.
	ParentUserId *int64 `json:"ParentUserId,omitempty" xml:"ParentUserId,omitempty"`
	// The ID of the financial relationship between the management account and the member. You must set the RelationId parameter or all of the ParentUserId, ChildUserId, and RelationType parameters.
	RelationId *int64 `json:"RelationId,omitempty" xml:"RelationId,omitempty"`
	// The type of the financial relationship. Set the value to enterprise_group.
	RelationType *string `json:"RelationType,omitempty" xml:"RelationType,omitempty"`
	// The unique ID of the request. The ID is used to mark a request and troubleshoot a problem.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RelieveAccountRelationRequest) String() string {
	return tea.Prettify(s)
}

func (s RelieveAccountRelationRequest) GoString() string {
	return s.String()
}

func (s *RelieveAccountRelationRequest) SetChildUserId(v int64) *RelieveAccountRelationRequest {
	s.ChildUserId = &v
	return s
}

func (s *RelieveAccountRelationRequest) SetParentUserId(v int64) *RelieveAccountRelationRequest {
	s.ParentUserId = &v
	return s
}

func (s *RelieveAccountRelationRequest) SetRelationId(v int64) *RelieveAccountRelationRequest {
	s.RelationId = &v
	return s
}

func (s *RelieveAccountRelationRequest) SetRelationType(v string) *RelieveAccountRelationRequest {
	s.RelationType = &v
	return s
}

func (s *RelieveAccountRelationRequest) SetRequestId(v string) *RelieveAccountRelationRequest {
	s.RequestId = &v
	return s
}

type RelieveAccountRelationResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *RelieveAccountRelationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The unique ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RelieveAccountRelationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RelieveAccountRelationResponseBody) GoString() string {
	return s.String()
}

func (s *RelieveAccountRelationResponseBody) SetCode(v string) *RelieveAccountRelationResponseBody {
	s.Code = &v
	return s
}

func (s *RelieveAccountRelationResponseBody) SetData(v *RelieveAccountRelationResponseBodyData) *RelieveAccountRelationResponseBody {
	s.Data = v
	return s
}

func (s *RelieveAccountRelationResponseBody) SetMessage(v string) *RelieveAccountRelationResponseBody {
	s.Message = &v
	return s
}

func (s *RelieveAccountRelationResponseBody) SetRequestId(v string) *RelieveAccountRelationResponseBody {
	s.RequestId = &v
	return s
}

func (s *RelieveAccountRelationResponseBody) SetSuccess(v bool) *RelieveAccountRelationResponseBody {
	s.Success = &v
	return s
}

type RelieveAccountRelationResponseBodyData struct {
	// hostid
	HostId *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s RelieveAccountRelationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RelieveAccountRelationResponseBodyData) GoString() string {
	return s.String()
}

func (s *RelieveAccountRelationResponseBodyData) SetHostId(v string) *RelieveAccountRelationResponseBodyData {
	s.HostId = &v
	return s
}

type RelieveAccountRelationResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RelieveAccountRelationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RelieveAccountRelationResponse) String() string {
	return tea.Prettify(s)
}

func (s RelieveAccountRelationResponse) GoString() string {
	return s.String()
}

func (s *RelieveAccountRelationResponse) SetHeaders(v map[string]*string) *RelieveAccountRelationResponse {
	s.Headers = v
	return s
}

func (s *RelieveAccountRelationResponse) SetStatusCode(v int32) *RelieveAccountRelationResponse {
	s.StatusCode = &v
	return s
}

func (s *RelieveAccountRelationResponse) SetBody(v *RelieveAccountRelationResponseBody) *RelieveAccountRelationResponse {
	s.Body = v
	return s
}

type RenewChangeInstanceRequest struct {
	ClientToken *string                                `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	InstanceId  *string                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId     *int64                                 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Parameter   []*RenewChangeInstanceRequestParameter `json:"Parameter,omitempty" xml:"Parameter,omitempty" type:"Repeated"`
	ProductCode *string                                `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductType *string                                `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RenewPeriod *int64                                 `json:"RenewPeriod,omitempty" xml:"RenewPeriod,omitempty"`
}

func (s RenewChangeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewChangeInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewChangeInstanceRequest) SetClientToken(v string) *RenewChangeInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RenewChangeInstanceRequest) SetInstanceId(v string) *RenewChangeInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewChangeInstanceRequest) SetOwnerId(v int64) *RenewChangeInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RenewChangeInstanceRequest) SetParameter(v []*RenewChangeInstanceRequestParameter) *RenewChangeInstanceRequest {
	s.Parameter = v
	return s
}

func (s *RenewChangeInstanceRequest) SetProductCode(v string) *RenewChangeInstanceRequest {
	s.ProductCode = &v
	return s
}

func (s *RenewChangeInstanceRequest) SetProductType(v string) *RenewChangeInstanceRequest {
	s.ProductType = &v
	return s
}

func (s *RenewChangeInstanceRequest) SetRenewPeriod(v int64) *RenewChangeInstanceRequest {
	s.RenewPeriod = &v
	return s
}

type RenewChangeInstanceRequestParameter struct {
	Code  *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s RenewChangeInstanceRequestParameter) String() string {
	return tea.Prettify(s)
}

func (s RenewChangeInstanceRequestParameter) GoString() string {
	return s.String()
}

func (s *RenewChangeInstanceRequestParameter) SetCode(v string) *RenewChangeInstanceRequestParameter {
	s.Code = &v
	return s
}

func (s *RenewChangeInstanceRequestParameter) SetValue(v string) *RenewChangeInstanceRequestParameter {
	s.Value = &v
	return s
}

type RenewChangeInstanceResponseBody struct {
	Code    *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data    *RenewChangeInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RenewChangeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewChangeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewChangeInstanceResponseBody) SetCode(v string) *RenewChangeInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *RenewChangeInstanceResponseBody) SetData(v *RenewChangeInstanceResponseBodyData) *RenewChangeInstanceResponseBody {
	s.Data = v
	return s
}

func (s *RenewChangeInstanceResponseBody) SetMessage(v string) *RenewChangeInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *RenewChangeInstanceResponseBody) SetRequestId(v string) *RenewChangeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenewChangeInstanceResponseBody) SetSuccess(v bool) *RenewChangeInstanceResponseBody {
	s.Success = &v
	return s
}

type RenewChangeInstanceResponseBodyData struct {
	HostId  *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s RenewChangeInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RenewChangeInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *RenewChangeInstanceResponseBodyData) SetHostId(v string) *RenewChangeInstanceResponseBodyData {
	s.HostId = &v
	return s
}

func (s *RenewChangeInstanceResponseBodyData) SetOrderId(v string) *RenewChangeInstanceResponseBodyData {
	s.OrderId = &v
	return s
}

type RenewChangeInstanceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewChangeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewChangeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewChangeInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewChangeInstanceResponse) SetHeaders(v map[string]*string) *RenewChangeInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewChangeInstanceResponse) SetStatusCode(v int32) *RenewChangeInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewChangeInstanceResponse) SetBody(v *RenewChangeInstanceResponseBody) *RenewChangeInstanceResponse {
	s.Body = v
	return s
}

type RenewInstanceRequest struct {
	// The client token that is used to ensure the idempotence of the request.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the instance
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The code of the service to which the instance belongs.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The duration of the subscription renewal. Unit: months. Valid values:
	//
	// *   1 to 9
	// *   12
	// *   24
	// *   36
	RenewPeriod *int32 `json:"RenewPeriod,omitempty" xml:"RenewPeriod,omitempty"`
}

func (s RenewInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewInstanceRequest) SetClientToken(v string) *RenewInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RenewInstanceRequest) SetInstanceId(v string) *RenewInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewInstanceRequest) SetOwnerId(v int64) *RenewInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RenewInstanceRequest) SetProductCode(v string) *RenewInstanceRequest {
	s.ProductCode = &v
	return s
}

func (s *RenewInstanceRequest) SetProductType(v string) *RenewInstanceRequest {
	s.ProductType = &v
	return s
}

func (s *RenewInstanceRequest) SetRenewPeriod(v int32) *RenewInstanceRequest {
	s.RenewPeriod = &v
	return s
}

type RenewInstanceResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *RenewInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RenewInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponseBody) SetCode(v string) *RenewInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *RenewInstanceResponseBody) SetData(v *RenewInstanceResponseBodyData) *RenewInstanceResponseBody {
	s.Data = v
	return s
}

func (s *RenewInstanceResponseBody) SetMessage(v string) *RenewInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *RenewInstanceResponseBody) SetRequestId(v string) *RenewInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenewInstanceResponseBody) SetSuccess(v bool) *RenewInstanceResponseBody {
	s.Success = &v
	return s
}

type RenewInstanceResponseBodyData struct {
	// The ID of the order.
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s RenewInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponseBodyData) SetOrderId(v string) *RenewInstanceResponseBodyData {
	s.OrderId = &v
	return s
}

type RenewInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponse) SetHeaders(v map[string]*string) *RenewInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewInstanceResponse) SetStatusCode(v int32) *RenewInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewInstanceResponse) SetBody(v *RenewInstanceResponseBody) *RenewInstanceResponse {
	s.Body = v
	return s
}

type RenewResourcePackageRequest struct {
	// The renewal period of the resource plan.
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The time when the resource plan takes effect. If you leave this parameter empty, the resource plan immediately takes effect by default.
	//
	// Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EffectiveDate *string `json:"EffectiveDate,omitempty" xml:"EffectiveDate,omitempty"`
	// The ID of the resource plan.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The unit of the validity period for the resource plan. Valid values:
	//
	// *   Month
	// *   Year
	//
	// Default value: Month.
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
}

func (s RenewResourcePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewResourcePackageRequest) GoString() string {
	return s.String()
}

func (s *RenewResourcePackageRequest) SetDuration(v int32) *RenewResourcePackageRequest {
	s.Duration = &v
	return s
}

func (s *RenewResourcePackageRequest) SetEffectiveDate(v string) *RenewResourcePackageRequest {
	s.EffectiveDate = &v
	return s
}

func (s *RenewResourcePackageRequest) SetInstanceId(v string) *RenewResourcePackageRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewResourcePackageRequest) SetOwnerId(v int64) *RenewResourcePackageRequest {
	s.OwnerId = &v
	return s
}

func (s *RenewResourcePackageRequest) SetPricingCycle(v string) *RenewResourcePackageRequest {
	s.PricingCycle = &v
	return s
}

type RenewResourcePackageResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *RenewResourcePackageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the order.
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RenewResourcePackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewResourcePackageResponseBody) GoString() string {
	return s.String()
}

func (s *RenewResourcePackageResponseBody) SetCode(v string) *RenewResourcePackageResponseBody {
	s.Code = &v
	return s
}

func (s *RenewResourcePackageResponseBody) SetData(v *RenewResourcePackageResponseBodyData) *RenewResourcePackageResponseBody {
	s.Data = v
	return s
}

func (s *RenewResourcePackageResponseBody) SetMessage(v string) *RenewResourcePackageResponseBody {
	s.Message = &v
	return s
}

func (s *RenewResourcePackageResponseBody) SetOrderId(v int64) *RenewResourcePackageResponseBody {
	s.OrderId = &v
	return s
}

func (s *RenewResourcePackageResponseBody) SetRequestId(v string) *RenewResourcePackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenewResourcePackageResponseBody) SetSuccess(v bool) *RenewResourcePackageResponseBody {
	s.Success = &v
	return s
}

type RenewResourcePackageResponseBodyData struct {
	// The ID of the resource plan.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the order.
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s RenewResourcePackageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RenewResourcePackageResponseBodyData) GoString() string {
	return s.String()
}

func (s *RenewResourcePackageResponseBodyData) SetInstanceId(v string) *RenewResourcePackageResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *RenewResourcePackageResponseBodyData) SetOrderId(v int64) *RenewResourcePackageResponseBodyData {
	s.OrderId = &v
	return s
}

type RenewResourcePackageResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewResourcePackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewResourcePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewResourcePackageResponse) GoString() string {
	return s.String()
}

func (s *RenewResourcePackageResponse) SetHeaders(v map[string]*string) *RenewResourcePackageResponse {
	s.Headers = v
	return s
}

func (s *RenewResourcePackageResponse) SetStatusCode(v int32) *RenewResourcePackageResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewResourcePackageResponse) SetBody(v *RenewResourcePackageResponseBody) *RenewResourcePackageResponse {
	s.Body = v
	return s
}

type SetAllExpirationDayRequest struct {
	OwnerId *int64 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The expiration date. You can set an expiration date only for ECS instances that have not expired. The expiration date that you specify do not take effect on expired ECS instances. After the expiration date is set, the expiration date is used when you renew ECS instances.
	//
	// You can set the expiration date to a day from the 1st to the 28th of each month.
	UnifyExpireDay *string `json:"UnifyExpireDay,omitempty" xml:"UnifyExpireDay,omitempty"`
}

func (s SetAllExpirationDayRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAllExpirationDayRequest) GoString() string {
	return s.String()
}

func (s *SetAllExpirationDayRequest) SetOwnerId(v int64) *SetAllExpirationDayRequest {
	s.OwnerId = &v
	return s
}

func (s *SetAllExpirationDayRequest) SetUnifyExpireDay(v string) *SetAllExpirationDayRequest {
	s.UnifyExpireDay = &v
	return s
}

type SetAllExpirationDayResponseBody struct {
	// The HTTP status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The message that is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetAllExpirationDayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetAllExpirationDayResponseBody) GoString() string {
	return s.String()
}

func (s *SetAllExpirationDayResponseBody) SetCode(v string) *SetAllExpirationDayResponseBody {
	s.Code = &v
	return s
}

func (s *SetAllExpirationDayResponseBody) SetMessage(v string) *SetAllExpirationDayResponseBody {
	s.Message = &v
	return s
}

func (s *SetAllExpirationDayResponseBody) SetRequestId(v string) *SetAllExpirationDayResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetAllExpirationDayResponseBody) SetSuccess(v bool) *SetAllExpirationDayResponseBody {
	s.Success = &v
	return s
}

type SetAllExpirationDayResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetAllExpirationDayResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetAllExpirationDayResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAllExpirationDayResponse) GoString() string {
	return s.String()
}

func (s *SetAllExpirationDayResponse) SetHeaders(v map[string]*string) *SetAllExpirationDayResponse {
	s.Headers = v
	return s
}

func (s *SetAllExpirationDayResponse) SetStatusCode(v int32) *SetAllExpirationDayResponse {
	s.StatusCode = &v
	return s
}

func (s *SetAllExpirationDayResponse) SetBody(v *SetAllExpirationDayResponseBody) *SetAllExpirationDayResponse {
	s.Body = v
	return s
}

type SetRenewalRequest struct {
	// The ID of the instance. You can enable auto-renewal for up to 100 subscription instances at a time. Separate multiple instance IDs with commas (,).
	InstanceIDs *string `json:"InstanceIDs,omitempty" xml:"InstanceIDs,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The code of the service.
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// The type of the service.
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	// The auto-renewal period. Valid values:
	//
	// *   1
	// *   2
	// *   3
	// *   6
	// *   12
	//
	// >  This parameter is required if the RenewalStatus parameter is set to AutoRenewal.
	RenewalPeriod *int32 `json:"RenewalPeriod,omitempty" xml:"RenewalPeriod,omitempty"`
	// The unit of the auto-renewal period. Valid values:
	//
	// *   M: months
	// *   Y: years
	//
	// >  This parameter is required if the RenewalStatus parameter is set to AutoRenewal.
	RenewalPeriodUnit *string `json:"RenewalPeriodUnit,omitempty" xml:"RenewalPeriodUnit,omitempty"`
	// The status of renewal. Valid values:
	//
	// *   AutoRenewal: The instance is automatically renewed.
	// *   ManualRenewal: The instance is manually renewed.
	// *   NotRenewal: The instance is not renewed.
	RenewalStatus *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
	// The billing method. Valid values:
	//
	// *   Subscription: subscription
	// *   PayAsYouGo: pay-as-you-go
	SubscriptionType *string `json:"SubscriptionType,omitempty" xml:"SubscriptionType,omitempty"`
}

func (s SetRenewalRequest) String() string {
	return tea.Prettify(s)
}

func (s SetRenewalRequest) GoString() string {
	return s.String()
}

func (s *SetRenewalRequest) SetInstanceIDs(v string) *SetRenewalRequest {
	s.InstanceIDs = &v
	return s
}

func (s *SetRenewalRequest) SetOwnerId(v int64) *SetRenewalRequest {
	s.OwnerId = &v
	return s
}

func (s *SetRenewalRequest) SetProductCode(v string) *SetRenewalRequest {
	s.ProductCode = &v
	return s
}

func (s *SetRenewalRequest) SetProductType(v string) *SetRenewalRequest {
	s.ProductType = &v
	return s
}

func (s *SetRenewalRequest) SetRenewalPeriod(v int32) *SetRenewalRequest {
	s.RenewalPeriod = &v
	return s
}

func (s *SetRenewalRequest) SetRenewalPeriodUnit(v string) *SetRenewalRequest {
	s.RenewalPeriodUnit = &v
	return s
}

func (s *SetRenewalRequest) SetRenewalStatus(v string) *SetRenewalRequest {
	s.RenewalStatus = &v
	return s
}

func (s *SetRenewalRequest) SetSubscriptionType(v string) *SetRenewalRequest {
	s.SubscriptionType = &v
	return s
}

type SetRenewalResponseBody struct {
	// The status code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetRenewalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetRenewalResponseBody) GoString() string {
	return s.String()
}

func (s *SetRenewalResponseBody) SetCode(v string) *SetRenewalResponseBody {
	s.Code = &v
	return s
}

func (s *SetRenewalResponseBody) SetMessage(v string) *SetRenewalResponseBody {
	s.Message = &v
	return s
}

func (s *SetRenewalResponseBody) SetRequestId(v string) *SetRenewalResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetRenewalResponseBody) SetSuccess(v bool) *SetRenewalResponseBody {
	s.Success = &v
	return s
}

type SetRenewalResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetRenewalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetRenewalResponse) String() string {
	return tea.Prettify(s)
}

func (s SetRenewalResponse) GoString() string {
	return s.String()
}

func (s *SetRenewalResponse) SetHeaders(v map[string]*string) *SetRenewalResponse {
	s.Headers = v
	return s
}

func (s *SetRenewalResponse) SetStatusCode(v int32) *SetRenewalResponse {
	s.StatusCode = &v
	return s
}

func (s *SetRenewalResponse) SetBody(v *SetRenewalResponseBody) *SetRenewalResponse {
	s.Body = v
	return s
}

type SetResellerUserAlarmThresholdRequest struct {
	AlarmThresholds *string `json:"AlarmThresholds,omitempty" xml:"AlarmThresholds,omitempty"`
	AlarmType       *string `json:"AlarmType,omitempty" xml:"AlarmType,omitempty"`
	OwnerId         *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s SetResellerUserAlarmThresholdRequest) String() string {
	return tea.Prettify(s)
}

func (s SetResellerUserAlarmThresholdRequest) GoString() string {
	return s.String()
}

func (s *SetResellerUserAlarmThresholdRequest) SetAlarmThresholds(v string) *SetResellerUserAlarmThresholdRequest {
	s.AlarmThresholds = &v
	return s
}

func (s *SetResellerUserAlarmThresholdRequest) SetAlarmType(v string) *SetResellerUserAlarmThresholdRequest {
	s.AlarmType = &v
	return s
}

func (s *SetResellerUserAlarmThresholdRequest) SetOwnerId(v int64) *SetResellerUserAlarmThresholdRequest {
	s.OwnerId = &v
	return s
}

type SetResellerUserAlarmThresholdResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetResellerUserAlarmThresholdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetResellerUserAlarmThresholdResponseBody) GoString() string {
	return s.String()
}

func (s *SetResellerUserAlarmThresholdResponseBody) SetCode(v string) *SetResellerUserAlarmThresholdResponseBody {
	s.Code = &v
	return s
}

func (s *SetResellerUserAlarmThresholdResponseBody) SetData(v bool) *SetResellerUserAlarmThresholdResponseBody {
	s.Data = &v
	return s
}

func (s *SetResellerUserAlarmThresholdResponseBody) SetMessage(v string) *SetResellerUserAlarmThresholdResponseBody {
	s.Message = &v
	return s
}

func (s *SetResellerUserAlarmThresholdResponseBody) SetRequestId(v string) *SetResellerUserAlarmThresholdResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetResellerUserAlarmThresholdResponseBody) SetSuccess(v bool) *SetResellerUserAlarmThresholdResponseBody {
	s.Success = &v
	return s
}

type SetResellerUserAlarmThresholdResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetResellerUserAlarmThresholdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetResellerUserAlarmThresholdResponse) String() string {
	return tea.Prettify(s)
}

func (s SetResellerUserAlarmThresholdResponse) GoString() string {
	return s.String()
}

func (s *SetResellerUserAlarmThresholdResponse) SetHeaders(v map[string]*string) *SetResellerUserAlarmThresholdResponse {
	s.Headers = v
	return s
}

func (s *SetResellerUserAlarmThresholdResponse) SetStatusCode(v int32) *SetResellerUserAlarmThresholdResponse {
	s.StatusCode = &v
	return s
}

func (s *SetResellerUserAlarmThresholdResponse) SetBody(v *SetResellerUserAlarmThresholdResponseBody) *SetResellerUserAlarmThresholdResponse {
	s.Body = v
	return s
}

type SetResellerUserQuotaRequest struct {
	// The quota of a quota ledger. Unit: CNY.
	Amount *string `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// You do not need to set the parameter.
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The ID of the business.
	OutBizId *string `json:"OutBizId,omitempty" xml:"OutBizId,omitempty"`
	OwnerId  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s SetResellerUserQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s SetResellerUserQuotaRequest) GoString() string {
	return s.String()
}

func (s *SetResellerUserQuotaRequest) SetAmount(v string) *SetResellerUserQuotaRequest {
	s.Amount = &v
	return s
}

func (s *SetResellerUserQuotaRequest) SetCurrency(v string) *SetResellerUserQuotaRequest {
	s.Currency = &v
	return s
}

func (s *SetResellerUserQuotaRequest) SetOutBizId(v string) *SetResellerUserQuotaRequest {
	s.OutBizId = &v
	return s
}

func (s *SetResellerUserQuotaRequest) SetOwnerId(v int64) *SetResellerUserQuotaRequest {
	s.OwnerId = &v
	return s
}

type SetResellerUserQuotaResponseBody struct {
	// The error code returned if the call failed. For more information, see the "Error codes" section of this topic.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the request is successful.
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. A value of true indicates that the call is successful. A value of false indicates that the call failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetResellerUserQuotaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetResellerUserQuotaResponseBody) GoString() string {
	return s.String()
}

func (s *SetResellerUserQuotaResponseBody) SetCode(v string) *SetResellerUserQuotaResponseBody {
	s.Code = &v
	return s
}

func (s *SetResellerUserQuotaResponseBody) SetData(v bool) *SetResellerUserQuotaResponseBody {
	s.Data = &v
	return s
}

func (s *SetResellerUserQuotaResponseBody) SetMessage(v string) *SetResellerUserQuotaResponseBody {
	s.Message = &v
	return s
}

func (s *SetResellerUserQuotaResponseBody) SetRequestId(v string) *SetResellerUserQuotaResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetResellerUserQuotaResponseBody) SetSuccess(v bool) *SetResellerUserQuotaResponseBody {
	s.Success = &v
	return s
}

type SetResellerUserQuotaResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetResellerUserQuotaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetResellerUserQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s SetResellerUserQuotaResponse) GoString() string {
	return s.String()
}

func (s *SetResellerUserQuotaResponse) SetHeaders(v map[string]*string) *SetResellerUserQuotaResponse {
	s.Headers = v
	return s
}

func (s *SetResellerUserQuotaResponse) SetStatusCode(v int32) *SetResellerUserQuotaResponse {
	s.StatusCode = &v
	return s
}

func (s *SetResellerUserQuotaResponse) SetBody(v *SetResellerUserQuotaResponseBody) *SetResellerUserQuotaResponse {
	s.Body = v
	return s
}

type SetResellerUserStatusRequest struct {
	// The type of the business. Valid values: FREEZE: the frozen business of the account. TRUSTEESHIP: the hosted business of the account.
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	OwnerId      *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The account status that you want to set. Valid values: Freeze: The account is frozen. Thaw: The account is unfrozen. Trusteeship: The account is hosted. TrusteeshipCancel: The account is not hosted.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 停机模式
	// 取值：
	//     0：普通停机
	//     1：立即停机
	StopMode *string `json:"StopMode,omitempty" xml:"StopMode,omitempty"`
}

func (s SetResellerUserStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetResellerUserStatusRequest) GoString() string {
	return s.String()
}

func (s *SetResellerUserStatusRequest) SetBusinessType(v string) *SetResellerUserStatusRequest {
	s.BusinessType = &v
	return s
}

func (s *SetResellerUserStatusRequest) SetOwnerId(v string) *SetResellerUserStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *SetResellerUserStatusRequest) SetStatus(v string) *SetResellerUserStatusRequest {
	s.Status = &v
	return s
}

func (s *SetResellerUserStatusRequest) SetStopMode(v string) *SetResellerUserStatusRequest {
	s.StopMode = &v
	return s
}

type SetResellerUserStatusResponseBody struct {
	// The error code returned if the call failed. For more information, see the "Error codes" section of this topic.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the request is successful.
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. A value of true indicates that the call is successful. A value of false indicates that the call failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetResellerUserStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetResellerUserStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetResellerUserStatusResponseBody) SetCode(v string) *SetResellerUserStatusResponseBody {
	s.Code = &v
	return s
}

func (s *SetResellerUserStatusResponseBody) SetData(v bool) *SetResellerUserStatusResponseBody {
	s.Data = &v
	return s
}

func (s *SetResellerUserStatusResponseBody) SetMessage(v string) *SetResellerUserStatusResponseBody {
	s.Message = &v
	return s
}

func (s *SetResellerUserStatusResponseBody) SetRequestId(v string) *SetResellerUserStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetResellerUserStatusResponseBody) SetSuccess(v bool) *SetResellerUserStatusResponseBody {
	s.Success = &v
	return s
}

type SetResellerUserStatusResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetResellerUserStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetResellerUserStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetResellerUserStatusResponse) GoString() string {
	return s.String()
}

func (s *SetResellerUserStatusResponse) SetHeaders(v map[string]*string) *SetResellerUserStatusResponse {
	s.Headers = v
	return s
}

func (s *SetResellerUserStatusResponse) SetStatusCode(v int32) *SetResellerUserStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetResellerUserStatusResponse) SetBody(v *SetResellerUserStatusResponseBody) *SetResellerUserStatusResponse {
	s.Body = v
	return s
}

type SubscribeBillToOSSRequest struct {
	// The initial billing cycle from which bills start to be pushed. After you subscribe to the bills, the system automatically pushes the data that is generated from the initial billing cycle to the current time. If the SubscribeType parameter is set to MonthBill, this parameter is invalid. Historical data is not pushed again. The data generated within the last year can be pushed.
	BeginBillingCycle *string `json:"BeginBillingCycle,omitempty" xml:"BeginBillingCycle,omitempty"`
	// The owner ID of the OSS bucket that stores the bills. This parameter is required if you are a bidder or reseller and want to push data to an OSS bucket of a member account. In this case, you must specify this account as the account used to call this operation and grant the AliyunConsumeDump2OSSRole permission to this account. If you are a regular user, you do not need to set this parameter. By default, your account is used to call this operation.
	BucketOwnerId *int64 `json:"BucketOwnerId,omitempty" xml:"BucketOwnerId,omitempty"`
	// The path of the OSS bucket.
	BucketPath *string `json:"BucketPath,omitempty" xml:"BucketPath,omitempty"`
	// The type of the account whose bills are to be pushed if multi-tier accounts are involved. Valid values:
	//
	// *   MA: the master account and a non-managed member account in Finance Cloud
	// *   ACP1: a member account of a virtual network operator (VNO)
	//
	// Default value: MA.
	MultAccountRelSubscribe *string `json:"MultAccountRelSubscribe,omitempty" xml:"MultAccountRelSubscribe,omitempty"`
	RowLimitPerFile         *int32  `json:"RowLimitPerFile,omitempty" xml:"RowLimitPerFile,omitempty"`
	// The OSS bucket that stores the bills to which you want to subscribe.
	SubscribeBucket *string `json:"SubscribeBucket,omitempty" xml:"SubscribeBucket,omitempty"`
	// The type of the bill to which you want to subscribe. Valid values:
	//
	// *   BillingItemDetailForBillingPeriod: detailed bills of billable items
	// *   InstanceDetailForBillingPeriod: detailed bills of instances
	// *   BillingItemDetailMonthly: billable item-based bills summarized by billing cycle
	// *   InstanceDetailMonthly: instance-based bills summarized by billing cycle
	// *   SplitItemDetailDaily: split bills summarized by day
	// *   MonthBill: monthly bills in the PDF format. You can subscribe to the monthly PDF bills only of the master account.
	SubscribeType *string `json:"SubscribeType,omitempty" xml:"SubscribeType,omitempty"`
}

func (s SubscribeBillToOSSRequest) String() string {
	return tea.Prettify(s)
}

func (s SubscribeBillToOSSRequest) GoString() string {
	return s.String()
}

func (s *SubscribeBillToOSSRequest) SetBeginBillingCycle(v string) *SubscribeBillToOSSRequest {
	s.BeginBillingCycle = &v
	return s
}

func (s *SubscribeBillToOSSRequest) SetBucketOwnerId(v int64) *SubscribeBillToOSSRequest {
	s.BucketOwnerId = &v
	return s
}

func (s *SubscribeBillToOSSRequest) SetBucketPath(v string) *SubscribeBillToOSSRequest {
	s.BucketPath = &v
	return s
}

func (s *SubscribeBillToOSSRequest) SetMultAccountRelSubscribe(v string) *SubscribeBillToOSSRequest {
	s.MultAccountRelSubscribe = &v
	return s
}

func (s *SubscribeBillToOSSRequest) SetRowLimitPerFile(v int32) *SubscribeBillToOSSRequest {
	s.RowLimitPerFile = &v
	return s
}

func (s *SubscribeBillToOSSRequest) SetSubscribeBucket(v string) *SubscribeBillToOSSRequest {
	s.SubscribeBucket = &v
	return s
}

func (s *SubscribeBillToOSSRequest) SetSubscribeType(v string) *SubscribeBillToOSSRequest {
	s.SubscribeType = &v
	return s
}

type SubscribeBillToOSSResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubscribeBillToOSSResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubscribeBillToOSSResponseBody) GoString() string {
	return s.String()
}

func (s *SubscribeBillToOSSResponseBody) SetCode(v string) *SubscribeBillToOSSResponseBody {
	s.Code = &v
	return s
}

func (s *SubscribeBillToOSSResponseBody) SetMessage(v string) *SubscribeBillToOSSResponseBody {
	s.Message = &v
	return s
}

func (s *SubscribeBillToOSSResponseBody) SetRequestId(v string) *SubscribeBillToOSSResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubscribeBillToOSSResponseBody) SetSuccess(v bool) *SubscribeBillToOSSResponseBody {
	s.Success = &v
	return s
}

type SubscribeBillToOSSResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubscribeBillToOSSResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubscribeBillToOSSResponse) String() string {
	return tea.Prettify(s)
}

func (s SubscribeBillToOSSResponse) GoString() string {
	return s.String()
}

func (s *SubscribeBillToOSSResponse) SetHeaders(v map[string]*string) *SubscribeBillToOSSResponse {
	s.Headers = v
	return s
}

func (s *SubscribeBillToOSSResponse) SetStatusCode(v int32) *SubscribeBillToOSSResponse {
	s.StatusCode = &v
	return s
}

func (s *SubscribeBillToOSSResponse) SetBody(v *SubscribeBillToOSSResponseBody) *SubscribeBillToOSSResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	// The IDs of resources.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource. Specify savings plan instance as the type of the resource.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags.
	Tag []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	// The key of the tag. You can create N tag keys at a time. Valid values of N: 1 to 20. The value of this parameter can be an empty string.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag N. Valid values of N: 1 to 20.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetCode(v string) *TagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *TagResourcesResponseBody) SetData(v bool) *TagResourcesResponseBody {
	s.Data = &v
	return s
}

func (s *TagResourcesResponseBody) SetMessage(v string) *TagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *TagResourcesResponseBody) SetSuccess(v bool) *TagResourcesResponseBody {
	s.Success = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type UnsubscribeBillToOSSRequest struct {
	// The type of accounts whose bills are to be pushed if multi-tier accounts are involved. Valid values:
	//
	// *   MA: management account.
	// *   ACP1: member account of a virtual network operator (VNO).
	//
	// Default value: MA.
	MultAccountRelSubscribe *string `json:"MultAccountRelSubscribe,omitempty" xml:"MultAccountRelSubscribe,omitempty"`
	// The type of the bill to which you want to subscribe. Valid values:
	//
	// *   BillingItemDetailForBillingPeriod: bills of billable items
	// *   InstanceDetailForBillingPeriod: bills of instances
	// *   BillingItemDetailMonthly: billable item-based bills summarized by billing cycle
	// *   InstanceDetailMonthly: instance-based bills summarized by billing cycle
	// *   SplitItemDetailDaily: split bills summarized by day
	// *   MonthBill: monthly bills in the PDF format You can subscribe to the monthly PDF bills only of the master account.
	SubscribeType *string `json:"SubscribeType,omitempty" xml:"SubscribeType,omitempty"`
}

func (s UnsubscribeBillToOSSRequest) String() string {
	return tea.Prettify(s)
}

func (s UnsubscribeBillToOSSRequest) GoString() string {
	return s.String()
}

func (s *UnsubscribeBillToOSSRequest) SetMultAccountRelSubscribe(v string) *UnsubscribeBillToOSSRequest {
	s.MultAccountRelSubscribe = &v
	return s
}

func (s *UnsubscribeBillToOSSRequest) SetSubscribeType(v string) *UnsubscribeBillToOSSRequest {
	s.SubscribeType = &v
	return s
}

type UnsubscribeBillToOSSResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UnsubscribeBillToOSSResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnsubscribeBillToOSSResponseBody) GoString() string {
	return s.String()
}

func (s *UnsubscribeBillToOSSResponseBody) SetCode(v string) *UnsubscribeBillToOSSResponseBody {
	s.Code = &v
	return s
}

func (s *UnsubscribeBillToOSSResponseBody) SetMessage(v string) *UnsubscribeBillToOSSResponseBody {
	s.Message = &v
	return s
}

func (s *UnsubscribeBillToOSSResponseBody) SetRequestId(v string) *UnsubscribeBillToOSSResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnsubscribeBillToOSSResponseBody) SetSuccess(v bool) *UnsubscribeBillToOSSResponseBody {
	s.Success = &v
	return s
}

type UnsubscribeBillToOSSResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnsubscribeBillToOSSResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnsubscribeBillToOSSResponse) String() string {
	return tea.Prettify(s)
}

func (s UnsubscribeBillToOSSResponse) GoString() string {
	return s.String()
}

func (s *UnsubscribeBillToOSSResponse) SetHeaders(v map[string]*string) *UnsubscribeBillToOSSResponse {
	s.Headers = v
	return s
}

func (s *UnsubscribeBillToOSSResponse) SetStatusCode(v int32) *UnsubscribeBillToOSSResponse {
	s.StatusCode = &v
	return s
}

func (s *UnsubscribeBillToOSSResponse) SetBody(v *UnsubscribeBillToOSSResponseBody) *UnsubscribeBillToOSSResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	// Specifies whether to remove all tags. This parameter is valid only if the TagKey.n parameter is not set. Valid values: true and false.
	All *bool `json:"All,omitempty" xml:"All,omitempty"`
	// The IDs of resources.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource. Specify the savings plan instance as the type of the resource.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag keys.
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetCode(v string) *UntagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *UntagResourcesResponseBody) SetData(v bool) *UntagResourcesResponseBody {
	s.Data = &v
	return s
}

func (s *UntagResourcesResponseBody) SetMessage(v string) *UntagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UntagResourcesResponseBody) SetSuccess(v bool) *UntagResourcesResponseBody {
	s.Success = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpgradeResourcePackageRequest struct {
	// The time when the resource plan takes effect. If you leave this parameter empty, the resource plan immediately takes effect by default.
	//
	// Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	EffectiveDate *string `json:"EffectiveDate,omitempty" xml:"EffectiveDate,omitempty"`
	// The ID of the resource plan.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The specifications to which you want to upgrade the resource plan.
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
}

func (s UpgradeResourcePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeResourcePackageRequest) GoString() string {
	return s.String()
}

func (s *UpgradeResourcePackageRequest) SetEffectiveDate(v string) *UpgradeResourcePackageRequest {
	s.EffectiveDate = &v
	return s
}

func (s *UpgradeResourcePackageRequest) SetInstanceId(v string) *UpgradeResourcePackageRequest {
	s.InstanceId = &v
	return s
}

func (s *UpgradeResourcePackageRequest) SetOwnerId(v int64) *UpgradeResourcePackageRequest {
	s.OwnerId = &v
	return s
}

func (s *UpgradeResourcePackageRequest) SetSpecification(v string) *UpgradeResourcePackageRequest {
	s.Specification = &v
	return s
}

type UpgradeResourcePackageResponseBody struct {
	// The status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *UpgradeResourcePackageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the order.
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpgradeResourcePackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeResourcePackageResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeResourcePackageResponseBody) SetCode(v string) *UpgradeResourcePackageResponseBody {
	s.Code = &v
	return s
}

func (s *UpgradeResourcePackageResponseBody) SetData(v *UpgradeResourcePackageResponseBodyData) *UpgradeResourcePackageResponseBody {
	s.Data = v
	return s
}

func (s *UpgradeResourcePackageResponseBody) SetMessage(v string) *UpgradeResourcePackageResponseBody {
	s.Message = &v
	return s
}

func (s *UpgradeResourcePackageResponseBody) SetOrderId(v int64) *UpgradeResourcePackageResponseBody {
	s.OrderId = &v
	return s
}

func (s *UpgradeResourcePackageResponseBody) SetRequestId(v string) *UpgradeResourcePackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeResourcePackageResponseBody) SetSuccess(v bool) *UpgradeResourcePackageResponseBody {
	s.Success = &v
	return s
}

type UpgradeResourcePackageResponseBodyData struct {
	// The ID of the resource plan.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the order.
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s UpgradeResourcePackageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpgradeResourcePackageResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpgradeResourcePackageResponseBodyData) SetInstanceId(v string) *UpgradeResourcePackageResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *UpgradeResourcePackageResponseBodyData) SetOrderId(v int64) *UpgradeResourcePackageResponseBodyData {
	s.OrderId = &v
	return s
}

type UpgradeResourcePackageResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeResourcePackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeResourcePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeResourcePackageResponse) GoString() string {
	return s.String()
}

func (s *UpgradeResourcePackageResponse) SetHeaders(v map[string]*string) *UpgradeResourcePackageResponse {
	s.Headers = v
	return s
}

func (s *UpgradeResourcePackageResponse) SetStatusCode(v int32) *UpgradeResourcePackageResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeResourcePackageResponse) SetBody(v *UpgradeResourcePackageResponseBody) *UpgradeResourcePackageResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-hangzhou":                 tea.String("business.aliyuncs.com"),
		"cn-shanghai":                 tea.String("business.aliyuncs.com"),
		"ap-southeast-1":              tea.String("business.ap-southeast-1.aliyuncs.com"),
		"ap-northeast-1":              tea.String("business.ap-southeast-1.aliyuncs.com"),
		"ap-northeast-2":              tea.String("business.ap-southeast-1.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("business.ap-southeast-1.aliyuncs.com"),
		"ap-south-1":                  tea.String("business.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-2":              tea.String("business.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-3":              tea.String("business.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-5":              tea.String("business.ap-southeast-1.aliyuncs.com"),
		"cn-beijing":                  tea.String("business.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("business.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("business.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("business.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("business.aliyuncs.com"),
		"cn-chengdu":                  tea.String("business.aliyuncs.com"),
		"cn-edge-1":                   tea.String("business.aliyuncs.com"),
		"cn-fujian":                   tea.String("business.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("business.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("business.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("business.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("business.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("business.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("business.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("business.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("business.aliyuncs.com"),
		"cn-hongkong":                 tea.String("business.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("business.aliyuncs.com"),
		"cn-huhehaote":                tea.String("business.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("business.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("business.aliyuncs.com"),
		"cn-qingdao":                  tea.String("business.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("business.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("business.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("business.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("business.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("business.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("business.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("business.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("business.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("business.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("business.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("business.aliyuncs.com"),
		"cn-wuhan":                    tea.String("business.aliyuncs.com"),
		"cn-wulanchabu":               tea.String("business.aliyuncs.com"),
		"cn-yushanfang":               tea.String("business.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("business.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("business.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("business.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("business.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("business.aliyuncs.com"),
		"eu-central-1":                tea.String("business.ap-southeast-1.aliyuncs.com"),
		"eu-west-1":                   tea.String("business.ap-southeast-1.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("business.ap-southeast-1.aliyuncs.com"),
		"me-east-1":                   tea.String("business.ap-southeast-1.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("business.ap-southeast-1.aliyuncs.com"),
		"us-east-1":                   tea.String("business.ap-southeast-1.aliyuncs.com"),
		"us-west-1":                   tea.String("business.ap-southeast-1.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("bssopenapi"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * 1\\. For more information about a financial relationship, see [Financial relationships](https://help.aliyun.com/document_detail/100376.html?spm=a2c4g.11186623.6.563.52a83908ypl4yE) or [Financial relationships](https://www.alibabacloud.com/help/en/doc-detail/116383.html). 2. If enterprise names used by the management account and a member for real-name verification are the same, you do not need to call an API operation for confirmation. Otherwise, you must call the ConfirmRelation operation for confirmation.
 *
 * @param request AddAccountRelationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddAccountRelationResponse
 */
func (client *Client) AddAccountRelationWithOptions(request *AddAccountRelationRequest, runtime *util.RuntimeOptions) (_result *AddAccountRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChildNick)) {
		query["ChildNick"] = request.ChildNick
	}

	if !tea.BoolValue(util.IsUnset(request.ChildUserId)) {
		query["ChildUserId"] = request.ChildUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentUserId)) {
		query["ParentUserId"] = request.ParentUserId
	}

	if !tea.BoolValue(util.IsUnset(request.PermissionCodes)) {
		query["PermissionCodes"] = request.PermissionCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RelationType)) {
		query["RelationType"] = request.RelationType
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		query["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleCodes)) {
		query["RoleCodes"] = request.RoleCodes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAccountRelation"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAccountRelationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * 1\\. For more information about a financial relationship, see [Financial relationships](https://help.aliyun.com/document_detail/100376.html?spm=a2c4g.11186623.6.563.52a83908ypl4yE) or [Financial relationships](https://www.alibabacloud.com/help/en/doc-detail/116383.html). 2. If enterprise names used by the management account and a member for real-name verification are the same, you do not need to call an API operation for confirmation. Otherwise, you must call the ConfirmRelation operation for confirmation.
 *
 * @param request AddAccountRelationRequest
 * @return AddAccountRelationResponse
 */
func (client *Client) AddAccountRelation(request *AddAccountRelationRequest) (_result *AddAccountRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAccountRelationResponse{}
	_body, _err := client.AddAccountRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateCostUnitResourceWithOptions(request *AllocateCostUnitResourceRequest, runtime *util.RuntimeOptions) (_result *AllocateCostUnitResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FromUnitId)) {
		query["FromUnitId"] = request.FromUnitId
	}

	if !tea.BoolValue(util.IsUnset(request.FromUnitUserId)) {
		query["FromUnitUserId"] = request.FromUnitUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceInstanceList)) {
		query["ResourceInstanceList"] = request.ResourceInstanceList
	}

	if !tea.BoolValue(util.IsUnset(request.ToUnitId)) {
		query["ToUnitId"] = request.ToUnitId
	}

	if !tea.BoolValue(util.IsUnset(request.ToUnitUserId)) {
		query["ToUnitUserId"] = request.ToUnitUserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AllocateCostUnitResource"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AllocateCostUnitResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateCostUnitResource(request *AllocateCostUnitResourceRequest) (_result *AllocateCostUnitResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateCostUnitResourceResponse{}
	_body, _err := client.AllocateCostUnitResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyInvoiceWithOptions(request *ApplyInvoiceRequest, runtime *util.RuntimeOptions) (_result *ApplyInvoiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddressId)) {
		query["AddressId"] = request.AddressId
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyUserNick)) {
		query["ApplyUserNick"] = request.ApplyUserNick
	}

	if !tea.BoolValue(util.IsUnset(request.CustomerId)) {
		query["CustomerId"] = request.CustomerId
	}

	if !tea.BoolValue(util.IsUnset(request.InvoiceAmount)) {
		query["InvoiceAmount"] = request.InvoiceAmount
	}

	if !tea.BoolValue(util.IsUnset(request.InvoiceByAmount)) {
		query["InvoiceByAmount"] = request.InvoiceByAmount
	}

	if !tea.BoolValue(util.IsUnset(request.InvoicingType)) {
		query["InvoicingType"] = request.InvoicingType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessWay)) {
		query["ProcessWay"] = request.ProcessWay
	}

	if !tea.BoolValue(util.IsUnset(request.SelectedIds)) {
		query["SelectedIds"] = request.SelectedIds
	}

	if !tea.BoolValue(util.IsUnset(request.UserRemark)) {
		query["UserRemark"] = request.UserRemark
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyInvoice"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyInvoiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyInvoice(request *ApplyInvoiceRequest) (_result *ApplyInvoiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyInvoiceResponse{}
	_body, _err := client.ApplyInvoiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelOrderWithOptions(request *CancelOrderRequest, runtime *util.RuntimeOptions) (_result *CancelOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelOrder"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelOrder(request *CancelOrderRequest) (_result *CancelOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelOrderResponse{}
	_body, _err := client.CancelOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ChangeResellerConsumeAmountWithOptions(request *ChangeResellerConsumeAmountRequest, runtime *util.RuntimeOptions) (_result *ChangeResellerConsumeAmountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdjustType)) {
		query["AdjustType"] = request.AdjustType
	}

	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.Currency)) {
		query["Currency"] = request.Currency
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendMap)) {
		query["ExtendMap"] = request.ExtendMap
	}

	if !tea.BoolValue(util.IsUnset(request.OutBizId)) {
		query["OutBizId"] = request.OutBizId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ChangeResellerConsumeAmount"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ChangeResellerConsumeAmountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ChangeResellerConsumeAmount(request *ChangeResellerConsumeAmountRequest) (_result *ChangeResellerConsumeAmountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeResellerConsumeAmountResponse{}
	_body, _err := client.ChangeResellerConsumeAmountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * 1\\. A member needs to confirm an invitation only if a financial management relationship is established between the management account and the member and enterprise names used by the management account and the member for real-name verification are different. 2. The permissions to be confirmed must be the same as those granted to the member when the management account initiates the invitation.
 *
 * @param request ConfirmRelationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfirmRelationResponse
 */
func (client *Client) ConfirmRelationWithOptions(request *ConfirmRelationRequest, runtime *util.RuntimeOptions) (_result *ConfirmRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChildUserId)) {
		query["ChildUserId"] = request.ChildUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ConfirmCode)) {
		query["ConfirmCode"] = request.ConfirmCode
	}

	if !tea.BoolValue(util.IsUnset(request.ParentUserId)) {
		query["ParentUserId"] = request.ParentUserId
	}

	if !tea.BoolValue(util.IsUnset(request.PermissionCodes)) {
		query["PermissionCodes"] = request.PermissionCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RelationId)) {
		query["RelationId"] = request.RelationId
	}

	if !tea.BoolValue(util.IsUnset(request.RelationType)) {
		query["RelationType"] = request.RelationType
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		query["RequestId"] = request.RequestId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfirmRelation"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfirmRelationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * 1\\. A member needs to confirm an invitation only if a financial management relationship is established between the management account and the member and enterprise names used by the management account and the member for real-name verification are different. 2. The permissions to be confirmed must be the same as those granted to the member when the management account initiates the invitation.
 *
 * @param request ConfirmRelationRequest
 * @return ConfirmRelationResponse
 */
func (client *Client) ConfirmRelation(request *ConfirmRelationRequest) (_result *ConfirmRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfirmRelationResponse{}
	_body, _err := client.ConfirmRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConvertChargeTypeWithOptions(request *ConvertChargeTypeRequest, runtime *util.RuntimeOptions) (_result *ConvertChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConvertChargeType"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConvertChargeTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConvertChargeType(request *ConvertChargeTypeRequest) (_result *ConvertChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConvertChargeTypeResponse{}
	_body, _err := client.ConvertChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call this operation to create an account so as to establish a master-member financial relationship.
 *
 * @param request CreateAgAccountRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAgAccountResponse
 */
func (client *Client) CreateAgAccountWithOptions(request *CreateAgAccountRequest, runtime *util.RuntimeOptions) (_result *CreateAgAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountAttr)) {
		query["AccountAttr"] = request.AccountAttr
	}

	if !tea.BoolValue(util.IsUnset(request.CityName)) {
		query["CityName"] = request.CityName
	}

	if !tea.BoolValue(util.IsUnset(request.EnterpriseName)) {
		query["EnterpriseName"] = request.EnterpriseName
	}

	if !tea.BoolValue(util.IsUnset(request.FirstName)) {
		query["FirstName"] = request.FirstName
	}

	if !tea.BoolValue(util.IsUnset(request.LastName)) {
		query["LastName"] = request.LastName
	}

	if !tea.BoolValue(util.IsUnset(request.LoginEmail)) {
		query["LoginEmail"] = request.LoginEmail
	}

	if !tea.BoolValue(util.IsUnset(request.NationCode)) {
		query["NationCode"] = request.NationCode
	}

	if !tea.BoolValue(util.IsUnset(request.Postcode)) {
		query["Postcode"] = request.Postcode
	}

	if !tea.BoolValue(util.IsUnset(request.ProvinceName)) {
		query["ProvinceName"] = request.ProvinceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAgAccount"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAgAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call this operation to create an account so as to establish a master-member financial relationship.
 *
 * @param request CreateAgAccountRequest
 * @return CreateAgAccountResponse
 */
func (client *Client) CreateAgAccount(request *CreateAgAccountRequest) (_result *CreateAgAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAgAccountResponse{}
	_body, _err := client.CreateAgAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCostUnitWithOptions(request *CreateCostUnitRequest, runtime *util.RuntimeOptions) (_result *CreateCostUnitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UnitEntityList)) {
		query["UnitEntityList"] = request.UnitEntityList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCostUnit"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCostUnitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCostUnit(request *CreateCostUnitRequest) (_result *CreateCostUnitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCostUnitResponse{}
	_body, _err := client.CreateCostUnitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Logistics)) {
		query["Logistics"] = request.Logistics
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Parameter)) {
		query["Parameter"] = request.Parameter
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RenewPeriod)) {
		query["RenewPeriod"] = request.RenewPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.RenewalStatus)) {
		query["RenewalStatus"] = request.RenewalStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstance"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateResellerUserQuotaWithOptions(request *CreateResellerUserQuotaRequest, runtime *util.RuntimeOptions) (_result *CreateResellerUserQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.Currency)) {
		query["Currency"] = request.Currency
	}

	if !tea.BoolValue(util.IsUnset(request.OutBizId)) {
		query["OutBizId"] = request.OutBizId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateResellerUserQuota"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateResellerUserQuotaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateResellerUserQuota(request *CreateResellerUserQuotaRequest) (_result *CreateResellerUserQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateResellerUserQuotaResponse{}
	_body, _err := client.CreateResellerUserQuotaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateResourcePackageWithOptions(request *CreateResourcePackageRequest, runtime *util.RuntimeOptions) (_result *CreateResourcePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveDate)) {
		query["EffectiveDate"] = request.EffectiveDate
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		query["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.PricingCycle)) {
		query["PricingCycle"] = request.PricingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.Specification)) {
		query["Specification"] = request.Specification
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateResourcePackage"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateResourcePackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateResourcePackage(request *CreateResourcePackageRequest) (_result *CreateResourcePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateResourcePackageResponse{}
	_body, _err := client.CreateResourcePackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSavingsPlansInstanceWithOptions(tmpReq *CreateSavingsPlansInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateSavingsPlansInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSavingsPlansInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ExtendMap)) {
		request.ExtendMapShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExtendMap, tea.String("ExtendMap"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveDate)) {
		query["EffectiveDate"] = request.EffectiveDate
	}

	if !tea.BoolValue(util.IsUnset(request.ExtendMapShrink)) {
		query["ExtendMap"] = request.ExtendMapShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PayMode)) {
		query["PayMode"] = request.PayMode
	}

	if !tea.BoolValue(util.IsUnset(request.PoolValue)) {
		query["PoolValue"] = request.PoolValue
	}

	if !tea.BoolValue(util.IsUnset(request.PricingCycle)) {
		query["PricingCycle"] = request.PricingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.SpecType)) {
		query["SpecType"] = request.SpecType
	}

	if !tea.BoolValue(util.IsUnset(request.Specification)) {
		query["Specification"] = request.Specification
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSavingsPlansInstance"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSavingsPlansInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSavingsPlansInstance(request *CreateSavingsPlansInstanceRequest) (_result *CreateSavingsPlansInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSavingsPlansInstanceResponse{}
	_body, _err := client.CreateSavingsPlansInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCostUnitWithOptions(request *DeleteCostUnitRequest, runtime *util.RuntimeOptions) (_result *DeleteCostUnitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerUid)) {
		query["OwnerUid"] = request.OwnerUid
	}

	if !tea.BoolValue(util.IsUnset(request.UnitId)) {
		query["UnitId"] = request.UnitId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCostUnit"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCostUnitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCostUnit(request *DeleteCostUnitRequest) (_result *DeleteCostUnitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCostUnitResponse{}
	_body, _err := client.DeleteCostUnitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * This operation is in beta testing and is only available for specific users in the whitelist. Excessive calls may result in performance issues. For example, the response times out.
 *
 * @param request DescribeCostBudgetsSummaryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCostBudgetsSummaryResponse
 */
func (client *Client) DescribeCostBudgetsSummaryWithOptions(request *DescribeCostBudgetsSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeCostBudgetsSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BudgetName)) {
		query["BudgetName"] = request.BudgetName
	}

	if !tea.BoolValue(util.IsUnset(request.BudgetStatus)) {
		query["BudgetStatus"] = request.BudgetStatus
	}

	if !tea.BoolValue(util.IsUnset(request.BudgetType)) {
		query["BudgetType"] = request.BudgetType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCostBudgetsSummary"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCostBudgetsSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * This operation is in beta testing and is only available for specific users in the whitelist. Excessive calls may result in performance issues. For example, the response times out.
 *
 * @param request DescribeCostBudgetsSummaryRequest
 * @return DescribeCostBudgetsSummaryResponse
 */
func (client *Client) DescribeCostBudgetsSummary(request *DescribeCostBudgetsSummaryRequest) (_result *DescribeCostBudgetsSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCostBudgetsSummaryResponse{}
	_body, _err := client.DescribeCostBudgetsSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
 *
 * @param request DescribeInstanceAmortizedCostByAmortizationPeriodRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceAmortizedCostByAmortizationPeriodResponse
 */
func (client *Client) DescribeInstanceAmortizedCostByAmortizationPeriodWithOptions(request *DescribeInstanceAmortizedCostByAmortizationPeriodRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAmortizedCostByAmortizationPeriodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerIdList)) {
		body["BillOwnerIdList"] = request.BillOwnerIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillUserIdList)) {
		body["BillUserIdList"] = request.BillUserIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		body["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumePeriodFilter)) {
		body["ConsumePeriodFilter"] = request.ConsumePeriodFilter
	}

	if !tea.BoolValue(util.IsUnset(request.CostUnitCode)) {
		body["CostUnitCode"] = request.CostUnitCode
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdList)) {
		body["InstanceIdList"] = request.InstanceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductDetail)) {
		body["ProductDetail"] = request.ProductDetail
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		body["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceAmortizedCostByAmortizationPeriod"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceAmortizedCostByAmortizationPeriodResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
 *
 * @param request DescribeInstanceAmortizedCostByAmortizationPeriodRequest
 * @return DescribeInstanceAmortizedCostByAmortizationPeriodResponse
 */
func (client *Client) DescribeInstanceAmortizedCostByAmortizationPeriod(request *DescribeInstanceAmortizedCostByAmortizationPeriodRequest) (_result *DescribeInstanceAmortizedCostByAmortizationPeriodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAmortizedCostByAmortizationPeriodResponse{}
	_body, _err := client.DescribeInstanceAmortizedCostByAmortizationPeriodWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAmortizedCostByAmortizationPeriodDateWithOptions(request *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AmortizationDateEnd)) {
		body["AmortizationDateEnd"] = request.AmortizationDateEnd
	}

	if !tea.BoolValue(util.IsUnset(request.AmortizationDateStart)) {
		body["AmortizationDateStart"] = request.AmortizationDateStart
	}

	if !tea.BoolValue(util.IsUnset(request.BillOwnerIdList)) {
		body["BillOwnerIdList"] = request.BillOwnerIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillUserIdList)) {
		body["BillUserIdList"] = request.BillUserIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		body["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.CostUnitCode)) {
		body["CostUnitCode"] = request.CostUnitCode
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdList)) {
		body["InstanceIdList"] = request.InstanceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductDetail)) {
		body["ProductDetail"] = request.ProductDetail
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		body["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceAmortizedCostByAmortizationPeriodDate"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAmortizedCostByAmortizationPeriodDate(request *DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest) (_result *DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse{}
	_body, _err := client.DescribeInstanceAmortizedCostByAmortizationPeriodDateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAmortizedCostByConsumePeriodWithOptions(request *DescribeInstanceAmortizedCostByConsumePeriodRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAmortizedCostByConsumePeriodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AmortizationPeriodFilter)) {
		body["AmortizationPeriodFilter"] = request.AmortizationPeriodFilter
	}

	if !tea.BoolValue(util.IsUnset(request.BillOwnerIdList)) {
		body["BillOwnerIdList"] = request.BillOwnerIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillUserIdList)) {
		body["BillUserIdList"] = request.BillUserIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		body["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.CostUnitCode)) {
		body["CostUnitCode"] = request.CostUnitCode
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdList)) {
		body["InstanceIdList"] = request.InstanceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductDetail)) {
		body["ProductDetail"] = request.ProductDetail
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		body["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceAmortizedCostByConsumePeriod"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceAmortizedCostByConsumePeriodResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAmortizedCostByConsumePeriod(request *DescribeInstanceAmortizedCostByConsumePeriodRequest) (_result *DescribeInstanceAmortizedCostByConsumePeriodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAmortizedCostByConsumePeriodResponse{}
	_body, _err := client.DescribeInstanceAmortizedCostByConsumePeriodWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   Instance bills are generated after the total bill is split. In most cases, the instance bills do not include data generated on the last day of the specified billing cycle.
 * *   The instance information may change during the billing cycle. The instance configurations and types in monthly bills are subject to the point in time when you query bills. For more information, see the corresponding bill details.
 * *   You can query data generated after June 2020 for Cloud Communications services. You can query data generated after November 2020 for Alibaba Cloud Domains.
 *
 * @param request DescribeInstanceBillRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceBillResponse
 */
func (client *Client) DescribeInstanceBillWithOptions(request *DescribeInstanceBillRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		query["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.BillingDate)) {
		query["BillingDate"] = request.BillingDate
	}

	if !tea.BoolValue(util.IsUnset(request.Granularity)) {
		query["Granularity"] = request.Granularity
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceID)) {
		query["InstanceID"] = request.InstanceID
	}

	if !tea.BoolValue(util.IsUnset(request.IsBillingItem)) {
		query["IsBillingItem"] = request.IsBillingItem
	}

	if !tea.BoolValue(util.IsUnset(request.IsHideZeroCharge)) {
		query["IsHideZeroCharge"] = request.IsHideZeroCharge
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipCode)) {
		query["PipCode"] = request.PipCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceBill"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceBillResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   Instance bills are generated after the total bill is split. In most cases, the instance bills do not include data generated on the last day of the specified billing cycle.
 * *   The instance information may change during the billing cycle. The instance configurations and types in monthly bills are subject to the point in time when you query bills. For more information, see the corresponding bill details.
 * *   You can query data generated after June 2020 for Cloud Communications services. You can query data generated after November 2020 for Alibaba Cloud Domains.
 *
 * @param request DescribeInstanceBillRequest
 * @return DescribeInstanceBillResponse
 */
func (client *Client) DescribeInstanceBill(request *DescribeInstanceBillRequest) (_result *DescribeInstanceBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceBillResponse{}
	_body, _err := client.DescribeInstanceBillWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceDeductAmortizedCostByAmortizationPeriodWithOptions(request *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerIdList)) {
		body["BillOwnerIdList"] = request.BillOwnerIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillUserIdList)) {
		body["BillUserIdList"] = request.BillUserIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		body["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.CostUnitCode)) {
		body["CostUnitCode"] = request.CostUnitCode
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdList)) {
		body["InstanceIdList"] = request.InstanceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductDetail)) {
		body["ProductDetail"] = request.ProductDetail
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		body["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceDeductAmortizedCostByAmortizationPeriod"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceDeductAmortizedCostByAmortizationPeriod(request *DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest) (_result *DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse{}
	_body, _err := client.DescribeInstanceDeductAmortizedCostByAmortizationPeriodWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePricingModuleWithOptions(request *DescribePricingModuleRequest, runtime *util.RuntimeOptions) (_result *DescribePricingModuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePricingModule"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePricingModuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePricingModule(request *DescribePricingModuleRequest) (_result *DescribePricingModuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePricingModuleResponse{}
	_body, _err := client.DescribePricingModuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
 *
 * @param request DescribeProductAmortizedCostByAmortizationPeriodRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeProductAmortizedCostByAmortizationPeriodResponse
 */
func (client *Client) DescribeProductAmortizedCostByAmortizationPeriodWithOptions(request *DescribeProductAmortizedCostByAmortizationPeriodRequest, runtime *util.RuntimeOptions) (_result *DescribeProductAmortizedCostByAmortizationPeriodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerIdList)) {
		body["BillOwnerIdList"] = request.BillOwnerIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillUserIdList)) {
		body["BillUserIdList"] = request.BillUserIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		body["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumePeriodFilter)) {
		body["ConsumePeriodFilter"] = request.ConsumePeriodFilter
	}

	if !tea.BoolValue(util.IsUnset(request.CostUnitCode)) {
		body["CostUnitCode"] = request.CostUnitCode
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductDetail)) {
		body["ProductDetail"] = request.ProductDetail
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		body["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeProductAmortizedCostByAmortizationPeriod"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProductAmortizedCostByAmortizationPeriodResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
 *
 * @param request DescribeProductAmortizedCostByAmortizationPeriodRequest
 * @return DescribeProductAmortizedCostByAmortizationPeriodResponse
 */
func (client *Client) DescribeProductAmortizedCostByAmortizationPeriod(request *DescribeProductAmortizedCostByAmortizationPeriodRequest) (_result *DescribeProductAmortizedCostByAmortizationPeriodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProductAmortizedCostByAmortizationPeriodResponse{}
	_body, _err := client.DescribeProductAmortizedCostByAmortizationPeriodWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeProductAmortizedCostByConsumePeriodWithOptions(request *DescribeProductAmortizedCostByConsumePeriodRequest, runtime *util.RuntimeOptions) (_result *DescribeProductAmortizedCostByConsumePeriodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AmortizationPeriodFilter)) {
		body["AmortizationPeriodFilter"] = request.AmortizationPeriodFilter
	}

	if !tea.BoolValue(util.IsUnset(request.BillOwnerIdList)) {
		body["BillOwnerIdList"] = request.BillOwnerIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillUserIdList)) {
		body["BillUserIdList"] = request.BillUserIdList
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		body["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.CostUnitCode)) {
		body["CostUnitCode"] = request.CostUnitCode
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductDetail)) {
		body["ProductDetail"] = request.ProductDetail
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		body["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeProductAmortizedCostByConsumePeriod"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProductAmortizedCostByConsumePeriodResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeProductAmortizedCostByConsumePeriod(request *DescribeProductAmortizedCostByConsumePeriodRequest) (_result *DescribeProductAmortizedCostByConsumePeriodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProductAmortizedCostByConsumePeriodResponse{}
	_body, _err := client.DescribeProductAmortizedCostByConsumePeriodWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * 1\\. The queried coverage details are the same as those displayed in the table on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
 * 2\\. You can call this operation to query the coverage details of RIs or SCUs.
 * 3\\. You can call this operation to query coverage details at an hourly, daily, or monthly granularity.
 *
 * @param request DescribeResourceCoverageDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeResourceCoverageDetailResponse
 */
func (client *Client) DescribeResourceCoverageDetailWithOptions(request *DescribeResourceCoverageDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceCoverageDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.EndPeriod)) {
		query["EndPeriod"] = request.EndPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodType)) {
		query["PeriodType"] = request.PeriodType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.StartPeriod)) {
		query["StartPeriod"] = request.StartPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceCoverageDetail"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceCoverageDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * 1\\. The queried coverage details are the same as those displayed in the table on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
 * 2\\. You can call this operation to query the coverage details of RIs or SCUs.
 * 3\\. You can call this operation to query coverage details at an hourly, daily, or monthly granularity.
 *
 * @param request DescribeResourceCoverageDetailRequest
 * @return DescribeResourceCoverageDetailResponse
 */
func (client *Client) DescribeResourceCoverageDetail(request *DescribeResourceCoverageDetailRequest) (_result *DescribeResourceCoverageDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceCoverageDetailResponse{}
	_body, _err := client.DescribeResourceCoverageDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The queried total coverage data is the same as the aggregated data displayed on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
 * You can call this operation to query the total coverage data of RIs or SCUs.
 *
 * @param request DescribeResourceCoverageTotalRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeResourceCoverageTotalResponse
 */
func (client *Client) DescribeResourceCoverageTotalWithOptions(request *DescribeResourceCoverageTotalRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceCoverageTotalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.EndPeriod)) {
		query["EndPeriod"] = request.EndPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodType)) {
		query["PeriodType"] = request.PeriodType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.StartPeriod)) {
		query["StartPeriod"] = request.StartPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceCoverageTotal"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceCoverageTotalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The queried total coverage data is the same as the aggregated data displayed on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
 * You can call this operation to query the total coverage data of RIs or SCUs.
 *
 * @param request DescribeResourceCoverageTotalRequest
 * @return DescribeResourceCoverageTotalResponse
 */
func (client *Client) DescribeResourceCoverageTotal(request *DescribeResourceCoverageTotalRequest) (_result *DescribeResourceCoverageTotalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceCoverageTotalResponse{}
	_body, _err := client.DescribeResourceCoverageTotalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourcePackageProductWithOptions(request *DescribeResourcePackageProductRequest, runtime *util.RuntimeOptions) (_result *DescribeResourcePackageProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourcePackageProduct"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourcePackageProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourcePackageProduct(request *DescribeResourcePackageProductRequest) (_result *DescribeResourcePackageProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourcePackageProductResponse{}
	_body, _err := client.DescribeResourcePackageProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceUsageDetailWithOptions(request *DescribeResourceUsageDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceUsageDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.EndPeriod)) {
		query["EndPeriod"] = request.EndPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodType)) {
		query["PeriodType"] = request.PeriodType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.StartPeriod)) {
		query["StartPeriod"] = request.StartPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceUsageDetail"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceUsageDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceUsageDetail(request *DescribeResourceUsageDetailRequest) (_result *DescribeResourceUsageDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceUsageDetailResponse{}
	_body, _err := client.DescribeResourceUsageDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceUsageTotalWithOptions(request *DescribeResourceUsageTotalRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceUsageTotalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.EndPeriod)) {
		query["EndPeriod"] = request.EndPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodType)) {
		query["PeriodType"] = request.PeriodType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.StartPeriod)) {
		query["StartPeriod"] = request.StartPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceUsageTotal"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceUsageTotalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceUsageTotal(request *DescribeResourceUsageTotalRequest) (_result *DescribeResourceUsageTotalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceUsageTotalResponse{}
	_body, _err := client.DescribeResourceUsageTotalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSavingsPlansCoverageDetailWithOptions(request *DescribeSavingsPlansCoverageDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeSavingsPlansCoverageDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.EndPeriod)) {
		query["EndPeriod"] = request.EndPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodType)) {
		query["PeriodType"] = request.PeriodType
	}

	if !tea.BoolValue(util.IsUnset(request.StartPeriod)) {
		query["StartPeriod"] = request.StartPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSavingsPlansCoverageDetail"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSavingsPlansCoverageDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSavingsPlansCoverageDetail(request *DescribeSavingsPlansCoverageDetailRequest) (_result *DescribeSavingsPlansCoverageDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSavingsPlansCoverageDetailResponse{}
	_body, _err := client.DescribeSavingsPlansCoverageDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSavingsPlansCoverageTotalWithOptions(request *DescribeSavingsPlansCoverageTotalRequest, runtime *util.RuntimeOptions) (_result *DescribeSavingsPlansCoverageTotalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.EndPeriod)) {
		query["EndPeriod"] = request.EndPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodType)) {
		query["PeriodType"] = request.PeriodType
	}

	if !tea.BoolValue(util.IsUnset(request.StartPeriod)) {
		query["StartPeriod"] = request.StartPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSavingsPlansCoverageTotal"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSavingsPlansCoverageTotalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSavingsPlansCoverageTotal(request *DescribeSavingsPlansCoverageTotalRequest) (_result *DescribeSavingsPlansCoverageTotalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSavingsPlansCoverageTotalResponse{}
	_body, _err := client.DescribeSavingsPlansCoverageTotalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSavingsPlansUsageDetailWithOptions(request *DescribeSavingsPlansUsageDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeSavingsPlansUsageDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.EndPeriod)) {
		query["EndPeriod"] = request.EndPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodType)) {
		query["PeriodType"] = request.PeriodType
	}

	if !tea.BoolValue(util.IsUnset(request.StartPeriod)) {
		query["StartPeriod"] = request.StartPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSavingsPlansUsageDetail"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSavingsPlansUsageDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSavingsPlansUsageDetail(request *DescribeSavingsPlansUsageDetailRequest) (_result *DescribeSavingsPlansUsageDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSavingsPlansUsageDetailResponse{}
	_body, _err := client.DescribeSavingsPlansUsageDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSavingsPlansUsageTotalWithOptions(request *DescribeSavingsPlansUsageTotalRequest, runtime *util.RuntimeOptions) (_result *DescribeSavingsPlansUsageTotalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.EndPeriod)) {
		query["EndPeriod"] = request.EndPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodType)) {
		query["PeriodType"] = request.PeriodType
	}

	if !tea.BoolValue(util.IsUnset(request.StartPeriod)) {
		query["StartPeriod"] = request.StartPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSavingsPlansUsageTotal"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSavingsPlansUsageTotalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSavingsPlansUsageTotal(request *DescribeSavingsPlansUsageTotalRequest) (_result *DescribeSavingsPlansUsageTotalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSavingsPlansUsageTotalResponse{}
	_body, _err := client.DescribeSavingsPlansUsageTotalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   The data that you query by calling this operation is the same as the data that is queried by billing cycles in the Split Bill module of Cost Allocation.
 * *   You can query split bills that were generated within the last 12 months by calling this operation.
 * *   You can query split bills only after you enable the [Split Bill](https://usercenter2.aliyun.com/finance/split-bill) service in the User Center console.
 *
 * @param request DescribeSplitItemBillRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSplitItemBillResponse
 */
func (client *Client) DescribeSplitItemBillWithOptions(request *DescribeSplitItemBillRequest, runtime *util.RuntimeOptions) (_result *DescribeSplitItemBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		query["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.BillingDate)) {
		query["BillingDate"] = request.BillingDate
	}

	if !tea.BoolValue(util.IsUnset(request.Granularity)) {
		query["Granularity"] = request.Granularity
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceID)) {
		query["InstanceID"] = request.InstanceID
	}

	if !tea.BoolValue(util.IsUnset(request.IsHideZeroCharge)) {
		query["IsHideZeroCharge"] = request.IsHideZeroCharge
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SplitItemID)) {
		query["SplitItemID"] = request.SplitItemID
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	if !tea.BoolValue(util.IsUnset(request.TagFilter)) {
		query["TagFilter"] = request.TagFilter
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSplitItemBill"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSplitItemBillResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   The data that you query by calling this operation is the same as the data that is queried by billing cycles in the Split Bill module of Cost Allocation.
 * *   You can query split bills that were generated within the last 12 months by calling this operation.
 * *   You can query split bills only after you enable the [Split Bill](https://usercenter2.aliyun.com/finance/split-bill) service in the User Center console.
 *
 * @param request DescribeSplitItemBillRequest
 * @return DescribeSplitItemBillResponse
 */
func (client *Client) DescribeSplitItemBill(request *DescribeSplitItemBillRequest) (_result *DescribeSplitItemBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSplitItemBillResponse{}
	_body, _err := client.DescribeSplitItemBillWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableBillGenerationWithOptions(request *EnableBillGenerationRequest, runtime *util.RuntimeOptions) (_result *EnableBillGenerationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableBillGeneration"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableBillGenerationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableBillGeneration(request *EnableBillGenerationRequest) (_result *EnableBillGenerationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableBillGenerationResponse{}
	_body, _err := client.EnableBillGenerationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAccountRelationWithOptions(request *GetAccountRelationRequest, runtime *util.RuntimeOptions) (_result *GetAccountRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAccountRelation"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAccountRelationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAccountRelation(request *GetAccountRelationRequest) (_result *GetAccountRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAccountRelationResponse{}
	_body, _err := client.GetAccountRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCustomerAccountInfoWithOptions(request *GetCustomerAccountInfoRequest, runtime *util.RuntimeOptions) (_result *GetCustomerAccountInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomerAccountInfo"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomerAccountInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCustomerAccountInfo(request *GetCustomerAccountInfoRequest) (_result *GetCustomerAccountInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomerAccountInfoResponse{}
	_body, _err := client.GetCustomerAccountInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The system queries the IDs of customers of a VNO based on the AccessKey pair used in the request.
 *
 * @param request GetCustomerListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCustomerListResponse
 */
func (client *Client) GetCustomerListWithOptions(runtime *util.RuntimeOptions) (_result *GetCustomerListResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetCustomerList"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomerListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The system queries the IDs of customers of a VNO based on the AccessKey pair used in the request.
 *
 * @return GetCustomerListResponse
 */
func (client *Client) GetCustomerList() (_result *GetCustomerListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomerListResponse{}
	_body, _err := client.GetCustomerListWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetOrderDetailWithOptions(request *GetOrderDetailRequest, runtime *util.RuntimeOptions) (_result *GetOrderDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOrderDetail"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOrderDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetOrderDetail(request *GetOrderDetailRequest) (_result *GetOrderDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetOrderDetailResponse{}
	_body, _err := client.GetOrderDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * ### Usage notes
 * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
 * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
 * 3.  Call the GetPayAsYouGoPrice operation to obtain the pay-as-you-go price of the service based on the returned configuration parameters.
 *
 * @param request GetPayAsYouGoPriceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPayAsYouGoPriceResponse
 */
func (client *Client) GetPayAsYouGoPriceWithOptions(request *GetPayAsYouGoPriceRequest, runtime *util.RuntimeOptions) (_result *GetPayAsYouGoPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModuleList)) {
		query["ModuleList"] = request.ModuleList
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPayAsYouGoPrice"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPayAsYouGoPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * ### Usage notes
 * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
 * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
 * 3.  Call the GetPayAsYouGoPrice operation to obtain the pay-as-you-go price of the service based on the returned configuration parameters.
 *
 * @param request GetPayAsYouGoPriceRequest
 * @return GetPayAsYouGoPriceResponse
 */
func (client *Client) GetPayAsYouGoPrice(request *GetPayAsYouGoPriceRequest) (_result *GetPayAsYouGoPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPayAsYouGoPriceResponse{}
	_body, _err := client.GetPayAsYouGoPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetResourcePackagePriceWithOptions(request *GetResourcePackagePriceRequest, runtime *util.RuntimeOptions) (_result *GetResourcePackagePriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveDate)) {
		query["EffectiveDate"] = request.EffectiveDate
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PackageType)) {
		query["PackageType"] = request.PackageType
	}

	if !tea.BoolValue(util.IsUnset(request.PricingCycle)) {
		query["PricingCycle"] = request.PricingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.Specification)) {
		query["Specification"] = request.Specification
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetResourcePackagePrice"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetResourcePackagePriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetResourcePackagePrice(request *GetResourcePackagePriceRequest) (_result *GetResourcePackagePriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetResourcePackagePriceResponse{}
	_body, _err := client.GetResourcePackagePriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
 * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
 * 3.  Call the GetSubscriptionPrice operation to obtain the pricing of the service based on the returned configuration parameters.
 *
 * @param request GetSubscriptionPriceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSubscriptionPriceResponse
 */
func (client *Client) GetSubscriptionPriceWithOptions(request *GetSubscriptionPriceRequest, runtime *util.RuntimeOptions) (_result *GetSubscriptionPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ModuleList)) {
		query["ModuleList"] = request.ModuleList
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.Quantity)) {
		query["Quantity"] = request.Quantity
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.ServicePeriodQuantity)) {
		query["ServicePeriodQuantity"] = request.ServicePeriodQuantity
	}

	if !tea.BoolValue(util.IsUnset(request.ServicePeriodUnit)) {
		query["ServicePeriodUnit"] = request.ServicePeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSubscriptionPrice"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSubscriptionPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
 * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
 * 3.  Call the GetSubscriptionPrice operation to obtain the pricing of the service based on the returned configuration parameters.
 *
 * @param request GetSubscriptionPriceRequest
 * @return GetSubscriptionPriceResponse
 */
func (client *Client) GetSubscriptionPrice(request *GetSubscriptionPriceRequest) (_result *GetSubscriptionPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSubscriptionPriceResponse{}
	_body, _err := client.GetSubscriptionPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * 1.  **Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.**
 * 2.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
 * 3.  For more information, see [Rules for unsubscribing from resources](https://www.alibabacloud.com/help/zh/user-center/user-guide/refund-rules).
 *
 * @param request InquiryPriceRefundInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InquiryPriceRefundInstanceResponse
 */
func (client *Client) InquiryPriceRefundInstanceWithOptions(request *InquiryPriceRefundInstanceRequest, runtime *util.RuntimeOptions) (_result *InquiryPriceRefundInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InquiryPriceRefundInstance"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InquiryPriceRefundInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * 1.  **Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.**
 * 2.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
 * 3.  For more information, see [Rules for unsubscribing from resources](https://www.alibabacloud.com/help/zh/user-center/user-guide/refund-rules).
 *
 * @param request InquiryPriceRefundInstanceRequest
 * @return InquiryPriceRefundInstanceResponse
 */
func (client *Client) InquiryPriceRefundInstance(request *InquiryPriceRefundInstanceRequest) (_result *InquiryPriceRefundInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InquiryPriceRefundInstanceResponse{}
	_body, _err := client.InquiryPriceRefundInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAccountRelationWithOptions(request *ModifyAccountRelationRequest, runtime *util.RuntimeOptions) (_result *ModifyAccountRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChildNick)) {
		query["ChildNick"] = request.ChildNick
	}

	if !tea.BoolValue(util.IsUnset(request.ChildUserId)) {
		query["ChildUserId"] = request.ChildUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentUserId)) {
		query["ParentUserId"] = request.ParentUserId
	}

	if !tea.BoolValue(util.IsUnset(request.PermissionCodes)) {
		query["PermissionCodes"] = request.PermissionCodes
	}

	if !tea.BoolValue(util.IsUnset(request.RelationId)) {
		query["RelationId"] = request.RelationId
	}

	if !tea.BoolValue(util.IsUnset(request.RelationOperation)) {
		query["RelationOperation"] = request.RelationOperation
	}

	if !tea.BoolValue(util.IsUnset(request.RelationType)) {
		query["RelationType"] = request.RelationType
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		query["RequestId"] = request.RequestId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleCodes)) {
		query["RoleCodes"] = request.RoleCodes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAccountRelation"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAccountRelationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAccountRelation(request *ModifyAccountRelationRequest) (_result *ModifyAccountRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAccountRelationResponse{}
	_body, _err := client.ModifyAccountRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCostUnitWithOptions(request *ModifyCostUnitRequest, runtime *util.RuntimeOptions) (_result *ModifyCostUnitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UnitEntityList)) {
		query["UnitEntityList"] = request.UnitEntityList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCostUnit"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCostUnitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCostUnit(request *ModifyCostUnitRequest) (_result *ModifyCostUnitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCostUnitResponse{}
	_body, _err := client.ModifyCostUnitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceWithOptions(request *ModifyInstanceRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ModifyType)) {
		query["ModifyType"] = request.ModifyType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Parameter)) {
		query["Parameter"] = request.Parameter
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstance"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstance(request *ModifyInstanceRequest) (_result *ModifyInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceResponse{}
	_body, _err := client.ModifyInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAccountBalanceWithOptions(runtime *util.RuntimeOptions) (_result *QueryAccountBalanceResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("QueryAccountBalance"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAccountBalanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAccountBalance() (_result *QueryAccountBalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAccountBalanceResponse{}
	_body, _err := client.QueryAccountBalanceWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   Account bills are summarized based on instance bills. In most cases, the account bills do not include the data generated on the last day of the specified period.
 * *   You can query the data generated in June 2020 or later for Cloud Communications services. However, the query results do not include the data of Alibaba Cloud Domains.
 *
 * @param request QueryAccountBillRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryAccountBillResponse
 */
func (client *Client) QueryAccountBillWithOptions(request *QueryAccountBillRequest, runtime *util.RuntimeOptions) (_result *QueryAccountBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		query["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.BillingDate)) {
		query["BillingDate"] = request.BillingDate
	}

	if !tea.BoolValue(util.IsUnset(request.Granularity)) {
		query["Granularity"] = request.Granularity
	}

	if !tea.BoolValue(util.IsUnset(request.IsGroupByProduct)) {
		query["IsGroupByProduct"] = request.IsGroupByProduct
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerID)) {
		query["OwnerID"] = request.OwnerID
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAccountBill"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAccountBillResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   Account bills are summarized based on instance bills. In most cases, the account bills do not include the data generated on the last day of the specified period.
 * *   You can query the data generated in June 2020 or later for Cloud Communications services. However, the query results do not include the data of Alibaba Cloud Domains.
 *
 * @param request QueryAccountBillRequest
 * @return QueryAccountBillResponse
 */
func (client *Client) QueryAccountBill(request *QueryAccountBillRequest) (_result *QueryAccountBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAccountBillResponse{}
	_body, _err := client.QueryAccountBillWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAccountTransactionDetailsWithOptions(request *QueryAccountTransactionDetailsRequest, runtime *util.RuntimeOptions) (_result *QueryAccountTransactionDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateTimeEnd)) {
		query["CreateTimeEnd"] = request.CreateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeStart)) {
		query["CreateTimeStart"] = request.CreateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RecordID)) {
		query["RecordID"] = request.RecordID
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionChannel)) {
		query["TransactionChannel"] = request.TransactionChannel
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionChannelSN)) {
		query["TransactionChannelSN"] = request.TransactionChannelSN
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionNumber)) {
		query["TransactionNumber"] = request.TransactionNumber
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionType)) {
		query["TransactionType"] = request.TransactionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAccountTransactionDetails"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAccountTransactionDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAccountTransactionDetails(request *QueryAccountTransactionDetailsRequest) (_result *QueryAccountTransactionDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAccountTransactionDetailsResponse{}
	_body, _err := client.QueryAccountTransactionDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAccountTransactionsWithOptions(request *QueryAccountTransactionsRequest, runtime *util.RuntimeOptions) (_result *QueryAccountTransactionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateTimeEnd)) {
		query["CreateTimeEnd"] = request.CreateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeStart)) {
		query["CreateTimeStart"] = request.CreateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RecordID)) {
		query["RecordID"] = request.RecordID
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionChannel)) {
		query["TransactionChannel"] = request.TransactionChannel
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionChannelSN)) {
		query["TransactionChannelSN"] = request.TransactionChannelSN
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionFlow)) {
		query["TransactionFlow"] = request.TransactionFlow
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionNumber)) {
		query["TransactionNumber"] = request.TransactionNumber
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionType)) {
		query["TransactionType"] = request.TransactionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAccountTransactions"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAccountTransactionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAccountTransactions(request *QueryAccountTransactionsRequest) (_result *QueryAccountTransactionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAccountTransactionsResponse{}
	_body, _err := client.QueryAccountTransactionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAvailableInstancesWithOptions(request *QueryAvailableInstancesRequest, runtime *util.RuntimeOptions) (_result *QueryAvailableInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateTimeEnd)) {
		query["CreateTimeEnd"] = request.CreateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeStart)) {
		query["CreateTimeStart"] = request.CreateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.EndTimeEnd)) {
		query["EndTimeEnd"] = request.EndTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.EndTimeStart)) {
		query["EndTimeStart"] = request.EndTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIDs)) {
		query["InstanceIDs"] = request.InstanceIDs
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RenewStatus)) {
		query["RenewStatus"] = request.RenewStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAvailableInstances"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAvailableInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAvailableInstances(request *QueryAvailableInstancesRequest) (_result *QueryAvailableInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAvailableInstancesResponse{}
	_body, _err := client.QueryAvailableInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryBillWithOptions(request *QueryBillRequest, runtime *util.RuntimeOptions) (_result *QueryBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		query["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.IsDisplayLocalCurrency)) {
		query["IsDisplayLocalCurrency"] = request.IsDisplayLocalCurrency
	}

	if !tea.BoolValue(util.IsUnset(request.IsHideZeroCharge)) {
		query["IsHideZeroCharge"] = request.IsHideZeroCharge
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryBill"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryBillResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryBill(request *QueryBillRequest) (_result *QueryBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryBillResponse{}
	_body, _err := client.QueryBillWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryBillOverviewWithOptions(request *QueryBillOverviewRequest, runtime *util.RuntimeOptions) (_result *QueryBillOverviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		query["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryBillOverview"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryBillOverviewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryBillOverview(request *QueryBillOverviewRequest) (_result *QueryBillOverviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryBillOverviewResponse{}
	_body, _err := client.QueryBillOverviewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryBillToOSSSubscriptionWithOptions(runtime *util.RuntimeOptions) (_result *QueryBillToOSSSubscriptionResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("QueryBillToOSSSubscription"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryBillToOSSSubscriptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryBillToOSSSubscription() (_result *QueryBillToOSSSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryBillToOSSSubscriptionResponse{}
	_body, _err := client.QueryBillToOSSSubscriptionWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCashCouponsWithOptions(request *QueryCashCouponsRequest, runtime *util.RuntimeOptions) (_result *QueryCashCouponsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EffectiveOrNot)) {
		query["EffectiveOrNot"] = request.EffectiveOrNot
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiryTimeEnd)) {
		query["ExpiryTimeEnd"] = request.ExpiryTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiryTimeStart)) {
		query["ExpiryTimeStart"] = request.ExpiryTimeStart
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCashCoupons"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCashCouponsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCashCoupons(request *QueryCashCouponsRequest) (_result *QueryCashCouponsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCashCouponsResponse{}
	_body, _err := client.QueryCashCouponsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call this operation to query the information about a service based on the service code.
 *
 * @param request QueryCommodityListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryCommodityListResponse
 */
func (client *Client) QueryCommodityListWithOptions(request *QueryCommodityListRequest, runtime *util.RuntimeOptions) (_result *QueryCommodityListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCommodityList"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCommodityListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call this operation to query the information about a service based on the service code.
 *
 * @param request QueryCommodityListRequest
 * @return QueryCommodityListResponse
 */
func (client *Client) QueryCommodityList(request *QueryCommodityListRequest) (_result *QueryCommodityListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCommodityListResponse{}
	_body, _err := client.QueryCommodityListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCostUnitWithOptions(request *QueryCostUnitRequest, runtime *util.RuntimeOptions) (_result *QueryCostUnitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerUid)) {
		query["OwnerUid"] = request.OwnerUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentUnitId)) {
		query["ParentUnitId"] = request.ParentUnitId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCostUnit"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCostUnitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCostUnit(request *QueryCostUnitRequest) (_result *QueryCostUnitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCostUnitResponse{}
	_body, _err := client.QueryCostUnitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCostUnitResourceWithOptions(request *QueryCostUnitResourceRequest, runtime *util.RuntimeOptions) (_result *QueryCostUnitResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerUid)) {
		query["OwnerUid"] = request.OwnerUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.UnitId)) {
		query["UnitId"] = request.UnitId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCostUnitResource"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCostUnitResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCostUnitResource(request *QueryCostUnitResourceRequest) (_result *QueryCostUnitResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCostUnitResourceResponse{}
	_body, _err := client.QueryCostUnitResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCustomerAddressListWithOptions(request *QueryCustomerAddressListRequest, runtime *util.RuntimeOptions) (_result *QueryCustomerAddressListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCustomerAddressList"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCustomerAddressListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCustomerAddressList(request *QueryCustomerAddressListRequest) (_result *QueryCustomerAddressListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCustomerAddressListResponse{}
	_body, _err := client.QueryCustomerAddressListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Limits:
 * *   Only the usage records within the past year can be queried.
 *
 * @param request QueryDPUtilizationDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryDPUtilizationDetailResponse
 */
func (client *Client) QueryDPUtilizationDetailWithOptions(request *QueryDPUtilizationDetailRequest, runtime *util.RuntimeOptions) (_result *QueryDPUtilizationDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.DeductedInstanceId)) {
		query["DeductedInstanceId"] = request.DeductedInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeShare)) {
		query["IncludeShare"] = request.IncludeShare
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.LastToken)) {
		query["LastToken"] = request.LastToken
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.ProdCode)) {
		query["ProdCode"] = request.ProdCode
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDPUtilizationDetail"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDPUtilizationDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Limits:
 * *   Only the usage records within the past year can be queried.
 *
 * @param request QueryDPUtilizationDetailRequest
 * @return QueryDPUtilizationDetailResponse
 */
func (client *Client) QueryDPUtilizationDetail(request *QueryDPUtilizationDetailRequest) (_result *QueryDPUtilizationDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDPUtilizationDetailResponse{}
	_body, _err := client.QueryDPUtilizationDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEvaluateListWithOptions(request *QueryEvaluateListRequest, runtime *util.RuntimeOptions) (_result *QueryEvaluateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillCycle)) {
		query["BillCycle"] = request.BillCycle
	}

	if !tea.BoolValue(util.IsUnset(request.BizTypeList)) {
		query["BizTypeList"] = request.BizTypeList
	}

	if !tea.BoolValue(util.IsUnset(request.EndAmount)) {
		query["EndAmount"] = request.EndAmount
	}

	if !tea.BoolValue(util.IsUnset(request.EndBizTime)) {
		query["EndBizTime"] = request.EndBizTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndSearchTime)) {
		query["EndSearchTime"] = request.EndSearchTime
	}

	if !tea.BoolValue(util.IsUnset(request.OutBizId)) {
		query["OutBizId"] = request.OutBizId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		query["SortType"] = request.SortType
	}

	if !tea.BoolValue(util.IsUnset(request.StartAmount)) {
		query["StartAmount"] = request.StartAmount
	}

	if !tea.BoolValue(util.IsUnset(request.StartBizTime)) {
		query["StartBizTime"] = request.StartBizTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartSearchTime)) {
		query["StartSearchTime"] = request.StartSearchTime
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryEvaluateList"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryEvaluateListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEvaluateList(request *QueryEvaluateListRequest) (_result *QueryEvaluateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEvaluateListResponse{}
	_body, _err := client.QueryEvaluateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryFinancialAccountInfoWithOptions(request *QueryFinancialAccountInfoRequest, runtime *util.RuntimeOptions) (_result *QueryFinancialAccountInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryFinancialAccountInfo"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryFinancialAccountInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryFinancialAccountInfo(request *QueryFinancialAccountInfoRequest) (_result *QueryFinancialAccountInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFinancialAccountInfoResponse{}
	_body, _err := client.QueryFinancialAccountInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * ##
 * *   This API operation has been upgraded to DescribeInstanceBill. We recommend that you call the [DescribeInstanceBill](~~209402~~) operation to query the bills of instances or billable items in a billing cycle. You can call the QueryInstanceBill operation to query a maximum of 50,000 data rows in a bill.
 * *   Instance bills are generated after bills are split. In most cases, the instance bills do not include data generated on the last day of the specified period.
 * *   The instance information changes within a billing cycle. The instance configurations and specifications and the time when the instance was used in the billing cycle are all recorded. For more information, see the corresponding bill details.
 * *   You can query the data generated in June 2020 or later for Cloud Communications services, and the data generated in November 2020 or later for Alibaba Cloud Domains.
 *
 * @param request QueryInstanceBillRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryInstanceBillResponse
 */
func (client *Client) QueryInstanceBillWithOptions(request *QueryInstanceBillRequest, runtime *util.RuntimeOptions) (_result *QueryInstanceBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		query["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.BillingDate)) {
		query["BillingDate"] = request.BillingDate
	}

	if !tea.BoolValue(util.IsUnset(request.Granularity)) {
		query["Granularity"] = request.Granularity
	}

	if !tea.BoolValue(util.IsUnset(request.IsBillingItem)) {
		query["IsBillingItem"] = request.IsBillingItem
	}

	if !tea.BoolValue(util.IsUnset(request.IsHideZeroCharge)) {
		query["IsHideZeroCharge"] = request.IsHideZeroCharge
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryInstanceBill"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryInstanceBillResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * ##
 * *   This API operation has been upgraded to DescribeInstanceBill. We recommend that you call the [DescribeInstanceBill](~~209402~~) operation to query the bills of instances or billable items in a billing cycle. You can call the QueryInstanceBill operation to query a maximum of 50,000 data rows in a bill.
 * *   Instance bills are generated after bills are split. In most cases, the instance bills do not include data generated on the last day of the specified period.
 * *   The instance information changes within a billing cycle. The instance configurations and specifications and the time when the instance was used in the billing cycle are all recorded. For more information, see the corresponding bill details.
 * *   You can query the data generated in June 2020 or later for Cloud Communications services, and the data generated in November 2020 or later for Alibaba Cloud Domains.
 *
 * @param request QueryInstanceBillRequest
 * @return QueryInstanceBillResponse
 */
func (client *Client) QueryInstanceBill(request *QueryInstanceBillRequest) (_result *QueryInstanceBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryInstanceBillResponse{}
	_body, _err := client.QueryInstanceBillWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryInstanceByTagWithOptions(request *QueryInstanceByTagRequest, runtime *util.RuntimeOptions) (_result *QueryInstanceByTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryInstanceByTag"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryInstanceByTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryInstanceByTag(request *QueryInstanceByTagRequest) (_result *QueryInstanceByTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryInstanceByTagResponse{}
	_body, _err := client.QueryInstanceByTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryInstanceGaapCostWithOptions(request *QueryInstanceGaapCostRequest, runtime *util.RuntimeOptions) (_result *QueryInstanceGaapCostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		query["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryInstanceGaapCost"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryInstanceGaapCostResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryInstanceGaapCost(request *QueryInstanceGaapCostRequest) (_result *QueryInstanceGaapCostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryInstanceGaapCostResponse{}
	_body, _err := client.QueryInstanceGaapCostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryInvoicingCustomerListWithOptions(request *QueryInvoicingCustomerListRequest, runtime *util.RuntimeOptions) (_result *QueryInvoicingCustomerListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryInvoicingCustomerList"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryInvoicingCustomerListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryInvoicingCustomerList(request *QueryInvoicingCustomerListRequest) (_result *QueryInvoicingCustomerListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryInvoicingCustomerListResponse{}
	_body, _err := client.QueryInvoicingCustomerListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryOrdersWithOptions(request *QueryOrdersRequest, runtime *util.RuntimeOptions) (_result *QueryOrdersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateTimeEnd)) {
		query["CreateTimeEnd"] = request.CreateTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeStart)) {
		query["CreateTimeStart"] = request.CreateTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PaymentStatus)) {
		query["PaymentStatus"] = request.PaymentStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryOrders"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryOrdersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryOrders(request *QueryOrdersRequest) (_result *QueryOrdersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOrdersResponse{}
	_body, _err := client.QueryOrdersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPermissionListWithOptions(request *QueryPermissionListRequest, runtime *util.RuntimeOptions) (_result *QueryPermissionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RelationId)) {
		query["RelationId"] = request.RelationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPermissionList"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPermissionListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPermissionList(request *QueryPermissionListRequest) (_result *QueryPermissionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPermissionListResponse{}
	_body, _err := client.QueryPermissionListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPrepaidCardsWithOptions(request *QueryPrepaidCardsRequest, runtime *util.RuntimeOptions) (_result *QueryPrepaidCardsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EffectiveOrNot)) {
		query["EffectiveOrNot"] = request.EffectiveOrNot
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiryTimeEnd)) {
		query["ExpiryTimeEnd"] = request.ExpiryTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiryTimeStart)) {
		query["ExpiryTimeStart"] = request.ExpiryTimeStart
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPrepaidCards"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPrepaidCardsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPrepaidCards(request *QueryPrepaidCardsRequest) (_result *QueryPrepaidCardsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPrepaidCardsResponse{}
	_body, _err := client.QueryPrepaidCardsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call this operation to query the billable items of a service. A billable item is the minimum unit used to calculate costs.
 *
 * @param request QueryPriceEntityListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPriceEntityListResponse
 */
func (client *Client) QueryPriceEntityListWithOptions(request *QueryPriceEntityListRequest, runtime *util.RuntimeOptions) (_result *QueryPriceEntityListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPriceEntityList"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPriceEntityListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call this operation to query the billable items of a service. A billable item is the minimum unit used to calculate costs.
 *
 * @param request QueryPriceEntityListRequest
 * @return QueryPriceEntityListResponse
 */
func (client *Client) QueryPriceEntityList(request *QueryPriceEntityListRequest) (_result *QueryPriceEntityListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPriceEntityListResponse{}
	_body, _err := client.QueryPriceEntityListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProductListWithOptions(request *QueryProductListRequest, runtime *util.RuntimeOptions) (_result *QueryProductListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QueryTotalCount)) {
		query["QueryTotalCount"] = request.QueryTotalCount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryProductList"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryProductListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProductList(request *QueryProductListRequest) (_result *QueryProductListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProductListResponse{}
	_body, _err := client.QueryProductListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryRIUtilizationDetailWithOptions(request *QueryRIUtilizationDetailRequest, runtime *util.RuntimeOptions) (_result *QueryRIUtilizationDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeductedInstanceId)) {
		query["DeductedInstanceId"] = request.DeductedInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RICommodityCode)) {
		query["RICommodityCode"] = request.RICommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.RIInstanceId)) {
		query["RIInstanceId"] = request.RIInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryRIUtilizationDetail"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryRIUtilizationDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryRIUtilizationDetail(request *QueryRIUtilizationDetailRequest) (_result *QueryRIUtilizationDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryRIUtilizationDetailResponse{}
	_body, _err := client.QueryRIUtilizationDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryRedeemWithOptions(request *QueryRedeemRequest, runtime *util.RuntimeOptions) (_result *QueryRedeemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryRedeem"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryRedeemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryRedeem(request *QueryRedeemRequest) (_result *QueryRedeemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryRedeemResponse{}
	_body, _err := client.QueryRedeemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryRelationListWithOptions(request *QueryRelationListRequest, runtime *util.RuntimeOptions) (_result *QueryRelationListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryRelationList"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryRelationListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryRelationList(request *QueryRelationListRequest) (_result *QueryRelationListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryRelationListResponse{}
	_body, _err := client.QueryRelationListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryResellerAvailableQuotaWithOptions(request *QueryResellerAvailableQuotaRequest, runtime *util.RuntimeOptions) (_result *QueryResellerAvailableQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ItemCodes)) {
		query["ItemCodes"] = request.ItemCodes
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryResellerAvailableQuota"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryResellerAvailableQuotaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryResellerAvailableQuota(request *QueryResellerAvailableQuotaRequest) (_result *QueryResellerAvailableQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryResellerAvailableQuotaResponse{}
	_body, _err := client.QueryResellerAvailableQuotaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryResellerUserAlarmThresholdWithOptions(request *QueryResellerUserAlarmThresholdRequest, runtime *util.RuntimeOptions) (_result *QueryResellerUserAlarmThresholdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmType)) {
		query["AlarmType"] = request.AlarmType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryResellerUserAlarmThreshold"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryResellerUserAlarmThresholdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryResellerUserAlarmThreshold(request *QueryResellerUserAlarmThresholdRequest) (_result *QueryResellerUserAlarmThresholdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryResellerUserAlarmThresholdResponse{}
	_body, _err := client.QueryResellerUserAlarmThresholdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryResourcePackageInstancesWithOptions(request *QueryResourcePackageInstancesRequest, runtime *util.RuntimeOptions) (_result *QueryResourcePackageInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExpiryTimeEnd)) {
		query["ExpiryTimeEnd"] = request.ExpiryTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiryTimeStart)) {
		query["ExpiryTimeStart"] = request.ExpiryTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.IncludePartner)) {
		query["IncludePartner"] = request.IncludePartner
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryResourcePackageInstances"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryResourcePackageInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryResourcePackageInstances(request *QueryResourcePackageInstancesRequest) (_result *QueryResourcePackageInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryResourcePackageInstancesResponse{}
	_body, _err := client.QueryResourcePackageInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySavingsPlansDeductLogWithOptions(request *QuerySavingsPlansDeductLogRequest, runtime *util.RuntimeOptions) (_result *QuerySavingsPlansDeductLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.Locale)) {
		query["Locale"] = request.Locale
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySavingsPlansDeductLog"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySavingsPlansDeductLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySavingsPlansDeductLog(request *QuerySavingsPlansDeductLogRequest) (_result *QuerySavingsPlansDeductLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySavingsPlansDeductLogResponse{}
	_body, _err := client.QuerySavingsPlansDeductLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySavingsPlansDiscountWithOptions(request *QuerySavingsPlansDiscountRequest, runtime *util.RuntimeOptions) (_result *QuerySavingsPlansDiscountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySavingsPlansDiscount"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySavingsPlansDiscountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySavingsPlansDiscount(request *QuerySavingsPlansDiscountRequest) (_result *QuerySavingsPlansDiscountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySavingsPlansDiscountResponse{}
	_body, _err := client.QuerySavingsPlansDiscountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySavingsPlansInstanceWithOptions(request *QuerySavingsPlansInstanceRequest, runtime *util.RuntimeOptions) (_result *QuerySavingsPlansInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Locale)) {
		query["Locale"] = request.Locale
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySavingsPlansInstance"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySavingsPlansInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySavingsPlansInstance(request *QuerySavingsPlansInstanceRequest) (_result *QuerySavingsPlansInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySavingsPlansInstanceResponse{}
	_body, _err := client.QuerySavingsPlansInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySettleBillWithOptions(request *QuerySettleBillRequest, runtime *util.RuntimeOptions) (_result *QuerySettleBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		query["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.IsDisplayLocalCurrency)) {
		query["IsDisplayLocalCurrency"] = request.IsDisplayLocalCurrency
	}

	if !tea.BoolValue(util.IsUnset(request.IsHideZeroCharge)) {
		query["IsHideZeroCharge"] = request.IsHideZeroCharge
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RecordID)) {
		query["RecordID"] = request.RecordID
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySettleBill"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySettleBillResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySettleBill(request *QuerySettleBillRequest) (_result *QuerySettleBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySettleBillResponse{}
	_body, _err := client.QuerySettleBillWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySkuPriceListWithOptions(tmpReq *QuerySkuPriceListRequest, runtime *util.RuntimeOptions) (_result *QuerySkuPriceListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QuerySkuPriceListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.PriceFactorConditionMap)) {
		request.PriceFactorConditionMapShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PriceFactorConditionMap, tea.String("PriceFactorConditionMap"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySkuPriceList"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySkuPriceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySkuPriceList(request *QuerySkuPriceListRequest) (_result *QuerySkuPriceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySkuPriceListResponse{}
	_body, _err := client.QuerySkuPriceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This API operation has been upgraded to DescribeSplitItemBill. We recommend that you call the [DescribeSplitItemBill](~~208169~~) operation to query split bills. You can call the QuerySplitItemBill operation to query a maximum of 50,000 data rows in a bill.
 * *   The data queried by calling the QuerySplitItemBill operation is consistent with the data that is displayed for the specified billing cycle on the Split Bill page in User Center.
 * *   You can call this operation to query split bills generated within the last 12 months.
 * *   This operation returns split bills only after you activate the [Split Bill](https://usercenter2.aliyun.com/finance/split-bill) service in User Center.
 *
 * @param request QuerySplitItemBillRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QuerySplitItemBillResponse
 */
func (client *Client) QuerySplitItemBillWithOptions(request *QuerySplitItemBillRequest, runtime *util.RuntimeOptions) (_result *QuerySplitItemBillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BillOwnerId)) {
		query["BillOwnerId"] = request.BillOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		query["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySplitItemBill"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySplitItemBillResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This API operation has been upgraded to DescribeSplitItemBill. We recommend that you call the [DescribeSplitItemBill](~~208169~~) operation to query split bills. You can call the QuerySplitItemBill operation to query a maximum of 50,000 data rows in a bill.
 * *   The data queried by calling the QuerySplitItemBill operation is consistent with the data that is displayed for the specified billing cycle on the Split Bill page in User Center.
 * *   You can call this operation to query split bills generated within the last 12 months.
 * *   This operation returns split bills only after you activate the [Split Bill](https://usercenter2.aliyun.com/finance/split-bill) service in User Center.
 *
 * @param request QuerySplitItemBillRequest
 * @return QuerySplitItemBillResponse
 */
func (client *Client) QuerySplitItemBill(request *QuerySplitItemBillRequest) (_result *QuerySplitItemBillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySplitItemBillResponse{}
	_body, _err := client.QuerySplitItemBillWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call this operation to query the usage data of an Alibaba Cloud service. Take note of the following items:
 * *   The service code that you specify for querying the usage data of a specific Alibaba Cloud service must be valid. You can query the usage data by hour or by day.
 * *   The time that you specify must follow the ISO8601 standard in the yyyy-MM-ddTHH:mm:ssZ format.
 *     *   Latency exists in data pushes. Therefore, if you set the DataType parameter to Hour, the integrity of usage data recorded in the last 24 hours can be ensured. If you set the DataType parameter to Day, the integrity of usage data recorded in the last two days can be ensured.
 *     *   You can query the usage data that is recorded in the last quarter.
 *
 * @param request QueryUserOmsDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryUserOmsDataResponse
 */
func (client *Client) QueryUserOmsDataWithOptions(request *QueryUserOmsDataRequest, runtime *util.RuntimeOptions) (_result *QueryUserOmsDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataType)) {
		query["DataType"] = request.DataType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Marker)) {
		query["Marker"] = request.Marker
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Table)) {
		query["Table"] = request.Table
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryUserOmsData"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryUserOmsDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call this operation to query the usage data of an Alibaba Cloud service. Take note of the following items:
 * *   The service code that you specify for querying the usage data of a specific Alibaba Cloud service must be valid. You can query the usage data by hour or by day.
 * *   The time that you specify must follow the ISO8601 standard in the yyyy-MM-ddTHH:mm:ssZ format.
 *     *   Latency exists in data pushes. Therefore, if you set the DataType parameter to Hour, the integrity of usage data recorded in the last 24 hours can be ensured. If you set the DataType parameter to Day, the integrity of usage data recorded in the last two days can be ensured.
 *     *   You can query the usage data that is recorded in the last quarter.
 *
 * @param request QueryUserOmsDataRequest
 * @return QueryUserOmsDataResponse
 */
func (client *Client) QueryUserOmsData(request *QueryUserOmsDataRequest) (_result *QueryUserOmsDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryUserOmsDataResponse{}
	_body, _err := client.QueryUserOmsDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * 1.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
 * 2.  Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.
 * 3.  For more information, see [Rules for unsubscribing from resources](https://www.alibabacloud.com/help/zh/user-center/user-guide/refund-rules).
 *
 * @param request RefundInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RefundInstanceResponse
 */
func (client *Client) RefundInstanceWithOptions(request *RefundInstanceRequest, runtime *util.RuntimeOptions) (_result *RefundInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ImmediatelyRelease)) {
		query["ImmediatelyRelease"] = request.ImmediatelyRelease
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefundInstance"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefundInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * 1.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
 * 2.  Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.
 * 3.  For more information, see [Rules for unsubscribing from resources](https://www.alibabacloud.com/help/zh/user-center/user-guide/refund-rules).
 *
 * @param request RefundInstanceRequest
 * @return RefundInstanceResponse
 */
func (client *Client) RefundInstance(request *RefundInstanceRequest) (_result *RefundInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefundInstanceResponse{}
	_body, _err := client.RefundInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * This operation is provided for only VNOs to release instances. If a non-specific VNO calls this operation, the request is blocked.
 *
 * @param request ReleaseInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReleaseInstanceResponse
 */
func (client *Client) ReleaseInstanceWithOptions(request *ReleaseInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleaseInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RenewStatus)) {
		query["RenewStatus"] = request.RenewStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseInstance"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * This operation is provided for only VNOs to release instances. If a non-specific VNO calls this operation, the request is blocked.
 *
 * @param request ReleaseInstanceRequest
 * @return ReleaseInstanceResponse
 */
func (client *Client) ReleaseInstance(request *ReleaseInstanceRequest) (_result *ReleaseInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseInstanceResponse{}
	_body, _err := client.ReleaseInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RelieveAccountRelationWithOptions(request *RelieveAccountRelationRequest, runtime *util.RuntimeOptions) (_result *RelieveAccountRelationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChildUserId)) {
		query["ChildUserId"] = request.ChildUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentUserId)) {
		query["ParentUserId"] = request.ParentUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RelationId)) {
		query["RelationId"] = request.RelationId
	}

	if !tea.BoolValue(util.IsUnset(request.RelationType)) {
		query["RelationType"] = request.RelationType
	}

	if !tea.BoolValue(util.IsUnset(request.RequestId)) {
		query["RequestId"] = request.RequestId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RelieveAccountRelation"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RelieveAccountRelationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RelieveAccountRelation(request *RelieveAccountRelationRequest) (_result *RelieveAccountRelationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RelieveAccountRelationResponse{}
	_body, _err := client.RelieveAccountRelationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewChangeInstanceWithOptions(request *RenewChangeInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewChangeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Parameter)) {
		query["Parameter"] = request.Parameter
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RenewPeriod)) {
		query["RenewPeriod"] = request.RenewPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewChangeInstance"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewChangeInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewChangeInstance(request *RenewChangeInstanceRequest) (_result *RenewChangeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewChangeInstanceResponse{}
	_body, _err := client.RenewChangeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewInstanceWithOptions(request *RenewInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RenewPeriod)) {
		query["RenewPeriod"] = request.RenewPeriod
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewInstance"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewInstance(request *RenewInstanceRequest) (_result *RenewInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewInstanceResponse{}
	_body, _err := client.RenewInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewResourcePackageWithOptions(request *RenewResourcePackageRequest, runtime *util.RuntimeOptions) (_result *RenewResourcePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveDate)) {
		query["EffectiveDate"] = request.EffectiveDate
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PricingCycle)) {
		query["PricingCycle"] = request.PricingCycle
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewResourcePackage"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewResourcePackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewResourcePackage(request *RenewResourcePackageRequest) (_result *RenewResourcePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewResourcePackageResponse{}
	_body, _err := client.RenewResourcePackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetAllExpirationDayWithOptions(request *SetAllExpirationDayRequest, runtime *util.RuntimeOptions) (_result *SetAllExpirationDayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.UnifyExpireDay)) {
		query["UnifyExpireDay"] = request.UnifyExpireDay
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetAllExpirationDay"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetAllExpirationDayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetAllExpirationDay(request *SetAllExpirationDayRequest) (_result *SetAllExpirationDayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetAllExpirationDayResponse{}
	_body, _err := client.SetAllExpirationDayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetRenewalWithOptions(request *SetRenewalRequest, runtime *util.RuntimeOptions) (_result *SetRenewalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIDs)) {
		query["InstanceIDs"] = request.InstanceIDs
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RenewalPeriod)) {
		query["RenewalPeriod"] = request.RenewalPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.RenewalPeriodUnit)) {
		query["RenewalPeriodUnit"] = request.RenewalPeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RenewalStatus)) {
		query["RenewalStatus"] = request.RenewalStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionType)) {
		query["SubscriptionType"] = request.SubscriptionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetRenewal"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetRenewalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetRenewal(request *SetRenewalRequest) (_result *SetRenewalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetRenewalResponse{}
	_body, _err := client.SetRenewalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetResellerUserAlarmThresholdWithOptions(request *SetResellerUserAlarmThresholdRequest, runtime *util.RuntimeOptions) (_result *SetResellerUserAlarmThresholdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmThresholds)) {
		query["AlarmThresholds"] = request.AlarmThresholds
	}

	if !tea.BoolValue(util.IsUnset(request.AlarmType)) {
		query["AlarmType"] = request.AlarmType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetResellerUserAlarmThreshold"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetResellerUserAlarmThresholdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetResellerUserAlarmThreshold(request *SetResellerUserAlarmThresholdRequest) (_result *SetResellerUserAlarmThresholdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetResellerUserAlarmThresholdResponse{}
	_body, _err := client.SetResellerUserAlarmThresholdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetResellerUserQuotaWithOptions(request *SetResellerUserQuotaRequest, runtime *util.RuntimeOptions) (_result *SetResellerUserQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.Currency)) {
		query["Currency"] = request.Currency
	}

	if !tea.BoolValue(util.IsUnset(request.OutBizId)) {
		query["OutBizId"] = request.OutBizId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetResellerUserQuota"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetResellerUserQuotaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetResellerUserQuota(request *SetResellerUserQuotaRequest) (_result *SetResellerUserQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetResellerUserQuotaResponse{}
	_body, _err := client.SetResellerUserQuotaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetResellerUserStatusWithOptions(request *SetResellerUserStatusRequest, runtime *util.RuntimeOptions) (_result *SetResellerUserStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.StopMode)) {
		query["StopMode"] = request.StopMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetResellerUserStatus"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetResellerUserStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetResellerUserStatus(request *SetResellerUserStatusRequest) (_result *SetResellerUserStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetResellerUserStatusResponse{}
	_body, _err := client.SetResellerUserStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   You can subscribe to only one type of bill at a time.
 * *   The bills generated on the previous day are pushed on a daily basis the next day after you subscribe to the bills. The full-data bills for the previous month are pushed on the fourth day of each month. The monthly bills in the PDF format for the previous month are pushed on the fourth day of each month.
 * *   The daily bills may be delayed. The delayed bills are pushed the next day after they are generated. The delayed bills may include the bills that should have been pushed on the previous day. We recommend that you query the full-data bills for the previous month at the beginning of each month.
 * *   The bill subscriber must have the [AliyunConsumeDump2OSSRole](https://ram.console.aliyun.com/#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunConsumeDump2OSSRole%22,%20%22TemplateId%22:%20%22Dump2OSSRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fusercenter2.aliyun.com%22,%20%22Service%22:%20%22Consume%22%7D) permission.
 * *   The SubscribeBillToOSS operation has the same functionality as the Save Expense Details to OSS Bucket feature in User Center.
 * *   To subscribe to the bills stored in an OSS bucket, make sure that the directory name specified for the OSS bucket conforms to the following naming rules:
 * 1.  1.  The directory name can contain only UTF-8 characters and cannot contain emoticons.
 * 2.  2.  Forward slashes (/) are used to separate paths and can be used to create subdirectories with ease. The directory name cannot start with a forward slash (/), a backslash (\\\\), or consecutive forward slashes (/).
 * 3.  3.  The name of a subdirectory cannot be set to two consecutive periods (..).
 * 4.  4.  The directory name must be 1 to 254 characters in length.
 * *   File names:
 *     *   **BillingItemDetailForBillingPeriod** (Detailed bills of billable items)
 *         *   File name format for a daily push: `UID_BillingItemDetail_YYYYMMDD`. Example: `169**_BillingItemDetail_20190310`.
 *         *   File name format for a full-data push at the beginning of the next month: `UID_BillingItemDetail_YYYYMM`. Example: `169**_BillingItemDetail_201903`.
 *     *   **InstanceDetailForBillingPeriod** (Detailed bills of instances)
 *         *   File name format for a daily push: `UID_InstanceDetail_YYYYMMDD`. Example: `169**_InstanceDetail_20190310`.
 *         *   File name format for a full-data push at the beginning of the next month: `UID_InstanceDetail_YYYYMM`. Example: `169**_InstanceDetail_201903`.
 *     *   **InstanceDetailMonthly** (Instance-based bills summarized by billing cycle)
 *         *   File name format for a daily push: `UID_InstanceDetailMonthly_YYYYMM`. Example: `169**_InstanceDetailMonthly_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
 *     *   **BillingItemDetailMonthly** (Billable item-based bills summarized by billing cycle)
 *         *   File name format for a daily push: `UID_BillingItemDetailMonthly_YYYYMM`. Example: `169**_BillingItemDetailMonthly_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
 *     *   **SplitItemDetailDaily** (Split bills summarized by day)
 *         *   File name format for a daily push: `UID_SplitItemDetailDaily_YYYYMM`. Example: `169**_SplitItemDetailDaily_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
 *     *   **MonthBill** (Monthly bill in the PDF format)
 *         *   File name format for a monthly push: `UID_MonthBill_YYYYMM`. Example: `169**_MonthBill_201903`. The bill for the previous month is pushed on the fourth day of each month.
 * *   The bills of the MonthBill type are PDF files, whereas the bills of other types are CSV files. If the number of data rows in a bill exceeds a threshold, the bill is automatically split into multiple CSV files. Then, the multiple CSV files are automatically merged and compressed into a ZIP file that has the same name format as the original file.
 *
 * @param request SubscribeBillToOSSRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubscribeBillToOSSResponse
 */
func (client *Client) SubscribeBillToOSSWithOptions(request *SubscribeBillToOSSRequest, runtime *util.RuntimeOptions) (_result *SubscribeBillToOSSResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginBillingCycle)) {
		query["BeginBillingCycle"] = request.BeginBillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.BucketOwnerId)) {
		query["BucketOwnerId"] = request.BucketOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.BucketPath)) {
		query["BucketPath"] = request.BucketPath
	}

	if !tea.BoolValue(util.IsUnset(request.MultAccountRelSubscribe)) {
		query["MultAccountRelSubscribe"] = request.MultAccountRelSubscribe
	}

	if !tea.BoolValue(util.IsUnset(request.RowLimitPerFile)) {
		query["RowLimitPerFile"] = request.RowLimitPerFile
	}

	if !tea.BoolValue(util.IsUnset(request.SubscribeBucket)) {
		query["SubscribeBucket"] = request.SubscribeBucket
	}

	if !tea.BoolValue(util.IsUnset(request.SubscribeType)) {
		query["SubscribeType"] = request.SubscribeType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubscribeBillToOSS"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubscribeBillToOSSResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   You can subscribe to only one type of bill at a time.
 * *   The bills generated on the previous day are pushed on a daily basis the next day after you subscribe to the bills. The full-data bills for the previous month are pushed on the fourth day of each month. The monthly bills in the PDF format for the previous month are pushed on the fourth day of each month.
 * *   The daily bills may be delayed. The delayed bills are pushed the next day after they are generated. The delayed bills may include the bills that should have been pushed on the previous day. We recommend that you query the full-data bills for the previous month at the beginning of each month.
 * *   The bill subscriber must have the [AliyunConsumeDump2OSSRole](https://ram.console.aliyun.com/#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunConsumeDump2OSSRole%22,%20%22TemplateId%22:%20%22Dump2OSSRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fusercenter2.aliyun.com%22,%20%22Service%22:%20%22Consume%22%7D) permission.
 * *   The SubscribeBillToOSS operation has the same functionality as the Save Expense Details to OSS Bucket feature in User Center.
 * *   To subscribe to the bills stored in an OSS bucket, make sure that the directory name specified for the OSS bucket conforms to the following naming rules:
 * 1.  1.  The directory name can contain only UTF-8 characters and cannot contain emoticons.
 * 2.  2.  Forward slashes (/) are used to separate paths and can be used to create subdirectories with ease. The directory name cannot start with a forward slash (/), a backslash (\\\\), or consecutive forward slashes (/).
 * 3.  3.  The name of a subdirectory cannot be set to two consecutive periods (..).
 * 4.  4.  The directory name must be 1 to 254 characters in length.
 * *   File names:
 *     *   **BillingItemDetailForBillingPeriod** (Detailed bills of billable items)
 *         *   File name format for a daily push: `UID_BillingItemDetail_YYYYMMDD`. Example: `169**_BillingItemDetail_20190310`.
 *         *   File name format for a full-data push at the beginning of the next month: `UID_BillingItemDetail_YYYYMM`. Example: `169**_BillingItemDetail_201903`.
 *     *   **InstanceDetailForBillingPeriod** (Detailed bills of instances)
 *         *   File name format for a daily push: `UID_InstanceDetail_YYYYMMDD`. Example: `169**_InstanceDetail_20190310`.
 *         *   File name format for a full-data push at the beginning of the next month: `UID_InstanceDetail_YYYYMM`. Example: `169**_InstanceDetail_201903`.
 *     *   **InstanceDetailMonthly** (Instance-based bills summarized by billing cycle)
 *         *   File name format for a daily push: `UID_InstanceDetailMonthly_YYYYMM`. Example: `169**_InstanceDetailMonthly_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
 *     *   **BillingItemDetailMonthly** (Billable item-based bills summarized by billing cycle)
 *         *   File name format for a daily push: `UID_BillingItemDetailMonthly_YYYYMM`. Example: `169**_BillingItemDetailMonthly_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
 *     *   **SplitItemDetailDaily** (Split bills summarized by day)
 *         *   File name format for a daily push: `UID_SplitItemDetailDaily_YYYYMM`. Example: `169**_SplitItemDetailDaily_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
 *     *   **MonthBill** (Monthly bill in the PDF format)
 *         *   File name format for a monthly push: `UID_MonthBill_YYYYMM`. Example: `169**_MonthBill_201903`. The bill for the previous month is pushed on the fourth day of each month.
 * *   The bills of the MonthBill type are PDF files, whereas the bills of other types are CSV files. If the number of data rows in a bill exceeds a threshold, the bill is automatically split into multiple CSV files. Then, the multiple CSV files are automatically merged and compressed into a ZIP file that has the same name format as the original file.
 *
 * @param request SubscribeBillToOSSRequest
 * @return SubscribeBillToOSSResponse
 */
func (client *Client) SubscribeBillToOSS(request *SubscribeBillToOSSRequest) (_result *SubscribeBillToOSSResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubscribeBillToOSSResponse{}
	_body, _err := client.SubscribeBillToOSSWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnsubscribeBillToOSSWithOptions(request *UnsubscribeBillToOSSRequest, runtime *util.RuntimeOptions) (_result *UnsubscribeBillToOSSResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MultAccountRelSubscribe)) {
		query["MultAccountRelSubscribe"] = request.MultAccountRelSubscribe
	}

	if !tea.BoolValue(util.IsUnset(request.SubscribeType)) {
		query["SubscribeType"] = request.SubscribeType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnsubscribeBillToOSS"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnsubscribeBillToOSSResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnsubscribeBillToOSS(request *UnsubscribeBillToOSSRequest) (_result *UnsubscribeBillToOSSResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnsubscribeBillToOSSResponse{}
	_body, _err := client.UnsubscribeBillToOSSWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeResourcePackageWithOptions(request *UpgradeResourcePackageRequest, runtime *util.RuntimeOptions) (_result *UpgradeResourcePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EffectiveDate)) {
		query["EffectiveDate"] = request.EffectiveDate
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Specification)) {
		query["Specification"] = request.Specification
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeResourcePackage"),
		Version:     tea.String("2017-12-14"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeResourcePackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeResourcePackage(request *UpgradeResourcePackageRequest) (_result *UpgradeResourcePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeResourcePackageResponse{}
	_body, _err := client.UpgradeResourcePackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
