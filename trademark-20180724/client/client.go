// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AcceptPartnerNotificationRequest struct {
	BizId     *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Material  *string `json:"Material,omitempty" xml:"Material,omitempty"`
	Operation *string `json:"Operation,omitempty" xml:"Operation,omitempty"`
	Remark    *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s AcceptPartnerNotificationRequest) String() string {
	return tea.Prettify(s)
}

func (s AcceptPartnerNotificationRequest) GoString() string {
	return s.String()
}

func (s *AcceptPartnerNotificationRequest) SetBizId(v string) *AcceptPartnerNotificationRequest {
	s.BizId = &v
	return s
}

func (s *AcceptPartnerNotificationRequest) SetMaterial(v string) *AcceptPartnerNotificationRequest {
	s.Material = &v
	return s
}

func (s *AcceptPartnerNotificationRequest) SetOperation(v string) *AcceptPartnerNotificationRequest {
	s.Operation = &v
	return s
}

func (s *AcceptPartnerNotificationRequest) SetRemark(v string) *AcceptPartnerNotificationRequest {
	s.Remark = &v
	return s
}

type AcceptPartnerNotificationResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AcceptPartnerNotificationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AcceptPartnerNotificationResponseBody) GoString() string {
	return s.String()
}

func (s *AcceptPartnerNotificationResponseBody) SetErrorCode(v string) *AcceptPartnerNotificationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AcceptPartnerNotificationResponseBody) SetErrorMsg(v string) *AcceptPartnerNotificationResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *AcceptPartnerNotificationResponseBody) SetRequestId(v string) *AcceptPartnerNotificationResponseBody {
	s.RequestId = &v
	return s
}

func (s *AcceptPartnerNotificationResponseBody) SetSuccess(v bool) *AcceptPartnerNotificationResponseBody {
	s.Success = &v
	return s
}

type AcceptPartnerNotificationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AcceptPartnerNotificationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AcceptPartnerNotificationResponse) String() string {
	return tea.Prettify(s)
}

func (s AcceptPartnerNotificationResponse) GoString() string {
	return s.String()
}

func (s *AcceptPartnerNotificationResponse) SetHeaders(v map[string]*string) *AcceptPartnerNotificationResponse {
	s.Headers = v
	return s
}

func (s *AcceptPartnerNotificationResponse) SetStatusCode(v int32) *AcceptPartnerNotificationResponse {
	s.StatusCode = &v
	return s
}

func (s *AcceptPartnerNotificationResponse) SetBody(v *AcceptPartnerNotificationResponseBody) *AcceptPartnerNotificationResponse {
	s.Body = v
	return s
}

type ApplyNotaryPostRequest struct {
	NotaryOrderId   *int64  `json:"NotaryOrderId,omitempty" xml:"NotaryOrderId,omitempty"`
	ReceiverAddress *string `json:"ReceiverAddress,omitempty" xml:"ReceiverAddress,omitempty"`
	ReceiverName    *string `json:"ReceiverName,omitempty" xml:"ReceiverName,omitempty"`
	ReceiverPhone   *string `json:"ReceiverPhone,omitempty" xml:"ReceiverPhone,omitempty"`
}

func (s ApplyNotaryPostRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyNotaryPostRequest) GoString() string {
	return s.String()
}

func (s *ApplyNotaryPostRequest) SetNotaryOrderId(v int64) *ApplyNotaryPostRequest {
	s.NotaryOrderId = &v
	return s
}

func (s *ApplyNotaryPostRequest) SetReceiverAddress(v string) *ApplyNotaryPostRequest {
	s.ReceiverAddress = &v
	return s
}

func (s *ApplyNotaryPostRequest) SetReceiverName(v string) *ApplyNotaryPostRequest {
	s.ReceiverName = &v
	return s
}

func (s *ApplyNotaryPostRequest) SetReceiverPhone(v string) *ApplyNotaryPostRequest {
	s.ReceiverPhone = &v
	return s
}

type ApplyNotaryPostResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ApplyNotaryPostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyNotaryPostResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyNotaryPostResponseBody) SetErrorCode(v string) *ApplyNotaryPostResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ApplyNotaryPostResponseBody) SetErrorMsg(v string) *ApplyNotaryPostResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ApplyNotaryPostResponseBody) SetRequestId(v string) *ApplyNotaryPostResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyNotaryPostResponseBody) SetSuccess(v bool) *ApplyNotaryPostResponseBody {
	s.Success = &v
	return s
}

type ApplyNotaryPostResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ApplyNotaryPostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ApplyNotaryPostResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyNotaryPostResponse) GoString() string {
	return s.String()
}

func (s *ApplyNotaryPostResponse) SetHeaders(v map[string]*string) *ApplyNotaryPostResponse {
	s.Headers = v
	return s
}

func (s *ApplyNotaryPostResponse) SetStatusCode(v int32) *ApplyNotaryPostResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyNotaryPostResponse) SetBody(v *ApplyNotaryPostResponseBody) *ApplyNotaryPostResponse {
	s.Body = v
	return s
}

type AskAdjudicationFileRequest struct {
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	ContactAddress  *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactCity     *string `json:"ContactCity,omitempty" xml:"ContactCity,omitempty"`
	ContactCounty   *string `json:"ContactCounty,omitempty" xml:"ContactCounty,omitempty"`
	ContactDistrict *string `json:"ContactDistrict,omitempty" xml:"ContactDistrict,omitempty"`
	ContactName     *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber   *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactProvince *string `json:"ContactProvince,omitempty" xml:"ContactProvince,omitempty"`
}

func (s AskAdjudicationFileRequest) String() string {
	return tea.Prettify(s)
}

func (s AskAdjudicationFileRequest) GoString() string {
	return s.String()
}

func (s *AskAdjudicationFileRequest) SetBizId(v string) *AskAdjudicationFileRequest {
	s.BizId = &v
	return s
}

func (s *AskAdjudicationFileRequest) SetContactAddress(v string) *AskAdjudicationFileRequest {
	s.ContactAddress = &v
	return s
}

func (s *AskAdjudicationFileRequest) SetContactCity(v string) *AskAdjudicationFileRequest {
	s.ContactCity = &v
	return s
}

func (s *AskAdjudicationFileRequest) SetContactCounty(v string) *AskAdjudicationFileRequest {
	s.ContactCounty = &v
	return s
}

func (s *AskAdjudicationFileRequest) SetContactDistrict(v string) *AskAdjudicationFileRequest {
	s.ContactDistrict = &v
	return s
}

func (s *AskAdjudicationFileRequest) SetContactName(v string) *AskAdjudicationFileRequest {
	s.ContactName = &v
	return s
}

func (s *AskAdjudicationFileRequest) SetContactNumber(v string) *AskAdjudicationFileRequest {
	s.ContactNumber = &v
	return s
}

func (s *AskAdjudicationFileRequest) SetContactProvince(v string) *AskAdjudicationFileRequest {
	s.ContactProvince = &v
	return s
}

type AskAdjudicationFileResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AskAdjudicationFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AskAdjudicationFileResponseBody) GoString() string {
	return s.String()
}

func (s *AskAdjudicationFileResponseBody) SetRequestId(v string) *AskAdjudicationFileResponseBody {
	s.RequestId = &v
	return s
}

type AskAdjudicationFileResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AskAdjudicationFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AskAdjudicationFileResponse) String() string {
	return tea.Prettify(s)
}

func (s AskAdjudicationFileResponse) GoString() string {
	return s.String()
}

func (s *AskAdjudicationFileResponse) SetHeaders(v map[string]*string) *AskAdjudicationFileResponse {
	s.Headers = v
	return s
}

func (s *AskAdjudicationFileResponse) SetStatusCode(v int32) *AskAdjudicationFileResponse {
	s.StatusCode = &v
	return s
}

func (s *AskAdjudicationFileResponse) SetBody(v *AskAdjudicationFileResponseBody) *AskAdjudicationFileResponse {
	s.Body = v
	return s
}

type BindMaterialRequest struct {
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	LegalNoticeKey *string `json:"LegalNoticeKey,omitempty" xml:"LegalNoticeKey,omitempty"`
	LoaOssKey      *string `json:"LoaOssKey,omitempty" xml:"LoaOssKey,omitempty"`
	MaterialId     *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
}

func (s BindMaterialRequest) String() string {
	return tea.Prettify(s)
}

func (s BindMaterialRequest) GoString() string {
	return s.String()
}

func (s *BindMaterialRequest) SetBizId(v string) *BindMaterialRequest {
	s.BizId = &v
	return s
}

func (s *BindMaterialRequest) SetLegalNoticeKey(v string) *BindMaterialRequest {
	s.LegalNoticeKey = &v
	return s
}

func (s *BindMaterialRequest) SetLoaOssKey(v string) *BindMaterialRequest {
	s.LoaOssKey = &v
	return s
}

func (s *BindMaterialRequest) SetMaterialId(v string) *BindMaterialRequest {
	s.MaterialId = &v
	return s
}

type BindMaterialResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindMaterialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindMaterialResponseBody) GoString() string {
	return s.String()
}

func (s *BindMaterialResponseBody) SetRequestId(v string) *BindMaterialResponseBody {
	s.RequestId = &v
	return s
}

type BindMaterialResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BindMaterialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindMaterialResponse) String() string {
	return tea.Prettify(s)
}

func (s BindMaterialResponse) GoString() string {
	return s.String()
}

func (s *BindMaterialResponse) SetHeaders(v map[string]*string) *BindMaterialResponse {
	s.Headers = v
	return s
}

func (s *BindMaterialResponse) SetStatusCode(v int32) *BindMaterialResponse {
	s.StatusCode = &v
	return s
}

func (s *BindMaterialResponse) SetBody(v *BindMaterialResponseBody) *BindMaterialResponse {
	s.Body = v
	return s
}

type CancelTradeOrderRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s CancelTradeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelTradeOrderRequest) GoString() string {
	return s.String()
}

func (s *CancelTradeOrderRequest) SetBizId(v string) *CancelTradeOrderRequest {
	s.BizId = &v
	return s
}

type CancelTradeOrderResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CancelTradeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelTradeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *CancelTradeOrderResponseBody) SetErrorCode(v string) *CancelTradeOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CancelTradeOrderResponseBody) SetErrorMsg(v string) *CancelTradeOrderResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CancelTradeOrderResponseBody) SetRequestId(v string) *CancelTradeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelTradeOrderResponseBody) SetSuccess(v bool) *CancelTradeOrderResponseBody {
	s.Success = &v
	return s
}

type CancelTradeOrderResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CancelTradeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelTradeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelTradeOrderResponse) GoString() string {
	return s.String()
}

func (s *CancelTradeOrderResponse) SetHeaders(v map[string]*string) *CancelTradeOrderResponse {
	s.Headers = v
	return s
}

func (s *CancelTradeOrderResponse) SetStatusCode(v int32) *CancelTradeOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelTradeOrderResponse) SetBody(v *CancelTradeOrderResponseBody) *CancelTradeOrderResponse {
	s.Body = v
	return s
}

type CheckFlsmFillRequest struct {
	ApplicantType *string `json:"ApplicantType,omitempty" xml:"ApplicantType,omitempty"`
	OssKey        *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
	PersonalType  *string `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	WtrName       *string `json:"WtrName,omitempty" xml:"WtrName,omitempty"`
}

func (s CheckFlsmFillRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckFlsmFillRequest) GoString() string {
	return s.String()
}

func (s *CheckFlsmFillRequest) SetApplicantType(v string) *CheckFlsmFillRequest {
	s.ApplicantType = &v
	return s
}

func (s *CheckFlsmFillRequest) SetOssKey(v string) *CheckFlsmFillRequest {
	s.OssKey = &v
	return s
}

func (s *CheckFlsmFillRequest) SetPersonalType(v string) *CheckFlsmFillRequest {
	s.PersonalType = &v
	return s
}

func (s *CheckFlsmFillRequest) SetWtrName(v string) *CheckFlsmFillRequest {
	s.WtrName = &v
	return s
}

type CheckFlsmFillResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Tips      *string `json:"Tips,omitempty" xml:"Tips,omitempty"`
}

func (s CheckFlsmFillResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckFlsmFillResponseBody) GoString() string {
	return s.String()
}

func (s *CheckFlsmFillResponseBody) SetRequestId(v string) *CheckFlsmFillResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckFlsmFillResponseBody) SetTips(v string) *CheckFlsmFillResponseBody {
	s.Tips = &v
	return s
}

type CheckFlsmFillResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CheckFlsmFillResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckFlsmFillResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckFlsmFillResponse) GoString() string {
	return s.String()
}

func (s *CheckFlsmFillResponse) SetHeaders(v map[string]*string) *CheckFlsmFillResponse {
	s.Headers = v
	return s
}

func (s *CheckFlsmFillResponse) SetStatusCode(v int32) *CheckFlsmFillResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckFlsmFillResponse) SetBody(v *CheckFlsmFillResponseBody) *CheckFlsmFillResponse {
	s.Body = v
	return s
}

type CheckIfCollectedRequest struct {
	ItemIdList *string `json:"ItemIdList,omitempty" xml:"ItemIdList,omitempty"`
	PageNum    *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Type       *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CheckIfCollectedRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckIfCollectedRequest) GoString() string {
	return s.String()
}

func (s *CheckIfCollectedRequest) SetItemIdList(v string) *CheckIfCollectedRequest {
	s.ItemIdList = &v
	return s
}

func (s *CheckIfCollectedRequest) SetPageNum(v int32) *CheckIfCollectedRequest {
	s.PageNum = &v
	return s
}

func (s *CheckIfCollectedRequest) SetPageSize(v int32) *CheckIfCollectedRequest {
	s.PageSize = &v
	return s
}

func (s *CheckIfCollectedRequest) SetType(v int32) *CheckIfCollectedRequest {
	s.Type = &v
	return s
}

type CheckIfCollectedResponseBody struct {
	CurrentPageNum *int32                            `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *CheckIfCollectedResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                            `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                            `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s CheckIfCollectedResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckIfCollectedResponseBody) GoString() string {
	return s.String()
}

func (s *CheckIfCollectedResponseBody) SetCurrentPageNum(v int32) *CheckIfCollectedResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *CheckIfCollectedResponseBody) SetData(v *CheckIfCollectedResponseBodyData) *CheckIfCollectedResponseBody {
	s.Data = v
	return s
}

func (s *CheckIfCollectedResponseBody) SetPageSize(v int32) *CheckIfCollectedResponseBody {
	s.PageSize = &v
	return s
}

func (s *CheckIfCollectedResponseBody) SetRequestId(v string) *CheckIfCollectedResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckIfCollectedResponseBody) SetTotalItemNum(v int32) *CheckIfCollectedResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *CheckIfCollectedResponseBody) SetTotalPageNum(v int32) *CheckIfCollectedResponseBody {
	s.TotalPageNum = &v
	return s
}

type CheckIfCollectedResponseBodyData struct {
	Trademark []*CheckIfCollectedResponseBodyDataTrademark `json:"Trademark,omitempty" xml:"Trademark,omitempty" type:"Repeated"`
}

func (s CheckIfCollectedResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CheckIfCollectedResponseBodyData) GoString() string {
	return s.String()
}

func (s *CheckIfCollectedResponseBodyData) SetTrademark(v []*CheckIfCollectedResponseBodyDataTrademark) *CheckIfCollectedResponseBodyData {
	s.Trademark = v
	return s
}

type CheckIfCollectedResponseBodyDataTrademark struct {
	Id         *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	ItemIdList *string `json:"ItemIdList,omitempty" xml:"ItemIdList,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type       *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CheckIfCollectedResponseBodyDataTrademark) String() string {
	return tea.Prettify(s)
}

func (s CheckIfCollectedResponseBodyDataTrademark) GoString() string {
	return s.String()
}

func (s *CheckIfCollectedResponseBodyDataTrademark) SetId(v int64) *CheckIfCollectedResponseBodyDataTrademark {
	s.Id = &v
	return s
}

func (s *CheckIfCollectedResponseBodyDataTrademark) SetItemIdList(v string) *CheckIfCollectedResponseBodyDataTrademark {
	s.ItemIdList = &v
	return s
}

func (s *CheckIfCollectedResponseBodyDataTrademark) SetName(v string) *CheckIfCollectedResponseBodyDataTrademark {
	s.Name = &v
	return s
}

func (s *CheckIfCollectedResponseBodyDataTrademark) SetType(v int32) *CheckIfCollectedResponseBodyDataTrademark {
	s.Type = &v
	return s
}

type CheckIfCollectedResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CheckIfCollectedResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckIfCollectedResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckIfCollectedResponse) GoString() string {
	return s.String()
}

func (s *CheckIfCollectedResponse) SetHeaders(v map[string]*string) *CheckIfCollectedResponse {
	s.Headers = v
	return s
}

func (s *CheckIfCollectedResponse) SetStatusCode(v int32) *CheckIfCollectedResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckIfCollectedResponse) SetBody(v *CheckIfCollectedResponseBody) *CheckIfCollectedResponse {
	s.Body = v
	return s
}

type CheckLoaFillRequest struct {
	ApplicantType  *string `json:"ApplicantType,omitempty" xml:"ApplicantType,omitempty"`
	BizType        *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ContactName    *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber  *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactZipcode *string `json:"ContactZipcode,omitempty" xml:"ContactZipcode,omitempty"`
	OssKey         *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
	PersonalType   *string `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PrincipalName  *string `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WtrName        *string `json:"WtrName,omitempty" xml:"WtrName,omitempty"`
}

func (s CheckLoaFillRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckLoaFillRequest) GoString() string {
	return s.String()
}

func (s *CheckLoaFillRequest) SetApplicantType(v string) *CheckLoaFillRequest {
	s.ApplicantType = &v
	return s
}

func (s *CheckLoaFillRequest) SetBizType(v string) *CheckLoaFillRequest {
	s.BizType = &v
	return s
}

func (s *CheckLoaFillRequest) SetContactName(v string) *CheckLoaFillRequest {
	s.ContactName = &v
	return s
}

func (s *CheckLoaFillRequest) SetContactNumber(v string) *CheckLoaFillRequest {
	s.ContactNumber = &v
	return s
}

func (s *CheckLoaFillRequest) SetContactZipcode(v string) *CheckLoaFillRequest {
	s.ContactZipcode = &v
	return s
}

func (s *CheckLoaFillRequest) SetOssKey(v string) *CheckLoaFillRequest {
	s.OssKey = &v
	return s
}

func (s *CheckLoaFillRequest) SetPersonalType(v string) *CheckLoaFillRequest {
	s.PersonalType = &v
	return s
}

func (s *CheckLoaFillRequest) SetPrincipalName(v string) *CheckLoaFillRequest {
	s.PrincipalName = &v
	return s
}

func (s *CheckLoaFillRequest) SetType(v string) *CheckLoaFillRequest {
	s.Type = &v
	return s
}

func (s *CheckLoaFillRequest) SetWtrName(v string) *CheckLoaFillRequest {
	s.WtrName = &v
	return s
}

type CheckLoaFillResponseBody struct {
	Data      *CheckLoaFillResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckLoaFillResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckLoaFillResponseBody) GoString() string {
	return s.String()
}

func (s *CheckLoaFillResponseBody) SetData(v *CheckLoaFillResponseBodyData) *CheckLoaFillResponseBody {
	s.Data = v
	return s
}

func (s *CheckLoaFillResponseBody) SetRequestId(v string) *CheckLoaFillResponseBody {
	s.RequestId = &v
	return s
}

type CheckLoaFillResponseBodyData struct {
	AddressFill       *bool                                  `json:"AddressFill,omitempty" xml:"AddressFill,omitempty"`
	CountryFill       *bool                                  `json:"CountryFill,omitempty" xml:"CountryFill,omitempty"`
	ErrorMsgs         *CheckLoaFillResponseBodyDataErrorMsgs `json:"ErrorMsgs,omitempty" xml:"ErrorMsgs,omitempty" type:"Struct"`
	MaterialNameFill  *bool                                  `json:"MaterialNameFill,omitempty" xml:"MaterialNameFill,omitempty"`
	NationalityFill   *bool                                  `json:"NationalityFill,omitempty" xml:"NationalityFill,omitempty"`
	StampFill         *bool                                  `json:"StampFill,omitempty" xml:"StampFill,omitempty"`
	TemplateUrl       *string                                `json:"TemplateUrl,omitempty" xml:"TemplateUrl,omitempty"`
	Tips              *string                                `json:"Tips,omitempty" xml:"Tips,omitempty"`
	TradeMarkNameFill *bool                                  `json:"TradeMarkNameFill,omitempty" xml:"TradeMarkNameFill,omitempty"`
}

func (s CheckLoaFillResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CheckLoaFillResponseBodyData) GoString() string {
	return s.String()
}

func (s *CheckLoaFillResponseBodyData) SetAddressFill(v bool) *CheckLoaFillResponseBodyData {
	s.AddressFill = &v
	return s
}

func (s *CheckLoaFillResponseBodyData) SetCountryFill(v bool) *CheckLoaFillResponseBodyData {
	s.CountryFill = &v
	return s
}

func (s *CheckLoaFillResponseBodyData) SetErrorMsgs(v *CheckLoaFillResponseBodyDataErrorMsgs) *CheckLoaFillResponseBodyData {
	s.ErrorMsgs = v
	return s
}

func (s *CheckLoaFillResponseBodyData) SetMaterialNameFill(v bool) *CheckLoaFillResponseBodyData {
	s.MaterialNameFill = &v
	return s
}

func (s *CheckLoaFillResponseBodyData) SetNationalityFill(v bool) *CheckLoaFillResponseBodyData {
	s.NationalityFill = &v
	return s
}

func (s *CheckLoaFillResponseBodyData) SetStampFill(v bool) *CheckLoaFillResponseBodyData {
	s.StampFill = &v
	return s
}

func (s *CheckLoaFillResponseBodyData) SetTemplateUrl(v string) *CheckLoaFillResponseBodyData {
	s.TemplateUrl = &v
	return s
}

func (s *CheckLoaFillResponseBodyData) SetTips(v string) *CheckLoaFillResponseBodyData {
	s.Tips = &v
	return s
}

func (s *CheckLoaFillResponseBodyData) SetTradeMarkNameFill(v bool) *CheckLoaFillResponseBodyData {
	s.TradeMarkNameFill = &v
	return s
}

type CheckLoaFillResponseBodyDataErrorMsgs struct {
	ErrorMsg []*string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty" type:"Repeated"`
}

func (s CheckLoaFillResponseBodyDataErrorMsgs) String() string {
	return tea.Prettify(s)
}

func (s CheckLoaFillResponseBodyDataErrorMsgs) GoString() string {
	return s.String()
}

func (s *CheckLoaFillResponseBodyDataErrorMsgs) SetErrorMsg(v []*string) *CheckLoaFillResponseBodyDataErrorMsgs {
	s.ErrorMsg = v
	return s
}

type CheckLoaFillResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CheckLoaFillResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckLoaFillResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckLoaFillResponse) GoString() string {
	return s.String()
}

func (s *CheckLoaFillResponse) SetHeaders(v map[string]*string) *CheckLoaFillResponse {
	s.Headers = v
	return s
}

func (s *CheckLoaFillResponse) SetStatusCode(v int32) *CheckLoaFillResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckLoaFillResponse) SetBody(v *CheckLoaFillResponseBody) *CheckLoaFillResponse {
	s.Body = v
	return s
}

type CheckTrademarkIconRequest struct {
	EventSceneType      *int32  `json:"EventSceneType,omitempty" xml:"EventSceneType,omitempty"`
	TrademarkIconOssKey *string `json:"TrademarkIconOssKey,omitempty" xml:"TrademarkIconOssKey,omitempty"`
}

func (s CheckTrademarkIconRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckTrademarkIconRequest) GoString() string {
	return s.String()
}

func (s *CheckTrademarkIconRequest) SetEventSceneType(v int32) *CheckTrademarkIconRequest {
	s.EventSceneType = &v
	return s
}

func (s *CheckTrademarkIconRequest) SetTrademarkIconOssKey(v string) *CheckTrademarkIconRequest {
	s.TrademarkIconOssKey = &v
	return s
}

type CheckTrademarkIconResponseBody struct {
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CheckTrademarkIconResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckTrademarkIconResponseBody) GoString() string {
	return s.String()
}

func (s *CheckTrademarkIconResponseBody) SetMessage(v string) *CheckTrademarkIconResponseBody {
	s.Message = &v
	return s
}

func (s *CheckTrademarkIconResponseBody) SetRequestId(v string) *CheckTrademarkIconResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckTrademarkIconResponseBody) SetResult(v string) *CheckTrademarkIconResponseBody {
	s.Result = &v
	return s
}

type CheckTrademarkIconResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CheckTrademarkIconResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckTrademarkIconResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckTrademarkIconResponse) GoString() string {
	return s.String()
}

func (s *CheckTrademarkIconResponse) SetHeaders(v map[string]*string) *CheckTrademarkIconResponse {
	s.Headers = v
	return s
}

func (s *CheckTrademarkIconResponse) SetStatusCode(v int32) *CheckTrademarkIconResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckTrademarkIconResponse) SetBody(v *CheckTrademarkIconResponseBody) *CheckTrademarkIconResponse {
	s.Body = v
	return s
}

type CheckTrademarkOrderRequest struct {
	AgreementId    *string `json:"AgreementId,omitempty" xml:"AgreementId,omitempty"`
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Channel        *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	IsBlackIcon    *bool   `json:"IsBlackIcon,omitempty" xml:"IsBlackIcon,omitempty"`
	LoaOssKey      *string `json:"LoaOssKey,omitempty" xml:"LoaOssKey,omitempty"`
	LogoGoodsId    *string `json:"LogoGoodsId,omitempty" xml:"LogoGoodsId,omitempty"`
	MaterialId     *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	OrderData      *string `json:"OrderData,omitempty" xml:"OrderData,omitempty"`
	PartnerCode    *string `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	PhoneNum       *string `json:"PhoneNum,omitempty" xml:"PhoneNum,omitempty"`
	RealUserName   *string `json:"RealUserName,omitempty" xml:"RealUserName,omitempty"`
	RegisterName   *string `json:"RegisterName,omitempty" xml:"RegisterName,omitempty"`
	RegisterNumber *string `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	RenewInfoId    *string `json:"RenewInfoId,omitempty" xml:"RenewInfoId,omitempty"`
	RootCode       *string `json:"RootCode,omitempty" xml:"RootCode,omitempty"`
	TmComment      *string `json:"TmComment,omitempty" xml:"TmComment,omitempty"`
	TmIcon         *string `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName         *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNameType     *string `json:"TmNameType,omitempty" xml:"TmNameType,omitempty"`
	Type           *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Uid            *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	UserId         *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CheckTrademarkOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckTrademarkOrderRequest) GoString() string {
	return s.String()
}

func (s *CheckTrademarkOrderRequest) SetAgreementId(v string) *CheckTrademarkOrderRequest {
	s.AgreementId = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetBizId(v string) *CheckTrademarkOrderRequest {
	s.BizId = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetChannel(v string) *CheckTrademarkOrderRequest {
	s.Channel = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetIsBlackIcon(v bool) *CheckTrademarkOrderRequest {
	s.IsBlackIcon = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetLoaOssKey(v string) *CheckTrademarkOrderRequest {
	s.LoaOssKey = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetLogoGoodsId(v string) *CheckTrademarkOrderRequest {
	s.LogoGoodsId = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetMaterialId(v string) *CheckTrademarkOrderRequest {
	s.MaterialId = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetOrderData(v string) *CheckTrademarkOrderRequest {
	s.OrderData = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetPartnerCode(v string) *CheckTrademarkOrderRequest {
	s.PartnerCode = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetPhoneNum(v string) *CheckTrademarkOrderRequest {
	s.PhoneNum = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetRealUserName(v string) *CheckTrademarkOrderRequest {
	s.RealUserName = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetRegisterName(v string) *CheckTrademarkOrderRequest {
	s.RegisterName = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetRegisterNumber(v string) *CheckTrademarkOrderRequest {
	s.RegisterNumber = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetRenewInfoId(v string) *CheckTrademarkOrderRequest {
	s.RenewInfoId = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetRootCode(v string) *CheckTrademarkOrderRequest {
	s.RootCode = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetTmComment(v string) *CheckTrademarkOrderRequest {
	s.TmComment = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetTmIcon(v string) *CheckTrademarkOrderRequest {
	s.TmIcon = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetTmName(v string) *CheckTrademarkOrderRequest {
	s.TmName = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetTmNameType(v string) *CheckTrademarkOrderRequest {
	s.TmNameType = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetType(v int32) *CheckTrademarkOrderRequest {
	s.Type = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetUid(v string) *CheckTrademarkOrderRequest {
	s.Uid = &v
	return s
}

func (s *CheckTrademarkOrderRequest) SetUserId(v int64) *CheckTrademarkOrderRequest {
	s.UserId = &v
	return s
}

type CheckTrademarkOrderResponseBody struct {
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorMsg  *string                `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CheckTrademarkOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckTrademarkOrderResponseBody) GoString() string {
	return s.String()
}

func (s *CheckTrademarkOrderResponseBody) SetData(v map[string]interface{}) *CheckTrademarkOrderResponseBody {
	s.Data = v
	return s
}

func (s *CheckTrademarkOrderResponseBody) SetErrorMsg(v string) *CheckTrademarkOrderResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CheckTrademarkOrderResponseBody) SetRequestId(v string) *CheckTrademarkOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckTrademarkOrderResponseBody) SetSuccess(v bool) *CheckTrademarkOrderResponseBody {
	s.Success = &v
	return s
}

type CheckTrademarkOrderResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CheckTrademarkOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckTrademarkOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckTrademarkOrderResponse) GoString() string {
	return s.String()
}

func (s *CheckTrademarkOrderResponse) SetHeaders(v map[string]*string) *CheckTrademarkOrderResponse {
	s.Headers = v
	return s
}

func (s *CheckTrademarkOrderResponse) SetStatusCode(v int32) *CheckTrademarkOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckTrademarkOrderResponse) SetBody(v *CheckTrademarkOrderResponseBody) *CheckTrademarkOrderResponse {
	s.Body = v
	return s
}

type CombineLoaRequest struct {
	Address         *string `json:"Address,omitempty" xml:"Address,omitempty"`
	ApplicantType   *string `json:"ApplicantType,omitempty" xml:"ApplicantType,omitempty"`
	ContactName     *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactPhone    *string `json:"ContactPhone,omitempty" xml:"ContactPhone,omitempty"`
	ContactPostcode *string `json:"ContactPostcode,omitempty" xml:"ContactPostcode,omitempty"`
	MaterialId      *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	MaterialName    *string `json:"MaterialName,omitempty" xml:"MaterialName,omitempty"`
	Nationality     *string `json:"Nationality,omitempty" xml:"Nationality,omitempty"`
	PersonalType    *string `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PrincipalName   *int32  `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	TmNumber        *string `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	TmProduceType   *string `json:"TmProduceType,omitempty" xml:"TmProduceType,omitempty"`
	TrademarkName   *string `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
}

func (s CombineLoaRequest) String() string {
	return tea.Prettify(s)
}

func (s CombineLoaRequest) GoString() string {
	return s.String()
}

func (s *CombineLoaRequest) SetAddress(v string) *CombineLoaRequest {
	s.Address = &v
	return s
}

func (s *CombineLoaRequest) SetApplicantType(v string) *CombineLoaRequest {
	s.ApplicantType = &v
	return s
}

func (s *CombineLoaRequest) SetContactName(v string) *CombineLoaRequest {
	s.ContactName = &v
	return s
}

func (s *CombineLoaRequest) SetContactPhone(v string) *CombineLoaRequest {
	s.ContactPhone = &v
	return s
}

func (s *CombineLoaRequest) SetContactPostcode(v string) *CombineLoaRequest {
	s.ContactPostcode = &v
	return s
}

func (s *CombineLoaRequest) SetMaterialId(v string) *CombineLoaRequest {
	s.MaterialId = &v
	return s
}

func (s *CombineLoaRequest) SetMaterialName(v string) *CombineLoaRequest {
	s.MaterialName = &v
	return s
}

func (s *CombineLoaRequest) SetNationality(v string) *CombineLoaRequest {
	s.Nationality = &v
	return s
}

func (s *CombineLoaRequest) SetPersonalType(v string) *CombineLoaRequest {
	s.PersonalType = &v
	return s
}

func (s *CombineLoaRequest) SetPrincipalName(v int32) *CombineLoaRequest {
	s.PrincipalName = &v
	return s
}

func (s *CombineLoaRequest) SetTmNumber(v string) *CombineLoaRequest {
	s.TmNumber = &v
	return s
}

func (s *CombineLoaRequest) SetTmProduceType(v string) *CombineLoaRequest {
	s.TmProduceType = &v
	return s
}

func (s *CombineLoaRequest) SetTrademarkName(v string) *CombineLoaRequest {
	s.TrademarkName = &v
	return s
}

type CombineLoaResponseBody struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateCombineUrl *string `json:"TemplateCombineUrl,omitempty" xml:"TemplateCombineUrl,omitempty"`
}

func (s CombineLoaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CombineLoaResponseBody) GoString() string {
	return s.String()
}

func (s *CombineLoaResponseBody) SetRequestId(v string) *CombineLoaResponseBody {
	s.RequestId = &v
	return s
}

func (s *CombineLoaResponseBody) SetTemplateCombineUrl(v string) *CombineLoaResponseBody {
	s.TemplateCombineUrl = &v
	return s
}

type CombineLoaResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CombineLoaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CombineLoaResponse) String() string {
	return tea.Prettify(s)
}

func (s CombineLoaResponse) GoString() string {
	return s.String()
}

func (s *CombineLoaResponse) SetHeaders(v map[string]*string) *CombineLoaResponse {
	s.Headers = v
	return s
}

func (s *CombineLoaResponse) SetStatusCode(v int32) *CombineLoaResponse {
	s.StatusCode = &v
	return s
}

func (s *CombineLoaResponse) SetBody(v *CombineLoaResponseBody) *CombineLoaResponse {
	s.Body = v
	return s
}

type CombineWTSRequest struct {
	Address            *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Contact            *string `json:"Contact,omitempty" xml:"Contact,omitempty"`
	ContactAddressPost *string `json:"ContactAddressPost,omitempty" xml:"ContactAddressPost,omitempty"`
	ContactMobile      *string `json:"ContactMobile,omitempty" xml:"ContactMobile,omitempty"`
	MaterialId         *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	MaterialName       *string `json:"MaterialName,omitempty" xml:"MaterialName,omitempty"`
	Nationality        *string `json:"Nationality,omitempty" xml:"Nationality,omitempty"`
	PrincipalName      *string `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	TmNum              *string `json:"TmNum,omitempty" xml:"TmNum,omitempty"`
	TmProduceType      *string `json:"TmProduceType,omitempty" xml:"TmProduceType,omitempty"`
	TrademarkName      *string `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
	WtsType            *string `json:"WtsType,omitempty" xml:"WtsType,omitempty"`
}

func (s CombineWTSRequest) String() string {
	return tea.Prettify(s)
}

func (s CombineWTSRequest) GoString() string {
	return s.String()
}

func (s *CombineWTSRequest) SetAddress(v string) *CombineWTSRequest {
	s.Address = &v
	return s
}

func (s *CombineWTSRequest) SetContact(v string) *CombineWTSRequest {
	s.Contact = &v
	return s
}

func (s *CombineWTSRequest) SetContactAddressPost(v string) *CombineWTSRequest {
	s.ContactAddressPost = &v
	return s
}

func (s *CombineWTSRequest) SetContactMobile(v string) *CombineWTSRequest {
	s.ContactMobile = &v
	return s
}

func (s *CombineWTSRequest) SetMaterialId(v string) *CombineWTSRequest {
	s.MaterialId = &v
	return s
}

func (s *CombineWTSRequest) SetMaterialName(v string) *CombineWTSRequest {
	s.MaterialName = &v
	return s
}

func (s *CombineWTSRequest) SetNationality(v string) *CombineWTSRequest {
	s.Nationality = &v
	return s
}

func (s *CombineWTSRequest) SetPrincipalName(v string) *CombineWTSRequest {
	s.PrincipalName = &v
	return s
}

func (s *CombineWTSRequest) SetTmNum(v string) *CombineWTSRequest {
	s.TmNum = &v
	return s
}

func (s *CombineWTSRequest) SetTmProduceType(v string) *CombineWTSRequest {
	s.TmProduceType = &v
	return s
}

func (s *CombineWTSRequest) SetTrademarkName(v string) *CombineWTSRequest {
	s.TrademarkName = &v
	return s
}

func (s *CombineWTSRequest) SetWtsType(v string) *CombineWTSRequest {
	s.WtsType = &v
	return s
}

type CombineWTSResponseBody struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateCombineUrl *string `json:"TemplateCombineUrl,omitempty" xml:"TemplateCombineUrl,omitempty"`
}

func (s CombineWTSResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CombineWTSResponseBody) GoString() string {
	return s.String()
}

func (s *CombineWTSResponseBody) SetRequestId(v string) *CombineWTSResponseBody {
	s.RequestId = &v
	return s
}

func (s *CombineWTSResponseBody) SetTemplateCombineUrl(v string) *CombineWTSResponseBody {
	s.TemplateCombineUrl = &v
	return s
}

type CombineWTSResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CombineWTSResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CombineWTSResponse) String() string {
	return tea.Prettify(s)
}

func (s CombineWTSResponse) GoString() string {
	return s.String()
}

func (s *CombineWTSResponse) SetHeaders(v map[string]*string) *CombineWTSResponse {
	s.Headers = v
	return s
}

func (s *CombineWTSResponse) SetStatusCode(v int32) *CombineWTSResponse {
	s.StatusCode = &v
	return s
}

func (s *CombineWTSResponse) SetBody(v *CombineWTSResponseBody) *CombineWTSResponse {
	s.Body = v
	return s
}

type ComplementIntentionUserIdRequest struct {
	AliyunKp         *string `json:"AliyunKp,omitempty" xml:"AliyunKp,omitempty"`
	Bid              *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	BizId            *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CallerParentId   *int64  `json:"CallerParentId,omitempty" xml:"CallerParentId,omitempty"`
	CallerType       *string `json:"CallerType,omitempty" xml:"CallerType,omitempty"`
	ComplementUserId *string `json:"ComplementUserId,omitempty" xml:"ComplementUserId,omitempty"`
	Type             *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ComplementIntentionUserIdRequest) String() string {
	return tea.Prettify(s)
}

func (s ComplementIntentionUserIdRequest) GoString() string {
	return s.String()
}

func (s *ComplementIntentionUserIdRequest) SetAliyunKp(v string) *ComplementIntentionUserIdRequest {
	s.AliyunKp = &v
	return s
}

func (s *ComplementIntentionUserIdRequest) SetBid(v string) *ComplementIntentionUserIdRequest {
	s.Bid = &v
	return s
}

func (s *ComplementIntentionUserIdRequest) SetBizId(v string) *ComplementIntentionUserIdRequest {
	s.BizId = &v
	return s
}

func (s *ComplementIntentionUserIdRequest) SetCallerParentId(v int64) *ComplementIntentionUserIdRequest {
	s.CallerParentId = &v
	return s
}

func (s *ComplementIntentionUserIdRequest) SetCallerType(v string) *ComplementIntentionUserIdRequest {
	s.CallerType = &v
	return s
}

func (s *ComplementIntentionUserIdRequest) SetComplementUserId(v string) *ComplementIntentionUserIdRequest {
	s.ComplementUserId = &v
	return s
}

func (s *ComplementIntentionUserIdRequest) SetType(v int32) *ComplementIntentionUserIdRequest {
	s.Type = &v
	return s
}

type ComplementIntentionUserIdResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ComplementIntentionUserIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ComplementIntentionUserIdResponseBody) GoString() string {
	return s.String()
}

func (s *ComplementIntentionUserIdResponseBody) SetRequestId(v string) *ComplementIntentionUserIdResponseBody {
	s.RequestId = &v
	return s
}

type ComplementIntentionUserIdResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ComplementIntentionUserIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ComplementIntentionUserIdResponse) String() string {
	return tea.Prettify(s)
}

func (s ComplementIntentionUserIdResponse) GoString() string {
	return s.String()
}

func (s *ComplementIntentionUserIdResponse) SetHeaders(v map[string]*string) *ComplementIntentionUserIdResponse {
	s.Headers = v
	return s
}

func (s *ComplementIntentionUserIdResponse) SetStatusCode(v int32) *ComplementIntentionUserIdResponse {
	s.StatusCode = &v
	return s
}

func (s *ComplementIntentionUserIdResponse) SetBody(v *ComplementIntentionUserIdResponseBody) *ComplementIntentionUserIdResponse {
	s.Body = v
	return s
}

type ConfirmAdditionalMaterialRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Note  *string `json:"Note,omitempty" xml:"Note,omitempty"`
}

func (s ConfirmAdditionalMaterialRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmAdditionalMaterialRequest) GoString() string {
	return s.String()
}

func (s *ConfirmAdditionalMaterialRequest) SetBizId(v string) *ConfirmAdditionalMaterialRequest {
	s.BizId = &v
	return s
}

func (s *ConfirmAdditionalMaterialRequest) SetNote(v string) *ConfirmAdditionalMaterialRequest {
	s.Note = &v
	return s
}

type ConfirmAdditionalMaterialResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfirmAdditionalMaterialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfirmAdditionalMaterialResponseBody) GoString() string {
	return s.String()
}

func (s *ConfirmAdditionalMaterialResponseBody) SetErrorCode(v string) *ConfirmAdditionalMaterialResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ConfirmAdditionalMaterialResponseBody) SetErrorMsg(v string) *ConfirmAdditionalMaterialResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ConfirmAdditionalMaterialResponseBody) SetRequestId(v string) *ConfirmAdditionalMaterialResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfirmAdditionalMaterialResponseBody) SetSuccess(v bool) *ConfirmAdditionalMaterialResponseBody {
	s.Success = &v
	return s
}

type ConfirmAdditionalMaterialResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfirmAdditionalMaterialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfirmAdditionalMaterialResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmAdditionalMaterialResponse) GoString() string {
	return s.String()
}

func (s *ConfirmAdditionalMaterialResponse) SetHeaders(v map[string]*string) *ConfirmAdditionalMaterialResponse {
	s.Headers = v
	return s
}

func (s *ConfirmAdditionalMaterialResponse) SetStatusCode(v int32) *ConfirmAdditionalMaterialResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfirmAdditionalMaterialResponse) SetBody(v *ConfirmAdditionalMaterialResponseBody) *ConfirmAdditionalMaterialResponse {
	s.Body = v
	return s
}

type ConfirmApplicantRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Note  *string `json:"Note,omitempty" xml:"Note,omitempty"`
}

func (s ConfirmApplicantRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmApplicantRequest) GoString() string {
	return s.String()
}

func (s *ConfirmApplicantRequest) SetBizId(v string) *ConfirmApplicantRequest {
	s.BizId = &v
	return s
}

func (s *ConfirmApplicantRequest) SetNote(v string) *ConfirmApplicantRequest {
	s.Note = &v
	return s
}

type ConfirmApplicantResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfirmApplicantResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfirmApplicantResponseBody) GoString() string {
	return s.String()
}

func (s *ConfirmApplicantResponseBody) SetErrorCode(v string) *ConfirmApplicantResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ConfirmApplicantResponseBody) SetErrorMsg(v string) *ConfirmApplicantResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ConfirmApplicantResponseBody) SetRequestId(v string) *ConfirmApplicantResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfirmApplicantResponseBody) SetSuccess(v bool) *ConfirmApplicantResponseBody {
	s.Success = &v
	return s
}

type ConfirmApplicantResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfirmApplicantResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfirmApplicantResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmApplicantResponse) GoString() string {
	return s.String()
}

func (s *ConfirmApplicantResponse) SetHeaders(v map[string]*string) *ConfirmApplicantResponse {
	s.Headers = v
	return s
}

func (s *ConfirmApplicantResponse) SetStatusCode(v int32) *ConfirmApplicantResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfirmApplicantResponse) SetBody(v *ConfirmApplicantResponseBody) *ConfirmApplicantResponse {
	s.Body = v
	return s
}

type ConfirmDissentOriginalRequest struct {
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	ContactAddress  *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactCity     *string `json:"ContactCity,omitempty" xml:"ContactCity,omitempty"`
	ContactCounty   *string `json:"ContactCounty,omitempty" xml:"ContactCounty,omitempty"`
	ContactDistrict *string `json:"ContactDistrict,omitempty" xml:"ContactDistrict,omitempty"`
	ContactName     *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber   *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactProvince *string `json:"ContactProvince,omitempty" xml:"ContactProvince,omitempty"`
	OperateType     *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
}

func (s ConfirmDissentOriginalRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmDissentOriginalRequest) GoString() string {
	return s.String()
}

func (s *ConfirmDissentOriginalRequest) SetBizId(v string) *ConfirmDissentOriginalRequest {
	s.BizId = &v
	return s
}

func (s *ConfirmDissentOriginalRequest) SetContactAddress(v string) *ConfirmDissentOriginalRequest {
	s.ContactAddress = &v
	return s
}

func (s *ConfirmDissentOriginalRequest) SetContactCity(v string) *ConfirmDissentOriginalRequest {
	s.ContactCity = &v
	return s
}

func (s *ConfirmDissentOriginalRequest) SetContactCounty(v string) *ConfirmDissentOriginalRequest {
	s.ContactCounty = &v
	return s
}

func (s *ConfirmDissentOriginalRequest) SetContactDistrict(v string) *ConfirmDissentOriginalRequest {
	s.ContactDistrict = &v
	return s
}

func (s *ConfirmDissentOriginalRequest) SetContactName(v string) *ConfirmDissentOriginalRequest {
	s.ContactName = &v
	return s
}

func (s *ConfirmDissentOriginalRequest) SetContactNumber(v string) *ConfirmDissentOriginalRequest {
	s.ContactNumber = &v
	return s
}

func (s *ConfirmDissentOriginalRequest) SetContactProvince(v string) *ConfirmDissentOriginalRequest {
	s.ContactProvince = &v
	return s
}

func (s *ConfirmDissentOriginalRequest) SetOperateType(v string) *ConfirmDissentOriginalRequest {
	s.OperateType = &v
	return s
}

type ConfirmDissentOriginalResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConfirmDissentOriginalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfirmDissentOriginalResponseBody) GoString() string {
	return s.String()
}

func (s *ConfirmDissentOriginalResponseBody) SetRequestId(v string) *ConfirmDissentOriginalResponseBody {
	s.RequestId = &v
	return s
}

type ConfirmDissentOriginalResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfirmDissentOriginalResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfirmDissentOriginalResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmDissentOriginalResponse) GoString() string {
	return s.String()
}

func (s *ConfirmDissentOriginalResponse) SetHeaders(v map[string]*string) *ConfirmDissentOriginalResponse {
	s.Headers = v
	return s
}

func (s *ConfirmDissentOriginalResponse) SetStatusCode(v int32) *ConfirmDissentOriginalResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfirmDissentOriginalResponse) SetBody(v *ConfirmDissentOriginalResponseBody) *ConfirmDissentOriginalResponse {
	s.Body = v
	return s
}

type ConvertImageToGrayRequest struct {
	OssKey *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
}

func (s ConvertImageToGrayRequest) String() string {
	return tea.Prettify(s)
}

func (s ConvertImageToGrayRequest) GoString() string {
	return s.String()
}

func (s *ConvertImageToGrayRequest) SetOssKey(v string) *ConvertImageToGrayRequest {
	s.OssKey = &v
	return s
}

type ConvertImageToGrayResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SignatureUrl *string `json:"SignatureUrl,omitempty" xml:"SignatureUrl,omitempty"`
}

func (s ConvertImageToGrayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConvertImageToGrayResponseBody) GoString() string {
	return s.String()
}

func (s *ConvertImageToGrayResponseBody) SetRequestId(v string) *ConvertImageToGrayResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConvertImageToGrayResponseBody) SetSignatureUrl(v string) *ConvertImageToGrayResponseBody {
	s.SignatureUrl = &v
	return s
}

type ConvertImageToGrayResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConvertImageToGrayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConvertImageToGrayResponse) String() string {
	return tea.Prettify(s)
}

func (s ConvertImageToGrayResponse) GoString() string {
	return s.String()
}

func (s *ConvertImageToGrayResponse) SetHeaders(v map[string]*string) *ConvertImageToGrayResponse {
	s.Headers = v
	return s
}

func (s *ConvertImageToGrayResponse) SetStatusCode(v int32) *ConvertImageToGrayResponse {
	s.StatusCode = &v
	return s
}

func (s *ConvertImageToGrayResponse) SetBody(v *ConvertImageToGrayResponseBody) *ConvertImageToGrayResponse {
	s.Body = v
	return s
}

type CopyApplicantRequest struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CopyApplicantRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyApplicantRequest) GoString() string {
	return s.String()
}

func (s *CopyApplicantRequest) SetId(v int64) *CopyApplicantRequest {
	s.Id = &v
	return s
}

type CopyApplicantResponseBody struct {
	Id        *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CopyApplicantResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyApplicantResponseBody) GoString() string {
	return s.String()
}

func (s *CopyApplicantResponseBody) SetId(v int64) *CopyApplicantResponseBody {
	s.Id = &v
	return s
}

func (s *CopyApplicantResponseBody) SetRequestId(v string) *CopyApplicantResponseBody {
	s.RequestId = &v
	return s
}

type CopyApplicantResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CopyApplicantResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopyApplicantResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyApplicantResponse) GoString() string {
	return s.String()
}

func (s *CopyApplicantResponse) SetHeaders(v map[string]*string) *CopyApplicantResponse {
	s.Headers = v
	return s
}

func (s *CopyApplicantResponse) SetStatusCode(v int32) *CopyApplicantResponse {
	s.StatusCode = &v
	return s
}

func (s *CopyApplicantResponse) SetBody(v *CopyApplicantResponseBody) *CopyApplicantResponse {
	s.Body = v
	return s
}

type CreateIntentionOrderRequest struct {
	Channel        *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	IntentionBizId *string `json:"IntentionBizId,omitempty" xml:"IntentionBizId,omitempty"`
}

func (s CreateIntentionOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIntentionOrderRequest) GoString() string {
	return s.String()
}

func (s *CreateIntentionOrderRequest) SetChannel(v string) *CreateIntentionOrderRequest {
	s.Channel = &v
	return s
}

func (s *CreateIntentionOrderRequest) SetIntentionBizId(v string) *CreateIntentionOrderRequest {
	s.IntentionBizId = &v
	return s
}

type CreateIntentionOrderResponseBody struct {
	Data      *CreateIntentionOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorMsg  *string                               `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateIntentionOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIntentionOrderResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIntentionOrderResponseBody) SetData(v *CreateIntentionOrderResponseBodyData) *CreateIntentionOrderResponseBody {
	s.Data = v
	return s
}

func (s *CreateIntentionOrderResponseBody) SetErrorMsg(v string) *CreateIntentionOrderResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateIntentionOrderResponseBody) SetRequestId(v string) *CreateIntentionOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateIntentionOrderResponseBody) SetSuccess(v bool) *CreateIntentionOrderResponseBody {
	s.Success = &v
	return s
}

type CreateIntentionOrderResponseBodyData struct {
	OrderIds []*string `json:"OrderIds,omitempty" xml:"OrderIds,omitempty" type:"Repeated"`
}

func (s CreateIntentionOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateIntentionOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateIntentionOrderResponseBodyData) SetOrderIds(v []*string) *CreateIntentionOrderResponseBodyData {
	s.OrderIds = v
	return s
}

type CreateIntentionOrderResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateIntentionOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateIntentionOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIntentionOrderResponse) GoString() string {
	return s.String()
}

func (s *CreateIntentionOrderResponse) SetHeaders(v map[string]*string) *CreateIntentionOrderResponse {
	s.Headers = v
	return s
}

func (s *CreateIntentionOrderResponse) SetStatusCode(v int32) *CreateIntentionOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIntentionOrderResponse) SetBody(v *CreateIntentionOrderResponseBody) *CreateIntentionOrderResponse {
	s.Body = v
	return s
}

type CreateIntentionOrderGeneratingPayRequest struct {
	Channel         *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	IntentionBizId  *string `json:"IntentionBizId,omitempty" xml:"IntentionBizId,omitempty"`
	PaymentCallback *string `json:"PaymentCallback,omitempty" xml:"PaymentCallback,omitempty"`
}

func (s CreateIntentionOrderGeneratingPayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIntentionOrderGeneratingPayRequest) GoString() string {
	return s.String()
}

func (s *CreateIntentionOrderGeneratingPayRequest) SetChannel(v string) *CreateIntentionOrderGeneratingPayRequest {
	s.Channel = &v
	return s
}

func (s *CreateIntentionOrderGeneratingPayRequest) SetIntentionBizId(v string) *CreateIntentionOrderGeneratingPayRequest {
	s.IntentionBizId = &v
	return s
}

func (s *CreateIntentionOrderGeneratingPayRequest) SetPaymentCallback(v string) *CreateIntentionOrderGeneratingPayRequest {
	s.PaymentCallback = &v
	return s
}

type CreateIntentionOrderGeneratingPayResponseBody struct {
	ErrorMsg  *string  `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	OrderIds  []*int64 `json:"OrderIds,omitempty" xml:"OrderIds,omitempty" type:"Repeated"`
	PayUrl    *string  `json:"PayUrl,omitempty" xml:"PayUrl,omitempty"`
	RequestId *string  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateIntentionOrderGeneratingPayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIntentionOrderGeneratingPayResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIntentionOrderGeneratingPayResponseBody) SetErrorMsg(v string) *CreateIntentionOrderGeneratingPayResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateIntentionOrderGeneratingPayResponseBody) SetOrderIds(v []*int64) *CreateIntentionOrderGeneratingPayResponseBody {
	s.OrderIds = v
	return s
}

func (s *CreateIntentionOrderGeneratingPayResponseBody) SetPayUrl(v string) *CreateIntentionOrderGeneratingPayResponseBody {
	s.PayUrl = &v
	return s
}

func (s *CreateIntentionOrderGeneratingPayResponseBody) SetRequestId(v string) *CreateIntentionOrderGeneratingPayResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateIntentionOrderGeneratingPayResponseBody) SetSuccess(v bool) *CreateIntentionOrderGeneratingPayResponseBody {
	s.Success = &v
	return s
}

type CreateIntentionOrderGeneratingPayResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateIntentionOrderGeneratingPayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateIntentionOrderGeneratingPayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIntentionOrderGeneratingPayResponse) GoString() string {
	return s.String()
}

func (s *CreateIntentionOrderGeneratingPayResponse) SetHeaders(v map[string]*string) *CreateIntentionOrderGeneratingPayResponse {
	s.Headers = v
	return s
}

func (s *CreateIntentionOrderGeneratingPayResponse) SetStatusCode(v int32) *CreateIntentionOrderGeneratingPayResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateIntentionOrderGeneratingPayResponse) SetBody(v *CreateIntentionOrderGeneratingPayResponseBody) *CreateIntentionOrderGeneratingPayResponse {
	s.Body = v
	return s
}

type CreateTrademarkOrderRequest struct {
	AgreementId     *string `json:"AgreementId,omitempty" xml:"AgreementId,omitempty"`
	BigDipperSource *string `json:"BigDipperSource,omitempty" xml:"BigDipperSource,omitempty"`
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Channel         *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	IsBlackIcon     *bool   `json:"IsBlackIcon,omitempty" xml:"IsBlackIcon,omitempty"`
	LegalNoticeKey  *string `json:"LegalNoticeKey,omitempty" xml:"LegalNoticeKey,omitempty"`
	LoaOssKey       *string `json:"LoaOssKey,omitempty" xml:"LoaOssKey,omitempty"`
	MaterialId      *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	OrderData       *string `json:"OrderData,omitempty" xml:"OrderData,omitempty"`
	PartnerCode     *string `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	PhoneNum        *string `json:"PhoneNum,omitempty" xml:"PhoneNum,omitempty"`
	PrincipalName   *int32  `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	RealUserName    *string `json:"RealUserName,omitempty" xml:"RealUserName,omitempty"`
	RegisterName    *string `json:"RegisterName,omitempty" xml:"RegisterName,omitempty"`
	RegisterNumber  *string `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	RenewInfoId     *string `json:"RenewInfoId,omitempty" xml:"RenewInfoId,omitempty"`
	RootCode        *string `json:"RootCode,omitempty" xml:"RootCode,omitempty"`
	SessionId       *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	TmComment       *string `json:"TmComment,omitempty" xml:"TmComment,omitempty"`
	TmIcon          *string `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName          *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNameType      *string `json:"TmNameType,omitempty" xml:"TmNameType,omitempty"`
	Type            *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Ua              *string `json:"Ua,omitempty" xml:"Ua,omitempty"`
	Uid             *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	UserId          *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CreateTrademarkOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTrademarkOrderRequest) GoString() string {
	return s.String()
}

func (s *CreateTrademarkOrderRequest) SetAgreementId(v string) *CreateTrademarkOrderRequest {
	s.AgreementId = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetBigDipperSource(v string) *CreateTrademarkOrderRequest {
	s.BigDipperSource = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetBizId(v string) *CreateTrademarkOrderRequest {
	s.BizId = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetChannel(v string) *CreateTrademarkOrderRequest {
	s.Channel = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetIsBlackIcon(v bool) *CreateTrademarkOrderRequest {
	s.IsBlackIcon = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetLegalNoticeKey(v string) *CreateTrademarkOrderRequest {
	s.LegalNoticeKey = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetLoaOssKey(v string) *CreateTrademarkOrderRequest {
	s.LoaOssKey = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetMaterialId(v string) *CreateTrademarkOrderRequest {
	s.MaterialId = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetOrderData(v string) *CreateTrademarkOrderRequest {
	s.OrderData = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetPartnerCode(v string) *CreateTrademarkOrderRequest {
	s.PartnerCode = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetPhoneNum(v string) *CreateTrademarkOrderRequest {
	s.PhoneNum = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetPrincipalName(v int32) *CreateTrademarkOrderRequest {
	s.PrincipalName = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetRealUserName(v string) *CreateTrademarkOrderRequest {
	s.RealUserName = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetRegisterName(v string) *CreateTrademarkOrderRequest {
	s.RegisterName = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetRegisterNumber(v string) *CreateTrademarkOrderRequest {
	s.RegisterNumber = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetRenewInfoId(v string) *CreateTrademarkOrderRequest {
	s.RenewInfoId = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetRootCode(v string) *CreateTrademarkOrderRequest {
	s.RootCode = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetSessionId(v string) *CreateTrademarkOrderRequest {
	s.SessionId = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetTmComment(v string) *CreateTrademarkOrderRequest {
	s.TmComment = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetTmIcon(v string) *CreateTrademarkOrderRequest {
	s.TmIcon = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetTmName(v string) *CreateTrademarkOrderRequest {
	s.TmName = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetTmNameType(v string) *CreateTrademarkOrderRequest {
	s.TmNameType = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetType(v int32) *CreateTrademarkOrderRequest {
	s.Type = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetUa(v string) *CreateTrademarkOrderRequest {
	s.Ua = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetUid(v string) *CreateTrademarkOrderRequest {
	s.Uid = &v
	return s
}

func (s *CreateTrademarkOrderRequest) SetUserId(v int64) *CreateTrademarkOrderRequest {
	s.UserId = &v
	return s
}

type CreateTrademarkOrderResponseBody struct {
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	OrderId   *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateTrademarkOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTrademarkOrderResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTrademarkOrderResponseBody) SetErrorMsg(v string) *CreateTrademarkOrderResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *CreateTrademarkOrderResponseBody) SetOrderId(v int64) *CreateTrademarkOrderResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateTrademarkOrderResponseBody) SetRequestId(v string) *CreateTrademarkOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTrademarkOrderResponseBody) SetSuccess(v bool) *CreateTrademarkOrderResponseBody {
	s.Success = &v
	return s
}

type CreateTrademarkOrderResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateTrademarkOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateTrademarkOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTrademarkOrderResponse) GoString() string {
	return s.String()
}

func (s *CreateTrademarkOrderResponse) SetHeaders(v map[string]*string) *CreateTrademarkOrderResponse {
	s.Headers = v
	return s
}

func (s *CreateTrademarkOrderResponse) SetStatusCode(v int32) *CreateTrademarkOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTrademarkOrderResponse) SetBody(v *CreateTrademarkOrderResponseBody) *CreateTrademarkOrderResponse {
	s.Body = v
	return s
}

type DeleteMaterialRequest struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteMaterialRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMaterialRequest) GoString() string {
	return s.String()
}

func (s *DeleteMaterialRequest) SetId(v int64) *DeleteMaterialRequest {
	s.Id = &v
	return s
}

type DeleteMaterialResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMaterialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMaterialResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMaterialResponseBody) SetErrorCode(v string) *DeleteMaterialResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteMaterialResponseBody) SetErrorMsg(v string) *DeleteMaterialResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *DeleteMaterialResponseBody) SetRequestId(v string) *DeleteMaterialResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMaterialResponseBody) SetSuccess(v bool) *DeleteMaterialResponseBody {
	s.Success = &v
	return s
}

type DeleteMaterialResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMaterialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMaterialResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMaterialResponse) GoString() string {
	return s.String()
}

func (s *DeleteMaterialResponse) SetHeaders(v map[string]*string) *DeleteMaterialResponse {
	s.Headers = v
	return s
}

func (s *DeleteMaterialResponse) SetStatusCode(v int32) *DeleteMaterialResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMaterialResponse) SetBody(v *DeleteMaterialResponseBody) *DeleteMaterialResponse {
	s.Body = v
	return s
}

type DeleteTmMonitorRuleRequest struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteTmMonitorRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTmMonitorRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteTmMonitorRuleRequest) SetId(v int64) *DeleteTmMonitorRuleRequest {
	s.Id = &v
	return s
}

type DeleteTmMonitorRuleResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteTmMonitorRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTmMonitorRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTmMonitorRuleResponseBody) SetErrorCode(v string) *DeleteTmMonitorRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteTmMonitorRuleResponseBody) SetErrorMsg(v string) *DeleteTmMonitorRuleResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *DeleteTmMonitorRuleResponseBody) SetRequestId(v string) *DeleteTmMonitorRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTmMonitorRuleResponseBody) SetSuccess(v bool) *DeleteTmMonitorRuleResponseBody {
	s.Success = &v
	return s
}

type DeleteTmMonitorRuleResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteTmMonitorRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTmMonitorRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTmMonitorRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteTmMonitorRuleResponse) SetHeaders(v map[string]*string) *DeleteTmMonitorRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteTmMonitorRuleResponse) SetStatusCode(v int32) *DeleteTmMonitorRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTmMonitorRuleResponse) SetBody(v *DeleteTmMonitorRuleResponseBody) *DeleteTmMonitorRuleResponse {
	s.Body = v
	return s
}

type DeleteTrademarkApplicationRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s DeleteTrademarkApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrademarkApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteTrademarkApplicationRequest) SetBizId(v string) *DeleteTrademarkApplicationRequest {
	s.BizId = &v
	return s
}

type DeleteTrademarkApplicationResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteTrademarkApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrademarkApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTrademarkApplicationResponseBody) SetCode(v string) *DeleteTrademarkApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteTrademarkApplicationResponseBody) SetMessage(v string) *DeleteTrademarkApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteTrademarkApplicationResponseBody) SetRequestId(v string) *DeleteTrademarkApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTrademarkApplicationResponseBody) SetSuccess(v bool) *DeleteTrademarkApplicationResponseBody {
	s.Success = &v
	return s
}

type DeleteTrademarkApplicationResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteTrademarkApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTrademarkApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTrademarkApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteTrademarkApplicationResponse) SetHeaders(v map[string]*string) *DeleteTrademarkApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeleteTrademarkApplicationResponse) SetStatusCode(v int32) *DeleteTrademarkApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTrademarkApplicationResponse) SetBody(v *DeleteTrademarkApplicationResponseBody) *DeleteTrademarkApplicationResponse {
	s.Body = v
	return s
}

type DenySupplementRequest struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DenySupplementRequest) String() string {
	return tea.Prettify(s)
}

func (s DenySupplementRequest) GoString() string {
	return s.String()
}

func (s *DenySupplementRequest) SetId(v int64) *DenySupplementRequest {
	s.Id = &v
	return s
}

type DenySupplementResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DenySupplementResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DenySupplementResponseBody) GoString() string {
	return s.String()
}

func (s *DenySupplementResponseBody) SetErrorCode(v string) *DenySupplementResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DenySupplementResponseBody) SetErrorMsg(v string) *DenySupplementResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *DenySupplementResponseBody) SetRequestId(v string) *DenySupplementResponseBody {
	s.RequestId = &v
	return s
}

func (s *DenySupplementResponseBody) SetSuccess(v bool) *DenySupplementResponseBody {
	s.Success = &v
	return s
}

type DenySupplementResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DenySupplementResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DenySupplementResponse) String() string {
	return tea.Prettify(s)
}

func (s DenySupplementResponse) GoString() string {
	return s.String()
}

func (s *DenySupplementResponse) SetHeaders(v map[string]*string) *DenySupplementResponse {
	s.Headers = v
	return s
}

func (s *DenySupplementResponse) SetStatusCode(v int32) *DenySupplementResponse {
	s.StatusCode = &v
	return s
}

func (s *DenySupplementResponse) SetBody(v *DenySupplementResponseBody) *DenySupplementResponse {
	s.Body = v
	return s
}

type DescirbeCombineTrademarkRequest struct {
	AccurateMatch      *bool   `json:"AccurateMatch,omitempty" xml:"AccurateMatch,omitempty"`
	Classification     *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerName          *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	PageNumber         *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Products           *string `json:"Products,omitempty" xml:"Products,omitempty"`
	RegistrationNumber *string `json:"RegistrationNumber,omitempty" xml:"RegistrationNumber,omitempty"`
	SimilarGroups      *string `json:"SimilarGroups,omitempty" xml:"SimilarGroups,omitempty"`
}

func (s DescirbeCombineTrademarkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescirbeCombineTrademarkRequest) GoString() string {
	return s.String()
}

func (s *DescirbeCombineTrademarkRequest) SetAccurateMatch(v bool) *DescirbeCombineTrademarkRequest {
	s.AccurateMatch = &v
	return s
}

func (s *DescirbeCombineTrademarkRequest) SetClassification(v string) *DescirbeCombineTrademarkRequest {
	s.Classification = &v
	return s
}

func (s *DescirbeCombineTrademarkRequest) SetName(v string) *DescirbeCombineTrademarkRequest {
	s.Name = &v
	return s
}

func (s *DescirbeCombineTrademarkRequest) SetOwnerName(v string) *DescirbeCombineTrademarkRequest {
	s.OwnerName = &v
	return s
}

func (s *DescirbeCombineTrademarkRequest) SetPageNumber(v int32) *DescirbeCombineTrademarkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescirbeCombineTrademarkRequest) SetPageSize(v int32) *DescirbeCombineTrademarkRequest {
	s.PageSize = &v
	return s
}

func (s *DescirbeCombineTrademarkRequest) SetProducts(v string) *DescirbeCombineTrademarkRequest {
	s.Products = &v
	return s
}

func (s *DescirbeCombineTrademarkRequest) SetRegistrationNumber(v string) *DescirbeCombineTrademarkRequest {
	s.RegistrationNumber = &v
	return s
}

func (s *DescirbeCombineTrademarkRequest) SetSimilarGroups(v string) *DescirbeCombineTrademarkRequest {
	s.SimilarGroups = &v
	return s
}

type DescirbeCombineTrademarkResponseBody struct {
	CurrentPageNumber *int32                                      `json:"CurrentPageNumber,omitempty" xml:"CurrentPageNumber,omitempty"`
	Data              []*DescirbeCombineTrademarkResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	NextPage          *bool                                       `json:"NextPage,omitempty" xml:"NextPage,omitempty"`
	PageSize          *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrePage           *bool                                       `json:"PrePage,omitempty" xml:"PrePage,omitempty"`
	RequestId         *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNumber   *int32                                      `json:"TotalItemNumber,omitempty" xml:"TotalItemNumber,omitempty"`
	TotalPageNumber   *int32                                      `json:"TotalPageNumber,omitempty" xml:"TotalPageNumber,omitempty"`
}

func (s DescirbeCombineTrademarkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescirbeCombineTrademarkResponseBody) GoString() string {
	return s.String()
}

func (s *DescirbeCombineTrademarkResponseBody) SetCurrentPageNumber(v int32) *DescirbeCombineTrademarkResponseBody {
	s.CurrentPageNumber = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBody) SetData(v []*DescirbeCombineTrademarkResponseBodyData) *DescirbeCombineTrademarkResponseBody {
	s.Data = v
	return s
}

func (s *DescirbeCombineTrademarkResponseBody) SetNextPage(v bool) *DescirbeCombineTrademarkResponseBody {
	s.NextPage = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBody) SetPageSize(v int32) *DescirbeCombineTrademarkResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBody) SetPrePage(v bool) *DescirbeCombineTrademarkResponseBody {
	s.PrePage = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBody) SetRequestId(v string) *DescirbeCombineTrademarkResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBody) SetTotalItemNumber(v int32) *DescirbeCombineTrademarkResponseBody {
	s.TotalItemNumber = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBody) SetTotalPageNumber(v int32) *DescirbeCombineTrademarkResponseBody {
	s.TotalPageNumber = &v
	return s
}

type DescirbeCombineTrademarkResponseBodyData struct {
	Agency                    *string                                                     `json:"Agency,omitempty" xml:"Agency,omitempty"`
	AnnouncementList          []*DescirbeCombineTrademarkResponseBodyDataAnnouncementList `json:"AnnouncementList,omitempty" xml:"AnnouncementList,omitempty" type:"Repeated"`
	ApplyDate                 *string                                                     `json:"ApplyDate,omitempty" xml:"ApplyDate,omitempty"`
	Classification            *string                                                     `json:"Classification,omitempty" xml:"Classification,omitempty"`
	ExclusiveDateLimit        *string                                                     `json:"ExclusiveDateLimit,omitempty" xml:"ExclusiveDateLimit,omitempty"`
	FirstAnnoNumber           *string                                                     `json:"FirstAnnoNumber,omitempty" xml:"FirstAnnoNumber,omitempty"`
	FirstAnnoType             *string                                                     `json:"FirstAnnoType,omitempty" xml:"FirstAnnoType,omitempty"`
	Image                     *string                                                     `json:"Image,omitempty" xml:"Image,omitempty"`
	IndexId                   *string                                                     `json:"IndexId,omitempty" xml:"IndexId,omitempty"`
	IntlRegDate               *string                                                     `json:"IntlRegDate,omitempty" xml:"IntlRegDate,omitempty"`
	LastProcedureStatus       *string                                                     `json:"LastProcedureStatus,omitempty" xml:"LastProcedureStatus,omitempty"`
	LawFinalStatus            *string                                                     `json:"LawFinalStatus,omitempty" xml:"LawFinalStatus,omitempty"`
	Name                      *string                                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	OnSale                    *int32                                                      `json:"OnSale,omitempty" xml:"OnSale,omitempty"`
	OwnerAddress              *string                                                     `json:"OwnerAddress,omitempty" xml:"OwnerAddress,omitempty"`
	OwnerEnAddress            *string                                                     `json:"OwnerEnAddress,omitempty" xml:"OwnerEnAddress,omitempty"`
	OwnerEnName               *string                                                     `json:"OwnerEnName,omitempty" xml:"OwnerEnName,omitempty"`
	OwnerName                 *string                                                     `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	PreAnnDate                *string                                                     `json:"PreAnnDate,omitempty" xml:"PreAnnDate,omitempty"`
	PreAnnNumber              *string                                                     `json:"PreAnnNumber,omitempty" xml:"PreAnnNumber,omitempty"`
	PriorityDate              *string                                                     `json:"PriorityDate,omitempty" xml:"PriorityDate,omitempty"`
	Procedures                []*DescirbeCombineTrademarkResponseBodyDataProcedures       `json:"Procedures,omitempty" xml:"Procedures,omitempty" type:"Repeated"`
	ProductDescription        *string                                                     `json:"ProductDescription,omitempty" xml:"ProductDescription,omitempty"`
	RegAnnDate                *string                                                     `json:"RegAnnDate,omitempty" xml:"RegAnnDate,omitempty"`
	RegAnnNumber              *string                                                     `json:"RegAnnNumber,omitempty" xml:"RegAnnNumber,omitempty"`
	RegistrationNumber        *string                                                     `json:"RegistrationNumber,omitempty" xml:"RegistrationNumber,omitempty"`
	RegistrationType          *string                                                     `json:"RegistrationType,omitempty" xml:"RegistrationType,omitempty"`
	SecondAnnoNumber          *string                                                     `json:"SecondAnnoNumber,omitempty" xml:"SecondAnnoNumber,omitempty"`
	SecondAnnoType            *string                                                     `json:"SecondAnnoType,omitempty" xml:"SecondAnnoType,omitempty"`
	Share                     *string                                                     `json:"Share,omitempty" xml:"Share,omitempty"`
	SimilarGroup              *string                                                     `json:"SimilarGroup,omitempty" xml:"SimilarGroup,omitempty"`
	Status                    *string                                                     `json:"Status,omitempty" xml:"Status,omitempty"`
	SubsequentDesignationDate *string                                                     `json:"SubsequentDesignationDate,omitempty" xml:"SubsequentDesignationDate,omitempty"`
}

func (s DescirbeCombineTrademarkResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescirbeCombineTrademarkResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetAgency(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.Agency = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetAnnouncementList(v []*DescirbeCombineTrademarkResponseBodyDataAnnouncementList) *DescirbeCombineTrademarkResponseBodyData {
	s.AnnouncementList = v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetApplyDate(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.ApplyDate = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetClassification(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.Classification = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetExclusiveDateLimit(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.ExclusiveDateLimit = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetFirstAnnoNumber(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.FirstAnnoNumber = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetFirstAnnoType(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.FirstAnnoType = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetImage(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.Image = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetIndexId(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.IndexId = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetIntlRegDate(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.IntlRegDate = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetLastProcedureStatus(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.LastProcedureStatus = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetLawFinalStatus(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.LawFinalStatus = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetName(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetOnSale(v int32) *DescirbeCombineTrademarkResponseBodyData {
	s.OnSale = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetOwnerAddress(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.OwnerAddress = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetOwnerEnAddress(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.OwnerEnAddress = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetOwnerEnName(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.OwnerEnName = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetOwnerName(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.OwnerName = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetPreAnnDate(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.PreAnnDate = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetPreAnnNumber(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.PreAnnNumber = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetPriorityDate(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.PriorityDate = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetProcedures(v []*DescirbeCombineTrademarkResponseBodyDataProcedures) *DescirbeCombineTrademarkResponseBodyData {
	s.Procedures = v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetProductDescription(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.ProductDescription = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetRegAnnDate(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.RegAnnDate = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetRegAnnNumber(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.RegAnnNumber = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetRegistrationNumber(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.RegistrationNumber = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetRegistrationType(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.RegistrationType = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetSecondAnnoNumber(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.SecondAnnoNumber = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetSecondAnnoType(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.SecondAnnoType = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetShare(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.Share = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetSimilarGroup(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.SimilarGroup = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetStatus(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyData) SetSubsequentDesignationDate(v string) *DescirbeCombineTrademarkResponseBodyData {
	s.SubsequentDesignationDate = &v
	return s
}

type DescirbeCombineTrademarkResponseBodyDataAnnouncementList struct {
	AnnDate          *string `json:"AnnDate,omitempty" xml:"AnnDate,omitempty"`
	AnnNumber        *string `json:"AnnNumber,omitempty" xml:"AnnNumber,omitempty"`
	AnnTypeCode      *string `json:"AnnTypeCode,omitempty" xml:"AnnTypeCode,omitempty"`
	AnnTypeName      *string `json:"AnnTypeName,omitempty" xml:"AnnTypeName,omitempty"`
	ImageUrl         *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	OriginalImageUrl *string `json:"OriginalImageUrl,omitempty" xml:"OriginalImageUrl,omitempty"`
}

func (s DescirbeCombineTrademarkResponseBodyDataAnnouncementList) String() string {
	return tea.Prettify(s)
}

func (s DescirbeCombineTrademarkResponseBodyDataAnnouncementList) GoString() string {
	return s.String()
}

func (s *DescirbeCombineTrademarkResponseBodyDataAnnouncementList) SetAnnDate(v string) *DescirbeCombineTrademarkResponseBodyDataAnnouncementList {
	s.AnnDate = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyDataAnnouncementList) SetAnnNumber(v string) *DescirbeCombineTrademarkResponseBodyDataAnnouncementList {
	s.AnnNumber = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyDataAnnouncementList) SetAnnTypeCode(v string) *DescirbeCombineTrademarkResponseBodyDataAnnouncementList {
	s.AnnTypeCode = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyDataAnnouncementList) SetAnnTypeName(v string) *DescirbeCombineTrademarkResponseBodyDataAnnouncementList {
	s.AnnTypeName = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyDataAnnouncementList) SetImageUrl(v string) *DescirbeCombineTrademarkResponseBodyDataAnnouncementList {
	s.ImageUrl = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyDataAnnouncementList) SetOriginalImageUrl(v string) *DescirbeCombineTrademarkResponseBodyDataAnnouncementList {
	s.OriginalImageUrl = &v
	return s
}

type DescirbeCombineTrademarkResponseBodyDataProcedures struct {
	ProcedureCode   *string `json:"ProcedureCode,omitempty" xml:"ProcedureCode,omitempty"`
	ProcedureDate   *string `json:"ProcedureDate,omitempty" xml:"ProcedureDate,omitempty"`
	ProcedureName   *string `json:"ProcedureName,omitempty" xml:"ProcedureName,omitempty"`
	ProcedureResult *string `json:"ProcedureResult,omitempty" xml:"ProcedureResult,omitempty"`
	ProcedureStep   *string `json:"ProcedureStep,omitempty" xml:"ProcedureStep,omitempty"`
}

func (s DescirbeCombineTrademarkResponseBodyDataProcedures) String() string {
	return tea.Prettify(s)
}

func (s DescirbeCombineTrademarkResponseBodyDataProcedures) GoString() string {
	return s.String()
}

func (s *DescirbeCombineTrademarkResponseBodyDataProcedures) SetProcedureCode(v string) *DescirbeCombineTrademarkResponseBodyDataProcedures {
	s.ProcedureCode = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyDataProcedures) SetProcedureDate(v string) *DescirbeCombineTrademarkResponseBodyDataProcedures {
	s.ProcedureDate = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyDataProcedures) SetProcedureName(v string) *DescirbeCombineTrademarkResponseBodyDataProcedures {
	s.ProcedureName = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyDataProcedures) SetProcedureResult(v string) *DescirbeCombineTrademarkResponseBodyDataProcedures {
	s.ProcedureResult = &v
	return s
}

func (s *DescirbeCombineTrademarkResponseBodyDataProcedures) SetProcedureStep(v string) *DescirbeCombineTrademarkResponseBodyDataProcedures {
	s.ProcedureStep = &v
	return s
}

type DescirbeCombineTrademarkResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescirbeCombineTrademarkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescirbeCombineTrademarkResponse) String() string {
	return tea.Prettify(s)
}

func (s DescirbeCombineTrademarkResponse) GoString() string {
	return s.String()
}

func (s *DescirbeCombineTrademarkResponse) SetHeaders(v map[string]*string) *DescirbeCombineTrademarkResponse {
	s.Headers = v
	return s
}

func (s *DescirbeCombineTrademarkResponse) SetStatusCode(v int32) *DescirbeCombineTrademarkResponse {
	s.StatusCode = &v
	return s
}

func (s *DescirbeCombineTrademarkResponse) SetBody(v *DescirbeCombineTrademarkResponseBody) *DescirbeCombineTrademarkResponse {
	s.Body = v
	return s
}

type FillLogisticsRequest struct {
	BizId     *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Logistics *string `json:"Logistics,omitempty" xml:"Logistics,omitempty"`
}

func (s FillLogisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s FillLogisticsRequest) GoString() string {
	return s.String()
}

func (s *FillLogisticsRequest) SetBizId(v string) *FillLogisticsRequest {
	s.BizId = &v
	return s
}

func (s *FillLogisticsRequest) SetLogistics(v string) *FillLogisticsRequest {
	s.Logistics = &v
	return s
}

type FillLogisticsResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s FillLogisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FillLogisticsResponseBody) GoString() string {
	return s.String()
}

func (s *FillLogisticsResponseBody) SetErrorCode(v string) *FillLogisticsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *FillLogisticsResponseBody) SetErrorMsg(v string) *FillLogisticsResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *FillLogisticsResponseBody) SetRequestId(v string) *FillLogisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *FillLogisticsResponseBody) SetSuccess(v bool) *FillLogisticsResponseBody {
	s.Success = &v
	return s
}

type FillLogisticsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FillLogisticsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FillLogisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s FillLogisticsResponse) GoString() string {
	return s.String()
}

func (s *FillLogisticsResponse) SetHeaders(v map[string]*string) *FillLogisticsResponse {
	s.Headers = v
	return s
}

func (s *FillLogisticsResponse) SetStatusCode(v int32) *FillLogisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *FillLogisticsResponse) SetBody(v *FillLogisticsResponseBody) *FillLogisticsResponse {
	s.Body = v
	return s
}

type FilterUnavailableCodesRequest struct {
	Codes map[string]interface{} `json:"Codes,omitempty" xml:"Codes,omitempty"`
}

func (s FilterUnavailableCodesRequest) String() string {
	return tea.Prettify(s)
}

func (s FilterUnavailableCodesRequest) GoString() string {
	return s.String()
}

func (s *FilterUnavailableCodesRequest) SetCodes(v map[string]interface{}) *FilterUnavailableCodesRequest {
	s.Codes = v
	return s
}

type FilterUnavailableCodesShrinkRequest struct {
	CodesShrink *string `json:"Codes,omitempty" xml:"Codes,omitempty"`
}

func (s FilterUnavailableCodesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s FilterUnavailableCodesShrinkRequest) GoString() string {
	return s.String()
}

func (s *FilterUnavailableCodesShrinkRequest) SetCodesShrink(v string) *FilterUnavailableCodesShrinkRequest {
	s.CodesShrink = &v
	return s
}

type FilterUnavailableCodesResponseBody struct {
	Data      *FilterUnavailableCodesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s FilterUnavailableCodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FilterUnavailableCodesResponseBody) GoString() string {
	return s.String()
}

func (s *FilterUnavailableCodesResponseBody) SetData(v *FilterUnavailableCodesResponseBodyData) *FilterUnavailableCodesResponseBody {
	s.Data = v
	return s
}

func (s *FilterUnavailableCodesResponseBody) SetRequestId(v string) *FilterUnavailableCodesResponseBody {
	s.RequestId = &v
	return s
}

type FilterUnavailableCodesResponseBodyData struct {
	Codes []*string `json:"Codes,omitempty" xml:"Codes,omitempty" type:"Repeated"`
}

func (s FilterUnavailableCodesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s FilterUnavailableCodesResponseBodyData) GoString() string {
	return s.String()
}

func (s *FilterUnavailableCodesResponseBodyData) SetCodes(v []*string) *FilterUnavailableCodesResponseBodyData {
	s.Codes = v
	return s
}

type FilterUnavailableCodesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FilterUnavailableCodesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FilterUnavailableCodesResponse) String() string {
	return tea.Prettify(s)
}

func (s FilterUnavailableCodesResponse) GoString() string {
	return s.String()
}

func (s *FilterUnavailableCodesResponse) SetHeaders(v map[string]*string) *FilterUnavailableCodesResponse {
	s.Headers = v
	return s
}

func (s *FilterUnavailableCodesResponse) SetStatusCode(v int32) *FilterUnavailableCodesResponse {
	s.StatusCode = &v
	return s
}

func (s *FilterUnavailableCodesResponse) SetBody(v *FilterUnavailableCodesResponseBody) *FilterUnavailableCodesResponse {
	s.Body = v
	return s
}

type ForceUploadTrademarkOnsaleRequest struct {
	BeginTime               *int64   `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	ClassificationCode      *string  `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	Description             *string  `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTime                 *int64   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Label                   *string  `json:"Label,omitempty" xml:"Label,omitempty"`
	OriginalPrice           *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	OwnerEnName             *string  `json:"OwnerEnName,omitempty" xml:"OwnerEnName,omitempty"`
	OwnerName               *string  `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	Reason                  *string  `json:"Reason,omitempty" xml:"Reason,omitempty"`
	RegAnnDate              *int64   `json:"RegAnnDate,omitempty" xml:"RegAnnDate,omitempty"`
	SecondaryClassification *string  `json:"SecondaryClassification,omitempty" xml:"SecondaryClassification,omitempty"`
	ThirdClassification     *string  `json:"ThirdClassification,omitempty" xml:"ThirdClassification,omitempty"`
	TmIcon                  *string  `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName                  *string  `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber                *string  `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	Type                    *string  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ForceUploadTrademarkOnsaleRequest) String() string {
	return tea.Prettify(s)
}

func (s ForceUploadTrademarkOnsaleRequest) GoString() string {
	return s.String()
}

func (s *ForceUploadTrademarkOnsaleRequest) SetBeginTime(v int64) *ForceUploadTrademarkOnsaleRequest {
	s.BeginTime = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetClassificationCode(v string) *ForceUploadTrademarkOnsaleRequest {
	s.ClassificationCode = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetDescription(v string) *ForceUploadTrademarkOnsaleRequest {
	s.Description = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetEndTime(v int64) *ForceUploadTrademarkOnsaleRequest {
	s.EndTime = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetLabel(v string) *ForceUploadTrademarkOnsaleRequest {
	s.Label = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetOriginalPrice(v float32) *ForceUploadTrademarkOnsaleRequest {
	s.OriginalPrice = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetOwnerEnName(v string) *ForceUploadTrademarkOnsaleRequest {
	s.OwnerEnName = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetOwnerName(v string) *ForceUploadTrademarkOnsaleRequest {
	s.OwnerName = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetReason(v string) *ForceUploadTrademarkOnsaleRequest {
	s.Reason = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetRegAnnDate(v int64) *ForceUploadTrademarkOnsaleRequest {
	s.RegAnnDate = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetSecondaryClassification(v string) *ForceUploadTrademarkOnsaleRequest {
	s.SecondaryClassification = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetThirdClassification(v string) *ForceUploadTrademarkOnsaleRequest {
	s.ThirdClassification = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetTmIcon(v string) *ForceUploadTrademarkOnsaleRequest {
	s.TmIcon = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetTmName(v string) *ForceUploadTrademarkOnsaleRequest {
	s.TmName = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetTmNumber(v string) *ForceUploadTrademarkOnsaleRequest {
	s.TmNumber = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleRequest) SetType(v string) *ForceUploadTrademarkOnsaleRequest {
	s.Type = &v
	return s
}

type ForceUploadTrademarkOnsaleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ForceUploadTrademarkOnsaleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ForceUploadTrademarkOnsaleResponseBody) GoString() string {
	return s.String()
}

func (s *ForceUploadTrademarkOnsaleResponseBody) SetRequestId(v string) *ForceUploadTrademarkOnsaleResponseBody {
	s.RequestId = &v
	return s
}

type ForceUploadTrademarkOnsaleResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ForceUploadTrademarkOnsaleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ForceUploadTrademarkOnsaleResponse) String() string {
	return tea.Prettify(s)
}

func (s ForceUploadTrademarkOnsaleResponse) GoString() string {
	return s.String()
}

func (s *ForceUploadTrademarkOnsaleResponse) SetHeaders(v map[string]*string) *ForceUploadTrademarkOnsaleResponse {
	s.Headers = v
	return s
}

func (s *ForceUploadTrademarkOnsaleResponse) SetStatusCode(v int32) *ForceUploadTrademarkOnsaleResponse {
	s.StatusCode = &v
	return s
}

func (s *ForceUploadTrademarkOnsaleResponse) SetBody(v *ForceUploadTrademarkOnsaleResponseBody) *ForceUploadTrademarkOnsaleResponse {
	s.Body = v
	return s
}

type GenerateQrCodeRequest struct {
	FieldKey *string `json:"FieldKey,omitempty" xml:"FieldKey,omitempty"`
	OssKey   *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
	Uuid     *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s GenerateQrCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateQrCodeRequest) GoString() string {
	return s.String()
}

func (s *GenerateQrCodeRequest) SetFieldKey(v string) *GenerateQrCodeRequest {
	s.FieldKey = &v
	return s
}

func (s *GenerateQrCodeRequest) SetOssKey(v string) *GenerateQrCodeRequest {
	s.OssKey = &v
	return s
}

func (s *GenerateQrCodeRequest) SetUuid(v string) *GenerateQrCodeRequest {
	s.Uuid = &v
	return s
}

type GenerateQrCodeResponseBody struct {
	ExpireTime *int64  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	FieldKey   *string `json:"FieldKey,omitempty" xml:"FieldKey,omitempty"`
	QrcodeUrl  *string `json:"QrcodeUrl,omitempty" xml:"QrcodeUrl,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success    *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Uuid       *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s GenerateQrCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateQrCodeResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateQrCodeResponseBody) SetExpireTime(v int64) *GenerateQrCodeResponseBody {
	s.ExpireTime = &v
	return s
}

func (s *GenerateQrCodeResponseBody) SetFieldKey(v string) *GenerateQrCodeResponseBody {
	s.FieldKey = &v
	return s
}

func (s *GenerateQrCodeResponseBody) SetQrcodeUrl(v string) *GenerateQrCodeResponseBody {
	s.QrcodeUrl = &v
	return s
}

func (s *GenerateQrCodeResponseBody) SetRequestId(v string) *GenerateQrCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateQrCodeResponseBody) SetSuccess(v bool) *GenerateQrCodeResponseBody {
	s.Success = &v
	return s
}

func (s *GenerateQrCodeResponseBody) SetUuid(v string) *GenerateQrCodeResponseBody {
	s.Uuid = &v
	return s
}

type GenerateQrCodeResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GenerateQrCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GenerateQrCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateQrCodeResponse) GoString() string {
	return s.String()
}

func (s *GenerateQrCodeResponse) SetHeaders(v map[string]*string) *GenerateQrCodeResponse {
	s.Headers = v
	return s
}

func (s *GenerateQrCodeResponse) SetStatusCode(v int32) *GenerateQrCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateQrCodeResponse) SetBody(v *GenerateQrCodeResponseBody) *GenerateQrCodeResponse {
	s.Body = v
	return s
}

type GenerateUploadFilePolicyRequest struct {
	BizId    *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
}

func (s GenerateUploadFilePolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadFilePolicyRequest) GoString() string {
	return s.String()
}

func (s *GenerateUploadFilePolicyRequest) SetBizId(v string) *GenerateUploadFilePolicyRequest {
	s.BizId = &v
	return s
}

func (s *GenerateUploadFilePolicyRequest) SetFileType(v string) *GenerateUploadFilePolicyRequest {
	s.FileType = &v
	return s
}

type GenerateUploadFilePolicyResponseBody struct {
	// accessId
	AccessId *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	// osspolicy
	EncodedPolicy *string `json:"EncodedPolicy,omitempty" xml:"EncodedPolicy,omitempty"`
	ExpireTime    *int64  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	FileDir       *string `json:"FileDir,omitempty" xml:"FileDir,omitempty"`
	Host          *string `json:"Host,omitempty" xml:"Host,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Signature     *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
}

func (s GenerateUploadFilePolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadFilePolicyResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateUploadFilePolicyResponseBody) SetAccessId(v string) *GenerateUploadFilePolicyResponseBody {
	s.AccessId = &v
	return s
}

func (s *GenerateUploadFilePolicyResponseBody) SetEncodedPolicy(v string) *GenerateUploadFilePolicyResponseBody {
	s.EncodedPolicy = &v
	return s
}

func (s *GenerateUploadFilePolicyResponseBody) SetExpireTime(v int64) *GenerateUploadFilePolicyResponseBody {
	s.ExpireTime = &v
	return s
}

func (s *GenerateUploadFilePolicyResponseBody) SetFileDir(v string) *GenerateUploadFilePolicyResponseBody {
	s.FileDir = &v
	return s
}

func (s *GenerateUploadFilePolicyResponseBody) SetHost(v string) *GenerateUploadFilePolicyResponseBody {
	s.Host = &v
	return s
}

func (s *GenerateUploadFilePolicyResponseBody) SetRequestId(v string) *GenerateUploadFilePolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateUploadFilePolicyResponseBody) SetSignature(v string) *GenerateUploadFilePolicyResponseBody {
	s.Signature = &v
	return s
}

type GenerateUploadFilePolicyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GenerateUploadFilePolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GenerateUploadFilePolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateUploadFilePolicyResponse) GoString() string {
	return s.String()
}

func (s *GenerateUploadFilePolicyResponse) SetHeaders(v map[string]*string) *GenerateUploadFilePolicyResponse {
	s.Headers = v
	return s
}

func (s *GenerateUploadFilePolicyResponse) SetStatusCode(v int32) *GenerateUploadFilePolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateUploadFilePolicyResponse) SetBody(v *GenerateUploadFilePolicyResponseBody) *GenerateUploadFilePolicyResponse {
	s.Body = v
	return s
}

type GetAuthorizationLetterVersionRequest struct {
	OssKey *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
}

func (s GetAuthorizationLetterVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAuthorizationLetterVersionRequest) GoString() string {
	return s.String()
}

func (s *GetAuthorizationLetterVersionRequest) SetOssKey(v string) *GetAuthorizationLetterVersionRequest {
	s.OssKey = &v
	return s
}

type GetAuthorizationLetterVersionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Version   *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetAuthorizationLetterVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAuthorizationLetterVersionResponseBody) GoString() string {
	return s.String()
}

func (s *GetAuthorizationLetterVersionResponseBody) SetRequestId(v string) *GetAuthorizationLetterVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAuthorizationLetterVersionResponseBody) SetVersion(v string) *GetAuthorizationLetterVersionResponseBody {
	s.Version = &v
	return s
}

type GetAuthorizationLetterVersionResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAuthorizationLetterVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAuthorizationLetterVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAuthorizationLetterVersionResponse) GoString() string {
	return s.String()
}

func (s *GetAuthorizationLetterVersionResponse) SetHeaders(v map[string]*string) *GetAuthorizationLetterVersionResponse {
	s.Headers = v
	return s
}

func (s *GetAuthorizationLetterVersionResponse) SetStatusCode(v int32) *GetAuthorizationLetterVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAuthorizationLetterVersionResponse) SetBody(v *GetAuthorizationLetterVersionResponseBody) *GetAuthorizationLetterVersionResponse {
	s.Body = v
	return s
}

type GetDefaultPrincipalResponseBody struct {
	PrincipalDescription *string `json:"PrincipalDescription,omitempty" xml:"PrincipalDescription,omitempty"`
	PrincipalName        *string `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	PrincipalValue       *int32  `json:"PrincipalValue,omitempty" xml:"PrincipalValue,omitempty"`
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDefaultPrincipalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultPrincipalResponseBody) GoString() string {
	return s.String()
}

func (s *GetDefaultPrincipalResponseBody) SetPrincipalDescription(v string) *GetDefaultPrincipalResponseBody {
	s.PrincipalDescription = &v
	return s
}

func (s *GetDefaultPrincipalResponseBody) SetPrincipalName(v string) *GetDefaultPrincipalResponseBody {
	s.PrincipalName = &v
	return s
}

func (s *GetDefaultPrincipalResponseBody) SetPrincipalValue(v int32) *GetDefaultPrincipalResponseBody {
	s.PrincipalValue = &v
	return s
}

func (s *GetDefaultPrincipalResponseBody) SetRequestId(v string) *GetDefaultPrincipalResponseBody {
	s.RequestId = &v
	return s
}

type GetDefaultPrincipalResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetDefaultPrincipalResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDefaultPrincipalResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultPrincipalResponse) GoString() string {
	return s.String()
}

func (s *GetDefaultPrincipalResponse) SetHeaders(v map[string]*string) *GetDefaultPrincipalResponse {
	s.Headers = v
	return s
}

func (s *GetDefaultPrincipalResponse) SetStatusCode(v int32) *GetDefaultPrincipalResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDefaultPrincipalResponse) SetBody(v *GetDefaultPrincipalResponseBody) *GetDefaultPrincipalResponse {
	s.Body = v
	return s
}

type GetDefaultPrincipalNameRequest struct {
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s GetDefaultPrincipalNameRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultPrincipalNameRequest) GoString() string {
	return s.String()
}

func (s *GetDefaultPrincipalNameRequest) SetBizType(v string) *GetDefaultPrincipalNameRequest {
	s.BizType = &v
	return s
}

type GetDefaultPrincipalNameResponseBody struct {
	PrincipalName *int32  `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDefaultPrincipalNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultPrincipalNameResponseBody) GoString() string {
	return s.String()
}

func (s *GetDefaultPrincipalNameResponseBody) SetPrincipalName(v int32) *GetDefaultPrincipalNameResponseBody {
	s.PrincipalName = &v
	return s
}

func (s *GetDefaultPrincipalNameResponseBody) SetRequestId(v string) *GetDefaultPrincipalNameResponseBody {
	s.RequestId = &v
	return s
}

type GetDefaultPrincipalNameResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetDefaultPrincipalNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDefaultPrincipalNameResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultPrincipalNameResponse) GoString() string {
	return s.String()
}

func (s *GetDefaultPrincipalNameResponse) SetHeaders(v map[string]*string) *GetDefaultPrincipalNameResponse {
	s.Headers = v
	return s
}

func (s *GetDefaultPrincipalNameResponse) SetStatusCode(v int32) *GetDefaultPrincipalNameResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDefaultPrincipalNameResponse) SetBody(v *GetDefaultPrincipalNameResponseBody) *GetDefaultPrincipalNameResponse {
	s.Body = v
	return s
}

type GetNotaryOrderRequest struct {
	NotaryOrderId *int64 `json:"NotaryOrderId,omitempty" xml:"NotaryOrderId,omitempty"`
}

func (s GetNotaryOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryOrderRequest) GoString() string {
	return s.String()
}

func (s *GetNotaryOrderRequest) SetNotaryOrderId(v int64) *GetNotaryOrderRequest {
	s.NotaryOrderId = &v
	return s
}

type GetNotaryOrderResponseBody struct {
	AliyunOrderId               *string  `json:"AliyunOrderId,omitempty" xml:"AliyunOrderId,omitempty"`
	ApplyPostStatus             *int32   `json:"ApplyPostStatus,omitempty" xml:"ApplyPostStatus,omitempty"`
	BizId                       *string  `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BusinessLicense             *string  `json:"BusinessLicense,omitempty" xml:"BusinessLicense,omitempty"`
	BusinessLicenseId           *string  `json:"BusinessLicenseId,omitempty" xml:"BusinessLicenseId,omitempty"`
	CompanyContactName          *string  `json:"CompanyContactName,omitempty" xml:"CompanyContactName,omitempty"`
	CompanyContactPhone         *string  `json:"CompanyContactPhone,omitempty" xml:"CompanyContactPhone,omitempty"`
	ErrorCode                   *string  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg                    *string  `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	LegalPersonIdCard           *string  `json:"LegalPersonIdCard,omitempty" xml:"LegalPersonIdCard,omitempty"`
	LegalPersonName             *string  `json:"LegalPersonName,omitempty" xml:"LegalPersonName,omitempty"`
	LegalPersonPhone            *string  `json:"LegalPersonPhone,omitempty" xml:"LegalPersonPhone,omitempty"`
	Name                        *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	NotaryAcceptDate            *int64   `json:"NotaryAcceptDate,omitempty" xml:"NotaryAcceptDate,omitempty"`
	NotaryCertificate           *string  `json:"NotaryCertificate,omitempty" xml:"NotaryCertificate,omitempty"`
	NotaryFailedDate            *int64   `json:"NotaryFailedDate,omitempty" xml:"NotaryFailedDate,omitempty"`
	NotaryFailedReason          *string  `json:"NotaryFailedReason,omitempty" xml:"NotaryFailedReason,omitempty"`
	NotaryOrderId               *int64   `json:"NotaryOrderId,omitempty" xml:"NotaryOrderId,omitempty"`
	NotaryPlatformName          *string  `json:"NotaryPlatformName,omitempty" xml:"NotaryPlatformName,omitempty"`
	NotaryPostReceipt           *string  `json:"NotaryPostReceipt,omitempty" xml:"NotaryPostReceipt,omitempty"`
	NotaryStatus                *int32   `json:"NotaryStatus,omitempty" xml:"NotaryStatus,omitempty"`
	NotarySucceedDate           *int64   `json:"NotarySucceedDate,omitempty" xml:"NotarySucceedDate,omitempty"`
	NotaryType                  *int32   `json:"NotaryType,omitempty" xml:"NotaryType,omitempty"`
	OrderDate                   *int64   `json:"OrderDate,omitempty" xml:"OrderDate,omitempty"`
	OrderPrice                  *float32 `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	Phone                       *string  `json:"Phone,omitempty" xml:"Phone,omitempty"`
	ReceiverAddress             *string  `json:"ReceiverAddress,omitempty" xml:"ReceiverAddress,omitempty"`
	ReceiverName                *string  `json:"ReceiverName,omitempty" xml:"ReceiverName,omitempty"`
	ReceiverPhone               *string  `json:"ReceiverPhone,omitempty" xml:"ReceiverPhone,omitempty"`
	ReceiverPostalCode          *string  `json:"ReceiverPostalCode,omitempty" xml:"ReceiverPostalCode,omitempty"`
	RequestId                   *string  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SellerBackOfIdCard          *string  `json:"SellerBackOfIdCard,omitempty" xml:"SellerBackOfIdCard,omitempty"`
	SellerCompanyName           *string  `json:"SellerCompanyName,omitempty" xml:"SellerCompanyName,omitempty"`
	SellerFrontOfIdCard         *string  `json:"SellerFrontOfIdCard,omitempty" xml:"SellerFrontOfIdCard,omitempty"`
	Success                     *bool    `json:"Success,omitempty" xml:"Success,omitempty"`
	TmAcceptCertificate         *string  `json:"TmAcceptCertificate,omitempty" xml:"TmAcceptCertificate,omitempty"`
	TmClassification            *string  `json:"TmClassification,omitempty" xml:"TmClassification,omitempty"`
	TmImage                     *string  `json:"TmImage,omitempty" xml:"TmImage,omitempty"`
	TmName                      *string  `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmRegisterCertificate       *string  `json:"TmRegisterCertificate,omitempty" xml:"TmRegisterCertificate,omitempty"`
	TmRegisterChangeCertificate *string  `json:"TmRegisterChangeCertificate,omitempty" xml:"TmRegisterChangeCertificate,omitempty"`
	TmRegisterNo                *string  `json:"TmRegisterNo,omitempty" xml:"TmRegisterNo,omitempty"`
	Type                        *string  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetNotaryOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryOrderResponseBody) GoString() string {
	return s.String()
}

func (s *GetNotaryOrderResponseBody) SetAliyunOrderId(v string) *GetNotaryOrderResponseBody {
	s.AliyunOrderId = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetApplyPostStatus(v int32) *GetNotaryOrderResponseBody {
	s.ApplyPostStatus = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetBizId(v string) *GetNotaryOrderResponseBody {
	s.BizId = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetBusinessLicense(v string) *GetNotaryOrderResponseBody {
	s.BusinessLicense = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetBusinessLicenseId(v string) *GetNotaryOrderResponseBody {
	s.BusinessLicenseId = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetCompanyContactName(v string) *GetNotaryOrderResponseBody {
	s.CompanyContactName = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetCompanyContactPhone(v string) *GetNotaryOrderResponseBody {
	s.CompanyContactPhone = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetErrorCode(v string) *GetNotaryOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetErrorMsg(v string) *GetNotaryOrderResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetLegalPersonIdCard(v string) *GetNotaryOrderResponseBody {
	s.LegalPersonIdCard = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetLegalPersonName(v string) *GetNotaryOrderResponseBody {
	s.LegalPersonName = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetLegalPersonPhone(v string) *GetNotaryOrderResponseBody {
	s.LegalPersonPhone = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetName(v string) *GetNotaryOrderResponseBody {
	s.Name = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetNotaryAcceptDate(v int64) *GetNotaryOrderResponseBody {
	s.NotaryAcceptDate = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetNotaryCertificate(v string) *GetNotaryOrderResponseBody {
	s.NotaryCertificate = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetNotaryFailedDate(v int64) *GetNotaryOrderResponseBody {
	s.NotaryFailedDate = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetNotaryFailedReason(v string) *GetNotaryOrderResponseBody {
	s.NotaryFailedReason = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetNotaryOrderId(v int64) *GetNotaryOrderResponseBody {
	s.NotaryOrderId = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetNotaryPlatformName(v string) *GetNotaryOrderResponseBody {
	s.NotaryPlatformName = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetNotaryPostReceipt(v string) *GetNotaryOrderResponseBody {
	s.NotaryPostReceipt = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetNotaryStatus(v int32) *GetNotaryOrderResponseBody {
	s.NotaryStatus = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetNotarySucceedDate(v int64) *GetNotaryOrderResponseBody {
	s.NotarySucceedDate = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetNotaryType(v int32) *GetNotaryOrderResponseBody {
	s.NotaryType = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetOrderDate(v int64) *GetNotaryOrderResponseBody {
	s.OrderDate = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetOrderPrice(v float32) *GetNotaryOrderResponseBody {
	s.OrderPrice = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetPhone(v string) *GetNotaryOrderResponseBody {
	s.Phone = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetReceiverAddress(v string) *GetNotaryOrderResponseBody {
	s.ReceiverAddress = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetReceiverName(v string) *GetNotaryOrderResponseBody {
	s.ReceiverName = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetReceiverPhone(v string) *GetNotaryOrderResponseBody {
	s.ReceiverPhone = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetReceiverPostalCode(v string) *GetNotaryOrderResponseBody {
	s.ReceiverPostalCode = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetRequestId(v string) *GetNotaryOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetSellerBackOfIdCard(v string) *GetNotaryOrderResponseBody {
	s.SellerBackOfIdCard = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetSellerCompanyName(v string) *GetNotaryOrderResponseBody {
	s.SellerCompanyName = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetSellerFrontOfIdCard(v string) *GetNotaryOrderResponseBody {
	s.SellerFrontOfIdCard = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetSuccess(v bool) *GetNotaryOrderResponseBody {
	s.Success = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetTmAcceptCertificate(v string) *GetNotaryOrderResponseBody {
	s.TmAcceptCertificate = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetTmClassification(v string) *GetNotaryOrderResponseBody {
	s.TmClassification = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetTmImage(v string) *GetNotaryOrderResponseBody {
	s.TmImage = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetTmName(v string) *GetNotaryOrderResponseBody {
	s.TmName = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetTmRegisterCertificate(v string) *GetNotaryOrderResponseBody {
	s.TmRegisterCertificate = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetTmRegisterChangeCertificate(v string) *GetNotaryOrderResponseBody {
	s.TmRegisterChangeCertificate = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetTmRegisterNo(v string) *GetNotaryOrderResponseBody {
	s.TmRegisterNo = &v
	return s
}

func (s *GetNotaryOrderResponseBody) SetType(v string) *GetNotaryOrderResponseBody {
	s.Type = &v
	return s
}

type GetNotaryOrderResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetNotaryOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetNotaryOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNotaryOrderResponse) GoString() string {
	return s.String()
}

func (s *GetNotaryOrderResponse) SetHeaders(v map[string]*string) *GetNotaryOrderResponse {
	s.Headers = v
	return s
}

func (s *GetNotaryOrderResponse) SetStatusCode(v int32) *GetNotaryOrderResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNotaryOrderResponse) SetBody(v *GetNotaryOrderResponseBody) *GetNotaryOrderResponse {
	s.Body = v
	return s
}

type GetSupportPrincipalNameResponseBody struct {
	Principals []*GetSupportPrincipalNameResponseBodyPrincipals `json:"Principals,omitempty" xml:"Principals,omitempty" type:"Repeated"`
	RequestId  *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetSupportPrincipalNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSupportPrincipalNameResponseBody) GoString() string {
	return s.String()
}

func (s *GetSupportPrincipalNameResponseBody) SetPrincipals(v []*GetSupportPrincipalNameResponseBodyPrincipals) *GetSupportPrincipalNameResponseBody {
	s.Principals = v
	return s
}

func (s *GetSupportPrincipalNameResponseBody) SetRequestId(v string) *GetSupportPrincipalNameResponseBody {
	s.RequestId = &v
	return s
}

type GetSupportPrincipalNameResponseBodyPrincipals struct {
	DefaultPrincipal     *bool   `json:"DefaultPrincipal,omitempty" xml:"DefaultPrincipal,omitempty"`
	PrincipalDescription *string `json:"PrincipalDescription,omitempty" xml:"PrincipalDescription,omitempty"`
	PrincipalValue       *int32  `json:"PrincipalValue,omitempty" xml:"PrincipalValue,omitempty"`
}

func (s GetSupportPrincipalNameResponseBodyPrincipals) String() string {
	return tea.Prettify(s)
}

func (s GetSupportPrincipalNameResponseBodyPrincipals) GoString() string {
	return s.String()
}

func (s *GetSupportPrincipalNameResponseBodyPrincipals) SetDefaultPrincipal(v bool) *GetSupportPrincipalNameResponseBodyPrincipals {
	s.DefaultPrincipal = &v
	return s
}

func (s *GetSupportPrincipalNameResponseBodyPrincipals) SetPrincipalDescription(v string) *GetSupportPrincipalNameResponseBodyPrincipals {
	s.PrincipalDescription = &v
	return s
}

func (s *GetSupportPrincipalNameResponseBodyPrincipals) SetPrincipalValue(v int32) *GetSupportPrincipalNameResponseBodyPrincipals {
	s.PrincipalValue = &v
	return s
}

type GetSupportPrincipalNameResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSupportPrincipalNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSupportPrincipalNameResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSupportPrincipalNameResponse) GoString() string {
	return s.String()
}

func (s *GetSupportPrincipalNameResponse) SetHeaders(v map[string]*string) *GetSupportPrincipalNameResponse {
	s.Headers = v
	return s
}

func (s *GetSupportPrincipalNameResponse) SetStatusCode(v int32) *GetSupportPrincipalNameResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSupportPrincipalNameResponse) SetBody(v *GetSupportPrincipalNameResponseBody) *GetSupportPrincipalNameResponse {
	s.Body = v
	return s
}

type InsertMaterialRequest struct {
	Address               *string `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceOssKey *string `json:"BusinessLicenceOssKey,omitempty" xml:"BusinessLicenceOssKey,omitempty"`
	CardNumber            *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	City                  *string `json:"City,omitempty" xml:"City,omitempty"`
	ContactAddress        *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactCity           *string `json:"ContactCity,omitempty" xml:"ContactCity,omitempty"`
	ContactCounty         *string `json:"ContactCounty,omitempty" xml:"ContactCounty,omitempty"`
	ContactDistrict       *string `json:"ContactDistrict,omitempty" xml:"ContactDistrict,omitempty"`
	ContactEmail          *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName           *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber         *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactProvince       *string `json:"ContactProvince,omitempty" xml:"ContactProvince,omitempty"`
	ContactZipcode        *string `json:"ContactZipcode,omitempty" xml:"ContactZipcode,omitempty"`
	Country               *string `json:"Country,omitempty" xml:"Country,omitempty"`
	EAddress              *string `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName                 *string `json:"EName,omitempty" xml:"EName,omitempty"`
	IdCardName            *string `json:"IdCardName,omitempty" xml:"IdCardName,omitempty"`
	IdCardNumber          *string `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardOssKey          *string `json:"IdCardOssKey,omitempty" xml:"IdCardOssKey,omitempty"`
	LegalNoticeOssKey     *string `json:"LegalNoticeOssKey,omitempty" xml:"LegalNoticeOssKey,omitempty"`
	LoaOssKey             *string `json:"LoaOssKey,omitempty" xml:"LoaOssKey,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportOssKey        *string `json:"PassportOssKey,omitempty" xml:"PassportOssKey,omitempty"`
	PersonalType          *int64  `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PrincipalName         *int32  `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	Province              *string `json:"Province,omitempty" xml:"Province,omitempty"`
	Region                *int32  `json:"Region,omitempty" xml:"Region,omitempty"`
	Town                  *string `json:"Town,omitempty" xml:"Town,omitempty"`
	Type                  *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s InsertMaterialRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertMaterialRequest) GoString() string {
	return s.String()
}

func (s *InsertMaterialRequest) SetAddress(v string) *InsertMaterialRequest {
	s.Address = &v
	return s
}

func (s *InsertMaterialRequest) SetBusinessLicenceOssKey(v string) *InsertMaterialRequest {
	s.BusinessLicenceOssKey = &v
	return s
}

func (s *InsertMaterialRequest) SetCardNumber(v string) *InsertMaterialRequest {
	s.CardNumber = &v
	return s
}

func (s *InsertMaterialRequest) SetCity(v string) *InsertMaterialRequest {
	s.City = &v
	return s
}

func (s *InsertMaterialRequest) SetContactAddress(v string) *InsertMaterialRequest {
	s.ContactAddress = &v
	return s
}

func (s *InsertMaterialRequest) SetContactCity(v string) *InsertMaterialRequest {
	s.ContactCity = &v
	return s
}

func (s *InsertMaterialRequest) SetContactCounty(v string) *InsertMaterialRequest {
	s.ContactCounty = &v
	return s
}

func (s *InsertMaterialRequest) SetContactDistrict(v string) *InsertMaterialRequest {
	s.ContactDistrict = &v
	return s
}

func (s *InsertMaterialRequest) SetContactEmail(v string) *InsertMaterialRequest {
	s.ContactEmail = &v
	return s
}

func (s *InsertMaterialRequest) SetContactName(v string) *InsertMaterialRequest {
	s.ContactName = &v
	return s
}

func (s *InsertMaterialRequest) SetContactNumber(v string) *InsertMaterialRequest {
	s.ContactNumber = &v
	return s
}

func (s *InsertMaterialRequest) SetContactProvince(v string) *InsertMaterialRequest {
	s.ContactProvince = &v
	return s
}

func (s *InsertMaterialRequest) SetContactZipcode(v string) *InsertMaterialRequest {
	s.ContactZipcode = &v
	return s
}

func (s *InsertMaterialRequest) SetCountry(v string) *InsertMaterialRequest {
	s.Country = &v
	return s
}

func (s *InsertMaterialRequest) SetEAddress(v string) *InsertMaterialRequest {
	s.EAddress = &v
	return s
}

func (s *InsertMaterialRequest) SetEName(v string) *InsertMaterialRequest {
	s.EName = &v
	return s
}

func (s *InsertMaterialRequest) SetIdCardName(v string) *InsertMaterialRequest {
	s.IdCardName = &v
	return s
}

func (s *InsertMaterialRequest) SetIdCardNumber(v string) *InsertMaterialRequest {
	s.IdCardNumber = &v
	return s
}

func (s *InsertMaterialRequest) SetIdCardOssKey(v string) *InsertMaterialRequest {
	s.IdCardOssKey = &v
	return s
}

func (s *InsertMaterialRequest) SetLegalNoticeOssKey(v string) *InsertMaterialRequest {
	s.LegalNoticeOssKey = &v
	return s
}

func (s *InsertMaterialRequest) SetLoaOssKey(v string) *InsertMaterialRequest {
	s.LoaOssKey = &v
	return s
}

func (s *InsertMaterialRequest) SetName(v string) *InsertMaterialRequest {
	s.Name = &v
	return s
}

func (s *InsertMaterialRequest) SetPassportOssKey(v string) *InsertMaterialRequest {
	s.PassportOssKey = &v
	return s
}

func (s *InsertMaterialRequest) SetPersonalType(v int64) *InsertMaterialRequest {
	s.PersonalType = &v
	return s
}

func (s *InsertMaterialRequest) SetPrincipalName(v int32) *InsertMaterialRequest {
	s.PrincipalName = &v
	return s
}

func (s *InsertMaterialRequest) SetProvince(v string) *InsertMaterialRequest {
	s.Province = &v
	return s
}

func (s *InsertMaterialRequest) SetRegion(v int32) *InsertMaterialRequest {
	s.Region = &v
	return s
}

func (s *InsertMaterialRequest) SetTown(v string) *InsertMaterialRequest {
	s.Town = &v
	return s
}

func (s *InsertMaterialRequest) SetType(v int32) *InsertMaterialRequest {
	s.Type = &v
	return s
}

type InsertMaterialResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InsertMaterialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertMaterialResponseBody) GoString() string {
	return s.String()
}

func (s *InsertMaterialResponseBody) SetRequestId(v string) *InsertMaterialResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertMaterialResponseBody) SetSuccess(v bool) *InsertMaterialResponseBody {
	s.Success = &v
	return s
}

type InsertMaterialResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InsertMaterialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertMaterialResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertMaterialResponse) GoString() string {
	return s.String()
}

func (s *InsertMaterialResponse) SetHeaders(v map[string]*string) *InsertMaterialResponse {
	s.Headers = v
	return s
}

func (s *InsertMaterialResponse) SetStatusCode(v int32) *InsertMaterialResponse {
	s.StatusCode = &v
	return s
}

func (s *InsertMaterialResponse) SetBody(v *InsertMaterialResponseBody) *InsertMaterialResponse {
	s.Body = v
	return s
}

type InsertRenewInfoRequest struct {
	Address      *string `json:"Address,omitempty" xml:"Address,omitempty"`
	EngAddress   *string `json:"EngAddress,omitempty" xml:"EngAddress,omitempty"`
	EngName      *string `json:"EngName,omitempty" xml:"EngName,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegisterTime *int64  `json:"RegisterTime,omitempty" xml:"RegisterTime,omitempty"`
}

func (s InsertRenewInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertRenewInfoRequest) GoString() string {
	return s.String()
}

func (s *InsertRenewInfoRequest) SetAddress(v string) *InsertRenewInfoRequest {
	s.Address = &v
	return s
}

func (s *InsertRenewInfoRequest) SetEngAddress(v string) *InsertRenewInfoRequest {
	s.EngAddress = &v
	return s
}

func (s *InsertRenewInfoRequest) SetEngName(v string) *InsertRenewInfoRequest {
	s.EngName = &v
	return s
}

func (s *InsertRenewInfoRequest) SetName(v string) *InsertRenewInfoRequest {
	s.Name = &v
	return s
}

func (s *InsertRenewInfoRequest) SetRegisterTime(v int64) *InsertRenewInfoRequest {
	s.RegisterTime = &v
	return s
}

type InsertRenewInfoResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	Id        *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InsertRenewInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertRenewInfoResponseBody) GoString() string {
	return s.String()
}

func (s *InsertRenewInfoResponseBody) SetErrorCode(v string) *InsertRenewInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *InsertRenewInfoResponseBody) SetErrorMsg(v string) *InsertRenewInfoResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *InsertRenewInfoResponseBody) SetId(v int64) *InsertRenewInfoResponseBody {
	s.Id = &v
	return s
}

func (s *InsertRenewInfoResponseBody) SetRequestId(v string) *InsertRenewInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertRenewInfoResponseBody) SetSuccess(v bool) *InsertRenewInfoResponseBody {
	s.Success = &v
	return s
}

type InsertRenewInfoResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InsertRenewInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertRenewInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertRenewInfoResponse) GoString() string {
	return s.String()
}

func (s *InsertRenewInfoResponse) SetHeaders(v map[string]*string) *InsertRenewInfoResponse {
	s.Headers = v
	return s
}

func (s *InsertRenewInfoResponse) SetStatusCode(v int32) *InsertRenewInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *InsertRenewInfoResponse) SetBody(v *InsertRenewInfoResponseBody) *InsertRenewInfoResponse {
	s.Body = v
	return s
}

type InsertTmMonitorRuleRequest struct {
	Classification map[string]interface{} `json:"Classification,omitempty" xml:"Classification,omitempty"`
	EndApplyDate   *string                `json:"EndApplyDate,omitempty" xml:"EndApplyDate,omitempty"`
	NotifyStatus   map[string]interface{} `json:"NotifyStatus,omitempty" xml:"NotifyStatus,omitempty"`
	RuleKeyword    *string                `json:"RuleKeyword,omitempty" xml:"RuleKeyword,omitempty"`
	RuleName       *string                `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleSource     *string                `json:"RuleSource,omitempty" xml:"RuleSource,omitempty"`
	RuleType       *int32                 `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	StartApplyDate *string                `json:"StartApplyDate,omitempty" xml:"StartApplyDate,omitempty"`
}

func (s InsertTmMonitorRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertTmMonitorRuleRequest) GoString() string {
	return s.String()
}

func (s *InsertTmMonitorRuleRequest) SetClassification(v map[string]interface{}) *InsertTmMonitorRuleRequest {
	s.Classification = v
	return s
}

func (s *InsertTmMonitorRuleRequest) SetEndApplyDate(v string) *InsertTmMonitorRuleRequest {
	s.EndApplyDate = &v
	return s
}

func (s *InsertTmMonitorRuleRequest) SetNotifyStatus(v map[string]interface{}) *InsertTmMonitorRuleRequest {
	s.NotifyStatus = v
	return s
}

func (s *InsertTmMonitorRuleRequest) SetRuleKeyword(v string) *InsertTmMonitorRuleRequest {
	s.RuleKeyword = &v
	return s
}

func (s *InsertTmMonitorRuleRequest) SetRuleName(v string) *InsertTmMonitorRuleRequest {
	s.RuleName = &v
	return s
}

func (s *InsertTmMonitorRuleRequest) SetRuleSource(v string) *InsertTmMonitorRuleRequest {
	s.RuleSource = &v
	return s
}

func (s *InsertTmMonitorRuleRequest) SetRuleType(v int32) *InsertTmMonitorRuleRequest {
	s.RuleType = &v
	return s
}

func (s *InsertTmMonitorRuleRequest) SetStartApplyDate(v string) *InsertTmMonitorRuleRequest {
	s.StartApplyDate = &v
	return s
}

type InsertTmMonitorRuleShrinkRequest struct {
	ClassificationShrink *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	EndApplyDate         *string `json:"EndApplyDate,omitempty" xml:"EndApplyDate,omitempty"`
	NotifyStatusShrink   *string `json:"NotifyStatus,omitempty" xml:"NotifyStatus,omitempty"`
	RuleKeyword          *string `json:"RuleKeyword,omitempty" xml:"RuleKeyword,omitempty"`
	RuleName             *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleSource           *string `json:"RuleSource,omitempty" xml:"RuleSource,omitempty"`
	RuleType             *int32  `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	StartApplyDate       *string `json:"StartApplyDate,omitempty" xml:"StartApplyDate,omitempty"`
}

func (s InsertTmMonitorRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertTmMonitorRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *InsertTmMonitorRuleShrinkRequest) SetClassificationShrink(v string) *InsertTmMonitorRuleShrinkRequest {
	s.ClassificationShrink = &v
	return s
}

func (s *InsertTmMonitorRuleShrinkRequest) SetEndApplyDate(v string) *InsertTmMonitorRuleShrinkRequest {
	s.EndApplyDate = &v
	return s
}

func (s *InsertTmMonitorRuleShrinkRequest) SetNotifyStatusShrink(v string) *InsertTmMonitorRuleShrinkRequest {
	s.NotifyStatusShrink = &v
	return s
}

func (s *InsertTmMonitorRuleShrinkRequest) SetRuleKeyword(v string) *InsertTmMonitorRuleShrinkRequest {
	s.RuleKeyword = &v
	return s
}

func (s *InsertTmMonitorRuleShrinkRequest) SetRuleName(v string) *InsertTmMonitorRuleShrinkRequest {
	s.RuleName = &v
	return s
}

func (s *InsertTmMonitorRuleShrinkRequest) SetRuleSource(v string) *InsertTmMonitorRuleShrinkRequest {
	s.RuleSource = &v
	return s
}

func (s *InsertTmMonitorRuleShrinkRequest) SetRuleType(v int32) *InsertTmMonitorRuleShrinkRequest {
	s.RuleType = &v
	return s
}

func (s *InsertTmMonitorRuleShrinkRequest) SetStartApplyDate(v string) *InsertTmMonitorRuleShrinkRequest {
	s.StartApplyDate = &v
	return s
}

type InsertTmMonitorRuleResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InsertTmMonitorRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertTmMonitorRuleResponseBody) GoString() string {
	return s.String()
}

func (s *InsertTmMonitorRuleResponseBody) SetErrorCode(v string) *InsertTmMonitorRuleResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *InsertTmMonitorRuleResponseBody) SetErrorMsg(v string) *InsertTmMonitorRuleResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *InsertTmMonitorRuleResponseBody) SetRequestId(v string) *InsertTmMonitorRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertTmMonitorRuleResponseBody) SetSuccess(v bool) *InsertTmMonitorRuleResponseBody {
	s.Success = &v
	return s
}

type InsertTmMonitorRuleResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InsertTmMonitorRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertTmMonitorRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertTmMonitorRuleResponse) GoString() string {
	return s.String()
}

func (s *InsertTmMonitorRuleResponse) SetHeaders(v map[string]*string) *InsertTmMonitorRuleResponse {
	s.Headers = v
	return s
}

func (s *InsertTmMonitorRuleResponse) SetStatusCode(v int32) *InsertTmMonitorRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *InsertTmMonitorRuleResponse) SetBody(v *InsertTmMonitorRuleResponseBody) *InsertTmMonitorRuleResponse {
	s.Body = v
	return s
}

type ListNotaryInfosRequest struct {
	BizOrderNo *string `json:"BizOrderNo,omitempty" xml:"BizOrderNo,omitempty"`
	NotaryType *int32  `json:"NotaryType,omitempty" xml:"NotaryType,omitempty"`
	PageNum    *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Token      *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s ListNotaryInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNotaryInfosRequest) GoString() string {
	return s.String()
}

func (s *ListNotaryInfosRequest) SetBizOrderNo(v string) *ListNotaryInfosRequest {
	s.BizOrderNo = &v
	return s
}

func (s *ListNotaryInfosRequest) SetNotaryType(v int32) *ListNotaryInfosRequest {
	s.NotaryType = &v
	return s
}

func (s *ListNotaryInfosRequest) SetPageNum(v int32) *ListNotaryInfosRequest {
	s.PageNum = &v
	return s
}

func (s *ListNotaryInfosRequest) SetPageSize(v int32) *ListNotaryInfosRequest {
	s.PageSize = &v
	return s
}

func (s *ListNotaryInfosRequest) SetToken(v string) *ListNotaryInfosRequest {
	s.Token = &v
	return s
}

type ListNotaryInfosResponseBody struct {
	CurrentPageNum *int32                           `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *ListNotaryInfosResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                          `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg       *string                          `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	NextPage       *bool                            `json:"NextPage,omitempty" xml:"NextPage,omitempty"`
	PageSize       *int32                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrePage        *bool                            `json:"PrePage,omitempty" xml:"PrePage,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalItemNum   *int32                           `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                           `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s ListNotaryInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNotaryInfosResponseBody) GoString() string {
	return s.String()
}

func (s *ListNotaryInfosResponseBody) SetCurrentPageNum(v int32) *ListNotaryInfosResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *ListNotaryInfosResponseBody) SetData(v *ListNotaryInfosResponseBodyData) *ListNotaryInfosResponseBody {
	s.Data = v
	return s
}

func (s *ListNotaryInfosResponseBody) SetErrorCode(v string) *ListNotaryInfosResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListNotaryInfosResponseBody) SetErrorMsg(v string) *ListNotaryInfosResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListNotaryInfosResponseBody) SetNextPage(v bool) *ListNotaryInfosResponseBody {
	s.NextPage = &v
	return s
}

func (s *ListNotaryInfosResponseBody) SetPageSize(v int32) *ListNotaryInfosResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListNotaryInfosResponseBody) SetPrePage(v bool) *ListNotaryInfosResponseBody {
	s.PrePage = &v
	return s
}

func (s *ListNotaryInfosResponseBody) SetRequestId(v string) *ListNotaryInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNotaryInfosResponseBody) SetSuccess(v bool) *ListNotaryInfosResponseBody {
	s.Success = &v
	return s
}

func (s *ListNotaryInfosResponseBody) SetTotalItemNum(v int32) *ListNotaryInfosResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *ListNotaryInfosResponseBody) SetTotalPageNum(v int32) *ListNotaryInfosResponseBody {
	s.TotalPageNum = &v
	return s
}

type ListNotaryInfosResponseBodyData struct {
	NotaryInfo []*ListNotaryInfosResponseBodyDataNotaryInfo `json:"NotaryInfo,omitempty" xml:"NotaryInfo,omitempty" type:"Repeated"`
}

func (s ListNotaryInfosResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNotaryInfosResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNotaryInfosResponseBodyData) SetNotaryInfo(v []*ListNotaryInfosResponseBodyDataNotaryInfo) *ListNotaryInfosResponseBodyData {
	s.NotaryInfo = v
	return s
}

type ListNotaryInfosResponseBodyDataNotaryInfo struct {
	BizOrderNo         *string `json:"BizOrderNo,omitempty" xml:"BizOrderNo,omitempty"`
	GmtModified        *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	NotaryFailedReason *string `json:"NotaryFailedReason,omitempty" xml:"NotaryFailedReason,omitempty"`
	NotaryStatus       *int32  `json:"NotaryStatus,omitempty" xml:"NotaryStatus,omitempty"`
	TmClassification   *string `json:"TmClassification,omitempty" xml:"TmClassification,omitempty"`
	TmRegisterNo       *string `json:"TmRegisterNo,omitempty" xml:"TmRegisterNo,omitempty"`
	// token
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s ListNotaryInfosResponseBodyDataNotaryInfo) String() string {
	return tea.Prettify(s)
}

func (s ListNotaryInfosResponseBodyDataNotaryInfo) GoString() string {
	return s.String()
}

func (s *ListNotaryInfosResponseBodyDataNotaryInfo) SetBizOrderNo(v string) *ListNotaryInfosResponseBodyDataNotaryInfo {
	s.BizOrderNo = &v
	return s
}

func (s *ListNotaryInfosResponseBodyDataNotaryInfo) SetGmtModified(v int64) *ListNotaryInfosResponseBodyDataNotaryInfo {
	s.GmtModified = &v
	return s
}

func (s *ListNotaryInfosResponseBodyDataNotaryInfo) SetNotaryFailedReason(v string) *ListNotaryInfosResponseBodyDataNotaryInfo {
	s.NotaryFailedReason = &v
	return s
}

func (s *ListNotaryInfosResponseBodyDataNotaryInfo) SetNotaryStatus(v int32) *ListNotaryInfosResponseBodyDataNotaryInfo {
	s.NotaryStatus = &v
	return s
}

func (s *ListNotaryInfosResponseBodyDataNotaryInfo) SetTmClassification(v string) *ListNotaryInfosResponseBodyDataNotaryInfo {
	s.TmClassification = &v
	return s
}

func (s *ListNotaryInfosResponseBodyDataNotaryInfo) SetTmRegisterNo(v string) *ListNotaryInfosResponseBodyDataNotaryInfo {
	s.TmRegisterNo = &v
	return s
}

func (s *ListNotaryInfosResponseBodyDataNotaryInfo) SetToken(v string) *ListNotaryInfosResponseBodyDataNotaryInfo {
	s.Token = &v
	return s
}

type ListNotaryInfosResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListNotaryInfosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListNotaryInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNotaryInfosResponse) GoString() string {
	return s.String()
}

func (s *ListNotaryInfosResponse) SetHeaders(v map[string]*string) *ListNotaryInfosResponse {
	s.Headers = v
	return s
}

func (s *ListNotaryInfosResponse) SetStatusCode(v int32) *ListNotaryInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNotaryInfosResponse) SetBody(v *ListNotaryInfosResponseBody) *ListNotaryInfosResponse {
	s.Body = v
	return s
}

type ListNotaryOrdersRequest struct {
	AliyunOrderId  *string `json:"AliyunOrderId,omitempty" xml:"AliyunOrderId,omitempty"`
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	EndOrderDate   *int64  `json:"EndOrderDate,omitempty" xml:"EndOrderDate,omitempty"`
	NotaryStatus   *int32  `json:"NotaryStatus,omitempty" xml:"NotaryStatus,omitempty"`
	NotaryType     *int32  `json:"NotaryType,omitempty" xml:"NotaryType,omitempty"`
	PageNum        *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortByType     *string `json:"SortByType,omitempty" xml:"SortByType,omitempty"`
	SortKeyType    *int32  `json:"SortKeyType,omitempty" xml:"SortKeyType,omitempty"`
	StartOrderDate *int64  `json:"StartOrderDate,omitempty" xml:"StartOrderDate,omitempty"`
}

func (s ListNotaryOrdersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNotaryOrdersRequest) GoString() string {
	return s.String()
}

func (s *ListNotaryOrdersRequest) SetAliyunOrderId(v string) *ListNotaryOrdersRequest {
	s.AliyunOrderId = &v
	return s
}

func (s *ListNotaryOrdersRequest) SetBizId(v string) *ListNotaryOrdersRequest {
	s.BizId = &v
	return s
}

func (s *ListNotaryOrdersRequest) SetEndOrderDate(v int64) *ListNotaryOrdersRequest {
	s.EndOrderDate = &v
	return s
}

func (s *ListNotaryOrdersRequest) SetNotaryStatus(v int32) *ListNotaryOrdersRequest {
	s.NotaryStatus = &v
	return s
}

func (s *ListNotaryOrdersRequest) SetNotaryType(v int32) *ListNotaryOrdersRequest {
	s.NotaryType = &v
	return s
}

func (s *ListNotaryOrdersRequest) SetPageNum(v int32) *ListNotaryOrdersRequest {
	s.PageNum = &v
	return s
}

func (s *ListNotaryOrdersRequest) SetPageSize(v int32) *ListNotaryOrdersRequest {
	s.PageSize = &v
	return s
}

func (s *ListNotaryOrdersRequest) SetSortByType(v string) *ListNotaryOrdersRequest {
	s.SortByType = &v
	return s
}

func (s *ListNotaryOrdersRequest) SetSortKeyType(v int32) *ListNotaryOrdersRequest {
	s.SortKeyType = &v
	return s
}

func (s *ListNotaryOrdersRequest) SetStartOrderDate(v int64) *ListNotaryOrdersRequest {
	s.StartOrderDate = &v
	return s
}

type ListNotaryOrdersResponseBody struct {
	CurrentPageNum *int32                            `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *ListNotaryOrdersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode      *string                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg       *string                           `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	NextPage       *bool                             `json:"NextPage,omitempty" xml:"NextPage,omitempty"`
	PageSize       *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrePage        *bool                             `json:"PrePage,omitempty" xml:"PrePage,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalItemNum   *int32                            `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                            `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s ListNotaryOrdersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNotaryOrdersResponseBody) GoString() string {
	return s.String()
}

func (s *ListNotaryOrdersResponseBody) SetCurrentPageNum(v int32) *ListNotaryOrdersResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *ListNotaryOrdersResponseBody) SetData(v *ListNotaryOrdersResponseBodyData) *ListNotaryOrdersResponseBody {
	s.Data = v
	return s
}

func (s *ListNotaryOrdersResponseBody) SetErrorCode(v string) *ListNotaryOrdersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ListNotaryOrdersResponseBody) SetErrorMsg(v string) *ListNotaryOrdersResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ListNotaryOrdersResponseBody) SetNextPage(v bool) *ListNotaryOrdersResponseBody {
	s.NextPage = &v
	return s
}

func (s *ListNotaryOrdersResponseBody) SetPageSize(v int32) *ListNotaryOrdersResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListNotaryOrdersResponseBody) SetPrePage(v bool) *ListNotaryOrdersResponseBody {
	s.PrePage = &v
	return s
}

func (s *ListNotaryOrdersResponseBody) SetRequestId(v string) *ListNotaryOrdersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNotaryOrdersResponseBody) SetSuccess(v bool) *ListNotaryOrdersResponseBody {
	s.Success = &v
	return s
}

func (s *ListNotaryOrdersResponseBody) SetTotalItemNum(v int32) *ListNotaryOrdersResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *ListNotaryOrdersResponseBody) SetTotalPageNum(v int32) *ListNotaryOrdersResponseBody {
	s.TotalPageNum = &v
	return s
}

type ListNotaryOrdersResponseBodyData struct {
	NotaryOrder []*ListNotaryOrdersResponseBodyDataNotaryOrder `json:"NotaryOrder,omitempty" xml:"NotaryOrder,omitempty" type:"Repeated"`
}

func (s ListNotaryOrdersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListNotaryOrdersResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListNotaryOrdersResponseBodyData) SetNotaryOrder(v []*ListNotaryOrdersResponseBodyDataNotaryOrder) *ListNotaryOrdersResponseBodyData {
	s.NotaryOrder = v
	return s
}

type ListNotaryOrdersResponseBodyDataNotaryOrder struct {
	AliyunOrderId      *string  `json:"AliyunOrderId,omitempty" xml:"AliyunOrderId,omitempty"`
	ApplyPostStatus    *string  `json:"ApplyPostStatus,omitempty" xml:"ApplyPostStatus,omitempty"`
	BizId              *string  `json:"BizId,omitempty" xml:"BizId,omitempty"`
	GmtModified        *int64   `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	NotaryCertificate  *string  `json:"NotaryCertificate,omitempty" xml:"NotaryCertificate,omitempty"`
	NotaryOrderId      *int64   `json:"NotaryOrderId,omitempty" xml:"NotaryOrderId,omitempty"`
	NotaryPlatformName *string  `json:"NotaryPlatformName,omitempty" xml:"NotaryPlatformName,omitempty"`
	NotaryStatus       *int32   `json:"NotaryStatus,omitempty" xml:"NotaryStatus,omitempty"`
	NotaryType         *int32   `json:"NotaryType,omitempty" xml:"NotaryType,omitempty"`
	OrderDate          *int64   `json:"OrderDate,omitempty" xml:"OrderDate,omitempty"`
	OrderPrice         *float32 `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	TmClassification   *string  `json:"TmClassification,omitempty" xml:"TmClassification,omitempty"`
	TmImage            *string  `json:"TmImage,omitempty" xml:"TmImage,omitempty"`
	TmName             *string  `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmRegisterNo       *string  `json:"TmRegisterNo,omitempty" xml:"TmRegisterNo,omitempty"`
}

func (s ListNotaryOrdersResponseBodyDataNotaryOrder) String() string {
	return tea.Prettify(s)
}

func (s ListNotaryOrdersResponseBodyDataNotaryOrder) GoString() string {
	return s.String()
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetAliyunOrderId(v string) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.AliyunOrderId = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetApplyPostStatus(v string) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.ApplyPostStatus = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetBizId(v string) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.BizId = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetGmtModified(v int64) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.GmtModified = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetNotaryCertificate(v string) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.NotaryCertificate = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetNotaryOrderId(v int64) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.NotaryOrderId = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetNotaryPlatformName(v string) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.NotaryPlatformName = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetNotaryStatus(v int32) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.NotaryStatus = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetNotaryType(v int32) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.NotaryType = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetOrderDate(v int64) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.OrderDate = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetOrderPrice(v float32) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.OrderPrice = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetTmClassification(v string) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.TmClassification = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetTmImage(v string) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.TmImage = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetTmName(v string) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.TmName = &v
	return s
}

func (s *ListNotaryOrdersResponseBodyDataNotaryOrder) SetTmRegisterNo(v string) *ListNotaryOrdersResponseBodyDataNotaryOrder {
	s.TmRegisterNo = &v
	return s
}

type ListNotaryOrdersResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListNotaryOrdersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListNotaryOrdersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNotaryOrdersResponse) GoString() string {
	return s.String()
}

func (s *ListNotaryOrdersResponse) SetHeaders(v map[string]*string) *ListNotaryOrdersResponse {
	s.Headers = v
	return s
}

func (s *ListNotaryOrdersResponse) SetStatusCode(v int32) *ListNotaryOrdersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNotaryOrdersResponse) SetBody(v *ListNotaryOrdersResponseBody) *ListNotaryOrdersResponse {
	s.Body = v
	return s
}

type ListTrademarkSbjKeyRequest struct {
	PrincipalKey  *string `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName *string `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
}

func (s ListTrademarkSbjKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTrademarkSbjKeyRequest) GoString() string {
	return s.String()
}

func (s *ListTrademarkSbjKeyRequest) SetPrincipalKey(v string) *ListTrademarkSbjKeyRequest {
	s.PrincipalKey = &v
	return s
}

func (s *ListTrademarkSbjKeyRequest) SetPrincipalName(v string) *ListTrademarkSbjKeyRequest {
	s.PrincipalName = &v
	return s
}

type ListTrademarkSbjKeyResponseBody struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TmSbjKeyInfo []*ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo `json:"TmSbjKeyInfo,omitempty" xml:"TmSbjKeyInfo,omitempty" type:"Repeated"`
}

func (s ListTrademarkSbjKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTrademarkSbjKeyResponseBody) GoString() string {
	return s.String()
}

func (s *ListTrademarkSbjKeyResponseBody) SetRequestId(v string) *ListTrademarkSbjKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBody) SetTmSbjKeyInfo(v []*ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) *ListTrademarkSbjKeyResponseBody {
	s.TmSbjKeyInfo = v
	return s
}

type ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo struct {
	AgentId        *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgreeProt      *string `json:"AgreeProt,omitempty" xml:"AgreeProt,omitempty"`
	CertInfo       *string `json:"CertInfo,omitempty" xml:"CertInfo,omitempty"`
	ClearData      *string `json:"ClearData,omitempty" xml:"ClearData,omitempty"`
	HashData       *string `json:"HashData,omitempty" xml:"HashData,omitempty"`
	KeyType        *int32  `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Pin            *string `json:"Pin,omitempty" xml:"Pin,omitempty"`
	PrincipalKey   *string `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName  *string `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	SignCert       *string `json:"SignCert,omitempty" xml:"SignCert,omitempty"`
	SignData       *string `json:"SignData,omitempty" xml:"SignData,omitempty"`
	StartValidDate *string `json:"StartValidDate,omitempty" xml:"StartValidDate,omitempty"`
	SubmitSignData *string `json:"SubmitSignData,omitempty" xml:"SubmitSignData,omitempty"`
	TypeCert       *string `json:"TypeCert,omitempty" xml:"TypeCert,omitempty"`
	Username       *string `json:"Username,omitempty" xml:"Username,omitempty"`
	ValidDate      *string `json:"ValidDate,omitempty" xml:"ValidDate,omitempty"`
	Tmurl          *string `json:"tmurl,omitempty" xml:"tmurl,omitempty"`
}

func (s ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) GoString() string {
	return s.String()
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetAgentId(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.AgentId = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetAgreeProt(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.AgreeProt = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetCertInfo(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.CertInfo = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetClearData(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.ClearData = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetHashData(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.HashData = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetKeyType(v int32) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.KeyType = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetName(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.Name = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetPin(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.Pin = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetPrincipalKey(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.PrincipalKey = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetPrincipalName(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.PrincipalName = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetSignCert(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.SignCert = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetSignData(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.SignData = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetStartValidDate(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.StartValidDate = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetSubmitSignData(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.SubmitSignData = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetTypeCert(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.TypeCert = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetUsername(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.Username = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetValidDate(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.ValidDate = &v
	return s
}

func (s *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo) SetTmurl(v string) *ListTrademarkSbjKeyResponseBodyTmSbjKeyInfo {
	s.Tmurl = &v
	return s
}

type ListTrademarkSbjKeyResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListTrademarkSbjKeyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTrademarkSbjKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTrademarkSbjKeyResponse) GoString() string {
	return s.String()
}

func (s *ListTrademarkSbjKeyResponse) SetHeaders(v map[string]*string) *ListTrademarkSbjKeyResponse {
	s.Headers = v
	return s
}

func (s *ListTrademarkSbjKeyResponse) SetStatusCode(v int32) *ListTrademarkSbjKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTrademarkSbjKeyResponse) SetBody(v *ListTrademarkSbjKeyResponseBody) *ListTrademarkSbjKeyResponse {
	s.Body = v
	return s
}

type ModifySubmitTransferMaterailRequest struct {
	Addr                             *string                `json:"Addr,omitempty" xml:"Addr,omitempty"`
	AssigneeProxy                    *string                `json:"AssigneeProxy,omitempty" xml:"AssigneeProxy,omitempty"`
	BizId                            *string                `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BuyerBusinessLicense             *string                `json:"BuyerBusinessLicense,omitempty" xml:"BuyerBusinessLicense,omitempty"`
	BuyerBusinessLicenseTranslation  *string                `json:"BuyerBusinessLicenseTranslation,omitempty" xml:"BuyerBusinessLicenseTranslation,omitempty"`
	BuyerIdCard                      *string                `json:"BuyerIdCard,omitempty" xml:"BuyerIdCard,omitempty"`
	CardNo                           *string                `json:"CardNo,omitempty" xml:"CardNo,omitempty"`
	CardType                         *string                `json:"CardType,omitempty" xml:"CardType,omitempty"`
	Complete                         *bool                  `json:"Complete,omitempty" xml:"Complete,omitempty"`
	ContactEmail                     *string                `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactMobile                    *string                `json:"ContactMobile,omitempty" xml:"ContactMobile,omitempty"`
	ContactName                      *string                `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	Name                             *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	Notarization                     *string                `json:"Notarization,omitempty" xml:"Notarization,omitempty"`
	Note                             *string                `json:"Note,omitempty" xml:"Note,omitempty"`
	Other                            map[string]interface{} `json:"Other,omitempty" xml:"Other,omitempty"`
	RegistrationCert                 *string                `json:"RegistrationCert,omitempty" xml:"RegistrationCert,omitempty"`
	SellerApply                      *string                `json:"SellerApply,omitempty" xml:"SellerApply,omitempty"`
	SellerBusinessLicense            *string                `json:"SellerBusinessLicense,omitempty" xml:"SellerBusinessLicense,omitempty"`
	SellerBusinessLicenseTranslation *string                `json:"SellerBusinessLicenseTranslation,omitempty" xml:"SellerBusinessLicenseTranslation,omitempty"`
	SellerIdCard                     *string                `json:"SellerIdCard,omitempty" xml:"SellerIdCard,omitempty"`
	SellerProxy                      *string                `json:"SellerProxy,omitempty" xml:"SellerProxy,omitempty"`
	TradeMaterialFullUpdate          *bool                  `json:"TradeMaterialFullUpdate,omitempty" xml:"TradeMaterialFullUpdate,omitempty"`
}

func (s ModifySubmitTransferMaterailRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySubmitTransferMaterailRequest) GoString() string {
	return s.String()
}

func (s *ModifySubmitTransferMaterailRequest) SetAddr(v string) *ModifySubmitTransferMaterailRequest {
	s.Addr = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetAssigneeProxy(v string) *ModifySubmitTransferMaterailRequest {
	s.AssigneeProxy = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetBizId(v string) *ModifySubmitTransferMaterailRequest {
	s.BizId = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetBuyerBusinessLicense(v string) *ModifySubmitTransferMaterailRequest {
	s.BuyerBusinessLicense = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetBuyerBusinessLicenseTranslation(v string) *ModifySubmitTransferMaterailRequest {
	s.BuyerBusinessLicenseTranslation = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetBuyerIdCard(v string) *ModifySubmitTransferMaterailRequest {
	s.BuyerIdCard = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetCardNo(v string) *ModifySubmitTransferMaterailRequest {
	s.CardNo = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetCardType(v string) *ModifySubmitTransferMaterailRequest {
	s.CardType = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetComplete(v bool) *ModifySubmitTransferMaterailRequest {
	s.Complete = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetContactEmail(v string) *ModifySubmitTransferMaterailRequest {
	s.ContactEmail = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetContactMobile(v string) *ModifySubmitTransferMaterailRequest {
	s.ContactMobile = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetContactName(v string) *ModifySubmitTransferMaterailRequest {
	s.ContactName = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetName(v string) *ModifySubmitTransferMaterailRequest {
	s.Name = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetNotarization(v string) *ModifySubmitTransferMaterailRequest {
	s.Notarization = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetNote(v string) *ModifySubmitTransferMaterailRequest {
	s.Note = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetOther(v map[string]interface{}) *ModifySubmitTransferMaterailRequest {
	s.Other = v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetRegistrationCert(v string) *ModifySubmitTransferMaterailRequest {
	s.RegistrationCert = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetSellerApply(v string) *ModifySubmitTransferMaterailRequest {
	s.SellerApply = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetSellerBusinessLicense(v string) *ModifySubmitTransferMaterailRequest {
	s.SellerBusinessLicense = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetSellerBusinessLicenseTranslation(v string) *ModifySubmitTransferMaterailRequest {
	s.SellerBusinessLicenseTranslation = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetSellerIdCard(v string) *ModifySubmitTransferMaterailRequest {
	s.SellerIdCard = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetSellerProxy(v string) *ModifySubmitTransferMaterailRequest {
	s.SellerProxy = &v
	return s
}

func (s *ModifySubmitTransferMaterailRequest) SetTradeMaterialFullUpdate(v bool) *ModifySubmitTransferMaterailRequest {
	s.TradeMaterialFullUpdate = &v
	return s
}

type ModifySubmitTransferMaterailShrinkRequest struct {
	Addr                             *string `json:"Addr,omitempty" xml:"Addr,omitempty"`
	AssigneeProxy                    *string `json:"AssigneeProxy,omitempty" xml:"AssigneeProxy,omitempty"`
	BizId                            *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BuyerBusinessLicense             *string `json:"BuyerBusinessLicense,omitempty" xml:"BuyerBusinessLicense,omitempty"`
	BuyerBusinessLicenseTranslation  *string `json:"BuyerBusinessLicenseTranslation,omitempty" xml:"BuyerBusinessLicenseTranslation,omitempty"`
	BuyerIdCard                      *string `json:"BuyerIdCard,omitempty" xml:"BuyerIdCard,omitempty"`
	CardNo                           *string `json:"CardNo,omitempty" xml:"CardNo,omitempty"`
	CardType                         *string `json:"CardType,omitempty" xml:"CardType,omitempty"`
	Complete                         *bool   `json:"Complete,omitempty" xml:"Complete,omitempty"`
	ContactEmail                     *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactMobile                    *string `json:"ContactMobile,omitempty" xml:"ContactMobile,omitempty"`
	ContactName                      *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	Name                             *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Notarization                     *string `json:"Notarization,omitempty" xml:"Notarization,omitempty"`
	Note                             *string `json:"Note,omitempty" xml:"Note,omitempty"`
	OtherShrink                      *string `json:"Other,omitempty" xml:"Other,omitempty"`
	RegistrationCert                 *string `json:"RegistrationCert,omitempty" xml:"RegistrationCert,omitempty"`
	SellerApply                      *string `json:"SellerApply,omitempty" xml:"SellerApply,omitempty"`
	SellerBusinessLicense            *string `json:"SellerBusinessLicense,omitempty" xml:"SellerBusinessLicense,omitempty"`
	SellerBusinessLicenseTranslation *string `json:"SellerBusinessLicenseTranslation,omitempty" xml:"SellerBusinessLicenseTranslation,omitempty"`
	SellerIdCard                     *string `json:"SellerIdCard,omitempty" xml:"SellerIdCard,omitempty"`
	SellerProxy                      *string `json:"SellerProxy,omitempty" xml:"SellerProxy,omitempty"`
	TradeMaterialFullUpdate          *bool   `json:"TradeMaterialFullUpdate,omitempty" xml:"TradeMaterialFullUpdate,omitempty"`
}

func (s ModifySubmitTransferMaterailShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySubmitTransferMaterailShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetAddr(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.Addr = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetAssigneeProxy(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.AssigneeProxy = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetBizId(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.BizId = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetBuyerBusinessLicense(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.BuyerBusinessLicense = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetBuyerBusinessLicenseTranslation(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.BuyerBusinessLicenseTranslation = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetBuyerIdCard(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.BuyerIdCard = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetCardNo(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.CardNo = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetCardType(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.CardType = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetComplete(v bool) *ModifySubmitTransferMaterailShrinkRequest {
	s.Complete = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetContactEmail(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.ContactEmail = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetContactMobile(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.ContactMobile = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetContactName(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.ContactName = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetName(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.Name = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetNotarization(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.Notarization = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetNote(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.Note = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetOtherShrink(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.OtherShrink = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetRegistrationCert(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.RegistrationCert = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetSellerApply(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.SellerApply = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetSellerBusinessLicense(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.SellerBusinessLicense = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetSellerBusinessLicenseTranslation(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.SellerBusinessLicenseTranslation = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetSellerIdCard(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.SellerIdCard = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetSellerProxy(v string) *ModifySubmitTransferMaterailShrinkRequest {
	s.SellerProxy = &v
	return s
}

func (s *ModifySubmitTransferMaterailShrinkRequest) SetTradeMaterialFullUpdate(v bool) *ModifySubmitTransferMaterailShrinkRequest {
	s.TradeMaterialFullUpdate = &v
	return s
}

type ModifySubmitTransferMaterailResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifySubmitTransferMaterailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySubmitTransferMaterailResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySubmitTransferMaterailResponseBody) SetErrorCode(v string) *ModifySubmitTransferMaterailResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ModifySubmitTransferMaterailResponseBody) SetErrorMsg(v string) *ModifySubmitTransferMaterailResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *ModifySubmitTransferMaterailResponseBody) SetRequestId(v string) *ModifySubmitTransferMaterailResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySubmitTransferMaterailResponseBody) SetSuccess(v bool) *ModifySubmitTransferMaterailResponseBody {
	s.Success = &v
	return s
}

type ModifySubmitTransferMaterailResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySubmitTransferMaterailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySubmitTransferMaterailResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySubmitTransferMaterailResponse) GoString() string {
	return s.String()
}

func (s *ModifySubmitTransferMaterailResponse) SetHeaders(v map[string]*string) *ModifySubmitTransferMaterailResponse {
	s.Headers = v
	return s
}

func (s *ModifySubmitTransferMaterailResponse) SetStatusCode(v int32) *ModifySubmitTransferMaterailResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySubmitTransferMaterailResponse) SetBody(v *ModifySubmitTransferMaterailResponseBody) *ModifySubmitTransferMaterailResponse {
	s.Body = v
	return s
}

type OperateProduceRequest struct {
	BizId       *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType     *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExtMap      *string `json:"ExtMap,omitempty" xml:"ExtMap,omitempty"`
	OperateType *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
}

func (s OperateProduceRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateProduceRequest) GoString() string {
	return s.String()
}

func (s *OperateProduceRequest) SetBizId(v string) *OperateProduceRequest {
	s.BizId = &v
	return s
}

func (s *OperateProduceRequest) SetBizType(v string) *OperateProduceRequest {
	s.BizType = &v
	return s
}

func (s *OperateProduceRequest) SetExtMap(v string) *OperateProduceRequest {
	s.ExtMap = &v
	return s
}

func (s *OperateProduceRequest) SetOperateType(v string) *OperateProduceRequest {
	s.OperateType = &v
	return s
}

type OperateProduceResponseBody struct {
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s OperateProduceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateProduceResponseBody) GoString() string {
	return s.String()
}

func (s *OperateProduceResponseBody) SetRequestId(v string) *OperateProduceResponseBody {
	s.RequestId = &v
	return s
}

type OperateProduceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *OperateProduceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s OperateProduceResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateProduceResponse) GoString() string {
	return s.String()
}

func (s *OperateProduceResponse) SetHeaders(v map[string]*string) *OperateProduceResponse {
	s.Headers = v
	return s
}

func (s *OperateProduceResponse) SetStatusCode(v int32) *OperateProduceResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateProduceResponse) SetBody(v *OperateProduceResponseBody) *OperateProduceResponse {
	s.Body = v
	return s
}

type PartnerUpdateTrademarkNameRequest struct {
	AliyunKp       *string `json:"AliyunKp,omitempty" xml:"AliyunKp,omitempty"`
	Bid            *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CallerParentId *int64  `json:"CallerParentId,omitempty" xml:"CallerParentId,omitempty"`
	CallerType     *string `json:"CallerType,omitempty" xml:"CallerType,omitempty"`
	EventSceneType *int64  `json:"EventSceneType,omitempty" xml:"EventSceneType,omitempty"`
	IntentionBizId *string `json:"IntentionBizId,omitempty" xml:"IntentionBizId,omitempty"`
	TmComment      *string `json:"TmComment,omitempty" xml:"TmComment,omitempty"`
	TmIcon         *string `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName         *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
	Type           *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s PartnerUpdateTrademarkNameRequest) String() string {
	return tea.Prettify(s)
}

func (s PartnerUpdateTrademarkNameRequest) GoString() string {
	return s.String()
}

func (s *PartnerUpdateTrademarkNameRequest) SetAliyunKp(v string) *PartnerUpdateTrademarkNameRequest {
	s.AliyunKp = &v
	return s
}

func (s *PartnerUpdateTrademarkNameRequest) SetBid(v string) *PartnerUpdateTrademarkNameRequest {
	s.Bid = &v
	return s
}

func (s *PartnerUpdateTrademarkNameRequest) SetBizId(v string) *PartnerUpdateTrademarkNameRequest {
	s.BizId = &v
	return s
}

func (s *PartnerUpdateTrademarkNameRequest) SetCallerParentId(v int64) *PartnerUpdateTrademarkNameRequest {
	s.CallerParentId = &v
	return s
}

func (s *PartnerUpdateTrademarkNameRequest) SetCallerType(v string) *PartnerUpdateTrademarkNameRequest {
	s.CallerType = &v
	return s
}

func (s *PartnerUpdateTrademarkNameRequest) SetEventSceneType(v int64) *PartnerUpdateTrademarkNameRequest {
	s.EventSceneType = &v
	return s
}

func (s *PartnerUpdateTrademarkNameRequest) SetIntentionBizId(v string) *PartnerUpdateTrademarkNameRequest {
	s.IntentionBizId = &v
	return s
}

func (s *PartnerUpdateTrademarkNameRequest) SetTmComment(v string) *PartnerUpdateTrademarkNameRequest {
	s.TmComment = &v
	return s
}

func (s *PartnerUpdateTrademarkNameRequest) SetTmIcon(v string) *PartnerUpdateTrademarkNameRequest {
	s.TmIcon = &v
	return s
}

func (s *PartnerUpdateTrademarkNameRequest) SetTmName(v string) *PartnerUpdateTrademarkNameRequest {
	s.TmName = &v
	return s
}

func (s *PartnerUpdateTrademarkNameRequest) SetType(v int32) *PartnerUpdateTrademarkNameRequest {
	s.Type = &v
	return s
}

type PartnerUpdateTrademarkNameResponseBody struct {
	AllowRetry     *bool   `json:"AllowRetry,omitempty" xml:"AllowRetry,omitempty"`
	AppName        *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DynamicCode    *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrorCode      *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg       *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PartnerUpdateTrademarkNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PartnerUpdateTrademarkNameResponseBody) GoString() string {
	return s.String()
}

func (s *PartnerUpdateTrademarkNameResponseBody) SetAllowRetry(v bool) *PartnerUpdateTrademarkNameResponseBody {
	s.AllowRetry = &v
	return s
}

func (s *PartnerUpdateTrademarkNameResponseBody) SetAppName(v string) *PartnerUpdateTrademarkNameResponseBody {
	s.AppName = &v
	return s
}

func (s *PartnerUpdateTrademarkNameResponseBody) SetDynamicCode(v string) *PartnerUpdateTrademarkNameResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *PartnerUpdateTrademarkNameResponseBody) SetDynamicMessage(v string) *PartnerUpdateTrademarkNameResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *PartnerUpdateTrademarkNameResponseBody) SetErrorCode(v string) *PartnerUpdateTrademarkNameResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *PartnerUpdateTrademarkNameResponseBody) SetErrorMsg(v string) *PartnerUpdateTrademarkNameResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *PartnerUpdateTrademarkNameResponseBody) SetHttpStatusCode(v int32) *PartnerUpdateTrademarkNameResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PartnerUpdateTrademarkNameResponseBody) SetRequestId(v string) *PartnerUpdateTrademarkNameResponseBody {
	s.RequestId = &v
	return s
}

func (s *PartnerUpdateTrademarkNameResponseBody) SetSuccess(v bool) *PartnerUpdateTrademarkNameResponseBody {
	s.Success = &v
	return s
}

type PartnerUpdateTrademarkNameResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PartnerUpdateTrademarkNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PartnerUpdateTrademarkNameResponse) String() string {
	return tea.Prettify(s)
}

func (s PartnerUpdateTrademarkNameResponse) GoString() string {
	return s.String()
}

func (s *PartnerUpdateTrademarkNameResponse) SetHeaders(v map[string]*string) *PartnerUpdateTrademarkNameResponse {
	s.Headers = v
	return s
}

func (s *PartnerUpdateTrademarkNameResponse) SetStatusCode(v int32) *PartnerUpdateTrademarkNameResponse {
	s.StatusCode = &v
	return s
}

func (s *PartnerUpdateTrademarkNameResponse) SetBody(v *PartnerUpdateTrademarkNameResponseBody) *PartnerUpdateTrademarkNameResponse {
	s.Body = v
	return s
}

type QueryCommunicationLogsRequest struct {
	BizId    *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Type     *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryCommunicationLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCommunicationLogsRequest) GoString() string {
	return s.String()
}

func (s *QueryCommunicationLogsRequest) SetBizId(v string) *QueryCommunicationLogsRequest {
	s.BizId = &v
	return s
}

func (s *QueryCommunicationLogsRequest) SetPageNum(v int32) *QueryCommunicationLogsRequest {
	s.PageNum = &v
	return s
}

func (s *QueryCommunicationLogsRequest) SetPageSize(v int32) *QueryCommunicationLogsRequest {
	s.PageSize = &v
	return s
}

func (s *QueryCommunicationLogsRequest) SetType(v int32) *QueryCommunicationLogsRequest {
	s.Type = &v
	return s
}

type QueryCommunicationLogsResponseBody struct {
	Data      *QueryCommunicationLogsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryCommunicationLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCommunicationLogsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCommunicationLogsResponseBody) SetData(v *QueryCommunicationLogsResponseBodyData) *QueryCommunicationLogsResponseBody {
	s.Data = v
	return s
}

func (s *QueryCommunicationLogsResponseBody) SetRequestId(v string) *QueryCommunicationLogsResponseBody {
	s.RequestId = &v
	return s
}

type QueryCommunicationLogsResponseBodyData struct {
	TaskList []*QueryCommunicationLogsResponseBodyDataTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Repeated"`
}

func (s QueryCommunicationLogsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryCommunicationLogsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryCommunicationLogsResponseBodyData) SetTaskList(v []*QueryCommunicationLogsResponseBodyDataTaskList) *QueryCommunicationLogsResponseBodyData {
	s.TaskList = v
	return s
}

type QueryCommunicationLogsResponseBodyDataTaskList struct {
	BizId       *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
	PartnerCode *string `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s QueryCommunicationLogsResponseBodyDataTaskList) String() string {
	return tea.Prettify(s)
}

func (s QueryCommunicationLogsResponseBodyDataTaskList) GoString() string {
	return s.String()
}

func (s *QueryCommunicationLogsResponseBodyDataTaskList) SetBizId(v string) *QueryCommunicationLogsResponseBodyDataTaskList {
	s.BizId = &v
	return s
}

func (s *QueryCommunicationLogsResponseBodyDataTaskList) SetCreateTime(v int64) *QueryCommunicationLogsResponseBodyDataTaskList {
	s.CreateTime = &v
	return s
}

func (s *QueryCommunicationLogsResponseBodyDataTaskList) SetNote(v string) *QueryCommunicationLogsResponseBodyDataTaskList {
	s.Note = &v
	return s
}

func (s *QueryCommunicationLogsResponseBodyDataTaskList) SetPartnerCode(v string) *QueryCommunicationLogsResponseBodyDataTaskList {
	s.PartnerCode = &v
	return s
}

func (s *QueryCommunicationLogsResponseBodyDataTaskList) SetUpdateTime(v int64) *QueryCommunicationLogsResponseBodyDataTaskList {
	s.UpdateTime = &v
	return s
}

type QueryCommunicationLogsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryCommunicationLogsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryCommunicationLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCommunicationLogsResponse) GoString() string {
	return s.String()
}

func (s *QueryCommunicationLogsResponse) SetHeaders(v map[string]*string) *QueryCommunicationLogsResponse {
	s.Headers = v
	return s
}

func (s *QueryCommunicationLogsResponse) SetStatusCode(v int32) *QueryCommunicationLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCommunicationLogsResponse) SetBody(v *QueryCommunicationLogsResponseBody) *QueryCommunicationLogsResponse {
	s.Body = v
	return s
}

type QueryCredentialsInfoRequest struct {
	CompanyName  *string `json:"CompanyName,omitempty" xml:"CompanyName,omitempty"`
	MaterialType *string `json:"MaterialType,omitempty" xml:"MaterialType,omitempty"`
	OssKey       *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
}

func (s QueryCredentialsInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCredentialsInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryCredentialsInfoRequest) SetCompanyName(v string) *QueryCredentialsInfoRequest {
	s.CompanyName = &v
	return s
}

func (s *QueryCredentialsInfoRequest) SetMaterialType(v string) *QueryCredentialsInfoRequest {
	s.MaterialType = &v
	return s
}

func (s *QueryCredentialsInfoRequest) SetOssKey(v string) *QueryCredentialsInfoRequest {
	s.OssKey = &v
	return s
}

type QueryCredentialsInfoResponseBody struct {
	CredentialsInfo *QueryCredentialsInfoResponseBodyCredentialsInfo `json:"CredentialsInfo,omitempty" xml:"CredentialsInfo,omitempty" type:"Struct"`
	RequestId       *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryCredentialsInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCredentialsInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCredentialsInfoResponseBody) SetCredentialsInfo(v *QueryCredentialsInfoResponseBodyCredentialsInfo) *QueryCredentialsInfoResponseBody {
	s.CredentialsInfo = v
	return s
}

func (s *QueryCredentialsInfoResponseBody) SetRequestId(v string) *QueryCredentialsInfoResponseBody {
	s.RequestId = &v
	return s
}

type QueryCredentialsInfoResponseBodyCredentialsInfo struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	CardNumber  *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	CompanyName *string `json:"CompanyName,omitempty" xml:"CompanyName,omitempty"`
	PersonName  *string `json:"PersonName,omitempty" xml:"PersonName,omitempty"`
	Province    *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s QueryCredentialsInfoResponseBodyCredentialsInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryCredentialsInfoResponseBodyCredentialsInfo) GoString() string {
	return s.String()
}

func (s *QueryCredentialsInfoResponseBodyCredentialsInfo) SetAddress(v string) *QueryCredentialsInfoResponseBodyCredentialsInfo {
	s.Address = &v
	return s
}

func (s *QueryCredentialsInfoResponseBodyCredentialsInfo) SetCardNumber(v string) *QueryCredentialsInfoResponseBodyCredentialsInfo {
	s.CardNumber = &v
	return s
}

func (s *QueryCredentialsInfoResponseBodyCredentialsInfo) SetCompanyName(v string) *QueryCredentialsInfoResponseBodyCredentialsInfo {
	s.CompanyName = &v
	return s
}

func (s *QueryCredentialsInfoResponseBodyCredentialsInfo) SetPersonName(v string) *QueryCredentialsInfoResponseBodyCredentialsInfo {
	s.PersonName = &v
	return s
}

func (s *QueryCredentialsInfoResponseBodyCredentialsInfo) SetProvince(v string) *QueryCredentialsInfoResponseBodyCredentialsInfo {
	s.Province = &v
	return s
}

type QueryCredentialsInfoResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryCredentialsInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryCredentialsInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCredentialsInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryCredentialsInfoResponse) SetHeaders(v map[string]*string) *QueryCredentialsInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryCredentialsInfoResponse) SetStatusCode(v int32) *QueryCredentialsInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCredentialsInfoResponse) SetBody(v *QueryCredentialsInfoResponseBody) *QueryCredentialsInfoResponse {
	s.Body = v
	return s
}

type QueryExtensionAttributeRequest struct {
	AttributeKey *string `json:"AttributeKey,omitempty" xml:"AttributeKey,omitempty"`
	BizId        *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s QueryExtensionAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryExtensionAttributeRequest) GoString() string {
	return s.String()
}

func (s *QueryExtensionAttributeRequest) SetAttributeKey(v string) *QueryExtensionAttributeRequest {
	s.AttributeKey = &v
	return s
}

func (s *QueryExtensionAttributeRequest) SetBizId(v string) *QueryExtensionAttributeRequest {
	s.BizId = &v
	return s
}

type QueryExtensionAttributeResponseBody struct {
	AttributeValue *string `json:"AttributeValue,omitempty" xml:"AttributeValue,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryExtensionAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryExtensionAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *QueryExtensionAttributeResponseBody) SetAttributeValue(v string) *QueryExtensionAttributeResponseBody {
	s.AttributeValue = &v
	return s
}

func (s *QueryExtensionAttributeResponseBody) SetCode(v string) *QueryExtensionAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *QueryExtensionAttributeResponseBody) SetMessage(v string) *QueryExtensionAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *QueryExtensionAttributeResponseBody) SetRequestId(v string) *QueryExtensionAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryExtensionAttributeResponseBody) SetSuccess(v bool) *QueryExtensionAttributeResponseBody {
	s.Success = &v
	return s
}

type QueryExtensionAttributeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryExtensionAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryExtensionAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryExtensionAttributeResponse) GoString() string {
	return s.String()
}

func (s *QueryExtensionAttributeResponse) SetHeaders(v map[string]*string) *QueryExtensionAttributeResponse {
	s.Headers = v
	return s
}

func (s *QueryExtensionAttributeResponse) SetStatusCode(v int32) *QueryExtensionAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryExtensionAttributeResponse) SetBody(v *QueryExtensionAttributeResponseBody) *QueryExtensionAttributeResponse {
	s.Body = v
	return s
}

type QueryIntentionDetailRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s QueryIntentionDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryIntentionDetailRequest) SetBizId(v string) *QueryIntentionDetailRequest {
	s.BizId = &v
	return s
}

type QueryIntentionDetailResponseBody struct {
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Classification *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Mobile         *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	PartnerMobile  *string `json:"PartnerMobile,omitempty" xml:"PartnerMobile,omitempty"`
	RegisterNumber *string `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	RelationBizId  *string `json:"RelationBizId,omitempty" xml:"RelationBizId,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status         *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type           *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateTime     *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName       *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s QueryIntentionDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryIntentionDetailResponseBody) SetBizId(v string) *QueryIntentionDetailResponseBody {
	s.BizId = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetClassification(v string) *QueryIntentionDetailResponseBody {
	s.Classification = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetCreateTime(v int64) *QueryIntentionDetailResponseBody {
	s.CreateTime = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetDescription(v string) *QueryIntentionDetailResponseBody {
	s.Description = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetMobile(v string) *QueryIntentionDetailResponseBody {
	s.Mobile = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetPartnerMobile(v string) *QueryIntentionDetailResponseBody {
	s.PartnerMobile = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetRegisterNumber(v string) *QueryIntentionDetailResponseBody {
	s.RegisterNumber = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetRelationBizId(v string) *QueryIntentionDetailResponseBody {
	s.RelationBizId = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetRequestId(v string) *QueryIntentionDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetStatus(v int32) *QueryIntentionDetailResponseBody {
	s.Status = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetType(v int32) *QueryIntentionDetailResponseBody {
	s.Type = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetUpdateTime(v int64) *QueryIntentionDetailResponseBody {
	s.UpdateTime = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetUserId(v string) *QueryIntentionDetailResponseBody {
	s.UserId = &v
	return s
}

func (s *QueryIntentionDetailResponseBody) SetUserName(v string) *QueryIntentionDetailResponseBody {
	s.UserName = &v
	return s
}

type QueryIntentionDetailResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryIntentionDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryIntentionDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryIntentionDetailResponse) SetHeaders(v map[string]*string) *QueryIntentionDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryIntentionDetailResponse) SetStatusCode(v int32) *QueryIntentionDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryIntentionDetailResponse) SetBody(v *QueryIntentionDetailResponseBody) *QueryIntentionDetailResponse {
	s.Body = v
	return s
}

type QueryIntentionListRequest struct {
	PageNum   *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortFiled *string `json:"SortFiled,omitempty" xml:"SortFiled,omitempty"`
	SortOrder *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	Status    *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type      *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryIntentionListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionListRequest) GoString() string {
	return s.String()
}

func (s *QueryIntentionListRequest) SetPageNum(v int32) *QueryIntentionListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryIntentionListRequest) SetPageSize(v int32) *QueryIntentionListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryIntentionListRequest) SetSortFiled(v string) *QueryIntentionListRequest {
	s.SortFiled = &v
	return s
}

func (s *QueryIntentionListRequest) SetSortOrder(v string) *QueryIntentionListRequest {
	s.SortOrder = &v
	return s
}

func (s *QueryIntentionListRequest) SetStatus(v int32) *QueryIntentionListRequest {
	s.Status = &v
	return s
}

func (s *QueryIntentionListRequest) SetType(v int32) *QueryIntentionListRequest {
	s.Type = &v
	return s
}

type QueryIntentionListResponseBody struct {
	CurrentPageNum *int32                              `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryIntentionListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                              `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                              `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryIntentionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryIntentionListResponseBody) SetCurrentPageNum(v int32) *QueryIntentionListResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryIntentionListResponseBody) SetData(v *QueryIntentionListResponseBodyData) *QueryIntentionListResponseBody {
	s.Data = v
	return s
}

func (s *QueryIntentionListResponseBody) SetPageSize(v int32) *QueryIntentionListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryIntentionListResponseBody) SetRequestId(v string) *QueryIntentionListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryIntentionListResponseBody) SetTotalItemNum(v int32) *QueryIntentionListResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryIntentionListResponseBody) SetTotalPageNum(v int32) *QueryIntentionListResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryIntentionListResponseBodyData struct {
	Intention []*QueryIntentionListResponseBodyDataIntention `json:"Intention,omitempty" xml:"Intention,omitempty" type:"Repeated"`
}

func (s QueryIntentionListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryIntentionListResponseBodyData) SetIntention(v []*QueryIntentionListResponseBodyDataIntention) *QueryIntentionListResponseBodyData {
	s.Intention = v
	return s
}

type QueryIntentionListResponseBodyDataIntention struct {
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Classification *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RegisterNumber *string `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	Status         *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type           *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateTime     *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryIntentionListResponseBodyDataIntention) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionListResponseBodyDataIntention) GoString() string {
	return s.String()
}

func (s *QueryIntentionListResponseBodyDataIntention) SetBizId(v string) *QueryIntentionListResponseBodyDataIntention {
	s.BizId = &v
	return s
}

func (s *QueryIntentionListResponseBodyDataIntention) SetClassification(v string) *QueryIntentionListResponseBodyDataIntention {
	s.Classification = &v
	return s
}

func (s *QueryIntentionListResponseBodyDataIntention) SetCreateTime(v int64) *QueryIntentionListResponseBodyDataIntention {
	s.CreateTime = &v
	return s
}

func (s *QueryIntentionListResponseBodyDataIntention) SetDescription(v string) *QueryIntentionListResponseBodyDataIntention {
	s.Description = &v
	return s
}

func (s *QueryIntentionListResponseBodyDataIntention) SetRegisterNumber(v string) *QueryIntentionListResponseBodyDataIntention {
	s.RegisterNumber = &v
	return s
}

func (s *QueryIntentionListResponseBodyDataIntention) SetStatus(v int32) *QueryIntentionListResponseBodyDataIntention {
	s.Status = &v
	return s
}

func (s *QueryIntentionListResponseBodyDataIntention) SetType(v int32) *QueryIntentionListResponseBodyDataIntention {
	s.Type = &v
	return s
}

func (s *QueryIntentionListResponseBodyDataIntention) SetUpdateTime(v int64) *QueryIntentionListResponseBodyDataIntention {
	s.UpdateTime = &v
	return s
}

func (s *QueryIntentionListResponseBodyDataIntention) SetUserId(v string) *QueryIntentionListResponseBodyDataIntention {
	s.UserId = &v
	return s
}

type QueryIntentionListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryIntentionListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryIntentionListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionListResponse) GoString() string {
	return s.String()
}

func (s *QueryIntentionListResponse) SetHeaders(v map[string]*string) *QueryIntentionListResponse {
	s.Headers = v
	return s
}

func (s *QueryIntentionListResponse) SetStatusCode(v int32) *QueryIntentionListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryIntentionListResponse) SetBody(v *QueryIntentionListResponseBody) *QueryIntentionListResponse {
	s.Body = v
	return s
}

type QueryIntentionOwnerRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s QueryIntentionOwnerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionOwnerRequest) GoString() string {
	return s.String()
}

func (s *QueryIntentionOwnerRequest) SetBizId(v string) *QueryIntentionOwnerRequest {
	s.BizId = &v
	return s
}

type QueryIntentionOwnerResponseBody struct {
	ErrorCode *string                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string                                `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	Module    *QueryIntentionOwnerResponseBodyModule `json:"Module,omitempty" xml:"Module,omitempty" type:"Struct"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryIntentionOwnerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionOwnerResponseBody) GoString() string {
	return s.String()
}

func (s *QueryIntentionOwnerResponseBody) SetErrorCode(v string) *QueryIntentionOwnerResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *QueryIntentionOwnerResponseBody) SetErrorMsg(v string) *QueryIntentionOwnerResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *QueryIntentionOwnerResponseBody) SetModule(v *QueryIntentionOwnerResponseBodyModule) *QueryIntentionOwnerResponseBody {
	s.Module = v
	return s
}

func (s *QueryIntentionOwnerResponseBody) SetRequestId(v string) *QueryIntentionOwnerResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryIntentionOwnerResponseBody) SetSuccess(v bool) *QueryIntentionOwnerResponseBody {
	s.Success = &v
	return s
}

type QueryIntentionOwnerResponseBodyModule struct {
	OwnerId   *float32 `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	OwnerName *string  `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
}

func (s QueryIntentionOwnerResponseBodyModule) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionOwnerResponseBodyModule) GoString() string {
	return s.String()
}

func (s *QueryIntentionOwnerResponseBodyModule) SetOwnerId(v float32) *QueryIntentionOwnerResponseBodyModule {
	s.OwnerId = &v
	return s
}

func (s *QueryIntentionOwnerResponseBodyModule) SetOwnerName(v string) *QueryIntentionOwnerResponseBodyModule {
	s.OwnerName = &v
	return s
}

type QueryIntentionOwnerResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryIntentionOwnerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryIntentionOwnerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionOwnerResponse) GoString() string {
	return s.String()
}

func (s *QueryIntentionOwnerResponse) SetHeaders(v map[string]*string) *QueryIntentionOwnerResponse {
	s.Headers = v
	return s
}

func (s *QueryIntentionOwnerResponse) SetStatusCode(v int32) *QueryIntentionOwnerResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryIntentionOwnerResponse) SetBody(v *QueryIntentionOwnerResponseBody) *QueryIntentionOwnerResponse {
	s.Body = v
	return s
}

type QueryIntentionPriceRequest struct {
	Channel        *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	IntentionBizId *string `json:"IntentionBizId,omitempty" xml:"IntentionBizId,omitempty"`
}

func (s QueryIntentionPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionPriceRequest) GoString() string {
	return s.String()
}

func (s *QueryIntentionPriceRequest) SetChannel(v string) *QueryIntentionPriceRequest {
	s.Channel = &v
	return s
}

func (s *QueryIntentionPriceRequest) SetIntentionBizId(v string) *QueryIntentionPriceRequest {
	s.IntentionBizId = &v
	return s
}

type QueryIntentionPriceResponseBody struct {
	CurrentPageNum *int32                               `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryIntentionPriceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                               `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                               `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryIntentionPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionPriceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryIntentionPriceResponseBody) SetCurrentPageNum(v int32) *QueryIntentionPriceResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryIntentionPriceResponseBody) SetData(v *QueryIntentionPriceResponseBodyData) *QueryIntentionPriceResponseBody {
	s.Data = v
	return s
}

func (s *QueryIntentionPriceResponseBody) SetPageSize(v int32) *QueryIntentionPriceResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryIntentionPriceResponseBody) SetRequestId(v string) *QueryIntentionPriceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryIntentionPriceResponseBody) SetTotalItemNum(v int32) *QueryIntentionPriceResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryIntentionPriceResponseBody) SetTotalPageNum(v int32) *QueryIntentionPriceResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryIntentionPriceResponseBodyData struct {
	TmProduces []*QueryIntentionPriceResponseBodyDataTmProduces `json:"TmProduces,omitempty" xml:"TmProduces,omitempty" type:"Repeated"`
}

func (s QueryIntentionPriceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionPriceResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryIntentionPriceResponseBodyData) SetTmProduces(v []*QueryIntentionPriceResponseBodyDataTmProduces) *QueryIntentionPriceResponseBodyData {
	s.TmProduces = v
	return s
}

type QueryIntentionPriceResponseBodyDataTmProduces struct {
	BizId               *string                                                           `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CreateTime          *int64                                                            `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FirstClassification *QueryIntentionPriceResponseBodyDataTmProducesFirstClassification `json:"FirstClassification,omitempty" xml:"FirstClassification,omitempty" type:"Struct"`
	LoaUrl              *string                                                           `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	MaterialId          *string                                                           `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	MaterialName        *string                                                           `json:"MaterialName,omitempty" xml:"MaterialName,omitempty"`
	Note                *string                                                           `json:"Note,omitempty" xml:"Note,omitempty"`
	OrderPrice          *float32                                                          `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	ServicePrice        *float32                                                          `json:"ServicePrice,omitempty" xml:"ServicePrice,omitempty"`
	Status              *int32                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	SupplementId        *int64                                                            `json:"SupplementId,omitempty" xml:"SupplementId,omitempty"`
	SupplementStatus    *int32                                                            `json:"SupplementStatus,omitempty" xml:"SupplementStatus,omitempty"`
	ThirdClassification *QueryIntentionPriceResponseBodyDataTmProducesThirdClassification `json:"ThirdClassification,omitempty" xml:"ThirdClassification,omitempty" type:"Struct"`
	TmIcon              *string                                                           `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName              *string                                                           `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber            *string                                                           `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	TotalPrice          *float32                                                          `json:"TotalPrice,omitempty" xml:"TotalPrice,omitempty"`
	Type                *int32                                                            `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateTime          *int64                                                            `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s QueryIntentionPriceResponseBodyDataTmProduces) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionPriceResponseBodyDataTmProduces) GoString() string {
	return s.String()
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetBizId(v string) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.BizId = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetCreateTime(v int64) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.CreateTime = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetFirstClassification(v *QueryIntentionPriceResponseBodyDataTmProducesFirstClassification) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.FirstClassification = v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetLoaUrl(v string) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.LoaUrl = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetMaterialId(v string) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.MaterialId = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetMaterialName(v string) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.MaterialName = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetNote(v string) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.Note = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetOrderPrice(v float32) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.OrderPrice = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetServicePrice(v float32) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.ServicePrice = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetStatus(v int32) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.Status = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetSupplementId(v int64) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.SupplementId = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetSupplementStatus(v int32) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.SupplementStatus = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetThirdClassification(v *QueryIntentionPriceResponseBodyDataTmProducesThirdClassification) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.ThirdClassification = v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetTmIcon(v string) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.TmIcon = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetTmName(v string) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.TmName = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetTmNumber(v string) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.TmNumber = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetTotalPrice(v float32) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.TotalPrice = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetType(v int32) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.Type = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProduces) SetUpdateTime(v int64) *QueryIntentionPriceResponseBodyDataTmProduces {
	s.UpdateTime = &v
	return s
}

type QueryIntentionPriceResponseBodyDataTmProducesFirstClassification struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryIntentionPriceResponseBodyDataTmProducesFirstClassification) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionPriceResponseBodyDataTmProducesFirstClassification) GoString() string {
	return s.String()
}

func (s *QueryIntentionPriceResponseBodyDataTmProducesFirstClassification) SetClassificationCode(v string) *QueryIntentionPriceResponseBodyDataTmProducesFirstClassification {
	s.ClassificationCode = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProducesFirstClassification) SetClassificationName(v string) *QueryIntentionPriceResponseBodyDataTmProducesFirstClassification {
	s.ClassificationName = &v
	return s
}

type QueryIntentionPriceResponseBodyDataTmProducesThirdClassification struct {
	ThirdClassifications []*QueryIntentionPriceResponseBodyDataTmProducesThirdClassificationThirdClassifications `json:"ThirdClassifications,omitempty" xml:"ThirdClassifications,omitempty" type:"Repeated"`
}

func (s QueryIntentionPriceResponseBodyDataTmProducesThirdClassification) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionPriceResponseBodyDataTmProducesThirdClassification) GoString() string {
	return s.String()
}

func (s *QueryIntentionPriceResponseBodyDataTmProducesThirdClassification) SetThirdClassifications(v []*QueryIntentionPriceResponseBodyDataTmProducesThirdClassificationThirdClassifications) *QueryIntentionPriceResponseBodyDataTmProducesThirdClassification {
	s.ThirdClassifications = v
	return s
}

type QueryIntentionPriceResponseBodyDataTmProducesThirdClassificationThirdClassifications struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryIntentionPriceResponseBodyDataTmProducesThirdClassificationThirdClassifications) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionPriceResponseBodyDataTmProducesThirdClassificationThirdClassifications) GoString() string {
	return s.String()
}

func (s *QueryIntentionPriceResponseBodyDataTmProducesThirdClassificationThirdClassifications) SetClassificationCode(v string) *QueryIntentionPriceResponseBodyDataTmProducesThirdClassificationThirdClassifications {
	s.ClassificationCode = &v
	return s
}

func (s *QueryIntentionPriceResponseBodyDataTmProducesThirdClassificationThirdClassifications) SetClassificationName(v string) *QueryIntentionPriceResponseBodyDataTmProducesThirdClassificationThirdClassifications {
	s.ClassificationName = &v
	return s
}

type QueryIntentionPriceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryIntentionPriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryIntentionPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIntentionPriceResponse) GoString() string {
	return s.String()
}

func (s *QueryIntentionPriceResponse) SetHeaders(v map[string]*string) *QueryIntentionPriceResponse {
	s.Headers = v
	return s
}

func (s *QueryIntentionPriceResponse) SetStatusCode(v int32) *QueryIntentionPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryIntentionPriceResponse) SetBody(v *QueryIntentionPriceResponseBody) *QueryIntentionPriceResponse {
	s.Body = v
	return s
}

type QueryMaterialRequest struct {
	Id                   *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	QueryUnconfirmedInfo *bool  `json:"QueryUnconfirmedInfo,omitempty" xml:"QueryUnconfirmedInfo,omitempty"`
}

func (s QueryMaterialRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMaterialRequest) GoString() string {
	return s.String()
}

func (s *QueryMaterialRequest) SetId(v int64) *QueryMaterialRequest {
	s.Id = &v
	return s
}

func (s *QueryMaterialRequest) SetQueryUnconfirmedInfo(v bool) *QueryMaterialRequest {
	s.QueryUnconfirmedInfo = &v
	return s
}

type QueryMaterialResponseBody struct {
	Address               *string `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceUrl    *string `json:"BusinessLicenceUrl,omitempty" xml:"BusinessLicenceUrl,omitempty"`
	CardNumber            *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	City                  *string `json:"City,omitempty" xml:"City,omitempty"`
	ContactAddress        *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactCity           *string `json:"ContactCity,omitempty" xml:"ContactCity,omitempty"`
	ContactCounty         *string `json:"ContactCounty,omitempty" xml:"ContactCounty,omitempty"`
	ContactDistrict       *string `json:"ContactDistrict,omitempty" xml:"ContactDistrict,omitempty"`
	ContactEmail          *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName           *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber         *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactProvince       *string `json:"ContactProvince,omitempty" xml:"ContactProvince,omitempty"`
	ContactZipcode        *string `json:"ContactZipcode,omitempty" xml:"ContactZipcode,omitempty"`
	Country               *string `json:"Country,omitempty" xml:"Country,omitempty"`
	EAddress              *string `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName                 *string `json:"EName,omitempty" xml:"EName,omitempty"`
	EvidenceCatalogPath   *string `json:"EvidenceCatalogPath,omitempty" xml:"EvidenceCatalogPath,omitempty"`
	EvidenceOfservicePath *string `json:"EvidenceOfservicePath,omitempty" xml:"EvidenceOfservicePath,omitempty"`
	EvidencePath          *string `json:"EvidencePath,omitempty" xml:"EvidencePath,omitempty"`
	ExpirationDate        *int64  `json:"ExpirationDate,omitempty" xml:"ExpirationDate,omitempty"`
	FactandreasonPdfPath  *string `json:"FactandreasonPdfPath,omitempty" xml:"FactandreasonPdfPath,omitempty"`
	FgsqPath              *string `json:"FgsqPath,omitempty" xml:"FgsqPath,omitempty"`
	FileBgPath            *string `json:"FileBgPath,omitempty" xml:"FileBgPath,omitempty"`
	FileFsSqPath          *string `json:"FileFsSqPath,omitempty" xml:"FileFsSqPath,omitempty"`
	FileGtPath            *string `json:"FileGtPath,omitempty" xml:"FileGtPath,omitempty"`
	FileYgPath            *string `json:"FileYgPath,omitempty" xml:"FileYgPath,omitempty"`
	// id
	Id                             *int64                                          `json:"Id,omitempty" xml:"Id,omitempty"`
	IdCardName                     *string                                         `json:"IdCardName,omitempty" xml:"IdCardName,omitempty"`
	IdCardNumber                   *string                                         `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardUrl                      *string                                         `json:"IdCardUrl,omitempty" xml:"IdCardUrl,omitempty"`
	LegalNoticeKey                 *string                                         `json:"LegalNoticeKey,omitempty" xml:"LegalNoticeKey,omitempty"`
	LegalNoticeUrl                 *string                                         `json:"LegalNoticeUrl,omitempty" xml:"LegalNoticeUrl,omitempty"`
	LoaStatus                      *int32                                          `json:"LoaStatus,omitempty" xml:"LoaStatus,omitempty"`
	LoaUrl                         *string                                         `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	MaterialVersion                *string                                         `json:"MaterialVersion,omitempty" xml:"MaterialVersion,omitempty"`
	Name                           *string                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	Note                           *string                                         `json:"Note,omitempty" xml:"Note,omitempty"`
	PassportUrl                    *string                                         `json:"PassportUrl,omitempty" xml:"PassportUrl,omitempty"`
	PersonalType                   *int64                                          `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PrincipalDescription           *string                                         `json:"PrincipalDescription,omitempty" xml:"PrincipalDescription,omitempty"`
	PrincipalName                  *int32                                          `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	Province                       *string                                         `json:"Province,omitempty" xml:"Province,omitempty"`
	Reason                         *string                                         `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Region                         *int32                                          `json:"Region,omitempty" xml:"Region,omitempty"`
	RequestId                      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ReviewAdditionalFiles          *QueryMaterialResponseBodyReviewAdditionalFiles `json:"ReviewAdditionalFiles,omitempty" xml:"ReviewAdditionalFiles,omitempty" type:"Struct"`
	ReviewApplicationFile          *string                                         `json:"ReviewApplicationFile,omitempty" xml:"ReviewApplicationFile,omitempty"`
	Status                         *int32                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	SupplementEvidenceCatalogFile  *string                                         `json:"SupplementEvidenceCatalogFile,omitempty" xml:"SupplementEvidenceCatalogFile,omitempty"`
	SupplementEvidenceMaterialFile *string                                         `json:"SupplementEvidenceMaterialFile,omitempty" xml:"SupplementEvidenceMaterialFile,omitempty"`
	SupplementReasonFile           *string                                         `json:"SupplementReasonFile,omitempty" xml:"SupplementReasonFile,omitempty"`
	SystemVersion                  *string                                         `json:"SystemVersion,omitempty" xml:"SystemVersion,omitempty"`
	Town                           *string                                         `json:"Town,omitempty" xml:"Town,omitempty"`
	Type                           *int32                                          `json:"Type,omitempty" xml:"Type,omitempty"`
	ValidDate                      *int64                                          `json:"ValidDate,omitempty" xml:"ValidDate,omitempty"`
}

func (s QueryMaterialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMaterialResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMaterialResponseBody) SetAddress(v string) *QueryMaterialResponseBody {
	s.Address = &v
	return s
}

func (s *QueryMaterialResponseBody) SetBusinessLicenceUrl(v string) *QueryMaterialResponseBody {
	s.BusinessLicenceUrl = &v
	return s
}

func (s *QueryMaterialResponseBody) SetCardNumber(v string) *QueryMaterialResponseBody {
	s.CardNumber = &v
	return s
}

func (s *QueryMaterialResponseBody) SetCity(v string) *QueryMaterialResponseBody {
	s.City = &v
	return s
}

func (s *QueryMaterialResponseBody) SetContactAddress(v string) *QueryMaterialResponseBody {
	s.ContactAddress = &v
	return s
}

func (s *QueryMaterialResponseBody) SetContactCity(v string) *QueryMaterialResponseBody {
	s.ContactCity = &v
	return s
}

func (s *QueryMaterialResponseBody) SetContactCounty(v string) *QueryMaterialResponseBody {
	s.ContactCounty = &v
	return s
}

func (s *QueryMaterialResponseBody) SetContactDistrict(v string) *QueryMaterialResponseBody {
	s.ContactDistrict = &v
	return s
}

func (s *QueryMaterialResponseBody) SetContactEmail(v string) *QueryMaterialResponseBody {
	s.ContactEmail = &v
	return s
}

func (s *QueryMaterialResponseBody) SetContactName(v string) *QueryMaterialResponseBody {
	s.ContactName = &v
	return s
}

func (s *QueryMaterialResponseBody) SetContactNumber(v string) *QueryMaterialResponseBody {
	s.ContactNumber = &v
	return s
}

func (s *QueryMaterialResponseBody) SetContactProvince(v string) *QueryMaterialResponseBody {
	s.ContactProvince = &v
	return s
}

func (s *QueryMaterialResponseBody) SetContactZipcode(v string) *QueryMaterialResponseBody {
	s.ContactZipcode = &v
	return s
}

func (s *QueryMaterialResponseBody) SetCountry(v string) *QueryMaterialResponseBody {
	s.Country = &v
	return s
}

func (s *QueryMaterialResponseBody) SetEAddress(v string) *QueryMaterialResponseBody {
	s.EAddress = &v
	return s
}

func (s *QueryMaterialResponseBody) SetEName(v string) *QueryMaterialResponseBody {
	s.EName = &v
	return s
}

func (s *QueryMaterialResponseBody) SetEvidenceCatalogPath(v string) *QueryMaterialResponseBody {
	s.EvidenceCatalogPath = &v
	return s
}

func (s *QueryMaterialResponseBody) SetEvidenceOfservicePath(v string) *QueryMaterialResponseBody {
	s.EvidenceOfservicePath = &v
	return s
}

func (s *QueryMaterialResponseBody) SetEvidencePath(v string) *QueryMaterialResponseBody {
	s.EvidencePath = &v
	return s
}

func (s *QueryMaterialResponseBody) SetExpirationDate(v int64) *QueryMaterialResponseBody {
	s.ExpirationDate = &v
	return s
}

func (s *QueryMaterialResponseBody) SetFactandreasonPdfPath(v string) *QueryMaterialResponseBody {
	s.FactandreasonPdfPath = &v
	return s
}

func (s *QueryMaterialResponseBody) SetFgsqPath(v string) *QueryMaterialResponseBody {
	s.FgsqPath = &v
	return s
}

func (s *QueryMaterialResponseBody) SetFileBgPath(v string) *QueryMaterialResponseBody {
	s.FileBgPath = &v
	return s
}

func (s *QueryMaterialResponseBody) SetFileFsSqPath(v string) *QueryMaterialResponseBody {
	s.FileFsSqPath = &v
	return s
}

func (s *QueryMaterialResponseBody) SetFileGtPath(v string) *QueryMaterialResponseBody {
	s.FileGtPath = &v
	return s
}

func (s *QueryMaterialResponseBody) SetFileYgPath(v string) *QueryMaterialResponseBody {
	s.FileYgPath = &v
	return s
}

func (s *QueryMaterialResponseBody) SetId(v int64) *QueryMaterialResponseBody {
	s.Id = &v
	return s
}

func (s *QueryMaterialResponseBody) SetIdCardName(v string) *QueryMaterialResponseBody {
	s.IdCardName = &v
	return s
}

func (s *QueryMaterialResponseBody) SetIdCardNumber(v string) *QueryMaterialResponseBody {
	s.IdCardNumber = &v
	return s
}

func (s *QueryMaterialResponseBody) SetIdCardUrl(v string) *QueryMaterialResponseBody {
	s.IdCardUrl = &v
	return s
}

func (s *QueryMaterialResponseBody) SetLegalNoticeKey(v string) *QueryMaterialResponseBody {
	s.LegalNoticeKey = &v
	return s
}

func (s *QueryMaterialResponseBody) SetLegalNoticeUrl(v string) *QueryMaterialResponseBody {
	s.LegalNoticeUrl = &v
	return s
}

func (s *QueryMaterialResponseBody) SetLoaStatus(v int32) *QueryMaterialResponseBody {
	s.LoaStatus = &v
	return s
}

func (s *QueryMaterialResponseBody) SetLoaUrl(v string) *QueryMaterialResponseBody {
	s.LoaUrl = &v
	return s
}

func (s *QueryMaterialResponseBody) SetMaterialVersion(v string) *QueryMaterialResponseBody {
	s.MaterialVersion = &v
	return s
}

func (s *QueryMaterialResponseBody) SetName(v string) *QueryMaterialResponseBody {
	s.Name = &v
	return s
}

func (s *QueryMaterialResponseBody) SetNote(v string) *QueryMaterialResponseBody {
	s.Note = &v
	return s
}

func (s *QueryMaterialResponseBody) SetPassportUrl(v string) *QueryMaterialResponseBody {
	s.PassportUrl = &v
	return s
}

func (s *QueryMaterialResponseBody) SetPersonalType(v int64) *QueryMaterialResponseBody {
	s.PersonalType = &v
	return s
}

func (s *QueryMaterialResponseBody) SetPrincipalDescription(v string) *QueryMaterialResponseBody {
	s.PrincipalDescription = &v
	return s
}

func (s *QueryMaterialResponseBody) SetPrincipalName(v int32) *QueryMaterialResponseBody {
	s.PrincipalName = &v
	return s
}

func (s *QueryMaterialResponseBody) SetProvince(v string) *QueryMaterialResponseBody {
	s.Province = &v
	return s
}

func (s *QueryMaterialResponseBody) SetReason(v string) *QueryMaterialResponseBody {
	s.Reason = &v
	return s
}

func (s *QueryMaterialResponseBody) SetRegion(v int32) *QueryMaterialResponseBody {
	s.Region = &v
	return s
}

func (s *QueryMaterialResponseBody) SetRequestId(v string) *QueryMaterialResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMaterialResponseBody) SetReviewAdditionalFiles(v *QueryMaterialResponseBodyReviewAdditionalFiles) *QueryMaterialResponseBody {
	s.ReviewAdditionalFiles = v
	return s
}

func (s *QueryMaterialResponseBody) SetReviewApplicationFile(v string) *QueryMaterialResponseBody {
	s.ReviewApplicationFile = &v
	return s
}

func (s *QueryMaterialResponseBody) SetStatus(v int32) *QueryMaterialResponseBody {
	s.Status = &v
	return s
}

func (s *QueryMaterialResponseBody) SetSupplementEvidenceCatalogFile(v string) *QueryMaterialResponseBody {
	s.SupplementEvidenceCatalogFile = &v
	return s
}

func (s *QueryMaterialResponseBody) SetSupplementEvidenceMaterialFile(v string) *QueryMaterialResponseBody {
	s.SupplementEvidenceMaterialFile = &v
	return s
}

func (s *QueryMaterialResponseBody) SetSupplementReasonFile(v string) *QueryMaterialResponseBody {
	s.SupplementReasonFile = &v
	return s
}

func (s *QueryMaterialResponseBody) SetSystemVersion(v string) *QueryMaterialResponseBody {
	s.SystemVersion = &v
	return s
}

func (s *QueryMaterialResponseBody) SetTown(v string) *QueryMaterialResponseBody {
	s.Town = &v
	return s
}

func (s *QueryMaterialResponseBody) SetType(v int32) *QueryMaterialResponseBody {
	s.Type = &v
	return s
}

func (s *QueryMaterialResponseBody) SetValidDate(v int64) *QueryMaterialResponseBody {
	s.ValidDate = &v
	return s
}

type QueryMaterialResponseBodyReviewAdditionalFiles struct {
	ReviewAdditionalFile []*string `json:"ReviewAdditionalFile,omitempty" xml:"ReviewAdditionalFile,omitempty" type:"Repeated"`
}

func (s QueryMaterialResponseBodyReviewAdditionalFiles) String() string {
	return tea.Prettify(s)
}

func (s QueryMaterialResponseBodyReviewAdditionalFiles) GoString() string {
	return s.String()
}

func (s *QueryMaterialResponseBodyReviewAdditionalFiles) SetReviewAdditionalFile(v []*string) *QueryMaterialResponseBodyReviewAdditionalFiles {
	s.ReviewAdditionalFile = v
	return s
}

type QueryMaterialResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMaterialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMaterialResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMaterialResponse) GoString() string {
	return s.String()
}

func (s *QueryMaterialResponse) SetHeaders(v map[string]*string) *QueryMaterialResponse {
	s.Headers = v
	return s
}

func (s *QueryMaterialResponse) SetStatusCode(v int32) *QueryMaterialResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMaterialResponse) SetBody(v *QueryMaterialResponseBody) *QueryMaterialResponse {
	s.Body = v
	return s
}

type QueryMaterialListRequest struct {
	CardNumber      *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	MaterialId      *int64  `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	MaterialVersion *string `json:"MaterialVersion,omitempty" xml:"MaterialVersion,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNum         *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrincipalName   *int32  `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	Region          *int32  `json:"Region,omitempty" xml:"Region,omitempty"`
	Status          *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	SystemVersion   *string `json:"SystemVersion,omitempty" xml:"SystemVersion,omitempty"`
	Type            *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryMaterialListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMaterialListRequest) GoString() string {
	return s.String()
}

func (s *QueryMaterialListRequest) SetCardNumber(v string) *QueryMaterialListRequest {
	s.CardNumber = &v
	return s
}

func (s *QueryMaterialListRequest) SetMaterialId(v int64) *QueryMaterialListRequest {
	s.MaterialId = &v
	return s
}

func (s *QueryMaterialListRequest) SetMaterialVersion(v string) *QueryMaterialListRequest {
	s.MaterialVersion = &v
	return s
}

func (s *QueryMaterialListRequest) SetName(v string) *QueryMaterialListRequest {
	s.Name = &v
	return s
}

func (s *QueryMaterialListRequest) SetPageNum(v int32) *QueryMaterialListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryMaterialListRequest) SetPageSize(v int32) *QueryMaterialListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryMaterialListRequest) SetPrincipalName(v int32) *QueryMaterialListRequest {
	s.PrincipalName = &v
	return s
}

func (s *QueryMaterialListRequest) SetRegion(v int32) *QueryMaterialListRequest {
	s.Region = &v
	return s
}

func (s *QueryMaterialListRequest) SetStatus(v int32) *QueryMaterialListRequest {
	s.Status = &v
	return s
}

func (s *QueryMaterialListRequest) SetSystemVersion(v string) *QueryMaterialListRequest {
	s.SystemVersion = &v
	return s
}

func (s *QueryMaterialListRequest) SetType(v int32) *QueryMaterialListRequest {
	s.Type = &v
	return s
}

type QueryMaterialListResponseBody struct {
	CurrentPageNum *int32                             `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryMaterialListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                             `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                             `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryMaterialListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMaterialListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMaterialListResponseBody) SetCurrentPageNum(v int32) *QueryMaterialListResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryMaterialListResponseBody) SetData(v *QueryMaterialListResponseBodyData) *QueryMaterialListResponseBody {
	s.Data = v
	return s
}

func (s *QueryMaterialListResponseBody) SetPageSize(v int32) *QueryMaterialListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryMaterialListResponseBody) SetRequestId(v string) *QueryMaterialListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMaterialListResponseBody) SetTotalItemNum(v int32) *QueryMaterialListResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryMaterialListResponseBody) SetTotalPageNum(v int32) *QueryMaterialListResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryMaterialListResponseBodyData struct {
	Trademark []*QueryMaterialListResponseBodyDataTrademark `json:"Trademark,omitempty" xml:"Trademark,omitempty" type:"Repeated"`
}

func (s QueryMaterialListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryMaterialListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryMaterialListResponseBodyData) SetTrademark(v []*QueryMaterialListResponseBodyDataTrademark) *QueryMaterialListResponseBodyData {
	s.Trademark = v
	return s
}

type QueryMaterialListResponseBodyDataTrademark struct {
	CardNumber           *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	ContactName          *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	Id                   *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	LoaKey               *string `json:"LoaKey,omitempty" xml:"LoaKey,omitempty"`
	LoaStatus            *int32  `json:"LoaStatus,omitempty" xml:"LoaStatus,omitempty"`
	MaterialVersion      *string `json:"MaterialVersion,omitempty" xml:"MaterialVersion,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PrincipalDescription *string `json:"PrincipalDescription,omitempty" xml:"PrincipalDescription,omitempty"`
	PrincipalName        *int32  `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	Reason               *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Region               *int32  `json:"Region,omitempty" xml:"Region,omitempty"`
	Status               *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	SystemVersion        *string `json:"SystemVersion,omitempty" xml:"SystemVersion,omitempty"`
	Type                 *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	ValidDate            *int64  `json:"ValidDate,omitempty" xml:"ValidDate,omitempty"`
}

func (s QueryMaterialListResponseBodyDataTrademark) String() string {
	return tea.Prettify(s)
}

func (s QueryMaterialListResponseBodyDataTrademark) GoString() string {
	return s.String()
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetCardNumber(v string) *QueryMaterialListResponseBodyDataTrademark {
	s.CardNumber = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetContactName(v string) *QueryMaterialListResponseBodyDataTrademark {
	s.ContactName = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetId(v int64) *QueryMaterialListResponseBodyDataTrademark {
	s.Id = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetLoaKey(v string) *QueryMaterialListResponseBodyDataTrademark {
	s.LoaKey = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetLoaStatus(v int32) *QueryMaterialListResponseBodyDataTrademark {
	s.LoaStatus = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetMaterialVersion(v string) *QueryMaterialListResponseBodyDataTrademark {
	s.MaterialVersion = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetName(v string) *QueryMaterialListResponseBodyDataTrademark {
	s.Name = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetPrincipalDescription(v string) *QueryMaterialListResponseBodyDataTrademark {
	s.PrincipalDescription = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetPrincipalName(v int32) *QueryMaterialListResponseBodyDataTrademark {
	s.PrincipalName = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetReason(v string) *QueryMaterialListResponseBodyDataTrademark {
	s.Reason = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetRegion(v int32) *QueryMaterialListResponseBodyDataTrademark {
	s.Region = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetStatus(v int32) *QueryMaterialListResponseBodyDataTrademark {
	s.Status = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetSystemVersion(v string) *QueryMaterialListResponseBodyDataTrademark {
	s.SystemVersion = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetType(v int32) *QueryMaterialListResponseBodyDataTrademark {
	s.Type = &v
	return s
}

func (s *QueryMaterialListResponseBodyDataTrademark) SetValidDate(v int64) *QueryMaterialListResponseBodyDataTrademark {
	s.ValidDate = &v
	return s
}

type QueryMaterialListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMaterialListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMaterialListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMaterialListResponse) GoString() string {
	return s.String()
}

func (s *QueryMaterialListResponse) SetHeaders(v map[string]*string) *QueryMaterialListResponse {
	s.Headers = v
	return s
}

func (s *QueryMaterialListResponse) SetStatusCode(v int32) *QueryMaterialListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMaterialListResponse) SetBody(v *QueryMaterialListResponseBody) *QueryMaterialListResponse {
	s.Body = v
	return s
}

type QueryMonitorKeywordsRequest struct {
	Keywords []*string `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
	RuleType *int32    `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
}

func (s QueryMonitorKeywordsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMonitorKeywordsRequest) GoString() string {
	return s.String()
}

func (s *QueryMonitorKeywordsRequest) SetKeywords(v []*string) *QueryMonitorKeywordsRequest {
	s.Keywords = v
	return s
}

func (s *QueryMonitorKeywordsRequest) SetRuleType(v int32) *QueryMonitorKeywordsRequest {
	s.RuleType = &v
	return s
}

type QueryMonitorKeywordsResponseBody struct {
	Data      *QueryMonitorKeywordsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMonitorKeywordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMonitorKeywordsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMonitorKeywordsResponseBody) SetData(v *QueryMonitorKeywordsResponseBodyData) *QueryMonitorKeywordsResponseBody {
	s.Data = v
	return s
}

func (s *QueryMonitorKeywordsResponseBody) SetRequestId(v string) *QueryMonitorKeywordsResponseBody {
	s.RequestId = &v
	return s
}

type QueryMonitorKeywordsResponseBodyData struct {
	Keywords []*string `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
}

func (s QueryMonitorKeywordsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryMonitorKeywordsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryMonitorKeywordsResponseBodyData) SetKeywords(v []*string) *QueryMonitorKeywordsResponseBodyData {
	s.Keywords = v
	return s
}

type QueryMonitorKeywordsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMonitorKeywordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMonitorKeywordsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMonitorKeywordsResponse) GoString() string {
	return s.String()
}

func (s *QueryMonitorKeywordsResponse) SetHeaders(v map[string]*string) *QueryMonitorKeywordsResponse {
	s.Headers = v
	return s
}

func (s *QueryMonitorKeywordsResponse) SetStatusCode(v int32) *QueryMonitorKeywordsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMonitorKeywordsResponse) SetBody(v *QueryMonitorKeywordsResponseBody) *QueryMonitorKeywordsResponse {
	s.Body = v
	return s
}

type QueryOfficialFileCustomListRequest struct {
	PageNum  *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryOfficialFileCustomListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOfficialFileCustomListRequest) GoString() string {
	return s.String()
}

func (s *QueryOfficialFileCustomListRequest) SetPageNum(v int32) *QueryOfficialFileCustomListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryOfficialFileCustomListRequest) SetPageSize(v int32) *QueryOfficialFileCustomListRequest {
	s.PageSize = &v
	return s
}

type QueryOfficialFileCustomListResponseBody struct {
	CurrentPageNum *int32                                       `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryOfficialFileCustomListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                                       `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                                       `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryOfficialFileCustomListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOfficialFileCustomListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOfficialFileCustomListResponseBody) SetCurrentPageNum(v int32) *QueryOfficialFileCustomListResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryOfficialFileCustomListResponseBody) SetData(v *QueryOfficialFileCustomListResponseBodyData) *QueryOfficialFileCustomListResponseBody {
	s.Data = v
	return s
}

func (s *QueryOfficialFileCustomListResponseBody) SetPageSize(v int32) *QueryOfficialFileCustomListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryOfficialFileCustomListResponseBody) SetRequestId(v string) *QueryOfficialFileCustomListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryOfficialFileCustomListResponseBody) SetTotalItemNum(v int32) *QueryOfficialFileCustomListResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryOfficialFileCustomListResponseBody) SetTotalPageNum(v int32) *QueryOfficialFileCustomListResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryOfficialFileCustomListResponseBodyData struct {
	CustomList []*QueryOfficialFileCustomListResponseBodyDataCustomList `json:"CustomList,omitempty" xml:"CustomList,omitempty" type:"Repeated"`
}

func (s QueryOfficialFileCustomListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryOfficialFileCustomListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryOfficialFileCustomListResponseBodyData) SetCustomList(v []*QueryOfficialFileCustomListResponseBodyDataCustomList) *QueryOfficialFileCustomListResponseBodyData {
	s.CustomList = v
	return s
}

type QueryOfficialFileCustomListResponseBodyDataCustomList struct {
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DownloadUrl     *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	EndAcceptTime   *int64  `json:"EndAcceptTime,omitempty" xml:"EndAcceptTime,omitempty"`
	ExpireTime      *int64  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	Remark          *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	StartAcceptTime *int64  `json:"StartAcceptTime,omitempty" xml:"StartAcceptTime,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QueryOfficialFileCustomListResponseBodyDataCustomList) String() string {
	return tea.Prettify(s)
}

func (s QueryOfficialFileCustomListResponseBodyDataCustomList) GoString() string {
	return s.String()
}

func (s *QueryOfficialFileCustomListResponseBodyDataCustomList) SetCreateTime(v int64) *QueryOfficialFileCustomListResponseBodyDataCustomList {
	s.CreateTime = &v
	return s
}

func (s *QueryOfficialFileCustomListResponseBodyDataCustomList) SetDownloadUrl(v string) *QueryOfficialFileCustomListResponseBodyDataCustomList {
	s.DownloadUrl = &v
	return s
}

func (s *QueryOfficialFileCustomListResponseBodyDataCustomList) SetEndAcceptTime(v int64) *QueryOfficialFileCustomListResponseBodyDataCustomList {
	s.EndAcceptTime = &v
	return s
}

func (s *QueryOfficialFileCustomListResponseBodyDataCustomList) SetExpireTime(v int64) *QueryOfficialFileCustomListResponseBodyDataCustomList {
	s.ExpireTime = &v
	return s
}

func (s *QueryOfficialFileCustomListResponseBodyDataCustomList) SetRemark(v string) *QueryOfficialFileCustomListResponseBodyDataCustomList {
	s.Remark = &v
	return s
}

func (s *QueryOfficialFileCustomListResponseBodyDataCustomList) SetStartAcceptTime(v int64) *QueryOfficialFileCustomListResponseBodyDataCustomList {
	s.StartAcceptTime = &v
	return s
}

func (s *QueryOfficialFileCustomListResponseBodyDataCustomList) SetStatus(v string) *QueryOfficialFileCustomListResponseBodyDataCustomList {
	s.Status = &v
	return s
}

type QueryOfficialFileCustomListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryOfficialFileCustomListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryOfficialFileCustomListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOfficialFileCustomListResponse) GoString() string {
	return s.String()
}

func (s *QueryOfficialFileCustomListResponse) SetHeaders(v map[string]*string) *QueryOfficialFileCustomListResponse {
	s.Headers = v
	return s
}

func (s *QueryOfficialFileCustomListResponse) SetStatusCode(v int32) *QueryOfficialFileCustomListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryOfficialFileCustomListResponse) SetBody(v *QueryOfficialFileCustomListResponseBody) *QueryOfficialFileCustomListResponse {
	s.Body = v
	return s
}

type QueryOrderLogisticsListRequest struct {
	FileType       *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	PageNum        *int64  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProduceOrderId *string `json:"ProduceOrderId,omitempty" xml:"ProduceOrderId,omitempty"`
	RegisterNumber *string `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
}

func (s QueryOrderLogisticsListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOrderLogisticsListRequest) GoString() string {
	return s.String()
}

func (s *QueryOrderLogisticsListRequest) SetFileType(v string) *QueryOrderLogisticsListRequest {
	s.FileType = &v
	return s
}

func (s *QueryOrderLogisticsListRequest) SetPageNum(v int64) *QueryOrderLogisticsListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryOrderLogisticsListRequest) SetPageSize(v int64) *QueryOrderLogisticsListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryOrderLogisticsListRequest) SetProduceOrderId(v string) *QueryOrderLogisticsListRequest {
	s.ProduceOrderId = &v
	return s
}

func (s *QueryOrderLogisticsListRequest) SetRegisterNumber(v string) *QueryOrderLogisticsListRequest {
	s.RegisterNumber = &v
	return s
}

type QueryOrderLogisticsListResponseBody struct {
	CurrentPageNum *int32                                     `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           []*QueryOrderLogisticsListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	PageSize       *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                                     `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                                     `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryOrderLogisticsListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOrderLogisticsListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOrderLogisticsListResponseBody) SetCurrentPageNum(v int32) *QueryOrderLogisticsListResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBody) SetData(v []*QueryOrderLogisticsListResponseBodyData) *QueryOrderLogisticsListResponseBody {
	s.Data = v
	return s
}

func (s *QueryOrderLogisticsListResponseBody) SetPageSize(v int32) *QueryOrderLogisticsListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBody) SetRequestId(v string) *QueryOrderLogisticsListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBody) SetTotalItemNum(v int32) *QueryOrderLogisticsListResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBody) SetTotalPageNum(v int32) *QueryOrderLogisticsListResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryOrderLogisticsListResponseBodyData struct {
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	FileIdentifier *string `json:"FileIdentifier,omitempty" xml:"FileIdentifier,omitempty"`
	FileType       *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	LogisticsNo    *string `json:"LogisticsNo,omitempty" xml:"LogisticsNo,omitempty"`
	ProduceOrderId *string `json:"ProduceOrderId,omitempty" xml:"ProduceOrderId,omitempty"`
	TmIcon         *string `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName         *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber       *string `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
}

func (s QueryOrderLogisticsListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryOrderLogisticsListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryOrderLogisticsListResponseBodyData) SetBizId(v string) *QueryOrderLogisticsListResponseBodyData {
	s.BizId = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBodyData) SetFileIdentifier(v string) *QueryOrderLogisticsListResponseBodyData {
	s.FileIdentifier = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBodyData) SetFileType(v string) *QueryOrderLogisticsListResponseBodyData {
	s.FileType = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBodyData) SetLogisticsNo(v string) *QueryOrderLogisticsListResponseBodyData {
	s.LogisticsNo = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBodyData) SetProduceOrderId(v string) *QueryOrderLogisticsListResponseBodyData {
	s.ProduceOrderId = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBodyData) SetTmIcon(v string) *QueryOrderLogisticsListResponseBodyData {
	s.TmIcon = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBodyData) SetTmName(v string) *QueryOrderLogisticsListResponseBodyData {
	s.TmName = &v
	return s
}

func (s *QueryOrderLogisticsListResponseBodyData) SetTmNumber(v string) *QueryOrderLogisticsListResponseBodyData {
	s.TmNumber = &v
	return s
}

type QueryOrderLogisticsListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryOrderLogisticsListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryOrderLogisticsListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOrderLogisticsListResponse) GoString() string {
	return s.String()
}

func (s *QueryOrderLogisticsListResponse) SetHeaders(v map[string]*string) *QueryOrderLogisticsListResponse {
	s.Headers = v
	return s
}

func (s *QueryOrderLogisticsListResponse) SetStatusCode(v int32) *QueryOrderLogisticsListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryOrderLogisticsListResponse) SetBody(v *QueryOrderLogisticsListResponseBody) *QueryOrderLogisticsListResponse {
	s.Body = v
	return s
}

type QueryOssResourcesRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s QueryOssResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOssResourcesRequest) GoString() string {
	return s.String()
}

func (s *QueryOssResourcesRequest) SetBizId(v string) *QueryOssResourcesRequest {
	s.BizId = &v
	return s
}

type QueryOssResourcesResponseBody struct {
	Data      *QueryOssResourcesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryOssResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOssResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOssResourcesResponseBody) SetData(v *QueryOssResourcesResponseBodyData) *QueryOssResourcesResponseBody {
	s.Data = v
	return s
}

func (s *QueryOssResourcesResponseBody) SetRequestId(v string) *QueryOssResourcesResponseBody {
	s.RequestId = &v
	return s
}

type QueryOssResourcesResponseBodyData struct {
	TaskList []*QueryOssResourcesResponseBodyDataTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Repeated"`
}

func (s QueryOssResourcesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryOssResourcesResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryOssResourcesResponseBodyData) SetTaskList(v []*QueryOssResourcesResponseBodyDataTaskList) *QueryOssResourcesResponseBodyData {
	s.TaskList = v
	return s
}

type QueryOssResourcesResponseBodyDataTaskList struct {
	BizId      *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CreateTime *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OssUrl     *string `json:"OssUrl,omitempty" xml:"OssUrl,omitempty"`
	UpdateTime *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s QueryOssResourcesResponseBodyDataTaskList) String() string {
	return tea.Prettify(s)
}

func (s QueryOssResourcesResponseBodyDataTaskList) GoString() string {
	return s.String()
}

func (s *QueryOssResourcesResponseBodyDataTaskList) SetBizId(v string) *QueryOssResourcesResponseBodyDataTaskList {
	s.BizId = &v
	return s
}

func (s *QueryOssResourcesResponseBodyDataTaskList) SetCreateTime(v int64) *QueryOssResourcesResponseBodyDataTaskList {
	s.CreateTime = &v
	return s
}

func (s *QueryOssResourcesResponseBodyDataTaskList) SetName(v string) *QueryOssResourcesResponseBodyDataTaskList {
	s.Name = &v
	return s
}

func (s *QueryOssResourcesResponseBodyDataTaskList) SetOssUrl(v string) *QueryOssResourcesResponseBodyDataTaskList {
	s.OssUrl = &v
	return s
}

func (s *QueryOssResourcesResponseBodyDataTaskList) SetUpdateTime(v int64) *QueryOssResourcesResponseBodyDataTaskList {
	s.UpdateTime = &v
	return s
}

type QueryOssResourcesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryOssResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryOssResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOssResourcesResponse) GoString() string {
	return s.String()
}

func (s *QueryOssResourcesResponse) SetHeaders(v map[string]*string) *QueryOssResourcesResponse {
	s.Headers = v
	return s
}

func (s *QueryOssResourcesResponse) SetStatusCode(v int32) *QueryOssResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryOssResourcesResponse) SetBody(v *QueryOssResourcesResponseBody) *QueryOssResourcesResponse {
	s.Body = v
	return s
}

type QueryProduceDetailRequest struct {
	ApplyNo *string `json:"ApplyNo,omitempty" xml:"ApplyNo,omitempty"`
	BizId   *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s QueryProduceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryProduceDetailRequest) SetApplyNo(v string) *QueryProduceDetailRequest {
	s.ApplyNo = &v
	return s
}

func (s *QueryProduceDetailRequest) SetBizId(v string) *QueryProduceDetailRequest {
	s.BizId = &v
	return s
}

func (s *QueryProduceDetailRequest) SetOrderId(v string) *QueryProduceDetailRequest {
	s.OrderId = &v
	return s
}

type QueryProduceDetailResponseBody struct {
	AcceptUrl      *string                                       `json:"AcceptUrl,omitempty" xml:"AcceptUrl,omitempty"`
	AgreementId    *string                                       `json:"AgreementId,omitempty" xml:"AgreementId,omitempty"`
	BizId          *string                                       `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CnInfoUrl      *string                                       `json:"CnInfoUrl,omitempty" xml:"CnInfoUrl,omitempty"`
	ExtendInfo     map[string]interface{}                        `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	Flags          *QueryProduceDetailResponseBodyFlags          `json:"Flags,omitempty" xml:"Flags,omitempty" type:"Struct"`
	GrayIconUrl    *string                                       `json:"GrayIconUrl,omitempty" xml:"GrayIconUrl,omitempty"`
	IssueDate      *string                                       `json:"IssueDate,omitempty" xml:"IssueDate,omitempty"`
	LeafCodes      *QueryProduceDetailResponseBodyLeafCodes      `json:"LeafCodes,omitempty" xml:"LeafCodes,omitempty" type:"Struct"`
	LoaUrl         *string                                       `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	MaterialDetail *QueryProduceDetailResponseBodyMaterialDetail `json:"MaterialDetail,omitempty" xml:"MaterialDetail,omitempty" type:"Struct"`
	Note           *string                                       `json:"Note,omitempty" xml:"Note,omitempty"`
	OrderId        *string                                       `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PrincipalName  *int32                                        `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RootCode       *QueryProduceDetailResponseBodyRootCode       `json:"RootCode,omitempty" xml:"RootCode,omitempty" type:"Struct"`
	Status         *int32                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitCount    *int32                                        `json:"SubmitCount,omitempty" xml:"SubmitCount,omitempty"`
	TmIcon         *string                                       `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName         *string                                       `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNameType     *int32                                        `json:"TmNameType,omitempty" xml:"TmNameType,omitempty"`
	TmNumber       *string                                       `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	TmOrderId      *string                                       `json:"TmOrderId,omitempty" xml:"TmOrderId,omitempty"`
	Type           *int32                                        `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryProduceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryProduceDetailResponseBody) SetAcceptUrl(v string) *QueryProduceDetailResponseBody {
	s.AcceptUrl = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetAgreementId(v string) *QueryProduceDetailResponseBody {
	s.AgreementId = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetBizId(v string) *QueryProduceDetailResponseBody {
	s.BizId = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetCnInfoUrl(v string) *QueryProduceDetailResponseBody {
	s.CnInfoUrl = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetExtendInfo(v map[string]interface{}) *QueryProduceDetailResponseBody {
	s.ExtendInfo = v
	return s
}

func (s *QueryProduceDetailResponseBody) SetFlags(v *QueryProduceDetailResponseBodyFlags) *QueryProduceDetailResponseBody {
	s.Flags = v
	return s
}

func (s *QueryProduceDetailResponseBody) SetGrayIconUrl(v string) *QueryProduceDetailResponseBody {
	s.GrayIconUrl = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetIssueDate(v string) *QueryProduceDetailResponseBody {
	s.IssueDate = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetLeafCodes(v *QueryProduceDetailResponseBodyLeafCodes) *QueryProduceDetailResponseBody {
	s.LeafCodes = v
	return s
}

func (s *QueryProduceDetailResponseBody) SetLoaUrl(v string) *QueryProduceDetailResponseBody {
	s.LoaUrl = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetMaterialDetail(v *QueryProduceDetailResponseBodyMaterialDetail) *QueryProduceDetailResponseBody {
	s.MaterialDetail = v
	return s
}

func (s *QueryProduceDetailResponseBody) SetNote(v string) *QueryProduceDetailResponseBody {
	s.Note = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetOrderId(v string) *QueryProduceDetailResponseBody {
	s.OrderId = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetPrincipalName(v int32) *QueryProduceDetailResponseBody {
	s.PrincipalName = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetRequestId(v string) *QueryProduceDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetRootCode(v *QueryProduceDetailResponseBodyRootCode) *QueryProduceDetailResponseBody {
	s.RootCode = v
	return s
}

func (s *QueryProduceDetailResponseBody) SetStatus(v int32) *QueryProduceDetailResponseBody {
	s.Status = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetSubmitCount(v int32) *QueryProduceDetailResponseBody {
	s.SubmitCount = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetTmIcon(v string) *QueryProduceDetailResponseBody {
	s.TmIcon = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetTmName(v string) *QueryProduceDetailResponseBody {
	s.TmName = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetTmNameType(v int32) *QueryProduceDetailResponseBody {
	s.TmNameType = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetTmNumber(v string) *QueryProduceDetailResponseBody {
	s.TmNumber = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetTmOrderId(v string) *QueryProduceDetailResponseBody {
	s.TmOrderId = &v
	return s
}

func (s *QueryProduceDetailResponseBody) SetType(v int32) *QueryProduceDetailResponseBody {
	s.Type = &v
	return s
}

type QueryProduceDetailResponseBodyFlags struct {
	Flags []*string `json:"Flags,omitempty" xml:"Flags,omitempty" type:"Repeated"`
}

func (s QueryProduceDetailResponseBodyFlags) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceDetailResponseBodyFlags) GoString() string {
	return s.String()
}

func (s *QueryProduceDetailResponseBodyFlags) SetFlags(v []*string) *QueryProduceDetailResponseBodyFlags {
	s.Flags = v
	return s
}

type QueryProduceDetailResponseBodyLeafCodes struct {
	LeafCodes []*QueryProduceDetailResponseBodyLeafCodesLeafCodes `json:"LeafCodes,omitempty" xml:"LeafCodes,omitempty" type:"Repeated"`
}

func (s QueryProduceDetailResponseBodyLeafCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceDetailResponseBodyLeafCodes) GoString() string {
	return s.String()
}

func (s *QueryProduceDetailResponseBodyLeafCodes) SetLeafCodes(v []*QueryProduceDetailResponseBodyLeafCodesLeafCodes) *QueryProduceDetailResponseBodyLeafCodes {
	s.LeafCodes = v
	return s
}

type QueryProduceDetailResponseBodyLeafCodesLeafCodes struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QueryProduceDetailResponseBodyLeafCodesLeafCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceDetailResponseBodyLeafCodesLeafCodes) GoString() string {
	return s.String()
}

func (s *QueryProduceDetailResponseBodyLeafCodesLeafCodes) SetCode(v string) *QueryProduceDetailResponseBodyLeafCodesLeafCodes {
	s.Code = &v
	return s
}

func (s *QueryProduceDetailResponseBodyLeafCodesLeafCodes) SetName(v string) *QueryProduceDetailResponseBodyLeafCodesLeafCodes {
	s.Name = &v
	return s
}

type QueryProduceDetailResponseBodyMaterialDetail struct {
	Address            *string `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceUrl *string `json:"BusinessLicenceUrl,omitempty" xml:"BusinessLicenceUrl,omitempty"`
	CardNumber         *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	City               *string `json:"City,omitempty" xml:"City,omitempty"`
	ContactAddress     *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactEmail       *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName        *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber      *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactZipcode     *string `json:"ContactZipcode,omitempty" xml:"ContactZipcode,omitempty"`
	Country            *string `json:"Country,omitempty" xml:"Country,omitempty"`
	EAddress           *string `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName              *string `json:"EName,omitempty" xml:"EName,omitempty"`
	ExpirationDate     *string `json:"ExpirationDate,omitempty" xml:"ExpirationDate,omitempty"`
	IdCardUrl          *string `json:"IdCardUrl,omitempty" xml:"IdCardUrl,omitempty"`
	LoaUrl             *string `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportUrl        *string `json:"PassportUrl,omitempty" xml:"PassportUrl,omitempty"`
	Province           *string `json:"Province,omitempty" xml:"Province,omitempty"`
	Region             *int32  `json:"Region,omitempty" xml:"Region,omitempty"`
	Status             *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Town               *string `json:"Town,omitempty" xml:"Town,omitempty"`
	Type               *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryProduceDetailResponseBodyMaterialDetail) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceDetailResponseBodyMaterialDetail) GoString() string {
	return s.String()
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetAddress(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.Address = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetBusinessLicenceUrl(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.BusinessLicenceUrl = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetCardNumber(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.CardNumber = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetCity(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.City = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetContactAddress(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.ContactAddress = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetContactEmail(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.ContactEmail = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetContactName(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.ContactName = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetContactNumber(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.ContactNumber = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetContactZipcode(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.ContactZipcode = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetCountry(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.Country = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetEAddress(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.EAddress = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetEName(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.EName = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetExpirationDate(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.ExpirationDate = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetIdCardUrl(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.IdCardUrl = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetLoaUrl(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.LoaUrl = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetName(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.Name = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetPassportUrl(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.PassportUrl = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetProvince(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.Province = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetRegion(v int32) *QueryProduceDetailResponseBodyMaterialDetail {
	s.Region = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetStatus(v int32) *QueryProduceDetailResponseBodyMaterialDetail {
	s.Status = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetTown(v string) *QueryProduceDetailResponseBodyMaterialDetail {
	s.Town = &v
	return s
}

func (s *QueryProduceDetailResponseBodyMaterialDetail) SetType(v int32) *QueryProduceDetailResponseBodyMaterialDetail {
	s.Type = &v
	return s
}

type QueryProduceDetailResponseBodyRootCode struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QueryProduceDetailResponseBodyRootCode) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceDetailResponseBodyRootCode) GoString() string {
	return s.String()
}

func (s *QueryProduceDetailResponseBodyRootCode) SetCode(v string) *QueryProduceDetailResponseBodyRootCode {
	s.Code = &v
	return s
}

func (s *QueryProduceDetailResponseBodyRootCode) SetName(v string) *QueryProduceDetailResponseBodyRootCode {
	s.Name = &v
	return s
}

type QueryProduceDetailResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryProduceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryProduceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryProduceDetailResponse) SetHeaders(v map[string]*string) *QueryProduceDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryProduceDetailResponse) SetStatusCode(v int32) *QueryProduceDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryProduceDetailResponse) SetBody(v *QueryProduceDetailResponseBody) *QueryProduceDetailResponse {
	s.Body = v
	return s
}

type QueryProduceListRequest struct {
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CreateTimeLeft  *int64  `json:"CreateTimeLeft,omitempty" xml:"CreateTimeLeft,omitempty"`
	CreateTimeRight *int64  `json:"CreateTimeRight,omitempty" xml:"CreateTimeRight,omitempty"`
	MaterialName    *string `json:"MaterialName,omitempty" xml:"MaterialName,omitempty"`
	OrderId         *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PageNum         *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status          *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	TmName          *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber        *string `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	Type            *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	UserId          *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryProduceListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceListRequest) GoString() string {
	return s.String()
}

func (s *QueryProduceListRequest) SetBizId(v string) *QueryProduceListRequest {
	s.BizId = &v
	return s
}

func (s *QueryProduceListRequest) SetCreateTimeLeft(v int64) *QueryProduceListRequest {
	s.CreateTimeLeft = &v
	return s
}

func (s *QueryProduceListRequest) SetCreateTimeRight(v int64) *QueryProduceListRequest {
	s.CreateTimeRight = &v
	return s
}

func (s *QueryProduceListRequest) SetMaterialName(v string) *QueryProduceListRequest {
	s.MaterialName = &v
	return s
}

func (s *QueryProduceListRequest) SetOrderId(v string) *QueryProduceListRequest {
	s.OrderId = &v
	return s
}

func (s *QueryProduceListRequest) SetPageNum(v int32) *QueryProduceListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryProduceListRequest) SetPageSize(v int32) *QueryProduceListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryProduceListRequest) SetStatus(v int32) *QueryProduceListRequest {
	s.Status = &v
	return s
}

func (s *QueryProduceListRequest) SetTmName(v string) *QueryProduceListRequest {
	s.TmName = &v
	return s
}

func (s *QueryProduceListRequest) SetTmNumber(v string) *QueryProduceListRequest {
	s.TmNumber = &v
	return s
}

func (s *QueryProduceListRequest) SetType(v int32) *QueryProduceListRequest {
	s.Type = &v
	return s
}

func (s *QueryProduceListRequest) SetUserId(v string) *QueryProduceListRequest {
	s.UserId = &v
	return s
}

type QueryProduceListResponseBody struct {
	CurrentPageNum *int32                            `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryProduceListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	NextPage       *bool                             `json:"NextPage,omitempty" xml:"NextPage,omitempty"`
	PageSize       *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrePage        *bool                             `json:"PrePage,omitempty" xml:"PrePage,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                            `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                            `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryProduceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryProduceListResponseBody) SetCurrentPageNum(v int32) *QueryProduceListResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryProduceListResponseBody) SetData(v *QueryProduceListResponseBodyData) *QueryProduceListResponseBody {
	s.Data = v
	return s
}

func (s *QueryProduceListResponseBody) SetNextPage(v bool) *QueryProduceListResponseBody {
	s.NextPage = &v
	return s
}

func (s *QueryProduceListResponseBody) SetPageSize(v int32) *QueryProduceListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryProduceListResponseBody) SetPrePage(v bool) *QueryProduceListResponseBody {
	s.PrePage = &v
	return s
}

func (s *QueryProduceListResponseBody) SetRequestId(v string) *QueryProduceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryProduceListResponseBody) SetTotalItemNum(v int32) *QueryProduceListResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryProduceListResponseBody) SetTotalPageNum(v int32) *QueryProduceListResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryProduceListResponseBodyData struct {
	TmProduces []*QueryProduceListResponseBodyDataTmProduces `json:"TmProduces,omitempty" xml:"TmProduces,omitempty" type:"Repeated"`
}

func (s QueryProduceListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryProduceListResponseBodyData) SetTmProduces(v []*QueryProduceListResponseBodyDataTmProduces) *QueryProduceListResponseBodyData {
	s.TmProduces = v
	return s
}

type QueryProduceListResponseBodyDataTmProduces struct {
	AgreementId    *string                                                   `json:"AgreementId,omitempty" xml:"AgreementId,omitempty"`
	BizId          *string                                                   `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Classification *QueryProduceListResponseBodyDataTmProducesClassification `json:"Classification,omitempty" xml:"Classification,omitempty" type:"Struct"`
	CreateTime     *int64                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	LoaUrl         *string                                                   `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	MaterialName   *string                                                   `json:"MaterialName,omitempty" xml:"MaterialName,omitempty"`
	Note           *string                                                   `json:"Note,omitempty" xml:"Note,omitempty"`
	OrderId        *string                                                   `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrderPrice     *float32                                                  `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	PrincipalName  *int32                                                    `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ReceiptUrl     *string                                                   `json:"ReceiptUrl,omitempty" xml:"ReceiptUrl,omitempty"`
	Status         *int32                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitCount    *int32                                                    `json:"SubmitCount,omitempty" xml:"SubmitCount,omitempty"`
	TmIcon         *string                                                   `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName         *string                                                   `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber       *string                                                   `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	Type           *int32                                                    `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateTime     *int64                                                    `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId         *string                                                   `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryProduceListResponseBodyDataTmProduces) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceListResponseBodyDataTmProduces) GoString() string {
	return s.String()
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetAgreementId(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.AgreementId = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetBizId(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.BizId = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetClassification(v *QueryProduceListResponseBodyDataTmProducesClassification) *QueryProduceListResponseBodyDataTmProduces {
	s.Classification = v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetCreateTime(v int64) *QueryProduceListResponseBodyDataTmProduces {
	s.CreateTime = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetLoaUrl(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.LoaUrl = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetMaterialName(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.MaterialName = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetNote(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.Note = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetOrderId(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.OrderId = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetOrderPrice(v float32) *QueryProduceListResponseBodyDataTmProduces {
	s.OrderPrice = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetPrincipalName(v int32) *QueryProduceListResponseBodyDataTmProduces {
	s.PrincipalName = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetReceiptUrl(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.ReceiptUrl = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetStatus(v int32) *QueryProduceListResponseBodyDataTmProduces {
	s.Status = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetSubmitCount(v int32) *QueryProduceListResponseBodyDataTmProduces {
	s.SubmitCount = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetTmIcon(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.TmIcon = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetTmName(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.TmName = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetTmNumber(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.TmNumber = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetType(v int32) *QueryProduceListResponseBodyDataTmProduces {
	s.Type = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetUpdateTime(v int64) *QueryProduceListResponseBodyDataTmProduces {
	s.UpdateTime = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProduces) SetUserId(v string) *QueryProduceListResponseBodyDataTmProduces {
	s.UserId = &v
	return s
}

type QueryProduceListResponseBodyDataTmProducesClassification struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryProduceListResponseBodyDataTmProducesClassification) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceListResponseBodyDataTmProducesClassification) GoString() string {
	return s.String()
}

func (s *QueryProduceListResponseBodyDataTmProducesClassification) SetClassificationCode(v string) *QueryProduceListResponseBodyDataTmProducesClassification {
	s.ClassificationCode = &v
	return s
}

func (s *QueryProduceListResponseBodyDataTmProducesClassification) SetClassificationName(v string) *QueryProduceListResponseBodyDataTmProducesClassification {
	s.ClassificationName = &v
	return s
}

type QueryProduceListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryProduceListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryProduceListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryProduceListResponse) GoString() string {
	return s.String()
}

func (s *QueryProduceListResponse) SetHeaders(v map[string]*string) *QueryProduceListResponse {
	s.Headers = v
	return s
}

func (s *QueryProduceListResponse) SetStatusCode(v int32) *QueryProduceListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryProduceListResponse) SetBody(v *QueryProduceListResponseBody) *QueryProduceListResponse {
	s.Body = v
	return s
}

type QueryQrCodeUploadStatusRequest struct {
	FieldKey *string `json:"FieldKey,omitempty" xml:"FieldKey,omitempty"`
	OssKey   *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
	Uuid     *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s QueryQrCodeUploadStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryQrCodeUploadStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryQrCodeUploadStatusRequest) SetFieldKey(v string) *QueryQrCodeUploadStatusRequest {
	s.FieldKey = &v
	return s
}

func (s *QueryQrCodeUploadStatusRequest) SetOssKey(v string) *QueryQrCodeUploadStatusRequest {
	s.OssKey = &v
	return s
}

func (s *QueryQrCodeUploadStatusRequest) SetUuid(v string) *QueryQrCodeUploadStatusRequest {
	s.Uuid = &v
	return s
}

type QueryQrCodeUploadStatusResponseBody struct {
	OssKey    *string `json:"OssKey,omitempty" xml:"OssKey,omitempty"`
	OssUrl    *string `json:"OssUrl,omitempty" xml:"OssUrl,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryQrCodeUploadStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryQrCodeUploadStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryQrCodeUploadStatusResponseBody) SetOssKey(v string) *QueryQrCodeUploadStatusResponseBody {
	s.OssKey = &v
	return s
}

func (s *QueryQrCodeUploadStatusResponseBody) SetOssUrl(v string) *QueryQrCodeUploadStatusResponseBody {
	s.OssUrl = &v
	return s
}

func (s *QueryQrCodeUploadStatusResponseBody) SetRequestId(v string) *QueryQrCodeUploadStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryQrCodeUploadStatusResponseBody) SetStatus(v int32) *QueryQrCodeUploadStatusResponseBody {
	s.Status = &v
	return s
}

func (s *QueryQrCodeUploadStatusResponseBody) SetSuccess(v bool) *QueryQrCodeUploadStatusResponseBody {
	s.Success = &v
	return s
}

type QueryQrCodeUploadStatusResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryQrCodeUploadStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryQrCodeUploadStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryQrCodeUploadStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryQrCodeUploadStatusResponse) SetHeaders(v map[string]*string) *QueryQrCodeUploadStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryQrCodeUploadStatusResponse) SetStatusCode(v int32) *QueryQrCodeUploadStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryQrCodeUploadStatusResponse) SetBody(v *QueryQrCodeUploadStatusResponseBody) *QueryQrCodeUploadStatusResponse {
	s.Body = v
	return s
}

type QuerySbjRuleRequest struct {
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	RuleId  *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s QuerySbjRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySbjRuleRequest) GoString() string {
	return s.String()
}

func (s *QuerySbjRuleRequest) SetBizType(v string) *QuerySbjRuleRequest {
	s.BizType = &v
	return s
}

func (s *QuerySbjRuleRequest) SetRuleId(v string) *QuerySbjRuleRequest {
	s.RuleId = &v
	return s
}

type QuerySbjRuleResponseBody struct {
	BizType     *string                              `json:"BizType,omitempty" xml:"BizType,omitempty"`
	RequestId   *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RuleId      *string                              `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	SbjRuleList *QuerySbjRuleResponseBodySbjRuleList `json:"SbjRuleList,omitempty" xml:"SbjRuleList,omitempty" type:"Struct"`
}

func (s QuerySbjRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySbjRuleResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySbjRuleResponseBody) SetBizType(v string) *QuerySbjRuleResponseBody {
	s.BizType = &v
	return s
}

func (s *QuerySbjRuleResponseBody) SetRequestId(v string) *QuerySbjRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySbjRuleResponseBody) SetRuleId(v string) *QuerySbjRuleResponseBody {
	s.RuleId = &v
	return s
}

func (s *QuerySbjRuleResponseBody) SetSbjRuleList(v *QuerySbjRuleResponseBodySbjRuleList) *QuerySbjRuleResponseBody {
	s.SbjRuleList = v
	return s
}

type QuerySbjRuleResponseBodySbjRuleList struct {
	SbjRuleItem []*QuerySbjRuleResponseBodySbjRuleListSbjRuleItem `json:"SbjRuleItem,omitempty" xml:"SbjRuleItem,omitempty" type:"Repeated"`
}

func (s QuerySbjRuleResponseBodySbjRuleList) String() string {
	return tea.Prettify(s)
}

func (s QuerySbjRuleResponseBodySbjRuleList) GoString() string {
	return s.String()
}

func (s *QuerySbjRuleResponseBodySbjRuleList) SetSbjRuleItem(v []*QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) *QuerySbjRuleResponseBodySbjRuleList {
	s.SbjRuleItem = v
	return s
}

type QuerySbjRuleResponseBodySbjRuleListSbjRuleItem struct {
	DefaultValue               *string                                                        `json:"DefaultValue,omitempty" xml:"DefaultValue,omitempty"`
	EspExtFieldName            *string                                                        `json:"EspExtFieldName,omitempty" xml:"EspExtFieldName,omitempty"`
	FieldName                  *string                                                        `json:"FieldName,omitempty" xml:"FieldName,omitempty"`
	FileType                   *string                                                        `json:"FileType,omitempty" xml:"FileType,omitempty"`
	FrontendOptions            *QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptions `json:"FrontendOptions,omitempty" xml:"FrontendOptions,omitempty" type:"Struct"`
	FrontendType               *string                                                        `json:"FrontendType,omitempty" xml:"FrontendType,omitempty"`
	RequiredExpression         *string                                                        `json:"RequiredExpression,omitempty" xml:"RequiredExpression,omitempty"`
	SbjFieldId                 *string                                                        `json:"SbjFieldId,omitempty" xml:"SbjFieldId,omitempty"`
	ShowExpression             *string                                                        `json:"ShowExpression,omitempty" xml:"ShowExpression,omitempty"`
	TrademarkServiceExpression *string                                                        `json:"TrademarkServiceExpression,omitempty" xml:"TrademarkServiceExpression,omitempty"`
	ValidateRegularExpression  *string                                                        `json:"ValidateRegularExpression,omitempty" xml:"ValidateRegularExpression,omitempty"`
}

func (s QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) String() string {
	return tea.Prettify(s)
}

func (s QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) GoString() string {
	return s.String()
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetDefaultValue(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.DefaultValue = &v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetEspExtFieldName(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.EspExtFieldName = &v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetFieldName(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.FieldName = &v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetFileType(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.FileType = &v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetFrontendOptions(v *QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptions) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.FrontendOptions = v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetFrontendType(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.FrontendType = &v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetRequiredExpression(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.RequiredExpression = &v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetSbjFieldId(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.SbjFieldId = &v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetShowExpression(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.ShowExpression = &v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetTrademarkServiceExpression(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.TrademarkServiceExpression = &v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem) SetValidateRegularExpression(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItem {
	s.ValidateRegularExpression = &v
	return s
}

type QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptions struct {
	FrontendOption []*QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptionsFrontendOption `json:"FrontendOption,omitempty" xml:"FrontendOption,omitempty" type:"Repeated"`
}

func (s QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptions) String() string {
	return tea.Prettify(s)
}

func (s QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptions) GoString() string {
	return s.String()
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptions) SetFrontendOption(v []*QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptionsFrontendOption) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptions {
	s.FrontendOption = v
	return s
}

type QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptionsFrontendOption struct {
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptionsFrontendOption) String() string {
	return tea.Prettify(s)
}

func (s QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptionsFrontendOption) GoString() string {
	return s.String()
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptionsFrontendOption) SetTitle(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptionsFrontendOption {
	s.Title = &v
	return s
}

func (s *QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptionsFrontendOption) SetValue(v string) *QuerySbjRuleResponseBodySbjRuleListSbjRuleItemFrontendOptionsFrontendOption {
	s.Value = &v
	return s
}

type QuerySbjRuleResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QuerySbjRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySbjRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySbjRuleResponse) GoString() string {
	return s.String()
}

func (s *QuerySbjRuleResponse) SetHeaders(v map[string]*string) *QuerySbjRuleResponse {
	s.Headers = v
	return s
}

func (s *QuerySbjRuleResponse) SetStatusCode(v int32) *QuerySbjRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySbjRuleResponse) SetBody(v *QuerySbjRuleResponseBody) *QuerySbjRuleResponse {
	s.Body = v
	return s
}

type QuerySupplementDetailRequest struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QuerySupplementDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySupplementDetailRequest) GoString() string {
	return s.String()
}

func (s *QuerySupplementDetailRequest) SetId(v int64) *QuerySupplementDetailRequest {
	s.Id = &v
	return s
}

type QuerySupplementDetailResponseBody struct {
	AcceptDeadTime        *int64                                             `json:"AcceptDeadTime,omitempty" xml:"AcceptDeadTime,omitempty"`
	AcceptTime            *int64                                             `json:"AcceptTime,omitempty" xml:"AcceptTime,omitempty"`
	Content               *string                                            `json:"Content,omitempty" xml:"Content,omitempty"`
	FileName              *string                                            `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileTemplateUrls      *QuerySupplementDetailResponseBodyFileTemplateUrls `json:"FileTemplateUrls,omitempty" xml:"FileTemplateUrls,omitempty" type:"Struct"`
	Id                    *int64                                             `json:"Id,omitempty" xml:"Id,omitempty"`
	OperateTime           *int64                                             `json:"OperateTime,omitempty" xml:"OperateTime,omitempty"`
	Reason                *string                                            `json:"Reason,omitempty" xml:"Reason,omitempty"`
	RequestId             *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SbjDeadTime           *int64                                             `json:"SbjDeadTime,omitempty" xml:"SbjDeadTime,omitempty"`
	SendTime              *int64                                             `json:"SendTime,omitempty" xml:"SendTime,omitempty"`
	SerialNumber          *string                                            `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Status                *int32                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	TmNumber              *string                                            `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	Type                  *int32                                             `json:"Type,omitempty" xml:"Type,omitempty"`
	UploadFileTemplateUrl *string                                            `json:"UploadFileTemplateUrl,omitempty" xml:"UploadFileTemplateUrl,omitempty"`
}

func (s QuerySupplementDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySupplementDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySupplementDetailResponseBody) SetAcceptDeadTime(v int64) *QuerySupplementDetailResponseBody {
	s.AcceptDeadTime = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetAcceptTime(v int64) *QuerySupplementDetailResponseBody {
	s.AcceptTime = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetContent(v string) *QuerySupplementDetailResponseBody {
	s.Content = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetFileName(v string) *QuerySupplementDetailResponseBody {
	s.FileName = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetFileTemplateUrls(v *QuerySupplementDetailResponseBodyFileTemplateUrls) *QuerySupplementDetailResponseBody {
	s.FileTemplateUrls = v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetId(v int64) *QuerySupplementDetailResponseBody {
	s.Id = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetOperateTime(v int64) *QuerySupplementDetailResponseBody {
	s.OperateTime = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetReason(v string) *QuerySupplementDetailResponseBody {
	s.Reason = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetRequestId(v string) *QuerySupplementDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetSbjDeadTime(v int64) *QuerySupplementDetailResponseBody {
	s.SbjDeadTime = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetSendTime(v int64) *QuerySupplementDetailResponseBody {
	s.SendTime = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetSerialNumber(v string) *QuerySupplementDetailResponseBody {
	s.SerialNumber = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetStatus(v int32) *QuerySupplementDetailResponseBody {
	s.Status = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetTmNumber(v string) *QuerySupplementDetailResponseBody {
	s.TmNumber = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetType(v int32) *QuerySupplementDetailResponseBody {
	s.Type = &v
	return s
}

func (s *QuerySupplementDetailResponseBody) SetUploadFileTemplateUrl(v string) *QuerySupplementDetailResponseBody {
	s.UploadFileTemplateUrl = &v
	return s
}

type QuerySupplementDetailResponseBodyFileTemplateUrls struct {
	FileTemplateUrls []*string `json:"FileTemplateUrls,omitempty" xml:"FileTemplateUrls,omitempty" type:"Repeated"`
}

func (s QuerySupplementDetailResponseBodyFileTemplateUrls) String() string {
	return tea.Prettify(s)
}

func (s QuerySupplementDetailResponseBodyFileTemplateUrls) GoString() string {
	return s.String()
}

func (s *QuerySupplementDetailResponseBodyFileTemplateUrls) SetFileTemplateUrls(v []*string) *QuerySupplementDetailResponseBodyFileTemplateUrls {
	s.FileTemplateUrls = v
	return s
}

type QuerySupplementDetailResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QuerySupplementDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySupplementDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySupplementDetailResponse) GoString() string {
	return s.String()
}

func (s *QuerySupplementDetailResponse) SetHeaders(v map[string]*string) *QuerySupplementDetailResponse {
	s.Headers = v
	return s
}

func (s *QuerySupplementDetailResponse) SetStatusCode(v int32) *QuerySupplementDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySupplementDetailResponse) SetBody(v *QuerySupplementDetailResponseBody) *QuerySupplementDetailResponse {
	s.Body = v
	return s
}

type QueryTaskListRequest struct {
	BizType  *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryTaskListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskListRequest) GoString() string {
	return s.String()
}

func (s *QueryTaskListRequest) SetBizType(v string) *QueryTaskListRequest {
	s.BizType = &v
	return s
}

func (s *QueryTaskListRequest) SetPageNum(v int32) *QueryTaskListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTaskListRequest) SetPageSize(v int32) *QueryTaskListRequest {
	s.PageSize = &v
	return s
}

type QueryTaskListResponseBody struct {
	CurrentPageNum *int32                         `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryTaskListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                         `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                         `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryTaskListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTaskListResponseBody) SetCurrentPageNum(v int32) *QueryTaskListResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryTaskListResponseBody) SetData(v *QueryTaskListResponseBodyData) *QueryTaskListResponseBody {
	s.Data = v
	return s
}

func (s *QueryTaskListResponseBody) SetPageSize(v int32) *QueryTaskListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTaskListResponseBody) SetRequestId(v string) *QueryTaskListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTaskListResponseBody) SetTotalItemNum(v int32) *QueryTaskListResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryTaskListResponseBody) SetTotalPageNum(v int32) *QueryTaskListResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryTaskListResponseBodyData struct {
	TaskList []*QueryTaskListResponseBodyDataTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Repeated"`
}

func (s QueryTaskListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTaskListResponseBodyData) SetTaskList(v []*QueryTaskListResponseBodyDataTaskList) *QueryTaskListResponseBodyData {
	s.TaskList = v
	return s
}

type QueryTaskListResponseBodyDataTaskList struct {
	CompleteTime *int64  `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrMsg       *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	FileName     *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Result       *string `json:"Result,omitempty" xml:"Result,omitempty"`
	TaskStatus   *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TaskType     *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s QueryTaskListResponseBodyDataTaskList) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskListResponseBodyDataTaskList) GoString() string {
	return s.String()
}

func (s *QueryTaskListResponseBodyDataTaskList) SetCompleteTime(v int64) *QueryTaskListResponseBodyDataTaskList {
	s.CompleteTime = &v
	return s
}

func (s *QueryTaskListResponseBodyDataTaskList) SetCreateTime(v int64) *QueryTaskListResponseBodyDataTaskList {
	s.CreateTime = &v
	return s
}

func (s *QueryTaskListResponseBodyDataTaskList) SetErrMsg(v string) *QueryTaskListResponseBodyDataTaskList {
	s.ErrMsg = &v
	return s
}

func (s *QueryTaskListResponseBodyDataTaskList) SetFileName(v string) *QueryTaskListResponseBodyDataTaskList {
	s.FileName = &v
	return s
}

func (s *QueryTaskListResponseBodyDataTaskList) SetResult(v string) *QueryTaskListResponseBodyDataTaskList {
	s.Result = &v
	return s
}

func (s *QueryTaskListResponseBodyDataTaskList) SetTaskStatus(v string) *QueryTaskListResponseBodyDataTaskList {
	s.TaskStatus = &v
	return s
}

func (s *QueryTaskListResponseBodyDataTaskList) SetTaskType(v string) *QueryTaskListResponseBodyDataTaskList {
	s.TaskType = &v
	return s
}

type QueryTaskListResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTaskListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTaskListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTaskListResponse) GoString() string {
	return s.String()
}

func (s *QueryTaskListResponse) SetHeaders(v map[string]*string) *QueryTaskListResponse {
	s.Headers = v
	return s
}

func (s *QueryTaskListResponse) SetStatusCode(v int32) *QueryTaskListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTaskListResponse) SetBody(v *QueryTaskListResponseBody) *QueryTaskListResponse {
	s.Body = v
	return s
}

type QueryTmCollectionPageListRequest struct {
	PageNum  *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s QueryTmCollectionPageListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTmCollectionPageListRequest) GoString() string {
	return s.String()
}

func (s *QueryTmCollectionPageListRequest) SetPageNum(v int32) *QueryTmCollectionPageListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTmCollectionPageListRequest) SetPageSize(v int32) *QueryTmCollectionPageListRequest {
	s.PageSize = &v
	return s
}

type QueryTmCollectionPageListResponseBody struct {
	CurrentPageNum *int32                                     `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryTmCollectionPageListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                                     `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                                     `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryTmCollectionPageListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTmCollectionPageListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTmCollectionPageListResponseBody) SetCurrentPageNum(v int32) *QueryTmCollectionPageListResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryTmCollectionPageListResponseBody) SetData(v *QueryTmCollectionPageListResponseBodyData) *QueryTmCollectionPageListResponseBody {
	s.Data = v
	return s
}

func (s *QueryTmCollectionPageListResponseBody) SetPageSize(v int32) *QueryTmCollectionPageListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTmCollectionPageListResponseBody) SetRequestId(v string) *QueryTmCollectionPageListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTmCollectionPageListResponseBody) SetTotalItemNum(v int32) *QueryTmCollectionPageListResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryTmCollectionPageListResponseBody) SetTotalPageNum(v int32) *QueryTmCollectionPageListResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryTmCollectionPageListResponseBodyData struct {
	Trademark []*QueryTmCollectionPageListResponseBodyDataTrademark `json:"Trademark,omitempty" xml:"Trademark,omitempty" type:"Repeated"`
}

func (s QueryTmCollectionPageListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTmCollectionPageListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTmCollectionPageListResponseBodyData) SetTrademark(v []*QueryTmCollectionPageListResponseBodyDataTrademark) *QueryTmCollectionPageListResponseBodyData {
	s.Trademark = v
	return s
}

type QueryTmCollectionPageListResponseBodyDataTrademark struct {
	Classification    *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	Collected         *bool   `json:"Collected,omitempty" xml:"Collected,omitempty"`
	CollectionContent *string `json:"CollectionContent,omitempty" xml:"CollectionContent,omitempty"`
	Id                *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	ItemId            *string `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	TmName            *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
}

func (s QueryTmCollectionPageListResponseBodyDataTrademark) String() string {
	return tea.Prettify(s)
}

func (s QueryTmCollectionPageListResponseBodyDataTrademark) GoString() string {
	return s.String()
}

func (s *QueryTmCollectionPageListResponseBodyDataTrademark) SetClassification(v string) *QueryTmCollectionPageListResponseBodyDataTrademark {
	s.Classification = &v
	return s
}

func (s *QueryTmCollectionPageListResponseBodyDataTrademark) SetCollected(v bool) *QueryTmCollectionPageListResponseBodyDataTrademark {
	s.Collected = &v
	return s
}

func (s *QueryTmCollectionPageListResponseBodyDataTrademark) SetCollectionContent(v string) *QueryTmCollectionPageListResponseBodyDataTrademark {
	s.CollectionContent = &v
	return s
}

func (s *QueryTmCollectionPageListResponseBodyDataTrademark) SetId(v int64) *QueryTmCollectionPageListResponseBodyDataTrademark {
	s.Id = &v
	return s
}

func (s *QueryTmCollectionPageListResponseBodyDataTrademark) SetItemId(v string) *QueryTmCollectionPageListResponseBodyDataTrademark {
	s.ItemId = &v
	return s
}

func (s *QueryTmCollectionPageListResponseBodyDataTrademark) SetTmName(v string) *QueryTmCollectionPageListResponseBodyDataTrademark {
	s.TmName = &v
	return s
}

type QueryTmCollectionPageListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTmCollectionPageListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTmCollectionPageListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTmCollectionPageListResponse) GoString() string {
	return s.String()
}

func (s *QueryTmCollectionPageListResponse) SetHeaders(v map[string]*string) *QueryTmCollectionPageListResponse {
	s.Headers = v
	return s
}

func (s *QueryTmCollectionPageListResponse) SetStatusCode(v int32) *QueryTmCollectionPageListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTmCollectionPageListResponse) SetBody(v *QueryTmCollectionPageListResponseBody) *QueryTmCollectionPageListResponse {
	s.Body = v
	return s
}

type QueryTmSbjProduceRequest struct {
	HighPriorityBizTypeStr      *string `json:"HighPriorityBizTypeStr,omitempty" xml:"HighPriorityBizTypeStr,omitempty"`
	HighPriorityMaterialNameStr *string `json:"HighPriorityMaterialNameStr,omitempty" xml:"HighPriorityMaterialNameStr,omitempty"`
	HighPriorityOrderIdStr      *string `json:"HighPriorityOrderIdStr,omitempty" xml:"HighPriorityOrderIdStr,omitempty"`
	HighPriorityUserIdStr       *string `json:"HighPriorityUserIdStr,omitempty" xml:"HighPriorityUserIdStr,omitempty"`
	PrincipalKey                *string `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName               *string `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ProducerType                *string `json:"ProducerType,omitempty" xml:"ProducerType,omitempty"`
	QueryOrderPageSize          *int64  `json:"QueryOrderPageSize,omitempty" xml:"QueryOrderPageSize,omitempty"`
}

func (s QueryTmSbjProduceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceRequest) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceRequest) SetHighPriorityBizTypeStr(v string) *QueryTmSbjProduceRequest {
	s.HighPriorityBizTypeStr = &v
	return s
}

func (s *QueryTmSbjProduceRequest) SetHighPriorityMaterialNameStr(v string) *QueryTmSbjProduceRequest {
	s.HighPriorityMaterialNameStr = &v
	return s
}

func (s *QueryTmSbjProduceRequest) SetHighPriorityOrderIdStr(v string) *QueryTmSbjProduceRequest {
	s.HighPriorityOrderIdStr = &v
	return s
}

func (s *QueryTmSbjProduceRequest) SetHighPriorityUserIdStr(v string) *QueryTmSbjProduceRequest {
	s.HighPriorityUserIdStr = &v
	return s
}

func (s *QueryTmSbjProduceRequest) SetPrincipalKey(v string) *QueryTmSbjProduceRequest {
	s.PrincipalKey = &v
	return s
}

func (s *QueryTmSbjProduceRequest) SetPrincipalName(v string) *QueryTmSbjProduceRequest {
	s.PrincipalName = &v
	return s
}

func (s *QueryTmSbjProduceRequest) SetProducerType(v string) *QueryTmSbjProduceRequest {
	s.ProducerType = &v
	return s
}

func (s *QueryTmSbjProduceRequest) SetQueryOrderPageSize(v int64) *QueryTmSbjProduceRequest {
	s.QueryOrderPageSize = &v
	return s
}

type QueryTmSbjProduceResponseBody struct {
	Moudle    *QueryTmSbjProduceResponseBodyMoudle `json:"Moudle,omitempty" xml:"Moudle,omitempty" type:"Struct"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryTmSbjProduceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceResponseBody) SetMoudle(v *QueryTmSbjProduceResponseBodyMoudle) *QueryTmSbjProduceResponseBody {
	s.Moudle = v
	return s
}

func (s *QueryTmSbjProduceResponseBody) SetRequestId(v string) *QueryTmSbjProduceResponseBody {
	s.RequestId = &v
	return s
}

type QueryTmSbjProduceResponseBodyMoudle struct {
	TmSbjProduceList []*QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList `json:"TmSbjProduceList,omitempty" xml:"TmSbjProduceList,omitempty" type:"Repeated"`
}

func (s QueryTmSbjProduceResponseBodyMoudle) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceResponseBodyMoudle) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceResponseBodyMoudle) SetTmSbjProduceList(v []*QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) *QueryTmSbjProduceResponseBodyMoudle {
	s.TmSbjProduceList = v
	return s
}

type QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList struct {
	BitFlag            *int64                                                     `json:"BitFlag,omitempty" xml:"BitFlag,omitempty"`
	BizId              *string                                                    `json:"BizId,omitempty" xml:"BizId,omitempty"`
	ClassificationCode *string                                                    `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	DeleteFlag         *string                                                    `json:"DeleteFlag,omitempty" xml:"DeleteFlag,omitempty"`
	Env                *string                                                    `json:"Env,omitempty" xml:"Env,omitempty"`
	Extend             *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend `json:"Extend,omitempty" xml:"Extend,omitempty" type:"Struct"`
	LoaId              *int64                                                     `json:"LoaId,omitempty" xml:"LoaId,omitempty"`
	MainOrderId        *string                                                    `json:"MainOrderId,omitempty" xml:"MainOrderId,omitempty"`
	MaterialId         *int64                                                     `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	MaterialName       *string                                                    `json:"MaterialName,omitempty" xml:"MaterialName,omitempty"`
	OrderId            *string                                                    `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrderPrice         *float32                                                   `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	PrincipalKey       *string                                                    `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName      *string                                                    `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ProductType        *string                                                    `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RiskSource         *string                                                    `json:"RiskSource,omitempty" xml:"RiskSource,omitempty"`
	Status             *string                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitAuditTime    *int64                                                     `json:"SubmitAuditTime,omitempty" xml:"SubmitAuditTime,omitempty"`
	SubmitStatus       *string                                                    `json:"SubmitStatus,omitempty" xml:"SubmitStatus,omitempty"`
	SubmitTime         *int64                                                     `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	SubmitTimes        *int64                                                     `json:"SubmitTimes,omitempty" xml:"SubmitTimes,omitempty"`
	TmCode             *string                                                    `json:"TmCode,omitempty" xml:"TmCode,omitempty"`
	TmIcon             *string                                                    `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName             *string                                                    `json:"TmName,omitempty" xml:"TmName,omitempty"`
	Type               *string                                                    `json:"Type,omitempty" xml:"Type,omitempty"`
	UserId             *string                                                    `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetBitFlag(v int64) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.BitFlag = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetBizId(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.BizId = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetClassificationCode(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetDeleteFlag(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.DeleteFlag = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetEnv(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.Env = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetExtend(v *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.Extend = v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetLoaId(v int64) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.LoaId = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetMainOrderId(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.MainOrderId = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetMaterialId(v int64) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.MaterialId = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetMaterialName(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.MaterialName = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetOrderId(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.OrderId = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetOrderPrice(v float32) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.OrderPrice = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetPrincipalKey(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.PrincipalKey = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetPrincipalName(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.PrincipalName = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetProductType(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.ProductType = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetRiskSource(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.RiskSource = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetStatus(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.Status = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetSubmitAuditTime(v int64) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.SubmitAuditTime = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetSubmitStatus(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.SubmitStatus = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetSubmitTime(v int64) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.SubmitTime = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetSubmitTimes(v int64) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.SubmitTimes = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetTmCode(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.TmCode = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetTmIcon(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.TmIcon = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetTmName(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.TmName = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetType(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.Type = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList) SetUserId(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceList {
	s.UserId = &v
	return s
}

type QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend struct {
	Bid         *int64  `json:"Bid,omitempty" xml:"Bid,omitempty"`
	BlackIcon   *bool   `json:"BlackIcon,omitempty" xml:"BlackIcon,omitempty"`
	LoaOssKey   *string `json:"LoaOssKey,omitempty" xml:"LoaOssKey,omitempty"`
	LogoGoodsId *string `json:"LogoGoodsId,omitempty" xml:"LogoGoodsId,omitempty"`
	MaterialId  *string `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	SubmitCount *int64  `json:"SubmitCount,omitempty" xml:"SubmitCount,omitempty"`
	TmNametype  *int64  `json:"TmNametype,omitempty" xml:"TmNametype,omitempty"`
}

func (s QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend) SetBid(v int64) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend {
	s.Bid = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend) SetBlackIcon(v bool) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend {
	s.BlackIcon = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend) SetLoaOssKey(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend {
	s.LoaOssKey = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend) SetLogoGoodsId(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend {
	s.LogoGoodsId = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend) SetMaterialId(v string) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend {
	s.MaterialId = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend) SetSubmitCount(v int64) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend {
	s.SubmitCount = &v
	return s
}

func (s *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend) SetTmNametype(v int64) *QueryTmSbjProduceResponseBodyMoudleTmSbjProduceListExtend {
	s.TmNametype = &v
	return s
}

type QueryTmSbjProduceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTmSbjProduceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTmSbjProduceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceResponse) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceResponse) SetHeaders(v map[string]*string) *QueryTmSbjProduceResponse {
	s.Headers = v
	return s
}

func (s *QueryTmSbjProduceResponse) SetStatusCode(v int32) *QueryTmSbjProduceResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTmSbjProduceResponse) SetBody(v *QueryTmSbjProduceResponseBody) *QueryTmSbjProduceResponse {
	s.Body = v
	return s
}

type QueryTmSbjProduceDetailRequest struct {
	BizId   *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s QueryTmSbjProduceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceDetailRequest) SetBizId(v string) *QueryTmSbjProduceDetailRequest {
	s.BizId = &v
	return s
}

func (s *QueryTmSbjProduceDetailRequest) SetOrderId(v string) *QueryTmSbjProduceDetailRequest {
	s.OrderId = &v
	return s
}

type QueryTmSbjProduceDetailResponseBody struct {
	AcceptUrl      *string                                            `json:"AcceptUrl,omitempty" xml:"AcceptUrl,omitempty"`
	BizId          *string                                            `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CnInfoUrl      *string                                            `json:"CnInfoUrl,omitempty" xml:"CnInfoUrl,omitempty"`
	ExtendInfo     map[string]interface{}                             `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	Flags          *QueryTmSbjProduceDetailResponseBodyFlags          `json:"Flags,omitempty" xml:"Flags,omitempty" type:"Struct"`
	GrayIconUrl    *string                                            `json:"GrayIconUrl,omitempty" xml:"GrayIconUrl,omitempty"`
	IssueDate      *string                                            `json:"IssueDate,omitempty" xml:"IssueDate,omitempty"`
	LeafCodes      *QueryTmSbjProduceDetailResponseBodyLeafCodes      `json:"LeafCodes,omitempty" xml:"LeafCodes,omitempty" type:"Struct"`
	LoaUrl         *string                                            `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	MaterialDetail *QueryTmSbjProduceDetailResponseBodyMaterialDetail `json:"MaterialDetail,omitempty" xml:"MaterialDetail,omitempty" type:"Struct"`
	MaterialName   *string                                            `json:"MaterialName,omitempty" xml:"MaterialName,omitempty"`
	Note           *string                                            `json:"Note,omitempty" xml:"Note,omitempty"`
	OrderId        *string                                            `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PrincipalName  *int32                                             `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	RequestId      *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RootCode       *QueryTmSbjProduceDetailResponseBodyRootCode       `json:"RootCode,omitempty" xml:"RootCode,omitempty" type:"Struct"`
	Status         *int32                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitCount    *int32                                             `json:"SubmitCount,omitempty" xml:"SubmitCount,omitempty"`
	SubmitStatus   *string                                            `json:"SubmitStatus,omitempty" xml:"SubmitStatus,omitempty"`
	TmIcon         *string                                            `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName         *string                                            `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNameType     *int32                                             `json:"TmNameType,omitempty" xml:"TmNameType,omitempty"`
	TmNumber       *string                                            `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	TmOrderId      *string                                            `json:"TmOrderId,omitempty" xml:"TmOrderId,omitempty"`
	Type           *int32                                             `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTmSbjProduceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceDetailResponseBody) SetAcceptUrl(v string) *QueryTmSbjProduceDetailResponseBody {
	s.AcceptUrl = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetBizId(v string) *QueryTmSbjProduceDetailResponseBody {
	s.BizId = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetCnInfoUrl(v string) *QueryTmSbjProduceDetailResponseBody {
	s.CnInfoUrl = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetExtendInfo(v map[string]interface{}) *QueryTmSbjProduceDetailResponseBody {
	s.ExtendInfo = v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetFlags(v *QueryTmSbjProduceDetailResponseBodyFlags) *QueryTmSbjProduceDetailResponseBody {
	s.Flags = v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetGrayIconUrl(v string) *QueryTmSbjProduceDetailResponseBody {
	s.GrayIconUrl = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetIssueDate(v string) *QueryTmSbjProduceDetailResponseBody {
	s.IssueDate = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetLeafCodes(v *QueryTmSbjProduceDetailResponseBodyLeafCodes) *QueryTmSbjProduceDetailResponseBody {
	s.LeafCodes = v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetLoaUrl(v string) *QueryTmSbjProduceDetailResponseBody {
	s.LoaUrl = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetMaterialDetail(v *QueryTmSbjProduceDetailResponseBodyMaterialDetail) *QueryTmSbjProduceDetailResponseBody {
	s.MaterialDetail = v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetMaterialName(v string) *QueryTmSbjProduceDetailResponseBody {
	s.MaterialName = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetNote(v string) *QueryTmSbjProduceDetailResponseBody {
	s.Note = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetOrderId(v string) *QueryTmSbjProduceDetailResponseBody {
	s.OrderId = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetPrincipalName(v int32) *QueryTmSbjProduceDetailResponseBody {
	s.PrincipalName = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetRequestId(v string) *QueryTmSbjProduceDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetRootCode(v *QueryTmSbjProduceDetailResponseBodyRootCode) *QueryTmSbjProduceDetailResponseBody {
	s.RootCode = v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetStatus(v int32) *QueryTmSbjProduceDetailResponseBody {
	s.Status = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetSubmitCount(v int32) *QueryTmSbjProduceDetailResponseBody {
	s.SubmitCount = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetSubmitStatus(v string) *QueryTmSbjProduceDetailResponseBody {
	s.SubmitStatus = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetTmIcon(v string) *QueryTmSbjProduceDetailResponseBody {
	s.TmIcon = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetTmName(v string) *QueryTmSbjProduceDetailResponseBody {
	s.TmName = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetTmNameType(v int32) *QueryTmSbjProduceDetailResponseBody {
	s.TmNameType = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetTmNumber(v string) *QueryTmSbjProduceDetailResponseBody {
	s.TmNumber = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetTmOrderId(v string) *QueryTmSbjProduceDetailResponseBody {
	s.TmOrderId = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBody) SetType(v int32) *QueryTmSbjProduceDetailResponseBody {
	s.Type = &v
	return s
}

type QueryTmSbjProduceDetailResponseBodyFlags struct {
	Flags []*string `json:"Flags,omitempty" xml:"Flags,omitempty" type:"Repeated"`
}

func (s QueryTmSbjProduceDetailResponseBodyFlags) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceDetailResponseBodyFlags) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceDetailResponseBodyFlags) SetFlags(v []*string) *QueryTmSbjProduceDetailResponseBodyFlags {
	s.Flags = v
	return s
}

type QueryTmSbjProduceDetailResponseBodyLeafCodes struct {
	LeafCodes []*QueryTmSbjProduceDetailResponseBodyLeafCodesLeafCodes `json:"LeafCodes,omitempty" xml:"LeafCodes,omitempty" type:"Repeated"`
}

func (s QueryTmSbjProduceDetailResponseBodyLeafCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceDetailResponseBodyLeafCodes) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceDetailResponseBodyLeafCodes) SetLeafCodes(v []*QueryTmSbjProduceDetailResponseBodyLeafCodesLeafCodes) *QueryTmSbjProduceDetailResponseBodyLeafCodes {
	s.LeafCodes = v
	return s
}

type QueryTmSbjProduceDetailResponseBodyLeafCodesLeafCodes struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QueryTmSbjProduceDetailResponseBodyLeafCodesLeafCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceDetailResponseBodyLeafCodesLeafCodes) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceDetailResponseBodyLeafCodesLeafCodes) SetCode(v string) *QueryTmSbjProduceDetailResponseBodyLeafCodesLeafCodes {
	s.Code = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyLeafCodesLeafCodes) SetName(v string) *QueryTmSbjProduceDetailResponseBodyLeafCodesLeafCodes {
	s.Name = &v
	return s
}

type QueryTmSbjProduceDetailResponseBodyMaterialDetail struct {
	Address                *string `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceUrl     *string `json:"BusinessLicenceUrl,omitempty" xml:"BusinessLicenceUrl,omitempty"`
	CardNumber             *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	City                   *string `json:"City,omitempty" xml:"City,omitempty"`
	ContactAddress         *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactEmail           *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName            *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber          *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactProvince        *string `json:"ContactProvince,omitempty" xml:"ContactProvince,omitempty"`
	ContactZipcode         *string `json:"ContactZipcode,omitempty" xml:"ContactZipcode,omitempty"`
	Country                *string `json:"Country,omitempty" xml:"Country,omitempty"`
	DetailedContactAddress *string `json:"DetailedContactAddress,omitempty" xml:"DetailedContactAddress,omitempty"`
	EAddress               *string `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName                  *string `json:"EName,omitempty" xml:"EName,omitempty"`
	ExpirationDate         *string `json:"ExpirationDate,omitempty" xml:"ExpirationDate,omitempty"`
	IdCardNumber           *string `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardUrl              *string `json:"IdCardUrl,omitempty" xml:"IdCardUrl,omitempty"`
	LoaUrl                 *string `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	Name                   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportUrl            *string `json:"PassportUrl,omitempty" xml:"PassportUrl,omitempty"`
	PersonalType           *int32  `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	Province               *string `json:"Province,omitempty" xml:"Province,omitempty"`
	Region                 *int32  `json:"Region,omitempty" xml:"Region,omitempty"`
	Status                 *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Town                   *string `json:"Town,omitempty" xml:"Town,omitempty"`
	Type                   *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTmSbjProduceDetailResponseBodyMaterialDetail) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceDetailResponseBodyMaterialDetail) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetAddress(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.Address = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetBusinessLicenceUrl(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.BusinessLicenceUrl = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetCardNumber(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.CardNumber = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetCity(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.City = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetContactAddress(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.ContactAddress = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetContactEmail(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.ContactEmail = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetContactName(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.ContactName = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetContactNumber(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.ContactNumber = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetContactProvince(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.ContactProvince = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetContactZipcode(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.ContactZipcode = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetCountry(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.Country = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetDetailedContactAddress(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.DetailedContactAddress = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetEAddress(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.EAddress = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetEName(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.EName = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetExpirationDate(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.ExpirationDate = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetIdCardNumber(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.IdCardNumber = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetIdCardUrl(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.IdCardUrl = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetLoaUrl(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.LoaUrl = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetName(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.Name = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetPassportUrl(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.PassportUrl = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetPersonalType(v int32) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.PersonalType = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetProvince(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.Province = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetRegion(v int32) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.Region = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetStatus(v int32) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.Status = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetTown(v string) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.Town = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyMaterialDetail) SetType(v int32) *QueryTmSbjProduceDetailResponseBodyMaterialDetail {
	s.Type = &v
	return s
}

type QueryTmSbjProduceDetailResponseBodyRootCode struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QueryTmSbjProduceDetailResponseBodyRootCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceDetailResponseBodyRootCode) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceDetailResponseBodyRootCode) SetCode(v string) *QueryTmSbjProduceDetailResponseBodyRootCode {
	s.Code = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponseBodyRootCode) SetName(v string) *QueryTmSbjProduceDetailResponseBodyRootCode {
	s.Name = &v
	return s
}

type QueryTmSbjProduceDetailResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTmSbjProduceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTmSbjProduceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTmSbjProduceDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryTmSbjProduceDetailResponse) SetHeaders(v map[string]*string) *QueryTmSbjProduceDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryTmSbjProduceDetailResponse) SetStatusCode(v int32) *QueryTmSbjProduceDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTmSbjProduceDetailResponse) SetBody(v *QueryTmSbjProduceDetailResponseBody) *QueryTmSbjProduceDetailResponse {
	s.Body = v
	return s
}

type QueryTradeIntentionUserListRequest struct {
	Begin    *int64  `json:"Begin,omitempty" xml:"Begin,omitempty"`
	BizId    *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	End      *int64  `json:"End,omitempty" xml:"End,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status   *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type     *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTradeIntentionUserListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeIntentionUserListRequest) GoString() string {
	return s.String()
}

func (s *QueryTradeIntentionUserListRequest) SetBegin(v int64) *QueryTradeIntentionUserListRequest {
	s.Begin = &v
	return s
}

func (s *QueryTradeIntentionUserListRequest) SetBizId(v string) *QueryTradeIntentionUserListRequest {
	s.BizId = &v
	return s
}

func (s *QueryTradeIntentionUserListRequest) SetEnd(v int64) *QueryTradeIntentionUserListRequest {
	s.End = &v
	return s
}

func (s *QueryTradeIntentionUserListRequest) SetPageNum(v int32) *QueryTradeIntentionUserListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTradeIntentionUserListRequest) SetPageSize(v int32) *QueryTradeIntentionUserListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTradeIntentionUserListRequest) SetStatus(v int32) *QueryTradeIntentionUserListRequest {
	s.Status = &v
	return s
}

func (s *QueryTradeIntentionUserListRequest) SetType(v int32) *QueryTradeIntentionUserListRequest {
	s.Type = &v
	return s
}

type QueryTradeIntentionUserListResponseBody struct {
	CurrentPageNum *int32                                       `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryTradeIntentionUserListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                                       `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                                       `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryTradeIntentionUserListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeIntentionUserListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTradeIntentionUserListResponseBody) SetCurrentPageNum(v int32) *QueryTradeIntentionUserListResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBody) SetData(v *QueryTradeIntentionUserListResponseBodyData) *QueryTradeIntentionUserListResponseBody {
	s.Data = v
	return s
}

func (s *QueryTradeIntentionUserListResponseBody) SetPageSize(v int32) *QueryTradeIntentionUserListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBody) SetRequestId(v string) *QueryTradeIntentionUserListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBody) SetTotalItemNum(v int32) *QueryTradeIntentionUserListResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBody) SetTotalPageNum(v int32) *QueryTradeIntentionUserListResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryTradeIntentionUserListResponseBodyData struct {
	Trademark []*QueryTradeIntentionUserListResponseBodyDataTrademark `json:"Trademark,omitempty" xml:"Trademark,omitempty" type:"Repeated"`
}

func (s QueryTradeIntentionUserListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeIntentionUserListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTradeIntentionUserListResponseBodyData) SetTrademark(v []*QueryTradeIntentionUserListResponseBodyDataTrademark) *QueryTradeIntentionUserListResponseBodyData {
	s.Trademark = v
	return s
}

type QueryTradeIntentionUserListResponseBodyDataTrademark struct {
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Classification *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DocumentDate   *string `json:"DocumentDate,omitempty" xml:"DocumentDate,omitempty"`
	DocumentName   *string `json:"DocumentName,omitempty" xml:"DocumentName,omitempty"`
	DocumentUrl    *string `json:"DocumentUrl,omitempty" xml:"DocumentUrl,omitempty"`
	Grade          *int32  `json:"Grade,omitempty" xml:"Grade,omitempty"`
	Mobile         *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	RegisterNumber *string `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	Status         *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type           *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	UserName       *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s QueryTradeIntentionUserListResponseBodyDataTrademark) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeIntentionUserListResponseBodyDataTrademark) GoString() string {
	return s.String()
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetBizId(v string) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.BizId = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetClassification(v string) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.Classification = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetDescription(v string) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.Description = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetDocumentDate(v string) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.DocumentDate = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetDocumentName(v string) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.DocumentName = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetDocumentUrl(v string) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.DocumentUrl = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetGrade(v int32) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.Grade = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetMobile(v string) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.Mobile = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetRegisterNumber(v string) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.RegisterNumber = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetStatus(v int32) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.Status = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetType(v int32) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.Type = &v
	return s
}

func (s *QueryTradeIntentionUserListResponseBodyDataTrademark) SetUserName(v string) *QueryTradeIntentionUserListResponseBodyDataTrademark {
	s.UserName = &v
	return s
}

type QueryTradeIntentionUserListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTradeIntentionUserListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTradeIntentionUserListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeIntentionUserListResponse) GoString() string {
	return s.String()
}

func (s *QueryTradeIntentionUserListResponse) SetHeaders(v map[string]*string) *QueryTradeIntentionUserListResponse {
	s.Headers = v
	return s
}

func (s *QueryTradeIntentionUserListResponse) SetStatusCode(v int32) *QueryTradeIntentionUserListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTradeIntentionUserListResponse) SetBody(v *QueryTradeIntentionUserListResponseBody) *QueryTradeIntentionUserListResponse {
	s.Body = v
	return s
}

type QueryTradeMarkApplicationDetailRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s QueryTradeMarkApplicationDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailRequest) SetBizId(v string) *QueryTradeMarkApplicationDetailRequest {
	s.BizId = &v
	return s
}

type QueryTradeMarkApplicationDetailResponseBody struct {
	AcceptUrl               *string                                                         `json:"AcceptUrl,omitempty" xml:"AcceptUrl,omitempty"`
	AdminUploads            *QueryTradeMarkApplicationDetailResponseBodyAdminUploads        `json:"AdminUploads,omitempty" xml:"AdminUploads,omitempty" type:"Struct"`
	BizId                   *string                                                         `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CreateTime              *int64                                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ExtendInfo              map[string]interface{}                                          `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	FirstClassification     *QueryTradeMarkApplicationDetailResponseBodyFirstClassification `json:"FirstClassification,omitempty" xml:"FirstClassification,omitempty" type:"Struct"`
	Flags                   *QueryTradeMarkApplicationDetailResponseBodyFlags               `json:"Flags,omitempty" xml:"Flags,omitempty" type:"Struct"`
	GrayIconUrl             *string                                                         `json:"GrayIconUrl,omitempty" xml:"GrayIconUrl,omitempty"`
	JudgeResultUrl          *QueryTradeMarkApplicationDetailResponseBodyJudgeResultUrl      `json:"JudgeResultUrl,omitempty" xml:"JudgeResultUrl,omitempty" type:"Struct"`
	LegalNoticeUrl          *string                                                         `json:"LegalNoticeUrl,omitempty" xml:"LegalNoticeUrl,omitempty"`
	LoaUrl                  *string                                                         `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	LogisticsCertificateUrl *string                                                         `json:"LogisticsCertificateUrl,omitempty" xml:"LogisticsCertificateUrl,omitempty"`
	LogisticsNo             *string                                                         `json:"LogisticsNo,omitempty" xml:"LogisticsNo,omitempty"`
	MaterialDetail          *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail      `json:"MaterialDetail,omitempty" xml:"MaterialDetail,omitempty" type:"Struct"`
	MaterialId              *int64                                                          `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	NotAcceptUrl            *string                                                         `json:"NotAcceptUrl,omitempty" xml:"NotAcceptUrl,omitempty"`
	Note                    *string                                                         `json:"Note,omitempty" xml:"Note,omitempty"`
	OrderId                 *string                                                         `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrderPrice              *float32                                                        `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	PartnerCode             *string                                                         `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	PartnerMobile           *string                                                         `json:"PartnerMobile,omitempty" xml:"PartnerMobile,omitempty"`
	PartnerName             *string                                                         `json:"PartnerName,omitempty" xml:"PartnerName,omitempty"`
	PrincipalName           *int32                                                          `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ReceiptUrl              *QueryTradeMarkApplicationDetailResponseBodyReceiptUrl          `json:"ReceiptUrl,omitempty" xml:"ReceiptUrl,omitempty" type:"Struct"`
	RecvUserLogistics       *string                                                         `json:"RecvUserLogistics,omitempty" xml:"RecvUserLogistics,omitempty"`
	RenewResponse           *QueryTradeMarkApplicationDetailResponseBodyRenewResponse       `json:"RenewResponse,omitempty" xml:"RenewResponse,omitempty" type:"Struct"`
	RequestId               *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ReviewOfficialFiles     *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles `json:"ReviewOfficialFiles,omitempty" xml:"ReviewOfficialFiles,omitempty" type:"Struct"`
	SendSbjLogistics        *string                                                         `json:"SendSbjLogistics,omitempty" xml:"SendSbjLogistics,omitempty"`
	SendTime                *string                                                         `json:"SendTime,omitempty" xml:"SendTime,omitempty"`
	SendUserLogistics       *string                                                         `json:"SendUserLogistics,omitempty" xml:"SendUserLogistics,omitempty"`
	ServicePrice            *float32                                                        `json:"ServicePrice,omitempty" xml:"ServicePrice,omitempty"`
	Specification           *int32                                                          `json:"Specification,omitempty" xml:"Specification,omitempty"`
	Status                  *int32                                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitAuditTime         *int64                                                          `json:"SubmitAuditTime,omitempty" xml:"SubmitAuditTime,omitempty"`
	SubmitTime              *int64                                                          `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	Supplements             *QueryTradeMarkApplicationDetailResponseBodySupplements         `json:"Supplements,omitempty" xml:"Supplements,omitempty" type:"Struct"`
	SystemVersion           *string                                                         `json:"SystemVersion,omitempty" xml:"SystemVersion,omitempty"`
	ThirdClassification     *QueryTradeMarkApplicationDetailResponseBodyThirdClassification `json:"ThirdClassification,omitempty" xml:"ThirdClassification,omitempty" type:"Struct"`
	TmIcon                  *string                                                         `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName                  *string                                                         `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNameType              *int32                                                          `json:"TmNameType,omitempty" xml:"TmNameType,omitempty"`
	TmNumber                *string                                                         `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	TotalPrice              *float32                                                        `json:"TotalPrice,omitempty" xml:"TotalPrice,omitempty"`
	Type                    *int32                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateTime              *int64                                                          `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s QueryTradeMarkApplicationDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetAcceptUrl(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.AcceptUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetAdminUploads(v *QueryTradeMarkApplicationDetailResponseBodyAdminUploads) *QueryTradeMarkApplicationDetailResponseBody {
	s.AdminUploads = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetBizId(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.BizId = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetCreateTime(v int64) *QueryTradeMarkApplicationDetailResponseBody {
	s.CreateTime = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetExtendInfo(v map[string]interface{}) *QueryTradeMarkApplicationDetailResponseBody {
	s.ExtendInfo = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetFirstClassification(v *QueryTradeMarkApplicationDetailResponseBodyFirstClassification) *QueryTradeMarkApplicationDetailResponseBody {
	s.FirstClassification = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetFlags(v *QueryTradeMarkApplicationDetailResponseBodyFlags) *QueryTradeMarkApplicationDetailResponseBody {
	s.Flags = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetGrayIconUrl(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.GrayIconUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetJudgeResultUrl(v *QueryTradeMarkApplicationDetailResponseBodyJudgeResultUrl) *QueryTradeMarkApplicationDetailResponseBody {
	s.JudgeResultUrl = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetLegalNoticeUrl(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.LegalNoticeUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetLoaUrl(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.LoaUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetLogisticsCertificateUrl(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.LogisticsCertificateUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetLogisticsNo(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.LogisticsNo = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetMaterialDetail(v *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) *QueryTradeMarkApplicationDetailResponseBody {
	s.MaterialDetail = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetMaterialId(v int64) *QueryTradeMarkApplicationDetailResponseBody {
	s.MaterialId = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetNotAcceptUrl(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.NotAcceptUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetNote(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.Note = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetOrderId(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.OrderId = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetOrderPrice(v float32) *QueryTradeMarkApplicationDetailResponseBody {
	s.OrderPrice = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetPartnerCode(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.PartnerCode = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetPartnerMobile(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.PartnerMobile = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetPartnerName(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.PartnerName = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetPrincipalName(v int32) *QueryTradeMarkApplicationDetailResponseBody {
	s.PrincipalName = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetReceiptUrl(v *QueryTradeMarkApplicationDetailResponseBodyReceiptUrl) *QueryTradeMarkApplicationDetailResponseBody {
	s.ReceiptUrl = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetRecvUserLogistics(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.RecvUserLogistics = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetRenewResponse(v *QueryTradeMarkApplicationDetailResponseBodyRenewResponse) *QueryTradeMarkApplicationDetailResponseBody {
	s.RenewResponse = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetRequestId(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetReviewOfficialFiles(v *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles) *QueryTradeMarkApplicationDetailResponseBody {
	s.ReviewOfficialFiles = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetSendSbjLogistics(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.SendSbjLogistics = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetSendTime(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.SendTime = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetSendUserLogistics(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.SendUserLogistics = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetServicePrice(v float32) *QueryTradeMarkApplicationDetailResponseBody {
	s.ServicePrice = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetSpecification(v int32) *QueryTradeMarkApplicationDetailResponseBody {
	s.Specification = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetStatus(v int32) *QueryTradeMarkApplicationDetailResponseBody {
	s.Status = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetSubmitAuditTime(v int64) *QueryTradeMarkApplicationDetailResponseBody {
	s.SubmitAuditTime = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetSubmitTime(v int64) *QueryTradeMarkApplicationDetailResponseBody {
	s.SubmitTime = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetSupplements(v *QueryTradeMarkApplicationDetailResponseBodySupplements) *QueryTradeMarkApplicationDetailResponseBody {
	s.Supplements = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetSystemVersion(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.SystemVersion = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetThirdClassification(v *QueryTradeMarkApplicationDetailResponseBodyThirdClassification) *QueryTradeMarkApplicationDetailResponseBody {
	s.ThirdClassification = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetTmIcon(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.TmIcon = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetTmName(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.TmName = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetTmNameType(v int32) *QueryTradeMarkApplicationDetailResponseBody {
	s.TmNameType = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetTmNumber(v string) *QueryTradeMarkApplicationDetailResponseBody {
	s.TmNumber = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetTotalPrice(v float32) *QueryTradeMarkApplicationDetailResponseBody {
	s.TotalPrice = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetType(v int32) *QueryTradeMarkApplicationDetailResponseBody {
	s.Type = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBody) SetUpdateTime(v int64) *QueryTradeMarkApplicationDetailResponseBody {
	s.UpdateTime = &v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyAdminUploads struct {
	LicensePicUrl *string `json:"LicensePicUrl,omitempty" xml:"LicensePicUrl,omitempty"`
	LoaPicUrl     *string `json:"LoaPicUrl,omitempty" xml:"LoaPicUrl,omitempty"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyAdminUploads) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyAdminUploads) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyAdminUploads) SetLicensePicUrl(v string) *QueryTradeMarkApplicationDetailResponseBodyAdminUploads {
	s.LicensePicUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyAdminUploads) SetLoaPicUrl(v string) *QueryTradeMarkApplicationDetailResponseBodyAdminUploads {
	s.LoaPicUrl = &v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyFirstClassification struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyFirstClassification) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyFirstClassification) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyFirstClassification) SetCode(v string) *QueryTradeMarkApplicationDetailResponseBodyFirstClassification {
	s.Code = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyFirstClassification) SetName(v string) *QueryTradeMarkApplicationDetailResponseBodyFirstClassification {
	s.Name = &v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyFlags struct {
	Flag []*int32 `json:"Flag,omitempty" xml:"Flag,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyFlags) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyFlags) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyFlags) SetFlag(v []*int32) *QueryTradeMarkApplicationDetailResponseBodyFlags {
	s.Flag = v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyJudgeResultUrl struct {
	JudgeResultUrl []*string `json:"JudgeResultUrl,omitempty" xml:"JudgeResultUrl,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyJudgeResultUrl) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyJudgeResultUrl) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyJudgeResultUrl) SetJudgeResultUrl(v []*string) *QueryTradeMarkApplicationDetailResponseBodyJudgeResultUrl {
	s.JudgeResultUrl = v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyMaterialDetail struct {
	Address                        *string                                                                         `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceUrl             *string                                                                         `json:"BusinessLicenceUrl,omitempty" xml:"BusinessLicenceUrl,omitempty"`
	CardNumber                     *string                                                                         `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	City                           *string                                                                         `json:"City,omitempty" xml:"City,omitempty"`
	ContactAddress                 *string                                                                         `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactCity                    *string                                                                         `json:"ContactCity,omitempty" xml:"ContactCity,omitempty"`
	ContactDistrict                *string                                                                         `json:"ContactDistrict,omitempty" xml:"ContactDistrict,omitempty"`
	ContactEmail                   *string                                                                         `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName                    *string                                                                         `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber                  *string                                                                         `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactProvince                *string                                                                         `json:"ContactProvince,omitempty" xml:"ContactProvince,omitempty"`
	ContactZipcode                 *string                                                                         `json:"ContactZipcode,omitempty" xml:"ContactZipcode,omitempty"`
	Country                        *string                                                                         `json:"Country,omitempty" xml:"Country,omitempty"`
	DetailedContactAddress         *string                                                                         `json:"DetailedContactAddress,omitempty" xml:"DetailedContactAddress,omitempty"`
	EAddress                       *string                                                                         `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName                          *string                                                                         `json:"EName,omitempty" xml:"EName,omitempty"`
	ExpirationDate                 *string                                                                         `json:"ExpirationDate,omitempty" xml:"ExpirationDate,omitempty"`
	FactAndReasonPdfPath           *string                                                                         `json:"FactAndReasonPdfPath,omitempty" xml:"FactAndReasonPdfPath,omitempty"`
	IdCardName                     *string                                                                         `json:"IdCardName,omitempty" xml:"IdCardName,omitempty"`
	IdCardNumber                   *string                                                                         `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardUrl                      *string                                                                         `json:"IdCardUrl,omitempty" xml:"IdCardUrl,omitempty"`
	LegalNoticeUrl                 *string                                                                         `json:"LegalNoticeUrl,omitempty" xml:"LegalNoticeUrl,omitempty"`
	LoaUrl                         *string                                                                         `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	MaterialVersion                *string                                                                         `json:"MaterialVersion,omitempty" xml:"MaterialVersion,omitempty"`
	Name                           *string                                                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportUrl                    *string                                                                         `json:"PassportUrl,omitempty" xml:"PassportUrl,omitempty"`
	PersonalType                   *int64                                                                          `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PrincipalName                  *int32                                                                          `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	Province                       *string                                                                         `json:"Province,omitempty" xml:"Province,omitempty"`
	Region                         *int32                                                                          `json:"Region,omitempty" xml:"Region,omitempty"`
	ReviewAdditionalFiles          *QueryTradeMarkApplicationDetailResponseBodyMaterialDetailReviewAdditionalFiles `json:"ReviewAdditionalFiles,omitempty" xml:"ReviewAdditionalFiles,omitempty" type:"Struct"`
	ReviewApplicationFile          *string                                                                         `json:"ReviewApplicationFile,omitempty" xml:"ReviewApplicationFile,omitempty"`
	Status                         *int32                                                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	SupplementEvidenceCatalogFile  *string                                                                         `json:"SupplementEvidenceCatalogFile,omitempty" xml:"SupplementEvidenceCatalogFile,omitempty"`
	SupplementEvidenceMaterialFile *string                                                                         `json:"SupplementEvidenceMaterialFile,omitempty" xml:"SupplementEvidenceMaterialFile,omitempty"`
	SupplementReasonFile           *string                                                                         `json:"SupplementReasonFile,omitempty" xml:"SupplementReasonFile,omitempty"`
	Town                           *string                                                                         `json:"Town,omitempty" xml:"Town,omitempty"`
	Type                           *int32                                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetAddress(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.Address = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetBusinessLicenceUrl(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.BusinessLicenceUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetCardNumber(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.CardNumber = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetCity(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.City = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetContactAddress(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ContactAddress = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetContactCity(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ContactCity = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetContactDistrict(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ContactDistrict = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetContactEmail(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ContactEmail = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetContactName(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ContactName = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetContactNumber(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ContactNumber = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetContactProvince(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ContactProvince = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetContactZipcode(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ContactZipcode = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetCountry(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.Country = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetDetailedContactAddress(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.DetailedContactAddress = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetEAddress(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.EAddress = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetEName(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.EName = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetExpirationDate(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ExpirationDate = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetFactAndReasonPdfPath(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.FactAndReasonPdfPath = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetIdCardName(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.IdCardName = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetIdCardNumber(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.IdCardNumber = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetIdCardUrl(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.IdCardUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetLegalNoticeUrl(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.LegalNoticeUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetLoaUrl(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.LoaUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetMaterialVersion(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.MaterialVersion = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetName(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.Name = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetPassportUrl(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.PassportUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetPersonalType(v int64) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.PersonalType = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetPrincipalName(v int32) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.PrincipalName = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetProvince(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.Province = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetRegion(v int32) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.Region = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetReviewAdditionalFiles(v *QueryTradeMarkApplicationDetailResponseBodyMaterialDetailReviewAdditionalFiles) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ReviewAdditionalFiles = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetReviewApplicationFile(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.ReviewApplicationFile = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetStatus(v int32) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.Status = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetSupplementEvidenceCatalogFile(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.SupplementEvidenceCatalogFile = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetSupplementEvidenceMaterialFile(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.SupplementEvidenceMaterialFile = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetSupplementReasonFile(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.SupplementReasonFile = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetTown(v string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.Town = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail) SetType(v int32) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetail {
	s.Type = &v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyMaterialDetailReviewAdditionalFiles struct {
	ReviewAdditionalFile []*string `json:"ReviewAdditionalFile,omitempty" xml:"ReviewAdditionalFile,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyMaterialDetailReviewAdditionalFiles) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyMaterialDetailReviewAdditionalFiles) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyMaterialDetailReviewAdditionalFiles) SetReviewAdditionalFile(v []*string) *QueryTradeMarkApplicationDetailResponseBodyMaterialDetailReviewAdditionalFiles {
	s.ReviewAdditionalFile = v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyReceiptUrl struct {
	ReceiptUrl []*string `json:"ReceiptUrl,omitempty" xml:"ReceiptUrl,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyReceiptUrl) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyReceiptUrl) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyReceiptUrl) SetReceiptUrl(v []*string) *QueryTradeMarkApplicationDetailResponseBodyReceiptUrl {
	s.ReceiptUrl = v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyRenewResponse struct {
	Address       *string `json:"Address,omitempty" xml:"Address,omitempty"`
	EngAddress    *string `json:"EngAddress,omitempty" xml:"EngAddress,omitempty"`
	EngName       *string `json:"EngName,omitempty" xml:"EngName,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegisterTime  *int64  `json:"RegisterTime,omitempty" xml:"RegisterTime,omitempty"`
	SubmitSbjtime *int64  `json:"SubmitSbjtime,omitempty" xml:"SubmitSbjtime,omitempty"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyRenewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyRenewResponse) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyRenewResponse) SetAddress(v string) *QueryTradeMarkApplicationDetailResponseBodyRenewResponse {
	s.Address = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyRenewResponse) SetEngAddress(v string) *QueryTradeMarkApplicationDetailResponseBodyRenewResponse {
	s.EngAddress = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyRenewResponse) SetEngName(v string) *QueryTradeMarkApplicationDetailResponseBodyRenewResponse {
	s.EngName = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyRenewResponse) SetName(v string) *QueryTradeMarkApplicationDetailResponseBodyRenewResponse {
	s.Name = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyRenewResponse) SetRegisterTime(v int64) *QueryTradeMarkApplicationDetailResponseBodyRenewResponse {
	s.RegisterTime = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyRenewResponse) SetSubmitSbjtime(v int64) *QueryTradeMarkApplicationDetailResponseBodyRenewResponse {
	s.SubmitSbjtime = &v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles struct {
	ReviewAudit       *string                                                                          `json:"ReviewAudit,omitempty" xml:"ReviewAudit,omitempty"`
	ReviewKeep        *string                                                                          `json:"ReviewKeep,omitempty" xml:"ReviewKeep,omitempty"`
	ReviewPart        *string                                                                          `json:"ReviewPart,omitempty" xml:"ReviewPart,omitempty"`
	ReviewPass        *string                                                                          `json:"ReviewPass,omitempty" xml:"ReviewPass,omitempty"`
	ReviewSupplements *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFilesReviewSupplements `json:"ReviewSupplements,omitempty" xml:"ReviewSupplements,omitempty" type:"Struct"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles) SetReviewAudit(v string) *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles {
	s.ReviewAudit = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles) SetReviewKeep(v string) *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles {
	s.ReviewKeep = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles) SetReviewPart(v string) *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles {
	s.ReviewPart = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles) SetReviewPass(v string) *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles {
	s.ReviewPass = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles) SetReviewSupplements(v *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFilesReviewSupplements) *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFiles {
	s.ReviewSupplements = v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFilesReviewSupplements struct {
	ReviewSupplement []*string `json:"ReviewSupplement,omitempty" xml:"ReviewSupplement,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFilesReviewSupplements) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFilesReviewSupplements) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFilesReviewSupplements) SetReviewSupplement(v []*string) *QueryTradeMarkApplicationDetailResponseBodyReviewOfficialFilesReviewSupplements {
	s.ReviewSupplement = v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodySupplements struct {
	Supplements []*QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements `json:"Supplements,omitempty" xml:"Supplements,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationDetailResponseBodySupplements) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodySupplements) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplements) SetSupplements(v []*QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) *QueryTradeMarkApplicationDetailResponseBodySupplements {
	s.Supplements = v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements struct {
	AcceptDeadTime        *int64                                                                             `json:"AcceptDeadTime,omitempty" xml:"AcceptDeadTime,omitempty"`
	AcceptTime            *int64                                                                             `json:"AcceptTime,omitempty" xml:"AcceptTime,omitempty"`
	BatchNum              *string                                                                            `json:"BatchNum,omitempty" xml:"BatchNum,omitempty"`
	Content               *string                                                                            `json:"Content,omitempty" xml:"Content,omitempty"`
	FileTemplateUrls      *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplementsFileTemplateUrls `json:"FileTemplateUrls,omitempty" xml:"FileTemplateUrls,omitempty" type:"Struct"`
	Filename              *string                                                                            `json:"Filename,omitempty" xml:"Filename,omitempty"`
	Id                    *int64                                                                             `json:"Id,omitempty" xml:"Id,omitempty"`
	OperateTime           *int64                                                                             `json:"OperateTime,omitempty" xml:"OperateTime,omitempty"`
	OrderId               *string                                                                            `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	SbjDeadTime           *int64                                                                             `json:"SbjDeadTime,omitempty" xml:"SbjDeadTime,omitempty"`
	SendTime              *int64                                                                             `json:"SendTime,omitempty" xml:"SendTime,omitempty"`
	SerialNumber          *string                                                                            `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Status                *int32                                                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	TmNumber              *string                                                                            `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	Type                  *int32                                                                             `json:"Type,omitempty" xml:"Type,omitempty"`
	UploadFileTemplateUrl *string                                                                            `json:"UploadFileTemplateUrl,omitempty" xml:"UploadFileTemplateUrl,omitempty"`
}

func (s QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetAcceptDeadTime(v int64) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.AcceptDeadTime = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetAcceptTime(v int64) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.AcceptTime = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetBatchNum(v string) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.BatchNum = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetContent(v string) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.Content = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetFileTemplateUrls(v *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplementsFileTemplateUrls) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.FileTemplateUrls = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetFilename(v string) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.Filename = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetId(v int64) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.Id = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetOperateTime(v int64) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.OperateTime = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetOrderId(v string) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.OrderId = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetSbjDeadTime(v int64) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.SbjDeadTime = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetSendTime(v int64) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.SendTime = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetSerialNumber(v string) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.SerialNumber = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetStatus(v int32) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.Status = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetTmNumber(v string) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.TmNumber = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetType(v int32) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.Type = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements) SetUploadFileTemplateUrl(v string) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplements {
	s.UploadFileTemplateUrl = &v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodySupplementsSupplementsFileTemplateUrls struct {
	FileTemplateUrls []*string `json:"FileTemplateUrls,omitempty" xml:"FileTemplateUrls,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationDetailResponseBodySupplementsSupplementsFileTemplateUrls) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodySupplementsSupplementsFileTemplateUrls) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplementsFileTemplateUrls) SetFileTemplateUrls(v []*string) *QueryTradeMarkApplicationDetailResponseBodySupplementsSupplementsFileTemplateUrls {
	s.FileTemplateUrls = v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyThirdClassification struct {
	ThirdClassifications []*QueryTradeMarkApplicationDetailResponseBodyThirdClassificationThirdClassifications `json:"ThirdClassifications,omitempty" xml:"ThirdClassifications,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyThirdClassification) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyThirdClassification) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyThirdClassification) SetThirdClassifications(v []*QueryTradeMarkApplicationDetailResponseBodyThirdClassificationThirdClassifications) *QueryTradeMarkApplicationDetailResponseBodyThirdClassification {
	s.ThirdClassifications = v
	return s
}

type QueryTradeMarkApplicationDetailResponseBodyThirdClassificationThirdClassifications struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QueryTradeMarkApplicationDetailResponseBodyThirdClassificationThirdClassifications) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponseBodyThirdClassificationThirdClassifications) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponseBodyThirdClassificationThirdClassifications) SetCode(v string) *QueryTradeMarkApplicationDetailResponseBodyThirdClassificationThirdClassifications {
	s.Code = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponseBodyThirdClassificationThirdClassifications) SetName(v string) *QueryTradeMarkApplicationDetailResponseBodyThirdClassificationThirdClassifications {
	s.Name = &v
	return s
}

type QueryTradeMarkApplicationDetailResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTradeMarkApplicationDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTradeMarkApplicationDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationDetailResponse) SetHeaders(v map[string]*string) *QueryTradeMarkApplicationDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponse) SetStatusCode(v int32) *QueryTradeMarkApplicationDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTradeMarkApplicationDetailResponse) SetBody(v *QueryTradeMarkApplicationDetailResponseBody) *QueryTradeMarkApplicationDetailResponse {
	s.Body = v
	return s
}

type QueryTradeMarkApplicationLogsRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s QueryTradeMarkApplicationLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationLogsRequest) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationLogsRequest) SetBizId(v string) *QueryTradeMarkApplicationLogsRequest {
	s.BizId = &v
	return s
}

type QueryTradeMarkApplicationLogsResponseBody struct {
	Data      *QueryTradeMarkApplicationLogsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryTradeMarkApplicationLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationLogsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationLogsResponseBody) SetData(v *QueryTradeMarkApplicationLogsResponseBodyData) *QueryTradeMarkApplicationLogsResponseBody {
	s.Data = v
	return s
}

func (s *QueryTradeMarkApplicationLogsResponseBody) SetRequestId(v string) *QueryTradeMarkApplicationLogsResponseBody {
	s.RequestId = &v
	return s
}

type QueryTradeMarkApplicationLogsResponseBodyData struct {
	Data []*QueryTradeMarkApplicationLogsResponseBodyDataData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationLogsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationLogsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationLogsResponseBodyData) SetData(v []*QueryTradeMarkApplicationLogsResponseBodyDataData) *QueryTradeMarkApplicationLogsResponseBodyData {
	s.Data = v
	return s
}

type QueryTradeMarkApplicationLogsResponseBodyDataData struct {
	BizId         *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizStatus     *int32  `json:"BizStatus,omitempty" xml:"BizStatus,omitempty"`
	ExtendContent *string `json:"ExtendContent,omitempty" xml:"ExtendContent,omitempty"`
	Note          *string `json:"Note,omitempty" xml:"Note,omitempty"`
	OperateTime   *int64  `json:"OperateTime,omitempty" xml:"OperateTime,omitempty"`
	OperateType   *int32  `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	ToBizStatus   *int32  `json:"ToBizStatus,omitempty" xml:"ToBizStatus,omitempty"`
}

func (s QueryTradeMarkApplicationLogsResponseBodyDataData) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationLogsResponseBodyDataData) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationLogsResponseBodyDataData) SetBizId(v string) *QueryTradeMarkApplicationLogsResponseBodyDataData {
	s.BizId = &v
	return s
}

func (s *QueryTradeMarkApplicationLogsResponseBodyDataData) SetBizStatus(v int32) *QueryTradeMarkApplicationLogsResponseBodyDataData {
	s.BizStatus = &v
	return s
}

func (s *QueryTradeMarkApplicationLogsResponseBodyDataData) SetExtendContent(v string) *QueryTradeMarkApplicationLogsResponseBodyDataData {
	s.ExtendContent = &v
	return s
}

func (s *QueryTradeMarkApplicationLogsResponseBodyDataData) SetNote(v string) *QueryTradeMarkApplicationLogsResponseBodyDataData {
	s.Note = &v
	return s
}

func (s *QueryTradeMarkApplicationLogsResponseBodyDataData) SetOperateTime(v int64) *QueryTradeMarkApplicationLogsResponseBodyDataData {
	s.OperateTime = &v
	return s
}

func (s *QueryTradeMarkApplicationLogsResponseBodyDataData) SetOperateType(v int32) *QueryTradeMarkApplicationLogsResponseBodyDataData {
	s.OperateType = &v
	return s
}

func (s *QueryTradeMarkApplicationLogsResponseBodyDataData) SetToBizStatus(v int32) *QueryTradeMarkApplicationLogsResponseBodyDataData {
	s.ToBizStatus = &v
	return s
}

type QueryTradeMarkApplicationLogsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTradeMarkApplicationLogsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTradeMarkApplicationLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationLogsResponse) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationLogsResponse) SetHeaders(v map[string]*string) *QueryTradeMarkApplicationLogsResponse {
	s.Headers = v
	return s
}

func (s *QueryTradeMarkApplicationLogsResponse) SetStatusCode(v int32) *QueryTradeMarkApplicationLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTradeMarkApplicationLogsResponse) SetBody(v *QueryTradeMarkApplicationLogsResponseBody) *QueryTradeMarkApplicationLogsResponse {
	s.Body = v
	return s
}

type QueryTradeMarkApplicationsRequest struct {
	BizId              *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	Hidden             *int32  `json:"Hidden,omitempty" xml:"Hidden,omitempty"`
	IntentionBizId     *string `json:"IntentionBizId,omitempty" xml:"IntentionBizId,omitempty"`
	LogisticsNo        *string `json:"LogisticsNo,omitempty" xml:"LogisticsNo,omitempty"`
	MaterialName       *string `json:"MaterialName,omitempty" xml:"MaterialName,omitempty"`
	OrderId            *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PageNum            *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductType        *int32  `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	SortFiled          *string `json:"SortFiled,omitempty" xml:"SortFiled,omitempty"`
	SortOrder          *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	Specification      *int32  `json:"Specification,omitempty" xml:"Specification,omitempty"`
	Status             *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	SupplementStatus   *int32  `json:"SupplementStatus,omitempty" xml:"SupplementStatus,omitempty"`
	TmName             *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber           *string `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	Type               *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTradeMarkApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsRequest) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsRequest) SetBizId(v string) *QueryTradeMarkApplicationsRequest {
	s.BizId = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetClassificationCode(v string) *QueryTradeMarkApplicationsRequest {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetHidden(v int32) *QueryTradeMarkApplicationsRequest {
	s.Hidden = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetIntentionBizId(v string) *QueryTradeMarkApplicationsRequest {
	s.IntentionBizId = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetLogisticsNo(v string) *QueryTradeMarkApplicationsRequest {
	s.LogisticsNo = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetMaterialName(v string) *QueryTradeMarkApplicationsRequest {
	s.MaterialName = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetOrderId(v string) *QueryTradeMarkApplicationsRequest {
	s.OrderId = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetPageNum(v int32) *QueryTradeMarkApplicationsRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetPageSize(v int32) *QueryTradeMarkApplicationsRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetProductType(v int32) *QueryTradeMarkApplicationsRequest {
	s.ProductType = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetSortFiled(v string) *QueryTradeMarkApplicationsRequest {
	s.SortFiled = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetSortOrder(v string) *QueryTradeMarkApplicationsRequest {
	s.SortOrder = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetSpecification(v int32) *QueryTradeMarkApplicationsRequest {
	s.Specification = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetStatus(v int32) *QueryTradeMarkApplicationsRequest {
	s.Status = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetSupplementStatus(v int32) *QueryTradeMarkApplicationsRequest {
	s.SupplementStatus = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetTmName(v string) *QueryTradeMarkApplicationsRequest {
	s.TmName = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetTmNumber(v string) *QueryTradeMarkApplicationsRequest {
	s.TmNumber = &v
	return s
}

func (s *QueryTradeMarkApplicationsRequest) SetType(v string) *QueryTradeMarkApplicationsRequest {
	s.Type = &v
	return s
}

type QueryTradeMarkApplicationsResponseBody struct {
	CurrentPageNum *int32                                      `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryTradeMarkApplicationsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                                      `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                                      `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryTradeMarkApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsResponseBody) SetCurrentPageNum(v int32) *QueryTradeMarkApplicationsResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBody) SetData(v *QueryTradeMarkApplicationsResponseBodyData) *QueryTradeMarkApplicationsResponseBody {
	s.Data = v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBody) SetPageSize(v int32) *QueryTradeMarkApplicationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBody) SetRequestId(v string) *QueryTradeMarkApplicationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBody) SetTotalItemNum(v int32) *QueryTradeMarkApplicationsResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBody) SetTotalPageNum(v int32) *QueryTradeMarkApplicationsResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryTradeMarkApplicationsResponseBodyData struct {
	TmProduces []*QueryTradeMarkApplicationsResponseBodyDataTmProduces `json:"TmProduces,omitempty" xml:"TmProduces,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsResponseBodyData) SetTmProduces(v []*QueryTradeMarkApplicationsResponseBodyDataTmProduces) *QueryTradeMarkApplicationsResponseBodyData {
	s.TmProduces = v
	return s
}

type QueryTradeMarkApplicationsResponseBodyDataTmProduces struct {
	AgreementId          *string                                                                  `json:"AgreementId,omitempty" xml:"AgreementId,omitempty"`
	BizId                *string                                                                  `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CreateTime           *int64                                                                   `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FirstClassification  *QueryTradeMarkApplicationsResponseBodyDataTmProducesFirstClassification `json:"FirstClassification,omitempty" xml:"FirstClassification,omitempty" type:"Struct"`
	Flags                *QueryTradeMarkApplicationsResponseBodyDataTmProducesFlags               `json:"Flags,omitempty" xml:"Flags,omitempty" type:"Struct"`
	LoaUrl               *string                                                                  `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	MaterialId           *int64                                                                   `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	MaterialName         *string                                                                  `json:"MaterialName,omitempty" xml:"MaterialName,omitempty"`
	Note                 *string                                                                  `json:"Note,omitempty" xml:"Note,omitempty"`
	OrderId              *string                                                                  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrderPrice           *float32                                                                 `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	PrincipalName        *int32                                                                   `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	Remark               *string                                                                  `json:"Remark,omitempty" xml:"Remark,omitempty"`
	RenewResponse        *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse       `json:"RenewResponse,omitempty" xml:"RenewResponse,omitempty" type:"Struct"`
	ServicePrice         *float32                                                                 `json:"ServicePrice,omitempty" xml:"ServicePrice,omitempty"`
	ShowGoToDefendButton *bool                                                                    `json:"ShowGoToDefendButton,omitempty" xml:"ShowGoToDefendButton,omitempty"`
	Specification        *int32                                                                   `json:"Specification,omitempty" xml:"Specification,omitempty"`
	Status               *int32                                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitAuditTime      *int64                                                                   `json:"SubmitAuditTime,omitempty" xml:"SubmitAuditTime,omitempty"`
	SubmitTime           *int64                                                                   `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	SupplementId         *int64                                                                   `json:"SupplementId,omitempty" xml:"SupplementId,omitempty"`
	SupplementStatus     *int32                                                                   `json:"SupplementStatus,omitempty" xml:"SupplementStatus,omitempty"`
	SystemVersion        *string                                                                  `json:"SystemVersion,omitempty" xml:"SystemVersion,omitempty"`
	ThirdClassification  *QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassification `json:"ThirdClassification,omitempty" xml:"ThirdClassification,omitempty" type:"Struct"`
	TmIcon               *string                                                                  `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName               *string                                                                  `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber             *string                                                                  `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	TotalPrice           *float32                                                                 `json:"TotalPrice,omitempty" xml:"TotalPrice,omitempty"`
	Type                 *int32                                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateTime           *int64                                                                   `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId               *string                                                                  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProduces) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProduces) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetAgreementId(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.AgreementId = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetBizId(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.BizId = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetCreateTime(v int64) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.CreateTime = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetFirstClassification(v *QueryTradeMarkApplicationsResponseBodyDataTmProducesFirstClassification) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.FirstClassification = v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetFlags(v *QueryTradeMarkApplicationsResponseBodyDataTmProducesFlags) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.Flags = v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetLoaUrl(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.LoaUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetMaterialId(v int64) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.MaterialId = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetMaterialName(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.MaterialName = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetNote(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.Note = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetOrderId(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.OrderId = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetOrderPrice(v float32) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.OrderPrice = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetPrincipalName(v int32) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.PrincipalName = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetRemark(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.Remark = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetRenewResponse(v *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.RenewResponse = v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetServicePrice(v float32) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.ServicePrice = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetShowGoToDefendButton(v bool) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.ShowGoToDefendButton = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetSpecification(v int32) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.Specification = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetStatus(v int32) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.Status = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetSubmitAuditTime(v int64) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.SubmitAuditTime = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetSubmitTime(v int64) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.SubmitTime = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetSupplementId(v int64) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.SupplementId = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetSupplementStatus(v int32) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.SupplementStatus = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetSystemVersion(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.SystemVersion = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetThirdClassification(v *QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassification) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.ThirdClassification = v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetTmIcon(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.TmIcon = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetTmName(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.TmName = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetTmNumber(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.TmNumber = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetTotalPrice(v float32) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.TotalPrice = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetType(v int32) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.Type = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetUpdateTime(v int64) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.UpdateTime = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProduces) SetUserId(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProduces {
	s.UserId = &v
	return s
}

type QueryTradeMarkApplicationsResponseBodyDataTmProducesFirstClassification struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProducesFirstClassification) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProducesFirstClassification) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesFirstClassification) SetClassificationCode(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProducesFirstClassification {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesFirstClassification) SetClassificationName(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProducesFirstClassification {
	s.ClassificationName = &v
	return s
}

type QueryTradeMarkApplicationsResponseBodyDataTmProducesFlags struct {
	Flags []*string `json:"Flags,omitempty" xml:"Flags,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProducesFlags) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProducesFlags) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesFlags) SetFlags(v []*string) *QueryTradeMarkApplicationsResponseBodyDataTmProducesFlags {
	s.Flags = v
	return s
}

type QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse struct {
	Address       *string `json:"Address,omitempty" xml:"Address,omitempty"`
	EngAddress    *string `json:"EngAddress,omitempty" xml:"EngAddress,omitempty"`
	EngName       *string `json:"EngName,omitempty" xml:"EngName,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegisterTime  *int64  `json:"RegisterTime,omitempty" xml:"RegisterTime,omitempty"`
	SubmitSbjtime *int64  `json:"SubmitSbjtime,omitempty" xml:"SubmitSbjtime,omitempty"`
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse) SetAddress(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse {
	s.Address = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse) SetEngAddress(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse {
	s.EngAddress = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse) SetEngName(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse {
	s.EngName = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse) SetName(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse {
	s.Name = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse) SetRegisterTime(v int64) *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse {
	s.RegisterTime = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse) SetSubmitSbjtime(v int64) *QueryTradeMarkApplicationsResponseBodyDataTmProducesRenewResponse {
	s.SubmitSbjtime = &v
	return s
}

type QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassification struct {
	ThirdClassifications []*QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassificationThirdClassifications `json:"ThirdClassifications,omitempty" xml:"ThirdClassifications,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassification) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassification) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassification) SetThirdClassifications(v []*QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassificationThirdClassifications) *QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassification {
	s.ThirdClassifications = v
	return s
}

type QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassificationThirdClassifications struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassificationThirdClassifications) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassificationThirdClassifications) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassificationThirdClassifications) SetClassificationCode(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassificationThirdClassifications {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassificationThirdClassifications) SetClassificationName(v string) *QueryTradeMarkApplicationsResponseBodyDataTmProducesThirdClassificationThirdClassifications {
	s.ClassificationName = &v
	return s
}

type QueryTradeMarkApplicationsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTradeMarkApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTradeMarkApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsResponse) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsResponse) SetHeaders(v map[string]*string) *QueryTradeMarkApplicationsResponse {
	s.Headers = v
	return s
}

func (s *QueryTradeMarkApplicationsResponse) SetStatusCode(v int32) *QueryTradeMarkApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTradeMarkApplicationsResponse) SetBody(v *QueryTradeMarkApplicationsResponseBody) *QueryTradeMarkApplicationsResponse {
	s.Body = v
	return s
}

type QueryTradeMarkApplicationsByIntentionRequest struct {
	Channel         *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	IntentionBizId  *string `json:"IntentionBizId,omitempty" xml:"IntentionBizId,omitempty"`
	PageNum         *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TmProduceStatus *string `json:"TmProduceStatus,omitempty" xml:"TmProduceStatus,omitempty"`
}

func (s QueryTradeMarkApplicationsByIntentionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsByIntentionRequest) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsByIntentionRequest) SetChannel(v string) *QueryTradeMarkApplicationsByIntentionRequest {
	s.Channel = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionRequest) SetIntentionBizId(v string) *QueryTradeMarkApplicationsByIntentionRequest {
	s.IntentionBizId = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionRequest) SetPageNum(v int32) *QueryTradeMarkApplicationsByIntentionRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionRequest) SetPageSize(v int32) *QueryTradeMarkApplicationsByIntentionRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionRequest) SetTmProduceStatus(v string) *QueryTradeMarkApplicationsByIntentionRequest {
	s.TmProduceStatus = &v
	return s
}

type QueryTradeMarkApplicationsByIntentionResponseBody struct {
	CurrentPageNum *int32                                                 `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryTradeMarkApplicationsByIntentionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                                                 `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                                                 `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryTradeMarkApplicationsByIntentionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsByIntentionResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBody) SetCurrentPageNum(v int32) *QueryTradeMarkApplicationsByIntentionResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBody) SetData(v *QueryTradeMarkApplicationsByIntentionResponseBodyData) *QueryTradeMarkApplicationsByIntentionResponseBody {
	s.Data = v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBody) SetPageSize(v int32) *QueryTradeMarkApplicationsByIntentionResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBody) SetRequestId(v string) *QueryTradeMarkApplicationsByIntentionResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBody) SetTotalItemNum(v int32) *QueryTradeMarkApplicationsByIntentionResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBody) SetTotalPageNum(v int32) *QueryTradeMarkApplicationsByIntentionResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryTradeMarkApplicationsByIntentionResponseBodyData struct {
	TmProduces []*QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces `json:"TmProduces,omitempty" xml:"TmProduces,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationsByIntentionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsByIntentionResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyData) SetTmProduces(v []*QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) *QueryTradeMarkApplicationsByIntentionResponseBodyData {
	s.TmProduces = v
	return s
}

type QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces struct {
	BizId                *string                                                                             `json:"BizId,omitempty" xml:"BizId,omitempty"`
	CreateTime           *int64                                                                              `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FirstClassification  *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesFirstClassification `json:"FirstClassification,omitempty" xml:"FirstClassification,omitempty" type:"Struct"`
	LoaUrl               *string                                                                             `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	MaterialId           *string                                                                             `json:"MaterialId,omitempty" xml:"MaterialId,omitempty"`
	MaterialName         *string                                                                             `json:"MaterialName,omitempty" xml:"MaterialName,omitempty"`
	Note                 *string                                                                             `json:"Note,omitempty" xml:"Note,omitempty"`
	OrderPrice           *float32                                                                            `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	PrincipalDescription *string                                                                             `json:"PrincipalDescription,omitempty" xml:"PrincipalDescription,omitempty"`
	PrincipalValue       *int32                                                                              `json:"PrincipalValue,omitempty" xml:"PrincipalValue,omitempty"`
	ServicePrice         *float32                                                                            `json:"ServicePrice,omitempty" xml:"ServicePrice,omitempty"`
	Status               *int32                                                                              `json:"Status,omitempty" xml:"Status,omitempty"`
	SupplementId         *int64                                                                              `json:"SupplementId,omitempty" xml:"SupplementId,omitempty"`
	SupplementStatus     *int32                                                                              `json:"SupplementStatus,omitempty" xml:"SupplementStatus,omitempty"`
	ThirdClassification  *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassification `json:"ThirdClassification,omitempty" xml:"ThirdClassification,omitempty" type:"Struct"`
	TmIcon               *string                                                                             `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName               *string                                                                             `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber             *string                                                                             `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	TotalPrice           *float32                                                                            `json:"TotalPrice,omitempty" xml:"TotalPrice,omitempty"`
	Type                 *int32                                                                              `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateTime           *int64                                                                              `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetBizId(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.BizId = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetCreateTime(v int64) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.CreateTime = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetFirstClassification(v *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesFirstClassification) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.FirstClassification = v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetLoaUrl(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.LoaUrl = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetMaterialId(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.MaterialId = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetMaterialName(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.MaterialName = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetNote(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.Note = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetOrderPrice(v float32) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.OrderPrice = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetPrincipalDescription(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.PrincipalDescription = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetPrincipalValue(v int32) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.PrincipalValue = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetServicePrice(v float32) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.ServicePrice = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetStatus(v int32) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.Status = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetSupplementId(v int64) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.SupplementId = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetSupplementStatus(v int32) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.SupplementStatus = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetThirdClassification(v *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassification) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.ThirdClassification = v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetTmIcon(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.TmIcon = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetTmName(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.TmName = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetTmNumber(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.TmNumber = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetTotalPrice(v float32) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.TotalPrice = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetType(v int32) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.Type = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces) SetUpdateTime(v int64) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProduces {
	s.UpdateTime = &v
	return s
}

type QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesFirstClassification struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesFirstClassification) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesFirstClassification) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesFirstClassification) SetClassificationCode(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesFirstClassification {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesFirstClassification) SetClassificationName(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesFirstClassification {
	s.ClassificationName = &v
	return s
}

type QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassification struct {
	ThirdClassifications []*QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassificationThirdClassifications `json:"ThirdClassifications,omitempty" xml:"ThirdClassifications,omitempty" type:"Repeated"`
}

func (s QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassification) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassification) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassification) SetThirdClassifications(v []*QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassificationThirdClassifications) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassification {
	s.ThirdClassifications = v
	return s
}

type QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassificationThirdClassifications struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassificationThirdClassifications) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassificationThirdClassifications) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassificationThirdClassifications) SetClassificationCode(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassificationThirdClassifications {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassificationThirdClassifications) SetClassificationName(v string) *QueryTradeMarkApplicationsByIntentionResponseBodyDataTmProducesThirdClassificationThirdClassifications {
	s.ClassificationName = &v
	return s
}

type QueryTradeMarkApplicationsByIntentionResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTradeMarkApplicationsByIntentionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTradeMarkApplicationsByIntentionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeMarkApplicationsByIntentionResponse) GoString() string {
	return s.String()
}

func (s *QueryTradeMarkApplicationsByIntentionResponse) SetHeaders(v map[string]*string) *QueryTradeMarkApplicationsByIntentionResponse {
	s.Headers = v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponse) SetStatusCode(v int32) *QueryTradeMarkApplicationsByIntentionResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTradeMarkApplicationsByIntentionResponse) SetBody(v *QueryTradeMarkApplicationsByIntentionResponseBody) *QueryTradeMarkApplicationsByIntentionResponse {
	s.Body = v
	return s
}

type QueryTradeProduceDetailRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s QueryTradeProduceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeProduceDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryTradeProduceDetailRequest) SetBizId(v string) *QueryTradeProduceDetailRequest {
	s.BizId = &v
	return s
}

type QueryTradeProduceDetailResponseBody struct {
	Data      *QueryTradeProduceDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryTradeProduceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeProduceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTradeProduceDetailResponseBody) SetData(v *QueryTradeProduceDetailResponseBodyData) *QueryTradeProduceDetailResponseBody {
	s.Data = v
	return s
}

func (s *QueryTradeProduceDetailResponseBody) SetRequestId(v string) *QueryTradeProduceDetailResponseBody {
	s.RequestId = &v
	return s
}

type QueryTradeProduceDetailResponseBodyData struct {
	AllowCancel        *bool                  `json:"AllowCancel,omitempty" xml:"AllowCancel,omitempty"`
	BizId              *string                `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BuyerStatus        *int32                 `json:"BuyerStatus,omitempty" xml:"BuyerStatus,omitempty"`
	Classification     *string                `json:"Classification,omitempty" xml:"Classification,omitempty"`
	ConfiscateAmount   *float32               `json:"ConfiscateAmount,omitempty" xml:"ConfiscateAmount,omitempty"`
	CreateTime         *int64                 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ExclusiveDateLimit *string                `json:"ExclusiveDateLimit,omitempty" xml:"ExclusiveDateLimit,omitempty"`
	Extend             map[string]interface{} `json:"Extend,omitempty" xml:"Extend,omitempty"`
	FinalAmount        *float32               `json:"FinalAmount,omitempty" xml:"FinalAmount,omitempty"`
	Icon               *string                `json:"Icon,omitempty" xml:"Icon,omitempty"`
	OperateNote        *string                `json:"OperateNote,omitempty" xml:"OperateNote,omitempty"`
	PaidAmount         *float32               `json:"PaidAmount,omitempty" xml:"PaidAmount,omitempty"`
	PreAmount          *float32               `json:"PreAmount,omitempty" xml:"PreAmount,omitempty"`
	PreOrderId         *string                `json:"PreOrderId,omitempty" xml:"PreOrderId,omitempty"`
	RefundAmount       *float32               `json:"RefundAmount,omitempty" xml:"RefundAmount,omitempty"`
	RegisterNumber     *string                `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	Share              *string                `json:"Share,omitempty" xml:"Share,omitempty"`
	Source             *int32                 `json:"Source,omitempty" xml:"Source,omitempty"`
	ThirdCode          *string                `json:"ThirdCode,omitempty" xml:"ThirdCode,omitempty"`
	TmName             *string                `json:"TmName,omitempty" xml:"TmName,omitempty"`
	UpdateTime         *int64                 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId             *string                `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryTradeProduceDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeProduceDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTradeProduceDetailResponseBodyData) SetAllowCancel(v bool) *QueryTradeProduceDetailResponseBodyData {
	s.AllowCancel = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetBizId(v string) *QueryTradeProduceDetailResponseBodyData {
	s.BizId = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetBuyerStatus(v int32) *QueryTradeProduceDetailResponseBodyData {
	s.BuyerStatus = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetClassification(v string) *QueryTradeProduceDetailResponseBodyData {
	s.Classification = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetConfiscateAmount(v float32) *QueryTradeProduceDetailResponseBodyData {
	s.ConfiscateAmount = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetCreateTime(v int64) *QueryTradeProduceDetailResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetExclusiveDateLimit(v string) *QueryTradeProduceDetailResponseBodyData {
	s.ExclusiveDateLimit = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetExtend(v map[string]interface{}) *QueryTradeProduceDetailResponseBodyData {
	s.Extend = v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetFinalAmount(v float32) *QueryTradeProduceDetailResponseBodyData {
	s.FinalAmount = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetIcon(v string) *QueryTradeProduceDetailResponseBodyData {
	s.Icon = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetOperateNote(v string) *QueryTradeProduceDetailResponseBodyData {
	s.OperateNote = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetPaidAmount(v float32) *QueryTradeProduceDetailResponseBodyData {
	s.PaidAmount = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetPreAmount(v float32) *QueryTradeProduceDetailResponseBodyData {
	s.PreAmount = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetPreOrderId(v string) *QueryTradeProduceDetailResponseBodyData {
	s.PreOrderId = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetRefundAmount(v float32) *QueryTradeProduceDetailResponseBodyData {
	s.RefundAmount = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetRegisterNumber(v string) *QueryTradeProduceDetailResponseBodyData {
	s.RegisterNumber = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetShare(v string) *QueryTradeProduceDetailResponseBodyData {
	s.Share = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetSource(v int32) *QueryTradeProduceDetailResponseBodyData {
	s.Source = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetThirdCode(v string) *QueryTradeProduceDetailResponseBodyData {
	s.ThirdCode = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetTmName(v string) *QueryTradeProduceDetailResponseBodyData {
	s.TmName = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetUpdateTime(v int64) *QueryTradeProduceDetailResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *QueryTradeProduceDetailResponseBodyData) SetUserId(v string) *QueryTradeProduceDetailResponseBodyData {
	s.UserId = &v
	return s
}

type QueryTradeProduceDetailResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTradeProduceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTradeProduceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeProduceDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryTradeProduceDetailResponse) SetHeaders(v map[string]*string) *QueryTradeProduceDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryTradeProduceDetailResponse) SetStatusCode(v int32) *QueryTradeProduceDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTradeProduceDetailResponse) SetBody(v *QueryTradeProduceDetailResponseBody) *QueryTradeProduceDetailResponse {
	s.Body = v
	return s
}

type QueryTradeProduceListRequest struct {
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BuyerStatus    *int32  `json:"BuyerStatus,omitempty" xml:"BuyerStatus,omitempty"`
	PageNum        *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PreOrderId     *string `json:"PreOrderId,omitempty" xml:"PreOrderId,omitempty"`
	RegisterNumber *string `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	SortFiled      *string `json:"SortFiled,omitempty" xml:"SortFiled,omitempty"`
	SortOrder      *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
}

func (s QueryTradeProduceListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeProduceListRequest) GoString() string {
	return s.String()
}

func (s *QueryTradeProduceListRequest) SetBizId(v string) *QueryTradeProduceListRequest {
	s.BizId = &v
	return s
}

func (s *QueryTradeProduceListRequest) SetBuyerStatus(v int32) *QueryTradeProduceListRequest {
	s.BuyerStatus = &v
	return s
}

func (s *QueryTradeProduceListRequest) SetPageNum(v int32) *QueryTradeProduceListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTradeProduceListRequest) SetPageSize(v int32) *QueryTradeProduceListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTradeProduceListRequest) SetPreOrderId(v string) *QueryTradeProduceListRequest {
	s.PreOrderId = &v
	return s
}

func (s *QueryTradeProduceListRequest) SetRegisterNumber(v string) *QueryTradeProduceListRequest {
	s.RegisterNumber = &v
	return s
}

func (s *QueryTradeProduceListRequest) SetSortFiled(v string) *QueryTradeProduceListRequest {
	s.SortFiled = &v
	return s
}

func (s *QueryTradeProduceListRequest) SetSortOrder(v string) *QueryTradeProduceListRequest {
	s.SortOrder = &v
	return s
}

type QueryTradeProduceListResponseBody struct {
	CurrentPageNum *int32                                 `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryTradeProduceListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	PageSize       *int32                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                                 `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                                 `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryTradeProduceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeProduceListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTradeProduceListResponseBody) SetCurrentPageNum(v int32) *QueryTradeProduceListResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryTradeProduceListResponseBody) SetData(v *QueryTradeProduceListResponseBodyData) *QueryTradeProduceListResponseBody {
	s.Data = v
	return s
}

func (s *QueryTradeProduceListResponseBody) SetPageSize(v int32) *QueryTradeProduceListResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTradeProduceListResponseBody) SetRequestId(v string) *QueryTradeProduceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTradeProduceListResponseBody) SetTotalItemNum(v int32) *QueryTradeProduceListResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryTradeProduceListResponseBody) SetTotalPageNum(v int32) *QueryTradeProduceListResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryTradeProduceListResponseBodyData struct {
	TradeProduces []*QueryTradeProduceListResponseBodyDataTradeProduces `json:"TradeProduces,omitempty" xml:"TradeProduces,omitempty" type:"Repeated"`
}

func (s QueryTradeProduceListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeProduceListResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTradeProduceListResponseBodyData) SetTradeProduces(v []*QueryTradeProduceListResponseBodyDataTradeProduces) *QueryTradeProduceListResponseBodyData {
	s.TradeProduces = v
	return s
}

type QueryTradeProduceListResponseBodyDataTradeProduces struct {
	AllowCancel    *bool    `json:"AllowCancel,omitempty" xml:"AllowCancel,omitempty"`
	BizId          *string  `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BuyerStatus    *int32   `json:"BuyerStatus,omitempty" xml:"BuyerStatus,omitempty"`
	Classification *string  `json:"Classification,omitempty" xml:"Classification,omitempty"`
	CreateTime     *int64   `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FailReason     *int32   `json:"FailReason,omitempty" xml:"FailReason,omitempty"`
	FinalAmount    *float32 `json:"FinalAmount,omitempty" xml:"FinalAmount,omitempty"`
	Icon           *string  `json:"Icon,omitempty" xml:"Icon,omitempty"`
	OperateNote    *string  `json:"OperateNote,omitempty" xml:"OperateNote,omitempty"`
	PreAmount      *float32 `json:"PreAmount,omitempty" xml:"PreAmount,omitempty"`
	PreOrderId     *string  `json:"PreOrderId,omitempty" xml:"PreOrderId,omitempty"`
	RegisterNumber *string  `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	Source         *int32   `json:"Source,omitempty" xml:"Source,omitempty"`
	UpdateTime     *int64   `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId         *string  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryTradeProduceListResponseBodyDataTradeProduces) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeProduceListResponseBodyDataTradeProduces) GoString() string {
	return s.String()
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetAllowCancel(v bool) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.AllowCancel = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetBizId(v string) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.BizId = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetBuyerStatus(v int32) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.BuyerStatus = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetClassification(v string) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.Classification = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetCreateTime(v int64) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.CreateTime = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetFailReason(v int32) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.FailReason = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetFinalAmount(v float32) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.FinalAmount = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetIcon(v string) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.Icon = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetOperateNote(v string) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.OperateNote = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetPreAmount(v float32) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.PreAmount = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetPreOrderId(v string) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.PreOrderId = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetRegisterNumber(v string) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.RegisterNumber = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetSource(v int32) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.Source = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetUpdateTime(v int64) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.UpdateTime = &v
	return s
}

func (s *QueryTradeProduceListResponseBodyDataTradeProduces) SetUserId(v string) *QueryTradeProduceListResponseBodyDataTradeProduces {
	s.UserId = &v
	return s
}

type QueryTradeProduceListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTradeProduceListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTradeProduceListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTradeProduceListResponse) GoString() string {
	return s.String()
}

func (s *QueryTradeProduceListResponse) SetHeaders(v map[string]*string) *QueryTradeProduceListResponse {
	s.Headers = v
	return s
}

func (s *QueryTradeProduceListResponse) SetStatusCode(v int32) *QueryTradeProduceListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTradeProduceListResponse) SetBody(v *QueryTradeProduceListResponseBody) *QueryTradeProduceListResponse {
	s.Body = v
	return s
}

type QueryTrademarkDetailByApplyNumberRequest struct {
	ApplyNumber *string `json:"ApplyNumber,omitempty" xml:"ApplyNumber,omitempty"`
	Env         *string `json:"Env,omitempty" xml:"Env,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberRequest) SetApplyNumber(v string) *QueryTrademarkDetailByApplyNumberRequest {
	s.ApplyNumber = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberRequest) SetEnv(v string) *QueryTrademarkDetailByApplyNumberRequest {
	s.Env = &v
	return s
}

type QueryTrademarkDetailByApplyNumberResponseBody struct {
	Moudle    *QueryTrademarkDetailByApplyNumberResponseBodyMoudle `json:"Moudle,omitempty" xml:"Moudle,omitempty" type:"Struct"`
	RequestId *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberResponseBody) SetMoudle(v *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) *QueryTrademarkDetailByApplyNumberResponseBody {
	s.Moudle = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBody) SetRequestId(v string) *QueryTrademarkDetailByApplyNumberResponseBody {
	s.RequestId = &v
	return s
}

type QueryTrademarkDetailByApplyNumberResponseBodyMoudle struct {
	BitFlag              *int32                                                           `json:"BitFlag,omitempty" xml:"BitFlag,omitempty"`
	BizId                *string                                                          `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType              *string                                                          `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExtendInfo           map[string]interface{}                                           `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	GrayIconUrl          *string                                                          `json:"GrayIconUrl,omitempty" xml:"GrayIconUrl,omitempty"`
	Icon                 *string                                                          `json:"Icon,omitempty" xml:"Icon,omitempty"`
	LeafCodes            *QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodes    `json:"LeafCodes,omitempty" xml:"LeafCodes,omitempty" type:"Struct"`
	MaterialInfo         *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo `json:"MaterialInfo,omitempty" xml:"MaterialInfo,omitempty" type:"Struct"`
	OrderId              *string                                                          `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PartnerCode          *string                                                          `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	PrincipalKey         *string                                                          `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName        *string                                                          `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ProduceType          *string                                                          `json:"ProduceType,omitempty" xml:"ProduceType,omitempty"`
	RootCode             *QueryTrademarkDetailByApplyNumberResponseBodyMoudleRootCode     `json:"RootCode,omitempty" xml:"RootCode,omitempty" type:"Struct"`
	Status               *string                                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusStr            *string                                                          `json:"StatusStr,omitempty" xml:"StatusStr,omitempty"`
	SubmitAuditTimeStr   *string                                                          `json:"SubmitAuditTimeStr,omitempty" xml:"SubmitAuditTimeStr,omitempty"`
	SubmitAuditTimeValue *int64                                                           `json:"SubmitAuditTimeValue,omitempty" xml:"SubmitAuditTimeValue,omitempty"`
	SubmitStatus         *string                                                          `json:"SubmitStatus,omitempty" xml:"SubmitStatus,omitempty"`
	SubmitTimeStr        *string                                                          `json:"SubmitTimeStr,omitempty" xml:"SubmitTimeStr,omitempty"`
	SubmitTimeValue      *int64                                                           `json:"SubmitTimeValue,omitempty" xml:"SubmitTimeValue,omitempty"`
	SubmitTimes          *int32                                                           `json:"SubmitTimes,omitempty" xml:"SubmitTimes,omitempty"`
	TrademarkName        *string                                                          `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
	TrademarkNameType    *int32                                                           `json:"TrademarkNameType,omitempty" xml:"TrademarkNameType,omitempty"`
	TrademarkNumber      *string                                                          `json:"TrademarkNumber,omitempty" xml:"TrademarkNumber,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberResponseBodyMoudle) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberResponseBodyMoudle) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetBitFlag(v int32) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.BitFlag = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetBizId(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.BizId = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetBizType(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.BizType = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetExtendInfo(v map[string]interface{}) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.ExtendInfo = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetGrayIconUrl(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.GrayIconUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetIcon(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.Icon = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetLeafCodes(v *QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodes) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.LeafCodes = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetMaterialInfo(v *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.MaterialInfo = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetOrderId(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.OrderId = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetPartnerCode(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.PartnerCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetPrincipalKey(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.PrincipalKey = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetPrincipalName(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.PrincipalName = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetProduceType(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.ProduceType = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetRootCode(v *QueryTrademarkDetailByApplyNumberResponseBodyMoudleRootCode) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.RootCode = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetStatus(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.Status = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetStatusStr(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.StatusStr = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetSubmitAuditTimeStr(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.SubmitAuditTimeStr = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetSubmitAuditTimeValue(v int64) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.SubmitAuditTimeValue = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetSubmitStatus(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.SubmitStatus = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetSubmitTimeStr(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.SubmitTimeStr = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetSubmitTimeValue(v int64) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.SubmitTimeValue = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetSubmitTimes(v int32) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.SubmitTimes = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetTrademarkName(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.TrademarkName = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetTrademarkNameType(v int32) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.TrademarkNameType = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudle) SetTrademarkNumber(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudle {
	s.TrademarkNumber = &v
	return s
}

type QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodes struct {
	LeafCode []*QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodesLeafCode `json:"leafCode,omitempty" xml:"leafCode,omitempty" type:"Repeated"`
}

func (s QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodes) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodes) SetLeafCode(v []*QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodesLeafCode) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodes {
	s.LeafCode = v
	return s
}

type QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodesLeafCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodesLeafCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodesLeafCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodesLeafCode) SetClassificationCode(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodesLeafCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodesLeafCode) SetClassificationName(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleLeafCodesLeafCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo struct {
	Address            *string                `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceUrl *string                `json:"BusinessLicenceUrl,omitempty" xml:"BusinessLicenceUrl,omitempty"`
	CardNumber         *string                `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	CnInfoUrl          *string                `json:"CnInfoUrl,omitempty" xml:"CnInfoUrl,omitempty"`
	ContactAddress     *string                `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactEmail       *string                `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName        *string                `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactPhoneNumber *string                `json:"ContactPhoneNumber,omitempty" xml:"ContactPhoneNumber,omitempty"`
	ContactZipCode     *string                `json:"ContactZipCode,omitempty" xml:"ContactZipCode,omitempty"`
	Country            *string                `json:"Country,omitempty" xml:"Country,omitempty"`
	EAddress           *string                `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName              *string                `json:"EName,omitempty" xml:"EName,omitempty"`
	IdCardNumber       *string                `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardUrl          *string                `json:"IdCardUrl,omitempty" xml:"IdCardUrl,omitempty"`
	LoaKey             *string                `json:"LoaKey,omitempty" xml:"LoaKey,omitempty"`
	LoaUrl             *string                `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	Name               *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportUrl        *string                `json:"PassportUrl,omitempty" xml:"PassportUrl,omitempty"`
	PersonalType       *int32                 `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PostCode           *string                `json:"PostCode,omitempty" xml:"PostCode,omitempty"`
	Province           *string                `json:"Province,omitempty" xml:"Province,omitempty"`
	ReasonFileOssKey   *string                `json:"ReasonFileOssKey,omitempty" xml:"ReasonFileOssKey,omitempty"`
	Region             *int32                 `json:"Region,omitempty" xml:"Region,omitempty"`
	ReviewFileMap      map[string]interface{} `json:"ReviewFileMap,omitempty" xml:"ReviewFileMap,omitempty"`
	Type               *int32                 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetAddress(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.Address = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetBusinessLicenceUrl(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.BusinessLicenceUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetCardNumber(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.CardNumber = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetCnInfoUrl(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.CnInfoUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetContactAddress(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.ContactAddress = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetContactEmail(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.ContactEmail = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetContactName(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.ContactName = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetContactPhoneNumber(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.ContactPhoneNumber = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetContactZipCode(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.ContactZipCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetCountry(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.Country = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetEAddress(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.EAddress = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetEName(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.EName = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetIdCardNumber(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.IdCardNumber = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetIdCardUrl(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.IdCardUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetLoaKey(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.LoaKey = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetLoaUrl(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.LoaUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetName(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.Name = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetPassportUrl(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.PassportUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetPersonalType(v int32) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.PersonalType = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetPostCode(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.PostCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetProvince(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.Province = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetReasonFileOssKey(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.ReasonFileOssKey = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetRegion(v int32) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.Region = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetReviewFileMap(v map[string]interface{}) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.ReviewFileMap = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo) SetType(v int32) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleMaterialInfo {
	s.Type = &v
	return s
}

type QueryTrademarkDetailByApplyNumberResponseBodyMoudleRootCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberResponseBodyMoudleRootCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberResponseBodyMoudleRootCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleRootCode) SetClassificationCode(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleRootCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponseBodyMoudleRootCode) SetClassificationName(v string) *QueryTrademarkDetailByApplyNumberResponseBodyMoudleRootCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkDetailByApplyNumberResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkDetailByApplyNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkDetailByApplyNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberResponse) SetHeaders(v map[string]*string) *QueryTrademarkDetailByApplyNumberResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponse) SetStatusCode(v int32) *QueryTrademarkDetailByApplyNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberResponse) SetBody(v *QueryTrademarkDetailByApplyNumberResponseBody) *QueryTrademarkDetailByApplyNumberResponse {
	s.Body = v
	return s
}

type QueryTrademarkDetailByApplyNumberEspRequest struct {
	ApplyNumber *string `json:"ApplyNumber,omitempty" xml:"ApplyNumber,omitempty"`
	BizType     *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberEspRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberEspRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberEspRequest) SetApplyNumber(v string) *QueryTrademarkDetailByApplyNumberEspRequest {
	s.ApplyNumber = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspRequest) SetBizType(v string) *QueryTrademarkDetailByApplyNumberEspRequest {
	s.BizType = &v
	return s
}

type QueryTrademarkDetailByApplyNumberEspResponseBody struct {
	Moudle    *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle `json:"Moudle,omitempty" xml:"Moudle,omitempty" type:"Struct"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBody) SetMoudle(v *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) *QueryTrademarkDetailByApplyNumberEspResponseBody {
	s.Moudle = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBody) SetRequestId(v string) *QueryTrademarkDetailByApplyNumberEspResponseBody {
	s.RequestId = &v
	return s
}

type QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle struct {
	BitFlag              *int32                                                              `json:"BitFlag,omitempty" xml:"BitFlag,omitempty"`
	BizId                *string                                                             `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType              *string                                                             `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExtendInfo           map[string]interface{}                                              `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	GrayIconUrl          *string                                                             `json:"GrayIconUrl,omitempty" xml:"GrayIconUrl,omitempty"`
	Icon                 *string                                                             `json:"Icon,omitempty" xml:"Icon,omitempty"`
	LeafCodes            *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodes    `json:"LeafCodes,omitempty" xml:"LeafCodes,omitempty" type:"Struct"`
	MaterialInfo         *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo `json:"MaterialInfo,omitempty" xml:"MaterialInfo,omitempty" type:"Struct"`
	OrderId              *string                                                             `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PartnerCode          *string                                                             `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	PrincipalKey         *string                                                             `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName        *string                                                             `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ProduceType          *string                                                             `json:"ProduceType,omitempty" xml:"ProduceType,omitempty"`
	RootCode             *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleRootCode     `json:"RootCode,omitempty" xml:"RootCode,omitempty" type:"Struct"`
	Status               *string                                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusStr            *string                                                             `json:"StatusStr,omitempty" xml:"StatusStr,omitempty"`
	SubmitAuditTimeStr   *string                                                             `json:"SubmitAuditTimeStr,omitempty" xml:"SubmitAuditTimeStr,omitempty"`
	SubmitAuditTimeValue *int64                                                              `json:"SubmitAuditTimeValue,omitempty" xml:"SubmitAuditTimeValue,omitempty"`
	SubmitStatus         *string                                                             `json:"SubmitStatus,omitempty" xml:"SubmitStatus,omitempty"`
	SubmitTimeStr        *string                                                             `json:"SubmitTimeStr,omitempty" xml:"SubmitTimeStr,omitempty"`
	SubmitTimeValue      *int64                                                              `json:"SubmitTimeValue,omitempty" xml:"SubmitTimeValue,omitempty"`
	SubmitTimes          *int32                                                              `json:"SubmitTimes,omitempty" xml:"SubmitTimes,omitempty"`
	TrademarkName        *string                                                             `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
	TrademarkNameType    *int32                                                              `json:"TrademarkNameType,omitempty" xml:"TrademarkNameType,omitempty"`
	TrademarkNumber      *string                                                             `json:"TrademarkNumber,omitempty" xml:"TrademarkNumber,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetBitFlag(v int32) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.BitFlag = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetBizId(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.BizId = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetBizType(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.BizType = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetExtendInfo(v map[string]interface{}) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.ExtendInfo = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetGrayIconUrl(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.GrayIconUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetIcon(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.Icon = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetLeafCodes(v *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodes) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.LeafCodes = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetMaterialInfo(v *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.MaterialInfo = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetOrderId(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.OrderId = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetPartnerCode(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.PartnerCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetPrincipalKey(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.PrincipalKey = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetPrincipalName(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.PrincipalName = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetProduceType(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.ProduceType = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetRootCode(v *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleRootCode) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.RootCode = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetStatus(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.Status = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetStatusStr(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.StatusStr = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetSubmitAuditTimeStr(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.SubmitAuditTimeStr = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetSubmitAuditTimeValue(v int64) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.SubmitAuditTimeValue = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetSubmitStatus(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.SubmitStatus = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetSubmitTimeStr(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.SubmitTimeStr = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetSubmitTimeValue(v int64) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.SubmitTimeValue = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetSubmitTimes(v int32) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.SubmitTimes = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetTrademarkName(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.TrademarkName = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetTrademarkNameType(v int32) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.TrademarkNameType = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle) SetTrademarkNumber(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudle {
	s.TrademarkNumber = &v
	return s
}

type QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodes struct {
	LeafCode []*QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodesLeafCode `json:"leafCode,omitempty" xml:"leafCode,omitempty" type:"Repeated"`
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodes) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodes) SetLeafCode(v []*QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodesLeafCode) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodes {
	s.LeafCode = v
	return s
}

type QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodesLeafCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodesLeafCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodesLeafCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodesLeafCode) SetClassificationCode(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodesLeafCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodesLeafCode) SetClassificationName(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleLeafCodesLeafCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo struct {
	Address            *string                `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceUrl *string                `json:"BusinessLicenceUrl,omitempty" xml:"BusinessLicenceUrl,omitempty"`
	CardNumber         *string                `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	CnInfoUrl          *string                `json:"CnInfoUrl,omitempty" xml:"CnInfoUrl,omitempty"`
	ContactAddress     *string                `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactEmail       *string                `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName        *string                `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactPhoneNumber *string                `json:"ContactPhoneNumber,omitempty" xml:"ContactPhoneNumber,omitempty"`
	ContactZipCode     *string                `json:"ContactZipCode,omitempty" xml:"ContactZipCode,omitempty"`
	Country            *string                `json:"Country,omitempty" xml:"Country,omitempty"`
	EAddress           *string                `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName              *string                `json:"EName,omitempty" xml:"EName,omitempty"`
	IdCardNumber       *string                `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardUrl          *string                `json:"IdCardUrl,omitempty" xml:"IdCardUrl,omitempty"`
	LoaKey             *string                `json:"LoaKey,omitempty" xml:"LoaKey,omitempty"`
	LoaUrl             *string                `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	Name               *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportUrl        *string                `json:"PassportUrl,omitempty" xml:"PassportUrl,omitempty"`
	PersonalType       *int32                 `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PostCode           *string                `json:"PostCode,omitempty" xml:"PostCode,omitempty"`
	Province           *string                `json:"Province,omitempty" xml:"Province,omitempty"`
	ReasonFileOssKey   *string                `json:"ReasonFileOssKey,omitempty" xml:"ReasonFileOssKey,omitempty"`
	Region             *int32                 `json:"Region,omitempty" xml:"Region,omitempty"`
	ReviewFileMap      map[string]interface{} `json:"ReviewFileMap,omitempty" xml:"ReviewFileMap,omitempty"`
	Type               *int32                 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetAddress(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.Address = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetBusinessLicenceUrl(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.BusinessLicenceUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetCardNumber(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.CardNumber = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetCnInfoUrl(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.CnInfoUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetContactAddress(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.ContactAddress = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetContactEmail(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.ContactEmail = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetContactName(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.ContactName = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetContactPhoneNumber(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.ContactPhoneNumber = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetContactZipCode(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.ContactZipCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetCountry(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.Country = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetEAddress(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.EAddress = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetEName(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.EName = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetIdCardNumber(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.IdCardNumber = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetIdCardUrl(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.IdCardUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetLoaKey(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.LoaKey = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetLoaUrl(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.LoaUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetName(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.Name = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetPassportUrl(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.PassportUrl = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetPersonalType(v int32) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.PersonalType = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetPostCode(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.PostCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetProvince(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.Province = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetReasonFileOssKey(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.ReasonFileOssKey = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetRegion(v int32) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.Region = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetReviewFileMap(v map[string]interface{}) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.ReviewFileMap = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo) SetType(v int32) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleMaterialInfo {
	s.Type = &v
	return s
}

type QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleRootCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleRootCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleRootCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleRootCode) SetClassificationCode(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleRootCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleRootCode) SetClassificationName(v string) *QueryTrademarkDetailByApplyNumberEspResponseBodyMoudleRootCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkDetailByApplyNumberEspResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkDetailByApplyNumberEspResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkDetailByApplyNumberEspResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkDetailByApplyNumberEspResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkDetailByApplyNumberEspResponse) SetHeaders(v map[string]*string) *QueryTrademarkDetailByApplyNumberEspResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponse) SetStatusCode(v int32) *QueryTrademarkDetailByApplyNumberEspResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkDetailByApplyNumberEspResponse) SetBody(v *QueryTrademarkDetailByApplyNumberEspResponseBody) *QueryTrademarkDetailByApplyNumberEspResponse {
	s.Body = v
	return s
}

type QueryTrademarkModelDetailRequest struct {
	BizId                    *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Env                      *string `json:"Env,omitempty" xml:"Env,omitempty"`
	OrderId                  *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	ReviewSupplementMaterial *bool   `json:"ReviewSupplementMaterial,omitempty" xml:"ReviewSupplementMaterial,omitempty"`
}

func (s QueryTrademarkModelDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelDetailRequest) SetBizId(v string) *QueryTrademarkModelDetailRequest {
	s.BizId = &v
	return s
}

func (s *QueryTrademarkModelDetailRequest) SetEnv(v string) *QueryTrademarkModelDetailRequest {
	s.Env = &v
	return s
}

func (s *QueryTrademarkModelDetailRequest) SetOrderId(v string) *QueryTrademarkModelDetailRequest {
	s.OrderId = &v
	return s
}

func (s *QueryTrademarkModelDetailRequest) SetReviewSupplementMaterial(v bool) *QueryTrademarkModelDetailRequest {
	s.ReviewSupplementMaterial = &v
	return s
}

type QueryTrademarkModelDetailResponseBody struct {
	Moudle *QueryTrademarkModelDetailResponseBodyMoudle `json:"Moudle,omitempty" xml:"Moudle,omitempty" type:"Struct"`
}

func (s QueryTrademarkModelDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelDetailResponseBody) SetMoudle(v *QueryTrademarkModelDetailResponseBodyMoudle) *QueryTrademarkModelDetailResponseBody {
	s.Moudle = v
	return s
}

type QueryTrademarkModelDetailResponseBodyMoudle struct {
	BitFlag              *int32                                                   `json:"BitFlag,omitempty" xml:"BitFlag,omitempty"`
	BizId                *string                                                  `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType              *string                                                  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExtendInfo           map[string]interface{}                                   `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	GrayIconUrl          *string                                                  `json:"GrayIconUrl,omitempty" xml:"GrayIconUrl,omitempty"`
	Icon                 *string                                                  `json:"Icon,omitempty" xml:"Icon,omitempty"`
	LeafCodes            *QueryTrademarkModelDetailResponseBodyMoudleLeafCodes    `json:"LeafCodes,omitempty" xml:"LeafCodes,omitempty" type:"Struct"`
	MaterialInfo         *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo `json:"MaterialInfo,omitempty" xml:"MaterialInfo,omitempty" type:"Struct"`
	OrderId              *string                                                  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PartnerCode          *string                                                  `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	PrincipalKey         *string                                                  `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName        *string                                                  `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ProduceType          *string                                                  `json:"ProduceType,omitempty" xml:"ProduceType,omitempty"`
	RequestId            *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RootCode             *QueryTrademarkModelDetailResponseBodyMoudleRootCode     `json:"RootCode,omitempty" xml:"RootCode,omitempty" type:"Struct"`
	Status               *string                                                  `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusStr            *string                                                  `json:"StatusStr,omitempty" xml:"StatusStr,omitempty"`
	SubmitAuditTimeStr   *string                                                  `json:"SubmitAuditTimeStr,omitempty" xml:"SubmitAuditTimeStr,omitempty"`
	SubmitAuditTimeValue *int64                                                   `json:"SubmitAuditTimeValue,omitempty" xml:"SubmitAuditTimeValue,omitempty"`
	SubmitStatus         *string                                                  `json:"SubmitStatus,omitempty" xml:"SubmitStatus,omitempty"`
	SubmitTimeStr        *string                                                  `json:"SubmitTimeStr,omitempty" xml:"SubmitTimeStr,omitempty"`
	SubmitTimeValue      *int64                                                   `json:"SubmitTimeValue,omitempty" xml:"SubmitTimeValue,omitempty"`
	SubmitTimes          *int32                                                   `json:"SubmitTimes,omitempty" xml:"SubmitTimes,omitempty"`
	TrademarkName        *string                                                  `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
	TrademarkNameType    *int32                                                   `json:"TrademarkNameType,omitempty" xml:"TrademarkNameType,omitempty"`
	TrademarkNumber      *string                                                  `json:"TrademarkNumber,omitempty" xml:"TrademarkNumber,omitempty"`
}

func (s QueryTrademarkModelDetailResponseBodyMoudle) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelDetailResponseBodyMoudle) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetBitFlag(v int32) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.BitFlag = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetBizId(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.BizId = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetBizType(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.BizType = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetExtendInfo(v map[string]interface{}) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.ExtendInfo = v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetGrayIconUrl(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.GrayIconUrl = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetIcon(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.Icon = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetLeafCodes(v *QueryTrademarkModelDetailResponseBodyMoudleLeafCodes) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.LeafCodes = v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetMaterialInfo(v *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.MaterialInfo = v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetOrderId(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.OrderId = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetPartnerCode(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.PartnerCode = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetPrincipalKey(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.PrincipalKey = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetPrincipalName(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.PrincipalName = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetProduceType(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.ProduceType = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetRequestId(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.RequestId = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetRootCode(v *QueryTrademarkModelDetailResponseBodyMoudleRootCode) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.RootCode = v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetStatus(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.Status = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetStatusStr(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.StatusStr = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetSubmitAuditTimeStr(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.SubmitAuditTimeStr = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetSubmitAuditTimeValue(v int64) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.SubmitAuditTimeValue = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetSubmitStatus(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.SubmitStatus = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetSubmitTimeStr(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.SubmitTimeStr = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetSubmitTimeValue(v int64) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.SubmitTimeValue = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetSubmitTimes(v int32) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.SubmitTimes = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetTrademarkName(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.TrademarkName = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetTrademarkNameType(v int32) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.TrademarkNameType = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudle) SetTrademarkNumber(v string) *QueryTrademarkModelDetailResponseBodyMoudle {
	s.TrademarkNumber = &v
	return s
}

type QueryTrademarkModelDetailResponseBodyMoudleLeafCodes struct {
	LeafCode []*QueryTrademarkModelDetailResponseBodyMoudleLeafCodesLeafCode `json:"leafCode,omitempty" xml:"leafCode,omitempty" type:"Repeated"`
}

func (s QueryTrademarkModelDetailResponseBodyMoudleLeafCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelDetailResponseBodyMoudleLeafCodes) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleLeafCodes) SetLeafCode(v []*QueryTrademarkModelDetailResponseBodyMoudleLeafCodesLeafCode) *QueryTrademarkModelDetailResponseBodyMoudleLeafCodes {
	s.LeafCode = v
	return s
}

type QueryTrademarkModelDetailResponseBodyMoudleLeafCodesLeafCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkModelDetailResponseBodyMoudleLeafCodesLeafCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelDetailResponseBodyMoudleLeafCodesLeafCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleLeafCodesLeafCode) SetClassificationCode(v string) *QueryTrademarkModelDetailResponseBodyMoudleLeafCodesLeafCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleLeafCodesLeafCode) SetClassificationName(v string) *QueryTrademarkModelDetailResponseBodyMoudleLeafCodesLeafCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo struct {
	Address            *string                `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceUrl *string                `json:"BusinessLicenceUrl,omitempty" xml:"BusinessLicenceUrl,omitempty"`
	CardNumber         *string                `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	CnInfoUrl          *string                `json:"CnInfoUrl,omitempty" xml:"CnInfoUrl,omitempty"`
	ContactAddress     *string                `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactEmail       *string                `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName        *string                `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactPhoneNumber *string                `json:"ContactPhoneNumber,omitempty" xml:"ContactPhoneNumber,omitempty"`
	ContactZipCode     *string                `json:"ContactZipCode,omitempty" xml:"ContactZipCode,omitempty"`
	Country            *string                `json:"Country,omitempty" xml:"Country,omitempty"`
	EAddress           *string                `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName              *string                `json:"EName,omitempty" xml:"EName,omitempty"`
	IdCardNumber       *string                `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardUrl          *string                `json:"IdCardUrl,omitempty" xml:"IdCardUrl,omitempty"`
	LoaKey             *string                `json:"LoaKey,omitempty" xml:"LoaKey,omitempty"`
	LoaUrl             *string                `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	Name               *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportUrl        *string                `json:"PassportUrl,omitempty" xml:"PassportUrl,omitempty"`
	PersonalType       *int32                 `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PostCode           *string                `json:"PostCode,omitempty" xml:"PostCode,omitempty"`
	Province           *string                `json:"Province,omitempty" xml:"Province,omitempty"`
	ReasonFileOssKey   *string                `json:"ReasonFileOssKey,omitempty" xml:"ReasonFileOssKey,omitempty"`
	Region             *int32                 `json:"Region,omitempty" xml:"Region,omitempty"`
	ReviewFileMap      map[string]interface{} `json:"ReviewFileMap,omitempty" xml:"ReviewFileMap,omitempty"`
	Type               *int32                 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetAddress(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.Address = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetBusinessLicenceUrl(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.BusinessLicenceUrl = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetCardNumber(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.CardNumber = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetCnInfoUrl(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.CnInfoUrl = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetContactAddress(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.ContactAddress = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetContactEmail(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.ContactEmail = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetContactName(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.ContactName = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetContactPhoneNumber(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.ContactPhoneNumber = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetContactZipCode(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.ContactZipCode = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetCountry(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.Country = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetEAddress(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.EAddress = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetEName(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.EName = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetIdCardNumber(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.IdCardNumber = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetIdCardUrl(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.IdCardUrl = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetLoaKey(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.LoaKey = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetLoaUrl(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.LoaUrl = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetName(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.Name = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetPassportUrl(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.PassportUrl = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetPersonalType(v int32) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.PersonalType = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetPostCode(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.PostCode = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetProvince(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.Province = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetReasonFileOssKey(v string) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.ReasonFileOssKey = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetRegion(v int32) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.Region = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetReviewFileMap(v map[string]interface{}) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.ReviewFileMap = v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo) SetType(v int32) *QueryTrademarkModelDetailResponseBodyMoudleMaterialInfo {
	s.Type = &v
	return s
}

type QueryTrademarkModelDetailResponseBodyMoudleRootCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkModelDetailResponseBodyMoudleRootCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelDetailResponseBodyMoudleRootCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleRootCode) SetClassificationCode(v string) *QueryTrademarkModelDetailResponseBodyMoudleRootCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkModelDetailResponseBodyMoudleRootCode) SetClassificationName(v string) *QueryTrademarkModelDetailResponseBodyMoudleRootCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkModelDetailResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkModelDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkModelDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelDetailResponse) SetHeaders(v map[string]*string) *QueryTrademarkModelDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkModelDetailResponse) SetStatusCode(v int32) *QueryTrademarkModelDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkModelDetailResponse) SetBody(v *QueryTrademarkModelDetailResponseBody) *QueryTrademarkModelDetailResponse {
	s.Body = v
	return s
}

type QueryTrademarkModelEspDetailRequest struct {
	BizId   *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s QueryTrademarkModelEspDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspDetailRequest) SetBizId(v string) *QueryTrademarkModelEspDetailRequest {
	s.BizId = &v
	return s
}

func (s *QueryTrademarkModelEspDetailRequest) SetBizType(v string) *QueryTrademarkModelEspDetailRequest {
	s.BizType = &v
	return s
}

type QueryTrademarkModelEspDetailResponseBody struct {
	Moudle *QueryTrademarkModelEspDetailResponseBodyMoudle `json:"Moudle,omitempty" xml:"Moudle,omitempty" type:"Struct"`
}

func (s QueryTrademarkModelEspDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspDetailResponseBody) SetMoudle(v *QueryTrademarkModelEspDetailResponseBodyMoudle) *QueryTrademarkModelEspDetailResponseBody {
	s.Moudle = v
	return s
}

type QueryTrademarkModelEspDetailResponseBodyMoudle struct {
	BitFlag           *int32                                                      `json:"BitFlag,omitempty" xml:"BitFlag,omitempty"`
	BizId             *string                                                     `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType           *string                                                     `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExtendInfo        map[string]interface{}                                      `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	GrayIconUrl       *string                                                     `json:"GrayIconUrl,omitempty" xml:"GrayIconUrl,omitempty"`
	Icon              *string                                                     `json:"Icon,omitempty" xml:"Icon,omitempty"`
	LeafCodes         *QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodes    `json:"LeafCodes,omitempty" xml:"LeafCodes,omitempty" type:"Struct"`
	MaterialInfo      *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo `json:"MaterialInfo,omitempty" xml:"MaterialInfo,omitempty" type:"Struct"`
	OrderId           *string                                                     `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PartnerCode       *string                                                     `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	PrincipalKey      *string                                                     `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName     *string                                                     `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ProduceType       *string                                                     `json:"ProduceType,omitempty" xml:"ProduceType,omitempty"`
	RequestId         *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RootCode          *QueryTrademarkModelEspDetailResponseBodyMoudleRootCode     `json:"RootCode,omitempty" xml:"RootCode,omitempty" type:"Struct"`
	Status            *string                                                     `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusStr         *string                                                     `json:"StatusStr,omitempty" xml:"StatusStr,omitempty"`
	SubmitAuditTime   *int64                                                      `json:"SubmitAuditTime,omitempty" xml:"SubmitAuditTime,omitempty"`
	SubmitStatus      *string                                                     `json:"SubmitStatus,omitempty" xml:"SubmitStatus,omitempty"`
	SubmitTime        *int64                                                      `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	SubmitTimes       *int32                                                      `json:"SubmitTimes,omitempty" xml:"SubmitTimes,omitempty"`
	TrademarkName     *string                                                     `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
	TrademarkNameType *int32                                                      `json:"TrademarkNameType,omitempty" xml:"TrademarkNameType,omitempty"`
	TrademarkNumber   *string                                                     `json:"TrademarkNumber,omitempty" xml:"TrademarkNumber,omitempty"`
}

func (s QueryTrademarkModelEspDetailResponseBodyMoudle) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspDetailResponseBodyMoudle) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetBitFlag(v int32) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.BitFlag = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetBizId(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.BizId = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetBizType(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.BizType = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetExtendInfo(v map[string]interface{}) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.ExtendInfo = v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetGrayIconUrl(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.GrayIconUrl = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetIcon(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.Icon = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetLeafCodes(v *QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodes) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.LeafCodes = v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetMaterialInfo(v *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.MaterialInfo = v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetOrderId(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.OrderId = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetPartnerCode(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.PartnerCode = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetPrincipalKey(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.PrincipalKey = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetPrincipalName(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.PrincipalName = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetProduceType(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.ProduceType = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetRequestId(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.RequestId = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetRootCode(v *QueryTrademarkModelEspDetailResponseBodyMoudleRootCode) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.RootCode = v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetStatus(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.Status = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetStatusStr(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.StatusStr = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetSubmitAuditTime(v int64) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.SubmitAuditTime = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetSubmitStatus(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.SubmitStatus = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetSubmitTime(v int64) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.SubmitTime = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetSubmitTimes(v int32) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.SubmitTimes = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetTrademarkName(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.TrademarkName = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetTrademarkNameType(v int32) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.TrademarkNameType = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudle) SetTrademarkNumber(v string) *QueryTrademarkModelEspDetailResponseBodyMoudle {
	s.TrademarkNumber = &v
	return s
}

type QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodes struct {
	LeafCode []*QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodesLeafCode `json:"leafCode,omitempty" xml:"leafCode,omitempty" type:"Repeated"`
}

func (s QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodes) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodes) SetLeafCode(v []*QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodesLeafCode) *QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodes {
	s.LeafCode = v
	return s
}

type QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodesLeafCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodesLeafCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodesLeafCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodesLeafCode) SetClassificationCode(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodesLeafCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodesLeafCode) SetClassificationName(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleLeafCodesLeafCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo struct {
	Address            *string `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceUrl *string `json:"BusinessLicenceUrl,omitempty" xml:"BusinessLicenceUrl,omitempty"`
	CardNumber         *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	CnInfoUrl          *string `json:"CnInfoUrl,omitempty" xml:"CnInfoUrl,omitempty"`
	ContactAddress     *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactEmail       *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactZipCode     *string `json:"ContactZipCode,omitempty" xml:"ContactZipCode,omitempty"`
	Country            *string `json:"Country,omitempty" xml:"Country,omitempty"`
	EAddress           *string `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName              *string `json:"EName,omitempty" xml:"EName,omitempty"`
	IdCardNumber       *string `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardUrl          *string `json:"IdCardUrl,omitempty" xml:"IdCardUrl,omitempty"`
	LoaKey             *string `json:"LoaKey,omitempty" xml:"LoaKey,omitempty"`
	LoaUrl             *string `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportUrl        *string `json:"PassportUrl,omitempty" xml:"PassportUrl,omitempty"`
	PersonalType       *string `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PostCode           *string `json:"PostCode,omitempty" xml:"PostCode,omitempty"`
	Province           *string `json:"Province,omitempty" xml:"Province,omitempty"`
	ReasonFileOssKey   *string `json:"ReasonFileOssKey,omitempty" xml:"ReasonFileOssKey,omitempty"`
	Region             *int32  `json:"Region,omitempty" xml:"Region,omitempty"`
	Type               *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetAddress(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.Address = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetBusinessLicenceUrl(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.BusinessLicenceUrl = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetCardNumber(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.CardNumber = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetCnInfoUrl(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.CnInfoUrl = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetContactAddress(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.ContactAddress = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetContactEmail(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.ContactEmail = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetContactZipCode(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.ContactZipCode = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetCountry(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.Country = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetEAddress(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.EAddress = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetEName(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.EName = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetIdCardNumber(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.IdCardNumber = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetIdCardUrl(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.IdCardUrl = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetLoaKey(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.LoaKey = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetLoaUrl(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.LoaUrl = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetName(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.Name = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetPassportUrl(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.PassportUrl = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetPersonalType(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.PersonalType = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetPostCode(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.PostCode = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetProvince(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.Province = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetReasonFileOssKey(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.ReasonFileOssKey = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetRegion(v int32) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.Region = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo) SetType(v int32) *QueryTrademarkModelEspDetailResponseBodyMoudleMaterialInfo {
	s.Type = &v
	return s
}

type QueryTrademarkModelEspDetailResponseBodyMoudleRootCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkModelEspDetailResponseBodyMoudleRootCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspDetailResponseBodyMoudleRootCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleRootCode) SetClassificationCode(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleRootCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponseBodyMoudleRootCode) SetClassificationName(v string) *QueryTrademarkModelEspDetailResponseBodyMoudleRootCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkModelEspDetailResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkModelEspDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkModelEspDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspDetailResponse) SetHeaders(v map[string]*string) *QueryTrademarkModelEspDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkModelEspDetailResponse) SetStatusCode(v int32) *QueryTrademarkModelEspDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkModelEspDetailResponse) SetBody(v *QueryTrademarkModelEspDetailResponseBody) *QueryTrademarkModelEspDetailResponse {
	s.Body = v
	return s
}

type QueryTrademarkModelEspListRequest struct {
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType         *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	Env             *string `json:"Env,omitempty" xml:"Env,omitempty"`
	OrderId         *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrderIdsStr     *string `json:"OrderIdsStr,omitempty" xml:"OrderIdsStr,omitempty"`
	OrderInstanceId *string `json:"OrderInstanceId,omitempty" xml:"OrderInstanceId,omitempty"`
	PageNum         *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrincipalKey    *string `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName   *string `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitStatus    *string `json:"SubmitStatus,omitempty" xml:"SubmitStatus,omitempty"`
	SubmitTime      *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
}

func (s QueryTrademarkModelEspListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspListRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspListRequest) SetBizId(v string) *QueryTrademarkModelEspListRequest {
	s.BizId = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetBizType(v string) *QueryTrademarkModelEspListRequest {
	s.BizType = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetEnv(v string) *QueryTrademarkModelEspListRequest {
	s.Env = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetOrderId(v string) *QueryTrademarkModelEspListRequest {
	s.OrderId = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetOrderIdsStr(v string) *QueryTrademarkModelEspListRequest {
	s.OrderIdsStr = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetOrderInstanceId(v string) *QueryTrademarkModelEspListRequest {
	s.OrderInstanceId = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetPageNum(v int32) *QueryTrademarkModelEspListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetPageSize(v int32) *QueryTrademarkModelEspListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetPrincipalKey(v string) *QueryTrademarkModelEspListRequest {
	s.PrincipalKey = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetPrincipalName(v string) *QueryTrademarkModelEspListRequest {
	s.PrincipalName = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetStatus(v string) *QueryTrademarkModelEspListRequest {
	s.Status = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetSubmitStatus(v string) *QueryTrademarkModelEspListRequest {
	s.SubmitStatus = &v
	return s
}

func (s *QueryTrademarkModelEspListRequest) SetSubmitTime(v string) *QueryTrademarkModelEspListRequest {
	s.SubmitTime = &v
	return s
}

type QueryTrademarkModelEspListResponseBody struct {
	Moudle *QueryTrademarkModelEspListResponseBodyMoudle `json:"Moudle,omitempty" xml:"Moudle,omitempty" type:"Struct"`
}

func (s QueryTrademarkModelEspListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspListResponseBody) SetMoudle(v *QueryTrademarkModelEspListResponseBodyMoudle) *QueryTrademarkModelEspListResponseBody {
	s.Moudle = v
	return s
}

type QueryTrademarkModelEspListResponseBodyMoudle struct {
	Data         *QueryTrademarkModelEspListResponseBodyMoudleData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalPageNum *int32                                            `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryTrademarkModelEspListResponseBodyMoudle) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspListResponseBodyMoudle) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspListResponseBodyMoudle) SetData(v *QueryTrademarkModelEspListResponseBodyMoudleData) *QueryTrademarkModelEspListResponseBodyMoudle {
	s.Data = v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudle) SetRequestId(v string) *QueryTrademarkModelEspListResponseBodyMoudle {
	s.RequestId = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudle) SetTotalPageNum(v int32) *QueryTrademarkModelEspListResponseBodyMoudle {
	s.TotalPageNum = &v
	return s
}

type QueryTrademarkModelEspListResponseBodyMoudleData struct {
	Item []*QueryTrademarkModelEspListResponseBodyMoudleDataItem `json:"item,omitempty" xml:"item,omitempty" type:"Repeated"`
}

func (s QueryTrademarkModelEspListResponseBodyMoudleData) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspListResponseBodyMoudleData) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleData) SetItem(v []*QueryTrademarkModelEspListResponseBodyMoudleDataItem) *QueryTrademarkModelEspListResponseBodyMoudleData {
	s.Item = v
	return s
}

type QueryTrademarkModelEspListResponseBodyMoudleDataItem struct {
	BitFlag           *int32                                                            `json:"BitFlag,omitempty" xml:"BitFlag,omitempty"`
	BizId             *string                                                           `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType           *string                                                           `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExtendInfo        map[string]interface{}                                            `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	GrayIconUrl       *string                                                           `json:"GrayIconUrl,omitempty" xml:"GrayIconUrl,omitempty"`
	Icon              *string                                                           `json:"Icon,omitempty" xml:"Icon,omitempty"`
	LeafCodes         *QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodes    `json:"LeafCodes,omitempty" xml:"LeafCodes,omitempty" type:"Struct"`
	MaterialInfo      *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo `json:"MaterialInfo,omitempty" xml:"MaterialInfo,omitempty" type:"Struct"`
	OrderId           *string                                                           `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PartnerCode       *string                                                           `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	PrincipalKey      *string                                                           `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName     *string                                                           `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ProduceType       *string                                                           `json:"ProduceType,omitempty" xml:"ProduceType,omitempty"`
	RootCode          *QueryTrademarkModelEspListResponseBodyMoudleDataItemRootCode     `json:"RootCode,omitempty" xml:"RootCode,omitempty" type:"Struct"`
	Status            *string                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusStr         *string                                                           `json:"StatusStr,omitempty" xml:"StatusStr,omitempty"`
	SubmitAuditTime   *int64                                                            `json:"SubmitAuditTime,omitempty" xml:"SubmitAuditTime,omitempty"`
	SubmitStatus      *string                                                           `json:"SubmitStatus,omitempty" xml:"SubmitStatus,omitempty"`
	SubmitTime        *int64                                                            `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	SubmitTimes       *int32                                                            `json:"SubmitTimes,omitempty" xml:"SubmitTimes,omitempty"`
	TrademarkName     *string                                                           `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
	TrademarkNameType *int32                                                            `json:"TrademarkNameType,omitempty" xml:"TrademarkNameType,omitempty"`
	TrademarkNumber   *string                                                           `json:"TrademarkNumber,omitempty" xml:"TrademarkNumber,omitempty"`
}

func (s QueryTrademarkModelEspListResponseBodyMoudleDataItem) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspListResponseBodyMoudleDataItem) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetBitFlag(v int32) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.BitFlag = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetBizId(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.BizId = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetBizType(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.BizType = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetExtendInfo(v map[string]interface{}) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.ExtendInfo = v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetGrayIconUrl(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.GrayIconUrl = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetIcon(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.Icon = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetLeafCodes(v *QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodes) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.LeafCodes = v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetMaterialInfo(v *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.MaterialInfo = v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetOrderId(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.OrderId = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetPartnerCode(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.PartnerCode = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetPrincipalKey(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.PrincipalKey = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetPrincipalName(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.PrincipalName = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetProduceType(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.ProduceType = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetRootCode(v *QueryTrademarkModelEspListResponseBodyMoudleDataItemRootCode) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.RootCode = v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetStatus(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.Status = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetStatusStr(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.StatusStr = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetSubmitAuditTime(v int64) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.SubmitAuditTime = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetSubmitStatus(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.SubmitStatus = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetSubmitTime(v int64) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.SubmitTime = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetSubmitTimes(v int32) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.SubmitTimes = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetTrademarkName(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.TrademarkName = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetTrademarkNameType(v int32) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.TrademarkNameType = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItem) SetTrademarkNumber(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItem {
	s.TrademarkNumber = &v
	return s
}

type QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodes struct {
	LeafCode []*QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodesLeafCode `json:"leafCode,omitempty" xml:"leafCode,omitempty" type:"Repeated"`
}

func (s QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodes) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodes) SetLeafCode(v []*QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodesLeafCode) *QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodes {
	s.LeafCode = v
	return s
}

type QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodesLeafCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodesLeafCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodesLeafCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodesLeafCode) SetClassificationCode(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodesLeafCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodesLeafCode) SetClassificationName(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemLeafCodesLeafCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo struct {
	Address            *string `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceUrl *string `json:"BusinessLicenceUrl,omitempty" xml:"BusinessLicenceUrl,omitempty"`
	CardNumber         *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	CnInfoUrl          *string `json:"CnInfoUrl,omitempty" xml:"CnInfoUrl,omitempty"`
	ContactAddress     *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactEmail       *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactZipCode     *string `json:"ContactZipCode,omitempty" xml:"ContactZipCode,omitempty"`
	Country            *string `json:"Country,omitempty" xml:"Country,omitempty"`
	EAddress           *string `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName              *string `json:"EName,omitempty" xml:"EName,omitempty"`
	IdCardNumber       *string `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardUrl          *string `json:"IdCardUrl,omitempty" xml:"IdCardUrl,omitempty"`
	LoaKey             *string `json:"LoaKey,omitempty" xml:"LoaKey,omitempty"`
	LoaUrl             *string `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportUrl        *string `json:"PassportUrl,omitempty" xml:"PassportUrl,omitempty"`
	PersonalType       *string `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PostCode           *string `json:"PostCode,omitempty" xml:"PostCode,omitempty"`
	Province           *string `json:"Province,omitempty" xml:"Province,omitempty"`
	ReasonFileOssKey   *string `json:"ReasonFileOssKey,omitempty" xml:"ReasonFileOssKey,omitempty"`
	Region             *int32  `json:"Region,omitempty" xml:"Region,omitempty"`
	Type               *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetAddress(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.Address = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetBusinessLicenceUrl(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.BusinessLicenceUrl = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetCardNumber(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.CardNumber = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetCnInfoUrl(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.CnInfoUrl = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetContactAddress(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.ContactAddress = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetContactEmail(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.ContactEmail = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetContactZipCode(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.ContactZipCode = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetCountry(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.Country = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetEAddress(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.EAddress = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetEName(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.EName = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetIdCardNumber(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.IdCardNumber = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetIdCardUrl(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.IdCardUrl = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetLoaKey(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.LoaKey = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetLoaUrl(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.LoaUrl = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetName(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.Name = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetPassportUrl(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.PassportUrl = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetPersonalType(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.PersonalType = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetPostCode(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.PostCode = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetProvince(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.Province = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetReasonFileOssKey(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.ReasonFileOssKey = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetRegion(v int32) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.Region = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo) SetType(v int32) *QueryTrademarkModelEspListResponseBodyMoudleDataItemMaterialInfo {
	s.Type = &v
	return s
}

type QueryTrademarkModelEspListResponseBodyMoudleDataItemRootCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkModelEspListResponseBodyMoudleDataItemRootCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspListResponseBodyMoudleDataItemRootCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemRootCode) SetClassificationCode(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemRootCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkModelEspListResponseBodyMoudleDataItemRootCode) SetClassificationName(v string) *QueryTrademarkModelEspListResponseBodyMoudleDataItemRootCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkModelEspListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkModelEspListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkModelEspListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelEspListResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelEspListResponse) SetHeaders(v map[string]*string) *QueryTrademarkModelEspListResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkModelEspListResponse) SetStatusCode(v int32) *QueryTrademarkModelEspListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkModelEspListResponse) SetBody(v *QueryTrademarkModelEspListResponseBody) *QueryTrademarkModelEspListResponse {
	s.Body = v
	return s
}

type QueryTrademarkModelListRequest struct {
	Env             *string `json:"Env,omitempty" xml:"Env,omitempty"`
	OrderIdsStr     *string `json:"OrderIdsStr,omitempty" xml:"OrderIdsStr,omitempty"`
	PageNum         *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrincipalKey    *string `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName   *string `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ProduceTypesStr *string `json:"ProduceTypesStr,omitempty" xml:"ProduceTypesStr,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitStart     *string `json:"SubmitStart,omitempty" xml:"SubmitStart,omitempty"`
	SubmitStatus    *string `json:"SubmitStatus,omitempty" xml:"SubmitStatus,omitempty"`
	SubmitTime      *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
}

func (s QueryTrademarkModelListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelListRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelListRequest) SetEnv(v string) *QueryTrademarkModelListRequest {
	s.Env = &v
	return s
}

func (s *QueryTrademarkModelListRequest) SetOrderIdsStr(v string) *QueryTrademarkModelListRequest {
	s.OrderIdsStr = &v
	return s
}

func (s *QueryTrademarkModelListRequest) SetPageNum(v int32) *QueryTrademarkModelListRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTrademarkModelListRequest) SetPageSize(v int32) *QueryTrademarkModelListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTrademarkModelListRequest) SetPrincipalKey(v string) *QueryTrademarkModelListRequest {
	s.PrincipalKey = &v
	return s
}

func (s *QueryTrademarkModelListRequest) SetPrincipalName(v string) *QueryTrademarkModelListRequest {
	s.PrincipalName = &v
	return s
}

func (s *QueryTrademarkModelListRequest) SetProduceTypesStr(v string) *QueryTrademarkModelListRequest {
	s.ProduceTypesStr = &v
	return s
}

func (s *QueryTrademarkModelListRequest) SetStatus(v string) *QueryTrademarkModelListRequest {
	s.Status = &v
	return s
}

func (s *QueryTrademarkModelListRequest) SetSubmitStart(v string) *QueryTrademarkModelListRequest {
	s.SubmitStart = &v
	return s
}

func (s *QueryTrademarkModelListRequest) SetSubmitStatus(v string) *QueryTrademarkModelListRequest {
	s.SubmitStatus = &v
	return s
}

func (s *QueryTrademarkModelListRequest) SetSubmitTime(v string) *QueryTrademarkModelListRequest {
	s.SubmitTime = &v
	return s
}

type QueryTrademarkModelListResponseBody struct {
	Moudle *QueryTrademarkModelListResponseBodyMoudle `json:"Moudle,omitempty" xml:"Moudle,omitempty" type:"Struct"`
}

func (s QueryTrademarkModelListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelListResponseBody) SetMoudle(v *QueryTrademarkModelListResponseBodyMoudle) *QueryTrademarkModelListResponseBody {
	s.Moudle = v
	return s
}

type QueryTrademarkModelListResponseBodyMoudle struct {
	Data         *QueryTrademarkModelListResponseBodyMoudleData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalPageNum *int32                                         `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryTrademarkModelListResponseBodyMoudle) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelListResponseBodyMoudle) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelListResponseBodyMoudle) SetData(v *QueryTrademarkModelListResponseBodyMoudleData) *QueryTrademarkModelListResponseBodyMoudle {
	s.Data = v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudle) SetRequestId(v string) *QueryTrademarkModelListResponseBodyMoudle {
	s.RequestId = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudle) SetTotalPageNum(v int32) *QueryTrademarkModelListResponseBodyMoudle {
	s.TotalPageNum = &v
	return s
}

type QueryTrademarkModelListResponseBodyMoudleData struct {
	Item []*QueryTrademarkModelListResponseBodyMoudleDataItem `json:"item,omitempty" xml:"item,omitempty" type:"Repeated"`
}

func (s QueryTrademarkModelListResponseBodyMoudleData) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelListResponseBodyMoudleData) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelListResponseBodyMoudleData) SetItem(v []*QueryTrademarkModelListResponseBodyMoudleDataItem) *QueryTrademarkModelListResponseBodyMoudleData {
	s.Item = v
	return s
}

type QueryTrademarkModelListResponseBodyMoudleDataItem struct {
	BitFlag              *int32                                                         `json:"BitFlag,omitempty" xml:"BitFlag,omitempty"`
	BizId                *string                                                        `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType              *string                                                        `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExtendInfo           map[string]interface{}                                         `json:"ExtendInfo,omitempty" xml:"ExtendInfo,omitempty"`
	GrayIconUrl          *string                                                        `json:"GrayIconUrl,omitempty" xml:"GrayIconUrl,omitempty"`
	Icon                 *string                                                        `json:"Icon,omitempty" xml:"Icon,omitempty"`
	LeafCodes            *QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodes    `json:"LeafCodes,omitempty" xml:"LeafCodes,omitempty" type:"Struct"`
	MaterialInfo         *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo `json:"MaterialInfo,omitempty" xml:"MaterialInfo,omitempty" type:"Struct"`
	OrderId              *string                                                        `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	PartnerCode          *string                                                        `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	PrincipalKey         *string                                                        `json:"PrincipalKey,omitempty" xml:"PrincipalKey,omitempty"`
	PrincipalName        *string                                                        `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	ProduceType          *string                                                        `json:"ProduceType,omitempty" xml:"ProduceType,omitempty"`
	RootCode             *QueryTrademarkModelListResponseBodyMoudleDataItemRootCode     `json:"RootCode,omitempty" xml:"RootCode,omitempty" type:"Struct"`
	Status               *string                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	StatusStr            *string                                                        `json:"StatusStr,omitempty" xml:"StatusStr,omitempty"`
	SubmitAuditTimeStr   *string                                                        `json:"SubmitAuditTimeStr,omitempty" xml:"SubmitAuditTimeStr,omitempty"`
	SubmitAuditTimeValue *int64                                                         `json:"SubmitAuditTimeValue,omitempty" xml:"SubmitAuditTimeValue,omitempty"`
	SubmitStatus         *string                                                        `json:"SubmitStatus,omitempty" xml:"SubmitStatus,omitempty"`
	SubmitTimeStr        *string                                                        `json:"SubmitTimeStr,omitempty" xml:"SubmitTimeStr,omitempty"`
	SubmitTimeValue      *int64                                                         `json:"SubmitTimeValue,omitempty" xml:"SubmitTimeValue,omitempty"`
	SubmitTimes          *int32                                                         `json:"SubmitTimes,omitempty" xml:"SubmitTimes,omitempty"`
	TrademarkName        *string                                                        `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
	TrademarkNameType    *int32                                                         `json:"TrademarkNameType,omitempty" xml:"TrademarkNameType,omitempty"`
	TrademarkNumber      *string                                                        `json:"TrademarkNumber,omitempty" xml:"TrademarkNumber,omitempty"`
}

func (s QueryTrademarkModelListResponseBodyMoudleDataItem) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelListResponseBodyMoudleDataItem) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetBitFlag(v int32) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.BitFlag = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetBizId(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.BizId = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetBizType(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.BizType = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetExtendInfo(v map[string]interface{}) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.ExtendInfo = v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetGrayIconUrl(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.GrayIconUrl = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetIcon(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.Icon = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetLeafCodes(v *QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodes) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.LeafCodes = v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetMaterialInfo(v *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.MaterialInfo = v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetOrderId(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.OrderId = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetPartnerCode(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.PartnerCode = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetPrincipalKey(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.PrincipalKey = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetPrincipalName(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.PrincipalName = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetProduceType(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.ProduceType = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetRootCode(v *QueryTrademarkModelListResponseBodyMoudleDataItemRootCode) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.RootCode = v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetStatus(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.Status = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetStatusStr(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.StatusStr = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetSubmitAuditTimeStr(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.SubmitAuditTimeStr = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetSubmitAuditTimeValue(v int64) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.SubmitAuditTimeValue = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetSubmitStatus(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.SubmitStatus = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetSubmitTimeStr(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.SubmitTimeStr = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetSubmitTimeValue(v int64) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.SubmitTimeValue = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetSubmitTimes(v int32) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.SubmitTimes = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetTrademarkName(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.TrademarkName = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetTrademarkNameType(v int32) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.TrademarkNameType = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItem) SetTrademarkNumber(v string) *QueryTrademarkModelListResponseBodyMoudleDataItem {
	s.TrademarkNumber = &v
	return s
}

type QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodes struct {
	LeafCode []*QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodesLeafCode `json:"leafCode,omitempty" xml:"leafCode,omitempty" type:"Repeated"`
}

func (s QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodes) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodes) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodes) SetLeafCode(v []*QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodesLeafCode) *QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodes {
	s.LeafCode = v
	return s
}

type QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodesLeafCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodesLeafCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodesLeafCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodesLeafCode) SetClassificationCode(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodesLeafCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodesLeafCode) SetClassificationName(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemLeafCodesLeafCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo struct {
	Address            *string `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceUrl *string `json:"BusinessLicenceUrl,omitempty" xml:"BusinessLicenceUrl,omitempty"`
	CardNumber         *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	CnInfoUrl          *string `json:"CnInfoUrl,omitempty" xml:"CnInfoUrl,omitempty"`
	ContactAddress     *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactEmail       *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactZipCode     *string `json:"ContactZipCode,omitempty" xml:"ContactZipCode,omitempty"`
	Country            *string `json:"Country,omitempty" xml:"Country,omitempty"`
	EAddress           *string `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName              *string `json:"EName,omitempty" xml:"EName,omitempty"`
	IdCardNumber       *string `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardUrl          *string `json:"IdCardUrl,omitempty" xml:"IdCardUrl,omitempty"`
	LoaKey             *string `json:"LoaKey,omitempty" xml:"LoaKey,omitempty"`
	LoaUrl             *string `json:"LoaUrl,omitempty" xml:"LoaUrl,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportUrl        *string `json:"PassportUrl,omitempty" xml:"PassportUrl,omitempty"`
	PersonalType       *int32  `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PostCode           *string `json:"PostCode,omitempty" xml:"PostCode,omitempty"`
	Province           *string `json:"Province,omitempty" xml:"Province,omitempty"`
	ReasonFileOssKey   *string `json:"ReasonFileOssKey,omitempty" xml:"ReasonFileOssKey,omitempty"`
	Region             *int32  `json:"Region,omitempty" xml:"Region,omitempty"`
	Type               *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetAddress(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.Address = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetBusinessLicenceUrl(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.BusinessLicenceUrl = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetCardNumber(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.CardNumber = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetCnInfoUrl(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.CnInfoUrl = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetContactAddress(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.ContactAddress = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetContactEmail(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.ContactEmail = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetContactZipCode(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.ContactZipCode = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetCountry(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.Country = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetEAddress(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.EAddress = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetEName(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.EName = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetIdCardNumber(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.IdCardNumber = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetIdCardUrl(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.IdCardUrl = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetLoaKey(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.LoaKey = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetLoaUrl(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.LoaUrl = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetName(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.Name = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetPassportUrl(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.PassportUrl = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetPersonalType(v int32) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.PersonalType = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetPostCode(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.PostCode = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetProvince(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.Province = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetReasonFileOssKey(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.ReasonFileOssKey = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetRegion(v int32) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.Region = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo) SetType(v int32) *QueryTrademarkModelListResponseBodyMoudleDataItemMaterialInfo {
	s.Type = &v
	return s
}

type QueryTrademarkModelListResponseBodyMoudleDataItemRootCode struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
}

func (s QueryTrademarkModelListResponseBodyMoudleDataItemRootCode) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelListResponseBodyMoudleDataItemRootCode) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemRootCode) SetClassificationCode(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemRootCode {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkModelListResponseBodyMoudleDataItemRootCode) SetClassificationName(v string) *QueryTrademarkModelListResponseBodyMoudleDataItemRootCode {
	s.ClassificationName = &v
	return s
}

type QueryTrademarkModelListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkModelListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkModelListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkModelListResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkModelListResponse) SetHeaders(v map[string]*string) *QueryTrademarkModelListResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkModelListResponse) SetStatusCode(v int32) *QueryTrademarkModelListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkModelListResponse) SetBody(v *QueryTrademarkModelListResponseBody) *QueryTrademarkModelListResponse {
	s.Body = v
	return s
}

type QueryTrademarkMonitorResultsRequest struct {
	ActionType         *int32  `json:"ActionType,omitempty" xml:"ActionType,omitempty"`
	ApplyYear          *string `json:"ApplyYear,omitempty" xml:"ApplyYear,omitempty"`
	Classification     *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	PageNum            *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProcedureStatus    *int32  `json:"ProcedureStatus,omitempty" xml:"ProcedureStatus,omitempty"`
	RegistrationNumber *string `json:"RegistrationNumber,omitempty" xml:"RegistrationNumber,omitempty"`
	RuleId             *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	TmName             *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
}

func (s QueryTrademarkMonitorResultsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkMonitorResultsRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkMonitorResultsRequest) SetActionType(v int32) *QueryTrademarkMonitorResultsRequest {
	s.ActionType = &v
	return s
}

func (s *QueryTrademarkMonitorResultsRequest) SetApplyYear(v string) *QueryTrademarkMonitorResultsRequest {
	s.ApplyYear = &v
	return s
}

func (s *QueryTrademarkMonitorResultsRequest) SetClassification(v string) *QueryTrademarkMonitorResultsRequest {
	s.Classification = &v
	return s
}

func (s *QueryTrademarkMonitorResultsRequest) SetPageNum(v int32) *QueryTrademarkMonitorResultsRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTrademarkMonitorResultsRequest) SetPageSize(v int32) *QueryTrademarkMonitorResultsRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTrademarkMonitorResultsRequest) SetProcedureStatus(v int32) *QueryTrademarkMonitorResultsRequest {
	s.ProcedureStatus = &v
	return s
}

func (s *QueryTrademarkMonitorResultsRequest) SetRegistrationNumber(v string) *QueryTrademarkMonitorResultsRequest {
	s.RegistrationNumber = &v
	return s
}

func (s *QueryTrademarkMonitorResultsRequest) SetRuleId(v int64) *QueryTrademarkMonitorResultsRequest {
	s.RuleId = &v
	return s
}

func (s *QueryTrademarkMonitorResultsRequest) SetTmName(v string) *QueryTrademarkMonitorResultsRequest {
	s.TmName = &v
	return s
}

type QueryTrademarkMonitorResultsResponseBody struct {
	CurrentPageNum *int32                                        `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryTrademarkMonitorResultsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	NextPage       *bool                                         `json:"NextPage,omitempty" xml:"NextPage,omitempty"`
	PageSize       *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrePage        *bool                                         `json:"PrePage,omitempty" xml:"PrePage,omitempty"`
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                                        `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                                        `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryTrademarkMonitorResultsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkMonitorResultsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkMonitorResultsResponseBody) SetCurrentPageNum(v int32) *QueryTrademarkMonitorResultsResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBody) SetData(v *QueryTrademarkMonitorResultsResponseBodyData) *QueryTrademarkMonitorResultsResponseBody {
	s.Data = v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBody) SetNextPage(v bool) *QueryTrademarkMonitorResultsResponseBody {
	s.NextPage = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBody) SetPageSize(v int32) *QueryTrademarkMonitorResultsResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBody) SetPrePage(v bool) *QueryTrademarkMonitorResultsResponseBody {
	s.PrePage = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBody) SetRequestId(v string) *QueryTrademarkMonitorResultsResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBody) SetTotalItemNum(v int32) *QueryTrademarkMonitorResultsResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBody) SetTotalPageNum(v int32) *QueryTrademarkMonitorResultsResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryTrademarkMonitorResultsResponseBodyData struct {
	TmMonitorResult []*QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult `json:"TmMonitorResult,omitempty" xml:"TmMonitorResult,omitempty" type:"Repeated"`
}

func (s QueryTrademarkMonitorResultsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkMonitorResultsResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTrademarkMonitorResultsResponseBodyData) SetTmMonitorResult(v []*QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) *QueryTrademarkMonitorResultsResponseBodyData {
	s.TmMonitorResult = v
	return s
}

type QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult struct {
	ApplyDate             *string `json:"ApplyDate,omitempty" xml:"ApplyDate,omitempty"`
	ChesanEndDate         *string `json:"ChesanEndDate,omitempty" xml:"ChesanEndDate,omitempty"`
	Classification        *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	DataCreateTime        *int64  `json:"DataCreateTime,omitempty" xml:"DataCreateTime,omitempty"`
	DataUpdateTime        *int64  `json:"DataUpdateTime,omitempty" xml:"DataUpdateTime,omitempty"`
	OwnerEnName           *string `json:"OwnerEnName,omitempty" xml:"OwnerEnName,omitempty"`
	OwnerName             *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	RegistrationNumber    *string `json:"RegistrationNumber,omitempty" xml:"RegistrationNumber,omitempty"`
	RuleId                *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	TmImage               *string `json:"TmImage,omitempty" xml:"TmImage,omitempty"`
	TmName                *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmProcedureStatusDesc *string `json:"TmProcedureStatusDesc,omitempty" xml:"TmProcedureStatusDesc,omitempty"`
	TmUid                 *string `json:"TmUid,omitempty" xml:"TmUid,omitempty"`
	UserId                *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	WuxiaoEndDate         *string `json:"WuxiaoEndDate,omitempty" xml:"WuxiaoEndDate,omitempty"`
	XuzhanEndDate         *string `json:"XuzhanEndDate,omitempty" xml:"XuzhanEndDate,omitempty"`
	YiyiEndDate           *string `json:"YiyiEndDate,omitempty" xml:"YiyiEndDate,omitempty"`
}

func (s QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) GoString() string {
	return s.String()
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetApplyDate(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.ApplyDate = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetChesanEndDate(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.ChesanEndDate = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetClassification(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.Classification = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetDataCreateTime(v int64) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.DataCreateTime = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetDataUpdateTime(v int64) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.DataUpdateTime = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetOwnerEnName(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.OwnerEnName = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetOwnerName(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.OwnerName = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetRegistrationNumber(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.RegistrationNumber = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetRuleId(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.RuleId = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetTmImage(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.TmImage = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetTmName(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.TmName = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetTmProcedureStatusDesc(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.TmProcedureStatusDesc = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetTmUid(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.TmUid = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetUserId(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.UserId = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetWuxiaoEndDate(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.WuxiaoEndDate = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetXuzhanEndDate(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.XuzhanEndDate = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult) SetYiyiEndDate(v string) *QueryTrademarkMonitorResultsResponseBodyDataTmMonitorResult {
	s.YiyiEndDate = &v
	return s
}

type QueryTrademarkMonitorResultsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkMonitorResultsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkMonitorResultsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkMonitorResultsResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkMonitorResultsResponse) SetHeaders(v map[string]*string) *QueryTrademarkMonitorResultsResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkMonitorResultsResponse) SetStatusCode(v int32) *QueryTrademarkMonitorResultsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkMonitorResultsResponse) SetBody(v *QueryTrademarkMonitorResultsResponseBody) *QueryTrademarkMonitorResultsResponse {
	s.Body = v
	return s
}

type QueryTrademarkMonitorRulesRequest struct {
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	NotifyUpdate *int32  `json:"NotifyUpdate,omitempty" xml:"NotifyUpdate,omitempty"`
	PageNum      *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RuleName     *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
}

func (s QueryTrademarkMonitorRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkMonitorRulesRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkMonitorRulesRequest) SetId(v string) *QueryTrademarkMonitorRulesRequest {
	s.Id = &v
	return s
}

func (s *QueryTrademarkMonitorRulesRequest) SetNotifyUpdate(v int32) *QueryTrademarkMonitorRulesRequest {
	s.NotifyUpdate = &v
	return s
}

func (s *QueryTrademarkMonitorRulesRequest) SetPageNum(v int32) *QueryTrademarkMonitorRulesRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTrademarkMonitorRulesRequest) SetPageSize(v int32) *QueryTrademarkMonitorRulesRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTrademarkMonitorRulesRequest) SetRuleName(v string) *QueryTrademarkMonitorRulesRequest {
	s.RuleName = &v
	return s
}

type QueryTrademarkMonitorRulesResponseBody struct {
	CurrentPageNum *int32                                      `json:"CurrentPageNum,omitempty" xml:"CurrentPageNum,omitempty"`
	Data           *QueryTrademarkMonitorRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	NextPage       *bool                                       `json:"NextPage,omitempty" xml:"NextPage,omitempty"`
	PageSize       *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrePage        *bool                                       `json:"PrePage,omitempty" xml:"PrePage,omitempty"`
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalItemNum   *int32                                      `json:"TotalItemNum,omitempty" xml:"TotalItemNum,omitempty"`
	TotalPageNum   *int32                                      `json:"TotalPageNum,omitempty" xml:"TotalPageNum,omitempty"`
}

func (s QueryTrademarkMonitorRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkMonitorRulesResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkMonitorRulesResponseBody) SetCurrentPageNum(v int32) *QueryTrademarkMonitorRulesResponseBody {
	s.CurrentPageNum = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBody) SetData(v *QueryTrademarkMonitorRulesResponseBodyData) *QueryTrademarkMonitorRulesResponseBody {
	s.Data = v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBody) SetNextPage(v bool) *QueryTrademarkMonitorRulesResponseBody {
	s.NextPage = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBody) SetPageSize(v int32) *QueryTrademarkMonitorRulesResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBody) SetPrePage(v bool) *QueryTrademarkMonitorRulesResponseBody {
	s.PrePage = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBody) SetRequestId(v string) *QueryTrademarkMonitorRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBody) SetTotalItemNum(v int32) *QueryTrademarkMonitorRulesResponseBody {
	s.TotalItemNum = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBody) SetTotalPageNum(v int32) *QueryTrademarkMonitorRulesResponseBody {
	s.TotalPageNum = &v
	return s
}

type QueryTrademarkMonitorRulesResponseBodyData struct {
	TmMonitorRule []*QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule `json:"TmMonitorRule,omitempty" xml:"TmMonitorRule,omitempty" type:"Repeated"`
}

func (s QueryTrademarkMonitorRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkMonitorRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryTrademarkMonitorRulesResponseBodyData) SetTmMonitorRule(v []*QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) *QueryTrademarkMonitorRulesResponseBodyData {
	s.TmMonitorRule = v
	return s
}

type QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule struct {
	CreateTime     *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Env            *string `json:"Env,omitempty" xml:"Env,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
	LastFinishTime *string `json:"LastFinishTime,omitempty" xml:"LastFinishTime,omitempty"`
	LastRunTime    *string `json:"LastRunTime,omitempty" xml:"LastRunTime,omitempty"`
	LastUpdateTime *string `json:"LastUpdateTime,omitempty" xml:"LastUpdateTime,omitempty"`
	NotifyUpdate   *int32  `json:"NotifyUpdate,omitempty" xml:"NotifyUpdate,omitempty"`
	RuleDetail     *string `json:"RuleDetail,omitempty" xml:"RuleDetail,omitempty"`
	RuleExtend     *string `json:"RuleExtend,omitempty" xml:"RuleExtend,omitempty"`
	RuleKeyword    *string `json:"RuleKeyword,omitempty" xml:"RuleKeyword,omitempty"`
	RuleName       *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleSource     *string `json:"RuleSource,omitempty" xml:"RuleSource,omitempty"`
	RuleStatus     *string `json:"RuleStatus,omitempty" xml:"RuleStatus,omitempty"`
	RuleType       *int32  `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	UpdateTime     *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Version        *int32  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) GoString() string {
	return s.String()
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetCreateTime(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.CreateTime = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetEndTime(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.EndTime = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetEnv(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.Env = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetId(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.Id = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetLastFinishTime(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.LastFinishTime = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetLastRunTime(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.LastRunTime = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetLastUpdateTime(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.LastUpdateTime = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetNotifyUpdate(v int32) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.NotifyUpdate = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetRuleDetail(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.RuleDetail = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetRuleExtend(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.RuleExtend = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetRuleKeyword(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.RuleKeyword = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetRuleName(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.RuleName = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetRuleSource(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.RuleSource = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetRuleStatus(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.RuleStatus = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetRuleType(v int32) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.RuleType = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetStartTime(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.StartTime = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetUpdateTime(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.UpdateTime = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetUserId(v string) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.UserId = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule) SetVersion(v int32) *QueryTrademarkMonitorRulesResponseBodyDataTmMonitorRule {
	s.Version = &v
	return s
}

type QueryTrademarkMonitorRulesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkMonitorRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkMonitorRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkMonitorRulesResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkMonitorRulesResponse) SetHeaders(v map[string]*string) *QueryTrademarkMonitorRulesResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkMonitorRulesResponse) SetStatusCode(v int32) *QueryTrademarkMonitorRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkMonitorRulesResponse) SetBody(v *QueryTrademarkMonitorRulesResponseBody) *QueryTrademarkMonitorRulesResponse {
	s.Body = v
	return s
}

type QueryTrademarkOnSaleRequest struct {
	Classification *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	PageNum        *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegisterCode   *string `json:"RegisterCode,omitempty" xml:"RegisterCode,omitempty"`
	RegisterNumber *string `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	TmType         *string `json:"TmType,omitempty" xml:"TmType,omitempty"`
}

func (s QueryTrademarkOnSaleRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkOnSaleRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkOnSaleRequest) SetClassification(v string) *QueryTrademarkOnSaleRequest {
	s.Classification = &v
	return s
}

func (s *QueryTrademarkOnSaleRequest) SetPageNum(v int32) *QueryTrademarkOnSaleRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTrademarkOnSaleRequest) SetPageSize(v int32) *QueryTrademarkOnSaleRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTrademarkOnSaleRequest) SetRegisterCode(v string) *QueryTrademarkOnSaleRequest {
	s.RegisterCode = &v
	return s
}

func (s *QueryTrademarkOnSaleRequest) SetRegisterNumber(v string) *QueryTrademarkOnSaleRequest {
	s.RegisterNumber = &v
	return s
}

func (s *QueryTrademarkOnSaleRequest) SetTmType(v string) *QueryTrademarkOnSaleRequest {
	s.TmType = &v
	return s
}

type QueryTrademarkOnSaleResponseBody struct {
	PageNumber      *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId       *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount      *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPageNumber *int32                                        `json:"TotalPageNumber,omitempty" xml:"TotalPageNumber,omitempty"`
	Trademarks      []*QueryTrademarkOnSaleResponseBodyTrademarks `json:"Trademarks,omitempty" xml:"Trademarks,omitempty" type:"Repeated"`
}

func (s QueryTrademarkOnSaleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkOnSaleResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkOnSaleResponseBody) SetPageNumber(v int32) *QueryTrademarkOnSaleResponseBody {
	s.PageNumber = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBody) SetPageSize(v int32) *QueryTrademarkOnSaleResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBody) SetRequestId(v string) *QueryTrademarkOnSaleResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBody) SetTotalCount(v int32) *QueryTrademarkOnSaleResponseBody {
	s.TotalCount = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBody) SetTotalPageNumber(v int32) *QueryTrademarkOnSaleResponseBody {
	s.TotalPageNumber = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBody) SetTrademarks(v []*QueryTrademarkOnSaleResponseBodyTrademarks) *QueryTrademarkOnSaleResponseBody {
	s.Trademarks = v
	return s
}

type QueryTrademarkOnSaleResponseBodyTrademarks struct {
	AuditResult        *string `json:"AuditResult,omitempty" xml:"AuditResult,omitempty"`
	Classification     *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	Icon               *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	OrderPrice         *string `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	RegistrationNumber *string `json:"RegistrationNumber,omitempty" xml:"RegistrationNumber,omitempty"`
	Status             *int64  `json:"Status,omitempty" xml:"Status,omitempty"`
	TmType             *string `json:"TmType,omitempty" xml:"TmType,omitempty"`
	TrademarkName      *string `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
}

func (s QueryTrademarkOnSaleResponseBodyTrademarks) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkOnSaleResponseBodyTrademarks) GoString() string {
	return s.String()
}

func (s *QueryTrademarkOnSaleResponseBodyTrademarks) SetAuditResult(v string) *QueryTrademarkOnSaleResponseBodyTrademarks {
	s.AuditResult = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBodyTrademarks) SetClassification(v string) *QueryTrademarkOnSaleResponseBodyTrademarks {
	s.Classification = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBodyTrademarks) SetIcon(v string) *QueryTrademarkOnSaleResponseBodyTrademarks {
	s.Icon = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBodyTrademarks) SetOrderPrice(v string) *QueryTrademarkOnSaleResponseBodyTrademarks {
	s.OrderPrice = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBodyTrademarks) SetRegistrationNumber(v string) *QueryTrademarkOnSaleResponseBodyTrademarks {
	s.RegistrationNumber = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBodyTrademarks) SetStatus(v int64) *QueryTrademarkOnSaleResponseBodyTrademarks {
	s.Status = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBodyTrademarks) SetTmType(v string) *QueryTrademarkOnSaleResponseBodyTrademarks {
	s.TmType = &v
	return s
}

func (s *QueryTrademarkOnSaleResponseBodyTrademarks) SetTrademarkName(v string) *QueryTrademarkOnSaleResponseBodyTrademarks {
	s.TrademarkName = &v
	return s
}

type QueryTrademarkOnSaleResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkOnSaleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkOnSaleResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkOnSaleResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkOnSaleResponse) SetHeaders(v map[string]*string) *QueryTrademarkOnSaleResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkOnSaleResponse) SetStatusCode(v int32) *QueryTrademarkOnSaleResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkOnSaleResponse) SetBody(v *QueryTrademarkOnSaleResponseBody) *QueryTrademarkOnSaleResponse {
	s.Body = v
	return s
}

type QueryTrademarkPriceRequest struct {
	OrderData map[string]interface{} `json:"OrderData,omitempty" xml:"OrderData,omitempty"`
	TmIcon    *string                `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName    *string                `json:"TmName,omitempty" xml:"TmName,omitempty"`
	Type      *int32                 `json:"Type,omitempty" xml:"Type,omitempty"`
	UserId    *int64                 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryTrademarkPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkPriceRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkPriceRequest) SetOrderData(v map[string]interface{}) *QueryTrademarkPriceRequest {
	s.OrderData = v
	return s
}

func (s *QueryTrademarkPriceRequest) SetTmIcon(v string) *QueryTrademarkPriceRequest {
	s.TmIcon = &v
	return s
}

func (s *QueryTrademarkPriceRequest) SetTmName(v string) *QueryTrademarkPriceRequest {
	s.TmName = &v
	return s
}

func (s *QueryTrademarkPriceRequest) SetType(v int32) *QueryTrademarkPriceRequest {
	s.Type = &v
	return s
}

func (s *QueryTrademarkPriceRequest) SetUserId(v int64) *QueryTrademarkPriceRequest {
	s.UserId = &v
	return s
}

type QueryTrademarkPriceShrinkRequest struct {
	OrderDataShrink *string `json:"OrderData,omitempty" xml:"OrderData,omitempty"`
	TmIcon          *string `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName          *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
	Type            *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	UserId          *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryTrademarkPriceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkPriceShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkPriceShrinkRequest) SetOrderDataShrink(v string) *QueryTrademarkPriceShrinkRequest {
	s.OrderDataShrink = &v
	return s
}

func (s *QueryTrademarkPriceShrinkRequest) SetTmIcon(v string) *QueryTrademarkPriceShrinkRequest {
	s.TmIcon = &v
	return s
}

func (s *QueryTrademarkPriceShrinkRequest) SetTmName(v string) *QueryTrademarkPriceShrinkRequest {
	s.TmName = &v
	return s
}

func (s *QueryTrademarkPriceShrinkRequest) SetType(v int32) *QueryTrademarkPriceShrinkRequest {
	s.Type = &v
	return s
}

func (s *QueryTrademarkPriceShrinkRequest) SetUserId(v int64) *QueryTrademarkPriceShrinkRequest {
	s.UserId = &v
	return s
}

type QueryTrademarkPriceResponseBody struct {
	Currency      *string                                `json:"Currency,omitempty" xml:"Currency,omitempty"`
	DiscountPrice *float32                               `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	OriginalPrice *float32                               `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	Prices        *QueryTrademarkPriceResponseBodyPrices `json:"Prices,omitempty" xml:"Prices,omitempty" type:"Struct"`
	RequestId     *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TradePrice    *float32                               `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s QueryTrademarkPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkPriceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkPriceResponseBody) SetCurrency(v string) *QueryTrademarkPriceResponseBody {
	s.Currency = &v
	return s
}

func (s *QueryTrademarkPriceResponseBody) SetDiscountPrice(v float32) *QueryTrademarkPriceResponseBody {
	s.DiscountPrice = &v
	return s
}

func (s *QueryTrademarkPriceResponseBody) SetOriginalPrice(v float32) *QueryTrademarkPriceResponseBody {
	s.OriginalPrice = &v
	return s
}

func (s *QueryTrademarkPriceResponseBody) SetPrices(v *QueryTrademarkPriceResponseBodyPrices) *QueryTrademarkPriceResponseBody {
	s.Prices = v
	return s
}

func (s *QueryTrademarkPriceResponseBody) SetRequestId(v string) *QueryTrademarkPriceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTrademarkPriceResponseBody) SetTradePrice(v float32) *QueryTrademarkPriceResponseBody {
	s.TradePrice = &v
	return s
}

type QueryTrademarkPriceResponseBodyPrices struct {
	Prices []*QueryTrademarkPriceResponseBodyPricesPrices `json:"Prices,omitempty" xml:"Prices,omitempty" type:"Repeated"`
}

func (s QueryTrademarkPriceResponseBodyPrices) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkPriceResponseBodyPrices) GoString() string {
	return s.String()
}

func (s *QueryTrademarkPriceResponseBodyPrices) SetPrices(v []*QueryTrademarkPriceResponseBodyPricesPrices) *QueryTrademarkPriceResponseBodyPrices {
	s.Prices = v
	return s
}

type QueryTrademarkPriceResponseBodyPricesPrices struct {
	ClassificationCode *string  `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	Currency           *string  `json:"Currency,omitempty" xml:"Currency,omitempty"`
	DiscountPrice      *float32 `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	OriginalPrice      *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	TradePrice         *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s QueryTrademarkPriceResponseBodyPricesPrices) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkPriceResponseBodyPricesPrices) GoString() string {
	return s.String()
}

func (s *QueryTrademarkPriceResponseBodyPricesPrices) SetClassificationCode(v string) *QueryTrademarkPriceResponseBodyPricesPrices {
	s.ClassificationCode = &v
	return s
}

func (s *QueryTrademarkPriceResponseBodyPricesPrices) SetCurrency(v string) *QueryTrademarkPriceResponseBodyPricesPrices {
	s.Currency = &v
	return s
}

func (s *QueryTrademarkPriceResponseBodyPricesPrices) SetDiscountPrice(v float32) *QueryTrademarkPriceResponseBodyPricesPrices {
	s.DiscountPrice = &v
	return s
}

func (s *QueryTrademarkPriceResponseBodyPricesPrices) SetOriginalPrice(v float32) *QueryTrademarkPriceResponseBodyPricesPrices {
	s.OriginalPrice = &v
	return s
}

func (s *QueryTrademarkPriceResponseBodyPricesPrices) SetTradePrice(v float32) *QueryTrademarkPriceResponseBodyPricesPrices {
	s.TradePrice = &v
	return s
}

type QueryTrademarkPriceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkPriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkPriceResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkPriceResponse) SetHeaders(v map[string]*string) *QueryTrademarkPriceResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkPriceResponse) SetStatusCode(v int32) *QueryTrademarkPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkPriceResponse) SetBody(v *QueryTrademarkPriceResponseBody) *QueryTrademarkPriceResponse {
	s.Body = v
	return s
}

type QueryTrademarkUploadAuditResultRequest struct {
	Classification *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	PageNum        *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegisterCode   *string `json:"RegisterCode,omitempty" xml:"RegisterCode,omitempty"`
	RegisterNumber *string `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	TmType         *string `json:"TmType,omitempty" xml:"TmType,omitempty"`
}

func (s QueryTrademarkUploadAuditResultRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkUploadAuditResultRequest) GoString() string {
	return s.String()
}

func (s *QueryTrademarkUploadAuditResultRequest) SetClassification(v string) *QueryTrademarkUploadAuditResultRequest {
	s.Classification = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultRequest) SetPageNum(v int32) *QueryTrademarkUploadAuditResultRequest {
	s.PageNum = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultRequest) SetPageSize(v int32) *QueryTrademarkUploadAuditResultRequest {
	s.PageSize = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultRequest) SetRegisterCode(v string) *QueryTrademarkUploadAuditResultRequest {
	s.RegisterCode = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultRequest) SetRegisterNumber(v string) *QueryTrademarkUploadAuditResultRequest {
	s.RegisterNumber = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultRequest) SetTmType(v string) *QueryTrademarkUploadAuditResultRequest {
	s.TmType = &v
	return s
}

type QueryTrademarkUploadAuditResultResponseBody struct {
	PageNumber      *int32                                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32                                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId       *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount      *int32                                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPageNumber *int32                                                   `json:"TotalPageNumber,omitempty" xml:"TotalPageNumber,omitempty"`
	Trademarks      []*QueryTrademarkUploadAuditResultResponseBodyTrademarks `json:"Trademarks,omitempty" xml:"Trademarks,omitempty" type:"Repeated"`
}

func (s QueryTrademarkUploadAuditResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkUploadAuditResultResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrademarkUploadAuditResultResponseBody) SetPageNumber(v int32) *QueryTrademarkUploadAuditResultResponseBody {
	s.PageNumber = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBody) SetPageSize(v int32) *QueryTrademarkUploadAuditResultResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBody) SetRequestId(v string) *QueryTrademarkUploadAuditResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBody) SetTotalCount(v int32) *QueryTrademarkUploadAuditResultResponseBody {
	s.TotalCount = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBody) SetTotalPageNumber(v int32) *QueryTrademarkUploadAuditResultResponseBody {
	s.TotalPageNumber = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBody) SetTrademarks(v []*QueryTrademarkUploadAuditResultResponseBodyTrademarks) *QueryTrademarkUploadAuditResultResponseBody {
	s.Trademarks = v
	return s
}

type QueryTrademarkUploadAuditResultResponseBodyTrademarks struct {
	AuditResult        *string `json:"AuditResult,omitempty" xml:"AuditResult,omitempty"`
	Classification     *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	Icon               *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	OrderPrice         *string `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	RegistrationNumber *string `json:"RegistrationNumber,omitempty" xml:"RegistrationNumber,omitempty"`
	Status             *int64  `json:"Status,omitempty" xml:"Status,omitempty"`
	TmType             *string `json:"TmType,omitempty" xml:"TmType,omitempty"`
	TrademarkName      *string `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
}

func (s QueryTrademarkUploadAuditResultResponseBodyTrademarks) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkUploadAuditResultResponseBodyTrademarks) GoString() string {
	return s.String()
}

func (s *QueryTrademarkUploadAuditResultResponseBodyTrademarks) SetAuditResult(v string) *QueryTrademarkUploadAuditResultResponseBodyTrademarks {
	s.AuditResult = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBodyTrademarks) SetClassification(v string) *QueryTrademarkUploadAuditResultResponseBodyTrademarks {
	s.Classification = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBodyTrademarks) SetIcon(v string) *QueryTrademarkUploadAuditResultResponseBodyTrademarks {
	s.Icon = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBodyTrademarks) SetOrderPrice(v string) *QueryTrademarkUploadAuditResultResponseBodyTrademarks {
	s.OrderPrice = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBodyTrademarks) SetRegistrationNumber(v string) *QueryTrademarkUploadAuditResultResponseBodyTrademarks {
	s.RegistrationNumber = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBodyTrademarks) SetStatus(v int64) *QueryTrademarkUploadAuditResultResponseBodyTrademarks {
	s.Status = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBodyTrademarks) SetTmType(v string) *QueryTrademarkUploadAuditResultResponseBodyTrademarks {
	s.TmType = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponseBodyTrademarks) SetTrademarkName(v string) *QueryTrademarkUploadAuditResultResponseBodyTrademarks {
	s.TrademarkName = &v
	return s
}

type QueryTrademarkUploadAuditResultResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryTrademarkUploadAuditResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrademarkUploadAuditResultResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrademarkUploadAuditResultResponse) GoString() string {
	return s.String()
}

func (s *QueryTrademarkUploadAuditResultResponse) SetHeaders(v map[string]*string) *QueryTrademarkUploadAuditResultResponse {
	s.Headers = v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponse) SetStatusCode(v int32) *QueryTrademarkUploadAuditResultResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTrademarkUploadAuditResultResponse) SetBody(v *QueryTrademarkUploadAuditResultResponseBody) *QueryTrademarkUploadAuditResultResponse {
	s.Body = v
	return s
}

type RecordBankBalanceRequest struct {
	ActionDate    *int64  `json:"ActionDate,omitempty" xml:"ActionDate,omitempty"`
	Balance       *string `json:"Balance,omitempty" xml:"Balance,omitempty"`
	PrincipalName *string `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
}

func (s RecordBankBalanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RecordBankBalanceRequest) GoString() string {
	return s.String()
}

func (s *RecordBankBalanceRequest) SetActionDate(v int64) *RecordBankBalanceRequest {
	s.ActionDate = &v
	return s
}

func (s *RecordBankBalanceRequest) SetBalance(v string) *RecordBankBalanceRequest {
	s.Balance = &v
	return s
}

func (s *RecordBankBalanceRequest) SetPrincipalName(v string) *RecordBankBalanceRequest {
	s.PrincipalName = &v
	return s
}

type RecordBankBalanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s RecordBankBalanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RecordBankBalanceResponseBody) GoString() string {
	return s.String()
}

func (s *RecordBankBalanceResponseBody) SetRequestId(v string) *RecordBankBalanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RecordBankBalanceResponseBody) SetResult(v bool) *RecordBankBalanceResponseBody {
	s.Result = &v
	return s
}

type RecordBankBalanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RecordBankBalanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RecordBankBalanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RecordBankBalanceResponse) GoString() string {
	return s.String()
}

func (s *RecordBankBalanceResponse) SetHeaders(v map[string]*string) *RecordBankBalanceResponse {
	s.Headers = v
	return s
}

func (s *RecordBankBalanceResponse) SetStatusCode(v int32) *RecordBankBalanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RecordBankBalanceResponse) SetBody(v *RecordBankBalanceResponseBody) *RecordBankBalanceResponse {
	s.Body = v
	return s
}

type RefundProduceRequest struct {
	BizId      *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	RefundType *string `json:"RefundType,omitempty" xml:"RefundType,omitempty"`
}

func (s RefundProduceRequest) String() string {
	return tea.Prettify(s)
}

func (s RefundProduceRequest) GoString() string {
	return s.String()
}

func (s *RefundProduceRequest) SetBizId(v string) *RefundProduceRequest {
	s.BizId = &v
	return s
}

func (s *RefundProduceRequest) SetRefundType(v string) *RefundProduceRequest {
	s.RefundType = &v
	return s
}

type RefundProduceResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RefundProduceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefundProduceResponseBody) GoString() string {
	return s.String()
}

func (s *RefundProduceResponseBody) SetErrorCode(v string) *RefundProduceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RefundProduceResponseBody) SetErrorMsg(v string) *RefundProduceResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *RefundProduceResponseBody) SetRequestId(v string) *RefundProduceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefundProduceResponseBody) SetSuccess(v bool) *RefundProduceResponseBody {
	s.Success = &v
	return s
}

type RefundProduceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RefundProduceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RefundProduceResponse) String() string {
	return tea.Prettify(s)
}

func (s RefundProduceResponse) GoString() string {
	return s.String()
}

func (s *RefundProduceResponse) SetHeaders(v map[string]*string) *RefundProduceResponse {
	s.Headers = v
	return s
}

func (s *RefundProduceResponse) SetStatusCode(v int32) *RefundProduceResponse {
	s.StatusCode = &v
	return s
}

func (s *RefundProduceResponse) SetBody(v *RefundProduceResponseBody) *RefundProduceResponse {
	s.Body = v
	return s
}

type RefuseAdditionalMaterialRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Note  *string `json:"Note,omitempty" xml:"Note,omitempty"`
}

func (s RefuseAdditionalMaterialRequest) String() string {
	return tea.Prettify(s)
}

func (s RefuseAdditionalMaterialRequest) GoString() string {
	return s.String()
}

func (s *RefuseAdditionalMaterialRequest) SetBizId(v string) *RefuseAdditionalMaterialRequest {
	s.BizId = &v
	return s
}

func (s *RefuseAdditionalMaterialRequest) SetNote(v string) *RefuseAdditionalMaterialRequest {
	s.Note = &v
	return s
}

type RefuseAdditionalMaterialResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RefuseAdditionalMaterialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefuseAdditionalMaterialResponseBody) GoString() string {
	return s.String()
}

func (s *RefuseAdditionalMaterialResponseBody) SetErrorCode(v string) *RefuseAdditionalMaterialResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RefuseAdditionalMaterialResponseBody) SetErrorMsg(v string) *RefuseAdditionalMaterialResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *RefuseAdditionalMaterialResponseBody) SetRequestId(v string) *RefuseAdditionalMaterialResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefuseAdditionalMaterialResponseBody) SetSuccess(v bool) *RefuseAdditionalMaterialResponseBody {
	s.Success = &v
	return s
}

type RefuseAdditionalMaterialResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RefuseAdditionalMaterialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RefuseAdditionalMaterialResponse) String() string {
	return tea.Prettify(s)
}

func (s RefuseAdditionalMaterialResponse) GoString() string {
	return s.String()
}

func (s *RefuseAdditionalMaterialResponse) SetHeaders(v map[string]*string) *RefuseAdditionalMaterialResponse {
	s.Headers = v
	return s
}

func (s *RefuseAdditionalMaterialResponse) SetStatusCode(v int32) *RefuseAdditionalMaterialResponse {
	s.StatusCode = &v
	return s
}

func (s *RefuseAdditionalMaterialResponse) SetBody(v *RefuseAdditionalMaterialResponseBody) *RefuseAdditionalMaterialResponse {
	s.Body = v
	return s
}

type RefuseApplicantRequest struct {
	BizId *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Note  *string `json:"Note,omitempty" xml:"Note,omitempty"`
}

func (s RefuseApplicantRequest) String() string {
	return tea.Prettify(s)
}

func (s RefuseApplicantRequest) GoString() string {
	return s.String()
}

func (s *RefuseApplicantRequest) SetBizId(v string) *RefuseApplicantRequest {
	s.BizId = &v
	return s
}

func (s *RefuseApplicantRequest) SetNote(v string) *RefuseApplicantRequest {
	s.Note = &v
	return s
}

type RefuseApplicantResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RefuseApplicantResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefuseApplicantResponseBody) GoString() string {
	return s.String()
}

func (s *RefuseApplicantResponseBody) SetErrorCode(v string) *RefuseApplicantResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RefuseApplicantResponseBody) SetErrorMsg(v string) *RefuseApplicantResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *RefuseApplicantResponseBody) SetRequestId(v string) *RefuseApplicantResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefuseApplicantResponseBody) SetSuccess(v bool) *RefuseApplicantResponseBody {
	s.Success = &v
	return s
}

type RefuseApplicantResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RefuseApplicantResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RefuseApplicantResponse) String() string {
	return tea.Prettify(s)
}

func (s RefuseApplicantResponse) GoString() string {
	return s.String()
}

func (s *RefuseApplicantResponse) SetHeaders(v map[string]*string) *RefuseApplicantResponse {
	s.Headers = v
	return s
}

func (s *RefuseApplicantResponse) SetStatusCode(v int32) *RefuseApplicantResponse {
	s.StatusCode = &v
	return s
}

func (s *RefuseApplicantResponse) SetBody(v *RefuseApplicantResponseBody) *RefuseApplicantResponse {
	s.Body = v
	return s
}

type RejectApplicantRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Note       *string `json:"Note,omitempty" xml:"Note,omitempty"`
}

func (s RejectApplicantRequest) String() string {
	return tea.Prettify(s)
}

func (s RejectApplicantRequest) GoString() string {
	return s.String()
}

func (s *RejectApplicantRequest) SetInstanceId(v string) *RejectApplicantRequest {
	s.InstanceId = &v
	return s
}

func (s *RejectApplicantRequest) SetNote(v string) *RejectApplicantRequest {
	s.Note = &v
	return s
}

type RejectApplicantResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RejectApplicantResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RejectApplicantResponseBody) GoString() string {
	return s.String()
}

func (s *RejectApplicantResponseBody) SetRequestId(v string) *RejectApplicantResponseBody {
	s.RequestId = &v
	return s
}

type RejectApplicantResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RejectApplicantResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RejectApplicantResponse) String() string {
	return tea.Prettify(s)
}

func (s RejectApplicantResponse) GoString() string {
	return s.String()
}

func (s *RejectApplicantResponse) SetHeaders(v map[string]*string) *RejectApplicantResponse {
	s.Headers = v
	return s
}

func (s *RejectApplicantResponse) SetStatusCode(v int32) *RejectApplicantResponse {
	s.StatusCode = &v
	return s
}

func (s *RejectApplicantResponse) SetBody(v *RejectApplicantResponseBody) *RejectApplicantResponse {
	s.Body = v
	return s
}

type SaveClassificationConditionsRequest struct {
	BizId     *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Type      *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SaveClassificationConditionsRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveClassificationConditionsRequest) GoString() string {
	return s.String()
}

func (s *SaveClassificationConditionsRequest) SetBizId(v string) *SaveClassificationConditionsRequest {
	s.BizId = &v
	return s
}

func (s *SaveClassificationConditionsRequest) SetCondition(v string) *SaveClassificationConditionsRequest {
	s.Condition = &v
	return s
}

func (s *SaveClassificationConditionsRequest) SetType(v int32) *SaveClassificationConditionsRequest {
	s.Type = &v
	return s
}

type SaveClassificationConditionsResponseBody struct {
	ErrorMsg    *string                                                `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	InvalidList []*SaveClassificationConditionsResponseBodyInvalidList `json:"InvalidList,omitempty" xml:"InvalidList,omitempty" type:"Repeated"`
	RequestId   *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                                  `json:"Success,omitempty" xml:"Success,omitempty"`
	TagName     *string                                                `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s SaveClassificationConditionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveClassificationConditionsResponseBody) GoString() string {
	return s.String()
}

func (s *SaveClassificationConditionsResponseBody) SetErrorMsg(v string) *SaveClassificationConditionsResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *SaveClassificationConditionsResponseBody) SetInvalidList(v []*SaveClassificationConditionsResponseBodyInvalidList) *SaveClassificationConditionsResponseBody {
	s.InvalidList = v
	return s
}

func (s *SaveClassificationConditionsResponseBody) SetRequestId(v string) *SaveClassificationConditionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveClassificationConditionsResponseBody) SetSuccess(v bool) *SaveClassificationConditionsResponseBody {
	s.Success = &v
	return s
}

func (s *SaveClassificationConditionsResponseBody) SetTagName(v string) *SaveClassificationConditionsResponseBody {
	s.TagName = &v
	return s
}

type SaveClassificationConditionsResponseBodyInvalidList struct {
	ClassificationCode *string `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	ClassificationName *string `json:"ClassificationName,omitempty" xml:"ClassificationName,omitempty"`
	OfficialCode       *string `json:"OfficialCode,omitempty" xml:"OfficialCode,omitempty"`
	ParentCode         *string `json:"ParentCode,omitempty" xml:"ParentCode,omitempty"`
}

func (s SaveClassificationConditionsResponseBodyInvalidList) String() string {
	return tea.Prettify(s)
}

func (s SaveClassificationConditionsResponseBodyInvalidList) GoString() string {
	return s.String()
}

func (s *SaveClassificationConditionsResponseBodyInvalidList) SetClassificationCode(v string) *SaveClassificationConditionsResponseBodyInvalidList {
	s.ClassificationCode = &v
	return s
}

func (s *SaveClassificationConditionsResponseBodyInvalidList) SetClassificationName(v string) *SaveClassificationConditionsResponseBodyInvalidList {
	s.ClassificationName = &v
	return s
}

func (s *SaveClassificationConditionsResponseBodyInvalidList) SetOfficialCode(v string) *SaveClassificationConditionsResponseBodyInvalidList {
	s.OfficialCode = &v
	return s
}

func (s *SaveClassificationConditionsResponseBodyInvalidList) SetParentCode(v string) *SaveClassificationConditionsResponseBodyInvalidList {
	s.ParentCode = &v
	return s
}

type SaveClassificationConditionsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveClassificationConditionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveClassificationConditionsResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveClassificationConditionsResponse) GoString() string {
	return s.String()
}

func (s *SaveClassificationConditionsResponse) SetHeaders(v map[string]*string) *SaveClassificationConditionsResponse {
	s.Headers = v
	return s
}

func (s *SaveClassificationConditionsResponse) SetStatusCode(v int32) *SaveClassificationConditionsResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveClassificationConditionsResponse) SetBody(v *SaveClassificationConditionsResponseBody) *SaveClassificationConditionsResponse {
	s.Body = v
	return s
}

type SaveExtensionAttributeRequest struct {
	AttributeKey   *string `json:"AttributeKey,omitempty" xml:"AttributeKey,omitempty"`
	AttributeValue *string `json:"AttributeValue,omitempty" xml:"AttributeValue,omitempty"`
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s SaveExtensionAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveExtensionAttributeRequest) GoString() string {
	return s.String()
}

func (s *SaveExtensionAttributeRequest) SetAttributeKey(v string) *SaveExtensionAttributeRequest {
	s.AttributeKey = &v
	return s
}

func (s *SaveExtensionAttributeRequest) SetAttributeValue(v string) *SaveExtensionAttributeRequest {
	s.AttributeValue = &v
	return s
}

func (s *SaveExtensionAttributeRequest) SetBizId(v string) *SaveExtensionAttributeRequest {
	s.BizId = &v
	return s
}

type SaveExtensionAttributeResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveExtensionAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveExtensionAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SaveExtensionAttributeResponseBody) SetCode(v string) *SaveExtensionAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *SaveExtensionAttributeResponseBody) SetMessage(v string) *SaveExtensionAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *SaveExtensionAttributeResponseBody) SetRequestId(v string) *SaveExtensionAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveExtensionAttributeResponseBody) SetSuccess(v bool) *SaveExtensionAttributeResponseBody {
	s.Success = &v
	return s
}

type SaveExtensionAttributeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveExtensionAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveExtensionAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveExtensionAttributeResponse) GoString() string {
	return s.String()
}

func (s *SaveExtensionAttributeResponse) SetHeaders(v map[string]*string) *SaveExtensionAttributeResponse {
	s.Headers = v
	return s
}

func (s *SaveExtensionAttributeResponse) SetStatusCode(v int32) *SaveExtensionAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveExtensionAttributeResponse) SetBody(v *SaveExtensionAttributeResponseBody) *SaveExtensionAttributeResponse {
	s.Body = v
	return s
}

type SaveTaskRequest struct {
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	Request *string `json:"Request,omitempty" xml:"Request,omitempty"`
}

func (s SaveTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveTaskRequest) GoString() string {
	return s.String()
}

func (s *SaveTaskRequest) SetBizType(v string) *SaveTaskRequest {
	s.BizType = &v
	return s
}

func (s *SaveTaskRequest) SetRequest(v string) *SaveTaskRequest {
	s.Request = &v
	return s
}

type SaveTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SaveTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveTaskResponseBody) GoString() string {
	return s.String()
}

func (s *SaveTaskResponseBody) SetRequestId(v string) *SaveTaskResponseBody {
	s.RequestId = &v
	return s
}

type SaveTaskResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveTaskResponse) GoString() string {
	return s.String()
}

func (s *SaveTaskResponse) SetHeaders(v map[string]*string) *SaveTaskResponse {
	s.Headers = v
	return s
}

func (s *SaveTaskResponse) SetStatusCode(v int32) *SaveTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveTaskResponse) SetBody(v *SaveTaskResponseBody) *SaveTaskResponse {
	s.Body = v
	return s
}

type SaveTaskForOfficialFileCustomRequest struct {
	EndAcceptTime   *int64 `json:"EndAcceptTime,omitempty" xml:"EndAcceptTime,omitempty"`
	StartAcceptTime *int64 `json:"StartAcceptTime,omitempty" xml:"StartAcceptTime,omitempty"`
}

func (s SaveTaskForOfficialFileCustomRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveTaskForOfficialFileCustomRequest) GoString() string {
	return s.String()
}

func (s *SaveTaskForOfficialFileCustomRequest) SetEndAcceptTime(v int64) *SaveTaskForOfficialFileCustomRequest {
	s.EndAcceptTime = &v
	return s
}

func (s *SaveTaskForOfficialFileCustomRequest) SetStartAcceptTime(v int64) *SaveTaskForOfficialFileCustomRequest {
	s.StartAcceptTime = &v
	return s
}

type SaveTaskForOfficialFileCustomResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveTaskForOfficialFileCustomResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveTaskForOfficialFileCustomResponseBody) GoString() string {
	return s.String()
}

func (s *SaveTaskForOfficialFileCustomResponseBody) SetRequestId(v string) *SaveTaskForOfficialFileCustomResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveTaskForOfficialFileCustomResponseBody) SetSuccess(v bool) *SaveTaskForOfficialFileCustomResponseBody {
	s.Success = &v
	return s
}

type SaveTaskForOfficialFileCustomResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveTaskForOfficialFileCustomResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveTaskForOfficialFileCustomResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveTaskForOfficialFileCustomResponse) GoString() string {
	return s.String()
}

func (s *SaveTaskForOfficialFileCustomResponse) SetHeaders(v map[string]*string) *SaveTaskForOfficialFileCustomResponse {
	s.Headers = v
	return s
}

func (s *SaveTaskForOfficialFileCustomResponse) SetStatusCode(v int32) *SaveTaskForOfficialFileCustomResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveTaskForOfficialFileCustomResponse) SetBody(v *SaveTaskForOfficialFileCustomResponseBody) *SaveTaskForOfficialFileCustomResponse {
	s.Body = v
	return s
}

type SaveTradeMarkReviewMaterialDetailRequest struct {
	AdditionalOssKeyList         map[string]interface{} `json:"AdditionalOssKeyList,omitempty" xml:"AdditionalOssKeyList,omitempty"`
	Address                      *string                `json:"Address,omitempty" xml:"Address,omitempty"`
	ApplicationOssKey            *string                `json:"ApplicationOssKey,omitempty" xml:"ApplicationOssKey,omitempty"`
	BizId                        *string                `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BusinessLicenceOssKey        *string                `json:"BusinessLicenceOssKey,omitempty" xml:"BusinessLicenceOssKey,omitempty"`
	CardNumber                   *string                `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	ChangeName                   *bool                  `json:"ChangeName,omitempty" xml:"ChangeName,omitempty"`
	ContactAddress               *string                `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactEmail                 *string                `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName                  *string                `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber                *string                `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	Country                      *string                `json:"Country,omitempty" xml:"Country,omitempty"`
	EngAddress                   *string                `json:"EngAddress,omitempty" xml:"EngAddress,omitempty"`
	EngName                      *string                `json:"EngName,omitempty" xml:"EngName,omitempty"`
	IdCardOssKey                 *string                `json:"IdCardOssKey,omitempty" xml:"IdCardOssKey,omitempty"`
	LegalNoticeOssKey            *string                `json:"LegalNoticeOssKey,omitempty" xml:"LegalNoticeOssKey,omitempty"`
	LoaOssKey                    *string                `json:"LoaOssKey,omitempty" xml:"LoaOssKey,omitempty"`
	Name                         *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportOssKey               *string                `json:"PassportOssKey,omitempty" xml:"PassportOssKey,omitempty"`
	Province                     *string                `json:"Province,omitempty" xml:"Province,omitempty"`
	Region                       *int32                 `json:"Region,omitempty" xml:"Region,omitempty"`
	ReviewMaterialAdditionalJson *string                `json:"ReviewMaterialAdditionalJson,omitempty" xml:"ReviewMaterialAdditionalJson,omitempty"`
	Separate                     *bool                  `json:"Separate,omitempty" xml:"Separate,omitempty"`
	SubmitOnline                 *bool                  `json:"SubmitOnline,omitempty" xml:"SubmitOnline,omitempty"`
	SubmitType                   *int32                 `json:"SubmitType,omitempty" xml:"SubmitType,omitempty"`
	SupplementFlag               *bool                  `json:"SupplementFlag,omitempty" xml:"SupplementFlag,omitempty"`
	Type                         *int32                 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SaveTradeMarkReviewMaterialDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveTradeMarkReviewMaterialDetailRequest) GoString() string {
	return s.String()
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetAdditionalOssKeyList(v map[string]interface{}) *SaveTradeMarkReviewMaterialDetailRequest {
	s.AdditionalOssKeyList = v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetAddress(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.Address = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetApplicationOssKey(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.ApplicationOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetBizId(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.BizId = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetBusinessLicenceOssKey(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.BusinessLicenceOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetCardNumber(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.CardNumber = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetChangeName(v bool) *SaveTradeMarkReviewMaterialDetailRequest {
	s.ChangeName = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetContactAddress(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.ContactAddress = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetContactEmail(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.ContactEmail = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetContactName(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.ContactName = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetContactNumber(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.ContactNumber = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetCountry(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.Country = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetEngAddress(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.EngAddress = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetEngName(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.EngName = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetIdCardOssKey(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.IdCardOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetLegalNoticeOssKey(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.LegalNoticeOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetLoaOssKey(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.LoaOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetName(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.Name = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetPassportOssKey(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.PassportOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetProvince(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.Province = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetRegion(v int32) *SaveTradeMarkReviewMaterialDetailRequest {
	s.Region = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetReviewMaterialAdditionalJson(v string) *SaveTradeMarkReviewMaterialDetailRequest {
	s.ReviewMaterialAdditionalJson = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetSeparate(v bool) *SaveTradeMarkReviewMaterialDetailRequest {
	s.Separate = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetSubmitOnline(v bool) *SaveTradeMarkReviewMaterialDetailRequest {
	s.SubmitOnline = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetSubmitType(v int32) *SaveTradeMarkReviewMaterialDetailRequest {
	s.SubmitType = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetSupplementFlag(v bool) *SaveTradeMarkReviewMaterialDetailRequest {
	s.SupplementFlag = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailRequest) SetType(v int32) *SaveTradeMarkReviewMaterialDetailRequest {
	s.Type = &v
	return s
}

type SaveTradeMarkReviewMaterialDetailShrinkRequest struct {
	AdditionalOssKeyListShrink   *string `json:"AdditionalOssKeyList,omitempty" xml:"AdditionalOssKeyList,omitempty"`
	Address                      *string `json:"Address,omitempty" xml:"Address,omitempty"`
	ApplicationOssKey            *string `json:"ApplicationOssKey,omitempty" xml:"ApplicationOssKey,omitempty"`
	BizId                        *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BusinessLicenceOssKey        *string `json:"BusinessLicenceOssKey,omitempty" xml:"BusinessLicenceOssKey,omitempty"`
	CardNumber                   *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	ChangeName                   *bool   `json:"ChangeName,omitempty" xml:"ChangeName,omitempty"`
	ContactAddress               *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactEmail                 *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName                  *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber                *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	Country                      *string `json:"Country,omitempty" xml:"Country,omitempty"`
	EngAddress                   *string `json:"EngAddress,omitempty" xml:"EngAddress,omitempty"`
	EngName                      *string `json:"EngName,omitempty" xml:"EngName,omitempty"`
	IdCardOssKey                 *string `json:"IdCardOssKey,omitempty" xml:"IdCardOssKey,omitempty"`
	LegalNoticeOssKey            *string `json:"LegalNoticeOssKey,omitempty" xml:"LegalNoticeOssKey,omitempty"`
	LoaOssKey                    *string `json:"LoaOssKey,omitempty" xml:"LoaOssKey,omitempty"`
	Name                         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportOssKey               *string `json:"PassportOssKey,omitempty" xml:"PassportOssKey,omitempty"`
	Province                     *string `json:"Province,omitempty" xml:"Province,omitempty"`
	Region                       *int32  `json:"Region,omitempty" xml:"Region,omitempty"`
	ReviewMaterialAdditionalJson *string `json:"ReviewMaterialAdditionalJson,omitempty" xml:"ReviewMaterialAdditionalJson,omitempty"`
	Separate                     *bool   `json:"Separate,omitempty" xml:"Separate,omitempty"`
	SubmitOnline                 *bool   `json:"SubmitOnline,omitempty" xml:"SubmitOnline,omitempty"`
	SubmitType                   *int32  `json:"SubmitType,omitempty" xml:"SubmitType,omitempty"`
	SupplementFlag               *bool   `json:"SupplementFlag,omitempty" xml:"SupplementFlag,omitempty"`
	Type                         *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SaveTradeMarkReviewMaterialDetailShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveTradeMarkReviewMaterialDetailShrinkRequest) GoString() string {
	return s.String()
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetAdditionalOssKeyListShrink(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.AdditionalOssKeyListShrink = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetAddress(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.Address = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetApplicationOssKey(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.ApplicationOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetBizId(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.BizId = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetBusinessLicenceOssKey(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.BusinessLicenceOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetCardNumber(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.CardNumber = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetChangeName(v bool) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.ChangeName = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetContactAddress(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.ContactAddress = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetContactEmail(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.ContactEmail = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetContactName(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.ContactName = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetContactNumber(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.ContactNumber = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetCountry(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.Country = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetEngAddress(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.EngAddress = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetEngName(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.EngName = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetIdCardOssKey(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.IdCardOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetLegalNoticeOssKey(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.LegalNoticeOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetLoaOssKey(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.LoaOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetName(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.Name = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetPassportOssKey(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.PassportOssKey = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetProvince(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.Province = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetRegion(v int32) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.Region = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetReviewMaterialAdditionalJson(v string) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.ReviewMaterialAdditionalJson = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetSeparate(v bool) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.Separate = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetSubmitOnline(v bool) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.SubmitOnline = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetSubmitType(v int32) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.SubmitType = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetSupplementFlag(v bool) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.SupplementFlag = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailShrinkRequest) SetType(v int32) *SaveTradeMarkReviewMaterialDetailShrinkRequest {
	s.Type = &v
	return s
}

type SaveTradeMarkReviewMaterialDetailResponseBody struct {
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveTradeMarkReviewMaterialDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveTradeMarkReviewMaterialDetailResponseBody) GoString() string {
	return s.String()
}

func (s *SaveTradeMarkReviewMaterialDetailResponseBody) SetErrorMsg(v string) *SaveTradeMarkReviewMaterialDetailResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailResponseBody) SetRequestId(v string) *SaveTradeMarkReviewMaterialDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailResponseBody) SetSuccess(v bool) *SaveTradeMarkReviewMaterialDetailResponseBody {
	s.Success = &v
	return s
}

type SaveTradeMarkReviewMaterialDetailResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveTradeMarkReviewMaterialDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveTradeMarkReviewMaterialDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveTradeMarkReviewMaterialDetailResponse) GoString() string {
	return s.String()
}

func (s *SaveTradeMarkReviewMaterialDetailResponse) SetHeaders(v map[string]*string) *SaveTradeMarkReviewMaterialDetailResponse {
	s.Headers = v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailResponse) SetStatusCode(v int32) *SaveTradeMarkReviewMaterialDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveTradeMarkReviewMaterialDetailResponse) SetBody(v *SaveTradeMarkReviewMaterialDetailResponseBody) *SaveTradeMarkReviewMaterialDetailResponse {
	s.Body = v
	return s
}

type SbjOperateRequest struct {
	Amount           *string `json:"Amount,omitempty" xml:"Amount,omitempty"`
	ApplyNo          *string `json:"ApplyNo,omitempty" xml:"ApplyNo,omitempty"`
	AuditStatus      *bool   `json:"AuditStatus,omitempty" xml:"AuditStatus,omitempty"`
	BizId            *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	FileDate         *string `json:"FileDate,omitempty" xml:"FileDate,omitempty"`
	FileOssKey       *string `json:"FileOssKey,omitempty" xml:"FileOssKey,omitempty"`
	Message          *string `json:"Message,omitempty" xml:"Message,omitempty"`
	OperateType      *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	OrderNo          *string `json:"OrderNo,omitempty" xml:"OrderNo,omitempty"`
	ReceiptOssKey    *string `json:"ReceiptOssKey,omitempty" xml:"ReceiptOssKey,omitempty"`
	SubmittedSuccess *bool   `json:"SubmittedSuccess,omitempty" xml:"SubmittedSuccess,omitempty"`
}

func (s SbjOperateRequest) String() string {
	return tea.Prettify(s)
}

func (s SbjOperateRequest) GoString() string {
	return s.String()
}

func (s *SbjOperateRequest) SetAmount(v string) *SbjOperateRequest {
	s.Amount = &v
	return s
}

func (s *SbjOperateRequest) SetApplyNo(v string) *SbjOperateRequest {
	s.ApplyNo = &v
	return s
}

func (s *SbjOperateRequest) SetAuditStatus(v bool) *SbjOperateRequest {
	s.AuditStatus = &v
	return s
}

func (s *SbjOperateRequest) SetBizId(v string) *SbjOperateRequest {
	s.BizId = &v
	return s
}

func (s *SbjOperateRequest) SetFileDate(v string) *SbjOperateRequest {
	s.FileDate = &v
	return s
}

func (s *SbjOperateRequest) SetFileOssKey(v string) *SbjOperateRequest {
	s.FileOssKey = &v
	return s
}

func (s *SbjOperateRequest) SetMessage(v string) *SbjOperateRequest {
	s.Message = &v
	return s
}

func (s *SbjOperateRequest) SetOperateType(v string) *SbjOperateRequest {
	s.OperateType = &v
	return s
}

func (s *SbjOperateRequest) SetOrderNo(v string) *SbjOperateRequest {
	s.OrderNo = &v
	return s
}

func (s *SbjOperateRequest) SetReceiptOssKey(v string) *SbjOperateRequest {
	s.ReceiptOssKey = &v
	return s
}

func (s *SbjOperateRequest) SetSubmittedSuccess(v bool) *SbjOperateRequest {
	s.SubmittedSuccess = &v
	return s
}

type SbjOperateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SbjOperateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SbjOperateResponseBody) GoString() string {
	return s.String()
}

func (s *SbjOperateResponseBody) SetRequestId(v string) *SbjOperateResponseBody {
	s.RequestId = &v
	return s
}

func (s *SbjOperateResponseBody) SetSuccess(v bool) *SbjOperateResponseBody {
	s.Success = &v
	return s
}

type SbjOperateResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SbjOperateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SbjOperateResponse) String() string {
	return tea.Prettify(s)
}

func (s SbjOperateResponse) GoString() string {
	return s.String()
}

func (s *SbjOperateResponse) SetHeaders(v map[string]*string) *SbjOperateResponse {
	s.Headers = v
	return s
}

func (s *SbjOperateResponse) SetStatusCode(v int32) *SbjOperateResponse {
	s.StatusCode = &v
	return s
}

func (s *SbjOperateResponse) SetBody(v *SbjOperateResponseBody) *SbjOperateResponse {
	s.Body = v
	return s
}

type SbjOperateNewRequest struct {
	AddSubmitCount     *bool   `json:"AddSubmitCount,omitempty" xml:"AddSubmitCount,omitempty"`
	AllowResubmit      *bool   `json:"AllowResubmit,omitempty" xml:"AllowResubmit,omitempty"`
	Amount             *string `json:"Amount,omitempty" xml:"Amount,omitempty"`
	ApplyNo            *string `json:"ApplyNo,omitempty" xml:"ApplyNo,omitempty"`
	AuditStatus        *bool   `json:"AuditStatus,omitempty" xml:"AuditStatus,omitempty"`
	BizId              *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	ChangeStatus       *bool   `json:"ChangeStatus,omitempty" xml:"ChangeStatus,omitempty"`
	ErrorMsgScreenshot *string `json:"ErrorMsgScreenshot,omitempty" xml:"ErrorMsgScreenshot,omitempty"`
	FileDate           *string `json:"FileDate,omitempty" xml:"FileDate,omitempty"`
	FileOssKey         *string `json:"FileOssKey,omitempty" xml:"FileOssKey,omitempty"`
	Message            *string `json:"Message,omitempty" xml:"Message,omitempty"`
	OperateType        *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	OrderNo            *string `json:"OrderNo,omitempty" xml:"OrderNo,omitempty"`
	ReceiptOssKey      *string `json:"ReceiptOssKey,omitempty" xml:"ReceiptOssKey,omitempty"`
	SubmittedSuccess   *bool   `json:"SubmittedSuccess,omitempty" xml:"SubmittedSuccess,omitempty"`
	SuccessType        *string `json:"SuccessType,omitempty" xml:"SuccessType,omitempty"`
}

func (s SbjOperateNewRequest) String() string {
	return tea.Prettify(s)
}

func (s SbjOperateNewRequest) GoString() string {
	return s.String()
}

func (s *SbjOperateNewRequest) SetAddSubmitCount(v bool) *SbjOperateNewRequest {
	s.AddSubmitCount = &v
	return s
}

func (s *SbjOperateNewRequest) SetAllowResubmit(v bool) *SbjOperateNewRequest {
	s.AllowResubmit = &v
	return s
}

func (s *SbjOperateNewRequest) SetAmount(v string) *SbjOperateNewRequest {
	s.Amount = &v
	return s
}

func (s *SbjOperateNewRequest) SetApplyNo(v string) *SbjOperateNewRequest {
	s.ApplyNo = &v
	return s
}

func (s *SbjOperateNewRequest) SetAuditStatus(v bool) *SbjOperateNewRequest {
	s.AuditStatus = &v
	return s
}

func (s *SbjOperateNewRequest) SetBizId(v string) *SbjOperateNewRequest {
	s.BizId = &v
	return s
}

func (s *SbjOperateNewRequest) SetChangeStatus(v bool) *SbjOperateNewRequest {
	s.ChangeStatus = &v
	return s
}

func (s *SbjOperateNewRequest) SetErrorMsgScreenshot(v string) *SbjOperateNewRequest {
	s.ErrorMsgScreenshot = &v
	return s
}

func (s *SbjOperateNewRequest) SetFileDate(v string) *SbjOperateNewRequest {
	s.FileDate = &v
	return s
}

func (s *SbjOperateNewRequest) SetFileOssKey(v string) *SbjOperateNewRequest {
	s.FileOssKey = &v
	return s
}

func (s *SbjOperateNewRequest) SetMessage(v string) *SbjOperateNewRequest {
	s.Message = &v
	return s
}

func (s *SbjOperateNewRequest) SetOperateType(v string) *SbjOperateNewRequest {
	s.OperateType = &v
	return s
}

func (s *SbjOperateNewRequest) SetOrderNo(v string) *SbjOperateNewRequest {
	s.OrderNo = &v
	return s
}

func (s *SbjOperateNewRequest) SetReceiptOssKey(v string) *SbjOperateNewRequest {
	s.ReceiptOssKey = &v
	return s
}

func (s *SbjOperateNewRequest) SetSubmittedSuccess(v bool) *SbjOperateNewRequest {
	s.SubmittedSuccess = &v
	return s
}

func (s *SbjOperateNewRequest) SetSuccessType(v string) *SbjOperateNewRequest {
	s.SuccessType = &v
	return s
}

type SbjOperateNewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SbjOperateNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SbjOperateNewResponseBody) GoString() string {
	return s.String()
}

func (s *SbjOperateNewResponseBody) SetRequestId(v string) *SbjOperateNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *SbjOperateNewResponseBody) SetSuccess(v bool) *SbjOperateNewResponseBody {
	s.Success = &v
	return s
}

type SbjOperateNewResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SbjOperateNewResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SbjOperateNewResponse) String() string {
	return tea.Prettify(s)
}

func (s SbjOperateNewResponse) GoString() string {
	return s.String()
}

func (s *SbjOperateNewResponse) SetHeaders(v map[string]*string) *SbjOperateNewResponse {
	s.Headers = v
	return s
}

func (s *SbjOperateNewResponse) SetStatusCode(v int32) *SbjOperateNewResponse {
	s.StatusCode = &v
	return s
}

func (s *SbjOperateNewResponse) SetBody(v *SbjOperateNewResponseBody) *SbjOperateNewResponse {
	s.Body = v
	return s
}

type SbrainServiceExecuteRequest struct {
	ExecuteParams map[string]interface{} `json:"ExecuteParams,omitempty" xml:"ExecuteParams,omitempty"`
	ProductCode   *string                `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ReferenceNo   *string                `json:"ReferenceNo,omitempty" xml:"ReferenceNo,omitempty"`
	ReferenceType *string                `json:"ReferenceType,omitempty" xml:"ReferenceType,omitempty"`
	SceneCode     *string                `json:"SceneCode,omitempty" xml:"SceneCode,omitempty"`
	SchemeId      *int64                 `json:"SchemeId,omitempty" xml:"SchemeId,omitempty"`
	ServicePlace  *string                `json:"ServicePlace,omitempty" xml:"ServicePlace,omitempty"`
	Source        *string                `json:"Source,omitempty" xml:"Source,omitempty"`
	Target        *string                `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s SbrainServiceExecuteRequest) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceExecuteRequest) GoString() string {
	return s.String()
}

func (s *SbrainServiceExecuteRequest) SetExecuteParams(v map[string]interface{}) *SbrainServiceExecuteRequest {
	s.ExecuteParams = v
	return s
}

func (s *SbrainServiceExecuteRequest) SetProductCode(v string) *SbrainServiceExecuteRequest {
	s.ProductCode = &v
	return s
}

func (s *SbrainServiceExecuteRequest) SetReferenceNo(v string) *SbrainServiceExecuteRequest {
	s.ReferenceNo = &v
	return s
}

func (s *SbrainServiceExecuteRequest) SetReferenceType(v string) *SbrainServiceExecuteRequest {
	s.ReferenceType = &v
	return s
}

func (s *SbrainServiceExecuteRequest) SetSceneCode(v string) *SbrainServiceExecuteRequest {
	s.SceneCode = &v
	return s
}

func (s *SbrainServiceExecuteRequest) SetSchemeId(v int64) *SbrainServiceExecuteRequest {
	s.SchemeId = &v
	return s
}

func (s *SbrainServiceExecuteRequest) SetServicePlace(v string) *SbrainServiceExecuteRequest {
	s.ServicePlace = &v
	return s
}

func (s *SbrainServiceExecuteRequest) SetSource(v string) *SbrainServiceExecuteRequest {
	s.Source = &v
	return s
}

func (s *SbrainServiceExecuteRequest) SetTarget(v string) *SbrainServiceExecuteRequest {
	s.Target = &v
	return s
}

type SbrainServiceExecuteShrinkRequest struct {
	ExecuteParamsShrink *string `json:"ExecuteParams,omitempty" xml:"ExecuteParams,omitempty"`
	ProductCode         *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ReferenceNo         *string `json:"ReferenceNo,omitempty" xml:"ReferenceNo,omitempty"`
	ReferenceType       *string `json:"ReferenceType,omitempty" xml:"ReferenceType,omitempty"`
	SceneCode           *string `json:"SceneCode,omitempty" xml:"SceneCode,omitempty"`
	SchemeId            *int64  `json:"SchemeId,omitempty" xml:"SchemeId,omitempty"`
	ServicePlace        *string `json:"ServicePlace,omitempty" xml:"ServicePlace,omitempty"`
	Source              *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Target              *string `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s SbrainServiceExecuteShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceExecuteShrinkRequest) GoString() string {
	return s.String()
}

func (s *SbrainServiceExecuteShrinkRequest) SetExecuteParamsShrink(v string) *SbrainServiceExecuteShrinkRequest {
	s.ExecuteParamsShrink = &v
	return s
}

func (s *SbrainServiceExecuteShrinkRequest) SetProductCode(v string) *SbrainServiceExecuteShrinkRequest {
	s.ProductCode = &v
	return s
}

func (s *SbrainServiceExecuteShrinkRequest) SetReferenceNo(v string) *SbrainServiceExecuteShrinkRequest {
	s.ReferenceNo = &v
	return s
}

func (s *SbrainServiceExecuteShrinkRequest) SetReferenceType(v string) *SbrainServiceExecuteShrinkRequest {
	s.ReferenceType = &v
	return s
}

func (s *SbrainServiceExecuteShrinkRequest) SetSceneCode(v string) *SbrainServiceExecuteShrinkRequest {
	s.SceneCode = &v
	return s
}

func (s *SbrainServiceExecuteShrinkRequest) SetSchemeId(v int64) *SbrainServiceExecuteShrinkRequest {
	s.SchemeId = &v
	return s
}

func (s *SbrainServiceExecuteShrinkRequest) SetServicePlace(v string) *SbrainServiceExecuteShrinkRequest {
	s.ServicePlace = &v
	return s
}

func (s *SbrainServiceExecuteShrinkRequest) SetSource(v string) *SbrainServiceExecuteShrinkRequest {
	s.Source = &v
	return s
}

func (s *SbrainServiceExecuteShrinkRequest) SetTarget(v string) *SbrainServiceExecuteShrinkRequest {
	s.Target = &v
	return s
}

type SbrainServiceExecuteResponseBody struct {
	Data         interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode    *string     `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	RequestId    *string     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SbrainServiceExecuteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceExecuteResponseBody) GoString() string {
	return s.String()
}

func (s *SbrainServiceExecuteResponseBody) SetData(v interface{}) *SbrainServiceExecuteResponseBody {
	s.Data = v
	return s
}

func (s *SbrainServiceExecuteResponseBody) SetErrorCode(v string) *SbrainServiceExecuteResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SbrainServiceExecuteResponseBody) SetErrorMessage(v string) *SbrainServiceExecuteResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SbrainServiceExecuteResponseBody) SetRequestId(v string) *SbrainServiceExecuteResponseBody {
	s.RequestId = &v
	return s
}

func (s *SbrainServiceExecuteResponseBody) SetSuccess(v bool) *SbrainServiceExecuteResponseBody {
	s.Success = &v
	return s
}

type SbrainServiceExecuteResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SbrainServiceExecuteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SbrainServiceExecuteResponse) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceExecuteResponse) GoString() string {
	return s.String()
}

func (s *SbrainServiceExecuteResponse) SetHeaders(v map[string]*string) *SbrainServiceExecuteResponse {
	s.Headers = v
	return s
}

func (s *SbrainServiceExecuteResponse) SetStatusCode(v int32) *SbrainServiceExecuteResponse {
	s.StatusCode = &v
	return s
}

func (s *SbrainServiceExecuteResponse) SetBody(v *SbrainServiceExecuteResponseBody) *SbrainServiceExecuteResponse {
	s.Body = v
	return s
}

type SbrainServiceHasRunningTaskBatchQueryRequest struct {
	ProductCode   *string   `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ReferenceNos  []*string `json:"ReferenceNos,omitempty" xml:"ReferenceNos,omitempty" type:"Repeated"`
	ReferenceType *string   `json:"ReferenceType,omitempty" xml:"ReferenceType,omitempty"`
	Source        *string   `json:"Source,omitempty" xml:"Source,omitempty"`
	TaskType      *string   `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s SbrainServiceHasRunningTaskBatchQueryRequest) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceHasRunningTaskBatchQueryRequest) GoString() string {
	return s.String()
}

func (s *SbrainServiceHasRunningTaskBatchQueryRequest) SetProductCode(v string) *SbrainServiceHasRunningTaskBatchQueryRequest {
	s.ProductCode = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryRequest) SetReferenceNos(v []*string) *SbrainServiceHasRunningTaskBatchQueryRequest {
	s.ReferenceNos = v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryRequest) SetReferenceType(v string) *SbrainServiceHasRunningTaskBatchQueryRequest {
	s.ReferenceType = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryRequest) SetSource(v string) *SbrainServiceHasRunningTaskBatchQueryRequest {
	s.Source = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryRequest) SetTaskType(v string) *SbrainServiceHasRunningTaskBatchQueryRequest {
	s.TaskType = &v
	return s
}

type SbrainServiceHasRunningTaskBatchQueryShrinkRequest struct {
	ProductCode        *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ReferenceNosShrink *string `json:"ReferenceNos,omitempty" xml:"ReferenceNos,omitempty"`
	ReferenceType      *string `json:"ReferenceType,omitempty" xml:"ReferenceType,omitempty"`
	Source             *string `json:"Source,omitempty" xml:"Source,omitempty"`
	TaskType           *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s SbrainServiceHasRunningTaskBatchQueryShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceHasRunningTaskBatchQueryShrinkRequest) GoString() string {
	return s.String()
}

func (s *SbrainServiceHasRunningTaskBatchQueryShrinkRequest) SetProductCode(v string) *SbrainServiceHasRunningTaskBatchQueryShrinkRequest {
	s.ProductCode = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryShrinkRequest) SetReferenceNosShrink(v string) *SbrainServiceHasRunningTaskBatchQueryShrinkRequest {
	s.ReferenceNosShrink = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryShrinkRequest) SetReferenceType(v string) *SbrainServiceHasRunningTaskBatchQueryShrinkRequest {
	s.ReferenceType = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryShrinkRequest) SetSource(v string) *SbrainServiceHasRunningTaskBatchQueryShrinkRequest {
	s.Source = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryShrinkRequest) SetTaskType(v string) *SbrainServiceHasRunningTaskBatchQueryShrinkRequest {
	s.TaskType = &v
	return s
}

type SbrainServiceHasRunningTaskBatchQueryResponseBody struct {
	Data         interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	ErrorCode    *string     `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	RequestId    *string     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SbrainServiceHasRunningTaskBatchQueryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceHasRunningTaskBatchQueryResponseBody) GoString() string {
	return s.String()
}

func (s *SbrainServiceHasRunningTaskBatchQueryResponseBody) SetData(v interface{}) *SbrainServiceHasRunningTaskBatchQueryResponseBody {
	s.Data = v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryResponseBody) SetErrorCode(v string) *SbrainServiceHasRunningTaskBatchQueryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryResponseBody) SetErrorMessage(v string) *SbrainServiceHasRunningTaskBatchQueryResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryResponseBody) SetRequestId(v string) *SbrainServiceHasRunningTaskBatchQueryResponseBody {
	s.RequestId = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryResponseBody) SetSuccess(v bool) *SbrainServiceHasRunningTaskBatchQueryResponseBody {
	s.Success = &v
	return s
}

type SbrainServiceHasRunningTaskBatchQueryResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SbrainServiceHasRunningTaskBatchQueryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SbrainServiceHasRunningTaskBatchQueryResponse) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceHasRunningTaskBatchQueryResponse) GoString() string {
	return s.String()
}

func (s *SbrainServiceHasRunningTaskBatchQueryResponse) SetHeaders(v map[string]*string) *SbrainServiceHasRunningTaskBatchQueryResponse {
	s.Headers = v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryResponse) SetStatusCode(v int32) *SbrainServiceHasRunningTaskBatchQueryResponse {
	s.StatusCode = &v
	return s
}

func (s *SbrainServiceHasRunningTaskBatchQueryResponse) SetBody(v *SbrainServiceHasRunningTaskBatchQueryResponseBody) *SbrainServiceHasRunningTaskBatchQueryResponse {
	s.Body = v
	return s
}

type SbrainServiceSchemeMatchRequest struct {
	MatchParams   map[string]interface{} `json:"MatchParams,omitempty" xml:"MatchParams,omitempty"`
	ProductCode   *string                `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ReferenceNo   *string                `json:"ReferenceNo,omitempty" xml:"ReferenceNo,omitempty"`
	ReferenceType *string                `json:"ReferenceType,omitempty" xml:"ReferenceType,omitempty"`
	SceneCode     *string                `json:"SceneCode,omitempty" xml:"SceneCode,omitempty"`
	Source        *string                `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s SbrainServiceSchemeMatchRequest) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceSchemeMatchRequest) GoString() string {
	return s.String()
}

func (s *SbrainServiceSchemeMatchRequest) SetMatchParams(v map[string]interface{}) *SbrainServiceSchemeMatchRequest {
	s.MatchParams = v
	return s
}

func (s *SbrainServiceSchemeMatchRequest) SetProductCode(v string) *SbrainServiceSchemeMatchRequest {
	s.ProductCode = &v
	return s
}

func (s *SbrainServiceSchemeMatchRequest) SetReferenceNo(v string) *SbrainServiceSchemeMatchRequest {
	s.ReferenceNo = &v
	return s
}

func (s *SbrainServiceSchemeMatchRequest) SetReferenceType(v string) *SbrainServiceSchemeMatchRequest {
	s.ReferenceType = &v
	return s
}

func (s *SbrainServiceSchemeMatchRequest) SetSceneCode(v string) *SbrainServiceSchemeMatchRequest {
	s.SceneCode = &v
	return s
}

func (s *SbrainServiceSchemeMatchRequest) SetSource(v string) *SbrainServiceSchemeMatchRequest {
	s.Source = &v
	return s
}

type SbrainServiceSchemeMatchShrinkRequest struct {
	MatchParamsShrink *string `json:"MatchParams,omitempty" xml:"MatchParams,omitempty"`
	ProductCode       *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ReferenceNo       *string `json:"ReferenceNo,omitempty" xml:"ReferenceNo,omitempty"`
	ReferenceType     *string `json:"ReferenceType,omitempty" xml:"ReferenceType,omitempty"`
	SceneCode         *string `json:"SceneCode,omitempty" xml:"SceneCode,omitempty"`
	Source            *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s SbrainServiceSchemeMatchShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceSchemeMatchShrinkRequest) GoString() string {
	return s.String()
}

func (s *SbrainServiceSchemeMatchShrinkRequest) SetMatchParamsShrink(v string) *SbrainServiceSchemeMatchShrinkRequest {
	s.MatchParamsShrink = &v
	return s
}

func (s *SbrainServiceSchemeMatchShrinkRequest) SetProductCode(v string) *SbrainServiceSchemeMatchShrinkRequest {
	s.ProductCode = &v
	return s
}

func (s *SbrainServiceSchemeMatchShrinkRequest) SetReferenceNo(v string) *SbrainServiceSchemeMatchShrinkRequest {
	s.ReferenceNo = &v
	return s
}

func (s *SbrainServiceSchemeMatchShrinkRequest) SetReferenceType(v string) *SbrainServiceSchemeMatchShrinkRequest {
	s.ReferenceType = &v
	return s
}

func (s *SbrainServiceSchemeMatchShrinkRequest) SetSceneCode(v string) *SbrainServiceSchemeMatchShrinkRequest {
	s.SceneCode = &v
	return s
}

func (s *SbrainServiceSchemeMatchShrinkRequest) SetSource(v string) *SbrainServiceSchemeMatchShrinkRequest {
	s.Source = &v
	return s
}

type SbrainServiceSchemeMatchResponseBody struct {
	Data         *SbrainServiceSchemeMatchResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	ErrorCode    *string                                   `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success      *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SbrainServiceSchemeMatchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceSchemeMatchResponseBody) GoString() string {
	return s.String()
}

func (s *SbrainServiceSchemeMatchResponseBody) SetData(v *SbrainServiceSchemeMatchResponseBodyData) *SbrainServiceSchemeMatchResponseBody {
	s.Data = v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBody) SetErrorCode(v string) *SbrainServiceSchemeMatchResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBody) SetErrorMessage(v string) *SbrainServiceSchemeMatchResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBody) SetRequestId(v string) *SbrainServiceSchemeMatchResponseBody {
	s.RequestId = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBody) SetSuccess(v bool) *SbrainServiceSchemeMatchResponseBody {
	s.Success = &v
	return s
}

type SbrainServiceSchemeMatchResponseBodyData struct {
	SceneCode     *string                                                `json:"SceneCode,omitempty" xml:"SceneCode,omitempty"`
	SchemeContent *SbrainServiceSchemeMatchResponseBodyDataSchemeContent `json:"SchemeContent,omitempty" xml:"SchemeContent,omitempty" type:"Struct"`
	SchemeId      *int64                                                 `json:"SchemeId,omitempty" xml:"SchemeId,omitempty"`
}

func (s SbrainServiceSchemeMatchResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceSchemeMatchResponseBodyData) GoString() string {
	return s.String()
}

func (s *SbrainServiceSchemeMatchResponseBodyData) SetSceneCode(v string) *SbrainServiceSchemeMatchResponseBodyData {
	s.SceneCode = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBodyData) SetSchemeContent(v *SbrainServiceSchemeMatchResponseBodyDataSchemeContent) *SbrainServiceSchemeMatchResponseBodyData {
	s.SchemeContent = v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBodyData) SetSchemeId(v int64) *SbrainServiceSchemeMatchResponseBodyData {
	s.SchemeId = &v
	return s
}

type SbrainServiceSchemeMatchResponseBodyDataSchemeContent struct {
	ContentIndex   *int32                                                                 `json:"ContentIndex,omitempty" xml:"ContentIndex,omitempty"`
	ContentModules []*SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules `json:"ContentModules,omitempty" xml:"ContentModules,omitempty" type:"Repeated"`
	Display        *string                                                                `json:"Display,omitempty" xml:"Display,omitempty"`
}

func (s SbrainServiceSchemeMatchResponseBodyDataSchemeContent) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceSchemeMatchResponseBodyDataSchemeContent) GoString() string {
	return s.String()
}

func (s *SbrainServiceSchemeMatchResponseBodyDataSchemeContent) SetContentIndex(v int32) *SbrainServiceSchemeMatchResponseBodyDataSchemeContent {
	s.ContentIndex = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBodyDataSchemeContent) SetContentModules(v []*SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules) *SbrainServiceSchemeMatchResponseBodyDataSchemeContent {
	s.ContentModules = v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBodyDataSchemeContent) SetDisplay(v string) *SbrainServiceSchemeMatchResponseBodyDataSchemeContent {
	s.Display = &v
	return s
}

type SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules struct {
	Tag                  *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	Action               *string `json:"action,omitempty" xml:"action,omitempty"`
	ModuleData           *string `json:"moduleData,omitempty" xml:"moduleData,omitempty"`
	ModuleDataSource     *string `json:"moduleDataSource,omitempty" xml:"moduleDataSource,omitempty"`
	ModuleDataSourceType *string `json:"moduleDataSourceType,omitempty" xml:"moduleDataSourceType,omitempty"`
	Name                 *string `json:"name,omitempty" xml:"name,omitempty"`
	Target               *string `json:"target,omitempty" xml:"target,omitempty"`
}

func (s SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules) GoString() string {
	return s.String()
}

func (s *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules) SetTag(v string) *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules {
	s.Tag = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules) SetAction(v string) *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules {
	s.Action = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules) SetModuleData(v string) *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules {
	s.ModuleData = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules) SetModuleDataSource(v string) *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules {
	s.ModuleDataSource = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules) SetModuleDataSourceType(v string) *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules {
	s.ModuleDataSourceType = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules) SetName(v string) *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules {
	s.Name = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules) SetTarget(v string) *SbrainServiceSchemeMatchResponseBodyDataSchemeContentContentModules {
	s.Target = &v
	return s
}

type SbrainServiceSchemeMatchResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SbrainServiceSchemeMatchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SbrainServiceSchemeMatchResponse) String() string {
	return tea.Prettify(s)
}

func (s SbrainServiceSchemeMatchResponse) GoString() string {
	return s.String()
}

func (s *SbrainServiceSchemeMatchResponse) SetHeaders(v map[string]*string) *SbrainServiceSchemeMatchResponse {
	s.Headers = v
	return s
}

func (s *SbrainServiceSchemeMatchResponse) SetStatusCode(v int32) *SbrainServiceSchemeMatchResponse {
	s.StatusCode = &v
	return s
}

func (s *SbrainServiceSchemeMatchResponse) SetBody(v *SbrainServiceSchemeMatchResponseBody) *SbrainServiceSchemeMatchResponse {
	s.Body = v
	return s
}

type SearchTmOnsalesRequest struct {
	Classification  *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	Keyword         *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	OrderPriceLeft  *int64  `json:"OrderPriceLeft,omitempty" xml:"OrderPriceLeft,omitempty"`
	OrderPriceRight *int64  `json:"OrderPriceRight,omitempty" xml:"OrderPriceRight,omitempty"`
	PageNum         *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductCode     *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	QueryAll        *bool   `json:"QueryAll,omitempty" xml:"QueryAll,omitempty"`
	RegLeft         *int32  `json:"RegLeft,omitempty" xml:"RegLeft,omitempty"`
	RegRight        *int32  `json:"RegRight,omitempty" xml:"RegRight,omitempty"`
	RegisterNumber  *string `json:"RegisterNumber,omitempty" xml:"RegisterNumber,omitempty"`
	SortName        *string `json:"SortName,omitempty" xml:"SortName,omitempty"`
	SortOrder       *string `json:"SortOrder,omitempty" xml:"SortOrder,omitempty"`
	Tag             *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TmName          *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TopSearch       *string `json:"TopSearch,omitempty" xml:"TopSearch,omitempty"`
}

func (s SearchTmOnsalesRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchTmOnsalesRequest) GoString() string {
	return s.String()
}

func (s *SearchTmOnsalesRequest) SetClassification(v string) *SearchTmOnsalesRequest {
	s.Classification = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetKeyword(v string) *SearchTmOnsalesRequest {
	s.Keyword = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetOrderPriceLeft(v int64) *SearchTmOnsalesRequest {
	s.OrderPriceLeft = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetOrderPriceRight(v int64) *SearchTmOnsalesRequest {
	s.OrderPriceRight = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetPageNum(v int32) *SearchTmOnsalesRequest {
	s.PageNum = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetPageSize(v int32) *SearchTmOnsalesRequest {
	s.PageSize = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetProductCode(v string) *SearchTmOnsalesRequest {
	s.ProductCode = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetQueryAll(v bool) *SearchTmOnsalesRequest {
	s.QueryAll = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetRegLeft(v int32) *SearchTmOnsalesRequest {
	s.RegLeft = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetRegRight(v int32) *SearchTmOnsalesRequest {
	s.RegRight = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetRegisterNumber(v string) *SearchTmOnsalesRequest {
	s.RegisterNumber = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetSortName(v string) *SearchTmOnsalesRequest {
	s.SortName = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetSortOrder(v string) *SearchTmOnsalesRequest {
	s.SortOrder = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetTag(v string) *SearchTmOnsalesRequest {
	s.Tag = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetTmName(v string) *SearchTmOnsalesRequest {
	s.TmName = &v
	return s
}

func (s *SearchTmOnsalesRequest) SetTopSearch(v string) *SearchTmOnsalesRequest {
	s.TopSearch = &v
	return s
}

type SearchTmOnsalesResponseBody struct {
	PageNumber      *int32                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId       *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount      *int32                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TotalPageNumber *int32                                   `json:"TotalPageNumber,omitempty" xml:"TotalPageNumber,omitempty"`
	Trademarks      []*SearchTmOnsalesResponseBodyTrademarks `json:"Trademarks,omitempty" xml:"Trademarks,omitempty" type:"Repeated"`
}

func (s SearchTmOnsalesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchTmOnsalesResponseBody) GoString() string {
	return s.String()
}

func (s *SearchTmOnsalesResponseBody) SetPageNumber(v int32) *SearchTmOnsalesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchTmOnsalesResponseBody) SetPageSize(v int32) *SearchTmOnsalesResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchTmOnsalesResponseBody) SetRequestId(v string) *SearchTmOnsalesResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchTmOnsalesResponseBody) SetTotalCount(v int32) *SearchTmOnsalesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *SearchTmOnsalesResponseBody) SetTotalPageNumber(v int32) *SearchTmOnsalesResponseBody {
	s.TotalPageNumber = &v
	return s
}

func (s *SearchTmOnsalesResponseBody) SetTrademarks(v []*SearchTmOnsalesResponseBodyTrademarks) *SearchTmOnsalesResponseBody {
	s.Trademarks = v
	return s
}

type SearchTmOnsalesResponseBodyTrademarks struct {
	Classification     *string `json:"Classification,omitempty" xml:"Classification,omitempty"`
	Icon               *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	OrderPrice         *string `json:"OrderPrice,omitempty" xml:"OrderPrice,omitempty"`
	PartnerCode        *string `json:"PartnerCode,omitempty" xml:"PartnerCode,omitempty"`
	ProductCode        *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductDesc        *string `json:"ProductDesc,omitempty" xml:"ProductDesc,omitempty"`
	RegistrationNumber *string `json:"RegistrationNumber,omitempty" xml:"RegistrationNumber,omitempty"`
	Status             *int64  `json:"Status,omitempty" xml:"Status,omitempty"`
	TrademarkName      *string `json:"TrademarkName,omitempty" xml:"TrademarkName,omitempty"`
	Uid                *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s SearchTmOnsalesResponseBodyTrademarks) String() string {
	return tea.Prettify(s)
}

func (s SearchTmOnsalesResponseBodyTrademarks) GoString() string {
	return s.String()
}

func (s *SearchTmOnsalesResponseBodyTrademarks) SetClassification(v string) *SearchTmOnsalesResponseBodyTrademarks {
	s.Classification = &v
	return s
}

func (s *SearchTmOnsalesResponseBodyTrademarks) SetIcon(v string) *SearchTmOnsalesResponseBodyTrademarks {
	s.Icon = &v
	return s
}

func (s *SearchTmOnsalesResponseBodyTrademarks) SetOrderPrice(v string) *SearchTmOnsalesResponseBodyTrademarks {
	s.OrderPrice = &v
	return s
}

func (s *SearchTmOnsalesResponseBodyTrademarks) SetPartnerCode(v string) *SearchTmOnsalesResponseBodyTrademarks {
	s.PartnerCode = &v
	return s
}

func (s *SearchTmOnsalesResponseBodyTrademarks) SetProductCode(v string) *SearchTmOnsalesResponseBodyTrademarks {
	s.ProductCode = &v
	return s
}

func (s *SearchTmOnsalesResponseBodyTrademarks) SetProductDesc(v string) *SearchTmOnsalesResponseBodyTrademarks {
	s.ProductDesc = &v
	return s
}

func (s *SearchTmOnsalesResponseBodyTrademarks) SetRegistrationNumber(v string) *SearchTmOnsalesResponseBodyTrademarks {
	s.RegistrationNumber = &v
	return s
}

func (s *SearchTmOnsalesResponseBodyTrademarks) SetStatus(v int64) *SearchTmOnsalesResponseBodyTrademarks {
	s.Status = &v
	return s
}

func (s *SearchTmOnsalesResponseBodyTrademarks) SetTrademarkName(v string) *SearchTmOnsalesResponseBodyTrademarks {
	s.TrademarkName = &v
	return s
}

func (s *SearchTmOnsalesResponseBodyTrademarks) SetUid(v string) *SearchTmOnsalesResponseBodyTrademarks {
	s.Uid = &v
	return s
}

type SearchTmOnsalesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SearchTmOnsalesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchTmOnsalesResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchTmOnsalesResponse) GoString() string {
	return s.String()
}

func (s *SearchTmOnsalesResponse) SetHeaders(v map[string]*string) *SearchTmOnsalesResponse {
	s.Headers = v
	return s
}

func (s *SearchTmOnsalesResponse) SetStatusCode(v int32) *SearchTmOnsalesResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchTmOnsalesResponse) SetBody(v *SearchTmOnsalesResponseBody) *SearchTmOnsalesResponse {
	s.Body = v
	return s
}

type StartNotaryRequest struct {
	NotaryOrderId *int64 `json:"NotaryOrderId,omitempty" xml:"NotaryOrderId,omitempty"`
}

func (s StartNotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s StartNotaryRequest) GoString() string {
	return s.String()
}

func (s *StartNotaryRequest) SetNotaryOrderId(v int64) *StartNotaryRequest {
	s.NotaryOrderId = &v
	return s
}

type StartNotaryResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	NotaryUrl *string `json:"NotaryUrl,omitempty" xml:"NotaryUrl,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartNotaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartNotaryResponseBody) GoString() string {
	return s.String()
}

func (s *StartNotaryResponseBody) SetErrorCode(v string) *StartNotaryResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *StartNotaryResponseBody) SetErrorMsg(v string) *StartNotaryResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *StartNotaryResponseBody) SetNotaryUrl(v string) *StartNotaryResponseBody {
	s.NotaryUrl = &v
	return s
}

func (s *StartNotaryResponseBody) SetRequestId(v string) *StartNotaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartNotaryResponseBody) SetSuccess(v bool) *StartNotaryResponseBody {
	s.Success = &v
	return s
}

type StartNotaryResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartNotaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartNotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s StartNotaryResponse) GoString() string {
	return s.String()
}

func (s *StartNotaryResponse) SetHeaders(v map[string]*string) *StartNotaryResponse {
	s.Headers = v
	return s
}

func (s *StartNotaryResponse) SetStatusCode(v int32) *StartNotaryResponse {
	s.StatusCode = &v
	return s
}

func (s *StartNotaryResponse) SetBody(v *StartNotaryResponseBody) *StartNotaryResponse {
	s.Body = v
	return s
}

type StoreMaterialTemporarilyRequest struct {
	Address               *string `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceOssKey *string `json:"BusinessLicenceOssKey,omitempty" xml:"BusinessLicenceOssKey,omitempty"`
	CardNumber            *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	City                  *string `json:"City,omitempty" xml:"City,omitempty"`
	ContactAddress        *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactCity           *string `json:"ContactCity,omitempty" xml:"ContactCity,omitempty"`
	ContactCounty         *string `json:"ContactCounty,omitempty" xml:"ContactCounty,omitempty"`
	ContactDistrict       *string `json:"ContactDistrict,omitempty" xml:"ContactDistrict,omitempty"`
	ContactEmail          *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName           *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber         *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactProvince       *string `json:"ContactProvince,omitempty" xml:"ContactProvince,omitempty"`
	ContactZipcode        *string `json:"ContactZipcode,omitempty" xml:"ContactZipcode,omitempty"`
	Country               *string `json:"Country,omitempty" xml:"Country,omitempty"`
	EAddress              *string `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName                 *string `json:"EName,omitempty" xml:"EName,omitempty"`
	IdCardName            *string `json:"IdCardName,omitempty" xml:"IdCardName,omitempty"`
	IdCardNumber          *string `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardOssKey          *string `json:"IdCardOssKey,omitempty" xml:"IdCardOssKey,omitempty"`
	LegalNoticeOssKey     *string `json:"LegalNoticeOssKey,omitempty" xml:"LegalNoticeOssKey,omitempty"`
	LoaOssKey             *string `json:"LoaOssKey,omitempty" xml:"LoaOssKey,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportOssKey        *string `json:"PassportOssKey,omitempty" xml:"PassportOssKey,omitempty"`
	PersonalType          *int64  `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	PrincipalName         *int32  `json:"PrincipalName,omitempty" xml:"PrincipalName,omitempty"`
	Province              *string `json:"Province,omitempty" xml:"Province,omitempty"`
	Region                *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Town                  *string `json:"Town,omitempty" xml:"Town,omitempty"`
	Type                  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s StoreMaterialTemporarilyRequest) String() string {
	return tea.Prettify(s)
}

func (s StoreMaterialTemporarilyRequest) GoString() string {
	return s.String()
}

func (s *StoreMaterialTemporarilyRequest) SetAddress(v string) *StoreMaterialTemporarilyRequest {
	s.Address = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetBusinessLicenceOssKey(v string) *StoreMaterialTemporarilyRequest {
	s.BusinessLicenceOssKey = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetCardNumber(v string) *StoreMaterialTemporarilyRequest {
	s.CardNumber = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetCity(v string) *StoreMaterialTemporarilyRequest {
	s.City = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetContactAddress(v string) *StoreMaterialTemporarilyRequest {
	s.ContactAddress = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetContactCity(v string) *StoreMaterialTemporarilyRequest {
	s.ContactCity = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetContactCounty(v string) *StoreMaterialTemporarilyRequest {
	s.ContactCounty = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetContactDistrict(v string) *StoreMaterialTemporarilyRequest {
	s.ContactDistrict = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetContactEmail(v string) *StoreMaterialTemporarilyRequest {
	s.ContactEmail = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetContactName(v string) *StoreMaterialTemporarilyRequest {
	s.ContactName = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetContactNumber(v string) *StoreMaterialTemporarilyRequest {
	s.ContactNumber = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetContactProvince(v string) *StoreMaterialTemporarilyRequest {
	s.ContactProvince = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetContactZipcode(v string) *StoreMaterialTemporarilyRequest {
	s.ContactZipcode = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetCountry(v string) *StoreMaterialTemporarilyRequest {
	s.Country = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetEAddress(v string) *StoreMaterialTemporarilyRequest {
	s.EAddress = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetEName(v string) *StoreMaterialTemporarilyRequest {
	s.EName = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetIdCardName(v string) *StoreMaterialTemporarilyRequest {
	s.IdCardName = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetIdCardNumber(v string) *StoreMaterialTemporarilyRequest {
	s.IdCardNumber = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetIdCardOssKey(v string) *StoreMaterialTemporarilyRequest {
	s.IdCardOssKey = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetLegalNoticeOssKey(v string) *StoreMaterialTemporarilyRequest {
	s.LegalNoticeOssKey = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetLoaOssKey(v string) *StoreMaterialTemporarilyRequest {
	s.LoaOssKey = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetName(v string) *StoreMaterialTemporarilyRequest {
	s.Name = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetPassportOssKey(v string) *StoreMaterialTemporarilyRequest {
	s.PassportOssKey = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetPersonalType(v int64) *StoreMaterialTemporarilyRequest {
	s.PersonalType = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetPrincipalName(v int32) *StoreMaterialTemporarilyRequest {
	s.PrincipalName = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetProvince(v string) *StoreMaterialTemporarilyRequest {
	s.Province = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetRegion(v string) *StoreMaterialTemporarilyRequest {
	s.Region = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetTown(v string) *StoreMaterialTemporarilyRequest {
	s.Town = &v
	return s
}

func (s *StoreMaterialTemporarilyRequest) SetType(v string) *StoreMaterialTemporarilyRequest {
	s.Type = &v
	return s
}

type StoreMaterialTemporarilyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StoreMaterialTemporarilyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StoreMaterialTemporarilyResponseBody) GoString() string {
	return s.String()
}

func (s *StoreMaterialTemporarilyResponseBody) SetRequestId(v string) *StoreMaterialTemporarilyResponseBody {
	s.RequestId = &v
	return s
}

func (s *StoreMaterialTemporarilyResponseBody) SetSuccess(v bool) *StoreMaterialTemporarilyResponseBody {
	s.Success = &v
	return s
}

type StoreMaterialTemporarilyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StoreMaterialTemporarilyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StoreMaterialTemporarilyResponse) String() string {
	return tea.Prettify(s)
}

func (s StoreMaterialTemporarilyResponse) GoString() string {
	return s.String()
}

func (s *StoreMaterialTemporarilyResponse) SetHeaders(v map[string]*string) *StoreMaterialTemporarilyResponse {
	s.Headers = v
	return s
}

func (s *StoreMaterialTemporarilyResponse) SetStatusCode(v int32) *StoreMaterialTemporarilyResponse {
	s.StatusCode = &v
	return s
}

func (s *StoreMaterialTemporarilyResponse) SetBody(v *StoreMaterialTemporarilyResponseBody) *StoreMaterialTemporarilyResponse {
	s.Body = v
	return s
}

type SubmitSupplementRequest struct {
	Content          *string                `json:"Content,omitempty" xml:"Content,omitempty"`
	Id               *int64                 `json:"Id,omitempty" xml:"Id,omitempty"`
	OperateType      *string                `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	UploadOssKeyList map[string]interface{} `json:"UploadOssKeyList,omitempty" xml:"UploadOssKeyList,omitempty"`
}

func (s SubmitSupplementRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSupplementRequest) GoString() string {
	return s.String()
}

func (s *SubmitSupplementRequest) SetContent(v string) *SubmitSupplementRequest {
	s.Content = &v
	return s
}

func (s *SubmitSupplementRequest) SetId(v int64) *SubmitSupplementRequest {
	s.Id = &v
	return s
}

func (s *SubmitSupplementRequest) SetOperateType(v string) *SubmitSupplementRequest {
	s.OperateType = &v
	return s
}

func (s *SubmitSupplementRequest) SetUploadOssKeyList(v map[string]interface{}) *SubmitSupplementRequest {
	s.UploadOssKeyList = v
	return s
}

type SubmitSupplementShrinkRequest struct {
	Content                *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Id                     *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperateType            *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	UploadOssKeyListShrink *string `json:"UploadOssKeyList,omitempty" xml:"UploadOssKeyList,omitempty"`
}

func (s SubmitSupplementShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSupplementShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitSupplementShrinkRequest) SetContent(v string) *SubmitSupplementShrinkRequest {
	s.Content = &v
	return s
}

func (s *SubmitSupplementShrinkRequest) SetId(v int64) *SubmitSupplementShrinkRequest {
	s.Id = &v
	return s
}

func (s *SubmitSupplementShrinkRequest) SetOperateType(v string) *SubmitSupplementShrinkRequest {
	s.OperateType = &v
	return s
}

func (s *SubmitSupplementShrinkRequest) SetUploadOssKeyListShrink(v string) *SubmitSupplementShrinkRequest {
	s.UploadOssKeyListShrink = &v
	return s
}

type SubmitSupplementResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitSupplementResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSupplementResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSupplementResponseBody) SetErrorCode(v string) *SubmitSupplementResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SubmitSupplementResponseBody) SetErrorMsg(v string) *SubmitSupplementResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *SubmitSupplementResponseBody) SetRequestId(v string) *SubmitSupplementResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitSupplementResponseBody) SetSuccess(v bool) *SubmitSupplementResponseBody {
	s.Success = &v
	return s
}

type SubmitSupplementResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitSupplementResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitSupplementResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSupplementResponse) GoString() string {
	return s.String()
}

func (s *SubmitSupplementResponse) SetHeaders(v map[string]*string) *SubmitSupplementResponse {
	s.Headers = v
	return s
}

func (s *SubmitSupplementResponse) SetStatusCode(v int32) *SubmitSupplementResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSupplementResponse) SetBody(v *SubmitSupplementResponseBody) *SubmitSupplementResponse {
	s.Body = v
	return s
}

type SubmitTrademarkApplicationComplaintRequest struct {
	BizId   *string                `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Content *string                `json:"Content,omitempty" xml:"Content,omitempty"`
	Files   map[string]interface{} `json:"Files,omitempty" xml:"Files,omitempty"`
}

func (s SubmitTrademarkApplicationComplaintRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTrademarkApplicationComplaintRequest) GoString() string {
	return s.String()
}

func (s *SubmitTrademarkApplicationComplaintRequest) SetBizId(v string) *SubmitTrademarkApplicationComplaintRequest {
	s.BizId = &v
	return s
}

func (s *SubmitTrademarkApplicationComplaintRequest) SetContent(v string) *SubmitTrademarkApplicationComplaintRequest {
	s.Content = &v
	return s
}

func (s *SubmitTrademarkApplicationComplaintRequest) SetFiles(v map[string]interface{}) *SubmitTrademarkApplicationComplaintRequest {
	s.Files = v
	return s
}

type SubmitTrademarkApplicationComplaintShrinkRequest struct {
	BizId       *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	FilesShrink *string `json:"Files,omitempty" xml:"Files,omitempty"`
}

func (s SubmitTrademarkApplicationComplaintShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTrademarkApplicationComplaintShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitTrademarkApplicationComplaintShrinkRequest) SetBizId(v string) *SubmitTrademarkApplicationComplaintShrinkRequest {
	s.BizId = &v
	return s
}

func (s *SubmitTrademarkApplicationComplaintShrinkRequest) SetContent(v string) *SubmitTrademarkApplicationComplaintShrinkRequest {
	s.Content = &v
	return s
}

func (s *SubmitTrademarkApplicationComplaintShrinkRequest) SetFilesShrink(v string) *SubmitTrademarkApplicationComplaintShrinkRequest {
	s.FilesShrink = &v
	return s
}

type SubmitTrademarkApplicationComplaintResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitTrademarkApplicationComplaintResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTrademarkApplicationComplaintResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTrademarkApplicationComplaintResponseBody) SetRequestId(v string) *SubmitTrademarkApplicationComplaintResponseBody {
	s.RequestId = &v
	return s
}

type SubmitTrademarkApplicationComplaintResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitTrademarkApplicationComplaintResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitTrademarkApplicationComplaintResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTrademarkApplicationComplaintResponse) GoString() string {
	return s.String()
}

func (s *SubmitTrademarkApplicationComplaintResponse) SetHeaders(v map[string]*string) *SubmitTrademarkApplicationComplaintResponse {
	s.Headers = v
	return s
}

func (s *SubmitTrademarkApplicationComplaintResponse) SetStatusCode(v int32) *SubmitTrademarkApplicationComplaintResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitTrademarkApplicationComplaintResponse) SetBody(v *SubmitTrademarkApplicationComplaintResponseBody) *SubmitTrademarkApplicationComplaintResponse {
	s.Body = v
	return s
}

type SyncTrademarkRequest struct {
	BeginTime               *int64   `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	ClassificationCode      *string  `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	Description             *string  `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTime                 *int64   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Label                   *string  `json:"Label,omitempty" xml:"Label,omitempty"`
	OriginalPrice           *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	OwnerEnName             *string  `json:"OwnerEnName,omitempty" xml:"OwnerEnName,omitempty"`
	OwnerName               *string  `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	Reason                  *string  `json:"Reason,omitempty" xml:"Reason,omitempty"`
	RegAnnDate              *int64   `json:"RegAnnDate,omitempty" xml:"RegAnnDate,omitempty"`
	SecondaryClassification *string  `json:"SecondaryClassification,omitempty" xml:"SecondaryClassification,omitempty"`
	Status                  *string  `json:"Status,omitempty" xml:"Status,omitempty"`
	ThirdClassification     *string  `json:"ThirdClassification,omitempty" xml:"ThirdClassification,omitempty"`
	TmIcon                  *string  `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName                  *string  `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber                *string  `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	Type                    *string  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SyncTrademarkRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncTrademarkRequest) GoString() string {
	return s.String()
}

func (s *SyncTrademarkRequest) SetBeginTime(v int64) *SyncTrademarkRequest {
	s.BeginTime = &v
	return s
}

func (s *SyncTrademarkRequest) SetClassificationCode(v string) *SyncTrademarkRequest {
	s.ClassificationCode = &v
	return s
}

func (s *SyncTrademarkRequest) SetDescription(v string) *SyncTrademarkRequest {
	s.Description = &v
	return s
}

func (s *SyncTrademarkRequest) SetEndTime(v int64) *SyncTrademarkRequest {
	s.EndTime = &v
	return s
}

func (s *SyncTrademarkRequest) SetLabel(v string) *SyncTrademarkRequest {
	s.Label = &v
	return s
}

func (s *SyncTrademarkRequest) SetOriginalPrice(v float32) *SyncTrademarkRequest {
	s.OriginalPrice = &v
	return s
}

func (s *SyncTrademarkRequest) SetOwnerEnName(v string) *SyncTrademarkRequest {
	s.OwnerEnName = &v
	return s
}

func (s *SyncTrademarkRequest) SetOwnerName(v string) *SyncTrademarkRequest {
	s.OwnerName = &v
	return s
}

func (s *SyncTrademarkRequest) SetReason(v string) *SyncTrademarkRequest {
	s.Reason = &v
	return s
}

func (s *SyncTrademarkRequest) SetRegAnnDate(v int64) *SyncTrademarkRequest {
	s.RegAnnDate = &v
	return s
}

func (s *SyncTrademarkRequest) SetSecondaryClassification(v string) *SyncTrademarkRequest {
	s.SecondaryClassification = &v
	return s
}

func (s *SyncTrademarkRequest) SetStatus(v string) *SyncTrademarkRequest {
	s.Status = &v
	return s
}

func (s *SyncTrademarkRequest) SetThirdClassification(v string) *SyncTrademarkRequest {
	s.ThirdClassification = &v
	return s
}

func (s *SyncTrademarkRequest) SetTmIcon(v string) *SyncTrademarkRequest {
	s.TmIcon = &v
	return s
}

func (s *SyncTrademarkRequest) SetTmName(v string) *SyncTrademarkRequest {
	s.TmName = &v
	return s
}

func (s *SyncTrademarkRequest) SetTmNumber(v string) *SyncTrademarkRequest {
	s.TmNumber = &v
	return s
}

func (s *SyncTrademarkRequest) SetType(v string) *SyncTrademarkRequest {
	s.Type = &v
	return s
}

type SyncTrademarkResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SyncTrademarkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SyncTrademarkResponseBody) GoString() string {
	return s.String()
}

func (s *SyncTrademarkResponseBody) SetRequestId(v string) *SyncTrademarkResponseBody {
	s.RequestId = &v
	return s
}

type SyncTrademarkResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SyncTrademarkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SyncTrademarkResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncTrademarkResponse) GoString() string {
	return s.String()
}

func (s *SyncTrademarkResponse) SetHeaders(v map[string]*string) *SyncTrademarkResponse {
	s.Headers = v
	return s
}

func (s *SyncTrademarkResponse) SetStatusCode(v int32) *SyncTrademarkResponse {
	s.StatusCode = &v
	return s
}

func (s *SyncTrademarkResponse) SetBody(v *SyncTrademarkResponseBody) *SyncTrademarkResponse {
	s.Body = v
	return s
}

type UpdateApplicantContacterRequest struct {
	ApplicantId     *int64  `json:"ApplicantId,omitempty" xml:"ApplicantId,omitempty"`
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	ContactAddress  *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactCity     *string `json:"ContactCity,omitempty" xml:"ContactCity,omitempty"`
	ContactDistrict *string `json:"ContactDistrict,omitempty" xml:"ContactDistrict,omitempty"`
	ContactEmail    *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName     *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber   *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactProvince *string `json:"ContactProvince,omitempty" xml:"ContactProvince,omitempty"`
	ContactZipCode  *string `json:"ContactZipCode,omitempty" xml:"ContactZipCode,omitempty"`
}

func (s UpdateApplicantContacterRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicantContacterRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplicantContacterRequest) SetApplicantId(v int64) *UpdateApplicantContacterRequest {
	s.ApplicantId = &v
	return s
}

func (s *UpdateApplicantContacterRequest) SetBizId(v string) *UpdateApplicantContacterRequest {
	s.BizId = &v
	return s
}

func (s *UpdateApplicantContacterRequest) SetContactAddress(v string) *UpdateApplicantContacterRequest {
	s.ContactAddress = &v
	return s
}

func (s *UpdateApplicantContacterRequest) SetContactCity(v string) *UpdateApplicantContacterRequest {
	s.ContactCity = &v
	return s
}

func (s *UpdateApplicantContacterRequest) SetContactDistrict(v string) *UpdateApplicantContacterRequest {
	s.ContactDistrict = &v
	return s
}

func (s *UpdateApplicantContacterRequest) SetContactEmail(v string) *UpdateApplicantContacterRequest {
	s.ContactEmail = &v
	return s
}

func (s *UpdateApplicantContacterRequest) SetContactName(v string) *UpdateApplicantContacterRequest {
	s.ContactName = &v
	return s
}

func (s *UpdateApplicantContacterRequest) SetContactNumber(v string) *UpdateApplicantContacterRequest {
	s.ContactNumber = &v
	return s
}

func (s *UpdateApplicantContacterRequest) SetContactProvince(v string) *UpdateApplicantContacterRequest {
	s.ContactProvince = &v
	return s
}

func (s *UpdateApplicantContacterRequest) SetContactZipCode(v string) *UpdateApplicantContacterRequest {
	s.ContactZipCode = &v
	return s
}

type UpdateApplicantContacterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateApplicantContacterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicantContacterResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateApplicantContacterResponseBody) SetRequestId(v string) *UpdateApplicantContacterResponseBody {
	s.RequestId = &v
	return s
}

type UpdateApplicantContacterResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateApplicantContacterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateApplicantContacterResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicantContacterResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplicantContacterResponse) SetHeaders(v map[string]*string) *UpdateApplicantContacterResponse {
	s.Headers = v
	return s
}

func (s *UpdateApplicantContacterResponse) SetStatusCode(v int32) *UpdateApplicantContacterResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateApplicantContacterResponse) SetBody(v *UpdateApplicantContacterResponseBody) *UpdateApplicantContacterResponse {
	s.Body = v
	return s
}

type UpdateMaterialRequest struct {
	Address               *string `json:"Address,omitempty" xml:"Address,omitempty"`
	BusinessLicenceOssKey *string `json:"BusinessLicenceOssKey,omitempty" xml:"BusinessLicenceOssKey,omitempty"`
	CardNumber            *string `json:"CardNumber,omitempty" xml:"CardNumber,omitempty"`
	City                  *string `json:"City,omitempty" xml:"City,omitempty"`
	ContactAddress        *string `json:"ContactAddress,omitempty" xml:"ContactAddress,omitempty"`
	ContactCity           *string `json:"ContactCity,omitempty" xml:"ContactCity,omitempty"`
	ContactCounty         *string `json:"ContactCounty,omitempty" xml:"ContactCounty,omitempty"`
	ContactDistrict       *string `json:"ContactDistrict,omitempty" xml:"ContactDistrict,omitempty"`
	ContactEmail          *string `json:"ContactEmail,omitempty" xml:"ContactEmail,omitempty"`
	ContactName           *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	ContactNumber         *string `json:"ContactNumber,omitempty" xml:"ContactNumber,omitempty"`
	ContactProvince       *string `json:"ContactProvince,omitempty" xml:"ContactProvince,omitempty"`
	ContactZipcode        *string `json:"ContactZipcode,omitempty" xml:"ContactZipcode,omitempty"`
	EAddress              *string `json:"EAddress,omitempty" xml:"EAddress,omitempty"`
	EName                 *string `json:"EName,omitempty" xml:"EName,omitempty"`
	Id                    *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IdCardName            *string `json:"IdCardName,omitempty" xml:"IdCardName,omitempty"`
	IdCardNumber          *string `json:"IdCardNumber,omitempty" xml:"IdCardNumber,omitempty"`
	IdCardOssKey          *string `json:"IdCardOssKey,omitempty" xml:"IdCardOssKey,omitempty"`
	LegalNoticeOssKey     *string `json:"LegalNoticeOssKey,omitempty" xml:"LegalNoticeOssKey,omitempty"`
	LoaId                 *int64  `json:"LoaId,omitempty" xml:"LoaId,omitempty"`
	LoaOssKey             *string `json:"LoaOssKey,omitempty" xml:"LoaOssKey,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PassportOssKey        *string `json:"PassportOssKey,omitempty" xml:"PassportOssKey,omitempty"`
	PersonalType          *int64  `json:"PersonalType,omitempty" xml:"PersonalType,omitempty"`
	Province              *string `json:"Province,omitempty" xml:"Province,omitempty"`
	Town                  *string `json:"Town,omitempty" xml:"Town,omitempty"`
}

func (s UpdateMaterialRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMaterialRequest) GoString() string {
	return s.String()
}

func (s *UpdateMaterialRequest) SetAddress(v string) *UpdateMaterialRequest {
	s.Address = &v
	return s
}

func (s *UpdateMaterialRequest) SetBusinessLicenceOssKey(v string) *UpdateMaterialRequest {
	s.BusinessLicenceOssKey = &v
	return s
}

func (s *UpdateMaterialRequest) SetCardNumber(v string) *UpdateMaterialRequest {
	s.CardNumber = &v
	return s
}

func (s *UpdateMaterialRequest) SetCity(v string) *UpdateMaterialRequest {
	s.City = &v
	return s
}

func (s *UpdateMaterialRequest) SetContactAddress(v string) *UpdateMaterialRequest {
	s.ContactAddress = &v
	return s
}

func (s *UpdateMaterialRequest) SetContactCity(v string) *UpdateMaterialRequest {
	s.ContactCity = &v
	return s
}

func (s *UpdateMaterialRequest) SetContactCounty(v string) *UpdateMaterialRequest {
	s.ContactCounty = &v
	return s
}

func (s *UpdateMaterialRequest) SetContactDistrict(v string) *UpdateMaterialRequest {
	s.ContactDistrict = &v
	return s
}

func (s *UpdateMaterialRequest) SetContactEmail(v string) *UpdateMaterialRequest {
	s.ContactEmail = &v
	return s
}

func (s *UpdateMaterialRequest) SetContactName(v string) *UpdateMaterialRequest {
	s.ContactName = &v
	return s
}

func (s *UpdateMaterialRequest) SetContactNumber(v string) *UpdateMaterialRequest {
	s.ContactNumber = &v
	return s
}

func (s *UpdateMaterialRequest) SetContactProvince(v string) *UpdateMaterialRequest {
	s.ContactProvince = &v
	return s
}

func (s *UpdateMaterialRequest) SetContactZipcode(v string) *UpdateMaterialRequest {
	s.ContactZipcode = &v
	return s
}

func (s *UpdateMaterialRequest) SetEAddress(v string) *UpdateMaterialRequest {
	s.EAddress = &v
	return s
}

func (s *UpdateMaterialRequest) SetEName(v string) *UpdateMaterialRequest {
	s.EName = &v
	return s
}

func (s *UpdateMaterialRequest) SetId(v int64) *UpdateMaterialRequest {
	s.Id = &v
	return s
}

func (s *UpdateMaterialRequest) SetIdCardName(v string) *UpdateMaterialRequest {
	s.IdCardName = &v
	return s
}

func (s *UpdateMaterialRequest) SetIdCardNumber(v string) *UpdateMaterialRequest {
	s.IdCardNumber = &v
	return s
}

func (s *UpdateMaterialRequest) SetIdCardOssKey(v string) *UpdateMaterialRequest {
	s.IdCardOssKey = &v
	return s
}

func (s *UpdateMaterialRequest) SetLegalNoticeOssKey(v string) *UpdateMaterialRequest {
	s.LegalNoticeOssKey = &v
	return s
}

func (s *UpdateMaterialRequest) SetLoaId(v int64) *UpdateMaterialRequest {
	s.LoaId = &v
	return s
}

func (s *UpdateMaterialRequest) SetLoaOssKey(v string) *UpdateMaterialRequest {
	s.LoaOssKey = &v
	return s
}

func (s *UpdateMaterialRequest) SetName(v string) *UpdateMaterialRequest {
	s.Name = &v
	return s
}

func (s *UpdateMaterialRequest) SetPassportOssKey(v string) *UpdateMaterialRequest {
	s.PassportOssKey = &v
	return s
}

func (s *UpdateMaterialRequest) SetPersonalType(v int64) *UpdateMaterialRequest {
	s.PersonalType = &v
	return s
}

func (s *UpdateMaterialRequest) SetProvince(v string) *UpdateMaterialRequest {
	s.Province = &v
	return s
}

func (s *UpdateMaterialRequest) SetTown(v string) *UpdateMaterialRequest {
	s.Town = &v
	return s
}

type UpdateMaterialResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMaterialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMaterialResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMaterialResponseBody) SetRequestId(v string) *UpdateMaterialResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMaterialResponseBody) SetSuccess(v bool) *UpdateMaterialResponseBody {
	s.Success = &v
	return s
}

type UpdateMaterialResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateMaterialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMaterialResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMaterialResponse) GoString() string {
	return s.String()
}

func (s *UpdateMaterialResponse) SetHeaders(v map[string]*string) *UpdateMaterialResponse {
	s.Headers = v
	return s
}

func (s *UpdateMaterialResponse) SetStatusCode(v int32) *UpdateMaterialResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMaterialResponse) SetBody(v *UpdateMaterialResponseBody) *UpdateMaterialResponse {
	s.Body = v
	return s
}

type UpdateProduceRequest struct {
	BizId   *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	ExtMap  *string `json:"ExtMap,omitempty" xml:"ExtMap,omitempty"`
}

func (s UpdateProduceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProduceRequest) GoString() string {
	return s.String()
}

func (s *UpdateProduceRequest) SetBizId(v string) *UpdateProduceRequest {
	s.BizId = &v
	return s
}

func (s *UpdateProduceRequest) SetBizType(v string) *UpdateProduceRequest {
	s.BizType = &v
	return s
}

func (s *UpdateProduceRequest) SetExtMap(v string) *UpdateProduceRequest {
	s.ExtMap = &v
	return s
}

type UpdateProduceResponseBody struct {
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s UpdateProduceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProduceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProduceResponseBody) SetRequestId(v string) *UpdateProduceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateProduceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateProduceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateProduceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProduceResponse) GoString() string {
	return s.String()
}

func (s *UpdateProduceResponse) SetHeaders(v map[string]*string) *UpdateProduceResponse {
	s.Headers = v
	return s
}

func (s *UpdateProduceResponse) SetStatusCode(v int32) *UpdateProduceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateProduceResponse) SetBody(v *UpdateProduceResponseBody) *UpdateProduceResponse {
	s.Body = v
	return s
}

type UpdateProduceLoaIdRequest struct {
	BizId     *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	LoaOssKey *string `json:"LoaOssKey,omitempty" xml:"LoaOssKey,omitempty"`
}

func (s UpdateProduceLoaIdRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateProduceLoaIdRequest) GoString() string {
	return s.String()
}

func (s *UpdateProduceLoaIdRequest) SetBizId(v string) *UpdateProduceLoaIdRequest {
	s.BizId = &v
	return s
}

func (s *UpdateProduceLoaIdRequest) SetLoaOssKey(v string) *UpdateProduceLoaIdRequest {
	s.LoaOssKey = &v
	return s
}

type UpdateProduceLoaIdResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateProduceLoaIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateProduceLoaIdResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateProduceLoaIdResponseBody) SetRequestId(v string) *UpdateProduceLoaIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateProduceLoaIdResponseBody) SetSuccess(v bool) *UpdateProduceLoaIdResponseBody {
	s.Success = &v
	return s
}

type UpdateProduceLoaIdResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateProduceLoaIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateProduceLoaIdResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateProduceLoaIdResponse) GoString() string {
	return s.String()
}

func (s *UpdateProduceLoaIdResponse) SetHeaders(v map[string]*string) *UpdateProduceLoaIdResponse {
	s.Headers = v
	return s
}

func (s *UpdateProduceLoaIdResponse) SetStatusCode(v int32) *UpdateProduceLoaIdResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateProduceLoaIdResponse) SetBody(v *UpdateProduceLoaIdResponseBody) *UpdateProduceLoaIdResponse {
	s.Body = v
	return s
}

type UpdateSendMaterialNumRequest struct {
	BizId       *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Num         *string `json:"Num,omitempty" xml:"Num,omitempty"`
	OperateType *int32  `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
}

func (s UpdateSendMaterialNumRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSendMaterialNumRequest) GoString() string {
	return s.String()
}

func (s *UpdateSendMaterialNumRequest) SetBizId(v string) *UpdateSendMaterialNumRequest {
	s.BizId = &v
	return s
}

func (s *UpdateSendMaterialNumRequest) SetNum(v string) *UpdateSendMaterialNumRequest {
	s.Num = &v
	return s
}

func (s *UpdateSendMaterialNumRequest) SetOperateType(v int32) *UpdateSendMaterialNumRequest {
	s.OperateType = &v
	return s
}

type UpdateSendMaterialNumResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateSendMaterialNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSendMaterialNumResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSendMaterialNumResponseBody) SetErrorCode(v string) *UpdateSendMaterialNumResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateSendMaterialNumResponseBody) SetErrorMsg(v string) *UpdateSendMaterialNumResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *UpdateSendMaterialNumResponseBody) SetRequestId(v string) *UpdateSendMaterialNumResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSendMaterialNumResponseBody) SetSuccess(v bool) *UpdateSendMaterialNumResponseBody {
	s.Success = &v
	return s
}

type UpdateSendMaterialNumResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSendMaterialNumResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSendMaterialNumResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSendMaterialNumResponse) GoString() string {
	return s.String()
}

func (s *UpdateSendMaterialNumResponse) SetHeaders(v map[string]*string) *UpdateSendMaterialNumResponse {
	s.Headers = v
	return s
}

func (s *UpdateSendMaterialNumResponse) SetStatusCode(v int32) *UpdateSendMaterialNumResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSendMaterialNumResponse) SetBody(v *UpdateSendMaterialNumResponseBody) *UpdateSendMaterialNumResponse {
	s.Body = v
	return s
}

type UpdateTrademarkNameRequest struct {
	BizId       *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	TmComment   *string `json:"TmComment,omitempty" xml:"TmComment,omitempty"`
	TmIcon      *string `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName      *string `json:"TmName,omitempty" xml:"TmName,omitempty"`
	Type        *int64  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateTrademarkNameRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTrademarkNameRequest) GoString() string {
	return s.String()
}

func (s *UpdateTrademarkNameRequest) SetBizId(v string) *UpdateTrademarkNameRequest {
	s.BizId = &v
	return s
}

func (s *UpdateTrademarkNameRequest) SetClientToken(v string) *UpdateTrademarkNameRequest {
	s.ClientToken = &v
	return s
}

func (s *UpdateTrademarkNameRequest) SetTmComment(v string) *UpdateTrademarkNameRequest {
	s.TmComment = &v
	return s
}

func (s *UpdateTrademarkNameRequest) SetTmIcon(v string) *UpdateTrademarkNameRequest {
	s.TmIcon = &v
	return s
}

func (s *UpdateTrademarkNameRequest) SetTmName(v string) *UpdateTrademarkNameRequest {
	s.TmName = &v
	return s
}

func (s *UpdateTrademarkNameRequest) SetType(v int64) *UpdateTrademarkNameRequest {
	s.Type = &v
	return s
}

type UpdateTrademarkNameResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateTrademarkNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTrademarkNameResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTrademarkNameResponseBody) SetErrorCode(v string) *UpdateTrademarkNameResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateTrademarkNameResponseBody) SetErrorMsg(v string) *UpdateTrademarkNameResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *UpdateTrademarkNameResponseBody) SetRequestId(v string) *UpdateTrademarkNameResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTrademarkNameResponseBody) SetSuccess(v bool) *UpdateTrademarkNameResponseBody {
	s.Success = &v
	return s
}

type UpdateTrademarkNameResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateTrademarkNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTrademarkNameResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTrademarkNameResponse) GoString() string {
	return s.String()
}

func (s *UpdateTrademarkNameResponse) SetHeaders(v map[string]*string) *UpdateTrademarkNameResponse {
	s.Headers = v
	return s
}

func (s *UpdateTrademarkNameResponse) SetStatusCode(v int32) *UpdateTrademarkNameResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTrademarkNameResponse) SetBody(v *UpdateTrademarkNameResponseBody) *UpdateTrademarkNameResponse {
	s.Body = v
	return s
}

type UpdateTrademarkOnsaleRequest struct {
	BeginTime               *int64   `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	ClassificationCode      *string  `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	Description             *string  `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTime                 *int64   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Label                   *string  `json:"Label,omitempty" xml:"Label,omitempty"`
	OriginalPrice           *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	OwnerEnName             *string  `json:"OwnerEnName,omitempty" xml:"OwnerEnName,omitempty"`
	OwnerName               *string  `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	Reason                  *string  `json:"Reason,omitempty" xml:"Reason,omitempty"`
	RegAnnDate              *int64   `json:"RegAnnDate,omitempty" xml:"RegAnnDate,omitempty"`
	SecondaryClassification *string  `json:"SecondaryClassification,omitempty" xml:"SecondaryClassification,omitempty"`
	ThirdClassification     *string  `json:"ThirdClassification,omitempty" xml:"ThirdClassification,omitempty"`
	TmIcon                  *string  `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName                  *string  `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber                *string  `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	TmType                  *string  `json:"TmType,omitempty" xml:"TmType,omitempty"`
	TradeTmDetailJson       *string  `json:"TradeTmDetailJson,omitempty" xml:"TradeTmDetailJson,omitempty"`
	Type                    *string  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateTrademarkOnsaleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTrademarkOnsaleRequest) GoString() string {
	return s.String()
}

func (s *UpdateTrademarkOnsaleRequest) SetBeginTime(v int64) *UpdateTrademarkOnsaleRequest {
	s.BeginTime = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetClassificationCode(v string) *UpdateTrademarkOnsaleRequest {
	s.ClassificationCode = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetDescription(v string) *UpdateTrademarkOnsaleRequest {
	s.Description = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetEndTime(v int64) *UpdateTrademarkOnsaleRequest {
	s.EndTime = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetLabel(v string) *UpdateTrademarkOnsaleRequest {
	s.Label = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetOriginalPrice(v float32) *UpdateTrademarkOnsaleRequest {
	s.OriginalPrice = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetOwnerEnName(v string) *UpdateTrademarkOnsaleRequest {
	s.OwnerEnName = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetOwnerName(v string) *UpdateTrademarkOnsaleRequest {
	s.OwnerName = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetReason(v string) *UpdateTrademarkOnsaleRequest {
	s.Reason = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetRegAnnDate(v int64) *UpdateTrademarkOnsaleRequest {
	s.RegAnnDate = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetSecondaryClassification(v string) *UpdateTrademarkOnsaleRequest {
	s.SecondaryClassification = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetThirdClassification(v string) *UpdateTrademarkOnsaleRequest {
	s.ThirdClassification = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetTmIcon(v string) *UpdateTrademarkOnsaleRequest {
	s.TmIcon = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetTmName(v string) *UpdateTrademarkOnsaleRequest {
	s.TmName = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetTmNumber(v string) *UpdateTrademarkOnsaleRequest {
	s.TmNumber = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetTmType(v string) *UpdateTrademarkOnsaleRequest {
	s.TmType = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetTradeTmDetailJson(v string) *UpdateTrademarkOnsaleRequest {
	s.TradeTmDetailJson = &v
	return s
}

func (s *UpdateTrademarkOnsaleRequest) SetType(v string) *UpdateTrademarkOnsaleRequest {
	s.Type = &v
	return s
}

type UpdateTrademarkOnsaleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateTrademarkOnsaleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTrademarkOnsaleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTrademarkOnsaleResponseBody) SetRequestId(v string) *UpdateTrademarkOnsaleResponseBody {
	s.RequestId = &v
	return s
}

type UpdateTrademarkOnsaleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateTrademarkOnsaleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTrademarkOnsaleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTrademarkOnsaleResponse) GoString() string {
	return s.String()
}

func (s *UpdateTrademarkOnsaleResponse) SetHeaders(v map[string]*string) *UpdateTrademarkOnsaleResponse {
	s.Headers = v
	return s
}

func (s *UpdateTrademarkOnsaleResponse) SetStatusCode(v int32) *UpdateTrademarkOnsaleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTrademarkOnsaleResponse) SetBody(v *UpdateTrademarkOnsaleResponseBody) *UpdateTrademarkOnsaleResponse {
	s.Body = v
	return s
}

type UploadNotaryDataRequest struct {
	BizOrderNo    *string `json:"BizOrderNo,omitempty" xml:"BizOrderNo,omitempty"`
	NotaryType    *int32  `json:"NotaryType,omitempty" xml:"NotaryType,omitempty"`
	UploadContext *string `json:"UploadContext,omitempty" xml:"UploadContext,omitempty"`
}

func (s UploadNotaryDataRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadNotaryDataRequest) GoString() string {
	return s.String()
}

func (s *UploadNotaryDataRequest) SetBizOrderNo(v string) *UploadNotaryDataRequest {
	s.BizOrderNo = &v
	return s
}

func (s *UploadNotaryDataRequest) SetNotaryType(v int32) *UploadNotaryDataRequest {
	s.NotaryType = &v
	return s
}

func (s *UploadNotaryDataRequest) SetUploadContext(v string) *UploadNotaryDataRequest {
	s.UploadContext = &v
	return s
}

type UploadNotaryDataResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserAuthUrl *string `json:"UserAuthUrl,omitempty" xml:"UserAuthUrl,omitempty"`
}

func (s UploadNotaryDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadNotaryDataResponseBody) GoString() string {
	return s.String()
}

func (s *UploadNotaryDataResponseBody) SetRequestId(v string) *UploadNotaryDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadNotaryDataResponseBody) SetUserAuthUrl(v string) *UploadNotaryDataResponseBody {
	s.UserAuthUrl = &v
	return s
}

type UploadNotaryDataResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UploadNotaryDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadNotaryDataResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadNotaryDataResponse) GoString() string {
	return s.String()
}

func (s *UploadNotaryDataResponse) SetHeaders(v map[string]*string) *UploadNotaryDataResponse {
	s.Headers = v
	return s
}

func (s *UploadNotaryDataResponse) SetStatusCode(v int32) *UploadNotaryDataResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadNotaryDataResponse) SetBody(v *UploadNotaryDataResponseBody) *UploadNotaryDataResponse {
	s.Body = v
	return s
}

type UploadTrademarkOnSaleRequest struct {
	BeginTime               *int64   `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	ClassificationCode      *string  `json:"ClassificationCode,omitempty" xml:"ClassificationCode,omitempty"`
	Description             *string  `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTime                 *int64   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Label                   *string  `json:"Label,omitempty" xml:"Label,omitempty"`
	OriginalPrice           *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	OwnerEnName             *string  `json:"OwnerEnName,omitempty" xml:"OwnerEnName,omitempty"`
	OwnerName               *string  `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	Reason                  *string  `json:"Reason,omitempty" xml:"Reason,omitempty"`
	RegAnnDate              *int64   `json:"RegAnnDate,omitempty" xml:"RegAnnDate,omitempty"`
	SecondaryClassification *string  `json:"SecondaryClassification,omitempty" xml:"SecondaryClassification,omitempty"`
	Status                  *string  `json:"Status,omitempty" xml:"Status,omitempty"`
	ThirdClassification     *string  `json:"ThirdClassification,omitempty" xml:"ThirdClassification,omitempty"`
	TmIcon                  *string  `json:"TmIcon,omitempty" xml:"TmIcon,omitempty"`
	TmName                  *string  `json:"TmName,omitempty" xml:"TmName,omitempty"`
	TmNumber                *string  `json:"TmNumber,omitempty" xml:"TmNumber,omitempty"`
	TmType                  *string  `json:"TmType,omitempty" xml:"TmType,omitempty"`
	TradeTmDetailJson       *string  `json:"TradeTmDetailJson,omitempty" xml:"TradeTmDetailJson,omitempty"`
	Type                    *string  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UploadTrademarkOnSaleRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadTrademarkOnSaleRequest) GoString() string {
	return s.String()
}

func (s *UploadTrademarkOnSaleRequest) SetBeginTime(v int64) *UploadTrademarkOnSaleRequest {
	s.BeginTime = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetClassificationCode(v string) *UploadTrademarkOnSaleRequest {
	s.ClassificationCode = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetDescription(v string) *UploadTrademarkOnSaleRequest {
	s.Description = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetEndTime(v int64) *UploadTrademarkOnSaleRequest {
	s.EndTime = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetLabel(v string) *UploadTrademarkOnSaleRequest {
	s.Label = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetOriginalPrice(v float32) *UploadTrademarkOnSaleRequest {
	s.OriginalPrice = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetOwnerEnName(v string) *UploadTrademarkOnSaleRequest {
	s.OwnerEnName = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetOwnerName(v string) *UploadTrademarkOnSaleRequest {
	s.OwnerName = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetReason(v string) *UploadTrademarkOnSaleRequest {
	s.Reason = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetRegAnnDate(v int64) *UploadTrademarkOnSaleRequest {
	s.RegAnnDate = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetSecondaryClassification(v string) *UploadTrademarkOnSaleRequest {
	s.SecondaryClassification = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetStatus(v string) *UploadTrademarkOnSaleRequest {
	s.Status = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetThirdClassification(v string) *UploadTrademarkOnSaleRequest {
	s.ThirdClassification = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetTmIcon(v string) *UploadTrademarkOnSaleRequest {
	s.TmIcon = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetTmName(v string) *UploadTrademarkOnSaleRequest {
	s.TmName = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetTmNumber(v string) *UploadTrademarkOnSaleRequest {
	s.TmNumber = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetTmType(v string) *UploadTrademarkOnSaleRequest {
	s.TmType = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetTradeTmDetailJson(v string) *UploadTrademarkOnSaleRequest {
	s.TradeTmDetailJson = &v
	return s
}

func (s *UploadTrademarkOnSaleRequest) SetType(v string) *UploadTrademarkOnSaleRequest {
	s.Type = &v
	return s
}

type UploadTrademarkOnSaleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UploadTrademarkOnSaleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadTrademarkOnSaleResponseBody) GoString() string {
	return s.String()
}

func (s *UploadTrademarkOnSaleResponseBody) SetRequestId(v string) *UploadTrademarkOnSaleResponseBody {
	s.RequestId = &v
	return s
}

type UploadTrademarkOnSaleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UploadTrademarkOnSaleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadTrademarkOnSaleResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadTrademarkOnSaleResponse) GoString() string {
	return s.String()
}

func (s *UploadTrademarkOnSaleResponse) SetHeaders(v map[string]*string) *UploadTrademarkOnSaleResponse {
	s.Headers = v
	return s
}

func (s *UploadTrademarkOnSaleResponse) SetStatusCode(v int32) *UploadTrademarkOnSaleResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadTrademarkOnSaleResponse) SetBody(v *UploadTrademarkOnSaleResponseBody) *UploadTrademarkOnSaleResponse {
	s.Body = v
	return s
}

type WriteCommunicationLogRequest struct {
	BizId    *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Note     *string `json:"Note,omitempty" xml:"Note,omitempty"`
	TargetId *string `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
}

func (s WriteCommunicationLogRequest) String() string {
	return tea.Prettify(s)
}

func (s WriteCommunicationLogRequest) GoString() string {
	return s.String()
}

func (s *WriteCommunicationLogRequest) SetBizId(v string) *WriteCommunicationLogRequest {
	s.BizId = &v
	return s
}

func (s *WriteCommunicationLogRequest) SetNote(v string) *WriteCommunicationLogRequest {
	s.Note = &v
	return s
}

func (s *WriteCommunicationLogRequest) SetTargetId(v string) *WriteCommunicationLogRequest {
	s.TargetId = &v
	return s
}

type WriteCommunicationLogResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WriteCommunicationLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s WriteCommunicationLogResponseBody) GoString() string {
	return s.String()
}

func (s *WriteCommunicationLogResponseBody) SetErrorCode(v string) *WriteCommunicationLogResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *WriteCommunicationLogResponseBody) SetErrorMsg(v string) *WriteCommunicationLogResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *WriteCommunicationLogResponseBody) SetRequestId(v string) *WriteCommunicationLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *WriteCommunicationLogResponseBody) SetSuccess(v bool) *WriteCommunicationLogResponseBody {
	s.Success = &v
	return s
}

type WriteCommunicationLogResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *WriteCommunicationLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s WriteCommunicationLogResponse) String() string {
	return tea.Prettify(s)
}

func (s WriteCommunicationLogResponse) GoString() string {
	return s.String()
}

func (s *WriteCommunicationLogResponse) SetHeaders(v map[string]*string) *WriteCommunicationLogResponse {
	s.Headers = v
	return s
}

func (s *WriteCommunicationLogResponse) SetStatusCode(v int32) *WriteCommunicationLogResponse {
	s.StatusCode = &v
	return s
}

func (s *WriteCommunicationLogResponse) SetBody(v *WriteCommunicationLogResponseBody) *WriteCommunicationLogResponse {
	s.Body = v
	return s
}

type WriteIntentionCommunicationLogRequest struct {
	BizId  *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Note   *string `json:"Note,omitempty" xml:"Note,omitempty"`
	Reject *bool   `json:"Reject,omitempty" xml:"Reject,omitempty"`
}

func (s WriteIntentionCommunicationLogRequest) String() string {
	return tea.Prettify(s)
}

func (s WriteIntentionCommunicationLogRequest) GoString() string {
	return s.String()
}

func (s *WriteIntentionCommunicationLogRequest) SetBizId(v string) *WriteIntentionCommunicationLogRequest {
	s.BizId = &v
	return s
}

func (s *WriteIntentionCommunicationLogRequest) SetNote(v string) *WriteIntentionCommunicationLogRequest {
	s.Note = &v
	return s
}

func (s *WriteIntentionCommunicationLogRequest) SetReject(v bool) *WriteIntentionCommunicationLogRequest {
	s.Reject = &v
	return s
}

type WriteIntentionCommunicationLogResponseBody struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WriteIntentionCommunicationLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s WriteIntentionCommunicationLogResponseBody) GoString() string {
	return s.String()
}

func (s *WriteIntentionCommunicationLogResponseBody) SetErrorCode(v string) *WriteIntentionCommunicationLogResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *WriteIntentionCommunicationLogResponseBody) SetErrorMsg(v string) *WriteIntentionCommunicationLogResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *WriteIntentionCommunicationLogResponseBody) SetRequestId(v string) *WriteIntentionCommunicationLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *WriteIntentionCommunicationLogResponseBody) SetSuccess(v bool) *WriteIntentionCommunicationLogResponseBody {
	s.Success = &v
	return s
}

type WriteIntentionCommunicationLogResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *WriteIntentionCommunicationLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s WriteIntentionCommunicationLogResponse) String() string {
	return tea.Prettify(s)
}

func (s WriteIntentionCommunicationLogResponse) GoString() string {
	return s.String()
}

func (s *WriteIntentionCommunicationLogResponse) SetHeaders(v map[string]*string) *WriteIntentionCommunicationLogResponse {
	s.Headers = v
	return s
}

func (s *WriteIntentionCommunicationLogResponse) SetStatusCode(v int32) *WriteIntentionCommunicationLogResponse {
	s.StatusCode = &v
	return s
}

func (s *WriteIntentionCommunicationLogResponse) SetBody(v *WriteIntentionCommunicationLogResponseBody) *WriteIntentionCommunicationLogResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("central")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("trademark"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AcceptPartnerNotificationWithOptions(request *AcceptPartnerNotificationRequest, runtime *util.RuntimeOptions) (_result *AcceptPartnerNotificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Material)) {
		query["Material"] = request.Material
	}

	if !tea.BoolValue(util.IsUnset(request.Operation)) {
		query["Operation"] = request.Operation
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		query["Remark"] = request.Remark
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AcceptPartnerNotification"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AcceptPartnerNotificationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AcceptPartnerNotification(request *AcceptPartnerNotificationRequest) (_result *AcceptPartnerNotificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AcceptPartnerNotificationResponse{}
	_body, _err := client.AcceptPartnerNotificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyNotaryPostWithOptions(request *ApplyNotaryPostRequest, runtime *util.RuntimeOptions) (_result *ApplyNotaryPostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NotaryOrderId)) {
		query["NotaryOrderId"] = request.NotaryOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverAddress)) {
		query["ReceiverAddress"] = request.ReceiverAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverName)) {
		query["ReceiverName"] = request.ReceiverName
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverPhone)) {
		query["ReceiverPhone"] = request.ReceiverPhone
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyNotaryPost"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyNotaryPostResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyNotaryPost(request *ApplyNotaryPostRequest) (_result *ApplyNotaryPostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyNotaryPostResponse{}
	_body, _err := client.ApplyNotaryPostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AskAdjudicationFileWithOptions(request *AskAdjudicationFileRequest, runtime *util.RuntimeOptions) (_result *AskAdjudicationFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactAddress)) {
		query["ContactAddress"] = request.ContactAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCity)) {
		query["ContactCity"] = request.ContactCity
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCounty)) {
		query["ContactCounty"] = request.ContactCounty
	}

	if !tea.BoolValue(util.IsUnset(request.ContactDistrict)) {
		query["ContactDistrict"] = request.ContactDistrict
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactNumber)) {
		query["ContactNumber"] = request.ContactNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ContactProvince)) {
		query["ContactProvince"] = request.ContactProvince
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AskAdjudicationFile"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AskAdjudicationFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AskAdjudicationFile(request *AskAdjudicationFileRequest) (_result *AskAdjudicationFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AskAdjudicationFileResponse{}
	_body, _err := client.AskAdjudicationFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindMaterialWithOptions(request *BindMaterialRequest, runtime *util.RuntimeOptions) (_result *BindMaterialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.LegalNoticeKey)) {
		query["LegalNoticeKey"] = request.LegalNoticeKey
	}

	if !tea.BoolValue(util.IsUnset(request.LoaOssKey)) {
		query["LoaOssKey"] = request.LoaOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialId)) {
		query["MaterialId"] = request.MaterialId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindMaterial"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindMaterialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindMaterial(request *BindMaterialRequest) (_result *BindMaterialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindMaterialResponse{}
	_body, _err := client.BindMaterialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelTradeOrderWithOptions(request *CancelTradeOrderRequest, runtime *util.RuntimeOptions) (_result *CancelTradeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelTradeOrder"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelTradeOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelTradeOrder(request *CancelTradeOrderRequest) (_result *CancelTradeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelTradeOrderResponse{}
	_body, _err := client.CancelTradeOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckFlsmFillWithOptions(request *CheckFlsmFillRequest, runtime *util.RuntimeOptions) (_result *CheckFlsmFillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicantType)) {
		query["ApplicantType"] = request.ApplicantType
	}

	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		query["OssKey"] = request.OssKey
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalType)) {
		query["PersonalType"] = request.PersonalType
	}

	if !tea.BoolValue(util.IsUnset(request.WtrName)) {
		query["WtrName"] = request.WtrName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckFlsmFill"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckFlsmFillResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckFlsmFill(request *CheckFlsmFillRequest) (_result *CheckFlsmFillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckFlsmFillResponse{}
	_body, _err := client.CheckFlsmFillWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckIfCollectedWithOptions(request *CheckIfCollectedRequest, runtime *util.RuntimeOptions) (_result *CheckIfCollectedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ItemIdList)) {
		query["ItemIdList"] = request.ItemIdList
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckIfCollected"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckIfCollectedResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckIfCollected(request *CheckIfCollectedRequest) (_result *CheckIfCollectedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckIfCollectedResponse{}
	_body, _err := client.CheckIfCollectedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckLoaFillWithOptions(request *CheckLoaFillRequest, runtime *util.RuntimeOptions) (_result *CheckLoaFillResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicantType)) {
		query["ApplicantType"] = request.ApplicantType
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactNumber)) {
		query["ContactNumber"] = request.ContactNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ContactZipcode)) {
		query["ContactZipcode"] = request.ContactZipcode
	}

	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		query["OssKey"] = request.OssKey
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalType)) {
		query["PersonalType"] = request.PersonalType
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WtrName)) {
		query["WtrName"] = request.WtrName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckLoaFill"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckLoaFillResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckLoaFill(request *CheckLoaFillRequest) (_result *CheckLoaFillResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckLoaFillResponse{}
	_body, _err := client.CheckLoaFillWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckTrademarkIconWithOptions(request *CheckTrademarkIconRequest, runtime *util.RuntimeOptions) (_result *CheckTrademarkIconResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventSceneType)) {
		query["EventSceneType"] = request.EventSceneType
	}

	if !tea.BoolValue(util.IsUnset(request.TrademarkIconOssKey)) {
		query["TrademarkIconOssKey"] = request.TrademarkIconOssKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckTrademarkIcon"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckTrademarkIconResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckTrademarkIcon(request *CheckTrademarkIconRequest) (_result *CheckTrademarkIconResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckTrademarkIconResponse{}
	_body, _err := client.CheckTrademarkIconWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckTrademarkOrderWithOptions(request *CheckTrademarkOrderRequest, runtime *util.RuntimeOptions) (_result *CheckTrademarkOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgreementId)) {
		query["AgreementId"] = request.AgreementId
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.IsBlackIcon)) {
		query["IsBlackIcon"] = request.IsBlackIcon
	}

	if !tea.BoolValue(util.IsUnset(request.LoaOssKey)) {
		query["LoaOssKey"] = request.LoaOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.LogoGoodsId)) {
		query["LogoGoodsId"] = request.LogoGoodsId
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialId)) {
		query["MaterialId"] = request.MaterialId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderData)) {
		query["OrderData"] = request.OrderData
	}

	if !tea.BoolValue(util.IsUnset(request.PartnerCode)) {
		query["PartnerCode"] = request.PartnerCode
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNum)) {
		query["PhoneNum"] = request.PhoneNum
	}

	if !tea.BoolValue(util.IsUnset(request.RealUserName)) {
		query["RealUserName"] = request.RealUserName
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterName)) {
		query["RegisterName"] = request.RegisterName
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterNumber)) {
		query["RegisterNumber"] = request.RegisterNumber
	}

	if !tea.BoolValue(util.IsUnset(request.RenewInfoId)) {
		query["RenewInfoId"] = request.RenewInfoId
	}

	if !tea.BoolValue(util.IsUnset(request.RootCode)) {
		query["RootCode"] = request.RootCode
	}

	if !tea.BoolValue(util.IsUnset(request.TmComment)) {
		query["TmComment"] = request.TmComment
	}

	if !tea.BoolValue(util.IsUnset(request.TmIcon)) {
		query["TmIcon"] = request.TmIcon
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.TmNameType)) {
		query["TmNameType"] = request.TmNameType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckTrademarkOrder"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckTrademarkOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckTrademarkOrder(request *CheckTrademarkOrderRequest) (_result *CheckTrademarkOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckTrademarkOrderResponse{}
	_body, _err := client.CheckTrademarkOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CombineLoaWithOptions(request *CombineLoaRequest, runtime *util.RuntimeOptions) (_result *CombineLoaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.ApplicantType)) {
		query["ApplicantType"] = request.ApplicantType
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactPhone)) {
		query["ContactPhone"] = request.ContactPhone
	}

	if !tea.BoolValue(util.IsUnset(request.ContactPostcode)) {
		query["ContactPostcode"] = request.ContactPostcode
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialId)) {
		query["MaterialId"] = request.MaterialId
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialName)) {
		query["MaterialName"] = request.MaterialName
	}

	if !tea.BoolValue(util.IsUnset(request.Nationality)) {
		query["Nationality"] = request.Nationality
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalType)) {
		query["PersonalType"] = request.PersonalType
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.TmNumber)) {
		query["TmNumber"] = request.TmNumber
	}

	if !tea.BoolValue(util.IsUnset(request.TmProduceType)) {
		query["TmProduceType"] = request.TmProduceType
	}

	if !tea.BoolValue(util.IsUnset(request.TrademarkName)) {
		query["TrademarkName"] = request.TrademarkName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CombineLoa"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CombineLoaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CombineLoa(request *CombineLoaRequest) (_result *CombineLoaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CombineLoaResponse{}
	_body, _err := client.CombineLoaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CombineWTSWithOptions(request *CombineWTSRequest, runtime *util.RuntimeOptions) (_result *CombineWTSResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.Contact)) {
		query["Contact"] = request.Contact
	}

	if !tea.BoolValue(util.IsUnset(request.ContactAddressPost)) {
		query["ContactAddressPost"] = request.ContactAddressPost
	}

	if !tea.BoolValue(util.IsUnset(request.ContactMobile)) {
		query["ContactMobile"] = request.ContactMobile
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialId)) {
		query["MaterialId"] = request.MaterialId
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialName)) {
		query["MaterialName"] = request.MaterialName
	}

	if !tea.BoolValue(util.IsUnset(request.Nationality)) {
		query["Nationality"] = request.Nationality
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.TmNum)) {
		query["TmNum"] = request.TmNum
	}

	if !tea.BoolValue(util.IsUnset(request.TmProduceType)) {
		query["TmProduceType"] = request.TmProduceType
	}

	if !tea.BoolValue(util.IsUnset(request.TrademarkName)) {
		query["TrademarkName"] = request.TrademarkName
	}

	if !tea.BoolValue(util.IsUnset(request.WtsType)) {
		query["WtsType"] = request.WtsType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CombineWTS"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CombineWTSResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CombineWTS(request *CombineWTSRequest) (_result *CombineWTSResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CombineWTSResponse{}
	_body, _err := client.CombineWTSWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ComplementIntentionUserIdWithOptions(request *ComplementIntentionUserIdRequest, runtime *util.RuntimeOptions) (_result *ComplementIntentionUserIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunKp)) {
		query["AliyunKp"] = request.AliyunKp
	}

	if !tea.BoolValue(util.IsUnset(request.Bid)) {
		query["Bid"] = request.Bid
	}

	if !tea.BoolValue(util.IsUnset(request.CallerParentId)) {
		query["CallerParentId"] = request.CallerParentId
	}

	if !tea.BoolValue(util.IsUnset(request.CallerType)) {
		query["CallerType"] = request.CallerType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.ComplementUserId)) {
		body["ComplementUserId"] = request.ComplementUserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ComplementIntentionUserId"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ComplementIntentionUserIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ComplementIntentionUserId(request *ComplementIntentionUserIdRequest) (_result *ComplementIntentionUserIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ComplementIntentionUserIdResponse{}
	_body, _err := client.ComplementIntentionUserIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfirmAdditionalMaterialWithOptions(request *ConfirmAdditionalMaterialRequest, runtime *util.RuntimeOptions) (_result *ConfirmAdditionalMaterialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		query["Note"] = request.Note
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfirmAdditionalMaterial"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfirmAdditionalMaterialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfirmAdditionalMaterial(request *ConfirmAdditionalMaterialRequest) (_result *ConfirmAdditionalMaterialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfirmAdditionalMaterialResponse{}
	_body, _err := client.ConfirmAdditionalMaterialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfirmApplicantWithOptions(request *ConfirmApplicantRequest, runtime *util.RuntimeOptions) (_result *ConfirmApplicantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		query["Note"] = request.Note
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfirmApplicant"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfirmApplicantResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfirmApplicant(request *ConfirmApplicantRequest) (_result *ConfirmApplicantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfirmApplicantResponse{}
	_body, _err := client.ConfirmApplicantWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfirmDissentOriginalWithOptions(request *ConfirmDissentOriginalRequest, runtime *util.RuntimeOptions) (_result *ConfirmDissentOriginalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactAddress)) {
		query["ContactAddress"] = request.ContactAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCity)) {
		query["ContactCity"] = request.ContactCity
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCounty)) {
		query["ContactCounty"] = request.ContactCounty
	}

	if !tea.BoolValue(util.IsUnset(request.ContactDistrict)) {
		query["ContactDistrict"] = request.ContactDistrict
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactNumber)) {
		query["ContactNumber"] = request.ContactNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ContactProvince)) {
		query["ContactProvince"] = request.ContactProvince
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfirmDissentOriginal"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfirmDissentOriginalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfirmDissentOriginal(request *ConfirmDissentOriginalRequest) (_result *ConfirmDissentOriginalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfirmDissentOriginalResponse{}
	_body, _err := client.ConfirmDissentOriginalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConvertImageToGrayWithOptions(request *ConvertImageToGrayRequest, runtime *util.RuntimeOptions) (_result *ConvertImageToGrayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		query["OssKey"] = request.OssKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConvertImageToGray"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConvertImageToGrayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConvertImageToGray(request *ConvertImageToGrayRequest) (_result *ConvertImageToGrayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConvertImageToGrayResponse{}
	_body, _err := client.ConvertImageToGrayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyApplicantWithOptions(request *CopyApplicantRequest, runtime *util.RuntimeOptions) (_result *CopyApplicantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CopyApplicant"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CopyApplicantResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyApplicant(request *CopyApplicantRequest) (_result *CopyApplicantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyApplicantResponse{}
	_body, _err := client.CopyApplicantWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIntentionOrderWithOptions(request *CreateIntentionOrderRequest, runtime *util.RuntimeOptions) (_result *CreateIntentionOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.IntentionBizId)) {
		query["IntentionBizId"] = request.IntentionBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIntentionOrder"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIntentionOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIntentionOrder(request *CreateIntentionOrderRequest) (_result *CreateIntentionOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIntentionOrderResponse{}
	_body, _err := client.CreateIntentionOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIntentionOrderGeneratingPayWithOptions(request *CreateIntentionOrderGeneratingPayRequest, runtime *util.RuntimeOptions) (_result *CreateIntentionOrderGeneratingPayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.IntentionBizId)) {
		query["IntentionBizId"] = request.IntentionBizId
	}

	if !tea.BoolValue(util.IsUnset(request.PaymentCallback)) {
		query["PaymentCallback"] = request.PaymentCallback
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateIntentionOrderGeneratingPay"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateIntentionOrderGeneratingPayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIntentionOrderGeneratingPay(request *CreateIntentionOrderGeneratingPayRequest) (_result *CreateIntentionOrderGeneratingPayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIntentionOrderGeneratingPayResponse{}
	_body, _err := client.CreateIntentionOrderGeneratingPayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTrademarkOrderWithOptions(request *CreateTrademarkOrderRequest, runtime *util.RuntimeOptions) (_result *CreateTrademarkOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgreementId)) {
		query["AgreementId"] = request.AgreementId
	}

	if !tea.BoolValue(util.IsUnset(request.BigDipperSource)) {
		query["BigDipperSource"] = request.BigDipperSource
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.IsBlackIcon)) {
		query["IsBlackIcon"] = request.IsBlackIcon
	}

	if !tea.BoolValue(util.IsUnset(request.LegalNoticeKey)) {
		query["LegalNoticeKey"] = request.LegalNoticeKey
	}

	if !tea.BoolValue(util.IsUnset(request.LoaOssKey)) {
		query["LoaOssKey"] = request.LoaOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialId)) {
		query["MaterialId"] = request.MaterialId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderData)) {
		query["OrderData"] = request.OrderData
	}

	if !tea.BoolValue(util.IsUnset(request.PartnerCode)) {
		query["PartnerCode"] = request.PartnerCode
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNum)) {
		query["PhoneNum"] = request.PhoneNum
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.RealUserName)) {
		query["RealUserName"] = request.RealUserName
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterName)) {
		query["RegisterName"] = request.RegisterName
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterNumber)) {
		query["RegisterNumber"] = request.RegisterNumber
	}

	if !tea.BoolValue(util.IsUnset(request.RenewInfoId)) {
		query["RenewInfoId"] = request.RenewInfoId
	}

	if !tea.BoolValue(util.IsUnset(request.RootCode)) {
		query["RootCode"] = request.RootCode
	}

	if !tea.BoolValue(util.IsUnset(request.SessionId)) {
		query["SessionId"] = request.SessionId
	}

	if !tea.BoolValue(util.IsUnset(request.TmComment)) {
		query["TmComment"] = request.TmComment
	}

	if !tea.BoolValue(util.IsUnset(request.TmIcon)) {
		query["TmIcon"] = request.TmIcon
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.TmNameType)) {
		query["TmNameType"] = request.TmNameType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Ua)) {
		query["Ua"] = request.Ua
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTrademarkOrder"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTrademarkOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTrademarkOrder(request *CreateTrademarkOrderRequest) (_result *CreateTrademarkOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTrademarkOrderResponse{}
	_body, _err := client.CreateTrademarkOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMaterialWithOptions(request *DeleteMaterialRequest, runtime *util.RuntimeOptions) (_result *DeleteMaterialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMaterial"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMaterialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMaterial(request *DeleteMaterialRequest) (_result *DeleteMaterialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMaterialResponse{}
	_body, _err := client.DeleteMaterialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTmMonitorRuleWithOptions(request *DeleteTmMonitorRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteTmMonitorRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTmMonitorRule"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTmMonitorRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTmMonitorRule(request *DeleteTmMonitorRuleRequest) (_result *DeleteTmMonitorRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTmMonitorRuleResponse{}
	_body, _err := client.DeleteTmMonitorRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTrademarkApplicationWithOptions(request *DeleteTrademarkApplicationRequest, runtime *util.RuntimeOptions) (_result *DeleteTrademarkApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTrademarkApplication"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTrademarkApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTrademarkApplication(request *DeleteTrademarkApplicationRequest) (_result *DeleteTrademarkApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTrademarkApplicationResponse{}
	_body, _err := client.DeleteTrademarkApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DenySupplementWithOptions(request *DenySupplementRequest, runtime *util.RuntimeOptions) (_result *DenySupplementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DenySupplement"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DenySupplementResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DenySupplement(request *DenySupplementRequest) (_result *DenySupplementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DenySupplementResponse{}
	_body, _err := client.DenySupplementWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescirbeCombineTrademarkWithOptions(request *DescirbeCombineTrademarkRequest, runtime *util.RuntimeOptions) (_result *DescirbeCombineTrademarkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccurateMatch)) {
		query["AccurateMatch"] = request.AccurateMatch
	}

	if !tea.BoolValue(util.IsUnset(request.Classification)) {
		query["Classification"] = request.Classification
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerName)) {
		query["OwnerName"] = request.OwnerName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Products)) {
		query["Products"] = request.Products
	}

	if !tea.BoolValue(util.IsUnset(request.RegistrationNumber)) {
		query["RegistrationNumber"] = request.RegistrationNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SimilarGroups)) {
		query["SimilarGroups"] = request.SimilarGroups
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescirbeCombineTrademark"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescirbeCombineTrademarkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescirbeCombineTrademark(request *DescirbeCombineTrademarkRequest) (_result *DescirbeCombineTrademarkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescirbeCombineTrademarkResponse{}
	_body, _err := client.DescirbeCombineTrademarkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FillLogisticsWithOptions(request *FillLogisticsRequest, runtime *util.RuntimeOptions) (_result *FillLogisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Logistics)) {
		query["Logistics"] = request.Logistics
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FillLogistics"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FillLogisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FillLogistics(request *FillLogisticsRequest) (_result *FillLogisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FillLogisticsResponse{}
	_body, _err := client.FillLogisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FilterUnavailableCodesWithOptions(tmpReq *FilterUnavailableCodesRequest, runtime *util.RuntimeOptions) (_result *FilterUnavailableCodesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &FilterUnavailableCodesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Codes)) {
		request.CodesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Codes, tea.String("Codes"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CodesShrink)) {
		query["Codes"] = request.CodesShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FilterUnavailableCodes"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FilterUnavailableCodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FilterUnavailableCodes(request *FilterUnavailableCodesRequest) (_result *FilterUnavailableCodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FilterUnavailableCodesResponse{}
	_body, _err := client.FilterUnavailableCodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ForceUploadTrademarkOnsaleWithOptions(request *ForceUploadTrademarkOnsaleRequest, runtime *util.RuntimeOptions) (_result *ForceUploadTrademarkOnsaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.ClassificationCode)) {
		query["ClassificationCode"] = request.ClassificationCode
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Label)) {
		query["Label"] = request.Label
	}

	if !tea.BoolValue(util.IsUnset(request.OriginalPrice)) {
		query["OriginalPrice"] = request.OriginalPrice
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerEnName)) {
		query["OwnerEnName"] = request.OwnerEnName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerName)) {
		query["OwnerName"] = request.OwnerName
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.RegAnnDate)) {
		query["RegAnnDate"] = request.RegAnnDate
	}

	if !tea.BoolValue(util.IsUnset(request.SecondaryClassification)) {
		query["SecondaryClassification"] = request.SecondaryClassification
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdClassification)) {
		query["ThirdClassification"] = request.ThirdClassification
	}

	if !tea.BoolValue(util.IsUnset(request.TmIcon)) {
		query["TmIcon"] = request.TmIcon
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.TmNumber)) {
		query["TmNumber"] = request.TmNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ForceUploadTrademarkOnsale"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ForceUploadTrademarkOnsaleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ForceUploadTrademarkOnsale(request *ForceUploadTrademarkOnsaleRequest) (_result *ForceUploadTrademarkOnsaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ForceUploadTrademarkOnsaleResponse{}
	_body, _err := client.ForceUploadTrademarkOnsaleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateQrCodeWithOptions(request *GenerateQrCodeRequest, runtime *util.RuntimeOptions) (_result *GenerateQrCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FieldKey)) {
		query["FieldKey"] = request.FieldKey
	}

	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		query["OssKey"] = request.OssKey
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateQrCode"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateQrCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateQrCode(request *GenerateQrCodeRequest) (_result *GenerateQrCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateQrCodeResponse{}
	_body, _err := client.GenerateQrCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateUploadFilePolicyWithOptions(request *GenerateUploadFilePolicyRequest, runtime *util.RuntimeOptions) (_result *GenerateUploadFilePolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		query["FileType"] = request.FileType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateUploadFilePolicy"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateUploadFilePolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateUploadFilePolicy(request *GenerateUploadFilePolicyRequest) (_result *GenerateUploadFilePolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateUploadFilePolicyResponse{}
	_body, _err := client.GenerateUploadFilePolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAuthorizationLetterVersionWithOptions(request *GetAuthorizationLetterVersionRequest, runtime *util.RuntimeOptions) (_result *GetAuthorizationLetterVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		query["OssKey"] = request.OssKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAuthorizationLetterVersion"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAuthorizationLetterVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAuthorizationLetterVersion(request *GetAuthorizationLetterVersionRequest) (_result *GetAuthorizationLetterVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAuthorizationLetterVersionResponse{}
	_body, _err := client.GetAuthorizationLetterVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDefaultPrincipalWithOptions(runtime *util.RuntimeOptions) (_result *GetDefaultPrincipalResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetDefaultPrincipal"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDefaultPrincipalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDefaultPrincipal() (_result *GetDefaultPrincipalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDefaultPrincipalResponse{}
	_body, _err := client.GetDefaultPrincipalWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDefaultPrincipalNameWithOptions(request *GetDefaultPrincipalNameRequest, runtime *util.RuntimeOptions) (_result *GetDefaultPrincipalNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDefaultPrincipalName"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDefaultPrincipalNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDefaultPrincipalName(request *GetDefaultPrincipalNameRequest) (_result *GetDefaultPrincipalNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDefaultPrincipalNameResponse{}
	_body, _err := client.GetDefaultPrincipalNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNotaryOrderWithOptions(request *GetNotaryOrderRequest, runtime *util.RuntimeOptions) (_result *GetNotaryOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NotaryOrderId)) {
		query["NotaryOrderId"] = request.NotaryOrderId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNotaryOrder"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNotaryOrderResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNotaryOrder(request *GetNotaryOrderRequest) (_result *GetNotaryOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNotaryOrderResponse{}
	_body, _err := client.GetNotaryOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSupportPrincipalNameWithOptions(runtime *util.RuntimeOptions) (_result *GetSupportPrincipalNameResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetSupportPrincipalName"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSupportPrincipalNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSupportPrincipalName() (_result *GetSupportPrincipalNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSupportPrincipalNameResponse{}
	_body, _err := client.GetSupportPrincipalNameWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertMaterialWithOptions(request *InsertMaterialRequest, runtime *util.RuntimeOptions) (_result *InsertMaterialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessLicenceOssKey)) {
		query["BusinessLicenceOssKey"] = request.BusinessLicenceOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.CardNumber)) {
		query["CardNumber"] = request.CardNumber
	}

	if !tea.BoolValue(util.IsUnset(request.City)) {
		query["City"] = request.City
	}

	if !tea.BoolValue(util.IsUnset(request.ContactAddress)) {
		query["ContactAddress"] = request.ContactAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCity)) {
		query["ContactCity"] = request.ContactCity
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCounty)) {
		query["ContactCounty"] = request.ContactCounty
	}

	if !tea.BoolValue(util.IsUnset(request.ContactDistrict)) {
		query["ContactDistrict"] = request.ContactDistrict
	}

	if !tea.BoolValue(util.IsUnset(request.ContactEmail)) {
		query["ContactEmail"] = request.ContactEmail
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactNumber)) {
		query["ContactNumber"] = request.ContactNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ContactProvince)) {
		query["ContactProvince"] = request.ContactProvince
	}

	if !tea.BoolValue(util.IsUnset(request.ContactZipcode)) {
		query["ContactZipcode"] = request.ContactZipcode
	}

	if !tea.BoolValue(util.IsUnset(request.Country)) {
		query["Country"] = request.Country
	}

	if !tea.BoolValue(util.IsUnset(request.EAddress)) {
		query["EAddress"] = request.EAddress
	}

	if !tea.BoolValue(util.IsUnset(request.EName)) {
		query["EName"] = request.EName
	}

	if !tea.BoolValue(util.IsUnset(request.IdCardName)) {
		query["IdCardName"] = request.IdCardName
	}

	if !tea.BoolValue(util.IsUnset(request.IdCardNumber)) {
		query["IdCardNumber"] = request.IdCardNumber
	}

	if !tea.BoolValue(util.IsUnset(request.IdCardOssKey)) {
		query["IdCardOssKey"] = request.IdCardOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.LegalNoticeOssKey)) {
		query["LegalNoticeOssKey"] = request.LegalNoticeOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.LoaOssKey)) {
		query["LoaOssKey"] = request.LoaOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PassportOssKey)) {
		query["PassportOssKey"] = request.PassportOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalType)) {
		query["PersonalType"] = request.PersonalType
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.Province)) {
		query["Province"] = request.Province
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.Town)) {
		query["Town"] = request.Town
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertMaterial"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertMaterialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertMaterial(request *InsertMaterialRequest) (_result *InsertMaterialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertMaterialResponse{}
	_body, _err := client.InsertMaterialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertRenewInfoWithOptions(request *InsertRenewInfoRequest, runtime *util.RuntimeOptions) (_result *InsertRenewInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.EngAddress)) {
		query["EngAddress"] = request.EngAddress
	}

	if !tea.BoolValue(util.IsUnset(request.EngName)) {
		query["EngName"] = request.EngName
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterTime)) {
		query["RegisterTime"] = request.RegisterTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertRenewInfo"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertRenewInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertRenewInfo(request *InsertRenewInfoRequest) (_result *InsertRenewInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertRenewInfoResponse{}
	_body, _err := client.InsertRenewInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertTmMonitorRuleWithOptions(tmpReq *InsertTmMonitorRuleRequest, runtime *util.RuntimeOptions) (_result *InsertTmMonitorRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InsertTmMonitorRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Classification)) {
		request.ClassificationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Classification, tea.String("Classification"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.NotifyStatus)) {
		request.NotifyStatusShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.NotifyStatus, tea.String("NotifyStatus"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClassificationShrink)) {
		query["Classification"] = request.ClassificationShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndApplyDate)) {
		query["EndApplyDate"] = request.EndApplyDate
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyStatusShrink)) {
		query["NotifyStatus"] = request.NotifyStatusShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RuleKeyword)) {
		query["RuleKeyword"] = request.RuleKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleSource)) {
		query["RuleSource"] = request.RuleSource
	}

	if !tea.BoolValue(util.IsUnset(request.RuleType)) {
		query["RuleType"] = request.RuleType
	}

	if !tea.BoolValue(util.IsUnset(request.StartApplyDate)) {
		query["StartApplyDate"] = request.StartApplyDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertTmMonitorRule"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertTmMonitorRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertTmMonitorRule(request *InsertTmMonitorRuleRequest) (_result *InsertTmMonitorRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertTmMonitorRuleResponse{}
	_body, _err := client.InsertTmMonitorRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNotaryInfosWithOptions(request *ListNotaryInfosRequest, runtime *util.RuntimeOptions) (_result *ListNotaryInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizOrderNo)) {
		query["BizOrderNo"] = request.BizOrderNo
	}

	if !tea.BoolValue(util.IsUnset(request.NotaryType)) {
		query["NotaryType"] = request.NotaryType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		query["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNotaryInfos"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNotaryInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNotaryInfos(request *ListNotaryInfosRequest) (_result *ListNotaryInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNotaryInfosResponse{}
	_body, _err := client.ListNotaryInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNotaryOrdersWithOptions(request *ListNotaryOrdersRequest, runtime *util.RuntimeOptions) (_result *ListNotaryOrdersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunOrderId)) {
		query["AliyunOrderId"] = request.AliyunOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.EndOrderDate)) {
		query["EndOrderDate"] = request.EndOrderDate
	}

	if !tea.BoolValue(util.IsUnset(request.NotaryStatus)) {
		query["NotaryStatus"] = request.NotaryStatus
	}

	if !tea.BoolValue(util.IsUnset(request.NotaryType)) {
		query["NotaryType"] = request.NotaryType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortByType)) {
		query["SortByType"] = request.SortByType
	}

	if !tea.BoolValue(util.IsUnset(request.SortKeyType)) {
		query["SortKeyType"] = request.SortKeyType
	}

	if !tea.BoolValue(util.IsUnset(request.StartOrderDate)) {
		query["StartOrderDate"] = request.StartOrderDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNotaryOrders"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNotaryOrdersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNotaryOrders(request *ListNotaryOrdersRequest) (_result *ListNotaryOrdersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNotaryOrdersResponse{}
	_body, _err := client.ListNotaryOrdersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTrademarkSbjKeyWithOptions(request *ListTrademarkSbjKeyRequest, runtime *util.RuntimeOptions) (_result *ListTrademarkSbjKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PrincipalKey)) {
		query["PrincipalKey"] = request.PrincipalKey
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTrademarkSbjKey"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTrademarkSbjKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTrademarkSbjKey(request *ListTrademarkSbjKeyRequest) (_result *ListTrademarkSbjKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTrademarkSbjKeyResponse{}
	_body, _err := client.ListTrademarkSbjKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySubmitTransferMaterailWithOptions(tmpReq *ModifySubmitTransferMaterailRequest, runtime *util.RuntimeOptions) (_result *ModifySubmitTransferMaterailResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ModifySubmitTransferMaterailShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Other)) {
		request.OtherShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Other, tea.String("Other"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssigneeProxy)) {
		query["AssigneeProxy"] = request.AssigneeProxy
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.BuyerBusinessLicenseTranslation)) {
		query["BuyerBusinessLicenseTranslation"] = request.BuyerBusinessLicenseTranslation
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		query["Note"] = request.Note
	}

	if !tea.BoolValue(util.IsUnset(request.SellerBusinessLicenseTranslation)) {
		query["SellerBusinessLicenseTranslation"] = request.SellerBusinessLicenseTranslation
	}

	if !tea.BoolValue(util.IsUnset(request.TradeMaterialFullUpdate)) {
		query["TradeMaterialFullUpdate"] = request.TradeMaterialFullUpdate
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Addr)) {
		body["Addr"] = request.Addr
	}

	if !tea.BoolValue(util.IsUnset(request.BuyerBusinessLicense)) {
		body["BuyerBusinessLicense"] = request.BuyerBusinessLicense
	}

	if !tea.BoolValue(util.IsUnset(request.BuyerIdCard)) {
		body["BuyerIdCard"] = request.BuyerIdCard
	}

	if !tea.BoolValue(util.IsUnset(request.CardNo)) {
		body["CardNo"] = request.CardNo
	}

	if !tea.BoolValue(util.IsUnset(request.CardType)) {
		body["CardType"] = request.CardType
	}

	if !tea.BoolValue(util.IsUnset(request.Complete)) {
		body["Complete"] = request.Complete
	}

	if !tea.BoolValue(util.IsUnset(request.ContactEmail)) {
		body["ContactEmail"] = request.ContactEmail
	}

	if !tea.BoolValue(util.IsUnset(request.ContactMobile)) {
		body["ContactMobile"] = request.ContactMobile
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		body["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Notarization)) {
		body["Notarization"] = request.Notarization
	}

	if !tea.BoolValue(util.IsUnset(request.OtherShrink)) {
		body["Other"] = request.OtherShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RegistrationCert)) {
		body["RegistrationCert"] = request.RegistrationCert
	}

	if !tea.BoolValue(util.IsUnset(request.SellerApply)) {
		body["SellerApply"] = request.SellerApply
	}

	if !tea.BoolValue(util.IsUnset(request.SellerBusinessLicense)) {
		body["SellerBusinessLicense"] = request.SellerBusinessLicense
	}

	if !tea.BoolValue(util.IsUnset(request.SellerIdCard)) {
		body["SellerIdCard"] = request.SellerIdCard
	}

	if !tea.BoolValue(util.IsUnset(request.SellerProxy)) {
		body["SellerProxy"] = request.SellerProxy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySubmitTransferMaterail"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySubmitTransferMaterailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySubmitTransferMaterail(request *ModifySubmitTransferMaterailRequest) (_result *ModifySubmitTransferMaterailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySubmitTransferMaterailResponse{}
	_body, _err := client.ModifySubmitTransferMaterailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) OperateProduceWithOptions(request *OperateProduceRequest, runtime *util.RuntimeOptions) (_result *OperateProduceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ExtMap)) {
		query["ExtMap"] = request.ExtMap
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateProduce"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateProduceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) OperateProduce(request *OperateProduceRequest) (_result *OperateProduceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateProduceResponse{}
	_body, _err := client.OperateProduceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PartnerUpdateTrademarkNameWithOptions(request *PartnerUpdateTrademarkNameRequest, runtime *util.RuntimeOptions) (_result *PartnerUpdateTrademarkNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunKp)) {
		query["AliyunKp"] = request.AliyunKp
	}

	if !tea.BoolValue(util.IsUnset(request.Bid)) {
		query["Bid"] = request.Bid
	}

	if !tea.BoolValue(util.IsUnset(request.CallerParentId)) {
		query["CallerParentId"] = request.CallerParentId
	}

	if !tea.BoolValue(util.IsUnset(request.CallerType)) {
		query["CallerType"] = request.CallerType
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.EventSceneType)) {
		body["EventSceneType"] = request.EventSceneType
	}

	if !tea.BoolValue(util.IsUnset(request.IntentionBizId)) {
		body["IntentionBizId"] = request.IntentionBizId
	}

	if !tea.BoolValue(util.IsUnset(request.TmComment)) {
		body["TmComment"] = request.TmComment
	}

	if !tea.BoolValue(util.IsUnset(request.TmIcon)) {
		body["TmIcon"] = request.TmIcon
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		body["TmName"] = request.TmName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PartnerUpdateTrademarkName"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PartnerUpdateTrademarkNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PartnerUpdateTrademarkName(request *PartnerUpdateTrademarkNameRequest) (_result *PartnerUpdateTrademarkNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PartnerUpdateTrademarkNameResponse{}
	_body, _err := client.PartnerUpdateTrademarkNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCommunicationLogsWithOptions(request *QueryCommunicationLogsRequest, runtime *util.RuntimeOptions) (_result *QueryCommunicationLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCommunicationLogs"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCommunicationLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCommunicationLogs(request *QueryCommunicationLogsRequest) (_result *QueryCommunicationLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCommunicationLogsResponse{}
	_body, _err := client.QueryCommunicationLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCredentialsInfoWithOptions(request *QueryCredentialsInfoRequest, runtime *util.RuntimeOptions) (_result *QueryCredentialsInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CompanyName)) {
		query["CompanyName"] = request.CompanyName
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaterialType)) {
		body["MaterialType"] = request.MaterialType
	}

	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		body["OssKey"] = request.OssKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCredentialsInfo"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCredentialsInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCredentialsInfo(request *QueryCredentialsInfoRequest) (_result *QueryCredentialsInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCredentialsInfoResponse{}
	_body, _err := client.QueryCredentialsInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryExtensionAttributeWithOptions(request *QueryExtensionAttributeRequest, runtime *util.RuntimeOptions) (_result *QueryExtensionAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AttributeKey)) {
		query["AttributeKey"] = request.AttributeKey
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryExtensionAttribute"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryExtensionAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryExtensionAttribute(request *QueryExtensionAttributeRequest) (_result *QueryExtensionAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryExtensionAttributeResponse{}
	_body, _err := client.QueryExtensionAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryIntentionDetailWithOptions(request *QueryIntentionDetailRequest, runtime *util.RuntimeOptions) (_result *QueryIntentionDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryIntentionDetail"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryIntentionDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryIntentionDetail(request *QueryIntentionDetailRequest) (_result *QueryIntentionDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryIntentionDetailResponse{}
	_body, _err := client.QueryIntentionDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryIntentionListWithOptions(request *QueryIntentionListRequest, runtime *util.RuntimeOptions) (_result *QueryIntentionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortFiled)) {
		query["SortFiled"] = request.SortFiled
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		query["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryIntentionList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryIntentionListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryIntentionList(request *QueryIntentionListRequest) (_result *QueryIntentionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryIntentionListResponse{}
	_body, _err := client.QueryIntentionListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryIntentionOwnerWithOptions(request *QueryIntentionOwnerRequest, runtime *util.RuntimeOptions) (_result *QueryIntentionOwnerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryIntentionOwner"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryIntentionOwnerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryIntentionOwner(request *QueryIntentionOwnerRequest) (_result *QueryIntentionOwnerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryIntentionOwnerResponse{}
	_body, _err := client.QueryIntentionOwnerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryIntentionPriceWithOptions(request *QueryIntentionPriceRequest, runtime *util.RuntimeOptions) (_result *QueryIntentionPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.IntentionBizId)) {
		query["IntentionBizId"] = request.IntentionBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryIntentionPrice"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryIntentionPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryIntentionPrice(request *QueryIntentionPriceRequest) (_result *QueryIntentionPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryIntentionPriceResponse{}
	_body, _err := client.QueryIntentionPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMaterialWithOptions(request *QueryMaterialRequest, runtime *util.RuntimeOptions) (_result *QueryMaterialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.QueryUnconfirmedInfo)) {
		query["QueryUnconfirmedInfo"] = request.QueryUnconfirmedInfo
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMaterial"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMaterialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMaterial(request *QueryMaterialRequest) (_result *QueryMaterialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMaterialResponse{}
	_body, _err := client.QueryMaterialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMaterialListWithOptions(request *QueryMaterialListRequest, runtime *util.RuntimeOptions) (_result *QueryMaterialListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CardNumber)) {
		query["CardNumber"] = request.CardNumber
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialId)) {
		query["MaterialId"] = request.MaterialId
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialVersion)) {
		query["MaterialVersion"] = request.MaterialVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.SystemVersion)) {
		query["SystemVersion"] = request.SystemVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMaterialList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMaterialListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMaterialList(request *QueryMaterialListRequest) (_result *QueryMaterialListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMaterialListResponse{}
	_body, _err := client.QueryMaterialListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMonitorKeywordsWithOptions(request *QueryMonitorKeywordsRequest, runtime *util.RuntimeOptions) (_result *QueryMonitorKeywordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keywords)) {
		query["Keywords"] = request.Keywords
	}

	if !tea.BoolValue(util.IsUnset(request.RuleType)) {
		query["RuleType"] = request.RuleType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMonitorKeywords"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMonitorKeywordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMonitorKeywords(request *QueryMonitorKeywordsRequest) (_result *QueryMonitorKeywordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMonitorKeywordsResponse{}
	_body, _err := client.QueryMonitorKeywordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryOfficialFileCustomListWithOptions(request *QueryOfficialFileCustomListRequest, runtime *util.RuntimeOptions) (_result *QueryOfficialFileCustomListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryOfficialFileCustomList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryOfficialFileCustomListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryOfficialFileCustomList(request *QueryOfficialFileCustomListRequest) (_result *QueryOfficialFileCustomListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOfficialFileCustomListResponse{}
	_body, _err := client.QueryOfficialFileCustomListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryOrderLogisticsListWithOptions(request *QueryOrderLogisticsListRequest, runtime *util.RuntimeOptions) (_result *QueryOrderLogisticsListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		body["FileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		body["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProduceOrderId)) {
		body["ProduceOrderId"] = request.ProduceOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterNumber)) {
		body["RegisterNumber"] = request.RegisterNumber
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryOrderLogisticsList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryOrderLogisticsListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryOrderLogisticsList(request *QueryOrderLogisticsListRequest) (_result *QueryOrderLogisticsListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOrderLogisticsListResponse{}
	_body, _err := client.QueryOrderLogisticsListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryOssResourcesWithOptions(request *QueryOssResourcesRequest, runtime *util.RuntimeOptions) (_result *QueryOssResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryOssResources"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryOssResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryOssResources(request *QueryOssResourcesRequest) (_result *QueryOssResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOssResourcesResponse{}
	_body, _err := client.QueryOssResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProduceDetailWithOptions(request *QueryProduceDetailRequest, runtime *util.RuntimeOptions) (_result *QueryProduceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyNo)) {
		query["ApplyNo"] = request.ApplyNo
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryProduceDetail"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryProduceDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProduceDetail(request *QueryProduceDetailRequest) (_result *QueryProduceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProduceDetailResponse{}
	_body, _err := client.QueryProduceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryProduceListWithOptions(request *QueryProduceListRequest, runtime *util.RuntimeOptions) (_result *QueryProduceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeLeft)) {
		query["CreateTimeLeft"] = request.CreateTimeLeft
	}

	if !tea.BoolValue(util.IsUnset(request.CreateTimeRight)) {
		query["CreateTimeRight"] = request.CreateTimeRight
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialName)) {
		query["MaterialName"] = request.MaterialName
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.TmNumber)) {
		query["TmNumber"] = request.TmNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryProduceList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryProduceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryProduceList(request *QueryProduceListRequest) (_result *QueryProduceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryProduceListResponse{}
	_body, _err := client.QueryProduceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryQrCodeUploadStatusWithOptions(request *QueryQrCodeUploadStatusRequest, runtime *util.RuntimeOptions) (_result *QueryQrCodeUploadStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FieldKey)) {
		query["FieldKey"] = request.FieldKey
	}

	if !tea.BoolValue(util.IsUnset(request.OssKey)) {
		query["OssKey"] = request.OssKey
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryQrCodeUploadStatus"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryQrCodeUploadStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryQrCodeUploadStatus(request *QueryQrCodeUploadStatusRequest) (_result *QueryQrCodeUploadStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryQrCodeUploadStatusResponse{}
	_body, _err := client.QueryQrCodeUploadStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySbjRuleWithOptions(request *QuerySbjRuleRequest, runtime *util.RuntimeOptions) (_result *QuerySbjRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySbjRule"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySbjRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySbjRule(request *QuerySbjRuleRequest) (_result *QuerySbjRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySbjRuleResponse{}
	_body, _err := client.QuerySbjRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySupplementDetailWithOptions(request *QuerySupplementDetailRequest, runtime *util.RuntimeOptions) (_result *QuerySupplementDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySupplementDetail"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySupplementDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySupplementDetail(request *QuerySupplementDetailRequest) (_result *QuerySupplementDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySupplementDetailResponse{}
	_body, _err := client.QuerySupplementDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTaskListWithOptions(request *QueryTaskListRequest, runtime *util.RuntimeOptions) (_result *QueryTaskListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTaskList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTaskListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTaskList(request *QueryTaskListRequest) (_result *QueryTaskListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTaskListResponse{}
	_body, _err := client.QueryTaskListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTmCollectionPageListWithOptions(request *QueryTmCollectionPageListRequest, runtime *util.RuntimeOptions) (_result *QueryTmCollectionPageListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTmCollectionPageList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTmCollectionPageListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTmCollectionPageList(request *QueryTmCollectionPageListRequest) (_result *QueryTmCollectionPageListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTmCollectionPageListResponse{}
	_body, _err := client.QueryTmCollectionPageListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTmSbjProduceWithOptions(request *QueryTmSbjProduceRequest, runtime *util.RuntimeOptions) (_result *QueryTmSbjProduceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HighPriorityBizTypeStr)) {
		query["HighPriorityBizTypeStr"] = request.HighPriorityBizTypeStr
	}

	if !tea.BoolValue(util.IsUnset(request.HighPriorityMaterialNameStr)) {
		query["HighPriorityMaterialNameStr"] = request.HighPriorityMaterialNameStr
	}

	if !tea.BoolValue(util.IsUnset(request.HighPriorityOrderIdStr)) {
		query["HighPriorityOrderIdStr"] = request.HighPriorityOrderIdStr
	}

	if !tea.BoolValue(util.IsUnset(request.HighPriorityUserIdStr)) {
		query["HighPriorityUserIdStr"] = request.HighPriorityUserIdStr
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalKey)) {
		query["PrincipalKey"] = request.PrincipalKey
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.ProducerType)) {
		query["ProducerType"] = request.ProducerType
	}

	if !tea.BoolValue(util.IsUnset(request.QueryOrderPageSize)) {
		query["QueryOrderPageSize"] = request.QueryOrderPageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTmSbjProduce"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTmSbjProduceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTmSbjProduce(request *QueryTmSbjProduceRequest) (_result *QueryTmSbjProduceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTmSbjProduceResponse{}
	_body, _err := client.QueryTmSbjProduceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTmSbjProduceDetailWithOptions(request *QueryTmSbjProduceDetailRequest, runtime *util.RuntimeOptions) (_result *QueryTmSbjProduceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTmSbjProduceDetail"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTmSbjProduceDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTmSbjProduceDetail(request *QueryTmSbjProduceDetailRequest) (_result *QueryTmSbjProduceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTmSbjProduceDetailResponse{}
	_body, _err := client.QueryTmSbjProduceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTradeIntentionUserListWithOptions(request *QueryTradeIntentionUserListRequest, runtime *util.RuntimeOptions) (_result *QueryTradeIntentionUserListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Begin)) {
		query["Begin"] = request.Begin
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTradeIntentionUserList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTradeIntentionUserListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTradeIntentionUserList(request *QueryTradeIntentionUserListRequest) (_result *QueryTradeIntentionUserListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTradeIntentionUserListResponse{}
	_body, _err := client.QueryTradeIntentionUserListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTradeMarkApplicationDetailWithOptions(request *QueryTradeMarkApplicationDetailRequest, runtime *util.RuntimeOptions) (_result *QueryTradeMarkApplicationDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTradeMarkApplicationDetail"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTradeMarkApplicationDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTradeMarkApplicationDetail(request *QueryTradeMarkApplicationDetailRequest) (_result *QueryTradeMarkApplicationDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTradeMarkApplicationDetailResponse{}
	_body, _err := client.QueryTradeMarkApplicationDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTradeMarkApplicationLogsWithOptions(request *QueryTradeMarkApplicationLogsRequest, runtime *util.RuntimeOptions) (_result *QueryTradeMarkApplicationLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTradeMarkApplicationLogs"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTradeMarkApplicationLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTradeMarkApplicationLogs(request *QueryTradeMarkApplicationLogsRequest) (_result *QueryTradeMarkApplicationLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTradeMarkApplicationLogsResponse{}
	_body, _err := client.QueryTradeMarkApplicationLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTradeMarkApplicationsWithOptions(request *QueryTradeMarkApplicationsRequest, runtime *util.RuntimeOptions) (_result *QueryTradeMarkApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.ClassificationCode)) {
		query["ClassificationCode"] = request.ClassificationCode
	}

	if !tea.BoolValue(util.IsUnset(request.Hidden)) {
		query["Hidden"] = request.Hidden
	}

	if !tea.BoolValue(util.IsUnset(request.IntentionBizId)) {
		query["IntentionBizId"] = request.IntentionBizId
	}

	if !tea.BoolValue(util.IsUnset(request.LogisticsNo)) {
		query["LogisticsNo"] = request.LogisticsNo
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialName)) {
		query["MaterialName"] = request.MaterialName
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.SortFiled)) {
		query["SortFiled"] = request.SortFiled
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		query["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.Specification)) {
		query["Specification"] = request.Specification
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.SupplementStatus)) {
		query["SupplementStatus"] = request.SupplementStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.TmNumber)) {
		query["TmNumber"] = request.TmNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTradeMarkApplications"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTradeMarkApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTradeMarkApplications(request *QueryTradeMarkApplicationsRequest) (_result *QueryTradeMarkApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTradeMarkApplicationsResponse{}
	_body, _err := client.QueryTradeMarkApplicationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTradeMarkApplicationsByIntentionWithOptions(request *QueryTradeMarkApplicationsByIntentionRequest, runtime *util.RuntimeOptions) (_result *QueryTradeMarkApplicationsByIntentionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.IntentionBizId)) {
		query["IntentionBizId"] = request.IntentionBizId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TmProduceStatus)) {
		query["TmProduceStatus"] = request.TmProduceStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTradeMarkApplicationsByIntention"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTradeMarkApplicationsByIntentionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTradeMarkApplicationsByIntention(request *QueryTradeMarkApplicationsByIntentionRequest) (_result *QueryTradeMarkApplicationsByIntentionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTradeMarkApplicationsByIntentionResponse{}
	_body, _err := client.QueryTradeMarkApplicationsByIntentionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTradeProduceDetailWithOptions(request *QueryTradeProduceDetailRequest, runtime *util.RuntimeOptions) (_result *QueryTradeProduceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTradeProduceDetail"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTradeProduceDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTradeProduceDetail(request *QueryTradeProduceDetailRequest) (_result *QueryTradeProduceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTradeProduceDetailResponse{}
	_body, _err := client.QueryTradeProduceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTradeProduceListWithOptions(request *QueryTradeProduceListRequest, runtime *util.RuntimeOptions) (_result *QueryTradeProduceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.BuyerStatus)) {
		query["BuyerStatus"] = request.BuyerStatus
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PreOrderId)) {
		query["PreOrderId"] = request.PreOrderId
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterNumber)) {
		query["RegisterNumber"] = request.RegisterNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SortFiled)) {
		query["SortFiled"] = request.SortFiled
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		query["SortOrder"] = request.SortOrder
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTradeProduceList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTradeProduceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTradeProduceList(request *QueryTradeProduceListRequest) (_result *QueryTradeProduceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTradeProduceListResponse{}
	_body, _err := client.QueryTradeProduceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkDetailByApplyNumberWithOptions(request *QueryTrademarkDetailByApplyNumberRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkDetailByApplyNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyNumber)) {
		query["ApplyNumber"] = request.ApplyNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Env)) {
		query["Env"] = request.Env
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkDetailByApplyNumber"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkDetailByApplyNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkDetailByApplyNumber(request *QueryTrademarkDetailByApplyNumberRequest) (_result *QueryTrademarkDetailByApplyNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkDetailByApplyNumberResponse{}
	_body, _err := client.QueryTrademarkDetailByApplyNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkDetailByApplyNumberEspWithOptions(request *QueryTrademarkDetailByApplyNumberEspRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkDetailByApplyNumberEspResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyNumber)) {
		query["ApplyNumber"] = request.ApplyNumber
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkDetailByApplyNumberEsp"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkDetailByApplyNumberEspResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkDetailByApplyNumberEsp(request *QueryTrademarkDetailByApplyNumberEspRequest) (_result *QueryTrademarkDetailByApplyNumberEspResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkDetailByApplyNumberEspResponse{}
	_body, _err := client.QueryTrademarkDetailByApplyNumberEspWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkModelDetailWithOptions(request *QueryTrademarkModelDetailRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkModelDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Env)) {
		query["Env"] = request.Env
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.ReviewSupplementMaterial)) {
		query["ReviewSupplementMaterial"] = request.ReviewSupplementMaterial
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkModelDetail"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkModelDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkModelDetail(request *QueryTrademarkModelDetailRequest) (_result *QueryTrademarkModelDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkModelDetailResponse{}
	_body, _err := client.QueryTrademarkModelDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkModelEspDetailWithOptions(request *QueryTrademarkModelEspDetailRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkModelEspDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkModelEspDetail"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkModelEspDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkModelEspDetail(request *QueryTrademarkModelEspDetailRequest) (_result *QueryTrademarkModelEspDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkModelEspDetailResponse{}
	_body, _err := client.QueryTrademarkModelEspDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkModelEspListWithOptions(request *QueryTrademarkModelEspListRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkModelEspListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.Env)) {
		query["Env"] = request.Env
	}

	if !tea.BoolValue(util.IsUnset(request.OrderId)) {
		query["OrderId"] = request.OrderId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderIdsStr)) {
		query["OrderIdsStr"] = request.OrderIdsStr
	}

	if !tea.BoolValue(util.IsUnset(request.OrderInstanceId)) {
		query["OrderInstanceId"] = request.OrderInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalKey)) {
		query["PrincipalKey"] = request.PrincipalKey
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.SubmitStatus)) {
		query["SubmitStatus"] = request.SubmitStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SubmitTime)) {
		query["SubmitTime"] = request.SubmitTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkModelEspList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkModelEspListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkModelEspList(request *QueryTrademarkModelEspListRequest) (_result *QueryTrademarkModelEspListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkModelEspListResponse{}
	_body, _err := client.QueryTrademarkModelEspListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkModelListWithOptions(request *QueryTrademarkModelListRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkModelListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Env)) {
		query["Env"] = request.Env
	}

	if !tea.BoolValue(util.IsUnset(request.OrderIdsStr)) {
		query["OrderIdsStr"] = request.OrderIdsStr
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalKey)) {
		query["PrincipalKey"] = request.PrincipalKey
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.ProduceTypesStr)) {
		query["ProduceTypesStr"] = request.ProduceTypesStr
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.SubmitStart)) {
		query["SubmitStart"] = request.SubmitStart
	}

	if !tea.BoolValue(util.IsUnset(request.SubmitStatus)) {
		query["SubmitStatus"] = request.SubmitStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SubmitTime)) {
		query["SubmitTime"] = request.SubmitTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkModelList"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkModelListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkModelList(request *QueryTrademarkModelListRequest) (_result *QueryTrademarkModelListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkModelListResponse{}
	_body, _err := client.QueryTrademarkModelListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkMonitorResultsWithOptions(request *QueryTrademarkMonitorResultsRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkMonitorResultsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionType)) {
		query["ActionType"] = request.ActionType
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyYear)) {
		query["ApplyYear"] = request.ApplyYear
	}

	if !tea.BoolValue(util.IsUnset(request.Classification)) {
		query["Classification"] = request.Classification
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProcedureStatus)) {
		query["ProcedureStatus"] = request.ProcedureStatus
	}

	if !tea.BoolValue(util.IsUnset(request.RegistrationNumber)) {
		query["RegistrationNumber"] = request.RegistrationNumber
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkMonitorResults"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkMonitorResultsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkMonitorResults(request *QueryTrademarkMonitorResultsRequest) (_result *QueryTrademarkMonitorResultsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkMonitorResultsResponse{}
	_body, _err := client.QueryTrademarkMonitorResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkMonitorRulesWithOptions(request *QueryTrademarkMonitorRulesRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkMonitorRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUpdate)) {
		query["NotifyUpdate"] = request.NotifyUpdate
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkMonitorRules"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkMonitorRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkMonitorRules(request *QueryTrademarkMonitorRulesRequest) (_result *QueryTrademarkMonitorRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkMonitorRulesResponse{}
	_body, _err := client.QueryTrademarkMonitorRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkOnSaleWithOptions(request *QueryTrademarkOnSaleRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkOnSaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Classification)) {
		query["Classification"] = request.Classification
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterCode)) {
		query["RegisterCode"] = request.RegisterCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterNumber)) {
		query["RegisterNumber"] = request.RegisterNumber
	}

	if !tea.BoolValue(util.IsUnset(request.TmType)) {
		query["TmType"] = request.TmType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkOnSale"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkOnSaleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkOnSale(request *QueryTrademarkOnSaleRequest) (_result *QueryTrademarkOnSaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkOnSaleResponse{}
	_body, _err := client.QueryTrademarkOnSaleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkPriceWithOptions(tmpReq *QueryTrademarkPriceRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkPriceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryTrademarkPriceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.OrderData)) {
		request.OrderDataShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OrderData, tea.String("OrderData"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderDataShrink)) {
		query["OrderData"] = request.OrderDataShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TmIcon)) {
		query["TmIcon"] = request.TmIcon
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkPrice"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkPrice(request *QueryTrademarkPriceRequest) (_result *QueryTrademarkPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkPriceResponse{}
	_body, _err := client.QueryTrademarkPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrademarkUploadAuditResultWithOptions(request *QueryTrademarkUploadAuditResultRequest, runtime *util.RuntimeOptions) (_result *QueryTrademarkUploadAuditResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Classification)) {
		query["Classification"] = request.Classification
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterCode)) {
		query["RegisterCode"] = request.RegisterCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterNumber)) {
		query["RegisterNumber"] = request.RegisterNumber
	}

	if !tea.BoolValue(util.IsUnset(request.TmType)) {
		query["TmType"] = request.TmType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTrademarkUploadAuditResult"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTrademarkUploadAuditResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrademarkUploadAuditResult(request *QueryTrademarkUploadAuditResultRequest) (_result *QueryTrademarkUploadAuditResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrademarkUploadAuditResultResponse{}
	_body, _err := client.QueryTrademarkUploadAuditResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RecordBankBalanceWithOptions(request *RecordBankBalanceRequest, runtime *util.RuntimeOptions) (_result *RecordBankBalanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionDate)) {
		query["ActionDate"] = request.ActionDate
	}

	if !tea.BoolValue(util.IsUnset(request.Balance)) {
		query["Balance"] = request.Balance
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RecordBankBalance"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RecordBankBalanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RecordBankBalance(request *RecordBankBalanceRequest) (_result *RecordBankBalanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecordBankBalanceResponse{}
	_body, _err := client.RecordBankBalanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RefundProduceWithOptions(request *RefundProduceRequest, runtime *util.RuntimeOptions) (_result *RefundProduceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.RefundType)) {
		query["RefundType"] = request.RefundType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefundProduce"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefundProduceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RefundProduce(request *RefundProduceRequest) (_result *RefundProduceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefundProduceResponse{}
	_body, _err := client.RefundProduceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RefuseAdditionalMaterialWithOptions(request *RefuseAdditionalMaterialRequest, runtime *util.RuntimeOptions) (_result *RefuseAdditionalMaterialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		query["Note"] = request.Note
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefuseAdditionalMaterial"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefuseAdditionalMaterialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RefuseAdditionalMaterial(request *RefuseAdditionalMaterialRequest) (_result *RefuseAdditionalMaterialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefuseAdditionalMaterialResponse{}
	_body, _err := client.RefuseAdditionalMaterialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RefuseApplicantWithOptions(request *RefuseApplicantRequest, runtime *util.RuntimeOptions) (_result *RefuseApplicantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		query["Note"] = request.Note
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefuseApplicant"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefuseApplicantResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RefuseApplicant(request *RefuseApplicantRequest) (_result *RefuseApplicantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefuseApplicantResponse{}
	_body, _err := client.RefuseApplicantWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RejectApplicantWithOptions(request *RejectApplicantRequest, runtime *util.RuntimeOptions) (_result *RejectApplicantResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		query["Note"] = request.Note
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RejectApplicant"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RejectApplicantResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RejectApplicant(request *RejectApplicantRequest) (_result *RejectApplicantResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RejectApplicantResponse{}
	_body, _err := client.RejectApplicantWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveClassificationConditionsWithOptions(request *SaveClassificationConditionsRequest, runtime *util.RuntimeOptions) (_result *SaveClassificationConditionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Condition)) {
		query["Condition"] = request.Condition
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveClassificationConditions"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveClassificationConditionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveClassificationConditions(request *SaveClassificationConditionsRequest) (_result *SaveClassificationConditionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveClassificationConditionsResponse{}
	_body, _err := client.SaveClassificationConditionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveExtensionAttributeWithOptions(request *SaveExtensionAttributeRequest, runtime *util.RuntimeOptions) (_result *SaveExtensionAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AttributeKey)) {
		query["AttributeKey"] = request.AttributeKey
	}

	if !tea.BoolValue(util.IsUnset(request.AttributeValue)) {
		query["AttributeValue"] = request.AttributeValue
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveExtensionAttribute"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveExtensionAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveExtensionAttribute(request *SaveExtensionAttributeRequest) (_result *SaveExtensionAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveExtensionAttributeResponse{}
	_body, _err := client.SaveExtensionAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveTaskWithOptions(request *SaveTaskRequest, runtime *util.RuntimeOptions) (_result *SaveTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.Request)) {
		query["Request"] = request.Request
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveTask"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveTask(request *SaveTaskRequest) (_result *SaveTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveTaskResponse{}
	_body, _err := client.SaveTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveTaskForOfficialFileCustomWithOptions(request *SaveTaskForOfficialFileCustomRequest, runtime *util.RuntimeOptions) (_result *SaveTaskForOfficialFileCustomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndAcceptTime)) {
		query["EndAcceptTime"] = request.EndAcceptTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartAcceptTime)) {
		query["StartAcceptTime"] = request.StartAcceptTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveTaskForOfficialFileCustom"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveTaskForOfficialFileCustomResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveTaskForOfficialFileCustom(request *SaveTaskForOfficialFileCustomRequest) (_result *SaveTaskForOfficialFileCustomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveTaskForOfficialFileCustomResponse{}
	_body, _err := client.SaveTaskForOfficialFileCustomWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveTradeMarkReviewMaterialDetailWithOptions(tmpReq *SaveTradeMarkReviewMaterialDetailRequest, runtime *util.RuntimeOptions) (_result *SaveTradeMarkReviewMaterialDetailResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SaveTradeMarkReviewMaterialDetailShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AdditionalOssKeyList)) {
		request.AdditionalOssKeyListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AdditionalOssKeyList, tea.String("AdditionalOssKeyList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdditionalOssKeyListShrink)) {
		body["AdditionalOssKeyList"] = request.AdditionalOssKeyListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Address)) {
		body["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.ApplicationOssKey)) {
		body["ApplicationOssKey"] = request.ApplicationOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessLicenceOssKey)) {
		body["BusinessLicenceOssKey"] = request.BusinessLicenceOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.CardNumber)) {
		body["CardNumber"] = request.CardNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ChangeName)) {
		body["ChangeName"] = request.ChangeName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactAddress)) {
		body["ContactAddress"] = request.ContactAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ContactEmail)) {
		body["ContactEmail"] = request.ContactEmail
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		body["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactNumber)) {
		body["ContactNumber"] = request.ContactNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Country)) {
		body["Country"] = request.Country
	}

	if !tea.BoolValue(util.IsUnset(request.EngAddress)) {
		body["EngAddress"] = request.EngAddress
	}

	if !tea.BoolValue(util.IsUnset(request.EngName)) {
		body["EngName"] = request.EngName
	}

	if !tea.BoolValue(util.IsUnset(request.IdCardOssKey)) {
		body["IdCardOssKey"] = request.IdCardOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.LegalNoticeOssKey)) {
		body["LegalNoticeOssKey"] = request.LegalNoticeOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.LoaOssKey)) {
		body["LoaOssKey"] = request.LoaOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PassportOssKey)) {
		body["PassportOssKey"] = request.PassportOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.Province)) {
		body["Province"] = request.Province
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		body["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.ReviewMaterialAdditionalJson)) {
		body["ReviewMaterialAdditionalJson"] = request.ReviewMaterialAdditionalJson
	}

	if !tea.BoolValue(util.IsUnset(request.Separate)) {
		body["Separate"] = request.Separate
	}

	if !tea.BoolValue(util.IsUnset(request.SubmitOnline)) {
		body["SubmitOnline"] = request.SubmitOnline
	}

	if !tea.BoolValue(util.IsUnset(request.SubmitType)) {
		body["SubmitType"] = request.SubmitType
	}

	if !tea.BoolValue(util.IsUnset(request.SupplementFlag)) {
		body["SupplementFlag"] = request.SupplementFlag
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveTradeMarkReviewMaterialDetail"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveTradeMarkReviewMaterialDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveTradeMarkReviewMaterialDetail(request *SaveTradeMarkReviewMaterialDetailRequest) (_result *SaveTradeMarkReviewMaterialDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveTradeMarkReviewMaterialDetailResponse{}
	_body, _err := client.SaveTradeMarkReviewMaterialDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SbjOperateWithOptions(request *SbjOperateRequest, runtime *util.RuntimeOptions) (_result *SbjOperateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyNo)) {
		query["ApplyNo"] = request.ApplyNo
	}

	if !tea.BoolValue(util.IsUnset(request.AuditStatus)) {
		query["AuditStatus"] = request.AuditStatus
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.FileDate)) {
		query["FileDate"] = request.FileDate
	}

	if !tea.BoolValue(util.IsUnset(request.FileOssKey)) {
		query["FileOssKey"] = request.FileOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.Message)) {
		query["Message"] = request.Message
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderNo)) {
		query["OrderNo"] = request.OrderNo
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiptOssKey)) {
		query["ReceiptOssKey"] = request.ReceiptOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.SubmittedSuccess)) {
		query["SubmittedSuccess"] = request.SubmittedSuccess
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SbjOperate"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SbjOperateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SbjOperate(request *SbjOperateRequest) (_result *SbjOperateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SbjOperateResponse{}
	_body, _err := client.SbjOperateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SbjOperateNewWithOptions(request *SbjOperateNewRequest, runtime *util.RuntimeOptions) (_result *SbjOperateNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddSubmitCount)) {
		query["AddSubmitCount"] = request.AddSubmitCount
	}

	if !tea.BoolValue(util.IsUnset(request.AllowResubmit)) {
		query["AllowResubmit"] = request.AllowResubmit
	}

	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyNo)) {
		query["ApplyNo"] = request.ApplyNo
	}

	if !tea.BoolValue(util.IsUnset(request.AuditStatus)) {
		query["AuditStatus"] = request.AuditStatus
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.ChangeStatus)) {
		query["ChangeStatus"] = request.ChangeStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorMsgScreenshot)) {
		query["ErrorMsgScreenshot"] = request.ErrorMsgScreenshot
	}

	if !tea.BoolValue(util.IsUnset(request.FileDate)) {
		query["FileDate"] = request.FileDate
	}

	if !tea.BoolValue(util.IsUnset(request.FileOssKey)) {
		query["FileOssKey"] = request.FileOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.Message)) {
		query["Message"] = request.Message
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderNo)) {
		query["OrderNo"] = request.OrderNo
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiptOssKey)) {
		query["ReceiptOssKey"] = request.ReceiptOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.SubmittedSuccess)) {
		query["SubmittedSuccess"] = request.SubmittedSuccess
	}

	if !tea.BoolValue(util.IsUnset(request.SuccessType)) {
		query["SuccessType"] = request.SuccessType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SbjOperateNew"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SbjOperateNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SbjOperateNew(request *SbjOperateNewRequest) (_result *SbjOperateNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SbjOperateNewResponse{}
	_body, _err := client.SbjOperateNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SbrainServiceExecuteWithOptions(tmpReq *SbrainServiceExecuteRequest, runtime *util.RuntimeOptions) (_result *SbrainServiceExecuteResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SbrainServiceExecuteShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ExecuteParams)) {
		request.ExecuteParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExecuteParams, tea.String("ExecuteParams"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExecuteParamsShrink)) {
		query["ExecuteParams"] = request.ExecuteParamsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceNo)) {
		query["ReferenceNo"] = request.ReferenceNo
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceType)) {
		query["ReferenceType"] = request.ReferenceType
	}

	if !tea.BoolValue(util.IsUnset(request.SceneCode)) {
		query["SceneCode"] = request.SceneCode
	}

	if !tea.BoolValue(util.IsUnset(request.SchemeId)) {
		query["SchemeId"] = request.SchemeId
	}

	if !tea.BoolValue(util.IsUnset(request.ServicePlace)) {
		query["ServicePlace"] = request.ServicePlace
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		query["Target"] = request.Target
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SbrainServiceExecute"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SbrainServiceExecuteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SbrainServiceExecute(request *SbrainServiceExecuteRequest) (_result *SbrainServiceExecuteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SbrainServiceExecuteResponse{}
	_body, _err := client.SbrainServiceExecuteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SbrainServiceHasRunningTaskBatchQueryWithOptions(tmpReq *SbrainServiceHasRunningTaskBatchQueryRequest, runtime *util.RuntimeOptions) (_result *SbrainServiceHasRunningTaskBatchQueryResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SbrainServiceHasRunningTaskBatchQueryShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ReferenceNos)) {
		request.ReferenceNosShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReferenceNos, tea.String("ReferenceNos"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceNosShrink)) {
		query["ReferenceNos"] = request.ReferenceNosShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceType)) {
		query["ReferenceType"] = request.ReferenceType
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SbrainServiceHasRunningTaskBatchQuery"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SbrainServiceHasRunningTaskBatchQueryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SbrainServiceHasRunningTaskBatchQuery(request *SbrainServiceHasRunningTaskBatchQueryRequest) (_result *SbrainServiceHasRunningTaskBatchQueryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SbrainServiceHasRunningTaskBatchQueryResponse{}
	_body, _err := client.SbrainServiceHasRunningTaskBatchQueryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SbrainServiceSchemeMatchWithOptions(tmpReq *SbrainServiceSchemeMatchRequest, runtime *util.RuntimeOptions) (_result *SbrainServiceSchemeMatchResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SbrainServiceSchemeMatchShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.MatchParams)) {
		request.MatchParamsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MatchParams, tea.String("MatchParams"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MatchParamsShrink)) {
		query["MatchParams"] = request.MatchParamsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceNo)) {
		query["ReferenceNo"] = request.ReferenceNo
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceType)) {
		query["ReferenceType"] = request.ReferenceType
	}

	if !tea.BoolValue(util.IsUnset(request.SceneCode)) {
		query["SceneCode"] = request.SceneCode
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SbrainServiceSchemeMatch"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SbrainServiceSchemeMatchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SbrainServiceSchemeMatch(request *SbrainServiceSchemeMatchRequest) (_result *SbrainServiceSchemeMatchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SbrainServiceSchemeMatchResponse{}
	_body, _err := client.SbrainServiceSchemeMatchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchTmOnsalesWithOptions(request *SearchTmOnsalesRequest, runtime *util.RuntimeOptions) (_result *SearchTmOnsalesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Classification)) {
		query["Classification"] = request.Classification
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.OrderPriceLeft)) {
		query["OrderPriceLeft"] = request.OrderPriceLeft
	}

	if !tea.BoolValue(util.IsUnset(request.OrderPriceRight)) {
		query["OrderPriceRight"] = request.OrderPriceRight
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.QueryAll)) {
		query["QueryAll"] = request.QueryAll
	}

	if !tea.BoolValue(util.IsUnset(request.RegLeft)) {
		query["RegLeft"] = request.RegLeft
	}

	if !tea.BoolValue(util.IsUnset(request.RegRight)) {
		query["RegRight"] = request.RegRight
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterNumber)) {
		query["RegisterNumber"] = request.RegisterNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SortName)) {
		query["SortName"] = request.SortName
	}

	if !tea.BoolValue(util.IsUnset(request.SortOrder)) {
		query["SortOrder"] = request.SortOrder
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.TopSearch)) {
		query["TopSearch"] = request.TopSearch
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchTmOnsales"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchTmOnsalesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchTmOnsales(request *SearchTmOnsalesRequest) (_result *SearchTmOnsalesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchTmOnsalesResponse{}
	_body, _err := client.SearchTmOnsalesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartNotaryWithOptions(request *StartNotaryRequest, runtime *util.RuntimeOptions) (_result *StartNotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NotaryOrderId)) {
		query["NotaryOrderId"] = request.NotaryOrderId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartNotary"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartNotaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartNotary(request *StartNotaryRequest) (_result *StartNotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartNotaryResponse{}
	_body, _err := client.StartNotaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StoreMaterialTemporarilyWithOptions(request *StoreMaterialTemporarilyRequest, runtime *util.RuntimeOptions) (_result *StoreMaterialTemporarilyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessLicenceOssKey)) {
		query["BusinessLicenceOssKey"] = request.BusinessLicenceOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.CardNumber)) {
		query["CardNumber"] = request.CardNumber
	}

	if !tea.BoolValue(util.IsUnset(request.City)) {
		query["City"] = request.City
	}

	if !tea.BoolValue(util.IsUnset(request.ContactAddress)) {
		query["ContactAddress"] = request.ContactAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCity)) {
		query["ContactCity"] = request.ContactCity
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCounty)) {
		query["ContactCounty"] = request.ContactCounty
	}

	if !tea.BoolValue(util.IsUnset(request.ContactDistrict)) {
		query["ContactDistrict"] = request.ContactDistrict
	}

	if !tea.BoolValue(util.IsUnset(request.ContactEmail)) {
		query["ContactEmail"] = request.ContactEmail
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactNumber)) {
		query["ContactNumber"] = request.ContactNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ContactProvince)) {
		query["ContactProvince"] = request.ContactProvince
	}

	if !tea.BoolValue(util.IsUnset(request.ContactZipcode)) {
		query["ContactZipcode"] = request.ContactZipcode
	}

	if !tea.BoolValue(util.IsUnset(request.Country)) {
		query["Country"] = request.Country
	}

	if !tea.BoolValue(util.IsUnset(request.EAddress)) {
		query["EAddress"] = request.EAddress
	}

	if !tea.BoolValue(util.IsUnset(request.EName)) {
		query["EName"] = request.EName
	}

	if !tea.BoolValue(util.IsUnset(request.IdCardName)) {
		query["IdCardName"] = request.IdCardName
	}

	if !tea.BoolValue(util.IsUnset(request.IdCardNumber)) {
		query["IdCardNumber"] = request.IdCardNumber
	}

	if !tea.BoolValue(util.IsUnset(request.IdCardOssKey)) {
		query["IdCardOssKey"] = request.IdCardOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.LegalNoticeOssKey)) {
		query["LegalNoticeOssKey"] = request.LegalNoticeOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.LoaOssKey)) {
		query["LoaOssKey"] = request.LoaOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PassportOssKey)) {
		query["PassportOssKey"] = request.PassportOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalType)) {
		query["PersonalType"] = request.PersonalType
	}

	if !tea.BoolValue(util.IsUnset(request.PrincipalName)) {
		query["PrincipalName"] = request.PrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.Province)) {
		query["Province"] = request.Province
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.Town)) {
		query["Town"] = request.Town
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StoreMaterialTemporarily"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StoreMaterialTemporarilyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StoreMaterialTemporarily(request *StoreMaterialTemporarilyRequest) (_result *StoreMaterialTemporarilyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StoreMaterialTemporarilyResponse{}
	_body, _err := client.StoreMaterialTemporarilyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitSupplementWithOptions(tmpReq *SubmitSupplementRequest, runtime *util.RuntimeOptions) (_result *SubmitSupplementResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitSupplementShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.UploadOssKeyList)) {
		request.UploadOssKeyListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UploadOssKeyList, tea.String("UploadOssKeyList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	if !tea.BoolValue(util.IsUnset(request.UploadOssKeyListShrink)) {
		query["UploadOssKeyList"] = request.UploadOssKeyListShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSupplement"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSupplementResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitSupplement(request *SubmitSupplementRequest) (_result *SubmitSupplementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSupplementResponse{}
	_body, _err := client.SubmitSupplementWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitTrademarkApplicationComplaintWithOptions(tmpReq *SubmitTrademarkApplicationComplaintRequest, runtime *util.RuntimeOptions) (_result *SubmitTrademarkApplicationComplaintResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitTrademarkApplicationComplaintShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Files)) {
		request.FilesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Files, tea.String("Files"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.FilesShrink)) {
		query["Files"] = request.FilesShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitTrademarkApplicationComplaint"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitTrademarkApplicationComplaintResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitTrademarkApplicationComplaint(request *SubmitTrademarkApplicationComplaintRequest) (_result *SubmitTrademarkApplicationComplaintResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTrademarkApplicationComplaintResponse{}
	_body, _err := client.SubmitTrademarkApplicationComplaintWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SyncTrademarkWithOptions(request *SyncTrademarkRequest, runtime *util.RuntimeOptions) (_result *SyncTrademarkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.ClassificationCode)) {
		query["ClassificationCode"] = request.ClassificationCode
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Label)) {
		query["Label"] = request.Label
	}

	if !tea.BoolValue(util.IsUnset(request.OriginalPrice)) {
		query["OriginalPrice"] = request.OriginalPrice
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerEnName)) {
		query["OwnerEnName"] = request.OwnerEnName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerName)) {
		query["OwnerName"] = request.OwnerName
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.RegAnnDate)) {
		query["RegAnnDate"] = request.RegAnnDate
	}

	if !tea.BoolValue(util.IsUnset(request.SecondaryClassification)) {
		query["SecondaryClassification"] = request.SecondaryClassification
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdClassification)) {
		query["ThirdClassification"] = request.ThirdClassification
	}

	if !tea.BoolValue(util.IsUnset(request.TmIcon)) {
		query["TmIcon"] = request.TmIcon
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.TmNumber)) {
		query["TmNumber"] = request.TmNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SyncTrademark"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SyncTrademarkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SyncTrademark(request *SyncTrademarkRequest) (_result *SyncTrademarkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SyncTrademarkResponse{}
	_body, _err := client.SyncTrademarkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateApplicantContacterWithOptions(request *UpdateApplicantContacterRequest, runtime *util.RuntimeOptions) (_result *UpdateApplicantContacterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplicantId)) {
		query["ApplicantId"] = request.ApplicantId
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactAddress)) {
		query["ContactAddress"] = request.ContactAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCity)) {
		query["ContactCity"] = request.ContactCity
	}

	if !tea.BoolValue(util.IsUnset(request.ContactDistrict)) {
		query["ContactDistrict"] = request.ContactDistrict
	}

	if !tea.BoolValue(util.IsUnset(request.ContactEmail)) {
		query["ContactEmail"] = request.ContactEmail
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactNumber)) {
		query["ContactNumber"] = request.ContactNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ContactProvince)) {
		query["ContactProvince"] = request.ContactProvince
	}

	if !tea.BoolValue(util.IsUnset(request.ContactZipCode)) {
		query["ContactZipCode"] = request.ContactZipCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateApplicantContacter"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateApplicantContacterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateApplicantContacter(request *UpdateApplicantContacterRequest) (_result *UpdateApplicantContacterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateApplicantContacterResponse{}
	_body, _err := client.UpdateApplicantContacterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMaterialWithOptions(request *UpdateMaterialRequest, runtime *util.RuntimeOptions) (_result *UpdateMaterialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessLicenceOssKey)) {
		query["BusinessLicenceOssKey"] = request.BusinessLicenceOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.CardNumber)) {
		query["CardNumber"] = request.CardNumber
	}

	if !tea.BoolValue(util.IsUnset(request.City)) {
		query["City"] = request.City
	}

	if !tea.BoolValue(util.IsUnset(request.ContactAddress)) {
		query["ContactAddress"] = request.ContactAddress
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCity)) {
		query["ContactCity"] = request.ContactCity
	}

	if !tea.BoolValue(util.IsUnset(request.ContactCounty)) {
		query["ContactCounty"] = request.ContactCounty
	}

	if !tea.BoolValue(util.IsUnset(request.ContactDistrict)) {
		query["ContactDistrict"] = request.ContactDistrict
	}

	if !tea.BoolValue(util.IsUnset(request.ContactEmail)) {
		query["ContactEmail"] = request.ContactEmail
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactNumber)) {
		query["ContactNumber"] = request.ContactNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ContactProvince)) {
		query["ContactProvince"] = request.ContactProvince
	}

	if !tea.BoolValue(util.IsUnset(request.ContactZipcode)) {
		query["ContactZipcode"] = request.ContactZipcode
	}

	if !tea.BoolValue(util.IsUnset(request.EAddress)) {
		query["EAddress"] = request.EAddress
	}

	if !tea.BoolValue(util.IsUnset(request.EName)) {
		query["EName"] = request.EName
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.IdCardName)) {
		query["IdCardName"] = request.IdCardName
	}

	if !tea.BoolValue(util.IsUnset(request.IdCardNumber)) {
		query["IdCardNumber"] = request.IdCardNumber
	}

	if !tea.BoolValue(util.IsUnset(request.IdCardOssKey)) {
		query["IdCardOssKey"] = request.IdCardOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.LegalNoticeOssKey)) {
		query["LegalNoticeOssKey"] = request.LegalNoticeOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.LoaId)) {
		query["LoaId"] = request.LoaId
	}

	if !tea.BoolValue(util.IsUnset(request.LoaOssKey)) {
		query["LoaOssKey"] = request.LoaOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PassportOssKey)) {
		query["PassportOssKey"] = request.PassportOssKey
	}

	if !tea.BoolValue(util.IsUnset(request.PersonalType)) {
		query["PersonalType"] = request.PersonalType
	}

	if !tea.BoolValue(util.IsUnset(request.Province)) {
		query["Province"] = request.Province
	}

	if !tea.BoolValue(util.IsUnset(request.Town)) {
		query["Town"] = request.Town
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMaterial"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMaterialResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMaterial(request *UpdateMaterialRequest) (_result *UpdateMaterialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMaterialResponse{}
	_body, _err := client.UpdateMaterialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProduceWithOptions(request *UpdateProduceRequest, runtime *util.RuntimeOptions) (_result *UpdateProduceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ExtMap)) {
		query["ExtMap"] = request.ExtMap
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProduce"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProduceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProduce(request *UpdateProduceRequest) (_result *UpdateProduceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProduceResponse{}
	_body, _err := client.UpdateProduceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateProduceLoaIdWithOptions(request *UpdateProduceLoaIdRequest, runtime *util.RuntimeOptions) (_result *UpdateProduceLoaIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.LoaOssKey)) {
		body["LoaOssKey"] = request.LoaOssKey
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateProduceLoaId"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateProduceLoaIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateProduceLoaId(request *UpdateProduceLoaIdRequest) (_result *UpdateProduceLoaIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateProduceLoaIdResponse{}
	_body, _err := client.UpdateProduceLoaIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSendMaterialNumWithOptions(request *UpdateSendMaterialNumRequest, runtime *util.RuntimeOptions) (_result *UpdateSendMaterialNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Num)) {
		query["Num"] = request.Num
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSendMaterialNum"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSendMaterialNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSendMaterialNum(request *UpdateSendMaterialNumRequest) (_result *UpdateSendMaterialNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSendMaterialNumResponse{}
	_body, _err := client.UpdateSendMaterialNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTrademarkNameWithOptions(request *UpdateTrademarkNameRequest, runtime *util.RuntimeOptions) (_result *UpdateTrademarkNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		body["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.TmComment)) {
		body["TmComment"] = request.TmComment
	}

	if !tea.BoolValue(util.IsUnset(request.TmIcon)) {
		body["TmIcon"] = request.TmIcon
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		body["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTrademarkName"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTrademarkNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTrademarkName(request *UpdateTrademarkNameRequest) (_result *UpdateTrademarkNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTrademarkNameResponse{}
	_body, _err := client.UpdateTrademarkNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTrademarkOnsaleWithOptions(request *UpdateTrademarkOnsaleRequest, runtime *util.RuntimeOptions) (_result *UpdateTrademarkOnsaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.ClassificationCode)) {
		query["ClassificationCode"] = request.ClassificationCode
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Label)) {
		query["Label"] = request.Label
	}

	if !tea.BoolValue(util.IsUnset(request.OriginalPrice)) {
		query["OriginalPrice"] = request.OriginalPrice
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerEnName)) {
		query["OwnerEnName"] = request.OwnerEnName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerName)) {
		query["OwnerName"] = request.OwnerName
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.RegAnnDate)) {
		query["RegAnnDate"] = request.RegAnnDate
	}

	if !tea.BoolValue(util.IsUnset(request.SecondaryClassification)) {
		query["SecondaryClassification"] = request.SecondaryClassification
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdClassification)) {
		query["ThirdClassification"] = request.ThirdClassification
	}

	if !tea.BoolValue(util.IsUnset(request.TmIcon)) {
		query["TmIcon"] = request.TmIcon
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.TmNumber)) {
		query["TmNumber"] = request.TmNumber
	}

	if !tea.BoolValue(util.IsUnset(request.TmType)) {
		query["TmType"] = request.TmType
	}

	if !tea.BoolValue(util.IsUnset(request.TradeTmDetailJson)) {
		query["TradeTmDetailJson"] = request.TradeTmDetailJson
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTrademarkOnsale"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTrademarkOnsaleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTrademarkOnsale(request *UpdateTrademarkOnsaleRequest) (_result *UpdateTrademarkOnsaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTrademarkOnsaleResponse{}
	_body, _err := client.UpdateTrademarkOnsaleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadNotaryDataWithOptions(request *UploadNotaryDataRequest, runtime *util.RuntimeOptions) (_result *UploadNotaryDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizOrderNo)) {
		query["BizOrderNo"] = request.BizOrderNo
	}

	if !tea.BoolValue(util.IsUnset(request.NotaryType)) {
		query["NotaryType"] = request.NotaryType
	}

	if !tea.BoolValue(util.IsUnset(request.UploadContext)) {
		query["UploadContext"] = request.UploadContext
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadNotaryData"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadNotaryDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadNotaryData(request *UploadNotaryDataRequest) (_result *UploadNotaryDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadNotaryDataResponse{}
	_body, _err := client.UploadNotaryDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadTrademarkOnSaleWithOptions(request *UploadTrademarkOnSaleRequest, runtime *util.RuntimeOptions) (_result *UploadTrademarkOnSaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.ClassificationCode)) {
		query["ClassificationCode"] = request.ClassificationCode
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Label)) {
		query["Label"] = request.Label
	}

	if !tea.BoolValue(util.IsUnset(request.OriginalPrice)) {
		query["OriginalPrice"] = request.OriginalPrice
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerEnName)) {
		query["OwnerEnName"] = request.OwnerEnName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerName)) {
		query["OwnerName"] = request.OwnerName
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.RegAnnDate)) {
		query["RegAnnDate"] = request.RegAnnDate
	}

	if !tea.BoolValue(util.IsUnset(request.SecondaryClassification)) {
		query["SecondaryClassification"] = request.SecondaryClassification
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.ThirdClassification)) {
		query["ThirdClassification"] = request.ThirdClassification
	}

	if !tea.BoolValue(util.IsUnset(request.TmIcon)) {
		query["TmIcon"] = request.TmIcon
	}

	if !tea.BoolValue(util.IsUnset(request.TmName)) {
		query["TmName"] = request.TmName
	}

	if !tea.BoolValue(util.IsUnset(request.TmNumber)) {
		query["TmNumber"] = request.TmNumber
	}

	if !tea.BoolValue(util.IsUnset(request.TmType)) {
		query["TmType"] = request.TmType
	}

	if !tea.BoolValue(util.IsUnset(request.TradeTmDetailJson)) {
		query["TradeTmDetailJson"] = request.TradeTmDetailJson
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadTrademarkOnSale"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadTrademarkOnSaleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadTrademarkOnSale(request *UploadTrademarkOnSaleRequest) (_result *UploadTrademarkOnSaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadTrademarkOnSaleResponse{}
	_body, _err := client.UploadTrademarkOnSaleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) WriteCommunicationLogWithOptions(request *WriteCommunicationLogRequest, runtime *util.RuntimeOptions) (_result *WriteCommunicationLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		query["Note"] = request.Note
	}

	if !tea.BoolValue(util.IsUnset(request.TargetId)) {
		query["TargetId"] = request.TargetId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("WriteCommunicationLog"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &WriteCommunicationLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) WriteCommunicationLog(request *WriteCommunicationLogRequest) (_result *WriteCommunicationLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &WriteCommunicationLogResponse{}
	_body, _err := client.WriteCommunicationLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) WriteIntentionCommunicationLogWithOptions(request *WriteIntentionCommunicationLogRequest, runtime *util.RuntimeOptions) (_result *WriteIntentionCommunicationLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		query["Note"] = request.Note
	}

	if !tea.BoolValue(util.IsUnset(request.Reject)) {
		query["Reject"] = request.Reject
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("WriteIntentionCommunicationLog"),
		Version:     tea.String("2018-07-24"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &WriteIntentionCommunicationLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) WriteIntentionCommunicationLog(request *WriteIntentionCommunicationLogRequest) (_result *WriteIntentionCommunicationLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &WriteIntentionCommunicationLogResponse{}
	_body, _err := client.WriteIntentionCommunicationLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
