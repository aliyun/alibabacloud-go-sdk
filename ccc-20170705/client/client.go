// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddAgentDeviceRequest struct {
	BrowserVersion *string `json:"BrowserVersion,omitempty" xml:"BrowserVersion,omitempty"`
	ClientIp       *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	ClientPort     *string `json:"ClientPort,omitempty" xml:"ClientPort,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Remark         *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s AddAgentDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAgentDeviceRequest) GoString() string {
	return s.String()
}

func (s *AddAgentDeviceRequest) SetBrowserVersion(v string) *AddAgentDeviceRequest {
	s.BrowserVersion = &v
	return s
}

func (s *AddAgentDeviceRequest) SetClientIp(v string) *AddAgentDeviceRequest {
	s.ClientIp = &v
	return s
}

func (s *AddAgentDeviceRequest) SetClientPort(v string) *AddAgentDeviceRequest {
	s.ClientPort = &v
	return s
}

func (s *AddAgentDeviceRequest) SetInstanceId(v string) *AddAgentDeviceRequest {
	s.InstanceId = &v
	return s
}

func (s *AddAgentDeviceRequest) SetRemark(v string) *AddAgentDeviceRequest {
	s.Remark = &v
	return s
}

type AddAgentDeviceResponseBody struct {
	AgentDeviceId  *int64  `json:"AgentDeviceId,omitempty" xml:"AgentDeviceId,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddAgentDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAgentDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *AddAgentDeviceResponseBody) SetAgentDeviceId(v int64) *AddAgentDeviceResponseBody {
	s.AgentDeviceId = &v
	return s
}

func (s *AddAgentDeviceResponseBody) SetCode(v string) *AddAgentDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *AddAgentDeviceResponseBody) SetHttpStatusCode(v int32) *AddAgentDeviceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddAgentDeviceResponseBody) SetMessage(v string) *AddAgentDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *AddAgentDeviceResponseBody) SetRequestId(v string) *AddAgentDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddAgentDeviceResponseBody) SetSuccess(v bool) *AddAgentDeviceResponseBody {
	s.Success = &v
	return s
}

type AddAgentDeviceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddAgentDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddAgentDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAgentDeviceResponse) GoString() string {
	return s.String()
}

func (s *AddAgentDeviceResponse) SetHeaders(v map[string]*string) *AddAgentDeviceResponse {
	s.Headers = v
	return s
}

func (s *AddAgentDeviceResponse) SetStatusCode(v int32) *AddAgentDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *AddAgentDeviceResponse) SetBody(v *AddAgentDeviceResponseBody) *AddAgentDeviceResponse {
	s.Body = v
	return s
}

type AddBulkPhoneNumbersRequest struct {
	ContactFlowId *string   `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumber   []*string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
	SkillGroupId  []*string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty" type:"Repeated"`
	Usage         *string   `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s AddBulkPhoneNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersRequest) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersRequest) SetContactFlowId(v string) *AddBulkPhoneNumbersRequest {
	s.ContactFlowId = &v
	return s
}

func (s *AddBulkPhoneNumbersRequest) SetInstanceId(v string) *AddBulkPhoneNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *AddBulkPhoneNumbersRequest) SetPhoneNumber(v []*string) *AddBulkPhoneNumbersRequest {
	s.PhoneNumber = v
	return s
}

func (s *AddBulkPhoneNumbersRequest) SetSkillGroupId(v []*string) *AddBulkPhoneNumbersRequest {
	s.SkillGroupId = v
	return s
}

func (s *AddBulkPhoneNumbersRequest) SetUsage(v string) *AddBulkPhoneNumbersRequest {
	s.Usage = &v
	return s
}

type AddBulkPhoneNumbersResponseBody struct {
	ArrearagePhoneNumbers *AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers `json:"ArrearagePhoneNumbers,omitempty" xml:"ArrearagePhoneNumbers,omitempty" type:"Struct"`
	Code                  *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	FailedPhoneNumbers    *AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers    `json:"FailedPhoneNumbers,omitempty" xml:"FailedPhoneNumbers,omitempty" type:"Struct"`
	HttpStatusCode        *int32                                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message               *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	PhoneNumbers          *AddBulkPhoneNumbersResponseBodyPhoneNumbers          `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty" type:"Struct"`
	RequestId             *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success               *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	UserdPhoneNumbers     *AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers     `json:"UserdPhoneNumbers,omitempty" xml:"UserdPhoneNumbers,omitempty" type:"Struct"`
}

func (s AddBulkPhoneNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersResponseBody) SetArrearagePhoneNumbers(v *AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers) *AddBulkPhoneNumbersResponseBody {
	s.ArrearagePhoneNumbers = v
	return s
}

func (s *AddBulkPhoneNumbersResponseBody) SetCode(v string) *AddBulkPhoneNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBody) SetFailedPhoneNumbers(v *AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers) *AddBulkPhoneNumbersResponseBody {
	s.FailedPhoneNumbers = v
	return s
}

func (s *AddBulkPhoneNumbersResponseBody) SetHttpStatusCode(v int32) *AddBulkPhoneNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBody) SetMessage(v string) *AddBulkPhoneNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBody) SetPhoneNumbers(v *AddBulkPhoneNumbersResponseBodyPhoneNumbers) *AddBulkPhoneNumbersResponseBody {
	s.PhoneNumbers = v
	return s
}

func (s *AddBulkPhoneNumbersResponseBody) SetRequestId(v string) *AddBulkPhoneNumbersResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBody) SetSuccess(v bool) *AddBulkPhoneNumbersResponseBody {
	s.Success = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBody) SetUserdPhoneNumbers(v *AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers) *AddBulkPhoneNumbersResponseBody {
	s.UserdPhoneNumbers = v
	return s
}

type AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers struct {
	ArrearagePhoneNumber []*string `json:"ArrearagePhoneNumber,omitempty" xml:"ArrearagePhoneNumber,omitempty" type:"Repeated"`
}

func (s AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers) SetArrearagePhoneNumber(v []*string) *AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers {
	s.ArrearagePhoneNumber = v
	return s
}

type AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers struct {
	FailedPhoneNumber []*string `json:"FailedPhoneNumber,omitempty" xml:"FailedPhoneNumber,omitempty" type:"Repeated"`
}

func (s AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers) SetFailedPhoneNumber(v []*string) *AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers {
	s.FailedPhoneNumber = v
	return s
}

type AddBulkPhoneNumbersResponseBodyPhoneNumbers struct {
	PhoneNumber []*AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s AddBulkPhoneNumbersResponseBodyPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersResponseBodyPhoneNumbers) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbers) SetPhoneNumber(v []*AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) *AddBulkPhoneNumbersResponseBodyPhoneNumbers {
	s.PhoneNumber = v
	return s
}

type AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber struct {
	AllowOutbound          *bool                                                              `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	ContactFlow            *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow `json:"ContactFlow,omitempty" xml:"ContactFlow,omitempty" type:"Struct"`
	InstanceId             *string                                                            `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string                                                            `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string                                                            `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string                                                            `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	RemainingTime          *int32                                                             `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	SkillGroups            *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups `json:"SkillGroups,omitempty" xml:"SkillGroups,omitempty" type:"Struct"`
	TestOnly               *bool                                                              `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32                                                             `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string                                                            `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetAllowOutbound(v bool) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetContactFlow(v *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.ContactFlow = v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetInstanceId(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetNumber(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetRemainingTime(v int32) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetSkillGroups(v *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.SkillGroups = v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetTestOnly(v bool) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetTrunks(v int32) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetUsage(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.Usage = &v
	return s
}

type AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow struct {
	ContactFlowDescription *string `json:"ContactFlowDescription,omitempty" xml:"ContactFlowDescription,omitempty"`
	ContactFlowId          *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowName        *string `json:"ContactFlowName,omitempty" xml:"ContactFlowName,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) SetContactFlowDescription(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow {
	s.ContactFlowDescription = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) SetContactFlowId(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow {
	s.ContactFlowId = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) SetContactFlowName(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow {
	s.ContactFlowName = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) SetInstanceId(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow {
	s.InstanceId = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) SetType(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow {
	s.Type = &v
	return s
}

type AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups struct {
	SkillGroup []*AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup `json:"SkillGroup,omitempty" xml:"SkillGroup,omitempty" type:"Repeated"`
}

func (s AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups) SetSkillGroup(v []*AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups {
	s.SkillGroup = v
	return s
}

type AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup struct {
	SkillGroupId   *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup) SetSkillGroupId(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup {
	s.SkillGroupId = &v
	return s
}

func (s *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup) SetSkillGroupName(v string) *AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup {
	s.SkillGroupName = &v
	return s
}

type AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers struct {
	UserdPhoneNumber []*string `json:"UserdPhoneNumber,omitempty" xml:"UserdPhoneNumber,omitempty" type:"Repeated"`
}

func (s AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers) SetUserdPhoneNumber(v []*string) *AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers {
	s.UserdPhoneNumber = v
	return s
}

type AddBulkPhoneNumbersResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddBulkPhoneNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddBulkPhoneNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBulkPhoneNumbersResponse) GoString() string {
	return s.String()
}

func (s *AddBulkPhoneNumbersResponse) SetHeaders(v map[string]*string) *AddBulkPhoneNumbersResponse {
	s.Headers = v
	return s
}

func (s *AddBulkPhoneNumbersResponse) SetStatusCode(v int32) *AddBulkPhoneNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *AddBulkPhoneNumbersResponse) SetBody(v *AddBulkPhoneNumbersResponseBody) *AddBulkPhoneNumbersResponse {
	s.Body = v
	return s
}

type AddPhoneNumberRequest struct {
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumber   *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	Usage         *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s AddPhoneNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumberRequest) GoString() string {
	return s.String()
}

func (s *AddPhoneNumberRequest) SetContactFlowId(v string) *AddPhoneNumberRequest {
	s.ContactFlowId = &v
	return s
}

func (s *AddPhoneNumberRequest) SetInstanceId(v string) *AddPhoneNumberRequest {
	s.InstanceId = &v
	return s
}

func (s *AddPhoneNumberRequest) SetPhoneNumber(v string) *AddPhoneNumberRequest {
	s.PhoneNumber = &v
	return s
}

func (s *AddPhoneNumberRequest) SetUsage(v string) *AddPhoneNumberRequest {
	s.Usage = &v
	return s
}

type AddPhoneNumberResponseBody struct {
	Code           *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	PhoneNumber    *AddPhoneNumberResponseBodyPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Struct"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddPhoneNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumberResponseBody) GoString() string {
	return s.String()
}

func (s *AddPhoneNumberResponseBody) SetCode(v string) *AddPhoneNumberResponseBody {
	s.Code = &v
	return s
}

func (s *AddPhoneNumberResponseBody) SetHttpStatusCode(v int32) *AddPhoneNumberResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddPhoneNumberResponseBody) SetMessage(v string) *AddPhoneNumberResponseBody {
	s.Message = &v
	return s
}

func (s *AddPhoneNumberResponseBody) SetPhoneNumber(v *AddPhoneNumberResponseBodyPhoneNumber) *AddPhoneNumberResponseBody {
	s.PhoneNumber = v
	return s
}

func (s *AddPhoneNumberResponseBody) SetRequestId(v string) *AddPhoneNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddPhoneNumberResponseBody) SetSuccess(v bool) *AddPhoneNumberResponseBody {
	s.Success = &v
	return s
}

type AddPhoneNumberResponseBodyPhoneNumber struct {
	AllowOutbound          *bool                                             `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	ContactFlow            *AddPhoneNumberResponseBodyPhoneNumberContactFlow `json:"ContactFlow,omitempty" xml:"ContactFlow,omitempty" type:"Struct"`
	InstanceId             *string                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string                                           `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string                                           `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string                                           `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	RemainingTime          *int32                                            `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	TestOnly               *bool                                             `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32                                            `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string                                           `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s AddPhoneNumberResponseBodyPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumberResponseBodyPhoneNumber) GoString() string {
	return s.String()
}

func (s *AddPhoneNumberResponseBodyPhoneNumber) SetAllowOutbound(v bool) *AddPhoneNumberResponseBodyPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumber) SetContactFlow(v *AddPhoneNumberResponseBodyPhoneNumberContactFlow) *AddPhoneNumberResponseBodyPhoneNumber {
	s.ContactFlow = v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumber) SetInstanceId(v string) *AddPhoneNumberResponseBodyPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumber) SetNumber(v string) *AddPhoneNumberResponseBodyPhoneNumber {
	s.Number = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumber) SetPhoneNumberDescription(v string) *AddPhoneNumberResponseBodyPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumber) SetPhoneNumberId(v string) *AddPhoneNumberResponseBodyPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumber) SetRemainingTime(v int32) *AddPhoneNumberResponseBodyPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumber) SetTestOnly(v bool) *AddPhoneNumberResponseBodyPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumber) SetTrunks(v int32) *AddPhoneNumberResponseBodyPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumber) SetUsage(v string) *AddPhoneNumberResponseBodyPhoneNumber {
	s.Usage = &v
	return s
}

type AddPhoneNumberResponseBodyPhoneNumberContactFlow struct {
	ContactFlowDescription *string `json:"ContactFlowDescription,omitempty" xml:"ContactFlowDescription,omitempty"`
	ContactFlowId          *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowName        *string `json:"ContactFlowName,omitempty" xml:"ContactFlowName,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddPhoneNumberResponseBodyPhoneNumberContactFlow) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumberResponseBodyPhoneNumberContactFlow) GoString() string {
	return s.String()
}

func (s *AddPhoneNumberResponseBodyPhoneNumberContactFlow) SetContactFlowDescription(v string) *AddPhoneNumberResponseBodyPhoneNumberContactFlow {
	s.ContactFlowDescription = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumberContactFlow) SetContactFlowId(v string) *AddPhoneNumberResponseBodyPhoneNumberContactFlow {
	s.ContactFlowId = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumberContactFlow) SetContactFlowName(v string) *AddPhoneNumberResponseBodyPhoneNumberContactFlow {
	s.ContactFlowName = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumberContactFlow) SetInstanceId(v string) *AddPhoneNumberResponseBodyPhoneNumberContactFlow {
	s.InstanceId = &v
	return s
}

func (s *AddPhoneNumberResponseBodyPhoneNumberContactFlow) SetType(v string) *AddPhoneNumberResponseBodyPhoneNumberContactFlow {
	s.Type = &v
	return s
}

type AddPhoneNumberResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddPhoneNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddPhoneNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneNumberResponse) GoString() string {
	return s.String()
}

func (s *AddPhoneNumberResponse) SetHeaders(v map[string]*string) *AddPhoneNumberResponse {
	s.Headers = v
	return s
}

func (s *AddPhoneNumberResponse) SetStatusCode(v int32) *AddPhoneNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPhoneNumberResponse) SetBody(v *AddPhoneNumberResponseBody) *AddPhoneNumberResponse {
	s.Body = v
	return s
}

type AddPhoneTagsRequest struct {
	Concurrency        *int32    `json:"Concurrency,omitempty" xml:"Concurrency,omitempty"`
	InstanceId         *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumberList    []*string `json:"PhoneNumberList,omitempty" xml:"PhoneNumberList,omitempty" type:"Repeated"`
	Provider           *string   `json:"Provider,omitempty" xml:"Provider,omitempty"`
	RegionNameCity     *string   `json:"RegionNameCity,omitempty" xml:"RegionNameCity,omitempty"`
	RegionNameProvince *string   `json:"RegionNameProvince,omitempty" xml:"RegionNameProvince,omitempty"`
	ServiceTag         *string   `json:"ServiceTag,omitempty" xml:"ServiceTag,omitempty"`
	SipTag             *string   `json:"SipTag,omitempty" xml:"SipTag,omitempty"`
	Type               *int32    `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddPhoneTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneTagsRequest) GoString() string {
	return s.String()
}

func (s *AddPhoneTagsRequest) SetConcurrency(v int32) *AddPhoneTagsRequest {
	s.Concurrency = &v
	return s
}

func (s *AddPhoneTagsRequest) SetInstanceId(v string) *AddPhoneTagsRequest {
	s.InstanceId = &v
	return s
}

func (s *AddPhoneTagsRequest) SetPhoneNumberList(v []*string) *AddPhoneTagsRequest {
	s.PhoneNumberList = v
	return s
}

func (s *AddPhoneTagsRequest) SetProvider(v string) *AddPhoneTagsRequest {
	s.Provider = &v
	return s
}

func (s *AddPhoneTagsRequest) SetRegionNameCity(v string) *AddPhoneTagsRequest {
	s.RegionNameCity = &v
	return s
}

func (s *AddPhoneTagsRequest) SetRegionNameProvince(v string) *AddPhoneTagsRequest {
	s.RegionNameProvince = &v
	return s
}

func (s *AddPhoneTagsRequest) SetServiceTag(v string) *AddPhoneTagsRequest {
	s.ServiceTag = &v
	return s
}

func (s *AddPhoneTagsRequest) SetSipTag(v string) *AddPhoneTagsRequest {
	s.SipTag = &v
	return s
}

func (s *AddPhoneTagsRequest) SetType(v int32) *AddPhoneTagsRequest {
	s.Type = &v
	return s
}

type AddPhoneTagsResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddPhoneTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneTagsResponseBody) GoString() string {
	return s.String()
}

func (s *AddPhoneTagsResponseBody) SetCode(v string) *AddPhoneTagsResponseBody {
	s.Code = &v
	return s
}

func (s *AddPhoneTagsResponseBody) SetHttpStatusCode(v int32) *AddPhoneTagsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddPhoneTagsResponseBody) SetMessage(v string) *AddPhoneTagsResponseBody {
	s.Message = &v
	return s
}

func (s *AddPhoneTagsResponseBody) SetRequestId(v string) *AddPhoneTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddPhoneTagsResponseBody) SetSuccess(v bool) *AddPhoneTagsResponseBody {
	s.Success = &v
	return s
}

type AddPhoneTagsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddPhoneTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddPhoneTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPhoneTagsResponse) GoString() string {
	return s.String()
}

func (s *AddPhoneTagsResponse) SetHeaders(v map[string]*string) *AddPhoneTagsResponse {
	s.Headers = v
	return s
}

func (s *AddPhoneTagsResponse) SetStatusCode(v int32) *AddPhoneTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPhoneTagsResponse) SetBody(v *AddPhoneTagsResponseBody) *AddPhoneTagsResponse {
	s.Body = v
	return s
}

type AssignUsersRequest struct {
	InstanceId   *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RoleId       []*string `json:"RoleId,omitempty" xml:"RoleId,omitempty" type:"Repeated"`
	SkillGroupId []*string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty" type:"Repeated"`
	SkillLevel   []*int32  `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
	UserRamId    []*string `json:"UserRamId,omitempty" xml:"UserRamId,omitempty" type:"Repeated"`
}

func (s AssignUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s AssignUsersRequest) GoString() string {
	return s.String()
}

func (s *AssignUsersRequest) SetInstanceId(v string) *AssignUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *AssignUsersRequest) SetRoleId(v []*string) *AssignUsersRequest {
	s.RoleId = v
	return s
}

func (s *AssignUsersRequest) SetSkillGroupId(v []*string) *AssignUsersRequest {
	s.SkillGroupId = v
	return s
}

func (s *AssignUsersRequest) SetSkillLevel(v []*int32) *AssignUsersRequest {
	s.SkillLevel = v
	return s
}

func (s *AssignUsersRequest) SetUserRamId(v []*string) *AssignUsersRequest {
	s.UserRamId = v
	return s
}

type AssignUsersResponseBody struct {
	Code           *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *AssignUsersResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AssignUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssignUsersResponseBody) GoString() string {
	return s.String()
}

func (s *AssignUsersResponseBody) SetCode(v string) *AssignUsersResponseBody {
	s.Code = &v
	return s
}

func (s *AssignUsersResponseBody) SetData(v *AssignUsersResponseBodyData) *AssignUsersResponseBody {
	s.Data = v
	return s
}

func (s *AssignUsersResponseBody) SetHttpStatusCode(v int32) *AssignUsersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AssignUsersResponseBody) SetMessage(v string) *AssignUsersResponseBody {
	s.Message = &v
	return s
}

func (s *AssignUsersResponseBody) SetRequestId(v string) *AssignUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *AssignUsersResponseBody) SetSuccess(v bool) *AssignUsersResponseBody {
	s.Success = &v
	return s
}

type AssignUsersResponseBodyData struct {
	User []*AssignUsersResponseBodyDataUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s AssignUsersResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AssignUsersResponseBodyData) GoString() string {
	return s.String()
}

func (s *AssignUsersResponseBodyData) SetUser(v []*AssignUsersResponseBodyDataUser) *AssignUsersResponseBodyData {
	s.User = v
	return s
}

type AssignUsersResponseBodyDataUser struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Primary    *bool   `json:"Primary,omitempty" xml:"Primary,omitempty"`
	RamId      *string `json:"RamId,omitempty" xml:"RamId,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AssignUsersResponseBodyDataUser) String() string {
	return tea.Prettify(s)
}

func (s AssignUsersResponseBodyDataUser) GoString() string {
	return s.String()
}

func (s *AssignUsersResponseBodyDataUser) SetInstanceId(v string) *AssignUsersResponseBodyDataUser {
	s.InstanceId = &v
	return s
}

func (s *AssignUsersResponseBodyDataUser) SetPrimary(v bool) *AssignUsersResponseBodyDataUser {
	s.Primary = &v
	return s
}

func (s *AssignUsersResponseBodyDataUser) SetRamId(v string) *AssignUsersResponseBodyDataUser {
	s.RamId = &v
	return s
}

func (s *AssignUsersResponseBodyDataUser) SetUserId(v string) *AssignUsersResponseBodyDataUser {
	s.UserId = &v
	return s
}

type AssignUsersResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AssignUsersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssignUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s AssignUsersResponse) GoString() string {
	return s.String()
}

func (s *AssignUsersResponse) SetHeaders(v map[string]*string) *AssignUsersResponse {
	s.Headers = v
	return s
}

func (s *AssignUsersResponse) SetStatusCode(v int32) *AssignUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *AssignUsersResponse) SetBody(v *AssignUsersResponseBody) *AssignUsersResponse {
	s.Body = v
	return s
}

type CallOnlinePrivacyNumberRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TelA       *string `json:"TelA,omitempty" xml:"TelA,omitempty"`
	TelB       *string `json:"TelB,omitempty" xml:"TelB,omitempty"`
}

func (s CallOnlinePrivacyNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s CallOnlinePrivacyNumberRequest) GoString() string {
	return s.String()
}

func (s *CallOnlinePrivacyNumberRequest) SetInstanceId(v string) *CallOnlinePrivacyNumberRequest {
	s.InstanceId = &v
	return s
}

func (s *CallOnlinePrivacyNumberRequest) SetTelA(v string) *CallOnlinePrivacyNumberRequest {
	s.TelA = &v
	return s
}

func (s *CallOnlinePrivacyNumberRequest) SetTelB(v string) *CallOnlinePrivacyNumberRequest {
	s.TelB = &v
	return s
}

type CallOnlinePrivacyNumberResponseBody struct {
	Code           *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *CallOnlinePrivacyNumberResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CallOnlinePrivacyNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CallOnlinePrivacyNumberResponseBody) GoString() string {
	return s.String()
}

func (s *CallOnlinePrivacyNumberResponseBody) SetCode(v string) *CallOnlinePrivacyNumberResponseBody {
	s.Code = &v
	return s
}

func (s *CallOnlinePrivacyNumberResponseBody) SetData(v *CallOnlinePrivacyNumberResponseBodyData) *CallOnlinePrivacyNumberResponseBody {
	s.Data = v
	return s
}

func (s *CallOnlinePrivacyNumberResponseBody) SetHttpStatusCode(v int32) *CallOnlinePrivacyNumberResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CallOnlinePrivacyNumberResponseBody) SetMessage(v string) *CallOnlinePrivacyNumberResponseBody {
	s.Message = &v
	return s
}

func (s *CallOnlinePrivacyNumberResponseBody) SetRequestId(v string) *CallOnlinePrivacyNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *CallOnlinePrivacyNumberResponseBody) SetSuccess(v bool) *CallOnlinePrivacyNumberResponseBody {
	s.Success = &v
	return s
}

type CallOnlinePrivacyNumberResponseBodyData struct {
	CallId      *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	DateCreated *string `json:"DateCreated,omitempty" xml:"DateCreated,omitempty"`
	Represent   *string `json:"Represent,omitempty" xml:"Represent,omitempty"`
	StatusCode  *string `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
	TelX        *string `json:"TelX,omitempty" xml:"TelX,omitempty"`
}

func (s CallOnlinePrivacyNumberResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CallOnlinePrivacyNumberResponseBodyData) GoString() string {
	return s.String()
}

func (s *CallOnlinePrivacyNumberResponseBodyData) SetCallId(v string) *CallOnlinePrivacyNumberResponseBodyData {
	s.CallId = &v
	return s
}

func (s *CallOnlinePrivacyNumberResponseBodyData) SetDateCreated(v string) *CallOnlinePrivacyNumberResponseBodyData {
	s.DateCreated = &v
	return s
}

func (s *CallOnlinePrivacyNumberResponseBodyData) SetRepresent(v string) *CallOnlinePrivacyNumberResponseBodyData {
	s.Represent = &v
	return s
}

func (s *CallOnlinePrivacyNumberResponseBodyData) SetStatusCode(v string) *CallOnlinePrivacyNumberResponseBodyData {
	s.StatusCode = &v
	return s
}

func (s *CallOnlinePrivacyNumberResponseBodyData) SetTelX(v string) *CallOnlinePrivacyNumberResponseBodyData {
	s.TelX = &v
	return s
}

type CallOnlinePrivacyNumberResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CallOnlinePrivacyNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CallOnlinePrivacyNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s CallOnlinePrivacyNumberResponse) GoString() string {
	return s.String()
}

func (s *CallOnlinePrivacyNumberResponse) SetHeaders(v map[string]*string) *CallOnlinePrivacyNumberResponse {
	s.Headers = v
	return s
}

func (s *CallOnlinePrivacyNumberResponse) SetStatusCode(v int32) *CallOnlinePrivacyNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *CallOnlinePrivacyNumberResponse) SetBody(v *CallOnlinePrivacyNumberResponseBody) *CallOnlinePrivacyNumberResponse {
	s.Body = v
	return s
}

type CheckNumberAvaliableRequest struct {
	Callee     *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	Caller     *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CheckNumberAvaliableRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckNumberAvaliableRequest) GoString() string {
	return s.String()
}

func (s *CheckNumberAvaliableRequest) SetCallee(v string) *CheckNumberAvaliableRequest {
	s.Callee = &v
	return s
}

func (s *CheckNumberAvaliableRequest) SetCaller(v string) *CheckNumberAvaliableRequest {
	s.Caller = &v
	return s
}

func (s *CheckNumberAvaliableRequest) SetInstanceId(v string) *CheckNumberAvaliableRequest {
	s.InstanceId = &v
	return s
}

type CheckNumberAvaliableResponseBody struct {
	CalleeAvaliable *CheckNumberAvaliableResponseBodyCalleeAvaliable `json:"CalleeAvaliable,omitempty" xml:"CalleeAvaliable,omitempty" type:"Struct"`
	CallerAvaliable *CheckNumberAvaliableResponseBodyCallerAvaliable `json:"CallerAvaliable,omitempty" xml:"CallerAvaliable,omitempty" type:"Struct"`
	Code            *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode  *int32                                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message         *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success         *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CheckNumberAvaliableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckNumberAvaliableResponseBody) GoString() string {
	return s.String()
}

func (s *CheckNumberAvaliableResponseBody) SetCalleeAvaliable(v *CheckNumberAvaliableResponseBodyCalleeAvaliable) *CheckNumberAvaliableResponseBody {
	s.CalleeAvaliable = v
	return s
}

func (s *CheckNumberAvaliableResponseBody) SetCallerAvaliable(v *CheckNumberAvaliableResponseBodyCallerAvaliable) *CheckNumberAvaliableResponseBody {
	s.CallerAvaliable = v
	return s
}

func (s *CheckNumberAvaliableResponseBody) SetCode(v string) *CheckNumberAvaliableResponseBody {
	s.Code = &v
	return s
}

func (s *CheckNumberAvaliableResponseBody) SetHttpStatusCode(v int32) *CheckNumberAvaliableResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CheckNumberAvaliableResponseBody) SetMessage(v string) *CheckNumberAvaliableResponseBody {
	s.Message = &v
	return s
}

func (s *CheckNumberAvaliableResponseBody) SetRequestId(v string) *CheckNumberAvaliableResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckNumberAvaliableResponseBody) SetSuccess(v bool) *CheckNumberAvaliableResponseBody {
	s.Success = &v
	return s
}

type CheckNumberAvaliableResponseBodyCalleeAvaliable struct {
	Avaliable *bool   `json:"Avaliable,omitempty" xml:"Avaliable,omitempty"`
	Reason    *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s CheckNumberAvaliableResponseBodyCalleeAvaliable) String() string {
	return tea.Prettify(s)
}

func (s CheckNumberAvaliableResponseBodyCalleeAvaliable) GoString() string {
	return s.String()
}

func (s *CheckNumberAvaliableResponseBodyCalleeAvaliable) SetAvaliable(v bool) *CheckNumberAvaliableResponseBodyCalleeAvaliable {
	s.Avaliable = &v
	return s
}

func (s *CheckNumberAvaliableResponseBodyCalleeAvaliable) SetReason(v string) *CheckNumberAvaliableResponseBodyCalleeAvaliable {
	s.Reason = &v
	return s
}

type CheckNumberAvaliableResponseBodyCallerAvaliable struct {
	Avaliable *bool   `json:"Avaliable,omitempty" xml:"Avaliable,omitempty"`
	Reason    *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s CheckNumberAvaliableResponseBodyCallerAvaliable) String() string {
	return tea.Prettify(s)
}

func (s CheckNumberAvaliableResponseBodyCallerAvaliable) GoString() string {
	return s.String()
}

func (s *CheckNumberAvaliableResponseBodyCallerAvaliable) SetAvaliable(v bool) *CheckNumberAvaliableResponseBodyCallerAvaliable {
	s.Avaliable = &v
	return s
}

func (s *CheckNumberAvaliableResponseBodyCallerAvaliable) SetReason(v string) *CheckNumberAvaliableResponseBodyCallerAvaliable {
	s.Reason = &v
	return s
}

type CheckNumberAvaliableResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CheckNumberAvaliableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckNumberAvaliableResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckNumberAvaliableResponse) GoString() string {
	return s.String()
}

func (s *CheckNumberAvaliableResponse) SetHeaders(v map[string]*string) *CheckNumberAvaliableResponse {
	s.Headers = v
	return s
}

func (s *CheckNumberAvaliableResponse) SetStatusCode(v int32) *CheckNumberAvaliableResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckNumberAvaliableResponse) SetBody(v *CheckNumberAvaliableResponseBody) *CheckNumberAvaliableResponse {
	s.Body = v
	return s
}

type CommitContactFlowVersionModificationRequest struct {
	Canvas               *string `json:"Canvas,omitempty" xml:"Canvas,omitempty"`
	ContactFlowVersionId *string `json:"ContactFlowVersionId,omitempty" xml:"ContactFlowVersionId,omitempty"`
	Content              *string `json:"Content,omitempty" xml:"Content,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CommitContactFlowVersionModificationRequest) String() string {
	return tea.Prettify(s)
}

func (s CommitContactFlowVersionModificationRequest) GoString() string {
	return s.String()
}

func (s *CommitContactFlowVersionModificationRequest) SetCanvas(v string) *CommitContactFlowVersionModificationRequest {
	s.Canvas = &v
	return s
}

func (s *CommitContactFlowVersionModificationRequest) SetContactFlowVersionId(v string) *CommitContactFlowVersionModificationRequest {
	s.ContactFlowVersionId = &v
	return s
}

func (s *CommitContactFlowVersionModificationRequest) SetContent(v string) *CommitContactFlowVersionModificationRequest {
	s.Content = &v
	return s
}

func (s *CommitContactFlowVersionModificationRequest) SetInstanceId(v string) *CommitContactFlowVersionModificationRequest {
	s.InstanceId = &v
	return s
}

type CommitContactFlowVersionModificationResponseBody struct {
	Code               *string                                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	ContactFlowVersion *CommitContactFlowVersionModificationResponseBodyContactFlowVersion `json:"ContactFlowVersion,omitempty" xml:"ContactFlowVersion,omitempty" type:"Struct"`
	HttpStatusCode     *int32                                                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message            *string                                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId          *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success            *bool                                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CommitContactFlowVersionModificationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CommitContactFlowVersionModificationResponseBody) GoString() string {
	return s.String()
}

func (s *CommitContactFlowVersionModificationResponseBody) SetCode(v string) *CommitContactFlowVersionModificationResponseBody {
	s.Code = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBody) SetContactFlowVersion(v *CommitContactFlowVersionModificationResponseBodyContactFlowVersion) *CommitContactFlowVersionModificationResponseBody {
	s.ContactFlowVersion = v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBody) SetHttpStatusCode(v int32) *CommitContactFlowVersionModificationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBody) SetMessage(v string) *CommitContactFlowVersionModificationResponseBody {
	s.Message = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBody) SetRequestId(v string) *CommitContactFlowVersionModificationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBody) SetSuccess(v bool) *CommitContactFlowVersionModificationResponseBody {
	s.Success = &v
	return s
}

type CommitContactFlowVersionModificationResponseBodyContactFlowVersion struct {
	Canvas                        *string `json:"Canvas,omitempty" xml:"Canvas,omitempty"`
	ContactFlowVersionDescription *string `json:"ContactFlowVersionDescription,omitempty" xml:"ContactFlowVersionDescription,omitempty"`
	ContactFlowVersionId          *string `json:"ContactFlowVersionId,omitempty" xml:"ContactFlowVersionId,omitempty"`
	Content                       *string `json:"Content,omitempty" xml:"Content,omitempty"`
	LastModified                  *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	LastModifiedBy                *string `json:"LastModifiedBy,omitempty" xml:"LastModifiedBy,omitempty"`
	LockedBy                      *string `json:"LockedBy,omitempty" xml:"LockedBy,omitempty"`
	Status                        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Version                       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s CommitContactFlowVersionModificationResponseBodyContactFlowVersion) String() string {
	return tea.Prettify(s)
}

func (s CommitContactFlowVersionModificationResponseBodyContactFlowVersion) GoString() string {
	return s.String()
}

func (s *CommitContactFlowVersionModificationResponseBodyContactFlowVersion) SetCanvas(v string) *CommitContactFlowVersionModificationResponseBodyContactFlowVersion {
	s.Canvas = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBodyContactFlowVersion) SetContactFlowVersionDescription(v string) *CommitContactFlowVersionModificationResponseBodyContactFlowVersion {
	s.ContactFlowVersionDescription = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBodyContactFlowVersion) SetContactFlowVersionId(v string) *CommitContactFlowVersionModificationResponseBodyContactFlowVersion {
	s.ContactFlowVersionId = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBodyContactFlowVersion) SetContent(v string) *CommitContactFlowVersionModificationResponseBodyContactFlowVersion {
	s.Content = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBodyContactFlowVersion) SetLastModified(v string) *CommitContactFlowVersionModificationResponseBodyContactFlowVersion {
	s.LastModified = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBodyContactFlowVersion) SetLastModifiedBy(v string) *CommitContactFlowVersionModificationResponseBodyContactFlowVersion {
	s.LastModifiedBy = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBodyContactFlowVersion) SetLockedBy(v string) *CommitContactFlowVersionModificationResponseBodyContactFlowVersion {
	s.LockedBy = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBodyContactFlowVersion) SetStatus(v string) *CommitContactFlowVersionModificationResponseBodyContactFlowVersion {
	s.Status = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponseBodyContactFlowVersion) SetVersion(v string) *CommitContactFlowVersionModificationResponseBodyContactFlowVersion {
	s.Version = &v
	return s
}

type CommitContactFlowVersionModificationResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CommitContactFlowVersionModificationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CommitContactFlowVersionModificationResponse) String() string {
	return tea.Prettify(s)
}

func (s CommitContactFlowVersionModificationResponse) GoString() string {
	return s.String()
}

func (s *CommitContactFlowVersionModificationResponse) SetHeaders(v map[string]*string) *CommitContactFlowVersionModificationResponse {
	s.Headers = v
	return s
}

func (s *CommitContactFlowVersionModificationResponse) SetStatusCode(v int32) *CommitContactFlowVersionModificationResponse {
	s.StatusCode = &v
	return s
}

func (s *CommitContactFlowVersionModificationResponse) SetBody(v *CommitContactFlowVersionModificationResponseBody) *CommitContactFlowVersionModificationResponse {
	s.Body = v
	return s
}

type CreateContactFlowRequest struct {
	Canvas      *string `json:"Canvas,omitempty" xml:"Canvas,omitempty"`
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateContactFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowRequest) GoString() string {
	return s.String()
}

func (s *CreateContactFlowRequest) SetCanvas(v string) *CreateContactFlowRequest {
	s.Canvas = &v
	return s
}

func (s *CreateContactFlowRequest) SetContent(v string) *CreateContactFlowRequest {
	s.Content = &v
	return s
}

func (s *CreateContactFlowRequest) SetDescription(v string) *CreateContactFlowRequest {
	s.Description = &v
	return s
}

func (s *CreateContactFlowRequest) SetInstanceId(v string) *CreateContactFlowRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateContactFlowRequest) SetName(v string) *CreateContactFlowRequest {
	s.Name = &v
	return s
}

func (s *CreateContactFlowRequest) SetType(v string) *CreateContactFlowRequest {
	s.Type = &v
	return s
}

type CreateContactFlowResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ContactFlow    *CreateContactFlowResponseBodyContactFlow `json:"ContactFlow,omitempty" xml:"ContactFlow,omitempty" type:"Struct"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateContactFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowResponseBody) GoString() string {
	return s.String()
}

func (s *CreateContactFlowResponseBody) SetCode(v string) *CreateContactFlowResponseBody {
	s.Code = &v
	return s
}

func (s *CreateContactFlowResponseBody) SetContactFlow(v *CreateContactFlowResponseBodyContactFlow) *CreateContactFlowResponseBody {
	s.ContactFlow = v
	return s
}

func (s *CreateContactFlowResponseBody) SetHttpStatusCode(v int32) *CreateContactFlowResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateContactFlowResponseBody) SetMessage(v string) *CreateContactFlowResponseBody {
	s.Message = &v
	return s
}

func (s *CreateContactFlowResponseBody) SetRequestId(v string) *CreateContactFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateContactFlowResponseBody) SetSuccess(v bool) *CreateContactFlowResponseBody {
	s.Success = &v
	return s
}

type CreateContactFlowResponseBodyContactFlow struct {
	AppliedVersion         *string                                               `json:"AppliedVersion,omitempty" xml:"AppliedVersion,omitempty"`
	ContactFlowDescription *string                                               `json:"ContactFlowDescription,omitempty" xml:"ContactFlowDescription,omitempty"`
	ContactFlowId          *string                                               `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowName        *string                                               `json:"ContactFlowName,omitempty" xml:"ContactFlowName,omitempty"`
	InstanceId             *string                                               `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumbers           *CreateContactFlowResponseBodyContactFlowPhoneNumbers `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty" type:"Struct"`
	Type                   *string                                               `json:"Type,omitempty" xml:"Type,omitempty"`
	Versions               *CreateContactFlowResponseBodyContactFlowVersions     `json:"Versions,omitempty" xml:"Versions,omitempty" type:"Struct"`
}

func (s CreateContactFlowResponseBodyContactFlow) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowResponseBodyContactFlow) GoString() string {
	return s.String()
}

func (s *CreateContactFlowResponseBodyContactFlow) SetAppliedVersion(v string) *CreateContactFlowResponseBodyContactFlow {
	s.AppliedVersion = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlow) SetContactFlowDescription(v string) *CreateContactFlowResponseBodyContactFlow {
	s.ContactFlowDescription = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlow) SetContactFlowId(v string) *CreateContactFlowResponseBodyContactFlow {
	s.ContactFlowId = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlow) SetContactFlowName(v string) *CreateContactFlowResponseBodyContactFlow {
	s.ContactFlowName = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlow) SetInstanceId(v string) *CreateContactFlowResponseBodyContactFlow {
	s.InstanceId = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlow) SetPhoneNumbers(v *CreateContactFlowResponseBodyContactFlowPhoneNumbers) *CreateContactFlowResponseBodyContactFlow {
	s.PhoneNumbers = v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlow) SetType(v string) *CreateContactFlowResponseBodyContactFlow {
	s.Type = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlow) SetVersions(v *CreateContactFlowResponseBodyContactFlowVersions) *CreateContactFlowResponseBodyContactFlow {
	s.Versions = v
	return s
}

type CreateContactFlowResponseBodyContactFlowPhoneNumbers struct {
	PhoneNumber []*CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s CreateContactFlowResponseBodyContactFlowPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowResponseBodyContactFlowPhoneNumbers) GoString() string {
	return s.String()
}

func (s *CreateContactFlowResponseBodyContactFlowPhoneNumbers) SetPhoneNumber(v []*CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) *CreateContactFlowResponseBodyContactFlowPhoneNumbers {
	s.PhoneNumber = v
	return s
}

type CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber struct {
	AllowOutbound          *bool   `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	RemainingTime          *int32  `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	TestOnly               *bool   `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32  `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) SetAllowOutbound(v bool) *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) SetInstanceId(v string) *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) SetNumber(v string) *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) SetRemainingTime(v int32) *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) SetTestOnly(v bool) *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) SetTrunks(v int32) *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber) SetUsage(v string) *CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.Usage = &v
	return s
}

type CreateContactFlowResponseBodyContactFlowVersions struct {
	ContactFlowVersion []*CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion `json:"ContactFlowVersion,omitempty" xml:"ContactFlowVersion,omitempty" type:"Repeated"`
}

func (s CreateContactFlowResponseBodyContactFlowVersions) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowResponseBodyContactFlowVersions) GoString() string {
	return s.String()
}

func (s *CreateContactFlowResponseBodyContactFlowVersions) SetContactFlowVersion(v []*CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) *CreateContactFlowResponseBodyContactFlowVersions {
	s.ContactFlowVersion = v
	return s
}

type CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion struct {
	Canvas                        *string `json:"Canvas,omitempty" xml:"Canvas,omitempty"`
	ContactFlowVersionDescription *string `json:"ContactFlowVersionDescription,omitempty" xml:"ContactFlowVersionDescription,omitempty"`
	ContactFlowVersionId          *string `json:"ContactFlowVersionId,omitempty" xml:"ContactFlowVersionId,omitempty"`
	Content                       *string `json:"Content,omitempty" xml:"Content,omitempty"`
	LastModified                  *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	LastModifiedBy                *string `json:"LastModifiedBy,omitempty" xml:"LastModifiedBy,omitempty"`
	LockedBy                      *string `json:"LockedBy,omitempty" xml:"LockedBy,omitempty"`
	Status                        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Version                       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) GoString() string {
	return s.String()
}

func (s *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) SetCanvas(v string) *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion {
	s.Canvas = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) SetContactFlowVersionDescription(v string) *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion {
	s.ContactFlowVersionDescription = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) SetContactFlowVersionId(v string) *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion {
	s.ContactFlowVersionId = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) SetContent(v string) *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion {
	s.Content = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) SetLastModified(v string) *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion {
	s.LastModified = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) SetLastModifiedBy(v string) *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion {
	s.LastModifiedBy = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) SetLockedBy(v string) *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion {
	s.LockedBy = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) SetStatus(v string) *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion {
	s.Status = &v
	return s
}

func (s *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion) SetVersion(v string) *CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion {
	s.Version = &v
	return s
}

type CreateContactFlowResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateContactFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateContactFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateContactFlowResponse) GoString() string {
	return s.String()
}

func (s *CreateContactFlowResponse) SetHeaders(v map[string]*string) *CreateContactFlowResponse {
	s.Headers = v
	return s
}

func (s *CreateContactFlowResponse) SetStatusCode(v int32) *CreateContactFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateContactFlowResponse) SetBody(v *CreateContactFlowResponseBody) *CreateContactFlowResponse {
	s.Body = v
	return s
}

type CreateFaultRequest struct {
	AgentFilePath          *string `json:"AgentFilePath,omitempty" xml:"AgentFilePath,omitempty"`
	AgentId                *int64  `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentOssFileName       *string `json:"AgentOssFileName,omitempty" xml:"AgentOssFileName,omitempty"`
	BrowserVersion         *string `json:"BrowserVersion,omitempty" xml:"BrowserVersion,omitempty"`
	ClientIp               *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	ClientPort             *string `json:"ClientPort,omitempty" xml:"ClientPort,omitempty"`
	ConnectId              *string `json:"ConnectId,omitempty" xml:"ConnectId,omitempty"`
	CustomFilePath         *string `json:"CustomFilePath,omitempty" xml:"CustomFilePath,omitempty"`
	CustomOssFileName      *string `json:"CustomOssFileName,omitempty" xml:"CustomOssFileName,omitempty"`
	Description            *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTime                *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MicrophoneEquipment    *string `json:"MicrophoneEquipment,omitempty" xml:"MicrophoneEquipment,omitempty"`
	MicrophoneList         *string `json:"MicrophoneList,omitempty" xml:"MicrophoneList,omitempty"`
	OperatingSystemVersion *string `json:"OperatingSystemVersion,omitempty" xml:"OperatingSystemVersion,omitempty"`
	ServiceIp              *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	ServicePort            *string `json:"ServicePort,omitempty" xml:"ServicePort,omitempty"`
	SpeakerEquipment       *string `json:"SpeakerEquipment,omitempty" xml:"SpeakerEquipment,omitempty"`
	SpeakerList            *string `json:"SpeakerList,omitempty" xml:"SpeakerList,omitempty"`
	StartTime              *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CreateFaultRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFaultRequest) GoString() string {
	return s.String()
}

func (s *CreateFaultRequest) SetAgentFilePath(v string) *CreateFaultRequest {
	s.AgentFilePath = &v
	return s
}

func (s *CreateFaultRequest) SetAgentId(v int64) *CreateFaultRequest {
	s.AgentId = &v
	return s
}

func (s *CreateFaultRequest) SetAgentOssFileName(v string) *CreateFaultRequest {
	s.AgentOssFileName = &v
	return s
}

func (s *CreateFaultRequest) SetBrowserVersion(v string) *CreateFaultRequest {
	s.BrowserVersion = &v
	return s
}

func (s *CreateFaultRequest) SetClientIp(v string) *CreateFaultRequest {
	s.ClientIp = &v
	return s
}

func (s *CreateFaultRequest) SetClientPort(v string) *CreateFaultRequest {
	s.ClientPort = &v
	return s
}

func (s *CreateFaultRequest) SetConnectId(v string) *CreateFaultRequest {
	s.ConnectId = &v
	return s
}

func (s *CreateFaultRequest) SetCustomFilePath(v string) *CreateFaultRequest {
	s.CustomFilePath = &v
	return s
}

func (s *CreateFaultRequest) SetCustomOssFileName(v string) *CreateFaultRequest {
	s.CustomOssFileName = &v
	return s
}

func (s *CreateFaultRequest) SetDescription(v string) *CreateFaultRequest {
	s.Description = &v
	return s
}

func (s *CreateFaultRequest) SetEndTime(v int64) *CreateFaultRequest {
	s.EndTime = &v
	return s
}

func (s *CreateFaultRequest) SetInstanceId(v string) *CreateFaultRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateFaultRequest) SetMicrophoneEquipment(v string) *CreateFaultRequest {
	s.MicrophoneEquipment = &v
	return s
}

func (s *CreateFaultRequest) SetMicrophoneList(v string) *CreateFaultRequest {
	s.MicrophoneList = &v
	return s
}

func (s *CreateFaultRequest) SetOperatingSystemVersion(v string) *CreateFaultRequest {
	s.OperatingSystemVersion = &v
	return s
}

func (s *CreateFaultRequest) SetServiceIp(v string) *CreateFaultRequest {
	s.ServiceIp = &v
	return s
}

func (s *CreateFaultRequest) SetServicePort(v string) *CreateFaultRequest {
	s.ServicePort = &v
	return s
}

func (s *CreateFaultRequest) SetSpeakerEquipment(v string) *CreateFaultRequest {
	s.SpeakerEquipment = &v
	return s
}

func (s *CreateFaultRequest) SetSpeakerList(v string) *CreateFaultRequest {
	s.SpeakerList = &v
	return s
}

func (s *CreateFaultRequest) SetStartTime(v int64) *CreateFaultRequest {
	s.StartTime = &v
	return s
}

type CreateFaultResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateFaultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFaultResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFaultResponseBody) SetCode(v string) *CreateFaultResponseBody {
	s.Code = &v
	return s
}

func (s *CreateFaultResponseBody) SetHttpStatusCode(v int32) *CreateFaultResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateFaultResponseBody) SetMessage(v string) *CreateFaultResponseBody {
	s.Message = &v
	return s
}

func (s *CreateFaultResponseBody) SetRequestId(v string) *CreateFaultResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFaultResponseBody) SetSuccess(v bool) *CreateFaultResponseBody {
	s.Success = &v
	return s
}

type CreateFaultResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateFaultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFaultResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFaultResponse) GoString() string {
	return s.String()
}

func (s *CreateFaultResponse) SetHeaders(v map[string]*string) *CreateFaultResponse {
	s.Headers = v
	return s
}

func (s *CreateFaultResponse) SetStatusCode(v int32) *CreateFaultResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFaultResponse) SetBody(v *CreateFaultResponseBody) *CreateFaultResponse {
	s.Body = v
	return s
}

type CreateInstanceRequest struct {
	AdminRamId     []*string `json:"AdminRamId,omitempty" xml:"AdminRamId,omitempty" type:"Repeated"`
	Description    *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	DirectoryId    *string   `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	DomainName     *string   `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Name           *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	PhoneNumber    *string   `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	PhoneNumbers   []*string `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty" type:"Repeated"`
	StorageMaxDays *int32    `json:"StorageMaxDays,omitempty" xml:"StorageMaxDays,omitempty"`
	StorageMaxSize *int32    `json:"StorageMaxSize,omitempty" xml:"StorageMaxSize,omitempty"`
	UserObject     []*string `json:"UserObject,omitempty" xml:"UserObject,omitempty" type:"Repeated"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetAdminRamId(v []*string) *CreateInstanceRequest {
	s.AdminRamId = v
	return s
}

func (s *CreateInstanceRequest) SetDescription(v string) *CreateInstanceRequest {
	s.Description = &v
	return s
}

func (s *CreateInstanceRequest) SetDirectoryId(v string) *CreateInstanceRequest {
	s.DirectoryId = &v
	return s
}

func (s *CreateInstanceRequest) SetDomainName(v string) *CreateInstanceRequest {
	s.DomainName = &v
	return s
}

func (s *CreateInstanceRequest) SetName(v string) *CreateInstanceRequest {
	s.Name = &v
	return s
}

func (s *CreateInstanceRequest) SetPhoneNumber(v string) *CreateInstanceRequest {
	s.PhoneNumber = &v
	return s
}

func (s *CreateInstanceRequest) SetPhoneNumbers(v []*string) *CreateInstanceRequest {
	s.PhoneNumbers = v
	return s
}

func (s *CreateInstanceRequest) SetStorageMaxDays(v int32) *CreateInstanceRequest {
	s.StorageMaxDays = &v
	return s
}

func (s *CreateInstanceRequest) SetStorageMaxSize(v int32) *CreateInstanceRequest {
	s.StorageMaxSize = &v
	return s
}

func (s *CreateInstanceRequest) SetUserObject(v []*string) *CreateInstanceRequest {
	s.UserObject = v
	return s
}

type CreateInstanceResponseBody struct {
	Code           *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Instance       *CreateInstanceResponseBodyInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Struct"`
	Message        *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBody) SetCode(v string) *CreateInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateInstanceResponseBody) SetHttpStatusCode(v int32) *CreateInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateInstanceResponseBody) SetInstance(v *CreateInstanceResponseBodyInstance) *CreateInstanceResponseBody {
	s.Instance = v
	return s
}

func (s *CreateInstanceResponseBody) SetMessage(v string) *CreateInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateInstanceResponseBody) SetRequestId(v string) *CreateInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInstanceResponseBody) SetSuccess(v bool) *CreateInstanceResponseBody {
	s.Success = &v
	return s
}

type CreateInstanceResponseBodyInstance struct {
	Admin               *CreateInstanceResponseBodyInstanceAdmin               `json:"Admin,omitempty" xml:"Admin,omitempty" type:"Struct"`
	ConsoleUrl          *string                                                `json:"ConsoleUrl,omitempty" xml:"ConsoleUrl,omitempty"`
	CreatedTime         *int64                                                 `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DirectoryId         *string                                                `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	DomainName          *string                                                `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	FailLoginNames      *CreateInstanceResponseBodyInstanceFailLoginNames      `json:"FailLoginNames,omitempty" xml:"FailLoginNames,omitempty" type:"Struct"`
	FailPhoneNumbers    *CreateInstanceResponseBodyInstanceFailPhoneNumbers    `json:"FailPhoneNumbers,omitempty" xml:"FailPhoneNumbers,omitempty" type:"Struct"`
	InstanceDescription *string                                                `json:"InstanceDescription,omitempty" xml:"InstanceDescription,omitempty"`
	InstanceId          *string                                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName        *string                                                `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	MaxOnlineAgents     *int32                                                 `json:"MaxOnlineAgents,omitempty" xml:"MaxOnlineAgents,omitempty"`
	Owner               *string                                                `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PhoneNumbers        *CreateInstanceResponseBodyInstancePhoneNumbers        `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty" type:"Struct"`
	Status              *string                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	StorageBucket       *string                                                `json:"StorageBucket,omitempty" xml:"StorageBucket,omitempty"`
	StorageMaxDays      *int32                                                 `json:"StorageMaxDays,omitempty" xml:"StorageMaxDays,omitempty"`
	StorageMaxSize      *int32                                                 `json:"StorageMaxSize,omitempty" xml:"StorageMaxSize,omitempty"`
	SuccessLoginNames   *CreateInstanceResponseBodyInstanceSuccessLoginNames   `json:"SuccessLoginNames,omitempty" xml:"SuccessLoginNames,omitempty" type:"Struct"`
	SuccessPhoneNumbers *CreateInstanceResponseBodyInstanceSuccessPhoneNumbers `json:"SuccessPhoneNumbers,omitempty" xml:"SuccessPhoneNumbers,omitempty" type:"Struct"`
	TenantId            *string                                                `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s CreateInstanceResponseBodyInstance) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstance) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstance) SetAdmin(v *CreateInstanceResponseBodyInstanceAdmin) *CreateInstanceResponseBodyInstance {
	s.Admin = v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetConsoleUrl(v string) *CreateInstanceResponseBodyInstance {
	s.ConsoleUrl = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetCreatedTime(v int64) *CreateInstanceResponseBodyInstance {
	s.CreatedTime = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetDirectoryId(v string) *CreateInstanceResponseBodyInstance {
	s.DirectoryId = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetDomainName(v string) *CreateInstanceResponseBodyInstance {
	s.DomainName = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetFailLoginNames(v *CreateInstanceResponseBodyInstanceFailLoginNames) *CreateInstanceResponseBodyInstance {
	s.FailLoginNames = v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetFailPhoneNumbers(v *CreateInstanceResponseBodyInstanceFailPhoneNumbers) *CreateInstanceResponseBodyInstance {
	s.FailPhoneNumbers = v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetInstanceDescription(v string) *CreateInstanceResponseBodyInstance {
	s.InstanceDescription = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetInstanceId(v string) *CreateInstanceResponseBodyInstance {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetInstanceName(v string) *CreateInstanceResponseBodyInstance {
	s.InstanceName = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetMaxOnlineAgents(v int32) *CreateInstanceResponseBodyInstance {
	s.MaxOnlineAgents = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetOwner(v string) *CreateInstanceResponseBodyInstance {
	s.Owner = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetPhoneNumbers(v *CreateInstanceResponseBodyInstancePhoneNumbers) *CreateInstanceResponseBodyInstance {
	s.PhoneNumbers = v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetStatus(v string) *CreateInstanceResponseBodyInstance {
	s.Status = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetStorageBucket(v string) *CreateInstanceResponseBodyInstance {
	s.StorageBucket = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetStorageMaxDays(v int32) *CreateInstanceResponseBodyInstance {
	s.StorageMaxDays = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetStorageMaxSize(v int32) *CreateInstanceResponseBodyInstance {
	s.StorageMaxSize = &v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetSuccessLoginNames(v *CreateInstanceResponseBodyInstanceSuccessLoginNames) *CreateInstanceResponseBodyInstance {
	s.SuccessLoginNames = v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetSuccessPhoneNumbers(v *CreateInstanceResponseBodyInstanceSuccessPhoneNumbers) *CreateInstanceResponseBodyInstance {
	s.SuccessPhoneNumbers = v
	return s
}

func (s *CreateInstanceResponseBodyInstance) SetTenantId(v string) *CreateInstanceResponseBodyInstance {
	s.TenantId = &v
	return s
}

type CreateInstanceResponseBodyInstanceAdmin struct {
	User []*CreateInstanceResponseBodyInstanceAdminUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s CreateInstanceResponseBodyInstanceAdmin) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstanceAdmin) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstanceAdmin) SetUser(v []*CreateInstanceResponseBodyInstanceAdminUser) *CreateInstanceResponseBodyInstanceAdmin {
	s.User = v
	return s
}

type CreateInstanceResponseBodyInstanceAdminUser struct {
	Detail     *CreateInstanceResponseBodyInstanceAdminUserDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	InstanceId *string                                            `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RamId      *string                                            `json:"RamId,omitempty" xml:"RamId,omitempty"`
	UserId     *string                                            `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CreateInstanceResponseBodyInstanceAdminUser) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstanceAdminUser) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstanceAdminUser) SetDetail(v *CreateInstanceResponseBodyInstanceAdminUserDetail) *CreateInstanceResponseBodyInstanceAdminUser {
	s.Detail = v
	return s
}

func (s *CreateInstanceResponseBodyInstanceAdminUser) SetInstanceId(v string) *CreateInstanceResponseBodyInstanceAdminUser {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceResponseBodyInstanceAdminUser) SetRamId(v string) *CreateInstanceResponseBodyInstanceAdminUser {
	s.RamId = &v
	return s
}

func (s *CreateInstanceResponseBodyInstanceAdminUser) SetUserId(v string) *CreateInstanceResponseBodyInstanceAdminUser {
	s.UserId = &v
	return s
}

type CreateInstanceResponseBodyInstanceAdminUserDetail struct {
	Department  *string `json:"Department,omitempty" xml:"Department,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	LoginName   *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Phone       *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s CreateInstanceResponseBodyInstanceAdminUserDetail) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstanceAdminUserDetail) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstanceAdminUserDetail) SetDepartment(v string) *CreateInstanceResponseBodyInstanceAdminUserDetail {
	s.Department = &v
	return s
}

func (s *CreateInstanceResponseBodyInstanceAdminUserDetail) SetDisplayName(v string) *CreateInstanceResponseBodyInstanceAdminUserDetail {
	s.DisplayName = &v
	return s
}

func (s *CreateInstanceResponseBodyInstanceAdminUserDetail) SetEmail(v string) *CreateInstanceResponseBodyInstanceAdminUserDetail {
	s.Email = &v
	return s
}

func (s *CreateInstanceResponseBodyInstanceAdminUserDetail) SetLoginName(v string) *CreateInstanceResponseBodyInstanceAdminUserDetail {
	s.LoginName = &v
	return s
}

func (s *CreateInstanceResponseBodyInstanceAdminUserDetail) SetPhone(v string) *CreateInstanceResponseBodyInstanceAdminUserDetail {
	s.Phone = &v
	return s
}

type CreateInstanceResponseBodyInstanceFailLoginNames struct {
	FailLoginName []*string `json:"FailLoginName,omitempty" xml:"FailLoginName,omitempty" type:"Repeated"`
}

func (s CreateInstanceResponseBodyInstanceFailLoginNames) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstanceFailLoginNames) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstanceFailLoginNames) SetFailLoginName(v []*string) *CreateInstanceResponseBodyInstanceFailLoginNames {
	s.FailLoginName = v
	return s
}

type CreateInstanceResponseBodyInstanceFailPhoneNumbers struct {
	FailPhoneNumber []*string `json:"FailPhoneNumber,omitempty" xml:"FailPhoneNumber,omitempty" type:"Repeated"`
}

func (s CreateInstanceResponseBodyInstanceFailPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstanceFailPhoneNumbers) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstanceFailPhoneNumbers) SetFailPhoneNumber(v []*string) *CreateInstanceResponseBodyInstanceFailPhoneNumbers {
	s.FailPhoneNumber = v
	return s
}

type CreateInstanceResponseBodyInstancePhoneNumbers struct {
	PhoneNumber []*CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s CreateInstanceResponseBodyInstancePhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstancePhoneNumbers) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstancePhoneNumbers) SetPhoneNumber(v []*CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) *CreateInstanceResponseBodyInstancePhoneNumbers {
	s.PhoneNumber = v
	return s
}

type CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber struct {
	AllowOutbound          *bool   `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	RemainingTime          *int32  `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	TestOnly               *bool   `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32  `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetAllowOutbound(v bool) *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetInstanceId(v string) *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetNumber(v string) *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetRemainingTime(v int32) *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetTestOnly(v bool) *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetTrunks(v int32) *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetUsage(v string) *CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.Usage = &v
	return s
}

type CreateInstanceResponseBodyInstanceSuccessLoginNames struct {
	SuccessLoginName []*string `json:"SuccessLoginName,omitempty" xml:"SuccessLoginName,omitempty" type:"Repeated"`
}

func (s CreateInstanceResponseBodyInstanceSuccessLoginNames) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstanceSuccessLoginNames) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstanceSuccessLoginNames) SetSuccessLoginName(v []*string) *CreateInstanceResponseBodyInstanceSuccessLoginNames {
	s.SuccessLoginName = v
	return s
}

type CreateInstanceResponseBodyInstanceSuccessPhoneNumbers struct {
	SuccessPhoneNumber []*string `json:"SuccessPhoneNumber,omitempty" xml:"SuccessPhoneNumber,omitempty" type:"Repeated"`
}

func (s CreateInstanceResponseBodyInstanceSuccessPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstanceSuccessPhoneNumbers) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstanceSuccessPhoneNumbers) SetSuccessPhoneNumber(v []*string) *CreateInstanceResponseBodyInstanceSuccessPhoneNumbers {
	s.SuccessPhoneNumber = v
	return s
}

type CreateInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetHeaders(v map[string]*string) *CreateInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceResponse) SetStatusCode(v int32) *CreateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceResponse) SetBody(v *CreateInstanceResponseBody) *CreateInstanceResponse {
	s.Body = v
	return s
}

type CreateMediaRequest struct {
	Content      *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	FileName     *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OssFileName  *string `json:"OssFileName,omitempty" xml:"OssFileName,omitempty"`
	OssFilePath  *string `json:"OssFilePath,omitempty" xml:"OssFilePath,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UploadResult *string `json:"UploadResult,omitempty" xml:"UploadResult,omitempty"`
}

func (s CreateMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaRequest) GoString() string {
	return s.String()
}

func (s *CreateMediaRequest) SetContent(v string) *CreateMediaRequest {
	s.Content = &v
	return s
}

func (s *CreateMediaRequest) SetDescription(v string) *CreateMediaRequest {
	s.Description = &v
	return s
}

func (s *CreateMediaRequest) SetFileName(v string) *CreateMediaRequest {
	s.FileName = &v
	return s
}

func (s *CreateMediaRequest) SetInstanceId(v string) *CreateMediaRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateMediaRequest) SetName(v string) *CreateMediaRequest {
	s.Name = &v
	return s
}

func (s *CreateMediaRequest) SetOssFileName(v string) *CreateMediaRequest {
	s.OssFileName = &v
	return s
}

func (s *CreateMediaRequest) SetOssFilePath(v string) *CreateMediaRequest {
	s.OssFilePath = &v
	return s
}

func (s *CreateMediaRequest) SetType(v string) *CreateMediaRequest {
	s.Type = &v
	return s
}

func (s *CreateMediaRequest) SetUploadResult(v string) *CreateMediaRequest {
	s.UploadResult = &v
	return s
}

type CreateMediaResponseBody struct {
	Code             *string                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode   *int32                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	MediaUploadParam *CreateMediaResponseBodyMediaUploadParam `json:"MediaUploadParam,omitempty" xml:"MediaUploadParam,omitempty" type:"Struct"`
	Message          *string                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId        *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success          *bool                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMediaResponseBody) SetCode(v string) *CreateMediaResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMediaResponseBody) SetHttpStatusCode(v int32) *CreateMediaResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateMediaResponseBody) SetMediaUploadParam(v *CreateMediaResponseBodyMediaUploadParam) *CreateMediaResponseBody {
	s.MediaUploadParam = v
	return s
}

func (s *CreateMediaResponseBody) SetMessage(v string) *CreateMediaResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMediaResponseBody) SetRequestId(v string) *CreateMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMediaResponseBody) SetSuccess(v bool) *CreateMediaResponseBody {
	s.Success = &v
	return s
}

type CreateMediaResponseBodyMediaUploadParam struct {
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Instance    *string `json:"Instance,omitempty" xml:"Instance,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OssFileName *string `json:"OssFileName,omitempty" xml:"OssFileName,omitempty"`
	OssFilePath *string `json:"OssFilePath,omitempty" xml:"OssFilePath,omitempty"`
}

func (s CreateMediaResponseBodyMediaUploadParam) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaResponseBodyMediaUploadParam) GoString() string {
	return s.String()
}

func (s *CreateMediaResponseBodyMediaUploadParam) SetFileName(v string) *CreateMediaResponseBodyMediaUploadParam {
	s.FileName = &v
	return s
}

func (s *CreateMediaResponseBodyMediaUploadParam) SetId(v string) *CreateMediaResponseBodyMediaUploadParam {
	s.Id = &v
	return s
}

func (s *CreateMediaResponseBodyMediaUploadParam) SetInstance(v string) *CreateMediaResponseBodyMediaUploadParam {
	s.Instance = &v
	return s
}

func (s *CreateMediaResponseBodyMediaUploadParam) SetName(v string) *CreateMediaResponseBodyMediaUploadParam {
	s.Name = &v
	return s
}

func (s *CreateMediaResponseBodyMediaUploadParam) SetOssFileName(v string) *CreateMediaResponseBodyMediaUploadParam {
	s.OssFileName = &v
	return s
}

func (s *CreateMediaResponseBodyMediaUploadParam) SetOssFilePath(v string) *CreateMediaResponseBodyMediaUploadParam {
	s.OssFilePath = &v
	return s
}

type CreateMediaResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMediaResponse) GoString() string {
	return s.String()
}

func (s *CreateMediaResponse) SetHeaders(v map[string]*string) *CreateMediaResponse {
	s.Headers = v
	return s
}

func (s *CreateMediaResponse) SetStatusCode(v int32) *CreateMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMediaResponse) SetBody(v *CreateMediaResponseBody) *CreateMediaResponse {
	s.Body = v
	return s
}

type CreateSkillGroupRequest struct {
	AllowPrivateOutboundNumber *bool     `json:"AllowPrivateOutboundNumber,omitempty" xml:"AllowPrivateOutboundNumber,omitempty"`
	Description                *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId                 *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name                       *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	OutboundPhoneNumberId      []*string `json:"OutboundPhoneNumberId,omitempty" xml:"OutboundPhoneNumberId,omitempty" type:"Repeated"`
	RoutingStrategy            *string   `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	SkillLevel                 []*int32  `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
	UserId                     []*string `json:"UserId,omitempty" xml:"UserId,omitempty" type:"Repeated"`
}

func (s CreateSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateSkillGroupRequest) SetAllowPrivateOutboundNumber(v bool) *CreateSkillGroupRequest {
	s.AllowPrivateOutboundNumber = &v
	return s
}

func (s *CreateSkillGroupRequest) SetDescription(v string) *CreateSkillGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateSkillGroupRequest) SetInstanceId(v string) *CreateSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSkillGroupRequest) SetName(v string) *CreateSkillGroupRequest {
	s.Name = &v
	return s
}

func (s *CreateSkillGroupRequest) SetOutboundPhoneNumberId(v []*string) *CreateSkillGroupRequest {
	s.OutboundPhoneNumberId = v
	return s
}

func (s *CreateSkillGroupRequest) SetRoutingStrategy(v string) *CreateSkillGroupRequest {
	s.RoutingStrategy = &v
	return s
}

func (s *CreateSkillGroupRequest) SetSkillLevel(v []*int32) *CreateSkillGroupRequest {
	s.SkillLevel = v
	return s
}

func (s *CreateSkillGroupRequest) SetUserId(v []*string) *CreateSkillGroupRequest {
	s.UserId = v
	return s
}

type CreateSkillGroupResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SkillGroupId   *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSkillGroupResponseBody) SetCode(v string) *CreateSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSkillGroupResponseBody) SetHttpStatusCode(v int32) *CreateSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateSkillGroupResponseBody) SetMessage(v string) *CreateSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSkillGroupResponseBody) SetRequestId(v string) *CreateSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSkillGroupResponseBody) SetSkillGroupId(v string) *CreateSkillGroupResponseBody {
	s.SkillGroupId = &v
	return s
}

func (s *CreateSkillGroupResponseBody) SetSuccess(v bool) *CreateSkillGroupResponseBody {
	s.Success = &v
	return s
}

type CreateSkillGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateSkillGroupResponse) SetHeaders(v map[string]*string) *CreateSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateSkillGroupResponse) SetStatusCode(v int32) *CreateSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSkillGroupResponse) SetBody(v *CreateSkillGroupResponseBody) *CreateSkillGroupResponse {
	s.Body = v
	return s
}

type CreateUserRequest struct {
	DisplayName             *string   `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email                   *string   `json:"Email,omitempty" xml:"Email,omitempty"`
	InstanceId              *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LoginName               *string   `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Phone                   *string   `json:"Phone,omitempty" xml:"Phone,omitempty"`
	PrivateOutboundNumberId *string   `json:"PrivateOutboundNumberId,omitempty" xml:"PrivateOutboundNumberId,omitempty"`
	RoleId                  []*string `json:"RoleId,omitempty" xml:"RoleId,omitempty" type:"Repeated"`
	SkillGroupId            []*string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty" type:"Repeated"`
	SkillLevel              []*int32  `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
}

func (s CreateUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUserRequest) GoString() string {
	return s.String()
}

func (s *CreateUserRequest) SetDisplayName(v string) *CreateUserRequest {
	s.DisplayName = &v
	return s
}

func (s *CreateUserRequest) SetEmail(v string) *CreateUserRequest {
	s.Email = &v
	return s
}

func (s *CreateUserRequest) SetInstanceId(v string) *CreateUserRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateUserRequest) SetLoginName(v string) *CreateUserRequest {
	s.LoginName = &v
	return s
}

func (s *CreateUserRequest) SetPhone(v string) *CreateUserRequest {
	s.Phone = &v
	return s
}

func (s *CreateUserRequest) SetPrivateOutboundNumberId(v string) *CreateUserRequest {
	s.PrivateOutboundNumberId = &v
	return s
}

func (s *CreateUserRequest) SetRoleId(v []*string) *CreateUserRequest {
	s.RoleId = v
	return s
}

func (s *CreateUserRequest) SetSkillGroupId(v []*string) *CreateUserRequest {
	s.SkillGroupId = v
	return s
}

func (s *CreateUserRequest) SetSkillLevel(v []*int32) *CreateUserRequest {
	s.SkillLevel = v
	return s
}

type CreateUserResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CreateUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUserResponseBody) SetCode(v string) *CreateUserResponseBody {
	s.Code = &v
	return s
}

func (s *CreateUserResponseBody) SetHttpStatusCode(v int32) *CreateUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateUserResponseBody) SetMessage(v string) *CreateUserResponseBody {
	s.Message = &v
	return s
}

func (s *CreateUserResponseBody) SetRequestId(v string) *CreateUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUserResponseBody) SetSuccess(v bool) *CreateUserResponseBody {
	s.Success = &v
	return s
}

func (s *CreateUserResponseBody) SetUserId(v string) *CreateUserResponseBody {
	s.UserId = &v
	return s
}

type CreateUserResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponse) GoString() string {
	return s.String()
}

func (s *CreateUserResponse) SetHeaders(v map[string]*string) *CreateUserResponse {
	s.Headers = v
	return s
}

func (s *CreateUserResponse) SetStatusCode(v int32) *CreateUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUserResponse) SetBody(v *CreateUserResponseBody) *CreateUserResponse {
	s.Body = v
	return s
}

type CreateVoiceAppraiseRequest struct {
	ContactFlowVersionId *string `json:"ContactFlowVersionId,omitempty" xml:"ContactFlowVersionId,omitempty"`
	Content              *string `json:"Content,omitempty" xml:"Content,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IsAppraise           *bool   `json:"IsAppraise,omitempty" xml:"IsAppraise,omitempty"`
}

func (s CreateVoiceAppraiseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVoiceAppraiseRequest) GoString() string {
	return s.String()
}

func (s *CreateVoiceAppraiseRequest) SetContactFlowVersionId(v string) *CreateVoiceAppraiseRequest {
	s.ContactFlowVersionId = &v
	return s
}

func (s *CreateVoiceAppraiseRequest) SetContent(v string) *CreateVoiceAppraiseRequest {
	s.Content = &v
	return s
}

func (s *CreateVoiceAppraiseRequest) SetInstanceId(v string) *CreateVoiceAppraiseRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateVoiceAppraiseRequest) SetIsAppraise(v bool) *CreateVoiceAppraiseRequest {
	s.IsAppraise = &v
	return s
}

type CreateVoiceAppraiseResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateVoiceAppraiseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVoiceAppraiseResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVoiceAppraiseResponseBody) SetCode(v string) *CreateVoiceAppraiseResponseBody {
	s.Code = &v
	return s
}

func (s *CreateVoiceAppraiseResponseBody) SetHttpStatusCode(v int32) *CreateVoiceAppraiseResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateVoiceAppraiseResponseBody) SetMessage(v string) *CreateVoiceAppraiseResponseBody {
	s.Message = &v
	return s
}

func (s *CreateVoiceAppraiseResponseBody) SetRequestId(v string) *CreateVoiceAppraiseResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVoiceAppraiseResponseBody) SetSuccess(v bool) *CreateVoiceAppraiseResponseBody {
	s.Success = &v
	return s
}

type CreateVoiceAppraiseResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateVoiceAppraiseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateVoiceAppraiseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVoiceAppraiseResponse) GoString() string {
	return s.String()
}

func (s *CreateVoiceAppraiseResponse) SetHeaders(v map[string]*string) *CreateVoiceAppraiseResponse {
	s.Headers = v
	return s
}

func (s *CreateVoiceAppraiseResponse) SetStatusCode(v int32) *CreateVoiceAppraiseResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVoiceAppraiseResponse) SetBody(v *CreateVoiceAppraiseResponseBody) *CreateVoiceAppraiseResponse {
	s.Body = v
	return s
}

type DeleteInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DeleteInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstanceRequest) SetInstanceId(v string) *DeleteInstanceRequest {
	s.InstanceId = &v
	return s
}

type DeleteInstanceResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponseBody) SetCode(v string) *DeleteInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteInstanceResponseBody) SetHttpStatusCode(v int32) *DeleteInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteInstanceResponseBody) SetMessage(v string) *DeleteInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteInstanceResponseBody) SetRequestId(v string) *DeleteInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteInstanceResponseBody) SetSuccess(v bool) *DeleteInstanceResponseBody {
	s.Success = &v
	return s
}

type DeleteInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponse) SetHeaders(v map[string]*string) *DeleteInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteInstanceResponse) SetStatusCode(v int32) *DeleteInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInstanceResponse) SetBody(v *DeleteInstanceResponseBody) *DeleteInstanceResponse {
	s.Body = v
	return s
}

type DeleteMediaRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DeleteMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaRequest) SetInstanceId(v string) *DeleteMediaRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteMediaRequest) SetName(v string) *DeleteMediaRequest {
	s.Name = &v
	return s
}

type DeleteMediaResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaResponseBody) SetCode(v string) *DeleteMediaResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMediaResponseBody) SetHttpStatusCode(v int32) *DeleteMediaResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteMediaResponseBody) SetMessage(v string) *DeleteMediaResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMediaResponseBody) SetRequestId(v string) *DeleteMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMediaResponseBody) SetSuccess(v bool) *DeleteMediaResponseBody {
	s.Success = &v
	return s
}

type DeleteMediaResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaResponse) SetHeaders(v map[string]*string) *DeleteMediaResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaResponse) SetStatusCode(v int32) *DeleteMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaResponse) SetBody(v *DeleteMediaResponseBody) *DeleteMediaResponse {
	s.Body = v
	return s
}

type DeletePhoneTagsRequest struct {
	InstanceId      *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumberList []*string `json:"PhoneNumberList,omitempty" xml:"PhoneNumberList,omitempty" type:"Repeated"`
}

func (s DeletePhoneTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePhoneTagsRequest) GoString() string {
	return s.String()
}

func (s *DeletePhoneTagsRequest) SetInstanceId(v string) *DeletePhoneTagsRequest {
	s.InstanceId = &v
	return s
}

func (s *DeletePhoneTagsRequest) SetPhoneNumberList(v []*string) *DeletePhoneTagsRequest {
	s.PhoneNumberList = v
	return s
}

type DeletePhoneTagsResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeletePhoneTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePhoneTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePhoneTagsResponseBody) SetCode(v string) *DeletePhoneTagsResponseBody {
	s.Code = &v
	return s
}

func (s *DeletePhoneTagsResponseBody) SetHttpStatusCode(v int32) *DeletePhoneTagsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeletePhoneTagsResponseBody) SetMessage(v string) *DeletePhoneTagsResponseBody {
	s.Message = &v
	return s
}

func (s *DeletePhoneTagsResponseBody) SetRequestId(v string) *DeletePhoneTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePhoneTagsResponseBody) SetSuccess(v bool) *DeletePhoneTagsResponseBody {
	s.Success = &v
	return s
}

type DeletePhoneTagsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeletePhoneTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePhoneTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePhoneTagsResponse) GoString() string {
	return s.String()
}

func (s *DeletePhoneTagsResponse) SetHeaders(v map[string]*string) *DeletePhoneTagsResponse {
	s.Headers = v
	return s
}

func (s *DeletePhoneTagsResponse) SetStatusCode(v int32) *DeletePhoneTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePhoneTagsResponse) SetBody(v *DeletePhoneTagsResponseBody) *DeletePhoneTagsResponse {
	s.Body = v
	return s
}

type DeleteSkillGroupRequest struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s DeleteSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteSkillGroupRequest) SetInstanceId(v string) *DeleteSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteSkillGroupRequest) SetSkillGroupId(v string) *DeleteSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type DeleteSkillGroupResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSkillGroupResponseBody) SetCode(v string) *DeleteSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSkillGroupResponseBody) SetHttpStatusCode(v int32) *DeleteSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteSkillGroupResponseBody) SetMessage(v string) *DeleteSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSkillGroupResponseBody) SetRequestId(v string) *DeleteSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSkillGroupResponseBody) SetSuccess(v bool) *DeleteSkillGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteSkillGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteSkillGroupResponse) SetHeaders(v map[string]*string) *DeleteSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteSkillGroupResponse) SetStatusCode(v int32) *DeleteSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSkillGroupResponse) SetBody(v *DeleteSkillGroupResponseBody) *DeleteSkillGroupResponse {
	s.Body = v
	return s
}

type DialExRequest struct {
	AnswerMode *int32  `json:"AnswerMode,omitempty" xml:"AnswerMode,omitempty"`
	Callee     *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	Caller     *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Provider   *string `json:"Provider,omitempty" xml:"Provider,omitempty"`
	RoutPoint  *string `json:"RoutPoint,omitempty" xml:"RoutPoint,omitempty"`
}

func (s DialExRequest) String() string {
	return tea.Prettify(s)
}

func (s DialExRequest) GoString() string {
	return s.String()
}

func (s *DialExRequest) SetAnswerMode(v int32) *DialExRequest {
	s.AnswerMode = &v
	return s
}

func (s *DialExRequest) SetCallee(v string) *DialExRequest {
	s.Callee = &v
	return s
}

func (s *DialExRequest) SetCaller(v string) *DialExRequest {
	s.Caller = &v
	return s
}

func (s *DialExRequest) SetInstanceId(v string) *DialExRequest {
	s.InstanceId = &v
	return s
}

func (s *DialExRequest) SetProvider(v string) *DialExRequest {
	s.Provider = &v
	return s
}

func (s *DialExRequest) SetRoutPoint(v string) *DialExRequest {
	s.RoutPoint = &v
	return s
}

type DialExResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StatusCode     *string `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
	StatusDesc     *string `json:"StatusDesc,omitempty" xml:"StatusDesc,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	TaskId         *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TimeStamp      *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DialExResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DialExResponseBody) GoString() string {
	return s.String()
}

func (s *DialExResponseBody) SetCode(v string) *DialExResponseBody {
	s.Code = &v
	return s
}

func (s *DialExResponseBody) SetHttpStatusCode(v int32) *DialExResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DialExResponseBody) SetMessage(v string) *DialExResponseBody {
	s.Message = &v
	return s
}

func (s *DialExResponseBody) SetRequestId(v string) *DialExResponseBody {
	s.RequestId = &v
	return s
}

func (s *DialExResponseBody) SetStatusCode(v string) *DialExResponseBody {
	s.StatusCode = &v
	return s
}

func (s *DialExResponseBody) SetStatusDesc(v string) *DialExResponseBody {
	s.StatusDesc = &v
	return s
}

func (s *DialExResponseBody) SetSuccess(v bool) *DialExResponseBody {
	s.Success = &v
	return s
}

func (s *DialExResponseBody) SetTaskId(v string) *DialExResponseBody {
	s.TaskId = &v
	return s
}

func (s *DialExResponseBody) SetTimeStamp(v string) *DialExResponseBody {
	s.TimeStamp = &v
	return s
}

type DialExResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DialExResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DialExResponse) String() string {
	return tea.Prettify(s)
}

func (s DialExResponse) GoString() string {
	return s.String()
}

func (s *DialExResponse) SetHeaders(v map[string]*string) *DialExResponse {
	s.Headers = v
	return s
}

func (s *DialExResponse) SetStatusCode(v int32) *DialExResponse {
	s.StatusCode = &v
	return s
}

func (s *DialExResponse) SetBody(v *DialExResponseBody) *DialExResponse {
	s.Body = v
	return s
}

type DisableTrunkProvidersRequest struct {
	ProviderName []*string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty" type:"Repeated"`
}

func (s DisableTrunkProvidersRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableTrunkProvidersRequest) GoString() string {
	return s.String()
}

func (s *DisableTrunkProvidersRequest) SetProviderName(v []*string) *DisableTrunkProvidersRequest {
	s.ProviderName = v
	return s
}

type DisableTrunkProvidersResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableTrunkProvidersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableTrunkProvidersResponseBody) GoString() string {
	return s.String()
}

func (s *DisableTrunkProvidersResponseBody) SetCode(v string) *DisableTrunkProvidersResponseBody {
	s.Code = &v
	return s
}

func (s *DisableTrunkProvidersResponseBody) SetHttpStatusCode(v int32) *DisableTrunkProvidersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DisableTrunkProvidersResponseBody) SetMessage(v string) *DisableTrunkProvidersResponseBody {
	s.Message = &v
	return s
}

func (s *DisableTrunkProvidersResponseBody) SetRequestId(v string) *DisableTrunkProvidersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableTrunkProvidersResponseBody) SetSuccess(v bool) *DisableTrunkProvidersResponseBody {
	s.Success = &v
	return s
}

type DisableTrunkProvidersResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableTrunkProvidersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableTrunkProvidersResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableTrunkProvidersResponse) GoString() string {
	return s.String()
}

func (s *DisableTrunkProvidersResponse) SetHeaders(v map[string]*string) *DisableTrunkProvidersResponse {
	s.Headers = v
	return s
}

func (s *DisableTrunkProvidersResponse) SetStatusCode(v int32) *DisableTrunkProvidersResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableTrunkProvidersResponse) SetBody(v *DisableTrunkProvidersResponseBody) *DisableTrunkProvidersResponse {
	s.Body = v
	return s
}

type DownloadAllTypeRecordingRequest struct {
	Channel    *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	ContactId  *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DownloadAllTypeRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadAllTypeRecordingRequest) GoString() string {
	return s.String()
}

func (s *DownloadAllTypeRecordingRequest) SetChannel(v string) *DownloadAllTypeRecordingRequest {
	s.Channel = &v
	return s
}

func (s *DownloadAllTypeRecordingRequest) SetContactId(v string) *DownloadAllTypeRecordingRequest {
	s.ContactId = &v
	return s
}

func (s *DownloadAllTypeRecordingRequest) SetInstanceId(v string) *DownloadAllTypeRecordingRequest {
	s.InstanceId = &v
	return s
}

type DownloadAllTypeRecordingResponseBody struct {
	Code                   *string                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode         *int32                                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	MediaDownloadParamList *DownloadAllTypeRecordingResponseBodyMediaDownloadParamList `json:"MediaDownloadParamList,omitempty" xml:"MediaDownloadParamList,omitempty" type:"Struct"`
	Message                *string                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId              *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DownloadAllTypeRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadAllTypeRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadAllTypeRecordingResponseBody) SetCode(v string) *DownloadAllTypeRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *DownloadAllTypeRecordingResponseBody) SetHttpStatusCode(v int32) *DownloadAllTypeRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DownloadAllTypeRecordingResponseBody) SetMediaDownloadParamList(v *DownloadAllTypeRecordingResponseBodyMediaDownloadParamList) *DownloadAllTypeRecordingResponseBody {
	s.MediaDownloadParamList = v
	return s
}

func (s *DownloadAllTypeRecordingResponseBody) SetMessage(v string) *DownloadAllTypeRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *DownloadAllTypeRecordingResponseBody) SetRequestId(v string) *DownloadAllTypeRecordingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadAllTypeRecordingResponseBody) SetSuccess(v bool) *DownloadAllTypeRecordingResponseBody {
	s.Success = &v
	return s
}

type DownloadAllTypeRecordingResponseBodyMediaDownloadParamList struct {
	MediaDownloadParam []*DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam `json:"MediaDownloadParam,omitempty" xml:"MediaDownloadParam,omitempty" type:"Repeated"`
}

func (s DownloadAllTypeRecordingResponseBodyMediaDownloadParamList) String() string {
	return tea.Prettify(s)
}

func (s DownloadAllTypeRecordingResponseBodyMediaDownloadParamList) GoString() string {
	return s.String()
}

func (s *DownloadAllTypeRecordingResponseBodyMediaDownloadParamList) SetMediaDownloadParam(v []*DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam) *DownloadAllTypeRecordingResponseBodyMediaDownloadParamList {
	s.MediaDownloadParam = v
	return s
}

type DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam struct {
	FileName     *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	SignatureUrl *string `json:"SignatureUrl,omitempty" xml:"SignatureUrl,omitempty"`
}

func (s DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam) String() string {
	return tea.Prettify(s)
}

func (s DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam) GoString() string {
	return s.String()
}

func (s *DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam) SetFileName(v string) *DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam {
	s.FileName = &v
	return s
}

func (s *DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam) SetSignatureUrl(v string) *DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam {
	s.SignatureUrl = &v
	return s
}

type DownloadAllTypeRecordingResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DownloadAllTypeRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DownloadAllTypeRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadAllTypeRecordingResponse) GoString() string {
	return s.String()
}

func (s *DownloadAllTypeRecordingResponse) SetHeaders(v map[string]*string) *DownloadAllTypeRecordingResponse {
	s.Headers = v
	return s
}

func (s *DownloadAllTypeRecordingResponse) SetStatusCode(v int32) *DownloadAllTypeRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadAllTypeRecordingResponse) SetBody(v *DownloadAllTypeRecordingResponseBody) *DownloadAllTypeRecordingResponse {
	s.Body = v
	return s
}

type DownloadRecordingRequest struct {
	Channel    *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	FileName   *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DownloadRecordingRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadRecordingRequest) GoString() string {
	return s.String()
}

func (s *DownloadRecordingRequest) SetChannel(v string) *DownloadRecordingRequest {
	s.Channel = &v
	return s
}

func (s *DownloadRecordingRequest) SetFileName(v string) *DownloadRecordingRequest {
	s.FileName = &v
	return s
}

func (s *DownloadRecordingRequest) SetInstanceId(v string) *DownloadRecordingRequest {
	s.InstanceId = &v
	return s
}

type DownloadRecordingResponseBody struct {
	Code               *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode     *int32                                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	MediaDownloadParam *DownloadRecordingResponseBodyMediaDownloadParam `json:"MediaDownloadParam,omitempty" xml:"MediaDownloadParam,omitempty" type:"Struct"`
	Message            *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId          *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success            *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DownloadRecordingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadRecordingResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadRecordingResponseBody) SetCode(v string) *DownloadRecordingResponseBody {
	s.Code = &v
	return s
}

func (s *DownloadRecordingResponseBody) SetHttpStatusCode(v int32) *DownloadRecordingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DownloadRecordingResponseBody) SetMediaDownloadParam(v *DownloadRecordingResponseBodyMediaDownloadParam) *DownloadRecordingResponseBody {
	s.MediaDownloadParam = v
	return s
}

func (s *DownloadRecordingResponseBody) SetMessage(v string) *DownloadRecordingResponseBody {
	s.Message = &v
	return s
}

func (s *DownloadRecordingResponseBody) SetRequestId(v string) *DownloadRecordingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadRecordingResponseBody) SetSuccess(v bool) *DownloadRecordingResponseBody {
	s.Success = &v
	return s
}

type DownloadRecordingResponseBodyMediaDownloadParam struct {
	FileName     *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	SignatureUrl *string `json:"SignatureUrl,omitempty" xml:"SignatureUrl,omitempty"`
}

func (s DownloadRecordingResponseBodyMediaDownloadParam) String() string {
	return tea.Prettify(s)
}

func (s DownloadRecordingResponseBodyMediaDownloadParam) GoString() string {
	return s.String()
}

func (s *DownloadRecordingResponseBodyMediaDownloadParam) SetFileName(v string) *DownloadRecordingResponseBodyMediaDownloadParam {
	s.FileName = &v
	return s
}

func (s *DownloadRecordingResponseBodyMediaDownloadParam) SetSignatureUrl(v string) *DownloadRecordingResponseBodyMediaDownloadParam {
	s.SignatureUrl = &v
	return s
}

type DownloadRecordingResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DownloadRecordingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DownloadRecordingResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadRecordingResponse) GoString() string {
	return s.String()
}

func (s *DownloadRecordingResponse) SetHeaders(v map[string]*string) *DownloadRecordingResponse {
	s.Headers = v
	return s
}

func (s *DownloadRecordingResponse) SetStatusCode(v int32) *DownloadRecordingResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadRecordingResponse) SetBody(v *DownloadRecordingResponseBody) *DownloadRecordingResponse {
	s.Body = v
	return s
}

type FindUsersRequest struct {
	Criteria   *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s FindUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s FindUsersRequest) GoString() string {
	return s.String()
}

func (s *FindUsersRequest) SetCriteria(v string) *FindUsersRequest {
	s.Criteria = &v
	return s
}

func (s *FindUsersRequest) SetInstanceId(v string) *FindUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *FindUsersRequest) SetPageNumber(v int32) *FindUsersRequest {
	s.PageNumber = &v
	return s
}

func (s *FindUsersRequest) SetPageSize(v int32) *FindUsersRequest {
	s.PageSize = &v
	return s
}

type FindUsersResponseBody struct {
	Code           *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                       `json:"Success,omitempty" xml:"Success,omitempty"`
	Users          *FindUsersResponseBodyUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Struct"`
}

func (s FindUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponseBody) GoString() string {
	return s.String()
}

func (s *FindUsersResponseBody) SetCode(v string) *FindUsersResponseBody {
	s.Code = &v
	return s
}

func (s *FindUsersResponseBody) SetHttpStatusCode(v int32) *FindUsersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *FindUsersResponseBody) SetMessage(v string) *FindUsersResponseBody {
	s.Message = &v
	return s
}

func (s *FindUsersResponseBody) SetRequestId(v string) *FindUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *FindUsersResponseBody) SetSuccess(v bool) *FindUsersResponseBody {
	s.Success = &v
	return s
}

func (s *FindUsersResponseBody) SetUsers(v *FindUsersResponseBodyUsers) *FindUsersResponseBody {
	s.Users = v
	return s
}

type FindUsersResponseBodyUsers struct {
	List       *FindUsersResponseBodyUsersList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s FindUsersResponseBodyUsers) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponseBodyUsers) GoString() string {
	return s.String()
}

func (s *FindUsersResponseBodyUsers) SetList(v *FindUsersResponseBodyUsersList) *FindUsersResponseBodyUsers {
	s.List = v
	return s
}

func (s *FindUsersResponseBodyUsers) SetPageNumber(v int32) *FindUsersResponseBodyUsers {
	s.PageNumber = &v
	return s
}

func (s *FindUsersResponseBodyUsers) SetPageSize(v int32) *FindUsersResponseBodyUsers {
	s.PageSize = &v
	return s
}

func (s *FindUsersResponseBodyUsers) SetTotalCount(v int32) *FindUsersResponseBodyUsers {
	s.TotalCount = &v
	return s
}

type FindUsersResponseBodyUsersList struct {
	User []*FindUsersResponseBodyUsersListUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s FindUsersResponseBodyUsersList) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponseBodyUsersList) GoString() string {
	return s.String()
}

func (s *FindUsersResponseBodyUsersList) SetUser(v []*FindUsersResponseBodyUsersListUser) *FindUsersResponseBodyUsersList {
	s.User = v
	return s
}

type FindUsersResponseBodyUsersListUser struct {
	Detail                  *FindUsersResponseBodyUsersListUserDetail      `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	InstanceId              *string                                        `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PrivateOutboundNumberId *string                                        `json:"PrivateOutboundNumberId,omitempty" xml:"PrivateOutboundNumberId,omitempty"`
	RamId                   *string                                        `json:"RamId,omitempty" xml:"RamId,omitempty"`
	Roles                   *FindUsersResponseBodyUsersListUserRoles       `json:"Roles,omitempty" xml:"Roles,omitempty" type:"Struct"`
	SkillLevels             *FindUsersResponseBodyUsersListUserSkillLevels `json:"SkillLevels,omitempty" xml:"SkillLevels,omitempty" type:"Struct"`
	UserId                  *string                                        `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s FindUsersResponseBodyUsersListUser) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponseBodyUsersListUser) GoString() string {
	return s.String()
}

func (s *FindUsersResponseBodyUsersListUser) SetDetail(v *FindUsersResponseBodyUsersListUserDetail) *FindUsersResponseBodyUsersListUser {
	s.Detail = v
	return s
}

func (s *FindUsersResponseBodyUsersListUser) SetInstanceId(v string) *FindUsersResponseBodyUsersListUser {
	s.InstanceId = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUser) SetPrivateOutboundNumberId(v string) *FindUsersResponseBodyUsersListUser {
	s.PrivateOutboundNumberId = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUser) SetRamId(v string) *FindUsersResponseBodyUsersListUser {
	s.RamId = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUser) SetRoles(v *FindUsersResponseBodyUsersListUserRoles) *FindUsersResponseBodyUsersListUser {
	s.Roles = v
	return s
}

func (s *FindUsersResponseBodyUsersListUser) SetSkillLevels(v *FindUsersResponseBodyUsersListUserSkillLevels) *FindUsersResponseBodyUsersListUser {
	s.SkillLevels = v
	return s
}

func (s *FindUsersResponseBodyUsersListUser) SetUserId(v string) *FindUsersResponseBodyUsersListUser {
	s.UserId = &v
	return s
}

type FindUsersResponseBodyUsersListUserDetail struct {
	Department  *string `json:"Department,omitempty" xml:"Department,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	LoginName   *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Phone       *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s FindUsersResponseBodyUsersListUserDetail) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponseBodyUsersListUserDetail) GoString() string {
	return s.String()
}

func (s *FindUsersResponseBodyUsersListUserDetail) SetDepartment(v string) *FindUsersResponseBodyUsersListUserDetail {
	s.Department = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserDetail) SetDisplayName(v string) *FindUsersResponseBodyUsersListUserDetail {
	s.DisplayName = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserDetail) SetEmail(v string) *FindUsersResponseBodyUsersListUserDetail {
	s.Email = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserDetail) SetLoginName(v string) *FindUsersResponseBodyUsersListUserDetail {
	s.LoginName = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserDetail) SetPhone(v string) *FindUsersResponseBodyUsersListUserDetail {
	s.Phone = &v
	return s
}

type FindUsersResponseBodyUsersListUserRoles struct {
	Role []*FindUsersResponseBodyUsersListUserRolesRole `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s FindUsersResponseBodyUsersListUserRoles) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponseBodyUsersListUserRoles) GoString() string {
	return s.String()
}

func (s *FindUsersResponseBodyUsersListUserRoles) SetRole(v []*FindUsersResponseBodyUsersListUserRolesRole) *FindUsersResponseBodyUsersListUserRoles {
	s.Role = v
	return s
}

type FindUsersResponseBodyUsersListUserRolesRole struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RoleDescription *string `json:"RoleDescription,omitempty" xml:"RoleDescription,omitempty"`
	RoleId          *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s FindUsersResponseBodyUsersListUserRolesRole) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponseBodyUsersListUserRolesRole) GoString() string {
	return s.String()
}

func (s *FindUsersResponseBodyUsersListUserRolesRole) SetInstanceId(v string) *FindUsersResponseBodyUsersListUserRolesRole {
	s.InstanceId = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserRolesRole) SetRoleDescription(v string) *FindUsersResponseBodyUsersListUserRolesRole {
	s.RoleDescription = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserRolesRole) SetRoleId(v string) *FindUsersResponseBodyUsersListUserRolesRole {
	s.RoleId = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserRolesRole) SetRoleName(v string) *FindUsersResponseBodyUsersListUserRolesRole {
	s.RoleName = &v
	return s
}

type FindUsersResponseBodyUsersListUserSkillLevels struct {
	SkillLevel []*FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
}

func (s FindUsersResponseBodyUsersListUserSkillLevels) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponseBodyUsersListUserSkillLevels) GoString() string {
	return s.String()
}

func (s *FindUsersResponseBodyUsersListUserSkillLevels) SetSkillLevel(v []*FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel) *FindUsersResponseBodyUsersListUserSkillLevels {
	s.SkillLevel = v
	return s
}

type FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel struct {
	Level        *int32                                                        `json:"Level,omitempty" xml:"Level,omitempty"`
	Skill        *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill `json:"Skill,omitempty" xml:"Skill,omitempty" type:"Struct"`
	SkillLevelId *string                                                       `json:"SkillLevelId,omitempty" xml:"SkillLevelId,omitempty"`
}

func (s FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel) GoString() string {
	return s.String()
}

func (s *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel) SetLevel(v int32) *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel {
	s.Level = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel) SetSkill(v *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel {
	s.Skill = v
	return s
}

func (s *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel) SetSkillLevelId(v string) *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel {
	s.SkillLevelId = &v
	return s
}

type FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill struct {
	InstanceId            *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SkillGroupDescription *string `json:"SkillGroupDescription,omitempty" xml:"SkillGroupDescription,omitempty"`
	SkillGroupId          *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName        *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) GoString() string {
	return s.String()
}

func (s *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetInstanceId(v string) *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.InstanceId = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetSkillGroupDescription(v string) *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.SkillGroupDescription = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetSkillGroupId(v string) *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.SkillGroupId = &v
	return s
}

func (s *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetSkillGroupName(v string) *FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.SkillGroupName = &v
	return s
}

type FindUsersResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *FindUsersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s FindUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s FindUsersResponse) GoString() string {
	return s.String()
}

func (s *FindUsersResponse) SetHeaders(v map[string]*string) *FindUsersResponse {
	s.Headers = v
	return s
}

func (s *FindUsersResponse) SetStatusCode(v int32) *FindUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *FindUsersResponse) SetBody(v *FindUsersResponseBody) *FindUsersResponse {
	s.Body = v
	return s
}

type GenerateAgentStatisticReportRequest struct {
	AgentId    *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	EndDate    *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartDate  *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s GenerateAgentStatisticReportRequest) String() string {
	return tea.Prettify(s)
}

func (s GenerateAgentStatisticReportRequest) GoString() string {
	return s.String()
}

func (s *GenerateAgentStatisticReportRequest) SetAgentId(v string) *GenerateAgentStatisticReportRequest {
	s.AgentId = &v
	return s
}

func (s *GenerateAgentStatisticReportRequest) SetEndDate(v string) *GenerateAgentStatisticReportRequest {
	s.EndDate = &v
	return s
}

func (s *GenerateAgentStatisticReportRequest) SetInstanceId(v string) *GenerateAgentStatisticReportRequest {
	s.InstanceId = &v
	return s
}

func (s *GenerateAgentStatisticReportRequest) SetPageNumber(v int32) *GenerateAgentStatisticReportRequest {
	s.PageNumber = &v
	return s
}

func (s *GenerateAgentStatisticReportRequest) SetPageSize(v int32) *GenerateAgentStatisticReportRequest {
	s.PageSize = &v
	return s
}

func (s *GenerateAgentStatisticReportRequest) SetStartDate(v string) *GenerateAgentStatisticReportRequest {
	s.StartDate = &v
	return s
}

type GenerateAgentStatisticReportResponseBody struct {
	Code           *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	DataList       *GenerateAgentStatisticReportResponseBodyDataList `json:"DataList,omitempty" xml:"DataList,omitempty" type:"Struct"`
	HttpStatusCode *int32                                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GenerateAgentStatisticReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateAgentStatisticReportResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateAgentStatisticReportResponseBody) SetCode(v string) *GenerateAgentStatisticReportResponseBody {
	s.Code = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBody) SetDataList(v *GenerateAgentStatisticReportResponseBodyDataList) *GenerateAgentStatisticReportResponseBody {
	s.DataList = v
	return s
}

func (s *GenerateAgentStatisticReportResponseBody) SetHttpStatusCode(v int32) *GenerateAgentStatisticReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBody) SetMessage(v string) *GenerateAgentStatisticReportResponseBody {
	s.Message = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBody) SetRequestId(v string) *GenerateAgentStatisticReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBody) SetSuccess(v bool) *GenerateAgentStatisticReportResponseBody {
	s.Success = &v
	return s
}

type GenerateAgentStatisticReportResponseBodyDataList struct {
	List       *GenerateAgentStatisticReportResponseBodyDataListList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GenerateAgentStatisticReportResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GenerateAgentStatisticReportResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GenerateAgentStatisticReportResponseBodyDataList) SetList(v *GenerateAgentStatisticReportResponseBodyDataListList) *GenerateAgentStatisticReportResponseBodyDataList {
	s.List = v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataList) SetPageNumber(v int32) *GenerateAgentStatisticReportResponseBodyDataList {
	s.PageNumber = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataList) SetPageSize(v int32) *GenerateAgentStatisticReportResponseBodyDataList {
	s.PageSize = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataList) SetTotalCount(v int32) *GenerateAgentStatisticReportResponseBodyDataList {
	s.TotalCount = &v
	return s
}

type GenerateAgentStatisticReportResponseBodyDataListList struct {
	GenerateAgentStatistic []*GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic `json:"GenerateAgentStatistic,omitempty" xml:"GenerateAgentStatistic,omitempty" type:"Repeated"`
}

func (s GenerateAgentStatisticReportResponseBodyDataListList) String() string {
	return tea.Prettify(s)
}

func (s GenerateAgentStatisticReportResponseBodyDataListList) GoString() string {
	return s.String()
}

func (s *GenerateAgentStatisticReportResponseBodyDataListList) SetGenerateAgentStatistic(v []*GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) *GenerateAgentStatisticReportResponseBodyDataListList {
	s.GenerateAgentStatistic = v
	return s
}

type GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic struct {
	AgentId           *string                                                                             `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName         *string                                                                             `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	AverageReadyTime  *int64                                                                              `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	Inbound           *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId        *string                                                                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LoginName         *string                                                                             `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	MaxReadyTime      *int64                                                                              `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	OccupancyRate     *float32                                                                            `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	Outbound          *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall           *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	RecordDate        *string                                                                             `json:"RecordDate,omitempty" xml:"RecordDate,omitempty"`
	SkillGroupIds     *string                                                                             `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	SkillGroupNames   *string                                                                             `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
	TotalBreakTime    *int64                                                                              `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalLoggedInTime *int64                                                                              `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime    *int64                                                                              `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
}

func (s GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) String() string {
	return tea.Prettify(s)
}

func (s GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) GoString() string {
	return s.String()
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetAgentId(v string) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.AgentId = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetAgentName(v string) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.AgentName = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetAverageReadyTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.AverageReadyTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetInbound(v *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.Inbound = v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetInstanceId(v string) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.InstanceId = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetLoginName(v string) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.LoginName = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetMaxReadyTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.MaxReadyTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetOccupancyRate(v float32) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.OccupancyRate = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetOutbound(v *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.Outbound = v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetOverall(v *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.Overall = v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetRecordDate(v string) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.RecordDate = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetSkillGroupIds(v string) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.SkillGroupIds = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetSkillGroupNames(v string) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.SkillGroupNames = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetTotalBreakTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.TotalBreakTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetTotalLoggedInTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.TotalLoggedInTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic) SetTotalReadyTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic {
	s.TotalReadyTime = &v
	return s
}

type GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound struct {
	AverageHoldTime              *int64   `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageRingTime              *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsHandled                 *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsOffered                 *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	HandleRate                   *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	MaxHoldTime                  *int64   `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	MaxRingTime                  *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalHoldTime                *int64   `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalRingTime                *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) String() string {
	return tea.Prettify(s)
}

func (s GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) GoString() string {
	return s.String()
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetAverageHoldTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.AverageHoldTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetAverageRingTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.AverageRingTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetAverageTalkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetAverageWorkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetCallsHandled(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.CallsHandled = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetCallsOffered(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.CallsOffered = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetHandleRate(v float32) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.HandleRate = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetMaxHoldTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.MaxHoldTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetMaxRingTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.MaxRingTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetMaxTalkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetMaxWorkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetSatisfactionIndex(v float32) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetSatisfactionSurveysOffered(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetSatisfactionSurveysResponded(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetTotalHoldTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.TotalHoldTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetTotalRingTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.TotalRingTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetTotalTalkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound) SetTotalWorkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound {
	s.TotalWorkTime = &v
	return s
}

type GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageHoldTime              *int64   `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxHoldTime                  *int64   `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalHoldTime                *int64   `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) String() string {
	return tea.Prettify(s)
}

func (s GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) GoString() string {
	return s.String()
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetAnswerRate(v float32) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.AnswerRate = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetAverageDialingTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetAverageHoldTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.AverageHoldTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetAverageTalkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetAverageWorkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetCallsAnswered(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetCallsDialed(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.CallsDialed = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetMaxDialingTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetMaxHoldTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.MaxHoldTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetMaxTalkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetMaxWorkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetSatisfactionIndex(v float32) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetSatisfactionSurveysOffered(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetSatisfactionSurveysResponded(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetTotalDialingTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetTotalHoldTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.TotalHoldTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetTotalTalkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound) SetTotalWorkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound {
	s.TotalWorkTime = &v
	return s
}

type GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall struct {
	AverageHoldTime              *int64   `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	MaxHoldTime                  *int64   `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalHoldTime                *int64   `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) String() string {
	return tea.Prettify(s)
}

func (s GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) GoString() string {
	return s.String()
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetAverageHoldTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.AverageHoldTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetAverageTalkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetAverageWorkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetMaxHoldTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.MaxHoldTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetMaxTalkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetMaxWorkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetSatisfactionIndex(v float32) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetSatisfactionSurveysOffered(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetSatisfactionSurveysResponded(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetTotalCalls(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.TotalCalls = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetTotalHoldTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.TotalHoldTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetTotalTalkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall) SetTotalWorkTime(v int64) *GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall {
	s.TotalWorkTime = &v
	return s
}

type GenerateAgentStatisticReportResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GenerateAgentStatisticReportResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GenerateAgentStatisticReportResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateAgentStatisticReportResponse) GoString() string {
	return s.String()
}

func (s *GenerateAgentStatisticReportResponse) SetHeaders(v map[string]*string) *GenerateAgentStatisticReportResponse {
	s.Headers = v
	return s
}

func (s *GenerateAgentStatisticReportResponse) SetStatusCode(v int32) *GenerateAgentStatisticReportResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateAgentStatisticReportResponse) SetBody(v *GenerateAgentStatisticReportResponseBody) *GenerateAgentStatisticReportResponse {
	s.Body = v
	return s
}

type GetAgentDataRequest struct {
	EndDay     *string `json:"EndDay,omitempty" xml:"EndDay,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartDay   *string `json:"StartDay,omitempty" xml:"StartDay,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAgentDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDataRequest) GoString() string {
	return s.String()
}

func (s *GetAgentDataRequest) SetEndDay(v string) *GetAgentDataRequest {
	s.EndDay = &v
	return s
}

func (s *GetAgentDataRequest) SetInstanceId(v string) *GetAgentDataRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAgentDataRequest) SetPageNumber(v int32) *GetAgentDataRequest {
	s.PageNumber = &v
	return s
}

func (s *GetAgentDataRequest) SetPageSize(v int32) *GetAgentDataRequest {
	s.PageSize = &v
	return s
}

func (s *GetAgentDataRequest) SetStartDay(v string) *GetAgentDataRequest {
	s.StartDay = &v
	return s
}

func (s *GetAgentDataRequest) SetUserId(v string) *GetAgentDataRequest {
	s.UserId = &v
	return s
}

type GetAgentDataResponseBody struct {
	Code           *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
	DataList       *GetAgentDataResponseBodyDataList `json:"DataList,omitempty" xml:"DataList,omitempty" type:"Struct"`
	HttpStatusCode *int32                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAgentDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetAgentDataResponseBody) SetCode(v string) *GetAgentDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetAgentDataResponseBody) SetDataList(v *GetAgentDataResponseBodyDataList) *GetAgentDataResponseBody {
	s.DataList = v
	return s
}

func (s *GetAgentDataResponseBody) SetHttpStatusCode(v int32) *GetAgentDataResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetAgentDataResponseBody) SetMessage(v string) *GetAgentDataResponseBody {
	s.Message = &v
	return s
}

func (s *GetAgentDataResponseBody) SetRequestId(v string) *GetAgentDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAgentDataResponseBody) SetSuccess(v bool) *GetAgentDataResponseBody {
	s.Success = &v
	return s
}

type GetAgentDataResponseBodyDataList struct {
	List       []*GetAgentDataResponseBodyDataListList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetAgentDataResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDataResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetAgentDataResponseBodyDataList) SetList(v []*GetAgentDataResponseBodyDataListList) *GetAgentDataResponseBodyDataList {
	s.List = v
	return s
}

func (s *GetAgentDataResponseBodyDataList) SetPageNumber(v int32) *GetAgentDataResponseBodyDataList {
	s.PageNumber = &v
	return s
}

func (s *GetAgentDataResponseBodyDataList) SetPageSize(v int32) *GetAgentDataResponseBodyDataList {
	s.PageSize = &v
	return s
}

func (s *GetAgentDataResponseBodyDataList) SetTotalCount(v int32) *GetAgentDataResponseBodyDataList {
	s.TotalCount = &v
	return s
}

type GetAgentDataResponseBodyDataListList struct {
	AgentId           *string                                       `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName         *string                                       `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	AverageReadyTime  *int64                                        `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	Inbound           *GetAgentDataResponseBodyDataListListInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId        *string                                       `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LoginName         *string                                       `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	MaxReadyTime      *int64                                        `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	OccupancyRate     *float32                                      `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	Outbound          *GetAgentDataResponseBodyDataListListOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall           *GetAgentDataResponseBodyDataListListOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	RecordDate        *string                                       `json:"RecordDate,omitempty" xml:"RecordDate,omitempty"`
	SkillGroupIds     *string                                       `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	SkillGroupNames   *string                                       `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
	TotalBreakTime    *int64                                        `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalLoggedInTime *int64                                        `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime    *int64                                        `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
}

func (s GetAgentDataResponseBodyDataListList) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDataResponseBodyDataListList) GoString() string {
	return s.String()
}

func (s *GetAgentDataResponseBodyDataListList) SetAgentId(v string) *GetAgentDataResponseBodyDataListList {
	s.AgentId = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetAgentName(v string) *GetAgentDataResponseBodyDataListList {
	s.AgentName = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetAverageReadyTime(v int64) *GetAgentDataResponseBodyDataListList {
	s.AverageReadyTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetInbound(v *GetAgentDataResponseBodyDataListListInbound) *GetAgentDataResponseBodyDataListList {
	s.Inbound = v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetInstanceId(v string) *GetAgentDataResponseBodyDataListList {
	s.InstanceId = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetLoginName(v string) *GetAgentDataResponseBodyDataListList {
	s.LoginName = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetMaxReadyTime(v int64) *GetAgentDataResponseBodyDataListList {
	s.MaxReadyTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetOccupancyRate(v float32) *GetAgentDataResponseBodyDataListList {
	s.OccupancyRate = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetOutbound(v *GetAgentDataResponseBodyDataListListOutbound) *GetAgentDataResponseBodyDataListList {
	s.Outbound = v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetOverall(v *GetAgentDataResponseBodyDataListListOverall) *GetAgentDataResponseBodyDataListList {
	s.Overall = v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetRecordDate(v string) *GetAgentDataResponseBodyDataListList {
	s.RecordDate = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetSkillGroupIds(v string) *GetAgentDataResponseBodyDataListList {
	s.SkillGroupIds = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetSkillGroupNames(v string) *GetAgentDataResponseBodyDataListList {
	s.SkillGroupNames = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetTotalBreakTime(v int64) *GetAgentDataResponseBodyDataListList {
	s.TotalBreakTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetTotalLoggedInTime(v int64) *GetAgentDataResponseBodyDataListList {
	s.TotalLoggedInTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListList) SetTotalReadyTime(v int64) *GetAgentDataResponseBodyDataListList {
	s.TotalReadyTime = &v
	return s
}

type GetAgentDataResponseBodyDataListListInbound struct {
	AverageHoldTime              *int64   `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageRingTime              *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsHandled                 *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsOffered                 *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	HandleRate                   *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	MaxHoldTime                  *int64   `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	MaxRingTime                  *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalHoldTime                *int64   `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalRingTime                *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetAgentDataResponseBodyDataListListInbound) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDataResponseBodyDataListListInbound) GoString() string {
	return s.String()
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetAverageHoldTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.AverageHoldTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetAverageRingTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.AverageRingTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetAverageTalkTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetAverageWorkTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetCallsHandled(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.CallsHandled = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetCallsOffered(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.CallsOffered = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetHandleRate(v float32) *GetAgentDataResponseBodyDataListListInbound {
	s.HandleRate = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetMaxHoldTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.MaxHoldTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetMaxRingTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.MaxRingTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetMaxTalkTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetMaxWorkTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetSatisfactionIndex(v float32) *GetAgentDataResponseBodyDataListListInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetSatisfactionSurveysOffered(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetSatisfactionSurveysResponded(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetTotalHoldTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.TotalHoldTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetTotalRingTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.TotalRingTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetTotalTalkTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListInbound) SetTotalWorkTime(v int64) *GetAgentDataResponseBodyDataListListInbound {
	s.TotalWorkTime = &v
	return s
}

type GetAgentDataResponseBodyDataListListOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageHoldTime              *int64   `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxHoldTime                  *int64   `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalHoldTime                *int64   `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetAgentDataResponseBodyDataListListOutbound) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDataResponseBodyDataListListOutbound) GoString() string {
	return s.String()
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetAnswerRate(v float32) *GetAgentDataResponseBodyDataListListOutbound {
	s.AnswerRate = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetAverageDialingTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetAverageHoldTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.AverageHoldTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetAverageTalkTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetAverageWorkTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetCallsAnswered(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetCallsDialed(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.CallsDialed = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetMaxDialingTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetMaxHoldTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.MaxHoldTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetMaxTalkTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetMaxWorkTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetSatisfactionIndex(v float32) *GetAgentDataResponseBodyDataListListOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetSatisfactionSurveysOffered(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetSatisfactionSurveysResponded(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetTotalDialingTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetTotalHoldTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.TotalHoldTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetTotalTalkTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOutbound) SetTotalWorkTime(v int64) *GetAgentDataResponseBodyDataListListOutbound {
	s.TotalWorkTime = &v
	return s
}

type GetAgentDataResponseBodyDataListListOverall struct {
	AverageHoldTime              *int64   `json:"AverageHoldTime,omitempty" xml:"AverageHoldTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	MaxHoldTime                  *int64   `json:"MaxHoldTime,omitempty" xml:"MaxHoldTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalHoldTime                *int64   `json:"TotalHoldTime,omitempty" xml:"TotalHoldTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetAgentDataResponseBodyDataListListOverall) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDataResponseBodyDataListListOverall) GoString() string {
	return s.String()
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetAverageHoldTime(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.AverageHoldTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetAverageTalkTime(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetAverageWorkTime(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetMaxHoldTime(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.MaxHoldTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetMaxTalkTime(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetMaxWorkTime(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetSatisfactionIndex(v float32) *GetAgentDataResponseBodyDataListListOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetSatisfactionSurveysOffered(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetSatisfactionSurveysResponded(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetTotalCalls(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.TotalCalls = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetTotalHoldTime(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.TotalHoldTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetTotalTalkTime(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *GetAgentDataResponseBodyDataListListOverall) SetTotalWorkTime(v int64) *GetAgentDataResponseBodyDataListListOverall {
	s.TotalWorkTime = &v
	return s
}

type GetAgentDataResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAgentDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAgentDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAgentDataResponse) GoString() string {
	return s.String()
}

func (s *GetAgentDataResponse) SetHeaders(v map[string]*string) *GetAgentDataResponse {
	s.Headers = v
	return s
}

func (s *GetAgentDataResponse) SetStatusCode(v int32) *GetAgentDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAgentDataResponse) SetBody(v *GetAgentDataResponseBody) *GetAgentDataResponse {
	s.Body = v
	return s
}

type GetCallMeasureSummaryReportRequest struct {
	Day          *int32  `json:"Day,omitempty" xml:"Day,omitempty"`
	IntervalType *string `json:"IntervalType,omitempty" xml:"IntervalType,omitempty"`
	Month        *int32  `json:"Month,omitempty" xml:"Month,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Year         *int32  `json:"Year,omitempty" xml:"Year,omitempty"`
}

func (s GetCallMeasureSummaryReportRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCallMeasureSummaryReportRequest) GoString() string {
	return s.String()
}

func (s *GetCallMeasureSummaryReportRequest) SetDay(v int32) *GetCallMeasureSummaryReportRequest {
	s.Day = &v
	return s
}

func (s *GetCallMeasureSummaryReportRequest) SetIntervalType(v string) *GetCallMeasureSummaryReportRequest {
	s.IntervalType = &v
	return s
}

func (s *GetCallMeasureSummaryReportRequest) SetMonth(v int32) *GetCallMeasureSummaryReportRequest {
	s.Month = &v
	return s
}

func (s *GetCallMeasureSummaryReportRequest) SetPageNumber(v int32) *GetCallMeasureSummaryReportRequest {
	s.PageNumber = &v
	return s
}

func (s *GetCallMeasureSummaryReportRequest) SetPageSize(v int32) *GetCallMeasureSummaryReportRequest {
	s.PageSize = &v
	return s
}

func (s *GetCallMeasureSummaryReportRequest) SetYear(v int32) *GetCallMeasureSummaryReportRequest {
	s.Year = &v
	return s
}

type GetCallMeasureSummaryReportResponseBody struct {
	Code           *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	NumberReports  *GetCallMeasureSummaryReportResponseBodyNumberReports `json:"NumberReports,omitempty" xml:"NumberReports,omitempty" type:"Struct"`
	RequestId      *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	SummaryReport  *GetCallMeasureSummaryReportResponseBodySummaryReport `json:"SummaryReport,omitempty" xml:"SummaryReport,omitempty" type:"Struct"`
}

func (s GetCallMeasureSummaryReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCallMeasureSummaryReportResponseBody) GoString() string {
	return s.String()
}

func (s *GetCallMeasureSummaryReportResponseBody) SetCode(v string) *GetCallMeasureSummaryReportResponseBody {
	s.Code = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBody) SetHttpStatusCode(v int32) *GetCallMeasureSummaryReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBody) SetMessage(v string) *GetCallMeasureSummaryReportResponseBody {
	s.Message = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBody) SetNumberReports(v *GetCallMeasureSummaryReportResponseBodyNumberReports) *GetCallMeasureSummaryReportResponseBody {
	s.NumberReports = v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBody) SetRequestId(v string) *GetCallMeasureSummaryReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBody) SetSuccess(v bool) *GetCallMeasureSummaryReportResponseBody {
	s.Success = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBody) SetSummaryReport(v *GetCallMeasureSummaryReportResponseBodySummaryReport) *GetCallMeasureSummaryReportResponseBody {
	s.SummaryReport = v
	return s
}

type GetCallMeasureSummaryReportResponseBodyNumberReports struct {
	List       *GetCallMeasureSummaryReportResponseBodyNumberReportsList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetCallMeasureSummaryReportResponseBodyNumberReports) String() string {
	return tea.Prettify(s)
}

func (s GetCallMeasureSummaryReportResponseBodyNumberReports) GoString() string {
	return s.String()
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReports) SetList(v *GetCallMeasureSummaryReportResponseBodyNumberReportsList) *GetCallMeasureSummaryReportResponseBodyNumberReports {
	s.List = v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReports) SetPageNumber(v int32) *GetCallMeasureSummaryReportResponseBodyNumberReports {
	s.PageNumber = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReports) SetPageSize(v int32) *GetCallMeasureSummaryReportResponseBodyNumberReports {
	s.PageSize = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReports) SetTotalCount(v int32) *GetCallMeasureSummaryReportResponseBodyNumberReports {
	s.TotalCount = &v
	return s
}

type GetCallMeasureSummaryReportResponseBodyNumberReportsList struct {
	NumberReport []*GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport `json:"NumberReport,omitempty" xml:"NumberReport,omitempty" type:"Repeated"`
}

func (s GetCallMeasureSummaryReportResponseBodyNumberReportsList) String() string {
	return tea.Prettify(s)
}

func (s GetCallMeasureSummaryReportResponseBodyNumberReportsList) GoString() string {
	return s.String()
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReportsList) SetNumberReport(v []*GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) *GetCallMeasureSummaryReportResponseBodyNumberReportsList {
	s.NumberReport = v
	return s
}

type GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport struct {
	Day                      *int32  `json:"Day,omitempty" xml:"Day,omitempty"`
	InboundCount             *int64  `json:"InboundCount,omitempty" xml:"InboundCount,omitempty"`
	InboundDurationByMinute  *int64  `json:"InboundDurationByMinute,omitempty" xml:"InboundDurationByMinute,omitempty"`
	Month                    *int32  `json:"Month,omitempty" xml:"Month,omitempty"`
	Number                   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	OutboundCount            *int64  `json:"OutboundCount,omitempty" xml:"OutboundCount,omitempty"`
	OutboundDurationByMinute *int64  `json:"OutboundDurationByMinute,omitempty" xml:"OutboundDurationByMinute,omitempty"`
	Year                     *int32  `json:"Year,omitempty" xml:"Year,omitempty"`
}

func (s GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) String() string {
	return tea.Prettify(s)
}

func (s GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) GoString() string {
	return s.String()
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) SetDay(v int32) *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport {
	s.Day = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) SetInboundCount(v int64) *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport {
	s.InboundCount = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) SetInboundDurationByMinute(v int64) *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport {
	s.InboundDurationByMinute = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) SetMonth(v int32) *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport {
	s.Month = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) SetNumber(v string) *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport {
	s.Number = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) SetOutboundCount(v int64) *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport {
	s.OutboundCount = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) SetOutboundDurationByMinute(v int64) *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport {
	s.OutboundDurationByMinute = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport) SetYear(v int32) *GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport {
	s.Year = &v
	return s
}

type GetCallMeasureSummaryReportResponseBodySummaryReport struct {
	Day                      *int32 `json:"Day,omitempty" xml:"Day,omitempty"`
	InboundCount             *int64 `json:"InboundCount,omitempty" xml:"InboundCount,omitempty"`
	InboundDurationByMinute  *int64 `json:"InboundDurationByMinute,omitempty" xml:"InboundDurationByMinute,omitempty"`
	Month                    *int32 `json:"Month,omitempty" xml:"Month,omitempty"`
	OutboundCount            *int64 `json:"OutboundCount,omitempty" xml:"OutboundCount,omitempty"`
	OutboundDurationByMinute *int64 `json:"OutboundDurationByMinute,omitempty" xml:"OutboundDurationByMinute,omitempty"`
	Year                     *int32 `json:"Year,omitempty" xml:"Year,omitempty"`
}

func (s GetCallMeasureSummaryReportResponseBodySummaryReport) String() string {
	return tea.Prettify(s)
}

func (s GetCallMeasureSummaryReportResponseBodySummaryReport) GoString() string {
	return s.String()
}

func (s *GetCallMeasureSummaryReportResponseBodySummaryReport) SetDay(v int32) *GetCallMeasureSummaryReportResponseBodySummaryReport {
	s.Day = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodySummaryReport) SetInboundCount(v int64) *GetCallMeasureSummaryReportResponseBodySummaryReport {
	s.InboundCount = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodySummaryReport) SetInboundDurationByMinute(v int64) *GetCallMeasureSummaryReportResponseBodySummaryReport {
	s.InboundDurationByMinute = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodySummaryReport) SetMonth(v int32) *GetCallMeasureSummaryReportResponseBodySummaryReport {
	s.Month = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodySummaryReport) SetOutboundCount(v int64) *GetCallMeasureSummaryReportResponseBodySummaryReport {
	s.OutboundCount = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodySummaryReport) SetOutboundDurationByMinute(v int64) *GetCallMeasureSummaryReportResponseBodySummaryReport {
	s.OutboundDurationByMinute = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponseBodySummaryReport) SetYear(v int32) *GetCallMeasureSummaryReportResponseBodySummaryReport {
	s.Year = &v
	return s
}

type GetCallMeasureSummaryReportResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCallMeasureSummaryReportResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCallMeasureSummaryReportResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCallMeasureSummaryReportResponse) GoString() string {
	return s.String()
}

func (s *GetCallMeasureSummaryReportResponse) SetHeaders(v map[string]*string) *GetCallMeasureSummaryReportResponse {
	s.Headers = v
	return s
}

func (s *GetCallMeasureSummaryReportResponse) SetStatusCode(v int32) *GetCallMeasureSummaryReportResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCallMeasureSummaryReportResponse) SetBody(v *GetCallMeasureSummaryReportResponseBody) *GetCallMeasureSummaryReportResponse {
	s.Body = v
	return s
}

type GetConfigRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ObjectId   *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
}

func (s GetConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConfigRequest) GoString() string {
	return s.String()
}

func (s *GetConfigRequest) SetInstanceId(v string) *GetConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *GetConfigRequest) SetName(v string) *GetConfigRequest {
	s.Name = &v
	return s
}

func (s *GetConfigRequest) SetObjectId(v string) *GetConfigRequest {
	s.ObjectId = &v
	return s
}

func (s *GetConfigRequest) SetObjectType(v string) *GetConfigRequest {
	s.ObjectType = &v
	return s
}

type GetConfigResponseBody struct {
	Code           *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	ConfigItem     *GetConfigResponseBodyConfigItem `json:"ConfigItem,omitempty" xml:"ConfigItem,omitempty" type:"Struct"`
	HttpStatusCode *int32                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetConfigResponseBody) SetCode(v string) *GetConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetConfigResponseBody) SetConfigItem(v *GetConfigResponseBodyConfigItem) *GetConfigResponseBody {
	s.ConfigItem = v
	return s
}

func (s *GetConfigResponseBody) SetHttpStatusCode(v int32) *GetConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetConfigResponseBody) SetMessage(v string) *GetConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetConfigResponseBody) SetRequestId(v string) *GetConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetConfigResponseBody) SetSuccess(v bool) *GetConfigResponseBody {
	s.Success = &v
	return s
}

type GetConfigResponseBodyConfigItem struct {
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetConfigResponseBodyConfigItem) String() string {
	return tea.Prettify(s)
}

func (s GetConfigResponseBodyConfigItem) GoString() string {
	return s.String()
}

func (s *GetConfigResponseBodyConfigItem) SetName(v string) *GetConfigResponseBodyConfigItem {
	s.Name = &v
	return s
}

func (s *GetConfigResponseBodyConfigItem) SetValue(v string) *GetConfigResponseBodyConfigItem {
	s.Value = &v
	return s
}

type GetConfigResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConfigResponse) GoString() string {
	return s.String()
}

func (s *GetConfigResponse) SetHeaders(v map[string]*string) *GetConfigResponse {
	s.Headers = v
	return s
}

func (s *GetConfigResponse) SetStatusCode(v int32) *GetConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetConfigResponse) SetBody(v *GetConfigResponseBody) *GetConfigResponse {
	s.Body = v
	return s
}

type GetConversationDetailByContactIdRequest struct {
	ContactId  *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetConversationDetailByContactIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConversationDetailByContactIdRequest) GoString() string {
	return s.String()
}

func (s *GetConversationDetailByContactIdRequest) SetContactId(v string) *GetConversationDetailByContactIdRequest {
	s.ContactId = &v
	return s
}

func (s *GetConversationDetailByContactIdRequest) SetInstanceId(v string) *GetConversationDetailByContactIdRequest {
	s.InstanceId = &v
	return s
}

func (s *GetConversationDetailByContactIdRequest) SetPageNumber(v int32) *GetConversationDetailByContactIdRequest {
	s.PageNumber = &v
	return s
}

func (s *GetConversationDetailByContactIdRequest) SetPageSize(v int32) *GetConversationDetailByContactIdRequest {
	s.PageSize = &v
	return s
}

type GetConversationDetailByContactIdResponseBody struct {
	Code           *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	DataList       *GetConversationDetailByContactIdResponseBodyDataList `json:"DataList,omitempty" xml:"DataList,omitempty" type:"Struct"`
	HttpStatusCode *int32                                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetConversationDetailByContactIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetConversationDetailByContactIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetConversationDetailByContactIdResponseBody) SetCode(v string) *GetConversationDetailByContactIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetConversationDetailByContactIdResponseBody) SetDataList(v *GetConversationDetailByContactIdResponseBodyDataList) *GetConversationDetailByContactIdResponseBody {
	s.DataList = v
	return s
}

func (s *GetConversationDetailByContactIdResponseBody) SetHttpStatusCode(v int32) *GetConversationDetailByContactIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetConversationDetailByContactIdResponseBody) SetMessage(v string) *GetConversationDetailByContactIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetConversationDetailByContactIdResponseBody) SetRequestId(v string) *GetConversationDetailByContactIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetConversationDetailByContactIdResponseBody) SetSuccess(v bool) *GetConversationDetailByContactIdResponseBody {
	s.Success = &v
	return s
}

type GetConversationDetailByContactIdResponseBodyDataList struct {
	List       *GetConversationDetailByContactIdResponseBodyDataListList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetConversationDetailByContactIdResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetConversationDetailByContactIdResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetConversationDetailByContactIdResponseBodyDataList) SetList(v *GetConversationDetailByContactIdResponseBodyDataListList) *GetConversationDetailByContactIdResponseBodyDataList {
	s.List = v
	return s
}

func (s *GetConversationDetailByContactIdResponseBodyDataList) SetPageNumber(v int32) *GetConversationDetailByContactIdResponseBodyDataList {
	s.PageNumber = &v
	return s
}

func (s *GetConversationDetailByContactIdResponseBodyDataList) SetPageSize(v int32) *GetConversationDetailByContactIdResponseBodyDataList {
	s.PageSize = &v
	return s
}

func (s *GetConversationDetailByContactIdResponseBodyDataList) SetTotalCount(v int32) *GetConversationDetailByContactIdResponseBodyDataList {
	s.TotalCount = &v
	return s
}

type GetConversationDetailByContactIdResponseBodyDataListList struct {
	QualityCheckPhrase []*GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase `json:"QualityCheckPhrase,omitempty" xml:"QualityCheckPhrase,omitempty" type:"Repeated"`
}

func (s GetConversationDetailByContactIdResponseBodyDataListList) String() string {
	return tea.Prettify(s)
}

func (s GetConversationDetailByContactIdResponseBodyDataListList) GoString() string {
	return s.String()
}

func (s *GetConversationDetailByContactIdResponseBodyDataListList) SetQualityCheckPhrase(v []*GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase) *GetConversationDetailByContactIdResponseBodyDataListList {
	s.QualityCheckPhrase = v
	return s
}

type GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase struct {
	Begin    *int64  `json:"Begin,omitempty" xml:"Begin,omitempty"`
	End      *int64  `json:"End,omitempty" xml:"End,omitempty"`
	Identity *string `json:"Identity,omitempty" xml:"Identity,omitempty"`
	Role     *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Words    *string `json:"Words,omitempty" xml:"Words,omitempty"`
}

func (s GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase) String() string {
	return tea.Prettify(s)
}

func (s GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase) GoString() string {
	return s.String()
}

func (s *GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase) SetBegin(v int64) *GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase {
	s.Begin = &v
	return s
}

func (s *GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase) SetEnd(v int64) *GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase {
	s.End = &v
	return s
}

func (s *GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase) SetIdentity(v string) *GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase {
	s.Identity = &v
	return s
}

func (s *GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase) SetRole(v string) *GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase {
	s.Role = &v
	return s
}

func (s *GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase) SetWords(v string) *GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase {
	s.Words = &v
	return s
}

type GetConversationDetailByContactIdResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetConversationDetailByContactIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetConversationDetailByContactIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConversationDetailByContactIdResponse) GoString() string {
	return s.String()
}

func (s *GetConversationDetailByContactIdResponse) SetHeaders(v map[string]*string) *GetConversationDetailByContactIdResponse {
	s.Headers = v
	return s
}

func (s *GetConversationDetailByContactIdResponse) SetStatusCode(v int32) *GetConversationDetailByContactIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetConversationDetailByContactIdResponse) SetBody(v *GetConversationDetailByContactIdResponseBody) *GetConversationDetailByContactIdResponse {
	s.Body = v
	return s
}

type GetInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceRequest) SetInstanceId(v string) *GetInstanceRequest {
	s.InstanceId = &v
	return s
}

type GetInstanceResponseBody struct {
	Code           *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Instance       *GetInstanceResponseBodyInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Struct"`
	Message        *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBody) SetCode(v string) *GetInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceResponseBody) SetHttpStatusCode(v int32) *GetInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInstanceResponseBody) SetInstance(v *GetInstanceResponseBodyInstance) *GetInstanceResponseBody {
	s.Instance = v
	return s
}

func (s *GetInstanceResponseBody) SetMessage(v string) *GetInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceResponseBody) SetRequestId(v string) *GetInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceResponseBody) SetSuccess(v bool) *GetInstanceResponseBody {
	s.Success = &v
	return s
}

type GetInstanceResponseBodyInstance struct {
	Admin               *GetInstanceResponseBodyInstanceAdmin        `json:"Admin,omitempty" xml:"Admin,omitempty" type:"Struct"`
	ConsoleUrl          *string                                      `json:"ConsoleUrl,omitempty" xml:"ConsoleUrl,omitempty"`
	CreatedTime         *int64                                       `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DirectoryId         *string                                      `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	DomainName          *string                                      `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	InstanceDescription *string                                      `json:"InstanceDescription,omitempty" xml:"InstanceDescription,omitempty"`
	InstanceId          *string                                      `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName        *string                                      `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	MaxOnlineAgents     *int32                                       `json:"MaxOnlineAgents,omitempty" xml:"MaxOnlineAgents,omitempty"`
	Owner               *string                                      `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PhoneNumbers        *GetInstanceResponseBodyInstancePhoneNumbers `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty" type:"Struct"`
	Status              *string                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	StorageBucket       *string                                      `json:"StorageBucket,omitempty" xml:"StorageBucket,omitempty"`
	StorageMaxDays      *int32                                       `json:"StorageMaxDays,omitempty" xml:"StorageMaxDays,omitempty"`
	StorageMaxSize      *int32                                       `json:"StorageMaxSize,omitempty" xml:"StorageMaxSize,omitempty"`
	TenantId            *string                                      `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s GetInstanceResponseBodyInstance) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyInstance) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyInstance) SetAdmin(v *GetInstanceResponseBodyInstanceAdmin) *GetInstanceResponseBodyInstance {
	s.Admin = v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetConsoleUrl(v string) *GetInstanceResponseBodyInstance {
	s.ConsoleUrl = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetCreatedTime(v int64) *GetInstanceResponseBodyInstance {
	s.CreatedTime = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetDirectoryId(v string) *GetInstanceResponseBodyInstance {
	s.DirectoryId = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetDomainName(v string) *GetInstanceResponseBodyInstance {
	s.DomainName = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetInstanceDescription(v string) *GetInstanceResponseBodyInstance {
	s.InstanceDescription = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetInstanceId(v string) *GetInstanceResponseBodyInstance {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetInstanceName(v string) *GetInstanceResponseBodyInstance {
	s.InstanceName = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetMaxOnlineAgents(v int32) *GetInstanceResponseBodyInstance {
	s.MaxOnlineAgents = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetOwner(v string) *GetInstanceResponseBodyInstance {
	s.Owner = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetPhoneNumbers(v *GetInstanceResponseBodyInstancePhoneNumbers) *GetInstanceResponseBodyInstance {
	s.PhoneNumbers = v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetStatus(v string) *GetInstanceResponseBodyInstance {
	s.Status = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetStorageBucket(v string) *GetInstanceResponseBodyInstance {
	s.StorageBucket = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetStorageMaxDays(v int32) *GetInstanceResponseBodyInstance {
	s.StorageMaxDays = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetStorageMaxSize(v int32) *GetInstanceResponseBodyInstance {
	s.StorageMaxSize = &v
	return s
}

func (s *GetInstanceResponseBodyInstance) SetTenantId(v string) *GetInstanceResponseBodyInstance {
	s.TenantId = &v
	return s
}

type GetInstanceResponseBodyInstanceAdmin struct {
	User []*GetInstanceResponseBodyInstanceAdminUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s GetInstanceResponseBodyInstanceAdmin) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyInstanceAdmin) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyInstanceAdmin) SetUser(v []*GetInstanceResponseBodyInstanceAdminUser) *GetInstanceResponseBodyInstanceAdmin {
	s.User = v
	return s
}

type GetInstanceResponseBodyInstanceAdminUser struct {
	Detail     *GetInstanceResponseBodyInstanceAdminUserDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	InstanceId *string                                         `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RamId      *string                                         `json:"RamId,omitempty" xml:"RamId,omitempty"`
	UserId     *string                                         `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetInstanceResponseBodyInstanceAdminUser) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyInstanceAdminUser) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyInstanceAdminUser) SetDetail(v *GetInstanceResponseBodyInstanceAdminUserDetail) *GetInstanceResponseBodyInstanceAdminUser {
	s.Detail = v
	return s
}

func (s *GetInstanceResponseBodyInstanceAdminUser) SetInstanceId(v string) *GetInstanceResponseBodyInstanceAdminUser {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceResponseBodyInstanceAdminUser) SetRamId(v string) *GetInstanceResponseBodyInstanceAdminUser {
	s.RamId = &v
	return s
}

func (s *GetInstanceResponseBodyInstanceAdminUser) SetUserId(v string) *GetInstanceResponseBodyInstanceAdminUser {
	s.UserId = &v
	return s
}

type GetInstanceResponseBodyInstanceAdminUserDetail struct {
	Department  *string `json:"Department,omitempty" xml:"Department,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	LoginName   *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Phone       *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s GetInstanceResponseBodyInstanceAdminUserDetail) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyInstanceAdminUserDetail) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyInstanceAdminUserDetail) SetDepartment(v string) *GetInstanceResponseBodyInstanceAdminUserDetail {
	s.Department = &v
	return s
}

func (s *GetInstanceResponseBodyInstanceAdminUserDetail) SetDisplayName(v string) *GetInstanceResponseBodyInstanceAdminUserDetail {
	s.DisplayName = &v
	return s
}

func (s *GetInstanceResponseBodyInstanceAdminUserDetail) SetEmail(v string) *GetInstanceResponseBodyInstanceAdminUserDetail {
	s.Email = &v
	return s
}

func (s *GetInstanceResponseBodyInstanceAdminUserDetail) SetLoginName(v string) *GetInstanceResponseBodyInstanceAdminUserDetail {
	s.LoginName = &v
	return s
}

func (s *GetInstanceResponseBodyInstanceAdminUserDetail) SetPhone(v string) *GetInstanceResponseBodyInstanceAdminUserDetail {
	s.Phone = &v
	return s
}

type GetInstanceResponseBodyInstancePhoneNumbers struct {
	PhoneNumber []*GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s GetInstanceResponseBodyInstancePhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyInstancePhoneNumbers) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyInstancePhoneNumbers) SetPhoneNumber(v []*GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) *GetInstanceResponseBodyInstancePhoneNumbers {
	s.PhoneNumber = v
	return s
}

type GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber struct {
	AllowOutbound          *bool   `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	RemainingTime          *int32  `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	TestOnly               *bool   `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32  `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetAllowOutbound(v bool) *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetInstanceId(v string) *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetNumber(v string) *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetRemainingTime(v int32) *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetTestOnly(v bool) *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetTrunks(v int32) *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber) SetUsage(v string) *GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber {
	s.Usage = &v
	return s
}

type GetInstanceResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceResponse) SetHeaders(v map[string]*string) *GetInstanceResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceResponse) SetStatusCode(v int32) *GetInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceResponse) SetBody(v *GetInstanceResponseBody) *GetInstanceResponse {
	s.Body = v
	return s
}

type GetInstanceStateRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetInstanceStateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStateRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceStateRequest) SetInstanceId(v string) *GetInstanceStateRequest {
	s.InstanceId = &v
	return s
}

type GetInstanceStateResponseBody struct {
	Code                  *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode        *int32                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message               *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RealTimeInstanceState *GetInstanceStateResponseBodyRealTimeInstanceState `json:"RealTimeInstanceState,omitempty" xml:"RealTimeInstanceState,omitempty" type:"Struct"`
	RequestId             *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success               *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceStateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStateResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceStateResponseBody) SetCode(v string) *GetInstanceStateResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceStateResponseBody) SetHttpStatusCode(v int32) *GetInstanceStateResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInstanceStateResponseBody) SetMessage(v string) *GetInstanceStateResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceStateResponseBody) SetRealTimeInstanceState(v *GetInstanceStateResponseBodyRealTimeInstanceState) *GetInstanceStateResponseBody {
	s.RealTimeInstanceState = v
	return s
}

func (s *GetInstanceStateResponseBody) SetRequestId(v string) *GetInstanceStateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceStateResponseBody) SetSuccess(v bool) *GetInstanceStateResponseBody {
	s.Success = &v
	return s
}

type GetInstanceStateResponseBodyRealTimeInstanceState struct {
	AgentStateDistributions *GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions `json:"AgentStateDistributions,omitempty" xml:"AgentStateDistributions,omitempty" type:"Struct"`
}

func (s GetInstanceStateResponseBodyRealTimeInstanceState) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStateResponseBodyRealTimeInstanceState) GoString() string {
	return s.String()
}

func (s *GetInstanceStateResponseBodyRealTimeInstanceState) SetAgentStateDistributions(v *GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions) *GetInstanceStateResponseBodyRealTimeInstanceState {
	s.AgentStateDistributions = v
	return s
}

type GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions struct {
	AgentStateCount []*GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount `json:"AgentStateCount,omitempty" xml:"AgentStateCount,omitempty" type:"Repeated"`
}

func (s GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions) GoString() string {
	return s.String()
}

func (s *GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions) SetAgentStateCount(v []*GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount) *GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions {
	s.AgentStateCount = v
	return s
}

type GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount struct {
	Count *int64  `json:"Count,omitempty" xml:"Count,omitempty"`
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount) GoString() string {
	return s.String()
}

func (s *GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount) SetCount(v int64) *GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount {
	s.Count = &v
	return s
}

func (s *GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount) SetState(v string) *GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount {
	s.State = &v
	return s
}

type GetInstanceStateResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetInstanceStateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceStateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceStateResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceStateResponse) SetHeaders(v map[string]*string) *GetInstanceStateResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceStateResponse) SetStatusCode(v int32) *GetInstanceStateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceStateResponse) SetBody(v *GetInstanceStateResponseBody) *GetInstanceStateResponse {
	s.Body = v
	return s
}

type GetInstanceSummaryReportRequest struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetInstanceSummaryReportRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportRequest) SetEndTime(v string) *GetInstanceSummaryReportRequest {
	s.EndTime = &v
	return s
}

func (s *GetInstanceSummaryReportRequest) SetInstanceId(v string) *GetInstanceSummaryReportRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceSummaryReportRequest) SetPageNumber(v int32) *GetInstanceSummaryReportRequest {
	s.PageNumber = &v
	return s
}

func (s *GetInstanceSummaryReportRequest) SetPageSize(v int32) *GetInstanceSummaryReportRequest {
	s.PageSize = &v
	return s
}

func (s *GetInstanceSummaryReportRequest) SetStartTime(v string) *GetInstanceSummaryReportRequest {
	s.StartTime = &v
	return s
}

type GetInstanceSummaryReportResponseBody struct {
	Code                  *string                                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode        *int32                                                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	InstanceSummaryReport *GetInstanceSummaryReportResponseBodyInstanceSummaryReport `json:"InstanceSummaryReport,omitempty" xml:"InstanceSummaryReport,omitempty" type:"Struct"`
	Message               *string                                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId             *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success               *bool                                                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceSummaryReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportResponseBody) SetCode(v string) *GetInstanceSummaryReportResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBody) SetHttpStatusCode(v int32) *GetInstanceSummaryReportResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBody) SetInstanceSummaryReport(v *GetInstanceSummaryReportResponseBodyInstanceSummaryReport) *GetInstanceSummaryReportResponseBody {
	s.InstanceSummaryReport = v
	return s
}

func (s *GetInstanceSummaryReportResponseBody) SetMessage(v string) *GetInstanceSummaryReportResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBody) SetRequestId(v string) *GetInstanceSummaryReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBody) SetSuccess(v bool) *GetInstanceSummaryReportResponseBody {
	s.Success = &v
	return s
}

type GetInstanceSummaryReportResponseBodyInstanceSummaryReport struct {
	Inbound    *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId *string                                                            `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Outbound   *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall    *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
}

func (s GetInstanceSummaryReportResponseBodyInstanceSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportResponseBodyInstanceSummaryReport) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReport) SetInbound(v *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) *GetInstanceSummaryReportResponseBodyInstanceSummaryReport {
	s.Inbound = v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReport) SetInstanceId(v string) *GetInstanceSummaryReportResponseBodyInstanceSummaryReport {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReport) SetOutbound(v *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) *GetInstanceSummaryReportResponseBodyInstanceSummaryReport {
	s.Outbound = v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReport) SetOverall(v *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) *GetInstanceSummaryReportResponseBodyInstanceSummaryReport {
	s.Overall = v
	return s
}

type GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound struct {
	AverageRingTime              *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWaitTime              *int64   `json:"AverageWaitTime,omitempty" xml:"AverageWaitTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAbandonedInIVR          *int64   `json:"CallsAbandonedInIVR,omitempty" xml:"CallsAbandonedInIVR,omitempty"`
	CallsAbandonedInQueue        *int64   `json:"CallsAbandonedInQueue,omitempty" xml:"CallsAbandonedInQueue,omitempty"`
	CallsHandled                 *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsIncomingIVR             *int64   `json:"CallsIncomingIVR,omitempty" xml:"CallsIncomingIVR,omitempty"`
	CallsIncomingLine            *int64   `json:"CallsIncomingLine,omitempty" xml:"CallsIncomingLine,omitempty"`
	CallsIncomingQueue           *int64   `json:"CallsIncomingQueue,omitempty" xml:"CallsIncomingQueue,omitempty"`
	CallsOffered                 *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	HandleRate                   *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	MaxRingTime                  *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                  *string  `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWaitTime                  *int64   `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel20               *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	TotalRingTime                *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWaitTime                *int64   `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetAverageRingTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.AverageRingTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetAverageTalkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetAverageWaitTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.AverageWaitTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetAverageWorkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetCallsAbandonedInIVR(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.CallsAbandonedInIVR = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetCallsAbandonedInQueue(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.CallsAbandonedInQueue = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetCallsHandled(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.CallsHandled = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetCallsIncomingIVR(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.CallsIncomingIVR = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetCallsIncomingLine(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.CallsIncomingLine = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetCallsIncomingQueue(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.CallsIncomingQueue = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetCallsOffered(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.CallsOffered = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetHandleRate(v float32) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.HandleRate = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetMaxRingTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.MaxRingTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetMaxTalkTime(v string) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetMaxWaitTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.MaxWaitTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetMaxWorkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetSatisfactionIndex(v float32) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetSatisfactionSurveysOffered(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetSatisfactionSurveysResponded(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetServiceLevel20(v float32) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetTotalRingTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.TotalRingTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetTotalTalkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetTotalWaitTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.TotalWaitTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound) SetTotalWorkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound {
	s.TotalWorkTime = &v
	return s
}

type GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetAnswerRate(v float32) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.AnswerRate = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetAverageDialingTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetAverageTalkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetAverageWorkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetCallsAnswered(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetCallsDialed(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.CallsDialed = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetMaxDialingTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetMaxTalkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetMaxWorkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetSatisfactionIndex(v float32) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetSatisfactionSurveysOffered(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetSatisfactionSurveysResponded(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetTotalDialingTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetTotalTalkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound) SetTotalWorkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound {
	s.TotalWorkTime = &v
	return s
}

type GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall struct {
	AverageReadyTime             *int64   `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	MaxReadyTime                 *int64   `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OccupancyRate                *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalBreakTime               *int64   `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalLoggedInTime            *int64   `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime               *int64   `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetAverageReadyTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetAverageTalkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetAverageWorkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetMaxReadyTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetMaxTalkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetMaxWorkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetOccupancyRate(v float32) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.OccupancyRate = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetSatisfactionIndex(v float32) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetSatisfactionSurveysOffered(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetSatisfactionSurveysResponded(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetTotalBreakTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetTotalCalls(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.TotalCalls = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetTotalLoggedInTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetTotalReadyTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetTotalTalkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall) SetTotalWorkTime(v int64) *GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall {
	s.TotalWorkTime = &v
	return s
}

type GetInstanceSummaryReportResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetInstanceSummaryReportResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceSummaryReportResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportResponse) SetHeaders(v map[string]*string) *GetInstanceSummaryReportResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceSummaryReportResponse) SetStatusCode(v int32) *GetInstanceSummaryReportResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceSummaryReportResponse) SetBody(v *GetInstanceSummaryReportResponseBody) *GetInstanceSummaryReportResponse {
	s.Body = v
	return s
}

type GetInstanceSummaryReportByIntervalRequest struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Interval   *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetInstanceSummaryReportByIntervalRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportByIntervalRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportByIntervalRequest) SetEndTime(v string) *GetInstanceSummaryReportByIntervalRequest {
	s.EndTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalRequest) SetInstanceId(v string) *GetInstanceSummaryReportByIntervalRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalRequest) SetInterval(v string) *GetInstanceSummaryReportByIntervalRequest {
	s.Interval = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalRequest) SetPageNumber(v int32) *GetInstanceSummaryReportByIntervalRequest {
	s.PageNumber = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalRequest) SetPageSize(v int32) *GetInstanceSummaryReportByIntervalRequest {
	s.PageSize = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalRequest) SetStartTime(v string) *GetInstanceSummaryReportByIntervalRequest {
	s.StartTime = &v
	return s
}

type GetInstanceSummaryReportByIntervalResponseBody struct {
	Code                       *string                                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode             *int32                                                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	InstanceTimeIntervalReport *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport `json:"InstanceTimeIntervalReport,omitempty" xml:"InstanceTimeIntervalReport,omitempty" type:"Struct"`
	Message                    *string                                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId                  *string                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                    *bool                                                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceSummaryReportByIntervalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportByIntervalResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportByIntervalResponseBody) SetCode(v string) *GetInstanceSummaryReportByIntervalResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBody) SetHttpStatusCode(v int32) *GetInstanceSummaryReportByIntervalResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBody) SetInstanceTimeIntervalReport(v *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport) *GetInstanceSummaryReportByIntervalResponseBody {
	s.InstanceTimeIntervalReport = v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBody) SetMessage(v string) *GetInstanceSummaryReportByIntervalResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBody) SetRequestId(v string) *GetInstanceSummaryReportByIntervalResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBody) SetSuccess(v bool) *GetInstanceSummaryReportByIntervalResponseBody {
	s.Success = &v
	return s
}

type GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport struct {
	InstanceId   *string                                                                               `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IntervalList *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList `json:"IntervalList,omitempty" xml:"IntervalList,omitempty" type:"Struct"`
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport) SetInstanceId(v string) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport) SetIntervalList(v *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport {
	s.IntervalList = v
	return s
}

type GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList struct {
	InstanceSummaryReport []*GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport `json:"InstanceSummaryReport,omitempty" xml:"InstanceSummaryReport,omitempty" type:"Repeated"`
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList) SetInstanceSummaryReport(v []*GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList {
	s.InstanceSummaryReport = v
	return s
}

type GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport struct {
	Inbound    *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId *string                                                                                                            `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Outbound   *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall    *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	Timestamp  *string                                                                                                            `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport) SetInbound(v *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport {
	s.Inbound = v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport) SetInstanceId(v string) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport) SetOutbound(v *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport {
	s.Outbound = v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport) SetOverall(v *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport {
	s.Overall = v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport) SetTimestamp(v string) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport {
	s.Timestamp = &v
	return s
}

type GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound struct {
	AverageRingTime              *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWaitTime              *int64   `json:"AverageWaitTime,omitempty" xml:"AverageWaitTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAbandonedInIVR          *int64   `json:"CallsAbandonedInIVR,omitempty" xml:"CallsAbandonedInIVR,omitempty"`
	CallsAbandonedInQueue        *int64   `json:"CallsAbandonedInQueue,omitempty" xml:"CallsAbandonedInQueue,omitempty"`
	CallsHandled                 *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsIncomingIVR             *int64   `json:"CallsIncomingIVR,omitempty" xml:"CallsIncomingIVR,omitempty"`
	CallsIncomingLine            *int64   `json:"CallsIncomingLine,omitempty" xml:"CallsIncomingLine,omitempty"`
	CallsIncomingQueue           *int64   `json:"CallsIncomingQueue,omitempty" xml:"CallsIncomingQueue,omitempty"`
	CallsOffered                 *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	HandleRate                   *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	MaxRingTime                  *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                  *string  `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWaitTime                  *int64   `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel20               *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	TotalRingTime                *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWaitTime                *int64   `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetAverageRingTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.AverageRingTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetAverageTalkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetAverageWaitTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.AverageWaitTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetAverageWorkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetCallsAbandonedInIVR(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.CallsAbandonedInIVR = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetCallsAbandonedInQueue(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.CallsAbandonedInQueue = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetCallsHandled(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.CallsHandled = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetCallsIncomingIVR(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.CallsIncomingIVR = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetCallsIncomingLine(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.CallsIncomingLine = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetCallsIncomingQueue(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.CallsIncomingQueue = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetCallsOffered(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.CallsOffered = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetHandleRate(v float32) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.HandleRate = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetMaxRingTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.MaxRingTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetMaxTalkTime(v string) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetMaxWaitTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.MaxWaitTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetMaxWorkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetSatisfactionIndex(v float32) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetSatisfactionSurveysOffered(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetSatisfactionSurveysResponded(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetServiceLevel20(v float32) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetTotalRingTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.TotalRingTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetTotalTalkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetTotalWaitTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.TotalWaitTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound) SetTotalWorkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound {
	s.TotalWorkTime = &v
	return s
}

type GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetAnswerRate(v float32) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.AnswerRate = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetAverageDialingTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetAverageTalkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetAverageWorkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetCallsAnswered(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetCallsDialed(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.CallsDialed = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetMaxDialingTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetMaxTalkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetMaxWorkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetSatisfactionIndex(v float32) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetSatisfactionSurveysOffered(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetSatisfactionSurveysResponded(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetTotalDialingTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetTotalTalkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound) SetTotalWorkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound {
	s.TotalWorkTime = &v
	return s
}

type GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall struct {
	AverageReadyTime             *int64   `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	MaxReadyTime                 *int64   `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OccupancyRate                *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalBreakTime               *int64   `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalLoggedInTime            *int64   `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime               *int64   `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetAverageReadyTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetAverageTalkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetAverageWorkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetMaxReadyTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetMaxTalkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetMaxWorkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetOccupancyRate(v float32) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.OccupancyRate = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetSatisfactionIndex(v float32) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetSatisfactionSurveysOffered(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetSatisfactionSurveysResponded(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetTotalBreakTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetTotalCalls(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.TotalCalls = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetTotalLoggedInTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetTotalReadyTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetTotalTalkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall) SetTotalWorkTime(v int64) *GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall {
	s.TotalWorkTime = &v
	return s
}

type GetInstanceSummaryReportByIntervalResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetInstanceSummaryReportByIntervalResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceSummaryReportByIntervalResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportByIntervalResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportByIntervalResponse) SetHeaders(v map[string]*string) *GetInstanceSummaryReportByIntervalResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponse) SetStatusCode(v int32) *GetInstanceSummaryReportByIntervalResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceSummaryReportByIntervalResponse) SetBody(v *GetInstanceSummaryReportByIntervalResponseBody) *GetInstanceSummaryReportByIntervalResponse {
	s.Body = v
	return s
}

type GetInstanceSummaryReportSinceMidnightRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetInstanceSummaryReportSinceMidnightRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportSinceMidnightRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportSinceMidnightRequest) SetInstanceId(v string) *GetInstanceSummaryReportSinceMidnightRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightRequest) SetPageNumber(v int32) *GetInstanceSummaryReportSinceMidnightRequest {
	s.PageNumber = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightRequest) SetPageSize(v int32) *GetInstanceSummaryReportSinceMidnightRequest {
	s.PageSize = &v
	return s
}

type GetInstanceSummaryReportSinceMidnightResponseBody struct {
	Code                  *string                                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode        *int32                                                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	InstanceSummaryReport *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport `json:"InstanceSummaryReport,omitempty" xml:"InstanceSummaryReport,omitempty" type:"Struct"`
	Message               *string                                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId             *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success               *bool                                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceSummaryReportSinceMidnightResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportSinceMidnightResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBody) SetCode(v string) *GetInstanceSummaryReportSinceMidnightResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBody) SetHttpStatusCode(v int32) *GetInstanceSummaryReportSinceMidnightResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBody) SetInstanceSummaryReport(v *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport) *GetInstanceSummaryReportSinceMidnightResponseBody {
	s.InstanceSummaryReport = v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBody) SetMessage(v string) *GetInstanceSummaryReportSinceMidnightResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBody) SetRequestId(v string) *GetInstanceSummaryReportSinceMidnightResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBody) SetSuccess(v bool) *GetInstanceSummaryReportSinceMidnightResponseBody {
	s.Success = &v
	return s
}

type GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport struct {
	Inbound    *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId *string                                                                         `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Outbound   *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall    *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	Timestamp  *string                                                                         `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport) SetInbound(v *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport {
	s.Inbound = v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport) SetInstanceId(v string) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport) SetOutbound(v *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport {
	s.Outbound = v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport) SetOverall(v *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport {
	s.Overall = v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport) SetTimestamp(v string) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport {
	s.Timestamp = &v
	return s
}

type GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound struct {
	AverageRingTime              *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWaitTime              *int64   `json:"AverageWaitTime,omitempty" xml:"AverageWaitTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAbandonedInIVR          *int64   `json:"CallsAbandonedInIVR,omitempty" xml:"CallsAbandonedInIVR,omitempty"`
	CallsAbandonedInQueue        *int64   `json:"CallsAbandonedInQueue,omitempty" xml:"CallsAbandonedInQueue,omitempty"`
	CallsHandled                 *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsIncomingIVR             *int64   `json:"CallsIncomingIVR,omitempty" xml:"CallsIncomingIVR,omitempty"`
	CallsIncomingLine            *int64   `json:"CallsIncomingLine,omitempty" xml:"CallsIncomingLine,omitempty"`
	CallsIncomingQueue           *int64   `json:"CallsIncomingQueue,omitempty" xml:"CallsIncomingQueue,omitempty"`
	CallsOffered                 *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	HandleRate                   *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	MaxRingTime                  *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                  *string  `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWaitTime                  *int64   `json:"MaxWaitTime,omitempty" xml:"MaxWaitTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel20               *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	TotalRingTime                *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWaitTime                *int64   `json:"TotalWaitTime,omitempty" xml:"TotalWaitTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetAverageRingTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.AverageRingTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetAverageTalkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetAverageWaitTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.AverageWaitTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetAverageWorkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetCallsAbandonedInIVR(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.CallsAbandonedInIVR = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetCallsAbandonedInQueue(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.CallsAbandonedInQueue = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetCallsHandled(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.CallsHandled = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetCallsIncomingIVR(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.CallsIncomingIVR = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetCallsIncomingLine(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.CallsIncomingLine = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetCallsIncomingQueue(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.CallsIncomingQueue = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetCallsOffered(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.CallsOffered = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetHandleRate(v float32) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.HandleRate = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetMaxRingTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.MaxRingTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetMaxTalkTime(v string) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetMaxWaitTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.MaxWaitTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetMaxWorkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetSatisfactionIndex(v float32) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetSatisfactionSurveysOffered(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetSatisfactionSurveysResponded(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetServiceLevel20(v float32) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetTotalRingTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.TotalRingTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetTotalTalkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetTotalWaitTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.TotalWaitTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound) SetTotalWorkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound {
	s.TotalWorkTime = &v
	return s
}

type GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetAnswerRate(v float32) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.AnswerRate = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetAverageDialingTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetAverageTalkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetAverageWorkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetCallsAnswered(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetCallsDialed(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.CallsDialed = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetMaxDialingTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetMaxTalkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetMaxWorkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetSatisfactionIndex(v float32) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetSatisfactionSurveysOffered(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetSatisfactionSurveysResponded(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetTotalDialingTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetTotalTalkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound) SetTotalWorkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound {
	s.TotalWorkTime = &v
	return s
}

type GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall struct {
	AverageReadyTime             *int64   `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	MaxReadyTime                 *int64   `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OccupancyRate                *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalBreakTime               *int64   `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalLoggedInTime            *int64   `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime               *int64   `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetAverageReadyTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetAverageTalkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetAverageWorkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetMaxReadyTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetMaxTalkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetMaxWorkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetOccupancyRate(v float32) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.OccupancyRate = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetSatisfactionIndex(v float32) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetSatisfactionSurveysOffered(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetSatisfactionSurveysResponded(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetTotalBreakTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetTotalCalls(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.TotalCalls = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetTotalLoggedInTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetTotalReadyTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetTotalTalkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall) SetTotalWorkTime(v int64) *GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall {
	s.TotalWorkTime = &v
	return s
}

type GetInstanceSummaryReportSinceMidnightResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetInstanceSummaryReportSinceMidnightResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceSummaryReportSinceMidnightResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSummaryReportSinceMidnightResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceSummaryReportSinceMidnightResponse) SetHeaders(v map[string]*string) *GetInstanceSummaryReportSinceMidnightResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponse) SetStatusCode(v int32) *GetInstanceSummaryReportSinceMidnightResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceSummaryReportSinceMidnightResponse) SetBody(v *GetInstanceSummaryReportSinceMidnightResponseBody) *GetInstanceSummaryReportSinceMidnightResponse {
	s.Body = v
	return s
}

type GetNumberRegionInfoRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number     *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s GetNumberRegionInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNumberRegionInfoRequest) GoString() string {
	return s.String()
}

func (s *GetNumberRegionInfoRequest) SetInstanceId(v string) *GetNumberRegionInfoRequest {
	s.InstanceId = &v
	return s
}

func (s *GetNumberRegionInfoRequest) SetNumber(v string) *GetNumberRegionInfoRequest {
	s.Number = &v
	return s
}

type GetNumberRegionInfoResponseBody struct {
	Code        *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Message     *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	PhoneNumber *GetNumberRegionInfoResponseBodyPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Struct"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success     *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetNumberRegionInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNumberRegionInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetNumberRegionInfoResponseBody) SetCode(v string) *GetNumberRegionInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetNumberRegionInfoResponseBody) SetMessage(v string) *GetNumberRegionInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetNumberRegionInfoResponseBody) SetPhoneNumber(v *GetNumberRegionInfoResponseBodyPhoneNumber) *GetNumberRegionInfoResponseBody {
	s.PhoneNumber = v
	return s
}

func (s *GetNumberRegionInfoResponseBody) SetRequestId(v string) *GetNumberRegionInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNumberRegionInfoResponseBody) SetSuccess(v bool) *GetNumberRegionInfoResponseBody {
	s.Success = &v
	return s
}

type GetNumberRegionInfoResponseBodyPhoneNumber struct {
	City     *string `json:"City,omitempty" xml:"City,omitempty"`
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s GetNumberRegionInfoResponseBodyPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s GetNumberRegionInfoResponseBodyPhoneNumber) GoString() string {
	return s.String()
}

func (s *GetNumberRegionInfoResponseBodyPhoneNumber) SetCity(v string) *GetNumberRegionInfoResponseBodyPhoneNumber {
	s.City = &v
	return s
}

func (s *GetNumberRegionInfoResponseBodyPhoneNumber) SetNumber(v string) *GetNumberRegionInfoResponseBodyPhoneNumber {
	s.Number = &v
	return s
}

func (s *GetNumberRegionInfoResponseBodyPhoneNumber) SetProvince(v string) *GetNumberRegionInfoResponseBodyPhoneNumber {
	s.Province = &v
	return s
}

type GetNumberRegionInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetNumberRegionInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetNumberRegionInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNumberRegionInfoResponse) GoString() string {
	return s.String()
}

func (s *GetNumberRegionInfoResponse) SetHeaders(v map[string]*string) *GetNumberRegionInfoResponse {
	s.Headers = v
	return s
}

func (s *GetNumberRegionInfoResponse) SetStatusCode(v int32) *GetNumberRegionInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNumberRegionInfoResponse) SetBody(v *GetNumberRegionInfoResponseBody) *GetNumberRegionInfoResponse {
	s.Body = v
	return s
}

type GetRecordOssUploadParamRequest struct {
	FileName   *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetRecordOssUploadParamRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRecordOssUploadParamRequest) GoString() string {
	return s.String()
}

func (s *GetRecordOssUploadParamRequest) SetFileName(v string) *GetRecordOssUploadParamRequest {
	s.FileName = &v
	return s
}

func (s *GetRecordOssUploadParamRequest) SetInstanceId(v string) *GetRecordOssUploadParamRequest {
	s.InstanceId = &v
	return s
}

type GetRecordOssUploadParamResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Dir            *string `json:"Dir,omitempty" xml:"Dir,omitempty"`
	Expires        *string `json:"Expires,omitempty" xml:"Expires,omitempty"`
	Host           *string `json:"Host,omitempty" xml:"Host,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	OssAccessKeyId *string `json:"OssAccessKeyId,omitempty" xml:"OssAccessKeyId,omitempty"`
	OssFileName    *string `json:"OssFileName,omitempty" xml:"OssFileName,omitempty"`
	Policy         *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Signature      *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRecordOssUploadParamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRecordOssUploadParamResponseBody) GoString() string {
	return s.String()
}

func (s *GetRecordOssUploadParamResponseBody) SetCode(v string) *GetRecordOssUploadParamResponseBody {
	s.Code = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetDir(v string) *GetRecordOssUploadParamResponseBody {
	s.Dir = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetExpires(v string) *GetRecordOssUploadParamResponseBody {
	s.Expires = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetHost(v string) *GetRecordOssUploadParamResponseBody {
	s.Host = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetHttpStatusCode(v int32) *GetRecordOssUploadParamResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetMessage(v string) *GetRecordOssUploadParamResponseBody {
	s.Message = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetOssAccessKeyId(v string) *GetRecordOssUploadParamResponseBody {
	s.OssAccessKeyId = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetOssFileName(v string) *GetRecordOssUploadParamResponseBody {
	s.OssFileName = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetPolicy(v string) *GetRecordOssUploadParamResponseBody {
	s.Policy = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetRequestId(v string) *GetRecordOssUploadParamResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetSignature(v string) *GetRecordOssUploadParamResponseBody {
	s.Signature = &v
	return s
}

func (s *GetRecordOssUploadParamResponseBody) SetSuccess(v bool) *GetRecordOssUploadParamResponseBody {
	s.Success = &v
	return s
}

type GetRecordOssUploadParamResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetRecordOssUploadParamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetRecordOssUploadParamResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRecordOssUploadParamResponse) GoString() string {
	return s.String()
}

func (s *GetRecordOssUploadParamResponse) SetHeaders(v map[string]*string) *GetRecordOssUploadParamResponse {
	s.Headers = v
	return s
}

func (s *GetRecordOssUploadParamResponse) SetStatusCode(v int32) *GetRecordOssUploadParamResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRecordOssUploadParamResponse) SetBody(v *GetRecordOssUploadParamResponseBody) *GetRecordOssUploadParamResponse {
	s.Body = v
	return s
}

type GetRoutePointRequest struct {
	ContactFlowId *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetRoutePointRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRoutePointRequest) GoString() string {
	return s.String()
}

func (s *GetRoutePointRequest) SetContactFlowId(v string) *GetRoutePointRequest {
	s.ContactFlowId = &v
	return s
}

func (s *GetRoutePointRequest) SetInstanceId(v string) *GetRoutePointRequest {
	s.InstanceId = &v
	return s
}

type GetRoutePointResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RoutePoint     *string `json:"RoutePoint,omitempty" xml:"RoutePoint,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRoutePointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRoutePointResponseBody) GoString() string {
	return s.String()
}

func (s *GetRoutePointResponseBody) SetCode(v string) *GetRoutePointResponseBody {
	s.Code = &v
	return s
}

func (s *GetRoutePointResponseBody) SetHttpStatusCode(v int32) *GetRoutePointResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetRoutePointResponseBody) SetMessage(v string) *GetRoutePointResponseBody {
	s.Message = &v
	return s
}

func (s *GetRoutePointResponseBody) SetRequestId(v string) *GetRoutePointResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRoutePointResponseBody) SetRoutePoint(v string) *GetRoutePointResponseBody {
	s.RoutePoint = &v
	return s
}

func (s *GetRoutePointResponseBody) SetSuccess(v bool) *GetRoutePointResponseBody {
	s.Success = &v
	return s
}

type GetRoutePointResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetRoutePointResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetRoutePointResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRoutePointResponse) GoString() string {
	return s.String()
}

func (s *GetRoutePointResponse) SetHeaders(v map[string]*string) *GetRoutePointResponse {
	s.Headers = v
	return s
}

func (s *GetRoutePointResponse) SetStatusCode(v int32) *GetRoutePointResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRoutePointResponse) SetBody(v *GetRoutePointResponseBody) *GetRoutePointResponse {
	s.Body = v
	return s
}

type GetServiceExtensionsRequest struct {
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
}

func (s GetServiceExtensionsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceExtensionsRequest) GoString() string {
	return s.String()
}

func (s *GetServiceExtensionsRequest) SetInstanceId(v string) *GetServiceExtensionsRequest {
	s.InstanceId = &v
	return s
}

func (s *GetServiceExtensionsRequest) SetServiceType(v string) *GetServiceExtensionsRequest {
	s.ServiceType = &v
	return s
}

type GetServiceExtensionsResponseBody struct {
	Code              *string                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode    *int32                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message           *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ServiceExtensions *GetServiceExtensionsResponseBodyServiceExtensions `json:"ServiceExtensions,omitempty" xml:"ServiceExtensions,omitempty" type:"Struct"`
	Success           *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetServiceExtensionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceExtensionsResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceExtensionsResponseBody) SetCode(v string) *GetServiceExtensionsResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceExtensionsResponseBody) SetHttpStatusCode(v int32) *GetServiceExtensionsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetServiceExtensionsResponseBody) SetMessage(v string) *GetServiceExtensionsResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceExtensionsResponseBody) SetRequestId(v string) *GetServiceExtensionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetServiceExtensionsResponseBody) SetServiceExtensions(v *GetServiceExtensionsResponseBodyServiceExtensions) *GetServiceExtensionsResponseBody {
	s.ServiceExtensions = v
	return s
}

func (s *GetServiceExtensionsResponseBody) SetSuccess(v bool) *GetServiceExtensionsResponseBody {
	s.Success = &v
	return s
}

type GetServiceExtensionsResponseBodyServiceExtensions struct {
	ServiceExtension []*GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension `json:"ServiceExtension,omitempty" xml:"ServiceExtension,omitempty" type:"Repeated"`
}

func (s GetServiceExtensionsResponseBodyServiceExtensions) String() string {
	return tea.Prettify(s)
}

func (s GetServiceExtensionsResponseBodyServiceExtensions) GoString() string {
	return s.String()
}

func (s *GetServiceExtensionsResponseBodyServiceExtensions) SetServiceExtension(v []*GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension) *GetServiceExtensionsResponseBodyServiceExtensions {
	s.ServiceExtension = v
	return s
}

type GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension struct {
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Number *string `json:"Number,omitempty" xml:"Number,omitempty"`
}

func (s GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension) String() string {
	return tea.Prettify(s)
}

func (s GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension) GoString() string {
	return s.String()
}

func (s *GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension) SetName(v string) *GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension {
	s.Name = &v
	return s
}

func (s *GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension) SetNumber(v string) *GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension {
	s.Number = &v
	return s
}

type GetServiceExtensionsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetServiceExtensionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceExtensionsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceExtensionsResponse) GoString() string {
	return s.String()
}

func (s *GetServiceExtensionsResponse) SetHeaders(v map[string]*string) *GetServiceExtensionsResponse {
	s.Headers = v
	return s
}

func (s *GetServiceExtensionsResponse) SetStatusCode(v int32) *GetServiceExtensionsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetServiceExtensionsResponse) SetBody(v *GetServiceExtensionsResponseBody) *GetServiceExtensionsResponse {
	s.Body = v
	return s
}

type GetSmsConfigRequest struct {
	InstanceId *string  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Scenario   []*int32 `json:"Scenario,omitempty" xml:"Scenario,omitempty" type:"Repeated"`
}

func (s GetSmsConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSmsConfigRequest) GoString() string {
	return s.String()
}

func (s *GetSmsConfigRequest) SetInstanceId(v string) *GetSmsConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSmsConfigRequest) SetScenario(v []*int32) *GetSmsConfigRequest {
	s.Scenario = v
	return s
}

type GetSmsConfigResponseBody struct {
	Code           *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmsConfigs     *GetSmsConfigResponseBodySmsConfigs `json:"SmsConfigs,omitempty" xml:"SmsConfigs,omitempty" type:"Struct"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSmsConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSmsConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetSmsConfigResponseBody) SetCode(v string) *GetSmsConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetSmsConfigResponseBody) SetHttpStatusCode(v int32) *GetSmsConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetSmsConfigResponseBody) SetMessage(v string) *GetSmsConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetSmsConfigResponseBody) SetRequestId(v string) *GetSmsConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSmsConfigResponseBody) SetSmsConfigs(v *GetSmsConfigResponseBodySmsConfigs) *GetSmsConfigResponseBody {
	s.SmsConfigs = v
	return s
}

func (s *GetSmsConfigResponseBody) SetSuccess(v bool) *GetSmsConfigResponseBody {
	s.Success = &v
	return s
}

type GetSmsConfigResponseBodySmsConfigs struct {
	SmsConfig []*GetSmsConfigResponseBodySmsConfigsSmsConfig `json:"SmsConfig,omitempty" xml:"SmsConfig,omitempty" type:"Repeated"`
}

func (s GetSmsConfigResponseBodySmsConfigs) String() string {
	return tea.Prettify(s)
}

func (s GetSmsConfigResponseBodySmsConfigs) GoString() string {
	return s.String()
}

func (s *GetSmsConfigResponseBodySmsConfigs) SetSmsConfig(v []*GetSmsConfigResponseBodySmsConfigsSmsConfig) *GetSmsConfigResponseBodySmsConfigs {
	s.SmsConfig = v
	return s
}

type GetSmsConfigResponseBodySmsConfigsSmsConfig struct {
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Extra        *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Instance     *string `json:"Instance,omitempty" xml:"Instance,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Scenario     *int32  `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	SignName     *string `json:"SignName,omitempty" xml:"SignName,omitempty"`
	TemplateCode *string `json:"TemplateCode,omitempty" xml:"TemplateCode,omitempty"`
}

func (s GetSmsConfigResponseBodySmsConfigsSmsConfig) String() string {
	return tea.Prettify(s)
}

func (s GetSmsConfigResponseBodySmsConfigsSmsConfig) GoString() string {
	return s.String()
}

func (s *GetSmsConfigResponseBodySmsConfigsSmsConfig) SetDescription(v string) *GetSmsConfigResponseBodySmsConfigsSmsConfig {
	s.Description = &v
	return s
}

func (s *GetSmsConfigResponseBodySmsConfigsSmsConfig) SetExtra(v string) *GetSmsConfigResponseBodySmsConfigsSmsConfig {
	s.Extra = &v
	return s
}

func (s *GetSmsConfigResponseBodySmsConfigsSmsConfig) SetGmtCreate(v string) *GetSmsConfigResponseBodySmsConfigsSmsConfig {
	s.GmtCreate = &v
	return s
}

func (s *GetSmsConfigResponseBodySmsConfigsSmsConfig) SetGmtModified(v string) *GetSmsConfigResponseBodySmsConfigsSmsConfig {
	s.GmtModified = &v
	return s
}

func (s *GetSmsConfigResponseBodySmsConfigsSmsConfig) SetId(v int64) *GetSmsConfigResponseBodySmsConfigsSmsConfig {
	s.Id = &v
	return s
}

func (s *GetSmsConfigResponseBodySmsConfigsSmsConfig) SetInstance(v string) *GetSmsConfigResponseBodySmsConfigsSmsConfig {
	s.Instance = &v
	return s
}

func (s *GetSmsConfigResponseBodySmsConfigsSmsConfig) SetName(v string) *GetSmsConfigResponseBodySmsConfigsSmsConfig {
	s.Name = &v
	return s
}

func (s *GetSmsConfigResponseBodySmsConfigsSmsConfig) SetScenario(v int32) *GetSmsConfigResponseBodySmsConfigsSmsConfig {
	s.Scenario = &v
	return s
}

func (s *GetSmsConfigResponseBodySmsConfigsSmsConfig) SetSignName(v string) *GetSmsConfigResponseBodySmsConfigsSmsConfig {
	s.SignName = &v
	return s
}

func (s *GetSmsConfigResponseBodySmsConfigsSmsConfig) SetTemplateCode(v string) *GetSmsConfigResponseBodySmsConfigsSmsConfig {
	s.TemplateCode = &v
	return s
}

type GetSmsConfigResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSmsConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSmsConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSmsConfigResponse) GoString() string {
	return s.String()
}

func (s *GetSmsConfigResponse) SetHeaders(v map[string]*string) *GetSmsConfigResponse {
	s.Headers = v
	return s
}

func (s *GetSmsConfigResponse) SetStatusCode(v int32) *GetSmsConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSmsConfigResponse) SetBody(v *GetSmsConfigResponseBody) *GetSmsConfigResponse {
	s.Body = v
	return s
}

type GetTURNCredentialsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	UserName   *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s GetTURNCredentialsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTURNCredentialsRequest) GoString() string {
	return s.String()
}

func (s *GetTURNCredentialsRequest) SetInstanceId(v string) *GetTURNCredentialsRequest {
	s.InstanceId = &v
	return s
}

func (s *GetTURNCredentialsRequest) SetUserName(v string) *GetTURNCredentialsRequest {
	s.UserName = &v
	return s
}

type GetTURNCredentialsResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Password       *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Username       *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s GetTURNCredentialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTURNCredentialsResponseBody) GoString() string {
	return s.String()
}

func (s *GetTURNCredentialsResponseBody) SetCode(v string) *GetTURNCredentialsResponseBody {
	s.Code = &v
	return s
}

func (s *GetTURNCredentialsResponseBody) SetHttpStatusCode(v int32) *GetTURNCredentialsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTURNCredentialsResponseBody) SetMessage(v string) *GetTURNCredentialsResponseBody {
	s.Message = &v
	return s
}

func (s *GetTURNCredentialsResponseBody) SetPassword(v string) *GetTURNCredentialsResponseBody {
	s.Password = &v
	return s
}

func (s *GetTURNCredentialsResponseBody) SetRequestId(v string) *GetTURNCredentialsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTURNCredentialsResponseBody) SetSuccess(v bool) *GetTURNCredentialsResponseBody {
	s.Success = &v
	return s
}

func (s *GetTURNCredentialsResponseBody) SetUsername(v string) *GetTURNCredentialsResponseBody {
	s.Username = &v
	return s
}

type GetTURNCredentialsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetTURNCredentialsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetTURNCredentialsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTURNCredentialsResponse) GoString() string {
	return s.String()
}

func (s *GetTURNCredentialsResponse) SetHeaders(v map[string]*string) *GetTURNCredentialsResponse {
	s.Headers = v
	return s
}

func (s *GetTURNCredentialsResponse) SetStatusCode(v int32) *GetTURNCredentialsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTURNCredentialsResponse) SetBody(v *GetTURNCredentialsResponseBody) *GetTURNCredentialsResponse {
	s.Body = v
	return s
}

type GetTURNServerListRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetTURNServerListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTURNServerListRequest) GoString() string {
	return s.String()
}

func (s *GetTURNServerListRequest) SetInstanceId(v string) *GetTURNServerListRequest {
	s.InstanceId = &v
	return s
}

type GetTURNServerListResponseBody struct {
	Code                 *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode       *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message              *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success              *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	TurnServerListConfig *string `json:"TurnServerListConfig,omitempty" xml:"TurnServerListConfig,omitempty"`
}

func (s GetTURNServerListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTURNServerListResponseBody) GoString() string {
	return s.String()
}

func (s *GetTURNServerListResponseBody) SetCode(v string) *GetTURNServerListResponseBody {
	s.Code = &v
	return s
}

func (s *GetTURNServerListResponseBody) SetHttpStatusCode(v int32) *GetTURNServerListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetTURNServerListResponseBody) SetMessage(v string) *GetTURNServerListResponseBody {
	s.Message = &v
	return s
}

func (s *GetTURNServerListResponseBody) SetRequestId(v string) *GetTURNServerListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTURNServerListResponseBody) SetSuccess(v bool) *GetTURNServerListResponseBody {
	s.Success = &v
	return s
}

func (s *GetTURNServerListResponseBody) SetTurnServerListConfig(v string) *GetTURNServerListResponseBody {
	s.TurnServerListConfig = &v
	return s
}

type GetTURNServerListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetTURNServerListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetTURNServerListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTURNServerListResponse) GoString() string {
	return s.String()
}

func (s *GetTURNServerListResponse) SetHeaders(v map[string]*string) *GetTURNServerListResponse {
	s.Headers = v
	return s
}

func (s *GetTURNServerListResponse) SetStatusCode(v int32) *GetTURNServerListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTURNServerListResponse) SetBody(v *GetTURNServerListResponseBody) *GetTURNServerListResponse {
	s.Body = v
	return s
}

type GetUserRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetUserRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserRequest) GoString() string {
	return s.String()
}

func (s *GetUserRequest) SetInstanceId(v string) *GetUserRequest {
	s.InstanceId = &v
	return s
}

func (s *GetUserRequest) SetUserId(v string) *GetUserRequest {
	s.UserId = &v
	return s
}

type GetUserResponseBody struct {
	Code           *string                  `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                    `json:"Success,omitempty" xml:"Success,omitempty"`
	User           *GetUserResponseBodyUser `json:"User,omitempty" xml:"User,omitempty" type:"Struct"`
}

func (s GetUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserResponseBody) SetCode(v string) *GetUserResponseBody {
	s.Code = &v
	return s
}

func (s *GetUserResponseBody) SetHttpStatusCode(v int32) *GetUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetUserResponseBody) SetMessage(v string) *GetUserResponseBody {
	s.Message = &v
	return s
}

func (s *GetUserResponseBody) SetRequestId(v string) *GetUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserResponseBody) SetSuccess(v bool) *GetUserResponseBody {
	s.Success = &v
	return s
}

func (s *GetUserResponseBody) SetUser(v *GetUserResponseBodyUser) *GetUserResponseBody {
	s.User = v
	return s
}

type GetUserResponseBodyUser struct {
	Detail      *GetUserResponseBodyUserDetail      `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	InstanceId  *string                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RamId       *string                             `json:"RamId,omitempty" xml:"RamId,omitempty"`
	Roles       *GetUserResponseBodyUserRoles       `json:"Roles,omitempty" xml:"Roles,omitempty" type:"Struct"`
	SkillLevels *GetUserResponseBodyUserSkillLevels `json:"SkillLevels,omitempty" xml:"SkillLevels,omitempty" type:"Struct"`
	UserId      *string                             `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetUserResponseBodyUser) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyUser) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyUser) SetDetail(v *GetUserResponseBodyUserDetail) *GetUserResponseBodyUser {
	s.Detail = v
	return s
}

func (s *GetUserResponseBodyUser) SetInstanceId(v string) *GetUserResponseBodyUser {
	s.InstanceId = &v
	return s
}

func (s *GetUserResponseBodyUser) SetRamId(v string) *GetUserResponseBodyUser {
	s.RamId = &v
	return s
}

func (s *GetUserResponseBodyUser) SetRoles(v *GetUserResponseBodyUserRoles) *GetUserResponseBodyUser {
	s.Roles = v
	return s
}

func (s *GetUserResponseBodyUser) SetSkillLevels(v *GetUserResponseBodyUserSkillLevels) *GetUserResponseBodyUser {
	s.SkillLevels = v
	return s
}

func (s *GetUserResponseBodyUser) SetUserId(v string) *GetUserResponseBodyUser {
	s.UserId = &v
	return s
}

type GetUserResponseBodyUserDetail struct {
	Department  *string `json:"Department,omitempty" xml:"Department,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	LoginName   *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Phone       *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s GetUserResponseBodyUserDetail) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyUserDetail) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyUserDetail) SetDepartment(v string) *GetUserResponseBodyUserDetail {
	s.Department = &v
	return s
}

func (s *GetUserResponseBodyUserDetail) SetDisplayName(v string) *GetUserResponseBodyUserDetail {
	s.DisplayName = &v
	return s
}

func (s *GetUserResponseBodyUserDetail) SetEmail(v string) *GetUserResponseBodyUserDetail {
	s.Email = &v
	return s
}

func (s *GetUserResponseBodyUserDetail) SetLoginName(v string) *GetUserResponseBodyUserDetail {
	s.LoginName = &v
	return s
}

func (s *GetUserResponseBodyUserDetail) SetPhone(v string) *GetUserResponseBodyUserDetail {
	s.Phone = &v
	return s
}

type GetUserResponseBodyUserRoles struct {
	Role []*GetUserResponseBodyUserRolesRole `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s GetUserResponseBodyUserRoles) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyUserRoles) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyUserRoles) SetRole(v []*GetUserResponseBodyUserRolesRole) *GetUserResponseBodyUserRoles {
	s.Role = v
	return s
}

type GetUserResponseBodyUserRolesRole struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RoleDescription *string `json:"RoleDescription,omitempty" xml:"RoleDescription,omitempty"`
	RoleId          *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s GetUserResponseBodyUserRolesRole) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyUserRolesRole) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyUserRolesRole) SetInstanceId(v string) *GetUserResponseBodyUserRolesRole {
	s.InstanceId = &v
	return s
}

func (s *GetUserResponseBodyUserRolesRole) SetRoleDescription(v string) *GetUserResponseBodyUserRolesRole {
	s.RoleDescription = &v
	return s
}

func (s *GetUserResponseBodyUserRolesRole) SetRoleId(v string) *GetUserResponseBodyUserRolesRole {
	s.RoleId = &v
	return s
}

func (s *GetUserResponseBodyUserRolesRole) SetRoleName(v string) *GetUserResponseBodyUserRolesRole {
	s.RoleName = &v
	return s
}

type GetUserResponseBodyUserSkillLevels struct {
	SkillLevel []*GetUserResponseBodyUserSkillLevelsSkillLevel `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
}

func (s GetUserResponseBodyUserSkillLevels) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyUserSkillLevels) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyUserSkillLevels) SetSkillLevel(v []*GetUserResponseBodyUserSkillLevelsSkillLevel) *GetUserResponseBodyUserSkillLevels {
	s.SkillLevel = v
	return s
}

type GetUserResponseBodyUserSkillLevelsSkillLevel struct {
	Level        *int32                                             `json:"Level,omitempty" xml:"Level,omitempty"`
	Skill        *GetUserResponseBodyUserSkillLevelsSkillLevelSkill `json:"Skill,omitempty" xml:"Skill,omitempty" type:"Struct"`
	SkillLevelId *string                                            `json:"SkillLevelId,omitempty" xml:"SkillLevelId,omitempty"`
}

func (s GetUserResponseBodyUserSkillLevelsSkillLevel) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyUserSkillLevelsSkillLevel) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyUserSkillLevelsSkillLevel) SetLevel(v int32) *GetUserResponseBodyUserSkillLevelsSkillLevel {
	s.Level = &v
	return s
}

func (s *GetUserResponseBodyUserSkillLevelsSkillLevel) SetSkill(v *GetUserResponseBodyUserSkillLevelsSkillLevelSkill) *GetUserResponseBodyUserSkillLevelsSkillLevel {
	s.Skill = v
	return s
}

func (s *GetUserResponseBodyUserSkillLevelsSkillLevel) SetSkillLevelId(v string) *GetUserResponseBodyUserSkillLevelsSkillLevel {
	s.SkillLevelId = &v
	return s
}

type GetUserResponseBodyUserSkillLevelsSkillLevelSkill struct {
	InstanceId            *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SkillGroupDescription *string `json:"SkillGroupDescription,omitempty" xml:"SkillGroupDescription,omitempty"`
	SkillGroupId          *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName        *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s GetUserResponseBodyUserSkillLevelsSkillLevelSkill) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyUserSkillLevelsSkillLevelSkill) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyUserSkillLevelsSkillLevelSkill) SetInstanceId(v string) *GetUserResponseBodyUserSkillLevelsSkillLevelSkill {
	s.InstanceId = &v
	return s
}

func (s *GetUserResponseBodyUserSkillLevelsSkillLevelSkill) SetSkillGroupDescription(v string) *GetUserResponseBodyUserSkillLevelsSkillLevelSkill {
	s.SkillGroupDescription = &v
	return s
}

func (s *GetUserResponseBodyUserSkillLevelsSkillLevelSkill) SetSkillGroupId(v string) *GetUserResponseBodyUserSkillLevelsSkillLevelSkill {
	s.SkillGroupId = &v
	return s
}

func (s *GetUserResponseBodyUserSkillLevelsSkillLevelSkill) SetSkillGroupName(v string) *GetUserResponseBodyUserSkillLevelsSkillLevelSkill {
	s.SkillGroupName = &v
	return s
}

type GetUserResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetUserResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponse) GoString() string {
	return s.String()
}

func (s *GetUserResponse) SetHeaders(v map[string]*string) *GetUserResponse {
	s.Headers = v
	return s
}

func (s *GetUserResponse) SetStatusCode(v int32) *GetUserResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserResponse) SetBody(v *GetUserResponseBody) *GetUserResponse {
	s.Body = v
	return s
}

type GetUserByExtensionRequest struct {
	Extension  *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetUserByExtensionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserByExtensionRequest) GoString() string {
	return s.String()
}

func (s *GetUserByExtensionRequest) SetExtension(v string) *GetUserByExtensionRequest {
	s.Extension = &v
	return s
}

func (s *GetUserByExtensionRequest) SetInstanceId(v string) *GetUserByExtensionRequest {
	s.InstanceId = &v
	return s
}

type GetUserByExtensionResponseBody struct {
	Code           *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
	User           *GetUserByExtensionResponseBodyUser `json:"User,omitempty" xml:"User,omitempty" type:"Struct"`
}

func (s GetUserByExtensionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserByExtensionResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserByExtensionResponseBody) SetCode(v string) *GetUserByExtensionResponseBody {
	s.Code = &v
	return s
}

func (s *GetUserByExtensionResponseBody) SetHttpStatusCode(v int32) *GetUserByExtensionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetUserByExtensionResponseBody) SetMessage(v string) *GetUserByExtensionResponseBody {
	s.Message = &v
	return s
}

func (s *GetUserByExtensionResponseBody) SetRequestId(v string) *GetUserByExtensionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserByExtensionResponseBody) SetSuccess(v bool) *GetUserByExtensionResponseBody {
	s.Success = &v
	return s
}

func (s *GetUserByExtensionResponseBody) SetUser(v *GetUserByExtensionResponseBodyUser) *GetUserByExtensionResponseBody {
	s.User = v
	return s
}

type GetUserByExtensionResponseBodyUser struct {
	Detail      *GetUserByExtensionResponseBodyUserDetail        `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	InstanceId  *string                                          `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RamId       *string                                          `json:"RamId,omitempty" xml:"RamId,omitempty"`
	Roles       []*GetUserByExtensionResponseBodyUserRoles       `json:"Roles,omitempty" xml:"Roles,omitempty" type:"Repeated"`
	SkillLevels []*GetUserByExtensionResponseBodyUserSkillLevels `json:"SkillLevels,omitempty" xml:"SkillLevels,omitempty" type:"Repeated"`
	UserId      *string                                          `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetUserByExtensionResponseBodyUser) String() string {
	return tea.Prettify(s)
}

func (s GetUserByExtensionResponseBodyUser) GoString() string {
	return s.String()
}

func (s *GetUserByExtensionResponseBodyUser) SetDetail(v *GetUserByExtensionResponseBodyUserDetail) *GetUserByExtensionResponseBodyUser {
	s.Detail = v
	return s
}

func (s *GetUserByExtensionResponseBodyUser) SetInstanceId(v string) *GetUserByExtensionResponseBodyUser {
	s.InstanceId = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUser) SetRamId(v string) *GetUserByExtensionResponseBodyUser {
	s.RamId = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUser) SetRoles(v []*GetUserByExtensionResponseBodyUserRoles) *GetUserByExtensionResponseBodyUser {
	s.Roles = v
	return s
}

func (s *GetUserByExtensionResponseBodyUser) SetSkillLevels(v []*GetUserByExtensionResponseBodyUserSkillLevels) *GetUserByExtensionResponseBodyUser {
	s.SkillLevels = v
	return s
}

func (s *GetUserByExtensionResponseBodyUser) SetUserId(v string) *GetUserByExtensionResponseBodyUser {
	s.UserId = &v
	return s
}

type GetUserByExtensionResponseBodyUserDetail struct {
	Department  *string `json:"Department,omitempty" xml:"Department,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	Extension   *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	LoginName   *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Phone       *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s GetUserByExtensionResponseBodyUserDetail) String() string {
	return tea.Prettify(s)
}

func (s GetUserByExtensionResponseBodyUserDetail) GoString() string {
	return s.String()
}

func (s *GetUserByExtensionResponseBodyUserDetail) SetDepartment(v string) *GetUserByExtensionResponseBodyUserDetail {
	s.Department = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserDetail) SetDisplayName(v string) *GetUserByExtensionResponseBodyUserDetail {
	s.DisplayName = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserDetail) SetEmail(v string) *GetUserByExtensionResponseBodyUserDetail {
	s.Email = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserDetail) SetExtension(v string) *GetUserByExtensionResponseBodyUserDetail {
	s.Extension = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserDetail) SetLoginName(v string) *GetUserByExtensionResponseBodyUserDetail {
	s.LoginName = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserDetail) SetPhone(v string) *GetUserByExtensionResponseBodyUserDetail {
	s.Phone = &v
	return s
}

type GetUserByExtensionResponseBodyUserRoles struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RoleDescription *string `json:"RoleDescription,omitempty" xml:"RoleDescription,omitempty"`
	RoleId          *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s GetUserByExtensionResponseBodyUserRoles) String() string {
	return tea.Prettify(s)
}

func (s GetUserByExtensionResponseBodyUserRoles) GoString() string {
	return s.String()
}

func (s *GetUserByExtensionResponseBodyUserRoles) SetInstanceId(v string) *GetUserByExtensionResponseBodyUserRoles {
	s.InstanceId = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserRoles) SetRoleDescription(v string) *GetUserByExtensionResponseBodyUserRoles {
	s.RoleDescription = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserRoles) SetRoleId(v string) *GetUserByExtensionResponseBodyUserRoles {
	s.RoleId = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserRoles) SetRoleName(v string) *GetUserByExtensionResponseBodyUserRoles {
	s.RoleName = &v
	return s
}

type GetUserByExtensionResponseBodyUserSkillLevels struct {
	Level        *int32                                              `json:"Level,omitempty" xml:"Level,omitempty"`
	Skill        *GetUserByExtensionResponseBodyUserSkillLevelsSkill `json:"Skill,omitempty" xml:"Skill,omitempty" type:"Struct"`
	SkillLevelId *string                                             `json:"SkillLevelId,omitempty" xml:"SkillLevelId,omitempty"`
}

func (s GetUserByExtensionResponseBodyUserSkillLevels) String() string {
	return tea.Prettify(s)
}

func (s GetUserByExtensionResponseBodyUserSkillLevels) GoString() string {
	return s.String()
}

func (s *GetUserByExtensionResponseBodyUserSkillLevels) SetLevel(v int32) *GetUserByExtensionResponseBodyUserSkillLevels {
	s.Level = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserSkillLevels) SetSkill(v *GetUserByExtensionResponseBodyUserSkillLevelsSkill) *GetUserByExtensionResponseBodyUserSkillLevels {
	s.Skill = v
	return s
}

func (s *GetUserByExtensionResponseBodyUserSkillLevels) SetSkillLevelId(v string) *GetUserByExtensionResponseBodyUserSkillLevels {
	s.SkillLevelId = &v
	return s
}

type GetUserByExtensionResponseBodyUserSkillLevelsSkill struct {
	InstanceId            *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SkillGroupDescription *string `json:"SkillGroupDescription,omitempty" xml:"SkillGroupDescription,omitempty"`
	SkillGroupId          *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName        *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s GetUserByExtensionResponseBodyUserSkillLevelsSkill) String() string {
	return tea.Prettify(s)
}

func (s GetUserByExtensionResponseBodyUserSkillLevelsSkill) GoString() string {
	return s.String()
}

func (s *GetUserByExtensionResponseBodyUserSkillLevelsSkill) SetInstanceId(v string) *GetUserByExtensionResponseBodyUserSkillLevelsSkill {
	s.InstanceId = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserSkillLevelsSkill) SetSkillGroupDescription(v string) *GetUserByExtensionResponseBodyUserSkillLevelsSkill {
	s.SkillGroupDescription = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserSkillLevelsSkill) SetSkillGroupId(v string) *GetUserByExtensionResponseBodyUserSkillLevelsSkill {
	s.SkillGroupId = &v
	return s
}

func (s *GetUserByExtensionResponseBodyUserSkillLevelsSkill) SetSkillGroupName(v string) *GetUserByExtensionResponseBodyUserSkillLevelsSkill {
	s.SkillGroupName = &v
	return s
}

type GetUserByExtensionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetUserByExtensionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetUserByExtensionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserByExtensionResponse) GoString() string {
	return s.String()
}

func (s *GetUserByExtensionResponse) SetHeaders(v map[string]*string) *GetUserByExtensionResponse {
	s.Headers = v
	return s
}

func (s *GetUserByExtensionResponse) SetStatusCode(v int32) *GetUserByExtensionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserByExtensionResponse) SetBody(v *GetUserByExtensionResponseBody) *GetUserByExtensionResponse {
	s.Body = v
	return s
}

type LaunchAppraiseRequest struct {
	Acid       *string `json:"Acid,omitempty" xml:"Acid,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s LaunchAppraiseRequest) String() string {
	return tea.Prettify(s)
}

func (s LaunchAppraiseRequest) GoString() string {
	return s.String()
}

func (s *LaunchAppraiseRequest) SetAcid(v string) *LaunchAppraiseRequest {
	s.Acid = &v
	return s
}

func (s *LaunchAppraiseRequest) SetInstanceId(v string) *LaunchAppraiseRequest {
	s.InstanceId = &v
	return s
}

type LaunchAppraiseResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s LaunchAppraiseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LaunchAppraiseResponseBody) GoString() string {
	return s.String()
}

func (s *LaunchAppraiseResponseBody) SetCode(v string) *LaunchAppraiseResponseBody {
	s.Code = &v
	return s
}

func (s *LaunchAppraiseResponseBody) SetHttpStatusCode(v int32) *LaunchAppraiseResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *LaunchAppraiseResponseBody) SetMessage(v string) *LaunchAppraiseResponseBody {
	s.Message = &v
	return s
}

func (s *LaunchAppraiseResponseBody) SetRequestId(v string) *LaunchAppraiseResponseBody {
	s.RequestId = &v
	return s
}

func (s *LaunchAppraiseResponseBody) SetSuccess(v bool) *LaunchAppraiseResponseBody {
	s.Success = &v
	return s
}

type LaunchAppraiseResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *LaunchAppraiseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s LaunchAppraiseResponse) String() string {
	return tea.Prettify(s)
}

func (s LaunchAppraiseResponse) GoString() string {
	return s.String()
}

func (s *LaunchAppraiseResponse) SetHeaders(v map[string]*string) *LaunchAppraiseResponse {
	s.Headers = v
	return s
}

func (s *LaunchAppraiseResponse) SetStatusCode(v int32) *LaunchAppraiseResponse {
	s.StatusCode = &v
	return s
}

func (s *LaunchAppraiseResponse) SetBody(v *LaunchAppraiseResponseBody) *LaunchAppraiseResponse {
	s.Body = v
	return s
}

type LaunchShortMessageAppraiseRequest struct {
	Acid         *string `json:"Acid,omitempty" xml:"Acid,omitempty"`
	ContactType  *int32  `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumbers *string `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty"`
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s LaunchShortMessageAppraiseRequest) String() string {
	return tea.Prettify(s)
}

func (s LaunchShortMessageAppraiseRequest) GoString() string {
	return s.String()
}

func (s *LaunchShortMessageAppraiseRequest) SetAcid(v string) *LaunchShortMessageAppraiseRequest {
	s.Acid = &v
	return s
}

func (s *LaunchShortMessageAppraiseRequest) SetContactType(v int32) *LaunchShortMessageAppraiseRequest {
	s.ContactType = &v
	return s
}

func (s *LaunchShortMessageAppraiseRequest) SetInstanceId(v string) *LaunchShortMessageAppraiseRequest {
	s.InstanceId = &v
	return s
}

func (s *LaunchShortMessageAppraiseRequest) SetPhoneNumbers(v string) *LaunchShortMessageAppraiseRequest {
	s.PhoneNumbers = &v
	return s
}

func (s *LaunchShortMessageAppraiseRequest) SetSkillGroupId(v string) *LaunchShortMessageAppraiseRequest {
	s.SkillGroupId = &v
	return s
}

type LaunchShortMessageAppraiseResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s LaunchShortMessageAppraiseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LaunchShortMessageAppraiseResponseBody) GoString() string {
	return s.String()
}

func (s *LaunchShortMessageAppraiseResponseBody) SetCode(v string) *LaunchShortMessageAppraiseResponseBody {
	s.Code = &v
	return s
}

func (s *LaunchShortMessageAppraiseResponseBody) SetHttpStatusCode(v int32) *LaunchShortMessageAppraiseResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *LaunchShortMessageAppraiseResponseBody) SetMessage(v string) *LaunchShortMessageAppraiseResponseBody {
	s.Message = &v
	return s
}

func (s *LaunchShortMessageAppraiseResponseBody) SetRequestId(v string) *LaunchShortMessageAppraiseResponseBody {
	s.RequestId = &v
	return s
}

func (s *LaunchShortMessageAppraiseResponseBody) SetSuccess(v bool) *LaunchShortMessageAppraiseResponseBody {
	s.Success = &v
	return s
}

type LaunchShortMessageAppraiseResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *LaunchShortMessageAppraiseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s LaunchShortMessageAppraiseResponse) String() string {
	return tea.Prettify(s)
}

func (s LaunchShortMessageAppraiseResponse) GoString() string {
	return s.String()
}

func (s *LaunchShortMessageAppraiseResponse) SetHeaders(v map[string]*string) *LaunchShortMessageAppraiseResponse {
	s.Headers = v
	return s
}

func (s *LaunchShortMessageAppraiseResponse) SetStatusCode(v int32) *LaunchShortMessageAppraiseResponse {
	s.StatusCode = &v
	return s
}

func (s *LaunchShortMessageAppraiseResponse) SetBody(v *LaunchShortMessageAppraiseResponseBody) *LaunchShortMessageAppraiseResponse {
	s.Body = v
	return s
}

type ListAgentDevicesRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RamIds     *string `json:"RamIds,omitempty" xml:"RamIds,omitempty"`
	StartTime  *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StopTime   *int64  `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
}

func (s ListAgentDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAgentDevicesRequest) GoString() string {
	return s.String()
}

func (s *ListAgentDevicesRequest) SetInstanceId(v string) *ListAgentDevicesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAgentDevicesRequest) SetRamIds(v string) *ListAgentDevicesRequest {
	s.RamIds = &v
	return s
}

func (s *ListAgentDevicesRequest) SetStartTime(v int64) *ListAgentDevicesRequest {
	s.StartTime = &v
	return s
}

func (s *ListAgentDevicesRequest) SetStopTime(v int64) *ListAgentDevicesRequest {
	s.StopTime = &v
	return s
}

type ListAgentDevicesResponseBody struct {
	AgentDeviceList *ListAgentDevicesResponseBodyAgentDeviceList `json:"AgentDeviceList,omitempty" xml:"AgentDeviceList,omitempty" type:"Struct"`
	Code            *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode  *int32                                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message         *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success         *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAgentDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAgentDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListAgentDevicesResponseBody) SetAgentDeviceList(v *ListAgentDevicesResponseBodyAgentDeviceList) *ListAgentDevicesResponseBody {
	s.AgentDeviceList = v
	return s
}

func (s *ListAgentDevicesResponseBody) SetCode(v string) *ListAgentDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *ListAgentDevicesResponseBody) SetHttpStatusCode(v int32) *ListAgentDevicesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAgentDevicesResponseBody) SetMessage(v string) *ListAgentDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListAgentDevicesResponseBody) SetRequestId(v string) *ListAgentDevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAgentDevicesResponseBody) SetSuccess(v bool) *ListAgentDevicesResponseBody {
	s.Success = &v
	return s
}

type ListAgentDevicesResponseBodyAgentDeviceList struct {
	AgentDevice []*ListAgentDevicesResponseBodyAgentDeviceListAgentDevice `json:"AgentDevice,omitempty" xml:"AgentDevice,omitempty" type:"Repeated"`
}

func (s ListAgentDevicesResponseBodyAgentDeviceList) String() string {
	return tea.Prettify(s)
}

func (s ListAgentDevicesResponseBodyAgentDeviceList) GoString() string {
	return s.String()
}

func (s *ListAgentDevicesResponseBodyAgentDeviceList) SetAgentDevice(v []*ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) *ListAgentDevicesResponseBodyAgentDeviceList {
	s.AgentDevice = v
	return s
}

type ListAgentDevicesResponseBodyAgentDeviceListAgentDevice struct {
	BrowserVersion *string `json:"BrowserVersion,omitempty" xml:"BrowserVersion,omitempty"`
	ClientIp       *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	ClientPort     *string `json:"ClientPort,omitempty" xml:"ClientPort,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IsLogin        *int32  `json:"IsLogin,omitempty" xml:"IsLogin,omitempty"`
	LoginTime      *int64  `json:"LoginTime,omitempty" xml:"LoginTime,omitempty"`
	RamId          *int64  `json:"RamId,omitempty" xml:"RamId,omitempty"`
	Remark         *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) String() string {
	return tea.Prettify(s)
}

func (s ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) GoString() string {
	return s.String()
}

func (s *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) SetBrowserVersion(v string) *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice {
	s.BrowserVersion = &v
	return s
}

func (s *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) SetClientIp(v string) *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice {
	s.ClientIp = &v
	return s
}

func (s *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) SetClientPort(v string) *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice {
	s.ClientPort = &v
	return s
}

func (s *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) SetInstanceId(v string) *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice {
	s.InstanceId = &v
	return s
}

func (s *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) SetIsLogin(v int32) *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice {
	s.IsLogin = &v
	return s
}

func (s *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) SetLoginTime(v int64) *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice {
	s.LoginTime = &v
	return s
}

func (s *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) SetRamId(v int64) *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice {
	s.RamId = &v
	return s
}

func (s *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice) SetRemark(v string) *ListAgentDevicesResponseBodyAgentDeviceListAgentDevice {
	s.Remark = &v
	return s
}

type ListAgentDevicesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAgentDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAgentDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAgentDevicesResponse) GoString() string {
	return s.String()
}

func (s *ListAgentDevicesResponse) SetHeaders(v map[string]*string) *ListAgentDevicesResponse {
	s.Headers = v
	return s
}

func (s *ListAgentDevicesResponse) SetStatusCode(v int32) *ListAgentDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAgentDevicesResponse) SetBody(v *ListAgentDevicesResponseBody) *ListAgentDevicesResponse {
	s.Body = v
	return s
}

type ListAgentEventsRequest struct {
	Event      []*string `json:"Event,omitempty" xml:"Event,omitempty" type:"Repeated"`
	InstanceId *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RamId      []*string `json:"RamId,omitempty" xml:"RamId,omitempty" type:"Repeated"`
	StartTime  *int64    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StopTime   *int64    `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
}

func (s ListAgentEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAgentEventsRequest) GoString() string {
	return s.String()
}

func (s *ListAgentEventsRequest) SetEvent(v []*string) *ListAgentEventsRequest {
	s.Event = v
	return s
}

func (s *ListAgentEventsRequest) SetInstanceId(v string) *ListAgentEventsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAgentEventsRequest) SetRamId(v []*string) *ListAgentEventsRequest {
	s.RamId = v
	return s
}

func (s *ListAgentEventsRequest) SetStartTime(v int64) *ListAgentEventsRequest {
	s.StartTime = &v
	return s
}

func (s *ListAgentEventsRequest) SetStopTime(v int64) *ListAgentEventsRequest {
	s.StopTime = &v
	return s
}

type ListAgentEventsResponseBody struct {
	AgentEventList *ListAgentEventsResponseBodyAgentEventList `json:"AgentEventList,omitempty" xml:"AgentEventList,omitempty" type:"Struct"`
	Code           *string                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAgentEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAgentEventsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAgentEventsResponseBody) SetAgentEventList(v *ListAgentEventsResponseBodyAgentEventList) *ListAgentEventsResponseBody {
	s.AgentEventList = v
	return s
}

func (s *ListAgentEventsResponseBody) SetCode(v string) *ListAgentEventsResponseBody {
	s.Code = &v
	return s
}

func (s *ListAgentEventsResponseBody) SetHttpStatusCode(v int32) *ListAgentEventsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAgentEventsResponseBody) SetMessage(v string) *ListAgentEventsResponseBody {
	s.Message = &v
	return s
}

func (s *ListAgentEventsResponseBody) SetRequestId(v string) *ListAgentEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAgentEventsResponseBody) SetSuccess(v bool) *ListAgentEventsResponseBody {
	s.Success = &v
	return s
}

type ListAgentEventsResponseBodyAgentEventList struct {
	AgentEvent []*ListAgentEventsResponseBodyAgentEventListAgentEvent `json:"AgentEvent,omitempty" xml:"AgentEvent,omitempty" type:"Repeated"`
}

func (s ListAgentEventsResponseBodyAgentEventList) String() string {
	return tea.Prettify(s)
}

func (s ListAgentEventsResponseBodyAgentEventList) GoString() string {
	return s.String()
}

func (s *ListAgentEventsResponseBodyAgentEventList) SetAgentEvent(v []*ListAgentEventsResponseBodyAgentEventListAgentEvent) *ListAgentEventsResponseBodyAgentEventList {
	s.AgentEvent = v
	return s
}

type ListAgentEventsResponseBodyAgentEventListAgentEvent struct {
	Event         *string                                                           `json:"Event,omitempty" xml:"Event,omitempty"`
	EventTime     *int64                                                            `json:"EventTime,omitempty" xml:"EventTime,omitempty"`
	InstanceId    *string                                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LoginName     *string                                                           `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	RamId         *int64                                                            `json:"RamId,omitempty" xml:"RamId,omitempty"`
	SkillGroupIds *ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty" type:"Struct"`
}

func (s ListAgentEventsResponseBodyAgentEventListAgentEvent) String() string {
	return tea.Prettify(s)
}

func (s ListAgentEventsResponseBodyAgentEventListAgentEvent) GoString() string {
	return s.String()
}

func (s *ListAgentEventsResponseBodyAgentEventListAgentEvent) SetEvent(v string) *ListAgentEventsResponseBodyAgentEventListAgentEvent {
	s.Event = &v
	return s
}

func (s *ListAgentEventsResponseBodyAgentEventListAgentEvent) SetEventTime(v int64) *ListAgentEventsResponseBodyAgentEventListAgentEvent {
	s.EventTime = &v
	return s
}

func (s *ListAgentEventsResponseBodyAgentEventListAgentEvent) SetInstanceId(v string) *ListAgentEventsResponseBodyAgentEventListAgentEvent {
	s.InstanceId = &v
	return s
}

func (s *ListAgentEventsResponseBodyAgentEventListAgentEvent) SetLoginName(v string) *ListAgentEventsResponseBodyAgentEventListAgentEvent {
	s.LoginName = &v
	return s
}

func (s *ListAgentEventsResponseBodyAgentEventListAgentEvent) SetRamId(v int64) *ListAgentEventsResponseBodyAgentEventListAgentEvent {
	s.RamId = &v
	return s
}

func (s *ListAgentEventsResponseBodyAgentEventListAgentEvent) SetSkillGroupIds(v *ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds) *ListAgentEventsResponseBodyAgentEventListAgentEvent {
	s.SkillGroupIds = v
	return s
}

type ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds struct {
	SkillGroup []*ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup `json:"SkillGroup,omitempty" xml:"SkillGroup,omitempty" type:"Repeated"`
}

func (s ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds) String() string {
	return tea.Prettify(s)
}

func (s ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds) GoString() string {
	return s.String()
}

func (s *ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds) SetSkillGroup(v []*ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup) *ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds {
	s.SkillGroup = v
	return s
}

type ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup struct {
	SkillGroupId   *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup) String() string {
	return tea.Prettify(s)
}

func (s ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup) GoString() string {
	return s.String()
}

func (s *ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup) SetSkillGroupId(v string) *ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup {
	s.SkillGroupId = &v
	return s
}

func (s *ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup) SetSkillGroupName(v string) *ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup {
	s.SkillGroupName = &v
	return s
}

type ListAgentEventsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAgentEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAgentEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAgentEventsResponse) GoString() string {
	return s.String()
}

func (s *ListAgentEventsResponse) SetHeaders(v map[string]*string) *ListAgentEventsResponse {
	s.Headers = v
	return s
}

func (s *ListAgentEventsResponse) SetStatusCode(v int32) *ListAgentEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAgentEventsResponse) SetBody(v *ListAgentEventsResponseBody) *ListAgentEventsResponse {
	s.Body = v
	return s
}

type ListAgentStateLogsRequest struct {
	EndTime    *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RamId      *int64  `json:"RamId,omitempty" xml:"RamId,omitempty"`
	StartTime  *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListAgentStateLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStateLogsRequest) GoString() string {
	return s.String()
}

func (s *ListAgentStateLogsRequest) SetEndTime(v int64) *ListAgentStateLogsRequest {
	s.EndTime = &v
	return s
}

func (s *ListAgentStateLogsRequest) SetInstanceId(v string) *ListAgentStateLogsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAgentStateLogsRequest) SetPageNumber(v int32) *ListAgentStateLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAgentStateLogsRequest) SetPageSize(v int32) *ListAgentStateLogsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAgentStateLogsRequest) SetRamId(v int64) *ListAgentStateLogsRequest {
	s.RamId = &v
	return s
}

func (s *ListAgentStateLogsRequest) SetStartTime(v int64) *ListAgentStateLogsRequest {
	s.StartTime = &v
	return s
}

type ListAgentStateLogsResponseBody struct {
	AgentStateLogPage *ListAgentStateLogsResponseBodyAgentStateLogPage `json:"AgentStateLogPage,omitempty" xml:"AgentStateLogPage,omitempty" type:"Struct"`
	Code              *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode    *int32                                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message           *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success           *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAgentStateLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStateLogsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAgentStateLogsResponseBody) SetAgentStateLogPage(v *ListAgentStateLogsResponseBodyAgentStateLogPage) *ListAgentStateLogsResponseBody {
	s.AgentStateLogPage = v
	return s
}

func (s *ListAgentStateLogsResponseBody) SetCode(v string) *ListAgentStateLogsResponseBody {
	s.Code = &v
	return s
}

func (s *ListAgentStateLogsResponseBody) SetHttpStatusCode(v int32) *ListAgentStateLogsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAgentStateLogsResponseBody) SetMessage(v string) *ListAgentStateLogsResponseBody {
	s.Message = &v
	return s
}

func (s *ListAgentStateLogsResponseBody) SetRequestId(v string) *ListAgentStateLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAgentStateLogsResponseBody) SetSuccess(v bool) *ListAgentStateLogsResponseBody {
	s.Success = &v
	return s
}

type ListAgentStateLogsResponseBodyAgentStateLogPage struct {
	List       []*ListAgentStateLogsResponseBodyAgentStateLogPageList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAgentStateLogsResponseBodyAgentStateLogPage) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStateLogsResponseBodyAgentStateLogPage) GoString() string {
	return s.String()
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPage) SetList(v []*ListAgentStateLogsResponseBodyAgentStateLogPageList) *ListAgentStateLogsResponseBodyAgentStateLogPage {
	s.List = v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPage) SetPageNumber(v int32) *ListAgentStateLogsResponseBodyAgentStateLogPage {
	s.PageNumber = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPage) SetPageSize(v int32) *ListAgentStateLogsResponseBodyAgentStateLogPage {
	s.PageSize = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPage) SetTotalCount(v int32) *ListAgentStateLogsResponseBodyAgentStateLogPage {
	s.TotalCount = &v
	return s
}

type ListAgentStateLogsResponseBodyAgentStateLogPageList struct {
	ConnectId     *string `json:"ConnectId,omitempty" xml:"ConnectId,omitempty"`
	ContactId     *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	CounterParty  *string `json:"CounterParty,omitempty" xml:"CounterParty,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RamId         *int64  `json:"RamId,omitempty" xml:"RamId,omitempty"`
	SkillGroupIds *string `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	State         *string `json:"State,omitempty" xml:"State,omitempty"`
	StateCode     *string `json:"StateCode,omitempty" xml:"StateCode,omitempty"`
	StateTime     *int64  `json:"StateTime,omitempty" xml:"StateTime,omitempty"`
}

func (s ListAgentStateLogsResponseBodyAgentStateLogPageList) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStateLogsResponseBodyAgentStateLogPageList) GoString() string {
	return s.String()
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPageList) SetConnectId(v string) *ListAgentStateLogsResponseBodyAgentStateLogPageList {
	s.ConnectId = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPageList) SetContactId(v string) *ListAgentStateLogsResponseBodyAgentStateLogPageList {
	s.ContactId = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPageList) SetCounterParty(v string) *ListAgentStateLogsResponseBodyAgentStateLogPageList {
	s.CounterParty = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPageList) SetInstanceId(v string) *ListAgentStateLogsResponseBodyAgentStateLogPageList {
	s.InstanceId = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPageList) SetRamId(v int64) *ListAgentStateLogsResponseBodyAgentStateLogPageList {
	s.RamId = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPageList) SetSkillGroupIds(v string) *ListAgentStateLogsResponseBodyAgentStateLogPageList {
	s.SkillGroupIds = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPageList) SetState(v string) *ListAgentStateLogsResponseBodyAgentStateLogPageList {
	s.State = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPageList) SetStateCode(v string) *ListAgentStateLogsResponseBodyAgentStateLogPageList {
	s.StateCode = &v
	return s
}

func (s *ListAgentStateLogsResponseBodyAgentStateLogPageList) SetStateTime(v int64) *ListAgentStateLogsResponseBodyAgentStateLogPageList {
	s.StateTime = &v
	return s
}

type ListAgentStateLogsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAgentStateLogsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAgentStateLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStateLogsResponse) GoString() string {
	return s.String()
}

func (s *ListAgentStateLogsResponse) SetHeaders(v map[string]*string) *ListAgentStateLogsResponse {
	s.Headers = v
	return s
}

func (s *ListAgentStateLogsResponse) SetStatusCode(v int32) *ListAgentStateLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAgentStateLogsResponse) SetBody(v *ListAgentStateLogsResponseBody) *ListAgentStateLogsResponse {
	s.Body = v
	return s
}

type ListAgentStatesRequest struct {
	AgentIds     *string `json:"AgentIds,omitempty" xml:"AgentIds,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListAgentStatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesRequest) GoString() string {
	return s.String()
}

func (s *ListAgentStatesRequest) SetAgentIds(v string) *ListAgentStatesRequest {
	s.AgentIds = &v
	return s
}

func (s *ListAgentStatesRequest) SetInstanceId(v string) *ListAgentStatesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAgentStatesRequest) SetPageNumber(v int32) *ListAgentStatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAgentStatesRequest) SetPageSize(v int32) *ListAgentStatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListAgentStatesRequest) SetSkillGroupId(v string) *ListAgentStatesRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ListAgentStatesRequest) SetState(v string) *ListAgentStatesRequest {
	s.State = &v
	return s
}

type ListAgentStatesResponseBody struct {
	Code           *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *ListAgentStatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAgentStatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListAgentStatesResponseBody) SetCode(v string) *ListAgentStatesResponseBody {
	s.Code = &v
	return s
}

func (s *ListAgentStatesResponseBody) SetData(v *ListAgentStatesResponseBodyData) *ListAgentStatesResponseBody {
	s.Data = v
	return s
}

func (s *ListAgentStatesResponseBody) SetHttpStatusCode(v int32) *ListAgentStatesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAgentStatesResponseBody) SetMessage(v string) *ListAgentStatesResponseBody {
	s.Message = &v
	return s
}

func (s *ListAgentStatesResponseBody) SetRequestId(v string) *ListAgentStatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAgentStatesResponseBody) SetSuccess(v bool) *ListAgentStatesResponseBody {
	s.Success = &v
	return s
}

type ListAgentStatesResponseBodyData struct {
	List       *ListAgentStatesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAgentStatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAgentStatesResponseBodyData) SetList(v *ListAgentStatesResponseBodyDataList) *ListAgentStatesResponseBodyData {
	s.List = v
	return s
}

func (s *ListAgentStatesResponseBodyData) SetPageNumber(v int32) *ListAgentStatesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListAgentStatesResponseBodyData) SetPageSize(v int32) *ListAgentStatesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListAgentStatesResponseBodyData) SetTotalCount(v int32) *ListAgentStatesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListAgentStatesResponseBodyDataList struct {
	RealTimeAgentState []*ListAgentStatesResponseBodyDataListRealTimeAgentState `json:"RealTimeAgentState,omitempty" xml:"RealTimeAgentState,omitempty" type:"Repeated"`
}

func (s ListAgentStatesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListAgentStatesResponseBodyDataList) SetRealTimeAgentState(v []*ListAgentStatesResponseBodyDataListRealTimeAgentState) *ListAgentStatesResponseBodyDataList {
	s.RealTimeAgentState = v
	return s
}

type ListAgentStatesResponseBodyDataListRealTimeAgentState struct {
	AgentId       *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName     *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	Dn            *string `json:"Dn,omitempty" xml:"Dn,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LoginName     *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	State         *string `json:"State,omitempty" xml:"State,omitempty"`
	StateDuration *string `json:"StateDuration,omitempty" xml:"StateDuration,omitempty"`
}

func (s ListAgentStatesResponseBodyDataListRealTimeAgentState) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesResponseBodyDataListRealTimeAgentState) GoString() string {
	return s.String()
}

func (s *ListAgentStatesResponseBodyDataListRealTimeAgentState) SetAgentId(v string) *ListAgentStatesResponseBodyDataListRealTimeAgentState {
	s.AgentId = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataListRealTimeAgentState) SetAgentName(v string) *ListAgentStatesResponseBodyDataListRealTimeAgentState {
	s.AgentName = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataListRealTimeAgentState) SetDn(v string) *ListAgentStatesResponseBodyDataListRealTimeAgentState {
	s.Dn = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataListRealTimeAgentState) SetInstanceId(v string) *ListAgentStatesResponseBodyDataListRealTimeAgentState {
	s.InstanceId = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataListRealTimeAgentState) SetLoginName(v string) *ListAgentStatesResponseBodyDataListRealTimeAgentState {
	s.LoginName = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataListRealTimeAgentState) SetState(v string) *ListAgentStatesResponseBodyDataListRealTimeAgentState {
	s.State = &v
	return s
}

func (s *ListAgentStatesResponseBodyDataListRealTimeAgentState) SetStateDuration(v string) *ListAgentStatesResponseBodyDataListRealTimeAgentState {
	s.StateDuration = &v
	return s
}

type ListAgentStatesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAgentStatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAgentStatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAgentStatesResponse) GoString() string {
	return s.String()
}

func (s *ListAgentStatesResponse) SetHeaders(v map[string]*string) *ListAgentStatesResponse {
	s.Headers = v
	return s
}

func (s *ListAgentStatesResponse) SetStatusCode(v int32) *ListAgentStatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAgentStatesResponse) SetBody(v *ListAgentStatesResponseBody) *ListAgentStatesResponse {
	s.Body = v
	return s
}

type ListAgentSummaryReportsRequest struct {
	AgentIds     *string `json:"AgentIds,omitempty" xml:"AgentIds,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListAgentSummaryReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsRequest) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsRequest) SetAgentIds(v string) *ListAgentSummaryReportsRequest {
	s.AgentIds = &v
	return s
}

func (s *ListAgentSummaryReportsRequest) SetEndTime(v string) *ListAgentSummaryReportsRequest {
	s.EndTime = &v
	return s
}

func (s *ListAgentSummaryReportsRequest) SetInstanceId(v string) *ListAgentSummaryReportsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAgentSummaryReportsRequest) SetPageNumber(v int32) *ListAgentSummaryReportsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAgentSummaryReportsRequest) SetPageSize(v int32) *ListAgentSummaryReportsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAgentSummaryReportsRequest) SetSkillGroupId(v string) *ListAgentSummaryReportsRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ListAgentSummaryReportsRequest) SetStartTime(v string) *ListAgentSummaryReportsRequest {
	s.StartTime = &v
	return s
}

type ListAgentSummaryReportsResponseBody struct {
	Code                    *string                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode          *int32                                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                 *string                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	PagedAgentSummaryReport *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport `json:"PagedAgentSummaryReport,omitempty" xml:"PagedAgentSummaryReport,omitempty" type:"Struct"`
	RequestId               *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                 *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAgentSummaryReportsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsResponseBody) SetCode(v string) *ListAgentSummaryReportsResponseBody {
	s.Code = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBody) SetHttpStatusCode(v int32) *ListAgentSummaryReportsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBody) SetMessage(v string) *ListAgentSummaryReportsResponseBody {
	s.Message = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBody) SetPagedAgentSummaryReport(v *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport) *ListAgentSummaryReportsResponseBody {
	s.PagedAgentSummaryReport = v
	return s
}

func (s *ListAgentSummaryReportsResponseBody) SetRequestId(v string) *ListAgentSummaryReportsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBody) SetSuccess(v bool) *ListAgentSummaryReportsResponseBody {
	s.Success = &v
	return s
}

type ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport struct {
	List       *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport) SetList(v *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport {
	s.List = v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport) SetPageNumber(v int32) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport {
	s.PageNumber = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport) SetPageSize(v int32) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport {
	s.PageSize = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport) SetTotalCount(v int32) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport {
	s.TotalCount = &v
	return s
}

type ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList struct {
	AgentSummaryReport []*ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport `json:"AgentSummaryReport,omitempty" xml:"AgentSummaryReport,omitempty" type:"Repeated"`
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList) SetAgentSummaryReport(v []*ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList {
	s.AgentSummaryReport = v
	return s
}

type ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport struct {
	AgentId         *string                                                                                   `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName       *string                                                                                   `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	Inbound         *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId      *string                                                                                   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LoginName       *string                                                                                   `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Outbound        *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall         *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	SkillGroupIds   *string                                                                                   `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	SkillGroupNames *string                                                                                   `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetAgentId(v string) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.AgentId = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetAgentName(v string) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.AgentName = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetInbound(v *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.Inbound = v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetInstanceId(v string) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.InstanceId = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetLoginName(v string) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.LoginName = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetOutbound(v *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.Outbound = v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetOverall(v *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.Overall = v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetSkillGroupIds(v string) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.SkillGroupIds = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetSkillGroupNames(v string) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.SkillGroupNames = &v
	return s
}

type ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound struct {
	AverageRingTime              *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsHandled                 *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsOffered                 *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	HandleRate                   *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	MaxRingTime                  *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel20               *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	TotalRingTime                *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetAverageRingTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetAverageTalkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetAverageWorkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetCallsHandled(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetCallsOffered(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetHandleRate(v float32) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.HandleRate = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetMaxRingTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetMaxTalkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetMaxWorkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetServiceLevel20(v float32) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetTotalRingTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetTotalTalkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetTotalWorkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *string  `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetAnswerRate(v float32) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetAverageDialingTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetAverageTalkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetAverageWorkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetCallsAnswered(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetCallsDialed(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetMaxDialingTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetMaxTalkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetMaxWorkTime(v string) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetTotalDialingTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetTotalTalkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetTotalWorkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall struct {
	AverageReadyTime             *int64   `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	FirstLogInTime               *string  `json:"FirstLogInTime,omitempty" xml:"FirstLogInTime,omitempty"`
	LastLogOutTime               *string  `json:"LastLogOutTime,omitempty" xml:"LastLogOutTime,omitempty"`
	MaxReadyTime                 *int64   `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OccupancyRate                *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	OneTransferCalls             *int64   `json:"OneTransferCalls,omitempty" xml:"OneTransferCalls,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalBreakTime               *int64   `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalLoggedInTime            *int64   `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime               *int64   `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetAverageReadyTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetAverageTalkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetAverageWorkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetFirstLogInTime(v string) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.FirstLogInTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetLastLogOutTime(v string) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.LastLogOutTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetMaxReadyTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetMaxTalkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetMaxWorkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetOccupancyRate(v float32) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetOneTransferCalls(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.OneTransferCalls = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalBreakTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalCalls(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalLoggedInTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalReadyTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalTalkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalWorkTime(v int64) *ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAgentSummaryReportsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAgentSummaryReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsResponse) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsResponse) SetHeaders(v map[string]*string) *ListAgentSummaryReportsResponse {
	s.Headers = v
	return s
}

func (s *ListAgentSummaryReportsResponse) SetStatusCode(v int32) *ListAgentSummaryReportsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAgentSummaryReportsResponse) SetBody(v *ListAgentSummaryReportsResponseBody) *ListAgentSummaryReportsResponse {
	s.Body = v
	return s
}

type ListAgentSummaryReportsByIntervalRequest struct {
	AgentIds     *string `json:"AgentIds,omitempty" xml:"AgentIds,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Interval     *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListAgentSummaryReportsByIntervalRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalRequest) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalRequest) SetAgentIds(v string) *ListAgentSummaryReportsByIntervalRequest {
	s.AgentIds = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalRequest) SetEndTime(v string) *ListAgentSummaryReportsByIntervalRequest {
	s.EndTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalRequest) SetInstanceId(v string) *ListAgentSummaryReportsByIntervalRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalRequest) SetInterval(v string) *ListAgentSummaryReportsByIntervalRequest {
	s.Interval = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalRequest) SetPageNumber(v int32) *ListAgentSummaryReportsByIntervalRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalRequest) SetPageSize(v int32) *ListAgentSummaryReportsByIntervalRequest {
	s.PageSize = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalRequest) SetSkillGroupId(v string) *ListAgentSummaryReportsByIntervalRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalRequest) SetStartTime(v string) *ListAgentSummaryReportsByIntervalRequest {
	s.StartTime = &v
	return s
}

type ListAgentSummaryReportsByIntervalResponseBody struct {
	Code                    *string                                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode          *int32                                                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                 *string                                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	PagedAgentSummaryReport *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport `json:"PagedAgentSummaryReport,omitempty" xml:"PagedAgentSummaryReport,omitempty" type:"Struct"`
	RequestId               *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                 *bool                                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAgentSummaryReportsByIntervalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalResponseBody) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalResponseBody) SetCode(v string) *ListAgentSummaryReportsByIntervalResponseBody {
	s.Code = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBody) SetHttpStatusCode(v int32) *ListAgentSummaryReportsByIntervalResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBody) SetMessage(v string) *ListAgentSummaryReportsByIntervalResponseBody {
	s.Message = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBody) SetPagedAgentSummaryReport(v *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport) *ListAgentSummaryReportsByIntervalResponseBody {
	s.PagedAgentSummaryReport = v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBody) SetRequestId(v string) *ListAgentSummaryReportsByIntervalResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBody) SetSuccess(v bool) *ListAgentSummaryReportsByIntervalResponseBody {
	s.Success = &v
	return s
}

type ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport struct {
	List       *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport) SetList(v *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport {
	s.List = v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport) SetPageNumber(v int32) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport {
	s.PageNumber = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport) SetPageSize(v int32) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport {
	s.PageSize = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport) SetTotalCount(v int32) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport {
	s.TotalCount = &v
	return s
}

type ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList struct {
	AgentTimeIntervalReport []*ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport `json:"AgentTimeIntervalReport,omitempty" xml:"AgentTimeIntervalReport,omitempty" type:"Repeated"`
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList) SetAgentTimeIntervalReport(v []*ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList {
	s.AgentTimeIntervalReport = v
	return s
}

type ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport struct {
	AgentId      *string                                                                                                      `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	IntervalList *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList `json:"IntervalList,omitempty" xml:"IntervalList,omitempty" type:"Struct"`
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport) SetAgentId(v string) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport {
	s.AgentId = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport) SetIntervalList(v *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport {
	s.IntervalList = v
	return s
}

type ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList struct {
	AgentSummaryReport []*ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport `json:"AgentSummaryReport,omitempty" xml:"AgentSummaryReport,omitempty" type:"Repeated"`
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList) SetAgentSummaryReport(v []*ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList {
	s.AgentSummaryReport = v
	return s
}

type ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport struct {
	AgentId         *string                                                                                                                                `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName       *string                                                                                                                                `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	Inbound         *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId      *string                                                                                                                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LoginName       *string                                                                                                                                `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Outbound        *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall         *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	SkillGroupIds   *string                                                                                                                                `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	SkillGroupNames *string                                                                                                                                `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
	Timestamp       *string                                                                                                                                `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) SetAgentId(v string) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport {
	s.AgentId = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) SetAgentName(v string) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport {
	s.AgentName = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) SetInbound(v *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport {
	s.Inbound = v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) SetInstanceId(v string) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport {
	s.InstanceId = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) SetLoginName(v string) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport {
	s.LoginName = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) SetOutbound(v *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport {
	s.Outbound = v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) SetOverall(v *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport {
	s.Overall = v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) SetSkillGroupIds(v string) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport {
	s.SkillGroupIds = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) SetSkillGroupNames(v string) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport {
	s.SkillGroupNames = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport) SetTimestamp(v string) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport {
	s.Timestamp = &v
	return s
}

type ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound struct {
	AverageRingTime              *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsHandled                 *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsOffered                 *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	HandleRate                   *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	MaxRingTime                  *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel20               *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	TotalRingTime                *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetAverageRingTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetAverageTalkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetAverageWorkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetCallsHandled(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetCallsOffered(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetHandleRate(v float32) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.HandleRate = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetMaxRingTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetMaxTalkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetMaxWorkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetServiceLevel20(v float32) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetTotalRingTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetTotalTalkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound) SetTotalWorkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetAnswerRate(v float32) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetAverageDialingTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetAverageTalkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetAverageWorkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetCallsAnswered(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetCallsDialed(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetMaxDialingTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetMaxTalkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetMaxWorkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetTotalDialingTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetTotalTalkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound) SetTotalWorkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall struct {
	AverageReadyTime             *int64   `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	FirstLogInTime               *string  `json:"FirstLogInTime,omitempty" xml:"FirstLogInTime,omitempty"`
	LastLogOutTime               *string  `json:"LastLogOutTime,omitempty" xml:"LastLogOutTime,omitempty"`
	MaxReadyTime                 *int64   `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OccupancyRate                *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	OneTransferCalls             *int64   `json:"OneTransferCalls,omitempty" xml:"OneTransferCalls,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalBreakTime               *int64   `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalLoggedInTime            *int64   `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime               *int64   `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetAverageReadyTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetAverageTalkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetAverageWorkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetFirstLogInTime(v string) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.FirstLogInTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetLastLogOutTime(v string) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.LastLogOutTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetMaxReadyTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetMaxTalkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetMaxWorkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetOccupancyRate(v float32) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetOneTransferCalls(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.OneTransferCalls = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetTotalBreakTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetTotalCalls(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetTotalLoggedInTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetTotalReadyTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetTotalTalkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall) SetTotalWorkTime(v int64) *ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsByIntervalResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAgentSummaryReportsByIntervalResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAgentSummaryReportsByIntervalResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsByIntervalResponse) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsByIntervalResponse) SetHeaders(v map[string]*string) *ListAgentSummaryReportsByIntervalResponse {
	s.Headers = v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponse) SetStatusCode(v int32) *ListAgentSummaryReportsByIntervalResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAgentSummaryReportsByIntervalResponse) SetBody(v *ListAgentSummaryReportsByIntervalResponseBody) *ListAgentSummaryReportsByIntervalResponse {
	s.Body = v
	return s
}

type ListAgentSummaryReportsSinceMidnightRequest struct {
	AgentIds     *string `json:"AgentIds,omitempty" xml:"AgentIds,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightRequest) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightRequest) SetAgentIds(v string) *ListAgentSummaryReportsSinceMidnightRequest {
	s.AgentIds = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightRequest) SetInstanceId(v string) *ListAgentSummaryReportsSinceMidnightRequest {
	s.InstanceId = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightRequest) SetPageNumber(v int32) *ListAgentSummaryReportsSinceMidnightRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightRequest) SetPageSize(v int32) *ListAgentSummaryReportsSinceMidnightRequest {
	s.PageSize = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightRequest) SetSkillGroupId(v string) *ListAgentSummaryReportsSinceMidnightRequest {
	s.SkillGroupId = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBody struct {
	Code                    *string                                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode          *int32                                                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                 *string                                                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	PagedAgentSummaryReport *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport `json:"PagedAgentSummaryReport,omitempty" xml:"PagedAgentSummaryReport,omitempty" type:"Struct"`
	RequestId               *string                                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                 *bool                                                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBody) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetCode(v string) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.Code = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetHttpStatusCode(v int32) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetMessage(v string) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.Message = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetPagedAgentSummaryReport(v *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.PagedAgentSummaryReport = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetRequestId(v string) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBody) SetSuccess(v bool) *ListAgentSummaryReportsSinceMidnightResponseBody {
	s.Success = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport struct {
	List       *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) SetList(v *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport {
	s.List = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) SetPageNumber(v int32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport {
	s.PageNumber = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) SetPageSize(v int32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport {
	s.PageSize = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport) SetTotalCount(v int32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport {
	s.TotalCount = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList struct {
	AgentSummaryReport []*ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport `json:"AgentSummaryReport,omitempty" xml:"AgentSummaryReport,omitempty" type:"Repeated"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList) SetAgentSummaryReport(v []*ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList {
	s.AgentSummaryReport = v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport struct {
	AgentId         *string                                                                                                `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName       *string                                                                                                `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	Inbound         *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId      *string                                                                                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LoginName       *string                                                                                                `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Outbound        *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall         *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	SkillGroupIds   *string                                                                                                `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	SkillGroupNames *string                                                                                                `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
	Timestamp       *string                                                                                                `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetAgentId(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.AgentId = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetAgentName(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.AgentName = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetInbound(v *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.Inbound = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetInstanceId(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.InstanceId = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetLoginName(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.LoginName = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetOutbound(v *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.Outbound = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetOverall(v *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.Overall = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetSkillGroupIds(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.SkillGroupIds = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetSkillGroupNames(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.SkillGroupNames = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport) SetTimestamp(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport {
	s.Timestamp = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound struct {
	AverageRingTime              *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsHandled                 *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsOffered                 *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	HandleRate                   *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	MaxRingTime                  *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel20               *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	TotalRingTime                *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetAverageRingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetAverageTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetAverageWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetCallsHandled(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetCallsOffered(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetHandleRate(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.HandleRate = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetMaxRingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetMaxTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetMaxWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetServiceLevel20(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetTotalRingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetTotalTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound) SetTotalWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *string  `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetAnswerRate(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetAverageDialingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetAverageTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetAverageWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetCallsAnswered(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetCallsDialed(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetMaxDialingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetMaxTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetMaxWorkTime(v string) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetTotalDialingTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetTotalTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound) SetTotalWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall struct {
	AverageReadyTime             *int64   `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	MaxReadyTime                 *int64   `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OccupancyRate                *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	OneTransferCalls             *int64   `json:"OneTransferCalls,omitempty" xml:"OneTransferCalls,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalBreakTime               *int64   `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalLoggedInTime            *int64   `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime               *int64   `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetAverageReadyTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetAverageTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetAverageWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetMaxReadyTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetMaxTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetMaxWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetOccupancyRate(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetOneTransferCalls(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.OneTransferCalls = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetSatisfactionIndex(v float32) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetSatisfactionSurveysOffered(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetSatisfactionSurveysResponded(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalBreakTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalCalls(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalLoggedInTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalReadyTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalTalkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall) SetTotalWorkTime(v int64) *ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall {
	s.TotalWorkTime = &v
	return s
}

type ListAgentSummaryReportsSinceMidnightResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAgentSummaryReportsSinceMidnightResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAgentSummaryReportsSinceMidnightResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAgentSummaryReportsSinceMidnightResponse) GoString() string {
	return s.String()
}

func (s *ListAgentSummaryReportsSinceMidnightResponse) SetHeaders(v map[string]*string) *ListAgentSummaryReportsSinceMidnightResponse {
	s.Headers = v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponse) SetStatusCode(v int32) *ListAgentSummaryReportsSinceMidnightResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAgentSummaryReportsSinceMidnightResponse) SetBody(v *ListAgentSummaryReportsSinceMidnightResponseBody) *ListAgentSummaryReportsSinceMidnightResponse {
	s.Body = v
	return s
}

type ListCallDetailRecordsRequest struct {
	ContactDisposition *string `json:"ContactDisposition,omitempty" xml:"ContactDisposition,omitempty"`
	ContactId          *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactType        *string `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	Criteria           *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OrderBy            *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	PageNumber         *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PhoneNumber        *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	StartTime          *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StopTime           *int64  `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	WithRecording      *bool   `json:"WithRecording,omitempty" xml:"WithRecording,omitempty"`
}

func (s ListCallDetailRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsRequest) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsRequest) SetContactDisposition(v string) *ListCallDetailRecordsRequest {
	s.ContactDisposition = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetContactId(v string) *ListCallDetailRecordsRequest {
	s.ContactId = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetContactType(v string) *ListCallDetailRecordsRequest {
	s.ContactType = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetCriteria(v string) *ListCallDetailRecordsRequest {
	s.Criteria = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetInstanceId(v string) *ListCallDetailRecordsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetOrderBy(v string) *ListCallDetailRecordsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetPageNumber(v int32) *ListCallDetailRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetPageSize(v int32) *ListCallDetailRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetPhoneNumber(v string) *ListCallDetailRecordsRequest {
	s.PhoneNumber = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetStartTime(v int64) *ListCallDetailRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetStopTime(v int64) *ListCallDetailRecordsRequest {
	s.StopTime = &v
	return s
}

func (s *ListCallDetailRecordsRequest) SetWithRecording(v bool) *ListCallDetailRecordsRequest {
	s.WithRecording = &v
	return s
}

type ListCallDetailRecordsResponseBody struct {
	CallDetailRecords *ListCallDetailRecordsResponseBodyCallDetailRecords `json:"CallDetailRecords,omitempty" xml:"CallDetailRecords,omitempty" type:"Struct"`
	Code              *string                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode    *int32                                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message           *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success           *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCallDetailRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBody) SetCallDetailRecords(v *ListCallDetailRecordsResponseBodyCallDetailRecords) *ListCallDetailRecordsResponseBody {
	s.CallDetailRecords = v
	return s
}

func (s *ListCallDetailRecordsResponseBody) SetCode(v string) *ListCallDetailRecordsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCallDetailRecordsResponseBody) SetHttpStatusCode(v int32) *ListCallDetailRecordsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCallDetailRecordsResponseBody) SetMessage(v string) *ListCallDetailRecordsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCallDetailRecordsResponseBody) SetRequestId(v string) *ListCallDetailRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCallDetailRecordsResponseBody) SetSuccess(v bool) *ListCallDetailRecordsResponseBody {
	s.Success = &v
	return s
}

type ListCallDetailRecordsResponseBodyCallDetailRecords struct {
	List       *ListCallDetailRecordsResponseBodyCallDetailRecordsList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecords) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecords) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecords) SetList(v *ListCallDetailRecordsResponseBodyCallDetailRecordsList) *ListCallDetailRecordsResponseBodyCallDetailRecords {
	s.List = v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecords) SetPageNumber(v int32) *ListCallDetailRecordsResponseBodyCallDetailRecords {
	s.PageNumber = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecords) SetPageSize(v int32) *ListCallDetailRecordsResponseBodyCallDetailRecords {
	s.PageSize = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecords) SetTotalCount(v int32) *ListCallDetailRecordsResponseBodyCallDetailRecords {
	s.TotalCount = &v
	return s
}

type ListCallDetailRecordsResponseBodyCallDetailRecordsList struct {
	CallDetailRecord []*ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord `json:"CallDetailRecord,omitempty" xml:"CallDetailRecord,omitempty" type:"Repeated"`
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsList) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsList) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsList) SetCallDetailRecord(v []*ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) *ListCallDetailRecordsResponseBodyCallDetailRecordsList {
	s.CallDetailRecord = v
	return s
}

type ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord struct {
	AgentNames         *string                                                                           `json:"AgentNames,omitempty" xml:"AgentNames,omitempty"`
	Agents             *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents     `json:"Agents,omitempty" xml:"Agents,omitempty" type:"Struct"`
	CalledNumber       *string                                                                           `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber      *string                                                                           `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	ContactDisposition *string                                                                           `json:"ContactDisposition,omitempty" xml:"ContactDisposition,omitempty"`
	ContactId          *string                                                                           `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactType        *string                                                                           `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	Duration           *int32                                                                            `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Feedback           *string                                                                           `json:"Feedback,omitempty" xml:"Feedback,omitempty"`
	InstanceId         *string                                                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Recordings         *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings `json:"Recordings,omitempty" xml:"Recordings,omitempty" type:"Struct"`
	Satisfaction       *int32                                                                            `json:"Satisfaction,omitempty" xml:"Satisfaction,omitempty"`
	SatisfactionDesc   *string                                                                           `json:"SatisfactionDesc,omitempty" xml:"SatisfactionDesc,omitempty"`
	SkillGroupIdList   *string                                                                           `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty"`
	SkillGroupNames    *string                                                                           `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
	StartTime          *int64                                                                            `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetAgentNames(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.AgentNames = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetAgents(v *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.Agents = v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetCalledNumber(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.CalledNumber = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetCallingNumber(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.CallingNumber = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetContactDisposition(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.ContactDisposition = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetContactId(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.ContactId = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetContactType(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.ContactType = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetDuration(v int32) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.Duration = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetFeedback(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.Feedback = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetInstanceId(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.InstanceId = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetRecordings(v *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.Recordings = v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetSatisfaction(v int32) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.Satisfaction = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetSatisfactionDesc(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.SatisfactionDesc = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetSkillGroupIdList(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.SkillGroupIdList = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetSkillGroupNames(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.SkillGroupNames = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetStartTime(v int64) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.StartTime = &v
	return s
}

type ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents struct {
	CallDetailAgent []*ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent `json:"CallDetailAgent,omitempty" xml:"CallDetailAgent,omitempty" type:"Repeated"`
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents) SetCallDetailAgent(v []*ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents {
	s.CallDetailAgent = v
	return s
}

type ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent struct {
	AgentId      *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	Feedback     *string `json:"Feedback,omitempty" xml:"Feedback,omitempty"`
	Satisfaction *string `json:"Satisfaction,omitempty" xml:"Satisfaction,omitempty"`
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetAgentId(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.AgentId = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetFeedback(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.Feedback = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetSatisfaction(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.Satisfaction = &v
	return s
}

type ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings struct {
	Recording []*ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording `json:"Recording,omitempty" xml:"Recording,omitempty" type:"Repeated"`
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings) SetRecording(v []*ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings {
	s.Recording = v
	return s
}

type ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording struct {
	AgentId            *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName          *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	ContactId          *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	Duration           *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileDescription    *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	FileName           *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	QualityCheckTaskId *string `json:"QualityCheckTaskId,omitempty" xml:"QualityCheckTaskId,omitempty"`
	QualityCheckTid    *string `json:"QualityCheckTid,omitempty" xml:"QualityCheckTid,omitempty"`
	StartTime          *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetAgentId(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.AgentId = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetAgentName(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.AgentName = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetContactId(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.ContactId = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetDuration(v int32) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.Duration = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetFileDescription(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.FileDescription = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetFileName(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.FileName = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetQualityCheckTaskId(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.QualityCheckTaskId = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetQualityCheckTid(v string) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.QualityCheckTid = &v
	return s
}

func (s *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetStartTime(v int64) *ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.StartTime = &v
	return s
}

type ListCallDetailRecordsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListCallDetailRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCallDetailRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCallDetailRecordsResponse) GoString() string {
	return s.String()
}

func (s *ListCallDetailRecordsResponse) SetHeaders(v map[string]*string) *ListCallDetailRecordsResponse {
	s.Headers = v
	return s
}

func (s *ListCallDetailRecordsResponse) SetStatusCode(v int32) *ListCallDetailRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCallDetailRecordsResponse) SetBody(v *ListCallDetailRecordsResponseBody) *ListCallDetailRecordsResponse {
	s.Body = v
	return s
}

type ListCallEventDetailByContactIdRequest struct {
	ContactId  *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListCallEventDetailByContactIdRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCallEventDetailByContactIdRequest) GoString() string {
	return s.String()
}

func (s *ListCallEventDetailByContactIdRequest) SetContactId(v string) *ListCallEventDetailByContactIdRequest {
	s.ContactId = &v
	return s
}

func (s *ListCallEventDetailByContactIdRequest) SetInstanceId(v string) *ListCallEventDetailByContactIdRequest {
	s.InstanceId = &v
	return s
}

type ListCallEventDetailByContactIdResponseBody struct {
	Code           *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *ListCallEventDetailByContactIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCallEventDetailByContactIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCallEventDetailByContactIdResponseBody) GoString() string {
	return s.String()
}

func (s *ListCallEventDetailByContactIdResponseBody) SetCode(v string) *ListCallEventDetailByContactIdResponseBody {
	s.Code = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBody) SetData(v *ListCallEventDetailByContactIdResponseBodyData) *ListCallEventDetailByContactIdResponseBody {
	s.Data = v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBody) SetHttpStatusCode(v int32) *ListCallEventDetailByContactIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBody) SetMessage(v string) *ListCallEventDetailByContactIdResponseBody {
	s.Message = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBody) SetRequestId(v string) *ListCallEventDetailByContactIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBody) SetSuccess(v bool) *ListCallEventDetailByContactIdResponseBody {
	s.Success = &v
	return s
}

type ListCallEventDetailByContactIdResponseBodyData struct {
	CallType      *string                                               `json:"CallType,omitempty" xml:"CallType,omitempty"`
	Callee        *string                                               `json:"Callee,omitempty" xml:"Callee,omitempty"`
	Caller        *string                                               `json:"Caller,omitempty" xml:"Caller,omitempty"`
	Events        *ListCallEventDetailByContactIdResponseBodyDataEvents `json:"Events,omitempty" xml:"Events,omitempty" type:"Struct"`
	PrivacyNumber *string                                               `json:"PrivacyNumber,omitempty" xml:"PrivacyNumber,omitempty"`
	ReleaseAgent  *string                                               `json:"ReleaseAgent,omitempty" xml:"ReleaseAgent,omitempty"`
	ReleaseReason *string                                               `json:"ReleaseReason,omitempty" xml:"ReleaseReason,omitempty"`
	StartTime     *string                                               `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListCallEventDetailByContactIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCallEventDetailByContactIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCallEventDetailByContactIdResponseBodyData) SetCallType(v string) *ListCallEventDetailByContactIdResponseBodyData {
	s.CallType = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyData) SetCallee(v string) *ListCallEventDetailByContactIdResponseBodyData {
	s.Callee = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyData) SetCaller(v string) *ListCallEventDetailByContactIdResponseBodyData {
	s.Caller = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyData) SetEvents(v *ListCallEventDetailByContactIdResponseBodyDataEvents) *ListCallEventDetailByContactIdResponseBodyData {
	s.Events = v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyData) SetPrivacyNumber(v string) *ListCallEventDetailByContactIdResponseBodyData {
	s.PrivacyNumber = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyData) SetReleaseAgent(v string) *ListCallEventDetailByContactIdResponseBodyData {
	s.ReleaseAgent = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyData) SetReleaseReason(v string) *ListCallEventDetailByContactIdResponseBodyData {
	s.ReleaseReason = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyData) SetStartTime(v string) *ListCallEventDetailByContactIdResponseBodyData {
	s.StartTime = &v
	return s
}

type ListCallEventDetailByContactIdResponseBodyDataEvents struct {
	CallEventDetail []*ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail `json:"CallEventDetail,omitempty" xml:"CallEventDetail,omitempty" type:"Repeated"`
}

func (s ListCallEventDetailByContactIdResponseBodyDataEvents) String() string {
	return tea.Prettify(s)
}

func (s ListCallEventDetailByContactIdResponseBodyDataEvents) GoString() string {
	return s.String()
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEvents) SetCallEventDetail(v []*ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail) *ListCallEventDetailByContactIdResponseBodyDataEvents {
	s.CallEventDetail = v
	return s
}

type ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail struct {
	AgentName  *string                                                                        `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	CallMode   *string                                                                        `json:"CallMode,omitempty" xml:"CallMode,omitempty"`
	DetailData *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData `json:"DetailData,omitempty" xml:"DetailData,omitempty" type:"Struct"`
	Duration   *int32                                                                         `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Event      *string                                                                        `json:"Event,omitempty" xml:"Event,omitempty"`
	Status     *string                                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	TimeStamp  *string                                                                        `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail) String() string {
	return tea.Prettify(s)
}

func (s ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail) GoString() string {
	return s.String()
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail) SetAgentName(v string) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail {
	s.AgentName = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail) SetCallMode(v string) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail {
	s.CallMode = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail) SetDetailData(v *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail {
	s.DetailData = v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail) SetDuration(v int32) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail {
	s.Duration = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail) SetEvent(v string) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail {
	s.Event = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail) SetStatus(v string) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail {
	s.Status = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail) SetTimeStamp(v string) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail {
	s.TimeStamp = &v
	return s
}

type ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData struct {
	EventType              *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	HangUper               *string `json:"HangUper,omitempty" xml:"HangUper,omitempty"`
	Helper                 *string `json:"Helper,omitempty" xml:"Helper,omitempty"`
	SatisfactionalResearch *string `json:"SatisfactionalResearch,omitempty" xml:"SatisfactionalResearch,omitempty"`
	SkillGroup             *string `json:"SkillGroup,omitempty" xml:"SkillGroup,omitempty"`
}

func (s ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData) String() string {
	return tea.Prettify(s)
}

func (s ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData) GoString() string {
	return s.String()
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData) SetEventType(v string) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData {
	s.EventType = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData) SetHangUper(v string) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData {
	s.HangUper = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData) SetHelper(v string) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData {
	s.Helper = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData) SetSatisfactionalResearch(v string) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData {
	s.SatisfactionalResearch = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData) SetSkillGroup(v string) *ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData {
	s.SkillGroup = &v
	return s
}

type ListCallEventDetailByContactIdResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListCallEventDetailByContactIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCallEventDetailByContactIdResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCallEventDetailByContactIdResponse) GoString() string {
	return s.String()
}

func (s *ListCallEventDetailByContactIdResponse) SetHeaders(v map[string]*string) *ListCallEventDetailByContactIdResponse {
	s.Headers = v
	return s
}

func (s *ListCallEventDetailByContactIdResponse) SetStatusCode(v int32) *ListCallEventDetailByContactIdResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCallEventDetailByContactIdResponse) SetBody(v *ListCallEventDetailByContactIdResponseBody) *ListCallEventDetailByContactIdResponse {
	s.Body = v
	return s
}

type ListCallMeasureSummaryReportsRequest struct {
	IntervalType *string `json:"IntervalType,omitempty" xml:"IntervalType,omitempty"`
}

func (s ListCallMeasureSummaryReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCallMeasureSummaryReportsRequest) GoString() string {
	return s.String()
}

func (s *ListCallMeasureSummaryReportsRequest) SetIntervalType(v string) *ListCallMeasureSummaryReportsRequest {
	s.IntervalType = &v
	return s
}

type ListCallMeasureSummaryReportsResponseBody struct {
	CallMeasureSummaryReportList *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList `json:"CallMeasureSummaryReportList,omitempty" xml:"CallMeasureSummaryReportList,omitempty" type:"Struct"`
	Code                         *string                                                                `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode               *int32                                                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                      *string                                                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId                    *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                      *bool                                                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCallMeasureSummaryReportsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCallMeasureSummaryReportsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCallMeasureSummaryReportsResponseBody) SetCallMeasureSummaryReportList(v *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList) *ListCallMeasureSummaryReportsResponseBody {
	s.CallMeasureSummaryReportList = v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBody) SetCode(v string) *ListCallMeasureSummaryReportsResponseBody {
	s.Code = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBody) SetHttpStatusCode(v int32) *ListCallMeasureSummaryReportsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBody) SetMessage(v string) *ListCallMeasureSummaryReportsResponseBody {
	s.Message = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBody) SetRequestId(v string) *ListCallMeasureSummaryReportsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBody) SetSuccess(v bool) *ListCallMeasureSummaryReportsResponseBody {
	s.Success = &v
	return s
}

type ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList struct {
	CallMeasureSummaryReport []*ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport `json:"CallMeasureSummaryReport,omitempty" xml:"CallMeasureSummaryReport,omitempty" type:"Repeated"`
}

func (s ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList) String() string {
	return tea.Prettify(s)
}

func (s ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList) GoString() string {
	return s.String()
}

func (s *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList) SetCallMeasureSummaryReport(v []*ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport) *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList {
	s.CallMeasureSummaryReport = v
	return s
}

type ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport struct {
	Day                      *string `json:"Day,omitempty" xml:"Day,omitempty"`
	InboundCount             *int64  `json:"InboundCount,omitempty" xml:"InboundCount,omitempty"`
	InboundDurationByMinute  *int64  `json:"InboundDurationByMinute,omitempty" xml:"InboundDurationByMinute,omitempty"`
	Month                    *string `json:"Month,omitempty" xml:"Month,omitempty"`
	OutboundCount            *int64  `json:"OutboundCount,omitempty" xml:"OutboundCount,omitempty"`
	OutboundDurationByMinute *int64  `json:"OutboundDurationByMinute,omitempty" xml:"OutboundDurationByMinute,omitempty"`
	Year                     *string `json:"Year,omitempty" xml:"Year,omitempty"`
}

func (s ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport) GoString() string {
	return s.String()
}

func (s *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport) SetDay(v string) *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport {
	s.Day = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport) SetInboundCount(v int64) *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport {
	s.InboundCount = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport) SetInboundDurationByMinute(v int64) *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport {
	s.InboundDurationByMinute = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport) SetMonth(v string) *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport {
	s.Month = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport) SetOutboundCount(v int64) *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport {
	s.OutboundCount = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport) SetOutboundDurationByMinute(v int64) *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport {
	s.OutboundDurationByMinute = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport) SetYear(v string) *ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport {
	s.Year = &v
	return s
}

type ListCallMeasureSummaryReportsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListCallMeasureSummaryReportsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCallMeasureSummaryReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCallMeasureSummaryReportsResponse) GoString() string {
	return s.String()
}

func (s *ListCallMeasureSummaryReportsResponse) SetHeaders(v map[string]*string) *ListCallMeasureSummaryReportsResponse {
	s.Headers = v
	return s
}

func (s *ListCallMeasureSummaryReportsResponse) SetStatusCode(v int32) *ListCallMeasureSummaryReportsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCallMeasureSummaryReportsResponse) SetBody(v *ListCallMeasureSummaryReportsResponseBody) *ListCallMeasureSummaryReportsResponse {
	s.Body = v
	return s
}

type ListConfigRequest struct {
	ConfigItem []*string `json:"ConfigItem,omitempty" xml:"ConfigItem,omitempty" type:"Repeated"`
	InstanceId *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConfigRequest) GoString() string {
	return s.String()
}

func (s *ListConfigRequest) SetConfigItem(v []*string) *ListConfigRequest {
	s.ConfigItem = v
	return s
}

func (s *ListConfigRequest) SetInstanceId(v string) *ListConfigRequest {
	s.InstanceId = &v
	return s
}

type ListConfigResponseBody struct {
	Code           *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	ConfigItems    *ListConfigResponseBodyConfigItems `json:"ConfigItems,omitempty" xml:"ConfigItems,omitempty" type:"Struct"`
	HttpStatusCode *int32                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ListConfigResponseBody) SetCode(v string) *ListConfigResponseBody {
	s.Code = &v
	return s
}

func (s *ListConfigResponseBody) SetConfigItems(v *ListConfigResponseBodyConfigItems) *ListConfigResponseBody {
	s.ConfigItems = v
	return s
}

func (s *ListConfigResponseBody) SetHttpStatusCode(v int32) *ListConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListConfigResponseBody) SetMessage(v string) *ListConfigResponseBody {
	s.Message = &v
	return s
}

func (s *ListConfigResponseBody) SetRequestId(v string) *ListConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListConfigResponseBody) SetSuccess(v bool) *ListConfigResponseBody {
	s.Success = &v
	return s
}

type ListConfigResponseBodyConfigItems struct {
	ConfigItem []*ListConfigResponseBodyConfigItemsConfigItem `json:"ConfigItem,omitempty" xml:"ConfigItem,omitempty" type:"Repeated"`
}

func (s ListConfigResponseBodyConfigItems) String() string {
	return tea.Prettify(s)
}

func (s ListConfigResponseBodyConfigItems) GoString() string {
	return s.String()
}

func (s *ListConfigResponseBodyConfigItems) SetConfigItem(v []*ListConfigResponseBodyConfigItemsConfigItem) *ListConfigResponseBodyConfigItems {
	s.ConfigItem = v
	return s
}

type ListConfigResponseBodyConfigItemsConfigItem struct {
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListConfigResponseBodyConfigItemsConfigItem) String() string {
	return tea.Prettify(s)
}

func (s ListConfigResponseBodyConfigItemsConfigItem) GoString() string {
	return s.String()
}

func (s *ListConfigResponseBodyConfigItemsConfigItem) SetName(v string) *ListConfigResponseBodyConfigItemsConfigItem {
	s.Name = &v
	return s
}

func (s *ListConfigResponseBodyConfigItemsConfigItem) SetValue(v string) *ListConfigResponseBodyConfigItemsConfigItem {
	s.Value = &v
	return s
}

type ListConfigResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConfigResponse) GoString() string {
	return s.String()
}

func (s *ListConfigResponse) SetHeaders(v map[string]*string) *ListConfigResponse {
	s.Headers = v
	return s
}

func (s *ListConfigResponse) SetStatusCode(v int32) *ListConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ListConfigResponse) SetBody(v *ListConfigResponseBody) *ListConfigResponse {
	s.Body = v
	return s
}

type ListContactFlowsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListContactFlowsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsRequest) GoString() string {
	return s.String()
}

func (s *ListContactFlowsRequest) SetInstanceId(v string) *ListContactFlowsRequest {
	s.InstanceId = &v
	return s
}

type ListContactFlowsResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ContactFlows   *ListContactFlowsResponseBodyContactFlows `json:"ContactFlows,omitempty" xml:"ContactFlows,omitempty" type:"Struct"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListContactFlowsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponseBody) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponseBody) SetCode(v string) *ListContactFlowsResponseBody {
	s.Code = &v
	return s
}

func (s *ListContactFlowsResponseBody) SetContactFlows(v *ListContactFlowsResponseBodyContactFlows) *ListContactFlowsResponseBody {
	s.ContactFlows = v
	return s
}

func (s *ListContactFlowsResponseBody) SetHttpStatusCode(v int32) *ListContactFlowsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListContactFlowsResponseBody) SetMessage(v string) *ListContactFlowsResponseBody {
	s.Message = &v
	return s
}

func (s *ListContactFlowsResponseBody) SetRequestId(v string) *ListContactFlowsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListContactFlowsResponseBody) SetSuccess(v bool) *ListContactFlowsResponseBody {
	s.Success = &v
	return s
}

type ListContactFlowsResponseBodyContactFlows struct {
	ContactFlow []*ListContactFlowsResponseBodyContactFlowsContactFlow `json:"ContactFlow,omitempty" xml:"ContactFlow,omitempty" type:"Repeated"`
}

func (s ListContactFlowsResponseBodyContactFlows) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponseBodyContactFlows) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponseBodyContactFlows) SetContactFlow(v []*ListContactFlowsResponseBodyContactFlowsContactFlow) *ListContactFlowsResponseBodyContactFlows {
	s.ContactFlow = v
	return s
}

type ListContactFlowsResponseBodyContactFlowsContactFlow struct {
	AppliedVersion         *string                                                          `json:"AppliedVersion,omitempty" xml:"AppliedVersion,omitempty"`
	ContactFlowDescription *string                                                          `json:"ContactFlowDescription,omitempty" xml:"ContactFlowDescription,omitempty"`
	ContactFlowId          *string                                                          `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowName        *string                                                          `json:"ContactFlowName,omitempty" xml:"ContactFlowName,omitempty"`
	InstanceId             *string                                                          `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumbers           *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty" type:"Struct"`
	Type                   *string                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
	Versions               *ListContactFlowsResponseBodyContactFlowsContactFlowVersions     `json:"Versions,omitempty" xml:"Versions,omitempty" type:"Struct"`
}

func (s ListContactFlowsResponseBodyContactFlowsContactFlow) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponseBodyContactFlowsContactFlow) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlow) SetAppliedVersion(v string) *ListContactFlowsResponseBodyContactFlowsContactFlow {
	s.AppliedVersion = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlow) SetContactFlowDescription(v string) *ListContactFlowsResponseBodyContactFlowsContactFlow {
	s.ContactFlowDescription = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlow) SetContactFlowId(v string) *ListContactFlowsResponseBodyContactFlowsContactFlow {
	s.ContactFlowId = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlow) SetContactFlowName(v string) *ListContactFlowsResponseBodyContactFlowsContactFlow {
	s.ContactFlowName = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlow) SetInstanceId(v string) *ListContactFlowsResponseBodyContactFlowsContactFlow {
	s.InstanceId = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlow) SetPhoneNumbers(v *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers) *ListContactFlowsResponseBodyContactFlowsContactFlow {
	s.PhoneNumbers = v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlow) SetType(v string) *ListContactFlowsResponseBodyContactFlowsContactFlow {
	s.Type = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlow) SetVersions(v *ListContactFlowsResponseBodyContactFlowsContactFlowVersions) *ListContactFlowsResponseBodyContactFlowsContactFlow {
	s.Versions = v
	return s
}

type ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers struct {
	PhoneNumber []*ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers) SetPhoneNumber(v []*ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers {
	s.PhoneNumber = v
	return s
}

type ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber struct {
	AllowOutbound          *bool   `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	RemainingTime          *int32  `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	TestOnly               *bool   `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32  `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) SetAllowOutbound(v bool) *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) SetInstanceId(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) SetNumber(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) SetRemainingTime(v int32) *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) SetTestOnly(v bool) *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) SetTrunks(v int32) *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber) SetUsage(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber {
	s.Usage = &v
	return s
}

type ListContactFlowsResponseBodyContactFlowsContactFlowVersions struct {
	ContactFlowVersion []*ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion `json:"ContactFlowVersion,omitempty" xml:"ContactFlowVersion,omitempty" type:"Repeated"`
}

func (s ListContactFlowsResponseBodyContactFlowsContactFlowVersions) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponseBodyContactFlowsContactFlowVersions) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowVersions) SetContactFlowVersion(v []*ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion) *ListContactFlowsResponseBodyContactFlowsContactFlowVersions {
	s.ContactFlowVersion = v
	return s
}

type ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion struct {
	ContactFlowVersionDescription *string `json:"ContactFlowVersionDescription,omitempty" xml:"ContactFlowVersionDescription,omitempty"`
	ContactFlowVersionId          *string `json:"ContactFlowVersionId,omitempty" xml:"ContactFlowVersionId,omitempty"`
	LastModified                  *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	LastModifiedBy                *string `json:"LastModifiedBy,omitempty" xml:"LastModifiedBy,omitempty"`
	LockedBy                      *string `json:"LockedBy,omitempty" xml:"LockedBy,omitempty"`
	Status                        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Version                       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion) SetContactFlowVersionDescription(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion {
	s.ContactFlowVersionDescription = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion) SetContactFlowVersionId(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion {
	s.ContactFlowVersionId = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion) SetLastModified(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion {
	s.LastModified = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion) SetLastModifiedBy(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion {
	s.LastModifiedBy = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion) SetLockedBy(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion {
	s.LockedBy = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion) SetStatus(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion {
	s.Status = &v
	return s
}

func (s *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion) SetVersion(v string) *ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion {
	s.Version = &v
	return s
}

type ListContactFlowsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListContactFlowsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListContactFlowsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListContactFlowsResponse) GoString() string {
	return s.String()
}

func (s *ListContactFlowsResponse) SetHeaders(v map[string]*string) *ListContactFlowsResponse {
	s.Headers = v
	return s
}

func (s *ListContactFlowsResponse) SetStatusCode(v int32) *ListContactFlowsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListContactFlowsResponse) SetBody(v *ListContactFlowsResponseBody) *ListContactFlowsResponse {
	s.Body = v
	return s
}

type ListInstancesOfUserResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Instances      *ListInstancesOfUserResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListInstancesOfUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBody) SetCode(v string) *ListInstancesOfUserResponseBody {
	s.Code = &v
	return s
}

func (s *ListInstancesOfUserResponseBody) SetHttpStatusCode(v int32) *ListInstancesOfUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListInstancesOfUserResponseBody) SetInstances(v *ListInstancesOfUserResponseBodyInstances) *ListInstancesOfUserResponseBody {
	s.Instances = v
	return s
}

func (s *ListInstancesOfUserResponseBody) SetMessage(v string) *ListInstancesOfUserResponseBody {
	s.Message = &v
	return s
}

func (s *ListInstancesOfUserResponseBody) SetRequestId(v string) *ListInstancesOfUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInstancesOfUserResponseBody) SetSuccess(v bool) *ListInstancesOfUserResponseBody {
	s.Success = &v
	return s
}

type ListInstancesOfUserResponseBodyInstances struct {
	CallCenterInstance []*ListInstancesOfUserResponseBodyInstancesCallCenterInstance `json:"CallCenterInstance,omitempty" xml:"CallCenterInstance,omitempty" type:"Repeated"`
}

func (s ListInstancesOfUserResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyInstances) SetCallCenterInstance(v []*ListInstancesOfUserResponseBodyInstancesCallCenterInstance) *ListInstancesOfUserResponseBodyInstances {
	s.CallCenterInstance = v
	return s
}

type ListInstancesOfUserResponseBodyInstancesCallCenterInstance struct {
	Admin               *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin        `json:"Admin,omitempty" xml:"Admin,omitempty" type:"Struct"`
	ConsoleUrl          *string                                                                 `json:"ConsoleUrl,omitempty" xml:"ConsoleUrl,omitempty"`
	CreatedTime         *int64                                                                  `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DirectoryId         *string                                                                 `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	DomainName          *string                                                                 `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	InstanceDescription *string                                                                 `json:"InstanceDescription,omitempty" xml:"InstanceDescription,omitempty"`
	InstanceId          *string                                                                 `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName        *string                                                                 `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	MaxOnlineAgents     *int32                                                                  `json:"MaxOnlineAgents,omitempty" xml:"MaxOnlineAgents,omitempty"`
	Owner               *string                                                                 `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PhoneNumbers        *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty" type:"Struct"`
	Status              *string                                                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	StorageBucket       *string                                                                 `json:"StorageBucket,omitempty" xml:"StorageBucket,omitempty"`
	StorageMaxDays      *int32                                                                  `json:"StorageMaxDays,omitempty" xml:"StorageMaxDays,omitempty"`
	StorageMaxSize      *int32                                                                  `json:"StorageMaxSize,omitempty" xml:"StorageMaxSize,omitempty"`
	TenantId            *string                                                                 `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstance) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstance) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetAdmin(v *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.Admin = v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetConsoleUrl(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.ConsoleUrl = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetCreatedTime(v int64) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.CreatedTime = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetDirectoryId(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.DirectoryId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetDomainName(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.DomainName = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetInstanceDescription(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.InstanceDescription = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetInstanceId(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetInstanceName(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.InstanceName = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetMaxOnlineAgents(v int32) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.MaxOnlineAgents = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetOwner(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.Owner = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetPhoneNumbers(v *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.PhoneNumbers = v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetStatus(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.Status = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetStorageBucket(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.StorageBucket = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetStorageMaxDays(v int32) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.StorageMaxDays = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetStorageMaxSize(v int32) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.StorageMaxSize = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstance) SetTenantId(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstance {
	s.TenantId = &v
	return s
}

type ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin struct {
	User []*ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin) SetUser(v []*ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser) *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin {
	s.User = v
	return s
}

type ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser struct {
	Detail     *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	InstanceId *string                                                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RamId      *string                                                                    `json:"RamId,omitempty" xml:"RamId,omitempty"`
	UserId     *string                                                                    `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser) SetDetail(v *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail) *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser {
	s.Detail = v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser) SetInstanceId(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser) SetRamId(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser {
	s.RamId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser) SetUserId(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser {
	s.UserId = &v
	return s
}

type ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail struct {
	Department  *string `json:"Department,omitempty" xml:"Department,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	LoginName   *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Phone       *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail) SetDepartment(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail {
	s.Department = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail) SetDisplayName(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail {
	s.DisplayName = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail) SetEmail(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail {
	s.Email = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail) SetLoginName(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail {
	s.LoginName = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail) SetPhone(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail {
	s.Phone = &v
	return s
}

type ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers struct {
	PhoneNumber []*ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers) SetPhoneNumber(v []*ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers {
	s.PhoneNumber = v
	return s
}

type ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber struct {
	AllowOutbound          *bool   `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	RemainingTime          *int32  `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	TestOnly               *bool   `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32  `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) SetAllowOutbound(v bool) *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) SetInstanceId(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) SetNumber(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) SetRemainingTime(v int32) *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) SetTestOnly(v bool) *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) SetTrunks(v int32) *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber) SetUsage(v string) *ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber {
	s.Usage = &v
	return s
}

type ListInstancesOfUserResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListInstancesOfUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListInstancesOfUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInstancesOfUserResponse) GoString() string {
	return s.String()
}

func (s *ListInstancesOfUserResponse) SetHeaders(v map[string]*string) *ListInstancesOfUserResponse {
	s.Headers = v
	return s
}

func (s *ListInstancesOfUserResponse) SetStatusCode(v int32) *ListInstancesOfUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListInstancesOfUserResponse) SetBody(v *ListInstancesOfUserResponseBody) *ListInstancesOfUserResponse {
	s.Body = v
	return s
}

type ListIvrTrackingDetailRequest struct {
	CalledNumber  *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	ContactId     *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StopTime      *int64  `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
}

func (s ListIvrTrackingDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailRequest) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailRequest) SetCalledNumber(v string) *ListIvrTrackingDetailRequest {
	s.CalledNumber = &v
	return s
}

func (s *ListIvrTrackingDetailRequest) SetCallingNumber(v string) *ListIvrTrackingDetailRequest {
	s.CallingNumber = &v
	return s
}

func (s *ListIvrTrackingDetailRequest) SetContactId(v string) *ListIvrTrackingDetailRequest {
	s.ContactId = &v
	return s
}

func (s *ListIvrTrackingDetailRequest) SetInstanceId(v string) *ListIvrTrackingDetailRequest {
	s.InstanceId = &v
	return s
}

func (s *ListIvrTrackingDetailRequest) SetPageNumber(v int32) *ListIvrTrackingDetailRequest {
	s.PageNumber = &v
	return s
}

func (s *ListIvrTrackingDetailRequest) SetPageSize(v int32) *ListIvrTrackingDetailRequest {
	s.PageSize = &v
	return s
}

func (s *ListIvrTrackingDetailRequest) SetStartTime(v int64) *ListIvrTrackingDetailRequest {
	s.StartTime = &v
	return s
}

func (s *ListIvrTrackingDetailRequest) SetStopTime(v int64) *ListIvrTrackingDetailRequest {
	s.StopTime = &v
	return s
}

type ListIvrTrackingDetailResponseBody struct {
	Code               *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode     *int32                                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	IvrTrackingDetails *ListIvrTrackingDetailResponseBodyIvrTrackingDetails `json:"IvrTrackingDetails,omitempty" xml:"IvrTrackingDetails,omitempty" type:"Struct"`
	Message            *string                                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId          *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success            *bool                                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListIvrTrackingDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailResponseBody) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailResponseBody) SetCode(v string) *ListIvrTrackingDetailResponseBody {
	s.Code = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBody) SetHttpStatusCode(v int32) *ListIvrTrackingDetailResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBody) SetIvrTrackingDetails(v *ListIvrTrackingDetailResponseBodyIvrTrackingDetails) *ListIvrTrackingDetailResponseBody {
	s.IvrTrackingDetails = v
	return s
}

func (s *ListIvrTrackingDetailResponseBody) SetMessage(v string) *ListIvrTrackingDetailResponseBody {
	s.Message = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBody) SetRequestId(v string) *ListIvrTrackingDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBody) SetSuccess(v bool) *ListIvrTrackingDetailResponseBody {
	s.Success = &v
	return s
}

type ListIvrTrackingDetailResponseBodyIvrTrackingDetails struct {
	List       *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListIvrTrackingDetailResponseBodyIvrTrackingDetails) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailResponseBodyIvrTrackingDetails) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetails) SetList(v *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList) *ListIvrTrackingDetailResponseBodyIvrTrackingDetails {
	s.List = v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetails) SetPageNumber(v int32) *ListIvrTrackingDetailResponseBodyIvrTrackingDetails {
	s.PageNumber = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetails) SetPageSize(v int32) *ListIvrTrackingDetailResponseBodyIvrTrackingDetails {
	s.PageSize = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetails) SetTotalCount(v int32) *ListIvrTrackingDetailResponseBodyIvrTrackingDetails {
	s.TotalCount = &v
	return s
}

type ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList struct {
	IvrTrackingDetail []*ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail `json:"IvrTrackingDetail,omitempty" xml:"IvrTrackingDetail,omitempty" type:"Repeated"`
}

func (s ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList) SetIvrTrackingDetail(v []*ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList {
	s.IvrTrackingDetail = v
	return s
}

type ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail struct {
	CalledNumber  *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	ContactId     *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DeviceID      *string `json:"DeviceID,omitempty" xml:"DeviceID,omitempty"`
	FlowName      *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	InputData     *string `json:"InputData,omitempty" xml:"InputData,omitempty"`
	NodeName      *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	NodeType      *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	OutputData    *string `json:"OutputData,omitempty" xml:"OutputData,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StopTime      *int64  `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	TenantId      *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
}

func (s ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetCalledNumber(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.CalledNumber = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetCallingNumber(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.CallingNumber = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetContactId(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.ContactId = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetDescription(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.Description = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetDeviceID(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.DeviceID = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetFlowName(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.FlowName = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetInputData(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.InputData = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetNodeName(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.NodeName = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetNodeType(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.NodeType = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetOutputData(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.OutputData = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetStartTime(v int64) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.StartTime = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetStatus(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.Status = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetStopTime(v int64) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.StopTime = &v
	return s
}

func (s *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail) SetTenantId(v string) *ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail {
	s.TenantId = &v
	return s
}

type ListIvrTrackingDetailResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListIvrTrackingDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListIvrTrackingDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s ListIvrTrackingDetailResponse) GoString() string {
	return s.String()
}

func (s *ListIvrTrackingDetailResponse) SetHeaders(v map[string]*string) *ListIvrTrackingDetailResponse {
	s.Headers = v
	return s
}

func (s *ListIvrTrackingDetailResponse) SetStatusCode(v int32) *ListIvrTrackingDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *ListIvrTrackingDetailResponse) SetBody(v *ListIvrTrackingDetailResponseBody) *ListIvrTrackingDetailResponse {
	s.Body = v
	return s
}

type ListMediasRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NamePrefix *string `json:"NamePrefix,omitempty" xml:"NamePrefix,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListMediasRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediasRequest) GoString() string {
	return s.String()
}

func (s *ListMediasRequest) SetInstanceId(v string) *ListMediasRequest {
	s.InstanceId = &v
	return s
}

func (s *ListMediasRequest) SetNamePrefix(v string) *ListMediasRequest {
	s.NamePrefix = &v
	return s
}

func (s *ListMediasRequest) SetPageNumber(v int32) *ListMediasRequest {
	s.PageNumber = &v
	return s
}

func (s *ListMediasRequest) SetPageSize(v int32) *ListMediasRequest {
	s.PageSize = &v
	return s
}

type ListMediasResponseBody struct {
	Code           *string                       `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                        `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Medias         *ListMediasResponseBodyMedias `json:"Medias,omitempty" xml:"Medias,omitempty" type:"Struct"`
	Message        *string                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListMediasResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediasResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediasResponseBody) SetCode(v string) *ListMediasResponseBody {
	s.Code = &v
	return s
}

func (s *ListMediasResponseBody) SetHttpStatusCode(v int32) *ListMediasResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListMediasResponseBody) SetMedias(v *ListMediasResponseBodyMedias) *ListMediasResponseBody {
	s.Medias = v
	return s
}

func (s *ListMediasResponseBody) SetMessage(v string) *ListMediasResponseBody {
	s.Message = &v
	return s
}

func (s *ListMediasResponseBody) SetRequestId(v string) *ListMediasResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMediasResponseBody) SetSuccess(v bool) *ListMediasResponseBody {
	s.Success = &v
	return s
}

type ListMediasResponseBodyMedias struct {
	List       *ListMediasResponseBodyMediasList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMediasResponseBodyMedias) String() string {
	return tea.Prettify(s)
}

func (s ListMediasResponseBodyMedias) GoString() string {
	return s.String()
}

func (s *ListMediasResponseBodyMedias) SetList(v *ListMediasResponseBodyMediasList) *ListMediasResponseBodyMedias {
	s.List = v
	return s
}

func (s *ListMediasResponseBodyMedias) SetPageNumber(v int32) *ListMediasResponseBodyMedias {
	s.PageNumber = &v
	return s
}

func (s *ListMediasResponseBodyMedias) SetPageSize(v int32) *ListMediasResponseBodyMedias {
	s.PageSize = &v
	return s
}

func (s *ListMediasResponseBodyMedias) SetTotalCount(v int32) *ListMediasResponseBodyMedias {
	s.TotalCount = &v
	return s
}

type ListMediasResponseBodyMediasList struct {
	Media []*ListMediasResponseBodyMediasListMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Repeated"`
}

func (s ListMediasResponseBodyMediasList) String() string {
	return tea.Prettify(s)
}

func (s ListMediasResponseBodyMediasList) GoString() string {
	return s.String()
}

func (s *ListMediasResponseBodyMediasList) SetMedia(v []*ListMediasResponseBodyMediasListMedia) *ListMediasResponseBodyMediasList {
	s.Media = v
	return s
}

type ListMediasResponseBodyMediasListMedia struct {
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FilePath    *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	Instance    *string `json:"Instance,omitempty" xml:"Instance,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OssFileName *string `json:"OssFileName,omitempty" xml:"OssFileName,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMediasResponseBodyMediasListMedia) String() string {
	return tea.Prettify(s)
}

func (s ListMediasResponseBodyMediasListMedia) GoString() string {
	return s.String()
}

func (s *ListMediasResponseBodyMediasListMedia) SetContent(v string) *ListMediasResponseBodyMediasListMedia {
	s.Content = &v
	return s
}

func (s *ListMediasResponseBodyMediasListMedia) SetDescription(v string) *ListMediasResponseBodyMediasListMedia {
	s.Description = &v
	return s
}

func (s *ListMediasResponseBodyMediasListMedia) SetFileName(v string) *ListMediasResponseBodyMediasListMedia {
	s.FileName = &v
	return s
}

func (s *ListMediasResponseBodyMediasListMedia) SetFilePath(v string) *ListMediasResponseBodyMediasListMedia {
	s.FilePath = &v
	return s
}

func (s *ListMediasResponseBodyMediasListMedia) SetInstance(v string) *ListMediasResponseBodyMediasListMedia {
	s.Instance = &v
	return s
}

func (s *ListMediasResponseBodyMediasListMedia) SetName(v string) *ListMediasResponseBodyMediasListMedia {
	s.Name = &v
	return s
}

func (s *ListMediasResponseBodyMediasListMedia) SetOssFileName(v string) *ListMediasResponseBodyMediasListMedia {
	s.OssFileName = &v
	return s
}

func (s *ListMediasResponseBodyMediasListMedia) SetStatus(v string) *ListMediasResponseBodyMediasListMedia {
	s.Status = &v
	return s
}

func (s *ListMediasResponseBodyMediasListMedia) SetType(v string) *ListMediasResponseBodyMediasListMedia {
	s.Type = &v
	return s
}

type ListMediasResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMediasResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMediasResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediasResponse) GoString() string {
	return s.String()
}

func (s *ListMediasResponse) SetHeaders(v map[string]*string) *ListMediasResponse {
	s.Headers = v
	return s
}

func (s *ListMediasResponse) SetStatusCode(v int32) *ListMediasResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediasResponse) SetBody(v *ListMediasResponseBody) *ListMediasResponse {
	s.Body = v
	return s
}

type ListOutboundPhoneNumberOfUserRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListOutboundPhoneNumberOfUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundPhoneNumberOfUserRequest) GoString() string {
	return s.String()
}

func (s *ListOutboundPhoneNumberOfUserRequest) SetInstanceId(v string) *ListOutboundPhoneNumberOfUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserRequest) SetPageNumber(v int32) *ListOutboundPhoneNumberOfUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserRequest) SetPageSize(v int32) *ListOutboundPhoneNumberOfUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserRequest) SetUserId(v string) *ListOutboundPhoneNumberOfUserRequest {
	s.UserId = &v
	return s
}

type ListOutboundPhoneNumberOfUserResponseBody struct {
	Code                 *string                                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode       *int32                                                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message              *string                                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	NumberList           *ListOutboundPhoneNumberOfUserResponseBodyNumberList           `json:"NumberList,omitempty" xml:"NumberList,omitempty" type:"Struct"`
	OutboundPhoneNumbers *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers `json:"OutboundPhoneNumbers,omitempty" xml:"OutboundPhoneNumbers,omitempty" type:"Struct"`
	RequestId            *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success              *bool                                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListOutboundPhoneNumberOfUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundPhoneNumberOfUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListOutboundPhoneNumberOfUserResponseBody) SetCode(v string) *ListOutboundPhoneNumberOfUserResponseBody {
	s.Code = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBody) SetHttpStatusCode(v int32) *ListOutboundPhoneNumberOfUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBody) SetMessage(v string) *ListOutboundPhoneNumberOfUserResponseBody {
	s.Message = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBody) SetNumberList(v *ListOutboundPhoneNumberOfUserResponseBodyNumberList) *ListOutboundPhoneNumberOfUserResponseBody {
	s.NumberList = v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBody) SetOutboundPhoneNumbers(v *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers) *ListOutboundPhoneNumberOfUserResponseBody {
	s.OutboundPhoneNumbers = v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBody) SetRequestId(v string) *ListOutboundPhoneNumberOfUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBody) SetSuccess(v bool) *ListOutboundPhoneNumberOfUserResponseBody {
	s.Success = &v
	return s
}

type ListOutboundPhoneNumberOfUserResponseBodyNumberList struct {
	Number []*string `json:"Number,omitempty" xml:"Number,omitempty" type:"Repeated"`
}

func (s ListOutboundPhoneNumberOfUserResponseBodyNumberList) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundPhoneNumberOfUserResponseBodyNumberList) GoString() string {
	return s.String()
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyNumberList) SetNumber(v []*string) *ListOutboundPhoneNumberOfUserResponseBodyNumberList {
	s.Number = v
	return s
}

type ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers struct {
	PhoneNumber []*ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers) GoString() string {
	return s.String()
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers) SetPhoneNumber(v []*ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers {
	s.PhoneNumber = v
	return s
}

type ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber struct {
	AllowOutbound          *bool                                                                                  `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	City                   *string                                                                                `json:"City,omitempty" xml:"City,omitempty"`
	InstanceId             *string                                                                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string                                                                                `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string                                                                                `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string                                                                                `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	PrivacyNumber          *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber `json:"PrivacyNumber,omitempty" xml:"PrivacyNumber,omitempty" type:"Struct"`
	PrivateFlag            *bool                                                                                  `json:"PrivateFlag,omitempty" xml:"PrivateFlag,omitempty"`
	Province               *string                                                                                `json:"Province,omitempty" xml:"Province,omitempty"`
	RemainingTime          *int32                                                                                 `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	SipTelX                *string                                                                                `json:"SipTelX,omitempty" xml:"SipTelX,omitempty"`
	TestOnly               *bool                                                                                  `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32                                                                                 `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string                                                                                `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetAllowOutbound(v bool) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetCity(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.City = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetInstanceId(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetNumber(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetPrivacyNumber(v *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.PrivacyNumber = v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetPrivateFlag(v bool) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.PrivateFlag = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetProvince(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.Province = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetRemainingTime(v int32) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetSipTelX(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.SipTelX = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetTestOnly(v bool) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetTrunks(v int32) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber) SetUsage(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber {
	s.Usage = &v
	return s
}

type ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber struct {
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Extra          *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	PhoneNumber    *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	PoolId         *string `json:"PoolId,omitempty" xml:"PoolId,omitempty"`
	PoolName       *string `json:"PoolName,omitempty" xml:"PoolName,omitempty"`
	RegionNameCity *string `json:"RegionNameCity,omitempty" xml:"RegionNameCity,omitempty"`
	SubId          *string `json:"SubId,omitempty" xml:"SubId,omitempty"`
	TelX           *string `json:"TelX,omitempty" xml:"TelX,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) GoString() string {
	return s.String()
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) SetBizId(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber {
	s.BizId = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) SetExtra(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber {
	s.Extra = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) SetPhoneNumber(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber {
	s.PhoneNumber = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) SetPoolId(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber {
	s.PoolId = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) SetPoolName(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber {
	s.PoolName = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) SetRegionNameCity(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber {
	s.RegionNameCity = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) SetSubId(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber {
	s.SubId = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) SetTelX(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber {
	s.TelX = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber) SetType(v string) *ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber {
	s.Type = &v
	return s
}

type ListOutboundPhoneNumberOfUserResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListOutboundPhoneNumberOfUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListOutboundPhoneNumberOfUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOutboundPhoneNumberOfUserResponse) GoString() string {
	return s.String()
}

func (s *ListOutboundPhoneNumberOfUserResponse) SetHeaders(v map[string]*string) *ListOutboundPhoneNumberOfUserResponse {
	s.Headers = v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponse) SetStatusCode(v int32) *ListOutboundPhoneNumberOfUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOutboundPhoneNumberOfUserResponse) SetBody(v *ListOutboundPhoneNumberOfUserResponseBody) *ListOutboundPhoneNumberOfUserResponse {
	s.Body = v
	return s
}

type ListPhoneNumbersRequest struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OutboundOnly *bool   `json:"OutboundOnly,omitempty" xml:"OutboundOnly,omitempty"`
}

func (s ListPhoneNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersRequest) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersRequest) SetInstanceId(v string) *ListPhoneNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *ListPhoneNumbersRequest) SetOutboundOnly(v bool) *ListPhoneNumbersRequest {
	s.OutboundOnly = &v
	return s
}

type ListPhoneNumbersResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	PhoneNumbers   *ListPhoneNumbersResponseBodyPhoneNumbers `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty" type:"Struct"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListPhoneNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBody) SetCode(v string) *ListPhoneNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *ListPhoneNumbersResponseBody) SetHttpStatusCode(v int32) *ListPhoneNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListPhoneNumbersResponseBody) SetMessage(v string) *ListPhoneNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *ListPhoneNumbersResponseBody) SetPhoneNumbers(v *ListPhoneNumbersResponseBodyPhoneNumbers) *ListPhoneNumbersResponseBody {
	s.PhoneNumbers = v
	return s
}

func (s *ListPhoneNumbersResponseBody) SetRequestId(v string) *ListPhoneNumbersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPhoneNumbersResponseBody) SetSuccess(v bool) *ListPhoneNumbersResponseBody {
	s.Success = &v
	return s
}

type ListPhoneNumbersResponseBodyPhoneNumbers struct {
	PhoneNumber []*ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s ListPhoneNumbersResponseBodyPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBodyPhoneNumbers) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbers) SetPhoneNumber(v []*ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) *ListPhoneNumbersResponseBodyPhoneNumbers {
	s.PhoneNumber = v
	return s
}

type ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber struct {
	AllowOutbound          *bool                                                             `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	Assignee               *string                                                           `json:"Assignee,omitempty" xml:"Assignee,omitempty"`
	City                   *string                                                           `json:"City,omitempty" xml:"City,omitempty"`
	ContactFlow            *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow   `json:"ContactFlow,omitempty" xml:"ContactFlow,omitempty" type:"Struct"`
	InstanceId             *string                                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string                                                           `json:"Number,omitempty" xml:"Number,omitempty"`
	NumberCommodityStatus  *int32                                                            `json:"NumberCommodityStatus,omitempty" xml:"NumberCommodityStatus,omitempty"`
	PhoneNumberDescription *string                                                           `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string                                                           `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	PrivacyNumber          *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber `json:"PrivacyNumber,omitempty" xml:"PrivacyNumber,omitempty" type:"Struct"`
	Province               *string                                                           `json:"Province,omitempty" xml:"Province,omitempty"`
	RemainingTime          *int32                                                            `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	SipTelX                *string                                                           `json:"SipTelX,omitempty" xml:"SipTelX,omitempty"`
	SkillGroups            *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups   `json:"SkillGroups,omitempty" xml:"SkillGroups,omitempty" type:"Struct"`
	TestOnly               *bool                                                             `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32                                                            `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string                                                           `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetAllowOutbound(v bool) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetAssignee(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.Assignee = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetCity(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.City = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetContactFlow(v *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.ContactFlow = v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetInstanceId(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetNumber(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetNumberCommodityStatus(v int32) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.NumberCommodityStatus = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetPrivacyNumber(v *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.PrivacyNumber = v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetProvince(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.Province = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetRemainingTime(v int32) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetSipTelX(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.SipTelX = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetSkillGroups(v *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.SkillGroups = v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetTestOnly(v bool) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetTrunks(v int32) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber) SetUsage(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber {
	s.Usage = &v
	return s
}

type ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow struct {
	ContactFlowDescription *string `json:"ContactFlowDescription,omitempty" xml:"ContactFlowDescription,omitempty"`
	ContactFlowId          *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowName        *string `json:"ContactFlowName,omitempty" xml:"ContactFlowName,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) SetContactFlowDescription(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow {
	s.ContactFlowDescription = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) SetContactFlowId(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow {
	s.ContactFlowId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) SetContactFlowName(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow {
	s.ContactFlowName = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) SetInstanceId(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow {
	s.InstanceId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow) SetType(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow {
	s.Type = &v
	return s
}

type ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber struct {
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Extra          *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	PhoneNumber    *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	PoolId         *string `json:"PoolId,omitempty" xml:"PoolId,omitempty"`
	PoolName       *string `json:"PoolName,omitempty" xml:"PoolName,omitempty"`
	RegionNameCity *string `json:"RegionNameCity,omitempty" xml:"RegionNameCity,omitempty"`
	SubId          *string `json:"SubId,omitempty" xml:"SubId,omitempty"`
	TelX           *string `json:"TelX,omitempty" xml:"TelX,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) SetBizId(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber {
	s.BizId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) SetExtra(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber {
	s.Extra = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) SetPhoneNumber(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber {
	s.PhoneNumber = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) SetPoolId(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber {
	s.PoolId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) SetPoolName(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber {
	s.PoolName = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) SetRegionNameCity(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber {
	s.RegionNameCity = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) SetSubId(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber {
	s.SubId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) SetTelX(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber {
	s.TelX = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber) SetType(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber {
	s.Type = &v
	return s
}

type ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups struct {
	SkillGroup []*ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup `json:"SkillGroup,omitempty" xml:"SkillGroup,omitempty" type:"Repeated"`
}

func (s ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups) SetSkillGroup(v []*ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups {
	s.SkillGroup = v
	return s
}

type ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup struct {
	SkillGroupId   *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup) SetSkillGroupId(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup {
	s.SkillGroupId = &v
	return s
}

func (s *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup) SetSkillGroupName(v string) *ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup {
	s.SkillGroupName = &v
	return s
}

type ListPhoneNumbersResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListPhoneNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPhoneNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneNumbersResponse) GoString() string {
	return s.String()
}

func (s *ListPhoneNumbersResponse) SetHeaders(v map[string]*string) *ListPhoneNumbersResponse {
	s.Headers = v
	return s
}

func (s *ListPhoneNumbersResponse) SetStatusCode(v int32) *ListPhoneNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPhoneNumbersResponse) SetBody(v *ListPhoneNumbersResponseBody) *ListPhoneNumbersResponse {
	s.Body = v
	return s
}

type ListPhoneTagsRequest struct {
	CurrentPage    *int32    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	InstanceId     *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number         *string   `json:"Number,omitempty" xml:"Number,omitempty"`
	NumberGroupIds []*string `json:"NumberGroupIds,omitempty" xml:"NumberGroupIds,omitempty" type:"Repeated"`
	OutboundOnly   *bool     `json:"OutboundOnly,omitempty" xml:"OutboundOnly,omitempty"`
	PageSize       *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListPhoneTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneTagsRequest) GoString() string {
	return s.String()
}

func (s *ListPhoneTagsRequest) SetCurrentPage(v int32) *ListPhoneTagsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListPhoneTagsRequest) SetInstanceId(v string) *ListPhoneTagsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListPhoneTagsRequest) SetNumber(v string) *ListPhoneTagsRequest {
	s.Number = &v
	return s
}

func (s *ListPhoneTagsRequest) SetNumberGroupIds(v []*string) *ListPhoneTagsRequest {
	s.NumberGroupIds = v
	return s
}

func (s *ListPhoneTagsRequest) SetOutboundOnly(v bool) *ListPhoneTagsRequest {
	s.OutboundOnly = &v
	return s
}

func (s *ListPhoneTagsRequest) SetPageSize(v int32) *ListPhoneTagsRequest {
	s.PageSize = &v
	return s
}

type ListPhoneTagsResponseBody struct {
	Code           *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	PhoneNumbers   *ListPhoneTagsResponseBodyPhoneNumbers `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty" type:"Struct"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListPhoneTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPhoneTagsResponseBody) SetCode(v string) *ListPhoneTagsResponseBody {
	s.Code = &v
	return s
}

func (s *ListPhoneTagsResponseBody) SetHttpStatusCode(v int32) *ListPhoneTagsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListPhoneTagsResponseBody) SetMessage(v string) *ListPhoneTagsResponseBody {
	s.Message = &v
	return s
}

func (s *ListPhoneTagsResponseBody) SetPhoneNumbers(v *ListPhoneTagsResponseBodyPhoneNumbers) *ListPhoneTagsResponseBody {
	s.PhoneNumbers = v
	return s
}

func (s *ListPhoneTagsResponseBody) SetRequestId(v string) *ListPhoneTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPhoneTagsResponseBody) SetSuccess(v bool) *ListPhoneTagsResponseBody {
	s.Success = &v
	return s
}

type ListPhoneTagsResponseBodyPhoneNumbers struct {
	List       []*ListPhoneTagsResponseBodyPhoneNumbersList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageNumber *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPhoneTagsResponseBodyPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneTagsResponseBodyPhoneNumbers) GoString() string {
	return s.String()
}

func (s *ListPhoneTagsResponseBodyPhoneNumbers) SetList(v []*ListPhoneTagsResponseBodyPhoneNumbersList) *ListPhoneTagsResponseBodyPhoneNumbers {
	s.List = v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbers) SetPageNumber(v int32) *ListPhoneTagsResponseBodyPhoneNumbers {
	s.PageNumber = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbers) SetPageSize(v int32) *ListPhoneTagsResponseBodyPhoneNumbers {
	s.PageSize = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbers) SetTotalCount(v int32) *ListPhoneTagsResponseBodyPhoneNumbers {
	s.TotalCount = &v
	return s
}

type ListPhoneTagsResponseBodyPhoneNumbersList struct {
	City                   *string   `json:"City,omitempty" xml:"City,omitempty"`
	Concurrency            *int32    `json:"Concurrency,omitempty" xml:"Concurrency,omitempty"`
	ContactFlowId          *string   `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	CreateTime             *int64    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	InstanceId             *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string   `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string   `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string   `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	Provider               *string   `json:"Provider,omitempty" xml:"Provider,omitempty"`
	Province               *string   `json:"Province,omitempty" xml:"Province,omitempty"`
	ServiceTag             *string   `json:"ServiceTag,omitempty" xml:"ServiceTag,omitempty"`
	SkillGroupIdList       []*string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty" type:"Repeated"`
	Type                   *int32    `json:"Type,omitempty" xml:"Type,omitempty"`
	Usage                  *string   `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListPhoneTagsResponseBodyPhoneNumbersList) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneTagsResponseBodyPhoneNumbersList) GoString() string {
	return s.String()
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetCity(v string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.City = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetConcurrency(v int32) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.Concurrency = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetContactFlowId(v string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.ContactFlowId = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetCreateTime(v int64) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.CreateTime = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetInstanceId(v string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.InstanceId = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetNumber(v string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.Number = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetPhoneNumberDescription(v string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.PhoneNumberDescription = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetPhoneNumberId(v string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.PhoneNumberId = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetProvider(v string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.Provider = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetProvince(v string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.Province = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetServiceTag(v string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.ServiceTag = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetSkillGroupIdList(v []*string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.SkillGroupIdList = v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetType(v int32) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.Type = &v
	return s
}

func (s *ListPhoneTagsResponseBodyPhoneNumbersList) SetUsage(v string) *ListPhoneTagsResponseBodyPhoneNumbersList {
	s.Usage = &v
	return s
}

type ListPhoneTagsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListPhoneTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPhoneTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPhoneTagsResponse) GoString() string {
	return s.String()
}

func (s *ListPhoneTagsResponse) SetHeaders(v map[string]*string) *ListPhoneTagsResponse {
	s.Headers = v
	return s
}

func (s *ListPhoneTagsResponse) SetStatusCode(v int32) *ListPhoneTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPhoneTagsResponse) SetBody(v *ListPhoneTagsResponseBody) *ListPhoneTagsResponse {
	s.Body = v
	return s
}

type ListRealTimeAgentRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListRealTimeAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRealTimeAgentRequest) GoString() string {
	return s.String()
}

func (s *ListRealTimeAgentRequest) SetInstanceId(v string) *ListRealTimeAgentRequest {
	s.InstanceId = &v
	return s
}

type ListRealTimeAgentResponseBody struct {
	Code           *string                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *ListRealTimeAgentResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListRealTimeAgentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRealTimeAgentResponseBody) GoString() string {
	return s.String()
}

func (s *ListRealTimeAgentResponseBody) SetCode(v string) *ListRealTimeAgentResponseBody {
	s.Code = &v
	return s
}

func (s *ListRealTimeAgentResponseBody) SetData(v *ListRealTimeAgentResponseBodyData) *ListRealTimeAgentResponseBody {
	s.Data = v
	return s
}

func (s *ListRealTimeAgentResponseBody) SetHttpStatusCode(v int32) *ListRealTimeAgentResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRealTimeAgentResponseBody) SetMessage(v string) *ListRealTimeAgentResponseBody {
	s.Message = &v
	return s
}

func (s *ListRealTimeAgentResponseBody) SetRequestId(v string) *ListRealTimeAgentResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRealTimeAgentResponseBody) SetSuccess(v bool) *ListRealTimeAgentResponseBody {
	s.Success = &v
	return s
}

type ListRealTimeAgentResponseBodyData struct {
	User []*ListRealTimeAgentResponseBodyDataUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s ListRealTimeAgentResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRealTimeAgentResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRealTimeAgentResponseBodyData) SetUser(v []*ListRealTimeAgentResponseBodyDataUser) *ListRealTimeAgentResponseBodyData {
	s.User = v
	return s
}

type ListRealTimeAgentResponseBodyDataUser struct {
	DisplayName *string                                           `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Dn          *string                                           `json:"Dn,omitempty" xml:"Dn,omitempty"`
	Phone       *string                                           `json:"Phone,omitempty" xml:"Phone,omitempty"`
	RamId       *string                                           `json:"RamId,omitempty" xml:"RamId,omitempty"`
	SkillLevels *ListRealTimeAgentResponseBodyDataUserSkillLevels `json:"SkillLevels,omitempty" xml:"SkillLevels,omitempty" type:"Struct"`
	State       *string                                           `json:"State,omitempty" xml:"State,omitempty"`
	StateDesc   *string                                           `json:"StateDesc,omitempty" xml:"StateDesc,omitempty"`
}

func (s ListRealTimeAgentResponseBodyDataUser) String() string {
	return tea.Prettify(s)
}

func (s ListRealTimeAgentResponseBodyDataUser) GoString() string {
	return s.String()
}

func (s *ListRealTimeAgentResponseBodyDataUser) SetDisplayName(v string) *ListRealTimeAgentResponseBodyDataUser {
	s.DisplayName = &v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUser) SetDn(v string) *ListRealTimeAgentResponseBodyDataUser {
	s.Dn = &v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUser) SetPhone(v string) *ListRealTimeAgentResponseBodyDataUser {
	s.Phone = &v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUser) SetRamId(v string) *ListRealTimeAgentResponseBodyDataUser {
	s.RamId = &v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUser) SetSkillLevels(v *ListRealTimeAgentResponseBodyDataUserSkillLevels) *ListRealTimeAgentResponseBodyDataUser {
	s.SkillLevels = v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUser) SetState(v string) *ListRealTimeAgentResponseBodyDataUser {
	s.State = &v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUser) SetStateDesc(v string) *ListRealTimeAgentResponseBodyDataUser {
	s.StateDesc = &v
	return s
}

type ListRealTimeAgentResponseBodyDataUserSkillLevels struct {
	SkillLevel []*ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
}

func (s ListRealTimeAgentResponseBodyDataUserSkillLevels) String() string {
	return tea.Prettify(s)
}

func (s ListRealTimeAgentResponseBodyDataUserSkillLevels) GoString() string {
	return s.String()
}

func (s *ListRealTimeAgentResponseBodyDataUserSkillLevels) SetSkillLevel(v []*ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel) *ListRealTimeAgentResponseBodyDataUserSkillLevels {
	s.SkillLevel = v
	return s
}

type ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel struct {
	Level        *int32                                                           `json:"Level,omitempty" xml:"Level,omitempty"`
	Skill        *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill `json:"Skill,omitempty" xml:"Skill,omitempty" type:"Struct"`
	SkillLevelId *string                                                          `json:"SkillLevelId,omitempty" xml:"SkillLevelId,omitempty"`
}

func (s ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel) String() string {
	return tea.Prettify(s)
}

func (s ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel) GoString() string {
	return s.String()
}

func (s *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel) SetLevel(v int32) *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel {
	s.Level = &v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel) SetSkill(v *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill) *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel {
	s.Skill = v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel) SetSkillLevelId(v string) *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel {
	s.SkillLevelId = &v
	return s
}

type ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill struct {
	InstanceId            *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SkillGroupDescription *string `json:"SkillGroupDescription,omitempty" xml:"SkillGroupDescription,omitempty"`
	SkillGroupId          *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName        *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill) String() string {
	return tea.Prettify(s)
}

func (s ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill) GoString() string {
	return s.String()
}

func (s *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill) SetInstanceId(v string) *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill {
	s.InstanceId = &v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill) SetSkillGroupDescription(v string) *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill {
	s.SkillGroupDescription = &v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill) SetSkillGroupId(v string) *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill {
	s.SkillGroupId = &v
	return s
}

func (s *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill) SetSkillGroupName(v string) *ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill {
	s.SkillGroupName = &v
	return s
}

type ListRealTimeAgentResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListRealTimeAgentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRealTimeAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRealTimeAgentResponse) GoString() string {
	return s.String()
}

func (s *ListRealTimeAgentResponse) SetHeaders(v map[string]*string) *ListRealTimeAgentResponse {
	s.Headers = v
	return s
}

func (s *ListRealTimeAgentResponse) SetStatusCode(v int32) *ListRealTimeAgentResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRealTimeAgentResponse) SetBody(v *ListRealTimeAgentResponseBody) *ListRealTimeAgentResponse {
	s.Body = v
	return s
}

type ListRecentCallRecordsRequest struct {
	Criteria   *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime  *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StopTime   *int64  `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
}

func (s ListRecentCallRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallRecordsRequest) GoString() string {
	return s.String()
}

func (s *ListRecentCallRecordsRequest) SetCriteria(v string) *ListRecentCallRecordsRequest {
	s.Criteria = &v
	return s
}

func (s *ListRecentCallRecordsRequest) SetInstanceId(v string) *ListRecentCallRecordsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListRecentCallRecordsRequest) SetPageNumber(v int32) *ListRecentCallRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRecentCallRecordsRequest) SetPageSize(v int32) *ListRecentCallRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *ListRecentCallRecordsRequest) SetStartTime(v int64) *ListRecentCallRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *ListRecentCallRecordsRequest) SetStopTime(v int64) *ListRecentCallRecordsRequest {
	s.StopTime = &v
	return s
}

type ListRecentCallRecordsResponseBody struct {
	CallDetailRecords *ListRecentCallRecordsResponseBodyCallDetailRecords `json:"CallDetailRecords,omitempty" xml:"CallDetailRecords,omitempty" type:"Struct"`
	Code              *string                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode    *int32                                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message           *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId         *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success           *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListRecentCallRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRecentCallRecordsResponseBody) SetCallDetailRecords(v *ListRecentCallRecordsResponseBodyCallDetailRecords) *ListRecentCallRecordsResponseBody {
	s.CallDetailRecords = v
	return s
}

func (s *ListRecentCallRecordsResponseBody) SetCode(v string) *ListRecentCallRecordsResponseBody {
	s.Code = &v
	return s
}

func (s *ListRecentCallRecordsResponseBody) SetHttpStatusCode(v int32) *ListRecentCallRecordsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRecentCallRecordsResponseBody) SetMessage(v string) *ListRecentCallRecordsResponseBody {
	s.Message = &v
	return s
}

func (s *ListRecentCallRecordsResponseBody) SetRequestId(v string) *ListRecentCallRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRecentCallRecordsResponseBody) SetSuccess(v bool) *ListRecentCallRecordsResponseBody {
	s.Success = &v
	return s
}

type ListRecentCallRecordsResponseBodyCallDetailRecords struct {
	List       *ListRecentCallRecordsResponseBodyCallDetailRecordsList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecords) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecords) GoString() string {
	return s.String()
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecords) SetList(v *ListRecentCallRecordsResponseBodyCallDetailRecordsList) *ListRecentCallRecordsResponseBodyCallDetailRecords {
	s.List = v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecords) SetPageNumber(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecords {
	s.PageNumber = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecords) SetPageSize(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecords {
	s.PageSize = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecords) SetTotalCount(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecords {
	s.TotalCount = &v
	return s
}

type ListRecentCallRecordsResponseBodyCallDetailRecordsList struct {
	CallDetailRecord []*ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord `json:"CallDetailRecord,omitempty" xml:"CallDetailRecord,omitempty" type:"Repeated"`
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsList) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsList) GoString() string {
	return s.String()
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsList) SetCallDetailRecord(v []*ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) *ListRecentCallRecordsResponseBodyCallDetailRecordsList {
	s.CallDetailRecord = v
	return s
}

type ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord struct {
	AgentNames         *string                                                                           `json:"AgentNames,omitempty" xml:"AgentNames,omitempty"`
	Agents             *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents     `json:"Agents,omitempty" xml:"Agents,omitempty" type:"Struct"`
	CalledNumber       *string                                                                           `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber      *string                                                                           `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	ContactDisposition *string                                                                           `json:"ContactDisposition,omitempty" xml:"ContactDisposition,omitempty"`
	ContactId          *string                                                                           `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactType        *string                                                                           `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	Duration           *int32                                                                            `json:"Duration,omitempty" xml:"Duration,omitempty"`
	ExtraAttr          *string                                                                           `json:"ExtraAttr,omitempty" xml:"ExtraAttr,omitempty"`
	Feedback           *string                                                                           `json:"Feedback,omitempty" xml:"Feedback,omitempty"`
	InstanceId         *string                                                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Recordings         *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings `json:"Recordings,omitempty" xml:"Recordings,omitempty" type:"Struct"`
	Satisfaction       *int32                                                                            `json:"Satisfaction,omitempty" xml:"Satisfaction,omitempty"`
	SatisfactionDesc   *string                                                                           `json:"SatisfactionDesc,omitempty" xml:"SatisfactionDesc,omitempty"`
	SkillGroupNames    *string                                                                           `json:"SkillGroupNames,omitempty" xml:"SkillGroupNames,omitempty"`
	StartTime          *int64                                                                            `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) GoString() string {
	return s.String()
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetAgentNames(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.AgentNames = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetAgents(v *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.Agents = v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetCalledNumber(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.CalledNumber = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetCallingNumber(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.CallingNumber = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetContactDisposition(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.ContactDisposition = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetContactId(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.ContactId = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetContactType(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.ContactType = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetDuration(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.Duration = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetExtraAttr(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.ExtraAttr = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetFeedback(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.Feedback = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetInstanceId(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.InstanceId = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetRecordings(v *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.Recordings = v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetSatisfaction(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.Satisfaction = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetSatisfactionDesc(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.SatisfactionDesc = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetSkillGroupNames(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.SkillGroupNames = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord) SetStartTime(v int64) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord {
	s.StartTime = &v
	return s
}

type ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents struct {
	CallDetailAgent []*ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent `json:"CallDetailAgent,omitempty" xml:"CallDetailAgent,omitempty" type:"Repeated"`
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents) GoString() string {
	return s.String()
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents) SetCallDetailAgent(v []*ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents {
	s.CallDetailAgent = v
	return s
}

type ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent struct {
	AgentId        *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName      *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	ContactId      *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	Feedback       *string `json:"Feedback,omitempty" xml:"Feedback,omitempty"`
	HoldTime       *int32  `json:"HoldTime,omitempty" xml:"HoldTime,omitempty"`
	QueueTime      *int32  `json:"QueueTime,omitempty" xml:"QueueTime,omitempty"`
	RingTime       *int32  `json:"RingTime,omitempty" xml:"RingTime,omitempty"`
	Satisfaction   *string `json:"Satisfaction,omitempty" xml:"Satisfaction,omitempty"`
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	StartTime      *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TalkTime       *int32  `json:"TalkTime,omitempty" xml:"TalkTime,omitempty"`
	WorkTime       *int32  `json:"WorkTime,omitempty" xml:"WorkTime,omitempty"`
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) GoString() string {
	return s.String()
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetAgentId(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.AgentId = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetAgentName(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.AgentName = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetContactId(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.ContactId = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetFeedback(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.Feedback = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetHoldTime(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.HoldTime = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetQueueTime(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.QueueTime = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetRingTime(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.RingTime = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetSatisfaction(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.Satisfaction = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetSkillGroupName(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.SkillGroupName = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetStartTime(v int64) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.StartTime = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetTalkTime(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.TalkTime = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent) SetWorkTime(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent {
	s.WorkTime = &v
	return s
}

type ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings struct {
	Recording []*ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording `json:"Recording,omitempty" xml:"Recording,omitempty" type:"Repeated"`
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings) GoString() string {
	return s.String()
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings) SetRecording(v []*ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings {
	s.Recording = v
	return s
}

type ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording struct {
	AgentId         *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName       *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	CalledNumber    *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber   *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	Channel         *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	ContactId       *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactType     *string `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	Duration        *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileDescription *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	FileName        *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FilePath        *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	StartTime       *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) GoString() string {
	return s.String()
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetAgentId(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.AgentId = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetAgentName(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.AgentName = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetCalledNumber(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.CalledNumber = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetCallingNumber(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.CallingNumber = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetChannel(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.Channel = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetContactId(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.ContactId = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetContactType(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.ContactType = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetDuration(v int32) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.Duration = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetFileDescription(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.FileDescription = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetFileName(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.FileName = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetFilePath(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.FilePath = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetInstanceId(v string) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.InstanceId = &v
	return s
}

func (s *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording) SetStartTime(v int64) *ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording {
	s.StartTime = &v
	return s
}

type ListRecentCallRecordsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListRecentCallRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRecentCallRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecentCallRecordsResponse) GoString() string {
	return s.String()
}

func (s *ListRecentCallRecordsResponse) SetHeaders(v map[string]*string) *ListRecentCallRecordsResponse {
	s.Headers = v
	return s
}

func (s *ListRecentCallRecordsResponse) SetStatusCode(v int32) *ListRecentCallRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRecentCallRecordsResponse) SetBody(v *ListRecentCallRecordsResponseBody) *ListRecentCallRecordsResponse {
	s.Body = v
	return s
}

type ListRecordingOfDualTrackRequest struct {
	AgentId       *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	CalledNumber  *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	ConnectId     *string `json:"ConnectId,omitempty" xml:"ConnectId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StopTime      *int64  `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
}

func (s ListRecordingOfDualTrackRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingOfDualTrackRequest) GoString() string {
	return s.String()
}

func (s *ListRecordingOfDualTrackRequest) SetAgentId(v string) *ListRecordingOfDualTrackRequest {
	s.AgentId = &v
	return s
}

func (s *ListRecordingOfDualTrackRequest) SetCalledNumber(v string) *ListRecordingOfDualTrackRequest {
	s.CalledNumber = &v
	return s
}

func (s *ListRecordingOfDualTrackRequest) SetCallingNumber(v string) *ListRecordingOfDualTrackRequest {
	s.CallingNumber = &v
	return s
}

func (s *ListRecordingOfDualTrackRequest) SetConnectId(v string) *ListRecordingOfDualTrackRequest {
	s.ConnectId = &v
	return s
}

func (s *ListRecordingOfDualTrackRequest) SetInstanceId(v string) *ListRecordingOfDualTrackRequest {
	s.InstanceId = &v
	return s
}

func (s *ListRecordingOfDualTrackRequest) SetPageNumber(v int32) *ListRecordingOfDualTrackRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRecordingOfDualTrackRequest) SetPageSize(v int32) *ListRecordingOfDualTrackRequest {
	s.PageSize = &v
	return s
}

func (s *ListRecordingOfDualTrackRequest) SetStartTime(v int64) *ListRecordingOfDualTrackRequest {
	s.StartTime = &v
	return s
}

func (s *ListRecordingOfDualTrackRequest) SetStopTime(v int64) *ListRecordingOfDualTrackRequest {
	s.StopTime = &v
	return s
}

type ListRecordingOfDualTrackResponseBody struct {
	Code           *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	Recordings     *ListRecordingOfDualTrackResponseBodyRecordings `json:"Recordings,omitempty" xml:"Recordings,omitempty" type:"Struct"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListRecordingOfDualTrackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingOfDualTrackResponseBody) GoString() string {
	return s.String()
}

func (s *ListRecordingOfDualTrackResponseBody) SetCode(v string) *ListRecordingOfDualTrackResponseBody {
	s.Code = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBody) SetHttpStatusCode(v int32) *ListRecordingOfDualTrackResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBody) SetMessage(v string) *ListRecordingOfDualTrackResponseBody {
	s.Message = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBody) SetRecordings(v *ListRecordingOfDualTrackResponseBodyRecordings) *ListRecordingOfDualTrackResponseBody {
	s.Recordings = v
	return s
}

func (s *ListRecordingOfDualTrackResponseBody) SetRequestId(v string) *ListRecordingOfDualTrackResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBody) SetSuccess(v bool) *ListRecordingOfDualTrackResponseBody {
	s.Success = &v
	return s
}

type ListRecordingOfDualTrackResponseBodyRecordings struct {
	List       *ListRecordingOfDualTrackResponseBodyRecordingsList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRecordingOfDualTrackResponseBodyRecordings) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingOfDualTrackResponseBodyRecordings) GoString() string {
	return s.String()
}

func (s *ListRecordingOfDualTrackResponseBodyRecordings) SetList(v *ListRecordingOfDualTrackResponseBodyRecordingsList) *ListRecordingOfDualTrackResponseBodyRecordings {
	s.List = v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordings) SetPageNumber(v int32) *ListRecordingOfDualTrackResponseBodyRecordings {
	s.PageNumber = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordings) SetPageSize(v int32) *ListRecordingOfDualTrackResponseBodyRecordings {
	s.PageSize = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordings) SetTotalCount(v int32) *ListRecordingOfDualTrackResponseBodyRecordings {
	s.TotalCount = &v
	return s
}

type ListRecordingOfDualTrackResponseBodyRecordingsList struct {
	Recording []*ListRecordingOfDualTrackResponseBodyRecordingsListRecording `json:"Recording,omitempty" xml:"Recording,omitempty" type:"Repeated"`
}

func (s ListRecordingOfDualTrackResponseBodyRecordingsList) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingOfDualTrackResponseBodyRecordingsList) GoString() string {
	return s.String()
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsList) SetRecording(v []*ListRecordingOfDualTrackResponseBodyRecordingsListRecording) *ListRecordingOfDualTrackResponseBodyRecordingsList {
	s.Recording = v
	return s
}

type ListRecordingOfDualTrackResponseBodyRecordingsListRecording struct {
	AgentId         *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName       *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	CalledNumber    *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber   *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	Channel         *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	ContactId       *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactType     *string `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	Duration        *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileDescription *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	FileName        *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FilePath        *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	StartTime       *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListRecordingOfDualTrackResponseBodyRecordingsListRecording) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingOfDualTrackResponseBodyRecordingsListRecording) GoString() string {
	return s.String()
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetAgentId(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.AgentId = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetAgentName(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.AgentName = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetCalledNumber(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.CalledNumber = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetCallingNumber(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.CallingNumber = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetChannel(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.Channel = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetContactId(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.ContactId = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetContactType(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.ContactType = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetDuration(v int32) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.Duration = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetFileDescription(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.FileDescription = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetFileName(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.FileName = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetFilePath(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.FilePath = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetInstanceId(v string) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.InstanceId = &v
	return s
}

func (s *ListRecordingOfDualTrackResponseBodyRecordingsListRecording) SetStartTime(v int64) *ListRecordingOfDualTrackResponseBodyRecordingsListRecording {
	s.StartTime = &v
	return s
}

type ListRecordingOfDualTrackResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListRecordingOfDualTrackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRecordingOfDualTrackResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingOfDualTrackResponse) GoString() string {
	return s.String()
}

func (s *ListRecordingOfDualTrackResponse) SetHeaders(v map[string]*string) *ListRecordingOfDualTrackResponse {
	s.Headers = v
	return s
}

func (s *ListRecordingOfDualTrackResponse) SetStatusCode(v int32) *ListRecordingOfDualTrackResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRecordingOfDualTrackResponse) SetBody(v *ListRecordingOfDualTrackResponseBody) *ListRecordingOfDualTrackResponse {
	s.Body = v
	return s
}

type ListRecordingsRequest struct {
	AgentId     *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	Criteria    *string `json:"Criteria,omitempty" xml:"Criteria,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	StartTime   *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StopTime    *int64  `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
}

func (s ListRecordingsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsRequest) GoString() string {
	return s.String()
}

func (s *ListRecordingsRequest) SetAgentId(v string) *ListRecordingsRequest {
	s.AgentId = &v
	return s
}

func (s *ListRecordingsRequest) SetCriteria(v string) *ListRecordingsRequest {
	s.Criteria = &v
	return s
}

func (s *ListRecordingsRequest) SetInstanceId(v string) *ListRecordingsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListRecordingsRequest) SetPageNumber(v int32) *ListRecordingsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListRecordingsRequest) SetPageSize(v int32) *ListRecordingsRequest {
	s.PageSize = &v
	return s
}

func (s *ListRecordingsRequest) SetPhoneNumber(v string) *ListRecordingsRequest {
	s.PhoneNumber = &v
	return s
}

func (s *ListRecordingsRequest) SetStartTime(v int64) *ListRecordingsRequest {
	s.StartTime = &v
	return s
}

func (s *ListRecordingsRequest) SetStopTime(v int64) *ListRecordingsRequest {
	s.StopTime = &v
	return s
}

type ListRecordingsResponseBody struct {
	Code           *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	Recordings     *ListRecordingsResponseBodyRecordings `json:"Recordings,omitempty" xml:"Recordings,omitempty" type:"Struct"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListRecordingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsResponseBody) GoString() string {
	return s.String()
}

func (s *ListRecordingsResponseBody) SetCode(v string) *ListRecordingsResponseBody {
	s.Code = &v
	return s
}

func (s *ListRecordingsResponseBody) SetHttpStatusCode(v int32) *ListRecordingsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRecordingsResponseBody) SetMessage(v string) *ListRecordingsResponseBody {
	s.Message = &v
	return s
}

func (s *ListRecordingsResponseBody) SetRecordings(v *ListRecordingsResponseBodyRecordings) *ListRecordingsResponseBody {
	s.Recordings = v
	return s
}

func (s *ListRecordingsResponseBody) SetRequestId(v string) *ListRecordingsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRecordingsResponseBody) SetSuccess(v bool) *ListRecordingsResponseBody {
	s.Success = &v
	return s
}

type ListRecordingsResponseBodyRecordings struct {
	List       *ListRecordingsResponseBodyRecordingsList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListRecordingsResponseBodyRecordings) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsResponseBodyRecordings) GoString() string {
	return s.String()
}

func (s *ListRecordingsResponseBodyRecordings) SetList(v *ListRecordingsResponseBodyRecordingsList) *ListRecordingsResponseBodyRecordings {
	s.List = v
	return s
}

func (s *ListRecordingsResponseBodyRecordings) SetPageNumber(v int32) *ListRecordingsResponseBodyRecordings {
	s.PageNumber = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordings) SetPageSize(v int32) *ListRecordingsResponseBodyRecordings {
	s.PageSize = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordings) SetTotalCount(v int32) *ListRecordingsResponseBodyRecordings {
	s.TotalCount = &v
	return s
}

type ListRecordingsResponseBodyRecordingsList struct {
	Recording []*ListRecordingsResponseBodyRecordingsListRecording `json:"Recording,omitempty" xml:"Recording,omitempty" type:"Repeated"`
}

func (s ListRecordingsResponseBodyRecordingsList) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsResponseBodyRecordingsList) GoString() string {
	return s.String()
}

func (s *ListRecordingsResponseBodyRecordingsList) SetRecording(v []*ListRecordingsResponseBodyRecordingsListRecording) *ListRecordingsResponseBodyRecordingsList {
	s.Recording = v
	return s
}

type ListRecordingsResponseBodyRecordingsListRecording struct {
	AgentId         *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName       *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	CalledNumber    *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber   *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	Channel         *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	ContactId       *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactType     *string `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	Duration        *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileDescription *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	FileName        *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FilePath        *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	StartTime       *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListRecordingsResponseBodyRecordingsListRecording) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsResponseBodyRecordingsListRecording) GoString() string {
	return s.String()
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetAgentId(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.AgentId = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetAgentName(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.AgentName = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetCalledNumber(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.CalledNumber = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetCallingNumber(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.CallingNumber = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetChannel(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.Channel = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetContactId(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.ContactId = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetContactType(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.ContactType = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetDuration(v int32) *ListRecordingsResponseBodyRecordingsListRecording {
	s.Duration = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetFileDescription(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.FileDescription = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetFileName(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.FileName = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetFilePath(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.FilePath = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetInstanceId(v string) *ListRecordingsResponseBodyRecordingsListRecording {
	s.InstanceId = &v
	return s
}

func (s *ListRecordingsResponseBodyRecordingsListRecording) SetStartTime(v int64) *ListRecordingsResponseBodyRecordingsListRecording {
	s.StartTime = &v
	return s
}

type ListRecordingsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListRecordingsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRecordingsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsResponse) GoString() string {
	return s.String()
}

func (s *ListRecordingsResponse) SetHeaders(v map[string]*string) *ListRecordingsResponse {
	s.Headers = v
	return s
}

func (s *ListRecordingsResponse) SetStatusCode(v int32) *ListRecordingsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRecordingsResponse) SetBody(v *ListRecordingsResponseBody) *ListRecordingsResponse {
	s.Body = v
	return s
}

type ListRecordingsByContactIdRequest struct {
	ContactId  *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListRecordingsByContactIdRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsByContactIdRequest) GoString() string {
	return s.String()
}

func (s *ListRecordingsByContactIdRequest) SetContactId(v string) *ListRecordingsByContactIdRequest {
	s.ContactId = &v
	return s
}

func (s *ListRecordingsByContactIdRequest) SetInstanceId(v string) *ListRecordingsByContactIdRequest {
	s.InstanceId = &v
	return s
}

type ListRecordingsByContactIdResponseBody struct {
	Code           *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	Recordings     *ListRecordingsByContactIdResponseBodyRecordings `json:"Recordings,omitempty" xml:"Recordings,omitempty" type:"Struct"`
	RequestId      *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListRecordingsByContactIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsByContactIdResponseBody) GoString() string {
	return s.String()
}

func (s *ListRecordingsByContactIdResponseBody) SetCode(v string) *ListRecordingsByContactIdResponseBody {
	s.Code = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBody) SetHttpStatusCode(v int32) *ListRecordingsByContactIdResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBody) SetMessage(v string) *ListRecordingsByContactIdResponseBody {
	s.Message = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBody) SetRecordings(v *ListRecordingsByContactIdResponseBodyRecordings) *ListRecordingsByContactIdResponseBody {
	s.Recordings = v
	return s
}

func (s *ListRecordingsByContactIdResponseBody) SetRequestId(v string) *ListRecordingsByContactIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBody) SetSuccess(v bool) *ListRecordingsByContactIdResponseBody {
	s.Success = &v
	return s
}

type ListRecordingsByContactIdResponseBodyRecordings struct {
	Recording []*ListRecordingsByContactIdResponseBodyRecordingsRecording `json:"Recording,omitempty" xml:"Recording,omitempty" type:"Repeated"`
}

func (s ListRecordingsByContactIdResponseBodyRecordings) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsByContactIdResponseBodyRecordings) GoString() string {
	return s.String()
}

func (s *ListRecordingsByContactIdResponseBodyRecordings) SetRecording(v []*ListRecordingsByContactIdResponseBodyRecordingsRecording) *ListRecordingsByContactIdResponseBodyRecordings {
	s.Recording = v
	return s
}

type ListRecordingsByContactIdResponseBodyRecordingsRecording struct {
	AgentId            *string `json:"AgentId,omitempty" xml:"AgentId,omitempty"`
	AgentName          *string `json:"AgentName,omitempty" xml:"AgentName,omitempty"`
	CalledNumber       *string `json:"CalledNumber,omitempty" xml:"CalledNumber,omitempty"`
	CallingNumber      *string `json:"CallingNumber,omitempty" xml:"CallingNumber,omitempty"`
	Channel            *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	ContactId          *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	ContactType        *string `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
	Duration           *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileDescription    *string `json:"FileDescription,omitempty" xml:"FileDescription,omitempty"`
	FileName           *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FilePath           *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	QualityCheckTaskId *string `json:"QualityCheckTaskId,omitempty" xml:"QualityCheckTaskId,omitempty"`
	QualityCheckTid    *string `json:"QualityCheckTid,omitempty" xml:"QualityCheckTid,omitempty"`
	StartTime          *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListRecordingsByContactIdResponseBodyRecordingsRecording) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsByContactIdResponseBodyRecordingsRecording) GoString() string {
	return s.String()
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetAgentId(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.AgentId = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetAgentName(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.AgentName = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetCalledNumber(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.CalledNumber = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetCallingNumber(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.CallingNumber = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetChannel(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.Channel = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetContactId(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.ContactId = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetContactType(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.ContactType = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetDuration(v int32) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.Duration = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetFileDescription(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.FileDescription = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetFileName(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.FileName = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetFilePath(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.FilePath = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetInstanceId(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.InstanceId = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetQualityCheckTaskId(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.QualityCheckTaskId = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetQualityCheckTid(v string) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.QualityCheckTid = &v
	return s
}

func (s *ListRecordingsByContactIdResponseBodyRecordingsRecording) SetStartTime(v int64) *ListRecordingsByContactIdResponseBodyRecordingsRecording {
	s.StartTime = &v
	return s
}

type ListRecordingsByContactIdResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListRecordingsByContactIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRecordingsByContactIdResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecordingsByContactIdResponse) GoString() string {
	return s.String()
}

func (s *ListRecordingsByContactIdResponse) SetHeaders(v map[string]*string) *ListRecordingsByContactIdResponse {
	s.Headers = v
	return s
}

func (s *ListRecordingsByContactIdResponse) SetStatusCode(v int32) *ListRecordingsByContactIdResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRecordingsByContactIdResponse) SetBody(v *ListRecordingsByContactIdResponseBody) *ListRecordingsByContactIdResponse {
	s.Body = v
	return s
}

type ListRolesRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRolesRequest) GoString() string {
	return s.String()
}

func (s *ListRolesRequest) SetInstanceId(v string) *ListRolesRequest {
	s.InstanceId = &v
	return s
}

type ListRolesResponseBody struct {
	Code           *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Roles          *ListRolesResponseBodyRoles `json:"Roles,omitempty" xml:"Roles,omitempty" type:"Struct"`
	Success        *bool                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRolesResponseBody) SetCode(v string) *ListRolesResponseBody {
	s.Code = &v
	return s
}

func (s *ListRolesResponseBody) SetHttpStatusCode(v int32) *ListRolesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListRolesResponseBody) SetMessage(v string) *ListRolesResponseBody {
	s.Message = &v
	return s
}

func (s *ListRolesResponseBody) SetRequestId(v string) *ListRolesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRolesResponseBody) SetRoles(v *ListRolesResponseBodyRoles) *ListRolesResponseBody {
	s.Roles = v
	return s
}

func (s *ListRolesResponseBody) SetSuccess(v bool) *ListRolesResponseBody {
	s.Success = &v
	return s
}

type ListRolesResponseBodyRoles struct {
	Role []*ListRolesResponseBodyRolesRole `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s ListRolesResponseBodyRoles) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponseBodyRoles) GoString() string {
	return s.String()
}

func (s *ListRolesResponseBodyRoles) SetRole(v []*ListRolesResponseBodyRolesRole) *ListRolesResponseBodyRoles {
	s.Role = v
	return s
}

type ListRolesResponseBodyRolesRole struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RoleDescription *string `json:"RoleDescription,omitempty" xml:"RoleDescription,omitempty"`
	RoleId          *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s ListRolesResponseBodyRolesRole) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponseBodyRolesRole) GoString() string {
	return s.String()
}

func (s *ListRolesResponseBodyRolesRole) SetInstanceId(v string) *ListRolesResponseBodyRolesRole {
	s.InstanceId = &v
	return s
}

func (s *ListRolesResponseBodyRolesRole) SetRoleDescription(v string) *ListRolesResponseBodyRolesRole {
	s.RoleDescription = &v
	return s
}

func (s *ListRolesResponseBodyRolesRole) SetRoleId(v string) *ListRolesResponseBodyRolesRole {
	s.RoleId = &v
	return s
}

func (s *ListRolesResponseBodyRolesRole) SetRoleName(v string) *ListRolesResponseBodyRolesRole {
	s.RoleName = &v
	return s
}

type ListRolesResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListRolesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponse) GoString() string {
	return s.String()
}

func (s *ListRolesResponse) SetHeaders(v map[string]*string) *ListRolesResponse {
	s.Headers = v
	return s
}

func (s *ListRolesResponse) SetStatusCode(v int32) *ListRolesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRolesResponse) SetBody(v *ListRolesResponseBody) *ListRolesResponse {
	s.Body = v
	return s
}

type ListSkillGroupStatesRequest struct {
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SkillGroupIds *string `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
}

func (s ListSkillGroupStatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesRequest) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesRequest) SetInstanceId(v string) *ListSkillGroupStatesRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupStatesRequest) SetPageNumber(v int32) *ListSkillGroupStatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupStatesRequest) SetPageSize(v int32) *ListSkillGroupStatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupStatesRequest) SetSkillGroupIds(v string) *ListSkillGroupStatesRequest {
	s.SkillGroupIds = &v
	return s
}

type ListSkillGroupStatesResponseBody struct {
	Code           *string                               `json:"Code,omitempty" xml:"Code,omitempty"`
	Data           *ListSkillGroupStatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	HttpStatusCode *int32                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListSkillGroupStatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesResponseBody) SetCode(v string) *ListSkillGroupStatesResponseBody {
	s.Code = &v
	return s
}

func (s *ListSkillGroupStatesResponseBody) SetData(v *ListSkillGroupStatesResponseBodyData) *ListSkillGroupStatesResponseBody {
	s.Data = v
	return s
}

func (s *ListSkillGroupStatesResponseBody) SetHttpStatusCode(v int32) *ListSkillGroupStatesResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSkillGroupStatesResponseBody) SetMessage(v string) *ListSkillGroupStatesResponseBody {
	s.Message = &v
	return s
}

func (s *ListSkillGroupStatesResponseBody) SetRequestId(v string) *ListSkillGroupStatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSkillGroupStatesResponseBody) SetSuccess(v bool) *ListSkillGroupStatesResponseBody {
	s.Success = &v
	return s
}

type ListSkillGroupStatesResponseBodyData struct {
	List       *ListSkillGroupStatesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSkillGroupStatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesResponseBodyData) SetList(v *ListSkillGroupStatesResponseBodyDataList) *ListSkillGroupStatesResponseBodyData {
	s.List = v
	return s
}

func (s *ListSkillGroupStatesResponseBodyData) SetPageNumber(v int32) *ListSkillGroupStatesResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyData) SetPageSize(v int32) *ListSkillGroupStatesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyData) SetTotalCount(v int32) *ListSkillGroupStatesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListSkillGroupStatesResponseBodyDataList struct {
	RealTimeSkillGroupState []*ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState `json:"RealTimeSkillGroupState,omitempty" xml:"RealTimeSkillGroupState,omitempty" type:"Repeated"`
}

func (s ListSkillGroupStatesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesResponseBodyDataList) SetRealTimeSkillGroupState(v []*ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) *ListSkillGroupStatesResponseBodyDataList {
	s.RealTimeSkillGroupState = v
	return s
}

type ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState struct {
	BreakingAgents *int64  `json:"BreakingAgents,omitempty" xml:"BreakingAgents,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LoggedInAgents *int64  `json:"LoggedInAgents,omitempty" xml:"LoggedInAgents,omitempty"`
	LongestCall    *int64  `json:"LongestCall,omitempty" xml:"LongestCall,omitempty"`
	ReadyAgents    *int64  `json:"ReadyAgents,omitempty" xml:"ReadyAgents,omitempty"`
	SkillGroupId   *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	TalkingAgents  *int64  `json:"TalkingAgents,omitempty" xml:"TalkingAgents,omitempty"`
	WaitingCalls   *int64  `json:"WaitingCalls,omitempty" xml:"WaitingCalls,omitempty"`
	WorkingAgents  *int64  `json:"WorkingAgents,omitempty" xml:"WorkingAgents,omitempty"`
}

func (s ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) SetBreakingAgents(v int64) *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState {
	s.BreakingAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) SetInstanceId(v string) *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) SetLoggedInAgents(v int64) *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState {
	s.LoggedInAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) SetLongestCall(v int64) *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState {
	s.LongestCall = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) SetReadyAgents(v int64) *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState {
	s.ReadyAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) SetSkillGroupId(v string) *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState {
	s.SkillGroupId = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) SetSkillGroupName(v string) *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState {
	s.SkillGroupName = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) SetTalkingAgents(v int64) *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState {
	s.TalkingAgents = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) SetWaitingCalls(v int64) *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState {
	s.WaitingCalls = &v
	return s
}

func (s *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState) SetWorkingAgents(v int64) *ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState {
	s.WorkingAgents = &v
	return s
}

type ListSkillGroupStatesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSkillGroupStatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSkillGroupStatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupStatesResponse) GoString() string {
	return s.String()
}

func (s *ListSkillGroupStatesResponse) SetHeaders(v map[string]*string) *ListSkillGroupStatesResponse {
	s.Headers = v
	return s
}

func (s *ListSkillGroupStatesResponse) SetStatusCode(v int32) *ListSkillGroupStatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSkillGroupStatesResponse) SetBody(v *ListSkillGroupStatesResponseBody) *ListSkillGroupStatesResponse {
	s.Body = v
	return s
}

type ListSkillGroupSummaryReportsRequest struct {
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SkillGroupIds *string `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsRequest) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsRequest) SetEndTime(v string) *ListSkillGroupSummaryReportsRequest {
	s.EndTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsRequest) SetInstanceId(v string) *ListSkillGroupSummaryReportsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsRequest) SetPageNumber(v int32) *ListSkillGroupSummaryReportsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupSummaryReportsRequest) SetPageSize(v int32) *ListSkillGroupSummaryReportsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupSummaryReportsRequest) SetSkillGroupIds(v string) *ListSkillGroupSummaryReportsRequest {
	s.SkillGroupIds = &v
	return s
}

func (s *ListSkillGroupSummaryReportsRequest) SetStartTime(v string) *ListSkillGroupSummaryReportsRequest {
	s.StartTime = &v
	return s
}

type ListSkillGroupSummaryReportsResponseBody struct {
	Code                         *string                                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode               *int32                                                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                      *string                                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	PagedSkillGroupSummaryReport *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport `json:"PagedSkillGroupSummaryReport,omitempty" xml:"PagedSkillGroupSummaryReport,omitempty" type:"Struct"`
	RequestId                    *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                      *bool                                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListSkillGroupSummaryReportsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsResponseBody) SetCode(v string) *ListSkillGroupSummaryReportsResponseBody {
	s.Code = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBody) SetHttpStatusCode(v int32) *ListSkillGroupSummaryReportsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBody) SetMessage(v string) *ListSkillGroupSummaryReportsResponseBody {
	s.Message = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBody) SetPagedSkillGroupSummaryReport(v *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport) *ListSkillGroupSummaryReportsResponseBody {
	s.PagedSkillGroupSummaryReport = v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBody) SetRequestId(v string) *ListSkillGroupSummaryReportsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBody) SetSuccess(v bool) *ListSkillGroupSummaryReportsResponseBody {
	s.Success = &v
	return s
}

type ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport struct {
	List       *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport) SetList(v *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport {
	s.List = v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport) SetPageNumber(v int32) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport) SetPageSize(v int32) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport) SetTotalCount(v int32) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport {
	s.TotalCount = &v
	return s
}

type ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList struct {
	SkillGroupSummaryReport []*ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport `json:"SkillGroupSummaryReport,omitempty" xml:"SkillGroupSummaryReport,omitempty" type:"Repeated"`
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList) SetSkillGroupSummaryReport(v []*ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList {
	s.SkillGroupSummaryReport = v
	return s
}

type ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport struct {
	Inbound        *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId     *string                                                                                                  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Outbound       *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall        *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	SkillGroupId   *string                                                                                                  `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName *string                                                                                                  `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetInbound(v *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.Inbound = v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetInstanceId(v string) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetOutbound(v *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.Outbound = v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetOverall(v *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.Overall = v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetSkillGroupId(v string) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.SkillGroupId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetSkillGroupName(v string) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.SkillGroupName = &v
	return s
}

type ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound struct {
	AbandonedInQueueOfQueueCount              *int64   `json:"AbandonedInQueueOfQueueCount,omitempty" xml:"AbandonedInQueueOfQueueCount,omitempty"`
	AnsweredByAgentOfQueueCount               *int64   `json:"AnsweredByAgentOfQueueCount,omitempty" xml:"AnsweredByAgentOfQueueCount,omitempty"`
	AnsweredByAgentOfQueueMaxWaitTimeDuration *int64   `json:"AnsweredByAgentOfQueueMaxWaitTimeDuration,omitempty" xml:"AnsweredByAgentOfQueueMaxWaitTimeDuration,omitempty"`
	AnsweredByAgentOfQueueWaitTimeDuration    *int64   `json:"AnsweredByAgentOfQueueWaitTimeDuration,omitempty" xml:"AnsweredByAgentOfQueueWaitTimeDuration,omitempty"`
	AverageRingTime                           *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime                           *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime                           *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsHandled                              *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsOffered                              *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	GiveUpByAgentOfQueueCount                 *int64   `json:"GiveUpByAgentOfQueueCount,omitempty" xml:"GiveUpByAgentOfQueueCount,omitempty"`
	HandleRate                                *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	InComingQueueOfQueueCount                 *int64   `json:"InComingQueueOfQueueCount,omitempty" xml:"InComingQueueOfQueueCount,omitempty"`
	MaxRingTime                               *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                               *string  `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                               *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OverFlowInQueueOfQueueCount               *int64   `json:"OverFlowInQueueOfQueueCount,omitempty" xml:"OverFlowInQueueOfQueueCount,omitempty"`
	QueueMaxWaitTimeDuration                  *int64   `json:"QueueMaxWaitTimeDuration,omitempty" xml:"QueueMaxWaitTimeDuration,omitempty"`
	QueueWaitTimeDuration                     *int64   `json:"QueueWaitTimeDuration,omitempty" xml:"QueueWaitTimeDuration,omitempty"`
	SatisfactionIndex                         *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered                *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded              *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel20                            *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	TotalRingTime                             *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                             *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                             *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAbandonedInQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AbandonedInQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAnsweredByAgentOfQueueCount(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AnsweredByAgentOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAnsweredByAgentOfQueueMaxWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AnsweredByAgentOfQueueMaxWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAnsweredByAgentOfQueueWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AnsweredByAgentOfQueueWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAverageRingTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetCallsHandled(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetCallsOffered(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetGiveUpByAgentOfQueueCount(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.GiveUpByAgentOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetHandleRate(v float32) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.HandleRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetInComingQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.InComingQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetMaxRingTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetMaxTalkTime(v string) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetOverFlowInQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.OverFlowInQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetQueueMaxWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.QueueMaxWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetQueueWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.QueueWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetServiceLevel20(v float32) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetTotalRingTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetAnswerRate(v float32) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetAverageDialingTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetCallsAnswered(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetCallsDialed(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetMaxDialingTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetMaxTalkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetTotalDialingTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall struct {
	AverageReadyTime             *int64   `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	MaxReadyTime                 *int64   `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OccupancyRate                *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalBreakTime               *int64   `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalLoggedInTime            *int64   `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime               *int64   `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetAverageReadyTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetMaxReadyTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetMaxTalkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetOccupancyRate(v float32) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalBreakTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalCalls(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalLoggedInTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalReadyTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSkillGroupSummaryReportsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSkillGroupSummaryReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsResponse) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsResponse) SetHeaders(v map[string]*string) *ListSkillGroupSummaryReportsResponse {
	s.Headers = v
	return s
}

func (s *ListSkillGroupSummaryReportsResponse) SetStatusCode(v int32) *ListSkillGroupSummaryReportsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSkillGroupSummaryReportsResponse) SetBody(v *ListSkillGroupSummaryReportsResponseBody) *ListSkillGroupSummaryReportsResponse {
	s.Body = v
	return s
}

type ListSkillGroupSummaryReportsByIntervalRequest struct {
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Interval      *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SkillGroupIds *string `json:"SkillGroupIds,omitempty" xml:"SkillGroupIds,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsByIntervalRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalRequest) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalRequest) SetEndTime(v string) *ListSkillGroupSummaryReportsByIntervalRequest {
	s.EndTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalRequest) SetInstanceId(v string) *ListSkillGroupSummaryReportsByIntervalRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalRequest) SetInterval(v string) *ListSkillGroupSummaryReportsByIntervalRequest {
	s.Interval = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalRequest) SetPageNumber(v int32) *ListSkillGroupSummaryReportsByIntervalRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalRequest) SetPageSize(v int32) *ListSkillGroupSummaryReportsByIntervalRequest {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalRequest) SetSkillGroupIds(v string) *ListSkillGroupSummaryReportsByIntervalRequest {
	s.SkillGroupIds = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalRequest) SetStartTime(v string) *ListSkillGroupSummaryReportsByIntervalRequest {
	s.StartTime = &v
	return s
}

type ListSkillGroupSummaryReportsByIntervalResponseBody struct {
	Code                         *string                                                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode               *int32                                                                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                      *string                                                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	PagedSkillGroupSummaryReport *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport `json:"PagedSkillGroupSummaryReport,omitempty" xml:"PagedSkillGroupSummaryReport,omitempty" type:"Struct"`
	RequestId                    *string                                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                      *bool                                                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBody) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBody) SetCode(v string) *ListSkillGroupSummaryReportsByIntervalResponseBody {
	s.Code = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBody) SetHttpStatusCode(v int32) *ListSkillGroupSummaryReportsByIntervalResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBody) SetMessage(v string) *ListSkillGroupSummaryReportsByIntervalResponseBody {
	s.Message = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBody) SetPagedSkillGroupSummaryReport(v *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport) *ListSkillGroupSummaryReportsByIntervalResponseBody {
	s.PagedSkillGroupSummaryReport = v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBody) SetRequestId(v string) *ListSkillGroupSummaryReportsByIntervalResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBody) SetSuccess(v bool) *ListSkillGroupSummaryReportsByIntervalResponseBody {
	s.Success = &v
	return s
}

type ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport struct {
	List       *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport) SetList(v *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport {
	s.List = v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport) SetPageNumber(v int32) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport) SetPageSize(v int32) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport) SetTotalCount(v int32) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport {
	s.TotalCount = &v
	return s
}

type ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList struct {
	SkillGroupTimeIntervalReport []*ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport `json:"SkillGroupTimeIntervalReport,omitempty" xml:"SkillGroupTimeIntervalReport,omitempty" type:"Repeated"`
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList) SetSkillGroupTimeIntervalReport(v []*ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList {
	s.SkillGroupTimeIntervalReport = v
	return s
}

type ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport struct {
	IntervalList *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList `json:"IntervalList,omitempty" xml:"IntervalList,omitempty" type:"Struct"`
	SkillGroupId *string                                                                                                                     `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport) SetIntervalList(v *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport {
	s.IntervalList = v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport) SetSkillGroupId(v string) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport {
	s.SkillGroupId = &v
	return s
}

type ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList struct {
	SkillGroupSummaryReport []*ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport `json:"SkillGroupSummaryReport,omitempty" xml:"SkillGroupSummaryReport,omitempty" type:"Repeated"`
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList) SetSkillGroupSummaryReport(v []*ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList {
	s.SkillGroupSummaryReport = v
	return s
}

type ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport struct {
	Inbound        *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId     *string                                                                                                                                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Outbound       *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall        *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	SkillGroupId   *string                                                                                                                                                    `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName *string                                                                                                                                                    `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	Timestamp      *string                                                                                                                                                    `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport) SetInbound(v *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport {
	s.Inbound = v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport) SetInstanceId(v string) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport) SetOutbound(v *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport {
	s.Outbound = v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport) SetOverall(v *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport {
	s.Overall = v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport) SetSkillGroupId(v string) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport {
	s.SkillGroupId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport) SetSkillGroupName(v string) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport {
	s.SkillGroupName = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport) SetTimestamp(v string) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport {
	s.Timestamp = &v
	return s
}

type ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound struct {
	AbandonedInQueueOfQueueCount              *int64   `json:"AbandonedInQueueOfQueueCount,omitempty" xml:"AbandonedInQueueOfQueueCount,omitempty"`
	AnsweredByAgentOfQueueCount               *int64   `json:"AnsweredByAgentOfQueueCount,omitempty" xml:"AnsweredByAgentOfQueueCount,omitempty"`
	AnsweredByAgentOfQueueMaxWaitTimeDuration *int64   `json:"AnsweredByAgentOfQueueMaxWaitTimeDuration,omitempty" xml:"AnsweredByAgentOfQueueMaxWaitTimeDuration,omitempty"`
	AnsweredByAgentOfQueueWaitTimeDuration    *int64   `json:"AnsweredByAgentOfQueueWaitTimeDuration,omitempty" xml:"AnsweredByAgentOfQueueWaitTimeDuration,omitempty"`
	AverageRingTime                           *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime                           *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime                           *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsHandled                              *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsOffered                              *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	GiveUpByAgentOfQueueCount                 *int64   `json:"GiveUpByAgentOfQueueCount,omitempty" xml:"GiveUpByAgentOfQueueCount,omitempty"`
	HandleRate                                *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	InComingQueueOfQueueCount                 *int64   `json:"InComingQueueOfQueueCount,omitempty" xml:"InComingQueueOfQueueCount,omitempty"`
	MaxRingTime                               *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                               *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                               *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OverFlowInQueueOfQueueCount               *int64   `json:"OverFlowInQueueOfQueueCount,omitempty" xml:"OverFlowInQueueOfQueueCount,omitempty"`
	QueueMaxWaitTimeDuration                  *int64   `json:"QueueMaxWaitTimeDuration,omitempty" xml:"QueueMaxWaitTimeDuration,omitempty"`
	QueueWaitTimeDuration                     *int64   `json:"QueueWaitTimeDuration,omitempty" xml:"QueueWaitTimeDuration,omitempty"`
	SatisfactionIndex                         *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered                *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded              *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel20                            *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	TotalRingTime                             *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                             *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                             *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetAbandonedInQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.AbandonedInQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetAnsweredByAgentOfQueueCount(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.AnsweredByAgentOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetAnsweredByAgentOfQueueMaxWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.AnsweredByAgentOfQueueMaxWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetAnsweredByAgentOfQueueWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.AnsweredByAgentOfQueueWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetAverageRingTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetCallsHandled(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetCallsOffered(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetGiveUpByAgentOfQueueCount(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.GiveUpByAgentOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetHandleRate(v float32) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.HandleRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetInComingQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.InComingQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetMaxRingTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetMaxTalkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetOverFlowInQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.OverFlowInQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetQueueMaxWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.QueueMaxWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetQueueWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.QueueWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetServiceLevel20(v float32) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetTotalRingTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetAnswerRate(v float32) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetAverageDialingTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetCallsAnswered(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetCallsDialed(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetMaxDialingTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetMaxTalkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetTotalDialingTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall struct {
	AverageReadyTime             *int64   `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	MaxReadyTime                 *int64   `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OccupancyRate                *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalBreakTime               *int64   `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalLoggedInTime            *int64   `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime               *int64   `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetAverageReadyTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetMaxReadyTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetMaxTalkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetOccupancyRate(v float32) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetTotalBreakTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetTotalCalls(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetTotalLoggedInTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetTotalReadyTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsByIntervalResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSkillGroupSummaryReportsByIntervalResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSkillGroupSummaryReportsByIntervalResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsByIntervalResponse) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsByIntervalResponse) SetHeaders(v map[string]*string) *ListSkillGroupSummaryReportsByIntervalResponse {
	s.Headers = v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponse) SetStatusCode(v int32) *ListSkillGroupSummaryReportsByIntervalResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSkillGroupSummaryReportsByIntervalResponse) SetBody(v *ListSkillGroupSummaryReportsByIntervalResponseBody) *ListSkillGroupSummaryReportsByIntervalResponse {
	s.Body = v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightRequest struct {
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SkillGroups *string `json:"SkillGroups,omitempty" xml:"SkillGroups,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightRequest) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightRequest) SetInstanceId(v string) *ListSkillGroupSummaryReportsSinceMidnightRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightRequest) SetPageNumber(v int32) *ListSkillGroupSummaryReportsSinceMidnightRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightRequest) SetPageSize(v int32) *ListSkillGroupSummaryReportsSinceMidnightRequest {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightRequest) SetSkillGroups(v string) *ListSkillGroupSummaryReportsSinceMidnightRequest {
	s.SkillGroups = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBody struct {
	Code                         *string                                                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode               *int32                                                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message                      *string                                                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	PagedSkillGroupSummaryReport *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport `json:"PagedSkillGroupSummaryReport,omitempty" xml:"PagedSkillGroupSummaryReport,omitempty" type:"Struct"`
	RequestId                    *string                                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success                      *bool                                                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBody) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetCode(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.Code = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetHttpStatusCode(v int32) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetMessage(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.Message = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetPagedSkillGroupSummaryReport(v *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.PagedSkillGroupSummaryReport = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetRequestId(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBody) SetSuccess(v bool) *ListSkillGroupSummaryReportsSinceMidnightResponseBody {
	s.Success = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport struct {
	List       *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                                                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                                                                 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                                                                 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) SetList(v *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport {
	s.List = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) SetPageNumber(v int32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport {
	s.PageNumber = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) SetPageSize(v int32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport {
	s.PageSize = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport) SetTotalCount(v int32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport {
	s.TotalCount = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList struct {
	SkillGroupSummaryReport []*ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport `json:"SkillGroupSummaryReport,omitempty" xml:"SkillGroupSummaryReport,omitempty" type:"Repeated"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList) SetSkillGroupSummaryReport(v []*ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList {
	s.SkillGroupSummaryReport = v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport struct {
	Inbound        *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound  `json:"Inbound,omitempty" xml:"Inbound,omitempty" type:"Struct"`
	InstanceId     *string                                                                                                               `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Outbound       *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound `json:"Outbound,omitempty" xml:"Outbound,omitempty" type:"Struct"`
	Overall        *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall  `json:"Overall,omitempty" xml:"Overall,omitempty" type:"Struct"`
	SkillGroupId   *string                                                                                                               `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName *string                                                                                                               `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	Timestamp      *string                                                                                                               `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetInbound(v *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.Inbound = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetInstanceId(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetOutbound(v *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.Outbound = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetOverall(v *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.Overall = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetSkillGroupId(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.SkillGroupId = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetSkillGroupName(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.SkillGroupName = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport) SetTimestamp(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport {
	s.Timestamp = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound struct {
	AbandonedInQueueOfQueueCount              *int64   `json:"AbandonedInQueueOfQueueCount,omitempty" xml:"AbandonedInQueueOfQueueCount,omitempty"`
	AnsweredByAgentOfQueueCount               *int64   `json:"AnsweredByAgentOfQueueCount,omitempty" xml:"AnsweredByAgentOfQueueCount,omitempty"`
	AnsweredByAgentOfQueueMaxWaitTimeDuration *int64   `json:"AnsweredByAgentOfQueueMaxWaitTimeDuration,omitempty" xml:"AnsweredByAgentOfQueueMaxWaitTimeDuration,omitempty"`
	AnsweredByAgentOfQueueWaitTimeDuration    *int64   `json:"AnsweredByAgentOfQueueWaitTimeDuration,omitempty" xml:"AnsweredByAgentOfQueueWaitTimeDuration,omitempty"`
	AverageRingTime                           *int64   `json:"AverageRingTime,omitempty" xml:"AverageRingTime,omitempty"`
	AverageTalkTime                           *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime                           *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsHandled                              *int64   `json:"CallsHandled,omitempty" xml:"CallsHandled,omitempty"`
	CallsOffered                              *int64   `json:"CallsOffered,omitempty" xml:"CallsOffered,omitempty"`
	CallsServiceLevel20                       *int64   `json:"CallsServiceLevel20,omitempty" xml:"CallsServiceLevel20,omitempty"`
	CallsServiceLevel30                       *int64   `json:"CallsServiceLevel30,omitempty" xml:"CallsServiceLevel30,omitempty"`
	GiveUpByAgentOfQueueCount                 *int64   `json:"GiveUpByAgentOfQueueCount,omitempty" xml:"GiveUpByAgentOfQueueCount,omitempty"`
	HandleRate                                *float32 `json:"HandleRate,omitempty" xml:"HandleRate,omitempty"`
	InComingQueueOfQueueCount                 *int64   `json:"InComingQueueOfQueueCount,omitempty" xml:"InComingQueueOfQueueCount,omitempty"`
	MaxRingTime                               *int64   `json:"MaxRingTime,omitempty" xml:"MaxRingTime,omitempty"`
	MaxTalkTime                               *string  `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                               *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OverFlowInQueueOfQueueCount               *int64   `json:"OverFlowInQueueOfQueueCount,omitempty" xml:"OverFlowInQueueOfQueueCount,omitempty"`
	QueueMaxWaitTimeDuration                  *int64   `json:"QueueMaxWaitTimeDuration,omitempty" xml:"QueueMaxWaitTimeDuration,omitempty"`
	QueueWaitTimeDuration                     *int64   `json:"QueueWaitTimeDuration,omitempty" xml:"QueueWaitTimeDuration,omitempty"`
	SatisfactionIndex                         *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered                *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded              *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	ServiceLevel20                            *float32 `json:"ServiceLevel20,omitempty" xml:"ServiceLevel20,omitempty"`
	TotalRingTime                             *int64   `json:"TotalRingTime,omitempty" xml:"TotalRingTime,omitempty"`
	TotalTalkTime                             *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                             *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAbandonedInQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AbandonedInQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAnsweredByAgentOfQueueCount(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AnsweredByAgentOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAnsweredByAgentOfQueueMaxWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AnsweredByAgentOfQueueMaxWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAnsweredByAgentOfQueueWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AnsweredByAgentOfQueueWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAverageRingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AverageRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetCallsHandled(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.CallsHandled = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetCallsOffered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.CallsOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetCallsServiceLevel20(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.CallsServiceLevel20 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetCallsServiceLevel30(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.CallsServiceLevel30 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetGiveUpByAgentOfQueueCount(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.GiveUpByAgentOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetHandleRate(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.HandleRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetInComingQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.InComingQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetMaxRingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.MaxRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetMaxTalkTime(v string) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetOverFlowInQueueOfQueueCount(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.OverFlowInQueueOfQueueCount = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetQueueMaxWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.QueueMaxWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetQueueWaitTimeDuration(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.QueueWaitTimeDuration = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetServiceLevel20(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.ServiceLevel20 = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetTotalRingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.TotalRingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound struct {
	AnswerRate                   *float32 `json:"AnswerRate,omitempty" xml:"AnswerRate,omitempty"`
	AverageDialingTime           *int64   `json:"AverageDialingTime,omitempty" xml:"AverageDialingTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	CallsAnswered                *int64   `json:"CallsAnswered,omitempty" xml:"CallsAnswered,omitempty"`
	CallsDialed                  *int64   `json:"CallsDialed,omitempty" xml:"CallsDialed,omitempty"`
	MaxDialingTime               *int64   `json:"MaxDialingTime,omitempty" xml:"MaxDialingTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalDialingTime             *int64   `json:"TotalDialingTime,omitempty" xml:"TotalDialingTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetAnswerRate(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.AnswerRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetAverageDialingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.AverageDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetCallsAnswered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.CallsAnswered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetCallsDialed(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.CallsDialed = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetMaxDialingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.MaxDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetMaxTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetTotalDialingTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.TotalDialingTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall struct {
	AverageReadyTime             *int64   `json:"AverageReadyTime,omitempty" xml:"AverageReadyTime,omitempty"`
	AverageTalkTime              *int64   `json:"AverageTalkTime,omitempty" xml:"AverageTalkTime,omitempty"`
	AverageWorkTime              *int64   `json:"AverageWorkTime,omitempty" xml:"AverageWorkTime,omitempty"`
	MaxReadyTime                 *int64   `json:"MaxReadyTime,omitempty" xml:"MaxReadyTime,omitempty"`
	MaxTalkTime                  *int64   `json:"MaxTalkTime,omitempty" xml:"MaxTalkTime,omitempty"`
	MaxWorkTime                  *int64   `json:"MaxWorkTime,omitempty" xml:"MaxWorkTime,omitempty"`
	OccupancyRate                *float32 `json:"OccupancyRate,omitempty" xml:"OccupancyRate,omitempty"`
	SatisfactionIndex            *float32 `json:"SatisfactionIndex,omitempty" xml:"SatisfactionIndex,omitempty"`
	SatisfactionSurveysOffered   *int64   `json:"SatisfactionSurveysOffered,omitempty" xml:"SatisfactionSurveysOffered,omitempty"`
	SatisfactionSurveysResponded *int64   `json:"SatisfactionSurveysResponded,omitempty" xml:"SatisfactionSurveysResponded,omitempty"`
	TotalBreakTime               *int64   `json:"TotalBreakTime,omitempty" xml:"TotalBreakTime,omitempty"`
	TotalCalls                   *int64   `json:"TotalCalls,omitempty" xml:"TotalCalls,omitempty"`
	TotalLoggedInTime            *int64   `json:"TotalLoggedInTime,omitempty" xml:"TotalLoggedInTime,omitempty"`
	TotalReadyTime               *int64   `json:"TotalReadyTime,omitempty" xml:"TotalReadyTime,omitempty"`
	TotalTalkTime                *int64   `json:"TotalTalkTime,omitempty" xml:"TotalTalkTime,omitempty"`
	TotalWorkTime                *int64   `json:"TotalWorkTime,omitempty" xml:"TotalWorkTime,omitempty"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetAverageReadyTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.AverageReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetAverageTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.AverageTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetAverageWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.AverageWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetMaxReadyTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.MaxReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetMaxTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.MaxTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetMaxWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.MaxWorkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetOccupancyRate(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.OccupancyRate = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetSatisfactionIndex(v float32) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.SatisfactionIndex = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetSatisfactionSurveysOffered(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.SatisfactionSurveysOffered = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetSatisfactionSurveysResponded(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.SatisfactionSurveysResponded = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalBreakTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalBreakTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalCalls(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalCalls = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalLoggedInTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalLoggedInTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalReadyTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalReadyTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalTalkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalTalkTime = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall) SetTotalWorkTime(v int64) *ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall {
	s.TotalWorkTime = &v
	return s
}

type ListSkillGroupSummaryReportsSinceMidnightResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSkillGroupSummaryReportsSinceMidnightResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupSummaryReportsSinceMidnightResponse) GoString() string {
	return s.String()
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponse) SetHeaders(v map[string]*string) *ListSkillGroupSummaryReportsSinceMidnightResponse {
	s.Headers = v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponse) SetStatusCode(v int32) *ListSkillGroupSummaryReportsSinceMidnightResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSkillGroupSummaryReportsSinceMidnightResponse) SetBody(v *ListSkillGroupSummaryReportsSinceMidnightResponseBody) *ListSkillGroupSummaryReportsSinceMidnightResponse {
	s.Body = v
	return s
}

type ListSkillGroupsRequest struct {
	InstanceId     *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SkillGroupId   []*string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty" type:"Repeated"`
	SkillGroupName []*string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty" type:"Repeated"`
}

func (s ListSkillGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsRequest) SetInstanceId(v string) *ListSkillGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupsRequest) SetSkillGroupId(v []*string) *ListSkillGroupsRequest {
	s.SkillGroupId = v
	return s
}

func (s *ListSkillGroupsRequest) SetSkillGroupName(v []*string) *ListSkillGroupsRequest {
	s.SkillGroupName = v
	return s
}

type ListSkillGroupsResponseBody struct {
	Code           *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SkillGroups    *ListSkillGroupsResponseBodySkillGroups `json:"SkillGroups,omitempty" xml:"SkillGroups,omitempty" type:"Struct"`
	Success        *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListSkillGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsResponseBody) SetCode(v string) *ListSkillGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ListSkillGroupsResponseBody) SetHttpStatusCode(v int32) *ListSkillGroupsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSkillGroupsResponseBody) SetMessage(v string) *ListSkillGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ListSkillGroupsResponseBody) SetRequestId(v string) *ListSkillGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSkillGroupsResponseBody) SetSkillGroups(v *ListSkillGroupsResponseBodySkillGroups) *ListSkillGroupsResponseBody {
	s.SkillGroups = v
	return s
}

func (s *ListSkillGroupsResponseBody) SetSuccess(v bool) *ListSkillGroupsResponseBody {
	s.Success = &v
	return s
}

type ListSkillGroupsResponseBodySkillGroups struct {
	SkillGroup []*ListSkillGroupsResponseBodySkillGroupsSkillGroup `json:"SkillGroup,omitempty" xml:"SkillGroup,omitempty" type:"Repeated"`
}

func (s ListSkillGroupsResponseBodySkillGroups) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsResponseBodySkillGroups) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsResponseBodySkillGroups) SetSkillGroup(v []*ListSkillGroupsResponseBodySkillGroupsSkillGroup) *ListSkillGroupsResponseBodySkillGroups {
	s.SkillGroup = v
	return s
}

type ListSkillGroupsResponseBodySkillGroupsSkillGroup struct {
	AccQueueName          *string                                                               `json:"AccQueueName,omitempty" xml:"AccQueueName,omitempty"`
	AccSkillGroupName     *string                                                               `json:"AccSkillGroupName,omitempty" xml:"AccSkillGroupName,omitempty"`
	InstanceId            *string                                                               `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OutboundPhoneNumbers  *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers `json:"OutboundPhoneNumbers,omitempty" xml:"OutboundPhoneNumbers,omitempty" type:"Struct"`
	RoutingStrategy       *string                                                               `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	SkillGroupDescription *string                                                               `json:"SkillGroupDescription,omitempty" xml:"SkillGroupDescription,omitempty"`
	SkillGroupId          *string                                                               `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName        *string                                                               `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	UserCount             *int32                                                                `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s ListSkillGroupsResponseBodySkillGroupsSkillGroup) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsResponseBodySkillGroupsSkillGroup) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroup) SetAccQueueName(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroup {
	s.AccQueueName = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroup) SetAccSkillGroupName(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroup {
	s.AccSkillGroupName = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroup) SetInstanceId(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroup {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroup) SetOutboundPhoneNumbers(v *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers) *ListSkillGroupsResponseBodySkillGroupsSkillGroup {
	s.OutboundPhoneNumbers = v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroup) SetRoutingStrategy(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroup {
	s.RoutingStrategy = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroup) SetSkillGroupDescription(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroup {
	s.SkillGroupDescription = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroup) SetSkillGroupId(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroup {
	s.SkillGroupId = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroup) SetSkillGroupName(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroup {
	s.SkillGroupName = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroup) SetUserCount(v int32) *ListSkillGroupsResponseBodySkillGroupsSkillGroup {
	s.UserCount = &v
	return s
}

type ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers struct {
	PhoneNumber []*ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers) SetPhoneNumber(v []*ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers {
	s.PhoneNumber = v
	return s
}

type ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber struct {
	AllowOutbound          *bool   `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	RemainingTime          *int32  `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	TestOnly               *bool   `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32  `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) SetAllowOutbound(v bool) *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) SetInstanceId(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) SetNumber(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) SetRemainingTime(v int32) *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) SetTestOnly(v bool) *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) SetTrunks(v int32) *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber) SetUsage(v string) *ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber {
	s.Usage = &v
	return s
}

type ListSkillGroupsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSkillGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSkillGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsResponse) SetHeaders(v map[string]*string) *ListSkillGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListSkillGroupsResponse) SetStatusCode(v int32) *ListSkillGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSkillGroupsResponse) SetBody(v *ListSkillGroupsResponseBody) *ListSkillGroupsResponse {
	s.Body = v
	return s
}

type ListSkillGroupsOfUserRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListSkillGroupsOfUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsOfUserRequest) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsOfUserRequest) SetInstanceId(v string) *ListSkillGroupsOfUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupsOfUserRequest) SetUserId(v string) *ListSkillGroupsOfUserRequest {
	s.UserId = &v
	return s
}

type ListSkillGroupsOfUserResponseBody struct {
	Code           *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                        `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SkillLevels    *ListSkillGroupsOfUserResponseBodySkillLevels `json:"SkillLevels,omitempty" xml:"SkillLevels,omitempty" type:"Struct"`
	Success        *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListSkillGroupsOfUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsOfUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsOfUserResponseBody) SetCode(v string) *ListSkillGroupsOfUserResponseBody {
	s.Code = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBody) SetHttpStatusCode(v int32) *ListSkillGroupsOfUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBody) SetMessage(v string) *ListSkillGroupsOfUserResponseBody {
	s.Message = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBody) SetRequestId(v string) *ListSkillGroupsOfUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBody) SetSkillLevels(v *ListSkillGroupsOfUserResponseBodySkillLevels) *ListSkillGroupsOfUserResponseBody {
	s.SkillLevels = v
	return s
}

func (s *ListSkillGroupsOfUserResponseBody) SetSuccess(v bool) *ListSkillGroupsOfUserResponseBody {
	s.Success = &v
	return s
}

type ListSkillGroupsOfUserResponseBodySkillLevels struct {
	SkillLevel []*ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
}

func (s ListSkillGroupsOfUserResponseBodySkillLevels) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsOfUserResponseBodySkillLevels) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevels) SetSkillLevel(v []*ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel) *ListSkillGroupsOfUserResponseBodySkillLevels {
	s.SkillLevel = v
	return s
}

type ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel struct {
	Level        *int32                                                       `json:"Level,omitempty" xml:"Level,omitempty"`
	Skill        *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill `json:"Skill,omitempty" xml:"Skill,omitempty" type:"Struct"`
	SkillLevelId *string                                                      `json:"SkillLevelId,omitempty" xml:"SkillLevelId,omitempty"`
}

func (s ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel) SetLevel(v int32) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel {
	s.Level = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel) SetSkill(v *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel {
	s.Skill = v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel) SetSkillLevelId(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel {
	s.SkillLevelId = &v
	return s
}

type ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill struct {
	InstanceId            *string                                                                          `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OutboundPhoneNumbers  *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers `json:"OutboundPhoneNumbers,omitempty" xml:"OutboundPhoneNumbers,omitempty" type:"Struct"`
	RoutingStrategy       *string                                                                          `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	SkillGroupDescription *string                                                                          `json:"SkillGroupDescription,omitempty" xml:"SkillGroupDescription,omitempty"`
	SkillGroupId          *string                                                                          `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName        *string                                                                          `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill) SetInstanceId(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill) SetOutboundPhoneNumbers(v *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill {
	s.OutboundPhoneNumbers = v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill) SetRoutingStrategy(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill {
	s.RoutingStrategy = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill) SetSkillGroupDescription(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill {
	s.SkillGroupDescription = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill) SetSkillGroupId(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill {
	s.SkillGroupId = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill) SetSkillGroupName(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill {
	s.SkillGroupName = &v
	return s
}

type ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers struct {
	PhoneNumber []*ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers) SetPhoneNumber(v []*ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers {
	s.PhoneNumber = v
	return s
}

type ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber struct {
	AllowOutbound          *bool   `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	City                   *string `json:"City,omitempty" xml:"City,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	Province               *string `json:"Province,omitempty" xml:"Province,omitempty"`
	RemainingTime          *int32  `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	TestOnly               *bool   `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32  `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetAllowOutbound(v bool) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetCity(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.City = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetInstanceId(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetNumber(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetProvince(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.Province = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetRemainingTime(v int32) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetTestOnly(v bool) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetTrunks(v int32) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber) SetUsage(v string) *ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber {
	s.Usage = &v
	return s
}

type ListSkillGroupsOfUserResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSkillGroupsOfUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSkillGroupsOfUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSkillGroupsOfUserResponse) GoString() string {
	return s.String()
}

func (s *ListSkillGroupsOfUserResponse) SetHeaders(v map[string]*string) *ListSkillGroupsOfUserResponse {
	s.Headers = v
	return s
}

func (s *ListSkillGroupsOfUserResponse) SetStatusCode(v int32) *ListSkillGroupsOfUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSkillGroupsOfUserResponse) SetBody(v *ListSkillGroupsOfUserResponseBody) *ListSkillGroupsOfUserResponse {
	s.Body = v
	return s
}

type ListTransferableSkillGroupsRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListTransferableSkillGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTransferableSkillGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListTransferableSkillGroupsRequest) SetInstanceId(v string) *ListTransferableSkillGroupsRequest {
	s.InstanceId = &v
	return s
}

type ListTransferableSkillGroupsResponseBody struct {
	Code           *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SkillGroups    []*ListTransferableSkillGroupsResponseBodySkillGroups `json:"SkillGroups,omitempty" xml:"SkillGroups,omitempty" type:"Repeated"`
	Success        *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListTransferableSkillGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTransferableSkillGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTransferableSkillGroupsResponseBody) SetCode(v string) *ListTransferableSkillGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBody) SetHttpStatusCode(v int32) *ListTransferableSkillGroupsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBody) SetMessage(v string) *ListTransferableSkillGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBody) SetRequestId(v string) *ListTransferableSkillGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBody) SetSkillGroups(v []*ListTransferableSkillGroupsResponseBodySkillGroups) *ListTransferableSkillGroupsResponseBody {
	s.SkillGroups = v
	return s
}

func (s *ListTransferableSkillGroupsResponseBody) SetSuccess(v bool) *ListTransferableSkillGroupsResponseBody {
	s.Success = &v
	return s
}

type ListTransferableSkillGroupsResponseBodySkillGroups struct {
	AccQueueName               *string `json:"AccQueueName,omitempty" xml:"AccQueueName,omitempty"`
	AccSkillGroupName          *string `json:"AccSkillGroupName,omitempty" xml:"AccSkillGroupName,omitempty"`
	AllowPrivateOutboundNumber *bool   `json:"AllowPrivateOutboundNumber,omitempty" xml:"AllowPrivateOutboundNumber,omitempty"`
	InstanceId                 *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RoutingStrategy            *string `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	SkillGroupDescription      *string `json:"SkillGroupDescription,omitempty" xml:"SkillGroupDescription,omitempty"`
	SkillGroupId               *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName             *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
	UserCount                  *int32  `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s ListTransferableSkillGroupsResponseBodySkillGroups) String() string {
	return tea.Prettify(s)
}

func (s ListTransferableSkillGroupsResponseBodySkillGroups) GoString() string {
	return s.String()
}

func (s *ListTransferableSkillGroupsResponseBodySkillGroups) SetAccQueueName(v string) *ListTransferableSkillGroupsResponseBodySkillGroups {
	s.AccQueueName = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBodySkillGroups) SetAccSkillGroupName(v string) *ListTransferableSkillGroupsResponseBodySkillGroups {
	s.AccSkillGroupName = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBodySkillGroups) SetAllowPrivateOutboundNumber(v bool) *ListTransferableSkillGroupsResponseBodySkillGroups {
	s.AllowPrivateOutboundNumber = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBodySkillGroups) SetInstanceId(v string) *ListTransferableSkillGroupsResponseBodySkillGroups {
	s.InstanceId = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBodySkillGroups) SetRoutingStrategy(v string) *ListTransferableSkillGroupsResponseBodySkillGroups {
	s.RoutingStrategy = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBodySkillGroups) SetSkillGroupDescription(v string) *ListTransferableSkillGroupsResponseBodySkillGroups {
	s.SkillGroupDescription = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBodySkillGroups) SetSkillGroupId(v string) *ListTransferableSkillGroupsResponseBodySkillGroups {
	s.SkillGroupId = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBodySkillGroups) SetSkillGroupName(v string) *ListTransferableSkillGroupsResponseBodySkillGroups {
	s.SkillGroupName = &v
	return s
}

func (s *ListTransferableSkillGroupsResponseBodySkillGroups) SetUserCount(v int32) *ListTransferableSkillGroupsResponseBodySkillGroups {
	s.UserCount = &v
	return s
}

type ListTransferableSkillGroupsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListTransferableSkillGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTransferableSkillGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTransferableSkillGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListTransferableSkillGroupsResponse) SetHeaders(v map[string]*string) *ListTransferableSkillGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListTransferableSkillGroupsResponse) SetStatusCode(v int32) *ListTransferableSkillGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTransferableSkillGroupsResponse) SetBody(v *ListTransferableSkillGroupsResponseBody) *ListTransferableSkillGroupsResponse {
	s.Body = v
	return s
}

type ListTrunkProvidersResponseBody struct {
	Code           *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	TrunkProviders []*ListTrunkProvidersResponseBodyTrunkProviders `json:"TrunkProviders,omitempty" xml:"TrunkProviders,omitempty" type:"Repeated"`
}

func (s ListTrunkProvidersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTrunkProvidersResponseBody) GoString() string {
	return s.String()
}

func (s *ListTrunkProvidersResponseBody) SetCode(v string) *ListTrunkProvidersResponseBody {
	s.Code = &v
	return s
}

func (s *ListTrunkProvidersResponseBody) SetHttpStatusCode(v int32) *ListTrunkProvidersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTrunkProvidersResponseBody) SetMessage(v string) *ListTrunkProvidersResponseBody {
	s.Message = &v
	return s
}

func (s *ListTrunkProvidersResponseBody) SetRequestId(v string) *ListTrunkProvidersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTrunkProvidersResponseBody) SetSuccess(v bool) *ListTrunkProvidersResponseBody {
	s.Success = &v
	return s
}

func (s *ListTrunkProvidersResponseBody) SetTrunkProviders(v []*ListTrunkProvidersResponseBodyTrunkProviders) *ListTrunkProvidersResponseBody {
	s.TrunkProviders = v
	return s
}

type ListTrunkProvidersResponseBodyTrunkProviders struct {
	ProviderName *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListTrunkProvidersResponseBodyTrunkProviders) String() string {
	return tea.Prettify(s)
}

func (s ListTrunkProvidersResponseBodyTrunkProviders) GoString() string {
	return s.String()
}

func (s *ListTrunkProvidersResponseBodyTrunkProviders) SetProviderName(v string) *ListTrunkProvidersResponseBodyTrunkProviders {
	s.ProviderName = &v
	return s
}

func (s *ListTrunkProvidersResponseBodyTrunkProviders) SetStatus(v string) *ListTrunkProvidersResponseBodyTrunkProviders {
	s.Status = &v
	return s
}

type ListTrunkProvidersResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListTrunkProvidersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTrunkProvidersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTrunkProvidersResponse) GoString() string {
	return s.String()
}

func (s *ListTrunkProvidersResponse) SetHeaders(v map[string]*string) *ListTrunkProvidersResponse {
	s.Headers = v
	return s
}

func (s *ListTrunkProvidersResponse) SetStatusCode(v int32) *ListTrunkProvidersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTrunkProvidersResponse) SetBody(v *ListTrunkProvidersResponseBody) *ListTrunkProvidersResponse {
	s.Body = v
	return s
}

type ListTrunksOfSkillGroupRequest struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ListTrunksOfSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTrunksOfSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *ListTrunksOfSkillGroupRequest) SetInstanceId(v string) *ListTrunksOfSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListTrunksOfSkillGroupRequest) SetSkillGroupId(v string) *ListTrunksOfSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type ListTrunksOfSkillGroupResponseBody struct {
	Code           *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                            `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	TrunkConfigs   []*ListTrunksOfSkillGroupResponseBodyTrunkConfigs `json:"TrunkConfigs,omitempty" xml:"TrunkConfigs,omitempty" type:"Repeated"`
}

func (s ListTrunksOfSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTrunksOfSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListTrunksOfSkillGroupResponseBody) SetCode(v string) *ListTrunksOfSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ListTrunksOfSkillGroupResponseBody) SetHttpStatusCode(v int32) *ListTrunksOfSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListTrunksOfSkillGroupResponseBody) SetMessage(v string) *ListTrunksOfSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ListTrunksOfSkillGroupResponseBody) SetRequestId(v string) *ListTrunksOfSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTrunksOfSkillGroupResponseBody) SetSuccess(v bool) *ListTrunksOfSkillGroupResponseBody {
	s.Success = &v
	return s
}

func (s *ListTrunksOfSkillGroupResponseBody) SetTrunkConfigs(v []*ListTrunksOfSkillGroupResponseBodyTrunkConfigs) *ListTrunksOfSkillGroupResponseBody {
	s.TrunkConfigs = v
	return s
}

type ListTrunksOfSkillGroupResponseBodyTrunkConfigs struct {
	Primary      *bool   `json:"Primary,omitempty" xml:"Primary,omitempty"`
	ProviderName *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
}

func (s ListTrunksOfSkillGroupResponseBodyTrunkConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListTrunksOfSkillGroupResponseBodyTrunkConfigs) GoString() string {
	return s.String()
}

func (s *ListTrunksOfSkillGroupResponseBodyTrunkConfigs) SetPrimary(v bool) *ListTrunksOfSkillGroupResponseBodyTrunkConfigs {
	s.Primary = &v
	return s
}

func (s *ListTrunksOfSkillGroupResponseBodyTrunkConfigs) SetProviderName(v string) *ListTrunksOfSkillGroupResponseBodyTrunkConfigs {
	s.ProviderName = &v
	return s
}

type ListTrunksOfSkillGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListTrunksOfSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTrunksOfSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTrunksOfSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *ListTrunksOfSkillGroupResponse) SetHeaders(v map[string]*string) *ListTrunksOfSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *ListTrunksOfSkillGroupResponse) SetStatusCode(v int32) *ListTrunksOfSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTrunksOfSkillGroupResponse) SetBody(v *ListTrunksOfSkillGroupResponseBody) *ListTrunksOfSkillGroupResponse {
	s.Body = v
	return s
}

type ListUsersRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUsersRequest) GoString() string {
	return s.String()
}

func (s *ListUsersRequest) SetInstanceId(v string) *ListUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *ListUsersRequest) SetPageNumber(v int32) *ListUsersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUsersRequest) SetPageSize(v int32) *ListUsersRequest {
	s.PageSize = &v
	return s
}

type ListUsersResponseBody struct {
	Code           *string                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                       `json:"Success,omitempty" xml:"Success,omitempty"`
	Users          *ListUsersResponseBodyUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Struct"`
}

func (s ListUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBody) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBody) SetCode(v string) *ListUsersResponseBody {
	s.Code = &v
	return s
}

func (s *ListUsersResponseBody) SetHttpStatusCode(v int32) *ListUsersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListUsersResponseBody) SetMessage(v string) *ListUsersResponseBody {
	s.Message = &v
	return s
}

func (s *ListUsersResponseBody) SetRequestId(v string) *ListUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUsersResponseBody) SetSuccess(v bool) *ListUsersResponseBody {
	s.Success = &v
	return s
}

func (s *ListUsersResponseBody) SetUsers(v *ListUsersResponseBodyUsers) *ListUsersResponseBody {
	s.Users = v
	return s
}

type ListUsersResponseBodyUsers struct {
	List       *ListUsersResponseBodyUsersList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListUsersResponseBodyUsers) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUsers) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUsers) SetList(v *ListUsersResponseBodyUsersList) *ListUsersResponseBodyUsers {
	s.List = v
	return s
}

func (s *ListUsersResponseBodyUsers) SetPageNumber(v int32) *ListUsersResponseBodyUsers {
	s.PageNumber = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetPageSize(v int32) *ListUsersResponseBodyUsers {
	s.PageSize = &v
	return s
}

func (s *ListUsersResponseBodyUsers) SetTotalCount(v int32) *ListUsersResponseBodyUsers {
	s.TotalCount = &v
	return s
}

type ListUsersResponseBodyUsersList struct {
	User []*ListUsersResponseBodyUsersListUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s ListUsersResponseBodyUsersList) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUsersList) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUsersList) SetUser(v []*ListUsersResponseBodyUsersListUser) *ListUsersResponseBodyUsersList {
	s.User = v
	return s
}

type ListUsersResponseBodyUsersListUser struct {
	Detail                  *ListUsersResponseBodyUsersListUserDetail      `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	InstanceId              *string                                        `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Primary                 *bool                                          `json:"Primary,omitempty" xml:"Primary,omitempty"`
	PrivateOutboundNumberId *string                                        `json:"PrivateOutboundNumberId,omitempty" xml:"PrivateOutboundNumberId,omitempty"`
	RamId                   *string                                        `json:"RamId,omitempty" xml:"RamId,omitempty"`
	Roles                   *ListUsersResponseBodyUsersListUserRoles       `json:"Roles,omitempty" xml:"Roles,omitempty" type:"Struct"`
	SkillLevels             *ListUsersResponseBodyUsersListUserSkillLevels `json:"SkillLevels,omitempty" xml:"SkillLevels,omitempty" type:"Struct"`
	UserId                  *string                                        `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListUsersResponseBodyUsersListUser) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUsersListUser) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUsersListUser) SetDetail(v *ListUsersResponseBodyUsersListUserDetail) *ListUsersResponseBodyUsersListUser {
	s.Detail = v
	return s
}

func (s *ListUsersResponseBodyUsersListUser) SetInstanceId(v string) *ListUsersResponseBodyUsersListUser {
	s.InstanceId = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUser) SetPrimary(v bool) *ListUsersResponseBodyUsersListUser {
	s.Primary = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUser) SetPrivateOutboundNumberId(v string) *ListUsersResponseBodyUsersListUser {
	s.PrivateOutboundNumberId = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUser) SetRamId(v string) *ListUsersResponseBodyUsersListUser {
	s.RamId = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUser) SetRoles(v *ListUsersResponseBodyUsersListUserRoles) *ListUsersResponseBodyUsersListUser {
	s.Roles = v
	return s
}

func (s *ListUsersResponseBodyUsersListUser) SetSkillLevels(v *ListUsersResponseBodyUsersListUserSkillLevels) *ListUsersResponseBodyUsersListUser {
	s.SkillLevels = v
	return s
}

func (s *ListUsersResponseBodyUsersListUser) SetUserId(v string) *ListUsersResponseBodyUsersListUser {
	s.UserId = &v
	return s
}

type ListUsersResponseBodyUsersListUserDetail struct {
	Department  *string `json:"Department,omitempty" xml:"Department,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	LoginName   *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Phone       *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s ListUsersResponseBodyUsersListUserDetail) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUsersListUserDetail) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUsersListUserDetail) SetDepartment(v string) *ListUsersResponseBodyUsersListUserDetail {
	s.Department = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserDetail) SetDisplayName(v string) *ListUsersResponseBodyUsersListUserDetail {
	s.DisplayName = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserDetail) SetEmail(v string) *ListUsersResponseBodyUsersListUserDetail {
	s.Email = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserDetail) SetLoginName(v string) *ListUsersResponseBodyUsersListUserDetail {
	s.LoginName = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserDetail) SetPhone(v string) *ListUsersResponseBodyUsersListUserDetail {
	s.Phone = &v
	return s
}

type ListUsersResponseBodyUsersListUserRoles struct {
	Role []*ListUsersResponseBodyUsersListUserRolesRole `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s ListUsersResponseBodyUsersListUserRoles) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUsersListUserRoles) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUsersListUserRoles) SetRole(v []*ListUsersResponseBodyUsersListUserRolesRole) *ListUsersResponseBodyUsersListUserRoles {
	s.Role = v
	return s
}

type ListUsersResponseBodyUsersListUserRolesRole struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RoleDescription *string `json:"RoleDescription,omitempty" xml:"RoleDescription,omitempty"`
	RoleId          *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s ListUsersResponseBodyUsersListUserRolesRole) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUsersListUserRolesRole) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUsersListUserRolesRole) SetInstanceId(v string) *ListUsersResponseBodyUsersListUserRolesRole {
	s.InstanceId = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserRolesRole) SetRoleDescription(v string) *ListUsersResponseBodyUsersListUserRolesRole {
	s.RoleDescription = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserRolesRole) SetRoleId(v string) *ListUsersResponseBodyUsersListUserRolesRole {
	s.RoleId = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserRolesRole) SetRoleName(v string) *ListUsersResponseBodyUsersListUserRolesRole {
	s.RoleName = &v
	return s
}

type ListUsersResponseBodyUsersListUserSkillLevels struct {
	SkillLevel []*ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
}

func (s ListUsersResponseBodyUsersListUserSkillLevels) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUsersListUserSkillLevels) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUsersListUserSkillLevels) SetSkillLevel(v []*ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel) *ListUsersResponseBodyUsersListUserSkillLevels {
	s.SkillLevel = v
	return s
}

type ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel struct {
	Level        *int32                                                        `json:"Level,omitempty" xml:"Level,omitempty"`
	Skill        *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill `json:"Skill,omitempty" xml:"Skill,omitempty" type:"Struct"`
	SkillLevelId *string                                                       `json:"SkillLevelId,omitempty" xml:"SkillLevelId,omitempty"`
}

func (s ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel) SetLevel(v int32) *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel {
	s.Level = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel) SetSkill(v *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel {
	s.Skill = v
	return s
}

func (s *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel) SetSkillLevelId(v string) *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel {
	s.SkillLevelId = &v
	return s
}

type ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill struct {
	InstanceId            *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SkillGroupDescription *string `json:"SkillGroupDescription,omitempty" xml:"SkillGroupDescription,omitempty"`
	SkillGroupId          *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName        *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetInstanceId(v string) *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.InstanceId = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetSkillGroupDescription(v string) *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.SkillGroupDescription = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetSkillGroupId(v string) *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.SkillGroupId = &v
	return s
}

func (s *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetSkillGroupName(v string) *ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.SkillGroupName = &v
	return s
}

type ListUsersResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListUsersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponse) GoString() string {
	return s.String()
}

func (s *ListUsersResponse) SetHeaders(v map[string]*string) *ListUsersResponse {
	s.Headers = v
	return s
}

func (s *ListUsersResponse) SetStatusCode(v int32) *ListUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUsersResponse) SetBody(v *ListUsersResponseBody) *ListUsersResponse {
	s.Body = v
	return s
}

type ListUsersOfSkillGroupRequest struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SkillGroupId *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ListUsersOfSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupRequest) SetInstanceId(v string) *ListUsersOfSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ListUsersOfSkillGroupRequest) SetPageNumber(v int32) *ListUsersOfSkillGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListUsersOfSkillGroupRequest) SetPageSize(v int32) *ListUsersOfSkillGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListUsersOfSkillGroupRequest) SetSkillGroupId(v string) *ListUsersOfSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type ListUsersOfSkillGroupResponseBody struct {
	Code           *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	Users          *ListUsersOfSkillGroupResponseBodyUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Struct"`
}

func (s ListUsersOfSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBody) SetCode(v string) *ListUsersOfSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBody) SetHttpStatusCode(v int32) *ListUsersOfSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBody) SetMessage(v string) *ListUsersOfSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBody) SetRequestId(v string) *ListUsersOfSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBody) SetSuccess(v bool) *ListUsersOfSkillGroupResponseBody {
	s.Success = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBody) SetUsers(v *ListUsersOfSkillGroupResponseBodyUsers) *ListUsersOfSkillGroupResponseBody {
	s.Users = v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsers struct {
	List       *ListUsersOfSkillGroupResponseBodyUsersList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	PageNumber *int32                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListUsersOfSkillGroupResponseBodyUsers) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsers) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsers) SetList(v *ListUsersOfSkillGroupResponseBodyUsersList) *ListUsersOfSkillGroupResponseBodyUsers {
	s.List = v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsers) SetPageNumber(v int32) *ListUsersOfSkillGroupResponseBodyUsers {
	s.PageNumber = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsers) SetPageSize(v int32) *ListUsersOfSkillGroupResponseBodyUsers {
	s.PageSize = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsers) SetTotalCount(v int32) *ListUsersOfSkillGroupResponseBodyUsers {
	s.TotalCount = &v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsersList struct {
	User []*ListUsersOfSkillGroupResponseBodyUsersListUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s ListUsersOfSkillGroupResponseBodyUsersList) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsersList) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsersList) SetUser(v []*ListUsersOfSkillGroupResponseBodyUsersListUser) *ListUsersOfSkillGroupResponseBodyUsersList {
	s.User = v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsersListUser struct {
	Detail      *ListUsersOfSkillGroupResponseBodyUsersListUserDetail      `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	InstanceId  *string                                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RamId       *string                                                    `json:"RamId,omitempty" xml:"RamId,omitempty"`
	Roles       *ListUsersOfSkillGroupResponseBodyUsersListUserRoles       `json:"Roles,omitempty" xml:"Roles,omitempty" type:"Struct"`
	SkillLevels *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels `json:"SkillLevels,omitempty" xml:"SkillLevels,omitempty" type:"Struct"`
	UserId      *string                                                    `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUser) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUser) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUser) SetDetail(v *ListUsersOfSkillGroupResponseBodyUsersListUserDetail) *ListUsersOfSkillGroupResponseBodyUsersListUser {
	s.Detail = v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUser) SetInstanceId(v string) *ListUsersOfSkillGroupResponseBodyUsersListUser {
	s.InstanceId = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUser) SetRamId(v string) *ListUsersOfSkillGroupResponseBodyUsersListUser {
	s.RamId = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUser) SetRoles(v *ListUsersOfSkillGroupResponseBodyUsersListUserRoles) *ListUsersOfSkillGroupResponseBodyUsersListUser {
	s.Roles = v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUser) SetSkillLevels(v *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels) *ListUsersOfSkillGroupResponseBodyUsersListUser {
	s.SkillLevels = v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUser) SetUserId(v string) *ListUsersOfSkillGroupResponseBodyUsersListUser {
	s.UserId = &v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsersListUserDetail struct {
	Department  *string `json:"Department,omitempty" xml:"Department,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	LoginName   *string `json:"LoginName,omitempty" xml:"LoginName,omitempty"`
	Phone       *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserDetail) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserDetail) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserDetail) SetDepartment(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserDetail {
	s.Department = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserDetail) SetDisplayName(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserDetail {
	s.DisplayName = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserDetail) SetEmail(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserDetail {
	s.Email = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserDetail) SetLoginName(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserDetail {
	s.LoginName = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserDetail) SetPhone(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserDetail {
	s.Phone = &v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsersListUserRoles struct {
	Role []*ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserRoles) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserRoles) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRoles) SetRole(v []*ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole) *ListUsersOfSkillGroupResponseBodyUsersListUserRoles {
	s.Role = v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole struct {
	InstanceId      *string                                                            `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Privileges      *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges `json:"Privileges,omitempty" xml:"Privileges,omitempty" type:"Struct"`
	RoleDescription *string                                                            `json:"RoleDescription,omitempty" xml:"RoleDescription,omitempty"`
	RoleId          *string                                                            `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	RoleName        *string                                                            `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	UserCount       *int32                                                             `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole) SetInstanceId(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole {
	s.InstanceId = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole) SetPrivileges(v *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges) *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole {
	s.Privileges = v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole) SetRoleDescription(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole {
	s.RoleDescription = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole) SetRoleId(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole {
	s.RoleId = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole) SetRoleName(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole {
	s.RoleName = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole) SetUserCount(v int32) *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole {
	s.UserCount = &v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges struct {
	Privilege []*ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege `json:"Privilege,omitempty" xml:"Privilege,omitempty" type:"Repeated"`
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges) SetPrivilege(v []*ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege) *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges {
	s.Privilege = v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege struct {
	PrivilegeDescription *string `json:"PrivilegeDescription,omitempty" xml:"PrivilegeDescription,omitempty"`
	PrivilegeId          *string `json:"PrivilegeId,omitempty" xml:"PrivilegeId,omitempty"`
	PrivilegeName        *string `json:"PrivilegeName,omitempty" xml:"PrivilegeName,omitempty"`
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege) SetPrivilegeDescription(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege {
	s.PrivilegeDescription = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege) SetPrivilegeId(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege {
	s.PrivilegeId = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege) SetPrivilegeName(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege {
	s.PrivilegeName = &v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels struct {
	SkillLevel []*ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels) SetSkillLevel(v []*ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel) *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels {
	s.SkillLevel = v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel struct {
	Level        *int32                                                                    `json:"Level,omitempty" xml:"Level,omitempty"`
	Skill        *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill `json:"Skill,omitempty" xml:"Skill,omitempty" type:"Struct"`
	SkillLevelId *string                                                                   `json:"SkillLevelId,omitempty" xml:"SkillLevelId,omitempty"`
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel) SetLevel(v int32) *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel {
	s.Level = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel) SetSkill(v *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill) *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel {
	s.Skill = v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel) SetSkillLevelId(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel {
	s.SkillLevelId = &v
	return s
}

type ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill struct {
	InstanceId            *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SkillGroupDescription *string `json:"SkillGroupDescription,omitempty" xml:"SkillGroupDescription,omitempty"`
	SkillGroupId          *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName        *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetInstanceId(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.InstanceId = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetSkillGroupDescription(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.SkillGroupDescription = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetSkillGroupId(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.SkillGroupId = &v
	return s
}

func (s *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill) SetSkillGroupName(v string) *ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill {
	s.SkillGroupName = &v
	return s
}

type ListUsersOfSkillGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListUsersOfSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListUsersOfSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUsersOfSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *ListUsersOfSkillGroupResponse) SetHeaders(v map[string]*string) *ListUsersOfSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *ListUsersOfSkillGroupResponse) SetStatusCode(v int32) *ListUsersOfSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUsersOfSkillGroupResponse) SetBody(v *ListUsersOfSkillGroupResponseBody) *ListUsersOfSkillGroupResponse {
	s.Body = v
	return s
}

type ListVoiceAppraiseRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ListVoiceAppraiseRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVoiceAppraiseRequest) GoString() string {
	return s.String()
}

func (s *ListVoiceAppraiseRequest) SetInstanceId(v string) *ListVoiceAppraiseRequest {
	s.InstanceId = &v
	return s
}

type ListVoiceAppraiseResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	ContactFlow    *ListVoiceAppraiseResponseBodyContactFlow `json:"ContactFlow,omitempty" xml:"ContactFlow,omitempty" type:"Struct"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	Notice         *string                                   `json:"Notice,omitempty" xml:"Notice,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListVoiceAppraiseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVoiceAppraiseResponseBody) GoString() string {
	return s.String()
}

func (s *ListVoiceAppraiseResponseBody) SetCode(v string) *ListVoiceAppraiseResponseBody {
	s.Code = &v
	return s
}

func (s *ListVoiceAppraiseResponseBody) SetContactFlow(v *ListVoiceAppraiseResponseBodyContactFlow) *ListVoiceAppraiseResponseBody {
	s.ContactFlow = v
	return s
}

func (s *ListVoiceAppraiseResponseBody) SetHttpStatusCode(v int32) *ListVoiceAppraiseResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListVoiceAppraiseResponseBody) SetMessage(v string) *ListVoiceAppraiseResponseBody {
	s.Message = &v
	return s
}

func (s *ListVoiceAppraiseResponseBody) SetNotice(v string) *ListVoiceAppraiseResponseBody {
	s.Notice = &v
	return s
}

func (s *ListVoiceAppraiseResponseBody) SetRequestId(v string) *ListVoiceAppraiseResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListVoiceAppraiseResponseBody) SetSuccess(v bool) *ListVoiceAppraiseResponseBody {
	s.Success = &v
	return s
}

type ListVoiceAppraiseResponseBodyContactFlow struct {
	AppliedVersion         *string                                               `json:"AppliedVersion,omitempty" xml:"AppliedVersion,omitempty"`
	ContactFlowDescription *string                                               `json:"ContactFlowDescription,omitempty" xml:"ContactFlowDescription,omitempty"`
	ContactFlowId          *string                                               `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowName        *string                                               `json:"ContactFlowName,omitempty" xml:"ContactFlowName,omitempty"`
	InstanceId             *string                                               `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumbers           *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty" type:"Struct"`
	Type                   *string                                               `json:"Type,omitempty" xml:"Type,omitempty"`
	Versions               *ListVoiceAppraiseResponseBodyContactFlowVersions     `json:"Versions,omitempty" xml:"Versions,omitempty" type:"Struct"`
}

func (s ListVoiceAppraiseResponseBodyContactFlow) String() string {
	return tea.Prettify(s)
}

func (s ListVoiceAppraiseResponseBodyContactFlow) GoString() string {
	return s.String()
}

func (s *ListVoiceAppraiseResponseBodyContactFlow) SetAppliedVersion(v string) *ListVoiceAppraiseResponseBodyContactFlow {
	s.AppliedVersion = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlow) SetContactFlowDescription(v string) *ListVoiceAppraiseResponseBodyContactFlow {
	s.ContactFlowDescription = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlow) SetContactFlowId(v string) *ListVoiceAppraiseResponseBodyContactFlow {
	s.ContactFlowId = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlow) SetContactFlowName(v string) *ListVoiceAppraiseResponseBodyContactFlow {
	s.ContactFlowName = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlow) SetInstanceId(v string) *ListVoiceAppraiseResponseBodyContactFlow {
	s.InstanceId = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlow) SetPhoneNumbers(v *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers) *ListVoiceAppraiseResponseBodyContactFlow {
	s.PhoneNumbers = v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlow) SetType(v string) *ListVoiceAppraiseResponseBodyContactFlow {
	s.Type = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlow) SetVersions(v *ListVoiceAppraiseResponseBodyContactFlowVersions) *ListVoiceAppraiseResponseBodyContactFlow {
	s.Versions = v
	return s
}

type ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers struct {
	PhoneNumber []*ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Repeated"`
}

func (s ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers) String() string {
	return tea.Prettify(s)
}

func (s ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers) GoString() string {
	return s.String()
}

func (s *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers) SetPhoneNumber(v []*ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber) *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers {
	s.PhoneNumber = v
	return s
}

type ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber struct {
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	RemainingTime          *int32  `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	Trunks                 *int32  `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
}

func (s ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber) GoString() string {
	return s.String()
}

func (s *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber) SetInstanceId(v string) *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber) SetNumber(v string) *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.Number = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber) SetPhoneNumberDescription(v string) *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber) SetPhoneNumberId(v string) *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber) SetRemainingTime(v int32) *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber) SetTrunks(v int32) *ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber {
	s.Trunks = &v
	return s
}

type ListVoiceAppraiseResponseBodyContactFlowVersions struct {
	ContactFlowVersion []*ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion `json:"ContactFlowVersion,omitempty" xml:"ContactFlowVersion,omitempty" type:"Repeated"`
}

func (s ListVoiceAppraiseResponseBodyContactFlowVersions) String() string {
	return tea.Prettify(s)
}

func (s ListVoiceAppraiseResponseBodyContactFlowVersions) GoString() string {
	return s.String()
}

func (s *ListVoiceAppraiseResponseBodyContactFlowVersions) SetContactFlowVersion(v []*ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion) *ListVoiceAppraiseResponseBodyContactFlowVersions {
	s.ContactFlowVersion = v
	return s
}

type ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion struct {
	ContactFlowVersionDescription *string `json:"ContactFlowVersionDescription,omitempty" xml:"ContactFlowVersionDescription,omitempty"`
	ContactFlowVersionId          *string `json:"ContactFlowVersionId,omitempty" xml:"ContactFlowVersionId,omitempty"`
	Content                       *string `json:"Content,omitempty" xml:"Content,omitempty"`
	LastModified                  *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	LastModifiedBy                *string `json:"LastModifiedBy,omitempty" xml:"LastModifiedBy,omitempty"`
	Status                        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Version                       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion) String() string {
	return tea.Prettify(s)
}

func (s ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion) GoString() string {
	return s.String()
}

func (s *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion) SetContactFlowVersionDescription(v string) *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion {
	s.ContactFlowVersionDescription = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion) SetContactFlowVersionId(v string) *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion {
	s.ContactFlowVersionId = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion) SetContent(v string) *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion {
	s.Content = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion) SetLastModified(v string) *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion {
	s.LastModified = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion) SetLastModifiedBy(v string) *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion {
	s.LastModifiedBy = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion) SetStatus(v string) *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion {
	s.Status = &v
	return s
}

func (s *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion) SetVersion(v string) *ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion {
	s.Version = &v
	return s
}

type ListVoiceAppraiseResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListVoiceAppraiseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListVoiceAppraiseResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVoiceAppraiseResponse) GoString() string {
	return s.String()
}

func (s *ListVoiceAppraiseResponse) SetHeaders(v map[string]*string) *ListVoiceAppraiseResponse {
	s.Headers = v
	return s
}

func (s *ListVoiceAppraiseResponse) SetStatusCode(v int32) *ListVoiceAppraiseResponse {
	s.StatusCode = &v
	return s
}

func (s *ListVoiceAppraiseResponse) SetBody(v *ListVoiceAppraiseResponseBody) *ListVoiceAppraiseResponse {
	s.Body = v
	return s
}

type ModifyAgentDeviceRequest struct {
	AgentDeviceId *int64  `json:"AgentDeviceId,omitempty" xml:"AgentDeviceId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IsLogin       *int32  `json:"IsLogin,omitempty" xml:"IsLogin,omitempty"`
}

func (s ModifyAgentDeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAgentDeviceRequest) GoString() string {
	return s.String()
}

func (s *ModifyAgentDeviceRequest) SetAgentDeviceId(v int64) *ModifyAgentDeviceRequest {
	s.AgentDeviceId = &v
	return s
}

func (s *ModifyAgentDeviceRequest) SetInstanceId(v string) *ModifyAgentDeviceRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyAgentDeviceRequest) SetIsLogin(v int32) *ModifyAgentDeviceRequest {
	s.IsLogin = &v
	return s
}

type ModifyAgentDeviceResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyAgentDeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAgentDeviceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAgentDeviceResponseBody) SetCode(v string) *ModifyAgentDeviceResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyAgentDeviceResponseBody) SetHttpStatusCode(v int32) *ModifyAgentDeviceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyAgentDeviceResponseBody) SetMessage(v string) *ModifyAgentDeviceResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyAgentDeviceResponseBody) SetRequestId(v string) *ModifyAgentDeviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyAgentDeviceResponseBody) SetSuccess(v bool) *ModifyAgentDeviceResponseBody {
	s.Success = &v
	return s
}

type ModifyAgentDeviceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyAgentDeviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAgentDeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAgentDeviceResponse) GoString() string {
	return s.String()
}

func (s *ModifyAgentDeviceResponse) SetHeaders(v map[string]*string) *ModifyAgentDeviceResponse {
	s.Headers = v
	return s
}

func (s *ModifyAgentDeviceResponse) SetStatusCode(v int32) *ModifyAgentDeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAgentDeviceResponse) SetBody(v *ModifyAgentDeviceResponseBody) *ModifyAgentDeviceResponse {
	s.Body = v
	return s
}

type ModifyPhoneNumberRequest struct {
	ContactFlowId *string   `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	InstanceId    *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumberId *string   `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	SkillGroupId  []*string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty" type:"Repeated"`
	Usage         *string   `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ModifyPhoneNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneNumberRequest) GoString() string {
	return s.String()
}

func (s *ModifyPhoneNumberRequest) SetContactFlowId(v string) *ModifyPhoneNumberRequest {
	s.ContactFlowId = &v
	return s
}

func (s *ModifyPhoneNumberRequest) SetInstanceId(v string) *ModifyPhoneNumberRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyPhoneNumberRequest) SetPhoneNumberId(v string) *ModifyPhoneNumberRequest {
	s.PhoneNumberId = &v
	return s
}

func (s *ModifyPhoneNumberRequest) SetSkillGroupId(v []*string) *ModifyPhoneNumberRequest {
	s.SkillGroupId = v
	return s
}

func (s *ModifyPhoneNumberRequest) SetUsage(v string) *ModifyPhoneNumberRequest {
	s.Usage = &v
	return s
}

type ModifyPhoneNumberResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	PhoneNumber    *ModifyPhoneNumberResponseBodyPhoneNumber `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty" type:"Struct"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyPhoneNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneNumberResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPhoneNumberResponseBody) SetCode(v string) *ModifyPhoneNumberResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyPhoneNumberResponseBody) SetHttpStatusCode(v int32) *ModifyPhoneNumberResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyPhoneNumberResponseBody) SetMessage(v string) *ModifyPhoneNumberResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyPhoneNumberResponseBody) SetPhoneNumber(v *ModifyPhoneNumberResponseBodyPhoneNumber) *ModifyPhoneNumberResponseBody {
	s.PhoneNumber = v
	return s
}

func (s *ModifyPhoneNumberResponseBody) SetRequestId(v string) *ModifyPhoneNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyPhoneNumberResponseBody) SetSuccess(v bool) *ModifyPhoneNumberResponseBody {
	s.Success = &v
	return s
}

type ModifyPhoneNumberResponseBodyPhoneNumber struct {
	AllowOutbound          *bool                                                `json:"AllowOutbound,omitempty" xml:"AllowOutbound,omitempty"`
	ContactFlow            *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow `json:"ContactFlow,omitempty" xml:"ContactFlow,omitempty" type:"Struct"`
	InstanceId             *string                                              `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Number                 *string                                              `json:"Number,omitempty" xml:"Number,omitempty"`
	PhoneNumberDescription *string                                              `json:"PhoneNumberDescription,omitempty" xml:"PhoneNumberDescription,omitempty"`
	PhoneNumberId          *string                                              `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
	RemainingTime          *int32                                               `json:"RemainingTime,omitempty" xml:"RemainingTime,omitempty"`
	SkillGroups            *ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups `json:"SkillGroups,omitempty" xml:"SkillGroups,omitempty" type:"Struct"`
	TestOnly               *bool                                                `json:"TestOnly,omitempty" xml:"TestOnly,omitempty"`
	Trunks                 *int32                                               `json:"Trunks,omitempty" xml:"Trunks,omitempty"`
	Usage                  *string                                              `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s ModifyPhoneNumberResponseBodyPhoneNumber) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneNumberResponseBodyPhoneNumber) GoString() string {
	return s.String()
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetAllowOutbound(v bool) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.AllowOutbound = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetContactFlow(v *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.ContactFlow = v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetInstanceId(v string) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.InstanceId = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetNumber(v string) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.Number = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetPhoneNumberDescription(v string) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.PhoneNumberDescription = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetPhoneNumberId(v string) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.PhoneNumberId = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetRemainingTime(v int32) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.RemainingTime = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetSkillGroups(v *ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.SkillGroups = v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetTestOnly(v bool) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.TestOnly = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetTrunks(v int32) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.Trunks = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumber) SetUsage(v string) *ModifyPhoneNumberResponseBodyPhoneNumber {
	s.Usage = &v
	return s
}

type ModifyPhoneNumberResponseBodyPhoneNumberContactFlow struct {
	ContactFlowDescription *string `json:"ContactFlowDescription,omitempty" xml:"ContactFlowDescription,omitempty"`
	ContactFlowId          *string `json:"ContactFlowId,omitempty" xml:"ContactFlowId,omitempty"`
	ContactFlowName        *string `json:"ContactFlowName,omitempty" xml:"ContactFlowName,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Type                   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyPhoneNumberResponseBodyPhoneNumberContactFlow) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneNumberResponseBodyPhoneNumberContactFlow) GoString() string {
	return s.String()
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow) SetContactFlowDescription(v string) *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow {
	s.ContactFlowDescription = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow) SetContactFlowId(v string) *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow {
	s.ContactFlowId = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow) SetContactFlowName(v string) *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow {
	s.ContactFlowName = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow) SetInstanceId(v string) *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow {
	s.InstanceId = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow) SetType(v string) *ModifyPhoneNumberResponseBodyPhoneNumberContactFlow {
	s.Type = &v
	return s
}

type ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups struct {
	SkillGroup []*ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup `json:"SkillGroup,omitempty" xml:"SkillGroup,omitempty" type:"Repeated"`
}

func (s ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups) GoString() string {
	return s.String()
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups) SetSkillGroup(v []*ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup) *ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups {
	s.SkillGroup = v
	return s
}

type ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup struct {
	SkillGroupId   *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillGroupName *string `json:"SkillGroupName,omitempty" xml:"SkillGroupName,omitempty"`
}

func (s ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup) GoString() string {
	return s.String()
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup) SetSkillGroupId(v string) *ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup {
	s.SkillGroupId = &v
	return s
}

func (s *ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup) SetSkillGroupName(v string) *ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup {
	s.SkillGroupName = &v
	return s
}

type ModifyPhoneNumberResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyPhoneNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyPhoneNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneNumberResponse) GoString() string {
	return s.String()
}

func (s *ModifyPhoneNumberResponse) SetHeaders(v map[string]*string) *ModifyPhoneNumberResponse {
	s.Headers = v
	return s
}

func (s *ModifyPhoneNumberResponse) SetStatusCode(v int32) *ModifyPhoneNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPhoneNumberResponse) SetBody(v *ModifyPhoneNumberResponseBody) *ModifyPhoneNumberResponse {
	s.Body = v
	return s
}

type ModifyPhoneTagsRequest struct {
	InstanceId       *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ServiceTag       *string   `json:"ServiceTag,omitempty" xml:"ServiceTag,omitempty"`
	SkillGroupIdList []*string `json:"SkillGroupIdList,omitempty" xml:"SkillGroupIdList,omitempty" type:"Repeated"`
}

func (s ModifyPhoneTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneTagsRequest) GoString() string {
	return s.String()
}

func (s *ModifyPhoneTagsRequest) SetInstanceId(v string) *ModifyPhoneTagsRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyPhoneTagsRequest) SetServiceTag(v string) *ModifyPhoneTagsRequest {
	s.ServiceTag = &v
	return s
}

func (s *ModifyPhoneTagsRequest) SetSkillGroupIdList(v []*string) *ModifyPhoneTagsRequest {
	s.SkillGroupIdList = v
	return s
}

type ModifyPhoneTagsResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyPhoneTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPhoneTagsResponseBody) SetCode(v string) *ModifyPhoneTagsResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyPhoneTagsResponseBody) SetHttpStatusCode(v int32) *ModifyPhoneTagsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyPhoneTagsResponseBody) SetMessage(v string) *ModifyPhoneTagsResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyPhoneTagsResponseBody) SetRequestId(v string) *ModifyPhoneTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyPhoneTagsResponseBody) SetSuccess(v bool) *ModifyPhoneTagsResponseBody {
	s.Success = &v
	return s
}

type ModifyPhoneTagsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyPhoneTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyPhoneTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPhoneTagsResponse) GoString() string {
	return s.String()
}

func (s *ModifyPhoneTagsResponse) SetHeaders(v map[string]*string) *ModifyPhoneTagsResponse {
	s.Headers = v
	return s
}

func (s *ModifyPhoneTagsResponse) SetStatusCode(v int32) *ModifyPhoneTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPhoneTagsResponse) SetBody(v *ModifyPhoneTagsResponseBody) *ModifyPhoneTagsResponse {
	s.Body = v
	return s
}

type ModifyPrimaryTrunksOfSkillGroupRequest struct {
	InstanceId          *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PrimaryProviderName []*string `json:"PrimaryProviderName,omitempty" xml:"PrimaryProviderName,omitempty" type:"Repeated"`
	SkillGroupId        *string   `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ModifyPrimaryTrunksOfSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrimaryTrunksOfSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyPrimaryTrunksOfSkillGroupRequest) SetInstanceId(v string) *ModifyPrimaryTrunksOfSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyPrimaryTrunksOfSkillGroupRequest) SetPrimaryProviderName(v []*string) *ModifyPrimaryTrunksOfSkillGroupRequest {
	s.PrimaryProviderName = v
	return s
}

func (s *ModifyPrimaryTrunksOfSkillGroupRequest) SetSkillGroupId(v string) *ModifyPrimaryTrunksOfSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

type ModifyPrimaryTrunksOfSkillGroupResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyPrimaryTrunksOfSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrimaryTrunksOfSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPrimaryTrunksOfSkillGroupResponseBody) SetCode(v string) *ModifyPrimaryTrunksOfSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyPrimaryTrunksOfSkillGroupResponseBody) SetHttpStatusCode(v int32) *ModifyPrimaryTrunksOfSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyPrimaryTrunksOfSkillGroupResponseBody) SetMessage(v string) *ModifyPrimaryTrunksOfSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyPrimaryTrunksOfSkillGroupResponseBody) SetRequestId(v string) *ModifyPrimaryTrunksOfSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyPrimaryTrunksOfSkillGroupResponseBody) SetSuccess(v bool) *ModifyPrimaryTrunksOfSkillGroupResponseBody {
	s.Success = &v
	return s
}

type ModifyPrimaryTrunksOfSkillGroupResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyPrimaryTrunksOfSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyPrimaryTrunksOfSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrimaryTrunksOfSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyPrimaryTrunksOfSkillGroupResponse) SetHeaders(v map[string]*string) *ModifyPrimaryTrunksOfSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyPrimaryTrunksOfSkillGroupResponse) SetStatusCode(v int32) *ModifyPrimaryTrunksOfSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPrimaryTrunksOfSkillGroupResponse) SetBody(v *ModifyPrimaryTrunksOfSkillGroupResponseBody) *ModifyPrimaryTrunksOfSkillGroupResponse {
	s.Body = v
	return s
}

type ModifyPrivacyNumberCallDetailRequest struct {
	CallId     *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	ContactId  *string `json:"ContactId,omitempty" xml:"ContactId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ModifyPrivacyNumberCallDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrivacyNumberCallDetailRequest) GoString() string {
	return s.String()
}

func (s *ModifyPrivacyNumberCallDetailRequest) SetCallId(v string) *ModifyPrivacyNumberCallDetailRequest {
	s.CallId = &v
	return s
}

func (s *ModifyPrivacyNumberCallDetailRequest) SetContactId(v string) *ModifyPrivacyNumberCallDetailRequest {
	s.ContactId = &v
	return s
}

func (s *ModifyPrivacyNumberCallDetailRequest) SetInstanceId(v string) *ModifyPrivacyNumberCallDetailRequest {
	s.InstanceId = &v
	return s
}

type ModifyPrivacyNumberCallDetailResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyPrivacyNumberCallDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrivacyNumberCallDetailResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPrivacyNumberCallDetailResponseBody) SetCode(v string) *ModifyPrivacyNumberCallDetailResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyPrivacyNumberCallDetailResponseBody) SetHttpStatusCode(v int32) *ModifyPrivacyNumberCallDetailResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyPrivacyNumberCallDetailResponseBody) SetMessage(v string) *ModifyPrivacyNumberCallDetailResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyPrivacyNumberCallDetailResponseBody) SetRequestId(v string) *ModifyPrivacyNumberCallDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyPrivacyNumberCallDetailResponseBody) SetSuccess(v bool) *ModifyPrivacyNumberCallDetailResponseBody {
	s.Success = &v
	return s
}

type ModifyPrivacyNumberCallDetailResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyPrivacyNumberCallDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyPrivacyNumberCallDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrivacyNumberCallDetailResponse) GoString() string {
	return s.String()
}

func (s *ModifyPrivacyNumberCallDetailResponse) SetHeaders(v map[string]*string) *ModifyPrivacyNumberCallDetailResponse {
	s.Headers = v
	return s
}

func (s *ModifyPrivacyNumberCallDetailResponse) SetStatusCode(v int32) *ModifyPrivacyNumberCallDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPrivacyNumberCallDetailResponse) SetBody(v *ModifyPrivacyNumberCallDetailResponseBody) *ModifyPrivacyNumberCallDetailResponse {
	s.Body = v
	return s
}

type ModifySkillGroupRequest struct {
	AllowPrivateOutboundNumber *bool     `json:"AllowPrivateOutboundNumber,omitempty" xml:"AllowPrivateOutboundNumber,omitempty"`
	Description                *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId                 *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name                       *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	OutboundPhoneNumberId      []*string `json:"OutboundPhoneNumberId,omitempty" xml:"OutboundPhoneNumberId,omitempty" type:"Repeated"`
	RoutingStrategy            *string   `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	SkillGroupId               *string   `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	SkillLevel                 []*int32  `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
	UserId                     []*string `json:"UserId,omitempty" xml:"UserId,omitempty" type:"Repeated"`
}

func (s ModifySkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupRequest) SetAllowPrivateOutboundNumber(v bool) *ModifySkillGroupRequest {
	s.AllowPrivateOutboundNumber = &v
	return s
}

func (s *ModifySkillGroupRequest) SetDescription(v string) *ModifySkillGroupRequest {
	s.Description = &v
	return s
}

func (s *ModifySkillGroupRequest) SetInstanceId(v string) *ModifySkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifySkillGroupRequest) SetName(v string) *ModifySkillGroupRequest {
	s.Name = &v
	return s
}

func (s *ModifySkillGroupRequest) SetOutboundPhoneNumberId(v []*string) *ModifySkillGroupRequest {
	s.OutboundPhoneNumberId = v
	return s
}

func (s *ModifySkillGroupRequest) SetRoutingStrategy(v string) *ModifySkillGroupRequest {
	s.RoutingStrategy = &v
	return s
}

func (s *ModifySkillGroupRequest) SetSkillGroupId(v string) *ModifySkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

func (s *ModifySkillGroupRequest) SetSkillLevel(v []*int32) *ModifySkillGroupRequest {
	s.SkillLevel = v
	return s
}

func (s *ModifySkillGroupRequest) SetUserId(v []*string) *ModifySkillGroupRequest {
	s.UserId = v
	return s
}

type ModifySkillGroupResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifySkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupResponseBody) SetCode(v string) *ModifySkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ModifySkillGroupResponseBody) SetHttpStatusCode(v int32) *ModifySkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifySkillGroupResponseBody) SetMessage(v string) *ModifySkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ModifySkillGroupResponseBody) SetRequestId(v string) *ModifySkillGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySkillGroupResponseBody) SetSuccess(v bool) *ModifySkillGroupResponseBody {
	s.Success = &v
	return s
}

type ModifySkillGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupResponse) SetHeaders(v map[string]*string) *ModifySkillGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifySkillGroupResponse) SetStatusCode(v int32) *ModifySkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySkillGroupResponse) SetBody(v *ModifySkillGroupResponseBody) *ModifySkillGroupResponse {
	s.Body = v
	return s
}

type ModifySkillGroupBasicInfoRequest struct {
	AllowPrivateOutboundNumber *bool   `json:"AllowPrivateOutboundNumber,omitempty" xml:"AllowPrivateOutboundNumber,omitempty"`
	Description                *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceId                 *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name                       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RoutingStrategy            *string `json:"RoutingStrategy,omitempty" xml:"RoutingStrategy,omitempty"`
	SkillGroupId               *string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ModifySkillGroupBasicInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupBasicInfoRequest) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupBasicInfoRequest) SetAllowPrivateOutboundNumber(v bool) *ModifySkillGroupBasicInfoRequest {
	s.AllowPrivateOutboundNumber = &v
	return s
}

func (s *ModifySkillGroupBasicInfoRequest) SetDescription(v string) *ModifySkillGroupBasicInfoRequest {
	s.Description = &v
	return s
}

func (s *ModifySkillGroupBasicInfoRequest) SetInstanceId(v string) *ModifySkillGroupBasicInfoRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifySkillGroupBasicInfoRequest) SetName(v string) *ModifySkillGroupBasicInfoRequest {
	s.Name = &v
	return s
}

func (s *ModifySkillGroupBasicInfoRequest) SetRoutingStrategy(v string) *ModifySkillGroupBasicInfoRequest {
	s.RoutingStrategy = &v
	return s
}

func (s *ModifySkillGroupBasicInfoRequest) SetSkillGroupId(v string) *ModifySkillGroupBasicInfoRequest {
	s.SkillGroupId = &v
	return s
}

type ModifySkillGroupBasicInfoResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifySkillGroupBasicInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupBasicInfoResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupBasicInfoResponseBody) SetCode(v string) *ModifySkillGroupBasicInfoResponseBody {
	s.Code = &v
	return s
}

func (s *ModifySkillGroupBasicInfoResponseBody) SetHttpStatusCode(v int32) *ModifySkillGroupBasicInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifySkillGroupBasicInfoResponseBody) SetMessage(v string) *ModifySkillGroupBasicInfoResponseBody {
	s.Message = &v
	return s
}

func (s *ModifySkillGroupBasicInfoResponseBody) SetRequestId(v string) *ModifySkillGroupBasicInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySkillGroupBasicInfoResponseBody) SetSuccess(v bool) *ModifySkillGroupBasicInfoResponseBody {
	s.Success = &v
	return s
}

type ModifySkillGroupBasicInfoResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySkillGroupBasicInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySkillGroupBasicInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupBasicInfoResponse) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupBasicInfoResponse) SetHeaders(v map[string]*string) *ModifySkillGroupBasicInfoResponse {
	s.Headers = v
	return s
}

func (s *ModifySkillGroupBasicInfoResponse) SetStatusCode(v int32) *ModifySkillGroupBasicInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySkillGroupBasicInfoResponse) SetBody(v *ModifySkillGroupBasicInfoResponseBody) *ModifySkillGroupBasicInfoResponse {
	s.Body = v
	return s
}

type ModifySkillGroupOfUserRequest struct {
	InstanceId   *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RoleId       []*string `json:"RoleId,omitempty" xml:"RoleId,omitempty" type:"Repeated"`
	SkillGroupId []*string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty" type:"Repeated"`
	SkillLevel   []*int32  `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
	UserId       *string   `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ModifySkillGroupOfUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupOfUserRequest) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupOfUserRequest) SetInstanceId(v string) *ModifySkillGroupOfUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifySkillGroupOfUserRequest) SetRoleId(v []*string) *ModifySkillGroupOfUserRequest {
	s.RoleId = v
	return s
}

func (s *ModifySkillGroupOfUserRequest) SetSkillGroupId(v []*string) *ModifySkillGroupOfUserRequest {
	s.SkillGroupId = v
	return s
}

func (s *ModifySkillGroupOfUserRequest) SetSkillLevel(v []*int32) *ModifySkillGroupOfUserRequest {
	s.SkillLevel = v
	return s
}

func (s *ModifySkillGroupOfUserRequest) SetUserId(v string) *ModifySkillGroupOfUserRequest {
	s.UserId = &v
	return s
}

type ModifySkillGroupOfUserResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifySkillGroupOfUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupOfUserResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupOfUserResponseBody) SetCode(v string) *ModifySkillGroupOfUserResponseBody {
	s.Code = &v
	return s
}

func (s *ModifySkillGroupOfUserResponseBody) SetHttpStatusCode(v int32) *ModifySkillGroupOfUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifySkillGroupOfUserResponseBody) SetMessage(v string) *ModifySkillGroupOfUserResponseBody {
	s.Message = &v
	return s
}

func (s *ModifySkillGroupOfUserResponseBody) SetRequestId(v string) *ModifySkillGroupOfUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySkillGroupOfUserResponseBody) SetSuccess(v bool) *ModifySkillGroupOfUserResponseBody {
	s.Success = &v
	return s
}

type ModifySkillGroupOfUserResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySkillGroupOfUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySkillGroupOfUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupOfUserResponse) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupOfUserResponse) SetHeaders(v map[string]*string) *ModifySkillGroupOfUserResponse {
	s.Headers = v
	return s
}

func (s *ModifySkillGroupOfUserResponse) SetStatusCode(v int32) *ModifySkillGroupOfUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySkillGroupOfUserResponse) SetBody(v *ModifySkillGroupOfUserResponseBody) *ModifySkillGroupOfUserResponse {
	s.Body = v
	return s
}

type ModifySkillGroupOutboundNumbersRequest struct {
	InstanceId            *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OperationType         *int32    `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	OutboundPhoneNumberId []*string `json:"OutboundPhoneNumberId,omitempty" xml:"OutboundPhoneNumberId,omitempty" type:"Repeated"`
	SkillGroupId          *string   `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
}

func (s ModifySkillGroupOutboundNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupOutboundNumbersRequest) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupOutboundNumbersRequest) SetInstanceId(v string) *ModifySkillGroupOutboundNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifySkillGroupOutboundNumbersRequest) SetOperationType(v int32) *ModifySkillGroupOutboundNumbersRequest {
	s.OperationType = &v
	return s
}

func (s *ModifySkillGroupOutboundNumbersRequest) SetOutboundPhoneNumberId(v []*string) *ModifySkillGroupOutboundNumbersRequest {
	s.OutboundPhoneNumberId = v
	return s
}

func (s *ModifySkillGroupOutboundNumbersRequest) SetSkillGroupId(v string) *ModifySkillGroupOutboundNumbersRequest {
	s.SkillGroupId = &v
	return s
}

type ModifySkillGroupOutboundNumbersResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifySkillGroupOutboundNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupOutboundNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupOutboundNumbersResponseBody) SetCode(v string) *ModifySkillGroupOutboundNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *ModifySkillGroupOutboundNumbersResponseBody) SetHttpStatusCode(v int32) *ModifySkillGroupOutboundNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifySkillGroupOutboundNumbersResponseBody) SetMessage(v string) *ModifySkillGroupOutboundNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *ModifySkillGroupOutboundNumbersResponseBody) SetRequestId(v string) *ModifySkillGroupOutboundNumbersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySkillGroupOutboundNumbersResponseBody) SetSuccess(v bool) *ModifySkillGroupOutboundNumbersResponseBody {
	s.Success = &v
	return s
}

type ModifySkillGroupOutboundNumbersResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySkillGroupOutboundNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySkillGroupOutboundNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySkillGroupOutboundNumbersResponse) GoString() string {
	return s.String()
}

func (s *ModifySkillGroupOutboundNumbersResponse) SetHeaders(v map[string]*string) *ModifySkillGroupOutboundNumbersResponse {
	s.Headers = v
	return s
}

func (s *ModifySkillGroupOutboundNumbersResponse) SetStatusCode(v int32) *ModifySkillGroupOutboundNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySkillGroupOutboundNumbersResponse) SetBody(v *ModifySkillGroupOutboundNumbersResponseBody) *ModifySkillGroupOutboundNumbersResponse {
	s.Body = v
	return s
}

type ModifyUserRequest struct {
	DisplayName             *string   `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email                   *string   `json:"Email,omitempty" xml:"Email,omitempty"`
	InstanceId              *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Phone                   *string   `json:"Phone,omitempty" xml:"Phone,omitempty"`
	PrivateOutboundNumberId *string   `json:"PrivateOutboundNumberId,omitempty" xml:"PrivateOutboundNumberId,omitempty"`
	RoleId                  []*string `json:"RoleId,omitempty" xml:"RoleId,omitempty" type:"Repeated"`
	SkillGroupId            []*string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty" type:"Repeated"`
	SkillLevel              []*int32  `json:"SkillLevel,omitempty" xml:"SkillLevel,omitempty" type:"Repeated"`
	UserId                  *string   `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ModifyUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserRequest) GoString() string {
	return s.String()
}

func (s *ModifyUserRequest) SetDisplayName(v string) *ModifyUserRequest {
	s.DisplayName = &v
	return s
}

func (s *ModifyUserRequest) SetEmail(v string) *ModifyUserRequest {
	s.Email = &v
	return s
}

func (s *ModifyUserRequest) SetInstanceId(v string) *ModifyUserRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyUserRequest) SetPhone(v string) *ModifyUserRequest {
	s.Phone = &v
	return s
}

func (s *ModifyUserRequest) SetPrivateOutboundNumberId(v string) *ModifyUserRequest {
	s.PrivateOutboundNumberId = &v
	return s
}

func (s *ModifyUserRequest) SetRoleId(v []*string) *ModifyUserRequest {
	s.RoleId = v
	return s
}

func (s *ModifyUserRequest) SetSkillGroupId(v []*string) *ModifyUserRequest {
	s.SkillGroupId = v
	return s
}

func (s *ModifyUserRequest) SetSkillLevel(v []*int32) *ModifyUserRequest {
	s.SkillLevel = v
	return s
}

func (s *ModifyUserRequest) SetUserId(v string) *ModifyUserRequest {
	s.UserId = &v
	return s
}

type ModifyUserResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyUserResponseBody) SetCode(v string) *ModifyUserResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyUserResponseBody) SetHttpStatusCode(v int32) *ModifyUserResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyUserResponseBody) SetMessage(v string) *ModifyUserResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyUserResponseBody) SetRequestId(v string) *ModifyUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyUserResponseBody) SetSuccess(v bool) *ModifyUserResponseBody {
	s.Success = &v
	return s
}

type ModifyUserResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserResponse) GoString() string {
	return s.String()
}

func (s *ModifyUserResponse) SetHeaders(v map[string]*string) *ModifyUserResponse {
	s.Headers = v
	return s
}

func (s *ModifyUserResponse) SetStatusCode(v int32) *ModifyUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyUserResponse) SetBody(v *ModifyUserResponseBody) *ModifyUserResponse {
	s.Body = v
	return s
}

type PickGlobalOutboundNumbersRequest struct {
	CalleeNumber *string   `json:"CalleeNumber,omitempty" xml:"CalleeNumber,omitempty"`
	Count        *int32    `json:"Count,omitempty" xml:"Count,omitempty"`
	InstanceId   *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IsVirtual    *bool     `json:"IsVirtual,omitempty" xml:"IsVirtual,omitempty"`
	SkillGroupId []*string `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty" type:"Repeated"`
}

func (s PickGlobalOutboundNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s PickGlobalOutboundNumbersRequest) GoString() string {
	return s.String()
}

func (s *PickGlobalOutboundNumbersRequest) SetCalleeNumber(v string) *PickGlobalOutboundNumbersRequest {
	s.CalleeNumber = &v
	return s
}

func (s *PickGlobalOutboundNumbersRequest) SetCount(v int32) *PickGlobalOutboundNumbersRequest {
	s.Count = &v
	return s
}

func (s *PickGlobalOutboundNumbersRequest) SetInstanceId(v string) *PickGlobalOutboundNumbersRequest {
	s.InstanceId = &v
	return s
}

func (s *PickGlobalOutboundNumbersRequest) SetIsVirtual(v bool) *PickGlobalOutboundNumbersRequest {
	s.IsVirtual = &v
	return s
}

func (s *PickGlobalOutboundNumbersRequest) SetSkillGroupId(v []*string) *PickGlobalOutboundNumbersRequest {
	s.SkillGroupId = v
	return s
}

type PickGlobalOutboundNumbersResponseBody struct {
	Code            *string                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	DialNumberPairs *PickGlobalOutboundNumbersResponseBodyDialNumberPairs `json:"DialNumberPairs,omitempty" xml:"DialNumberPairs,omitempty" type:"Struct"`
	HttpStatusCode  *int32                                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message         *string                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success         *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PickGlobalOutboundNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PickGlobalOutboundNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *PickGlobalOutboundNumbersResponseBody) SetCode(v string) *PickGlobalOutboundNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *PickGlobalOutboundNumbersResponseBody) SetDialNumberPairs(v *PickGlobalOutboundNumbersResponseBodyDialNumberPairs) *PickGlobalOutboundNumbersResponseBody {
	s.DialNumberPairs = v
	return s
}

func (s *PickGlobalOutboundNumbersResponseBody) SetHttpStatusCode(v int32) *PickGlobalOutboundNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PickGlobalOutboundNumbersResponseBody) SetMessage(v string) *PickGlobalOutboundNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *PickGlobalOutboundNumbersResponseBody) SetRequestId(v string) *PickGlobalOutboundNumbersResponseBody {
	s.RequestId = &v
	return s
}

func (s *PickGlobalOutboundNumbersResponseBody) SetSuccess(v bool) *PickGlobalOutboundNumbersResponseBody {
	s.Success = &v
	return s
}

type PickGlobalOutboundNumbersResponseBodyDialNumberPairs struct {
	DialNumberPair []*PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair `json:"DialNumberPair,omitempty" xml:"DialNumberPair,omitempty" type:"Repeated"`
}

func (s PickGlobalOutboundNumbersResponseBodyDialNumberPairs) String() string {
	return tea.Prettify(s)
}

func (s PickGlobalOutboundNumbersResponseBodyDialNumberPairs) GoString() string {
	return s.String()
}

func (s *PickGlobalOutboundNumbersResponseBodyDialNumberPairs) SetDialNumberPair(v []*PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair) *PickGlobalOutboundNumbersResponseBodyDialNumberPairs {
	s.DialNumberPair = v
	return s
}

type PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair struct {
	Callee *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee `json:"Callee,omitempty" xml:"Callee,omitempty" type:"Struct"`
	Caller *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller `json:"Caller,omitempty" xml:"Caller,omitempty" type:"Struct"`
}

func (s PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair) String() string {
	return tea.Prettify(s)
}

func (s PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair) GoString() string {
	return s.String()
}

func (s *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair) SetCallee(v *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair {
	s.Callee = v
	return s
}

func (s *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair) SetCaller(v *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair {
	s.Caller = v
	return s
}

type PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee struct {
	City     *string `json:"City,omitempty" xml:"City,omitempty"`
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) String() string {
	return tea.Prettify(s)
}

func (s PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) GoString() string {
	return s.String()
}

func (s *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) SetCity(v string) *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee {
	s.City = &v
	return s
}

func (s *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) SetNumber(v string) *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee {
	s.Number = &v
	return s
}

func (s *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) SetProvince(v string) *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee {
	s.Province = &v
	return s
}

type PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller struct {
	City     *string `json:"City,omitempty" xml:"City,omitempty"`
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) String() string {
	return tea.Prettify(s)
}

func (s PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) GoString() string {
	return s.String()
}

func (s *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) SetCity(v string) *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller {
	s.City = &v
	return s
}

func (s *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) SetNumber(v string) *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller {
	s.Number = &v
	return s
}

func (s *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) SetProvince(v string) *PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller {
	s.Province = &v
	return s
}

type PickGlobalOutboundNumbersResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PickGlobalOutboundNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PickGlobalOutboundNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s PickGlobalOutboundNumbersResponse) GoString() string {
	return s.String()
}

func (s *PickGlobalOutboundNumbersResponse) SetHeaders(v map[string]*string) *PickGlobalOutboundNumbersResponse {
	s.Headers = v
	return s
}

func (s *PickGlobalOutboundNumbersResponse) SetStatusCode(v int32) *PickGlobalOutboundNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *PickGlobalOutboundNumbersResponse) SetBody(v *PickGlobalOutboundNumbersResponseBody) *PickGlobalOutboundNumbersResponse {
	s.Body = v
	return s
}

type PickLocalNumberRequest struct {
	CalleeNumber    *string   `json:"CalleeNumber,omitempty" xml:"CalleeNumber,omitempty"`
	CandidateNumber []*string `json:"CandidateNumber,omitempty" xml:"CandidateNumber,omitempty" type:"Repeated"`
	InstanceId      *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s PickLocalNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s PickLocalNumberRequest) GoString() string {
	return s.String()
}

func (s *PickLocalNumberRequest) SetCalleeNumber(v string) *PickLocalNumberRequest {
	s.CalleeNumber = &v
	return s
}

func (s *PickLocalNumberRequest) SetCandidateNumber(v []*string) *PickLocalNumberRequest {
	s.CandidateNumber = v
	return s
}

func (s *PickLocalNumberRequest) SetInstanceId(v string) *PickLocalNumberRequest {
	s.InstanceId = &v
	return s
}

type PickLocalNumberResponseBody struct {
	Code      *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *PickLocalNumberResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PickLocalNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PickLocalNumberResponseBody) GoString() string {
	return s.String()
}

func (s *PickLocalNumberResponseBody) SetCode(v string) *PickLocalNumberResponseBody {
	s.Code = &v
	return s
}

func (s *PickLocalNumberResponseBody) SetData(v *PickLocalNumberResponseBodyData) *PickLocalNumberResponseBody {
	s.Data = v
	return s
}

func (s *PickLocalNumberResponseBody) SetMessage(v string) *PickLocalNumberResponseBody {
	s.Message = &v
	return s
}

func (s *PickLocalNumberResponseBody) SetRequestId(v string) *PickLocalNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *PickLocalNumberResponseBody) SetSuccess(v bool) *PickLocalNumberResponseBody {
	s.Success = &v
	return s
}

type PickLocalNumberResponseBodyData struct {
	Callee *PickLocalNumberResponseBodyDataCallee `json:"Callee,omitempty" xml:"Callee,omitempty" type:"Struct"`
	Caller *PickLocalNumberResponseBodyDataCaller `json:"Caller,omitempty" xml:"Caller,omitempty" type:"Struct"`
}

func (s PickLocalNumberResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s PickLocalNumberResponseBodyData) GoString() string {
	return s.String()
}

func (s *PickLocalNumberResponseBodyData) SetCallee(v *PickLocalNumberResponseBodyDataCallee) *PickLocalNumberResponseBodyData {
	s.Callee = v
	return s
}

func (s *PickLocalNumberResponseBodyData) SetCaller(v *PickLocalNumberResponseBodyDataCaller) *PickLocalNumberResponseBodyData {
	s.Caller = v
	return s
}

type PickLocalNumberResponseBodyDataCallee struct {
	City     *string `json:"City,omitempty" xml:"City,omitempty"`
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s PickLocalNumberResponseBodyDataCallee) String() string {
	return tea.Prettify(s)
}

func (s PickLocalNumberResponseBodyDataCallee) GoString() string {
	return s.String()
}

func (s *PickLocalNumberResponseBodyDataCallee) SetCity(v string) *PickLocalNumberResponseBodyDataCallee {
	s.City = &v
	return s
}

func (s *PickLocalNumberResponseBodyDataCallee) SetNumber(v string) *PickLocalNumberResponseBodyDataCallee {
	s.Number = &v
	return s
}

func (s *PickLocalNumberResponseBodyDataCallee) SetProvince(v string) *PickLocalNumberResponseBodyDataCallee {
	s.Province = &v
	return s
}

type PickLocalNumberResponseBodyDataCaller struct {
	City     *string `json:"City,omitempty" xml:"City,omitempty"`
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s PickLocalNumberResponseBodyDataCaller) String() string {
	return tea.Prettify(s)
}

func (s PickLocalNumberResponseBodyDataCaller) GoString() string {
	return s.String()
}

func (s *PickLocalNumberResponseBodyDataCaller) SetCity(v string) *PickLocalNumberResponseBodyDataCaller {
	s.City = &v
	return s
}

func (s *PickLocalNumberResponseBodyDataCaller) SetNumber(v string) *PickLocalNumberResponseBodyDataCaller {
	s.Number = &v
	return s
}

func (s *PickLocalNumberResponseBodyDataCaller) SetProvince(v string) *PickLocalNumberResponseBodyDataCaller {
	s.Province = &v
	return s
}

type PickLocalNumberResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PickLocalNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PickLocalNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s PickLocalNumberResponse) GoString() string {
	return s.String()
}

func (s *PickLocalNumberResponse) SetHeaders(v map[string]*string) *PickLocalNumberResponse {
	s.Headers = v
	return s
}

func (s *PickLocalNumberResponse) SetStatusCode(v int32) *PickLocalNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *PickLocalNumberResponse) SetBody(v *PickLocalNumberResponseBody) *PickLocalNumberResponse {
	s.Body = v
	return s
}

type PickOutboundNumbersRequest struct {
	CalleeNumber    *string   `json:"CalleeNumber,omitempty" xml:"CalleeNumber,omitempty"`
	CandidateNumber []*string `json:"CandidateNumber,omitempty" xml:"CandidateNumber,omitempty" type:"Repeated"`
	Count           *int32    `json:"Count,omitempty" xml:"Count,omitempty"`
	InstanceId      *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s PickOutboundNumbersRequest) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersRequest) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersRequest) SetCalleeNumber(v string) *PickOutboundNumbersRequest {
	s.CalleeNumber = &v
	return s
}

func (s *PickOutboundNumbersRequest) SetCandidateNumber(v []*string) *PickOutboundNumbersRequest {
	s.CandidateNumber = v
	return s
}

func (s *PickOutboundNumbersRequest) SetCount(v int32) *PickOutboundNumbersRequest {
	s.Count = &v
	return s
}

func (s *PickOutboundNumbersRequest) SetInstanceId(v string) *PickOutboundNumbersRequest {
	s.InstanceId = &v
	return s
}

type PickOutboundNumbersResponseBody struct {
	Code            *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	DialNumberPairs *PickOutboundNumbersResponseBodyDialNumberPairs `json:"DialNumberPairs,omitempty" xml:"DialNumberPairs,omitempty" type:"Struct"`
	HttpStatusCode  *int32                                          `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message         *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId       *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success         *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PickOutboundNumbersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponseBody) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponseBody) SetCode(v string) *PickOutboundNumbersResponseBody {
	s.Code = &v
	return s
}

func (s *PickOutboundNumbersResponseBody) SetDialNumberPairs(v *PickOutboundNumbersResponseBodyDialNumberPairs) *PickOutboundNumbersResponseBody {
	s.DialNumberPairs = v
	return s
}

func (s *PickOutboundNumbersResponseBody) SetHttpStatusCode(v int32) *PickOutboundNumbersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PickOutboundNumbersResponseBody) SetMessage(v string) *PickOutboundNumbersResponseBody {
	s.Message = &v
	return s
}

func (s *PickOutboundNumbersResponseBody) SetRequestId(v string) *PickOutboundNumbersResponseBody {
	s.RequestId = &v
	return s
}

func (s *PickOutboundNumbersResponseBody) SetSuccess(v bool) *PickOutboundNumbersResponseBody {
	s.Success = &v
	return s
}

type PickOutboundNumbersResponseBodyDialNumberPairs struct {
	DialNumberPair []*PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair `json:"DialNumberPair,omitempty" xml:"DialNumberPair,omitempty" type:"Repeated"`
}

func (s PickOutboundNumbersResponseBodyDialNumberPairs) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponseBodyDialNumberPairs) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponseBodyDialNumberPairs) SetDialNumberPair(v []*PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair) *PickOutboundNumbersResponseBodyDialNumberPairs {
	s.DialNumberPair = v
	return s
}

type PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair struct {
	Callee *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee `json:"Callee,omitempty" xml:"Callee,omitempty" type:"Struct"`
	Caller *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller `json:"Caller,omitempty" xml:"Caller,omitempty" type:"Struct"`
}

func (s PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair) SetCallee(v *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair {
	s.Callee = v
	return s
}

func (s *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair) SetCaller(v *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair {
	s.Caller = v
	return s
}

type PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee struct {
	City     *string `json:"City,omitempty" xml:"City,omitempty"`
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) SetCity(v string) *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee {
	s.City = &v
	return s
}

func (s *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) SetNumber(v string) *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee {
	s.Number = &v
	return s
}

func (s *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee) SetProvince(v string) *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee {
	s.Province = &v
	return s
}

type PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller struct {
	City     *string `json:"City,omitempty" xml:"City,omitempty"`
	Number   *string `json:"Number,omitempty" xml:"Number,omitempty"`
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) SetCity(v string) *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller {
	s.City = &v
	return s
}

func (s *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) SetNumber(v string) *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller {
	s.Number = &v
	return s
}

func (s *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller) SetProvince(v string) *PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller {
	s.Province = &v
	return s
}

type PickOutboundNumbersResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PickOutboundNumbersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PickOutboundNumbersResponse) String() string {
	return tea.Prettify(s)
}

func (s PickOutboundNumbersResponse) GoString() string {
	return s.String()
}

func (s *PickOutboundNumbersResponse) SetHeaders(v map[string]*string) *PickOutboundNumbersResponse {
	s.Headers = v
	return s
}

func (s *PickOutboundNumbersResponse) SetStatusCode(v int32) *PickOutboundNumbersResponse {
	s.StatusCode = &v
	return s
}

func (s *PickOutboundNumbersResponse) SetBody(v *PickOutboundNumbersResponseBody) *PickOutboundNumbersResponse {
	s.Body = v
	return s
}

type PublishContactFlowVersionRequest struct {
	ContactFlowVersionId *string `json:"ContactFlowVersionId,omitempty" xml:"ContactFlowVersionId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	UseTianGong          *bool   `json:"UseTianGong,omitempty" xml:"UseTianGong,omitempty"`
}

func (s PublishContactFlowVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s PublishContactFlowVersionRequest) GoString() string {
	return s.String()
}

func (s *PublishContactFlowVersionRequest) SetContactFlowVersionId(v string) *PublishContactFlowVersionRequest {
	s.ContactFlowVersionId = &v
	return s
}

func (s *PublishContactFlowVersionRequest) SetInstanceId(v string) *PublishContactFlowVersionRequest {
	s.InstanceId = &v
	return s
}

func (s *PublishContactFlowVersionRequest) SetUseTianGong(v bool) *PublishContactFlowVersionRequest {
	s.UseTianGong = &v
	return s
}

type PublishContactFlowVersionResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PublishContactFlowVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PublishContactFlowVersionResponseBody) GoString() string {
	return s.String()
}

func (s *PublishContactFlowVersionResponseBody) SetCode(v string) *PublishContactFlowVersionResponseBody {
	s.Code = &v
	return s
}

func (s *PublishContactFlowVersionResponseBody) SetHttpStatusCode(v int32) *PublishContactFlowVersionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *PublishContactFlowVersionResponseBody) SetMessage(v string) *PublishContactFlowVersionResponseBody {
	s.Message = &v
	return s
}

func (s *PublishContactFlowVersionResponseBody) SetRequestId(v string) *PublishContactFlowVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *PublishContactFlowVersionResponseBody) SetSuccess(v bool) *PublishContactFlowVersionResponseBody {
	s.Success = &v
	return s
}

type PublishContactFlowVersionResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PublishContactFlowVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PublishContactFlowVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s PublishContactFlowVersionResponse) GoString() string {
	return s.String()
}

func (s *PublishContactFlowVersionResponse) SetHeaders(v map[string]*string) *PublishContactFlowVersionResponse {
	s.Headers = v
	return s
}

func (s *PublishContactFlowVersionResponse) SetStatusCode(v int32) *PublishContactFlowVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *PublishContactFlowVersionResponse) SetBody(v *PublishContactFlowVersionResponseBody) *PublishContactFlowVersionResponse {
	s.Body = v
	return s
}

type RefreshTokenRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s RefreshTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s RefreshTokenRequest) GoString() string {
	return s.String()
}

func (s *RefreshTokenRequest) SetInstanceId(v string) *RefreshTokenRequest {
	s.InstanceId = &v
	return s
}

type RefreshTokenResponseBody struct {
	Code           *string                        `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                          `json:"Success,omitempty" xml:"Success,omitempty"`
	Token          *RefreshTokenResponseBodyToken `json:"Token,omitempty" xml:"Token,omitempty" type:"Struct"`
}

func (s RefreshTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefreshTokenResponseBody) GoString() string {
	return s.String()
}

func (s *RefreshTokenResponseBody) SetCode(v string) *RefreshTokenResponseBody {
	s.Code = &v
	return s
}

func (s *RefreshTokenResponseBody) SetHttpStatusCode(v int32) *RefreshTokenResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RefreshTokenResponseBody) SetMessage(v string) *RefreshTokenResponseBody {
	s.Message = &v
	return s
}

func (s *RefreshTokenResponseBody) SetRequestId(v string) *RefreshTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefreshTokenResponseBody) SetSuccess(v bool) *RefreshTokenResponseBody {
	s.Success = &v
	return s
}

func (s *RefreshTokenResponseBody) SetToken(v *RefreshTokenResponseBodyToken) *RefreshTokenResponseBody {
	s.Token = v
	return s
}

type RefreshTokenResponseBodyToken struct {
	SignData  *string `json:"SignData,omitempty" xml:"SignData,omitempty"`
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
}

func (s RefreshTokenResponseBodyToken) String() string {
	return tea.Prettify(s)
}

func (s RefreshTokenResponseBodyToken) GoString() string {
	return s.String()
}

func (s *RefreshTokenResponseBodyToken) SetSignData(v string) *RefreshTokenResponseBodyToken {
	s.SignData = &v
	return s
}

func (s *RefreshTokenResponseBodyToken) SetSignature(v string) *RefreshTokenResponseBodyToken {
	s.Signature = &v
	return s
}

type RefreshTokenResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RefreshTokenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RefreshTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s RefreshTokenResponse) GoString() string {
	return s.String()
}

func (s *RefreshTokenResponse) SetHeaders(v map[string]*string) *RefreshTokenResponse {
	s.Headers = v
	return s
}

func (s *RefreshTokenResponse) SetStatusCode(v int32) *RefreshTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *RefreshTokenResponse) SetBody(v *RefreshTokenResponseBody) *RefreshTokenResponse {
	s.Body = v
	return s
}

type RemovePhoneNumberRequest struct {
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumberId *string `json:"PhoneNumberId,omitempty" xml:"PhoneNumberId,omitempty"`
}

func (s RemovePhoneNumberRequest) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumberRequest) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumberRequest) SetInstanceId(v string) *RemovePhoneNumberRequest {
	s.InstanceId = &v
	return s
}

func (s *RemovePhoneNumberRequest) SetPhoneNumberId(v string) *RemovePhoneNumberRequest {
	s.PhoneNumberId = &v
	return s
}

type RemovePhoneNumberResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemovePhoneNumberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumberResponseBody) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumberResponseBody) SetCode(v string) *RemovePhoneNumberResponseBody {
	s.Code = &v
	return s
}

func (s *RemovePhoneNumberResponseBody) SetHttpStatusCode(v int32) *RemovePhoneNumberResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemovePhoneNumberResponseBody) SetMessage(v string) *RemovePhoneNumberResponseBody {
	s.Message = &v
	return s
}

func (s *RemovePhoneNumberResponseBody) SetRequestId(v string) *RemovePhoneNumberResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemovePhoneNumberResponseBody) SetSuccess(v bool) *RemovePhoneNumberResponseBody {
	s.Success = &v
	return s
}

type RemovePhoneNumberResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemovePhoneNumberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemovePhoneNumberResponse) String() string {
	return tea.Prettify(s)
}

func (s RemovePhoneNumberResponse) GoString() string {
	return s.String()
}

func (s *RemovePhoneNumberResponse) SetHeaders(v map[string]*string) *RemovePhoneNumberResponse {
	s.Headers = v
	return s
}

func (s *RemovePhoneNumberResponse) SetStatusCode(v int32) *RemovePhoneNumberResponse {
	s.StatusCode = &v
	return s
}

func (s *RemovePhoneNumberResponse) SetBody(v *RemovePhoneNumberResponseBody) *RemovePhoneNumberResponse {
	s.Body = v
	return s
}

type RemoveUsersRequest struct {
	InstanceId *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	UserId     []*string `json:"UserId,omitempty" xml:"UserId,omitempty" type:"Repeated"`
}

func (s RemoveUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersRequest) GoString() string {
	return s.String()
}

func (s *RemoveUsersRequest) SetInstanceId(v string) *RemoveUsersRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveUsersRequest) SetUserId(v []*string) *RemoveUsersRequest {
	s.UserId = v
	return s
}

type RemoveUsersResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemoveUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveUsersResponseBody) SetCode(v string) *RemoveUsersResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveUsersResponseBody) SetHttpStatusCode(v int32) *RemoveUsersResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemoveUsersResponseBody) SetMessage(v string) *RemoveUsersResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveUsersResponseBody) SetRequestId(v string) *RemoveUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveUsersResponseBody) SetSuccess(v bool) *RemoveUsersResponseBody {
	s.Success = &v
	return s
}

type RemoveUsersResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveUsersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersResponse) GoString() string {
	return s.String()
}

func (s *RemoveUsersResponse) SetHeaders(v map[string]*string) *RemoveUsersResponse {
	s.Headers = v
	return s
}

func (s *RemoveUsersResponse) SetStatusCode(v int32) *RemoveUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveUsersResponse) SetBody(v *RemoveUsersResponseBody) *RemoveUsersResponse {
	s.Body = v
	return s
}

type RemoveUsersFromSkillGroupRequest struct {
	InstanceId   *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SkillGroupId *string   `json:"SkillGroupId,omitempty" xml:"SkillGroupId,omitempty"`
	UserId       []*string `json:"UserId,omitempty" xml:"UserId,omitempty" type:"Repeated"`
}

func (s RemoveUsersFromSkillGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersFromSkillGroupRequest) GoString() string {
	return s.String()
}

func (s *RemoveUsersFromSkillGroupRequest) SetInstanceId(v string) *RemoveUsersFromSkillGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *RemoveUsersFromSkillGroupRequest) SetSkillGroupId(v string) *RemoveUsersFromSkillGroupRequest {
	s.SkillGroupId = &v
	return s
}

func (s *RemoveUsersFromSkillGroupRequest) SetUserId(v []*string) *RemoveUsersFromSkillGroupRequest {
	s.UserId = v
	return s
}

type RemoveUsersFromSkillGroupResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemoveUsersFromSkillGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersFromSkillGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveUsersFromSkillGroupResponseBody) SetCode(v string) *RemoveUsersFromSkillGroupResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveUsersFromSkillGroupResponseBody) SetHttpStatusCode(v int32) *RemoveUsersFromSkillGroupResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemoveUsersFromSkillGroupResponseBody) SetMessage(v string) *RemoveUsersFromSkillGroupResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveUsersFromSkillGroupResponseBody) SetRequestId(v string) *RemoveUsersFromSkillGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveUsersFromSkillGroupResponseBody) SetSuccess(v bool) *RemoveUsersFromSkillGroupResponseBody {
	s.Success = &v
	return s
}

type RemoveUsersFromSkillGroupResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveUsersFromSkillGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveUsersFromSkillGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveUsersFromSkillGroupResponse) GoString() string {
	return s.String()
}

func (s *RemoveUsersFromSkillGroupResponse) SetHeaders(v map[string]*string) *RemoveUsersFromSkillGroupResponse {
	s.Headers = v
	return s
}

func (s *RemoveUsersFromSkillGroupResponse) SetStatusCode(v int32) *RemoveUsersFromSkillGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveUsersFromSkillGroupResponse) SetBody(v *RemoveUsersFromSkillGroupResponseBody) *RemoveUsersFromSkillGroupResponse {
	s.Body = v
	return s
}

type RequestLoginInfoRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s RequestLoginInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s RequestLoginInfoRequest) GoString() string {
	return s.String()
}

func (s *RequestLoginInfoRequest) SetInstanceId(v string) *RequestLoginInfoRequest {
	s.InstanceId = &v
	return s
}

func (s *RequestLoginInfoRequest) SetUserId(v string) *RequestLoginInfoRequest {
	s.UserId = &v
	return s
}

type RequestLoginInfoResponseBody struct {
	Code           *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	LoginInfo      *RequestLoginInfoResponseBodyLoginInfo `json:"LoginInfo,omitempty" xml:"LoginInfo,omitempty" type:"Struct"`
	Message        *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RequestLoginInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RequestLoginInfoResponseBody) GoString() string {
	return s.String()
}

func (s *RequestLoginInfoResponseBody) SetCode(v string) *RequestLoginInfoResponseBody {
	s.Code = &v
	return s
}

func (s *RequestLoginInfoResponseBody) SetHttpStatusCode(v int32) *RequestLoginInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RequestLoginInfoResponseBody) SetLoginInfo(v *RequestLoginInfoResponseBodyLoginInfo) *RequestLoginInfoResponseBody {
	s.LoginInfo = v
	return s
}

func (s *RequestLoginInfoResponseBody) SetMessage(v string) *RequestLoginInfoResponseBody {
	s.Message = &v
	return s
}

func (s *RequestLoginInfoResponseBody) SetRequestId(v string) *RequestLoginInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *RequestLoginInfoResponseBody) SetSuccess(v bool) *RequestLoginInfoResponseBody {
	s.Success = &v
	return s
}

type RequestLoginInfoResponseBodyLoginInfo struct {
	AgentServerUrl *string                                     `json:"AgentServerUrl,omitempty" xml:"AgentServerUrl,omitempty"`
	DisplayName    *string                                     `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Extension      *string                                     `json:"Extension,omitempty" xml:"Extension,omitempty"`
	PhoneNumber    *string                                     `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	Region         *string                                     `json:"Region,omitempty" xml:"Region,omitempty"`
	Roles          *RequestLoginInfoResponseBodyLoginInfoRoles `json:"Roles,omitempty" xml:"Roles,omitempty" type:"Struct"`
	SignData       *string                                     `json:"SignData,omitempty" xml:"SignData,omitempty"`
	Signature      *string                                     `json:"Signature,omitempty" xml:"Signature,omitempty"`
	TenantId       *string                                     `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	UserName       *string                                     `json:"UserName,omitempty" xml:"UserName,omitempty"`
	WebRtcUrl      *string                                     `json:"WebRtcUrl,omitempty" xml:"WebRtcUrl,omitempty"`
}

func (s RequestLoginInfoResponseBodyLoginInfo) String() string {
	return tea.Prettify(s)
}

func (s RequestLoginInfoResponseBodyLoginInfo) GoString() string {
	return s.String()
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetAgentServerUrl(v string) *RequestLoginInfoResponseBodyLoginInfo {
	s.AgentServerUrl = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetDisplayName(v string) *RequestLoginInfoResponseBodyLoginInfo {
	s.DisplayName = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetExtension(v string) *RequestLoginInfoResponseBodyLoginInfo {
	s.Extension = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetPhoneNumber(v string) *RequestLoginInfoResponseBodyLoginInfo {
	s.PhoneNumber = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetRegion(v string) *RequestLoginInfoResponseBodyLoginInfo {
	s.Region = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetRoles(v *RequestLoginInfoResponseBodyLoginInfoRoles) *RequestLoginInfoResponseBodyLoginInfo {
	s.Roles = v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetSignData(v string) *RequestLoginInfoResponseBodyLoginInfo {
	s.SignData = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetSignature(v string) *RequestLoginInfoResponseBodyLoginInfo {
	s.Signature = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetTenantId(v string) *RequestLoginInfoResponseBodyLoginInfo {
	s.TenantId = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetUserName(v string) *RequestLoginInfoResponseBodyLoginInfo {
	s.UserName = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfo) SetWebRtcUrl(v string) *RequestLoginInfoResponseBodyLoginInfo {
	s.WebRtcUrl = &v
	return s
}

type RequestLoginInfoResponseBodyLoginInfoRoles struct {
	Role []*RequestLoginInfoResponseBodyLoginInfoRolesRole `json:"Role,omitempty" xml:"Role,omitempty" type:"Repeated"`
}

func (s RequestLoginInfoResponseBodyLoginInfoRoles) String() string {
	return tea.Prettify(s)
}

func (s RequestLoginInfoResponseBodyLoginInfoRoles) GoString() string {
	return s.String()
}

func (s *RequestLoginInfoResponseBodyLoginInfoRoles) SetRole(v []*RequestLoginInfoResponseBodyLoginInfoRolesRole) *RequestLoginInfoResponseBodyLoginInfoRoles {
	s.Role = v
	return s
}

type RequestLoginInfoResponseBodyLoginInfoRolesRole struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RoleDescription *string `json:"RoleDescription,omitempty" xml:"RoleDescription,omitempty"`
	RoleId          *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s RequestLoginInfoResponseBodyLoginInfoRolesRole) String() string {
	return tea.Prettify(s)
}

func (s RequestLoginInfoResponseBodyLoginInfoRolesRole) GoString() string {
	return s.String()
}

func (s *RequestLoginInfoResponseBodyLoginInfoRolesRole) SetInstanceId(v string) *RequestLoginInfoResponseBodyLoginInfoRolesRole {
	s.InstanceId = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfoRolesRole) SetRoleDescription(v string) *RequestLoginInfoResponseBodyLoginInfoRolesRole {
	s.RoleDescription = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfoRolesRole) SetRoleId(v string) *RequestLoginInfoResponseBodyLoginInfoRolesRole {
	s.RoleId = &v
	return s
}

func (s *RequestLoginInfoResponseBodyLoginInfoRolesRole) SetRoleName(v string) *RequestLoginInfoResponseBodyLoginInfoRolesRole {
	s.RoleName = &v
	return s
}

type RequestLoginInfoResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RequestLoginInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RequestLoginInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s RequestLoginInfoResponse) GoString() string {
	return s.String()
}

func (s *RequestLoginInfoResponse) SetHeaders(v map[string]*string) *RequestLoginInfoResponse {
	s.Headers = v
	return s
}

func (s *RequestLoginInfoResponse) SetStatusCode(v int32) *RequestLoginInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *RequestLoginInfoResponse) SetBody(v *RequestLoginInfoResponseBody) *RequestLoginInfoResponse {
	s.Body = v
	return s
}

type ResetUserStatusRequest struct {
	InstanceId *string  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RamIdList  []*int64 `json:"RamIdList,omitempty" xml:"RamIdList,omitempty" type:"Repeated"`
}

func (s ResetUserStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetUserStatusRequest) GoString() string {
	return s.String()
}

func (s *ResetUserStatusRequest) SetInstanceId(v string) *ResetUserStatusRequest {
	s.InstanceId = &v
	return s
}

func (s *ResetUserStatusRequest) SetRamIdList(v []*int64) *ResetUserStatusRequest {
	s.RamIdList = v
	return s
}

type ResetUserStatusResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ResetUserStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetUserStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ResetUserStatusResponseBody) SetCode(v string) *ResetUserStatusResponseBody {
	s.Code = &v
	return s
}

func (s *ResetUserStatusResponseBody) SetHttpStatusCode(v int32) *ResetUserStatusResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ResetUserStatusResponseBody) SetMessage(v string) *ResetUserStatusResponseBody {
	s.Message = &v
	return s
}

func (s *ResetUserStatusResponseBody) SetRequestId(v string) *ResetUserStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetUserStatusResponseBody) SetSuccess(v bool) *ResetUserStatusResponseBody {
	s.Success = &v
	return s
}

type ResetUserStatusResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResetUserStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetUserStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetUserStatusResponse) GoString() string {
	return s.String()
}

func (s *ResetUserStatusResponse) SetHeaders(v map[string]*string) *ResetUserStatusResponse {
	s.Headers = v
	return s
}

func (s *ResetUserStatusResponse) SetStatusCode(v int32) *ResetUserStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetUserStatusResponse) SetBody(v *ResetUserStatusResponseBody) *ResetUserStatusResponse {
	s.Body = v
	return s
}

type SaveWebRTCStatsRequest struct {
	CallId        *string `json:"CallId,omitempty" xml:"CallId,omitempty"`
	CallStartTime *int64  `json:"CallStartTime,omitempty" xml:"CallStartTime,omitempty"`
	CalleeNumber  *string `json:"CalleeNumber,omitempty" xml:"CalleeNumber,omitempty"`
	CallerNumber  *string `json:"CallerNumber,omitempty" xml:"CallerNumber,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RecordTime    *int64  `json:"RecordTime,omitempty" xml:"RecordTime,omitempty"`
	Stats         *string `json:"Stats,omitempty" xml:"Stats,omitempty"`
	TenantId      *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	Uid           *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s SaveWebRTCStatsRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveWebRTCStatsRequest) GoString() string {
	return s.String()
}

func (s *SaveWebRTCStatsRequest) SetCallId(v string) *SaveWebRTCStatsRequest {
	s.CallId = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetCallStartTime(v int64) *SaveWebRTCStatsRequest {
	s.CallStartTime = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetCalleeNumber(v string) *SaveWebRTCStatsRequest {
	s.CalleeNumber = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetCallerNumber(v string) *SaveWebRTCStatsRequest {
	s.CallerNumber = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetInstanceId(v string) *SaveWebRTCStatsRequest {
	s.InstanceId = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetRecordTime(v int64) *SaveWebRTCStatsRequest {
	s.RecordTime = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetStats(v string) *SaveWebRTCStatsRequest {
	s.Stats = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetTenantId(v string) *SaveWebRTCStatsRequest {
	s.TenantId = &v
	return s
}

func (s *SaveWebRTCStatsRequest) SetUid(v string) *SaveWebRTCStatsRequest {
	s.Uid = &v
	return s
}

type SaveWebRTCStatsResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RowCount       *int64  `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SaveWebRTCStatsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveWebRTCStatsResponseBody) GoString() string {
	return s.String()
}

func (s *SaveWebRTCStatsResponseBody) SetCode(v string) *SaveWebRTCStatsResponseBody {
	s.Code = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetHttpStatusCode(v int32) *SaveWebRTCStatsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetMessage(v string) *SaveWebRTCStatsResponseBody {
	s.Message = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetRequestId(v string) *SaveWebRTCStatsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetRowCount(v int64) *SaveWebRTCStatsResponseBody {
	s.RowCount = &v
	return s
}

func (s *SaveWebRTCStatsResponseBody) SetSuccess(v bool) *SaveWebRTCStatsResponseBody {
	s.Success = &v
	return s
}

type SaveWebRTCStatsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SaveWebRTCStatsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SaveWebRTCStatsResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveWebRTCStatsResponse) GoString() string {
	return s.String()
}

func (s *SaveWebRTCStatsResponse) SetHeaders(v map[string]*string) *SaveWebRTCStatsResponse {
	s.Headers = v
	return s
}

func (s *SaveWebRTCStatsResponse) SetStatusCode(v int32) *SaveWebRTCStatsResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveWebRTCStatsResponse) SetBody(v *SaveWebRTCStatsResponseBody) *SaveWebRTCStatsResponse {
	s.Body = v
	return s
}

type SendPredefinedShortMessageRequest struct {
	ConfigId      *int64  `json:"ConfigId,omitempty" xml:"ConfigId,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PhoneNumbers  *string `json:"PhoneNumbers,omitempty" xml:"PhoneNumbers,omitempty"`
	TemplateParam *string `json:"TemplateParam,omitempty" xml:"TemplateParam,omitempty"`
}

func (s SendPredefinedShortMessageRequest) String() string {
	return tea.Prettify(s)
}

func (s SendPredefinedShortMessageRequest) GoString() string {
	return s.String()
}

func (s *SendPredefinedShortMessageRequest) SetConfigId(v int64) *SendPredefinedShortMessageRequest {
	s.ConfigId = &v
	return s
}

func (s *SendPredefinedShortMessageRequest) SetInstanceId(v string) *SendPredefinedShortMessageRequest {
	s.InstanceId = &v
	return s
}

func (s *SendPredefinedShortMessageRequest) SetPhoneNumbers(v string) *SendPredefinedShortMessageRequest {
	s.PhoneNumbers = &v
	return s
}

func (s *SendPredefinedShortMessageRequest) SetTemplateParam(v string) *SendPredefinedShortMessageRequest {
	s.TemplateParam = &v
	return s
}

type SendPredefinedShortMessageResponseBody struct {
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SendPredefinedShortMessageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendPredefinedShortMessageResponseBody) GoString() string {
	return s.String()
}

func (s *SendPredefinedShortMessageResponseBody) SetBizId(v string) *SendPredefinedShortMessageResponseBody {
	s.BizId = &v
	return s
}

func (s *SendPredefinedShortMessageResponseBody) SetCode(v string) *SendPredefinedShortMessageResponseBody {
	s.Code = &v
	return s
}

func (s *SendPredefinedShortMessageResponseBody) SetHttpStatusCode(v int32) *SendPredefinedShortMessageResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SendPredefinedShortMessageResponseBody) SetMessage(v string) *SendPredefinedShortMessageResponseBody {
	s.Message = &v
	return s
}

func (s *SendPredefinedShortMessageResponseBody) SetRequestId(v string) *SendPredefinedShortMessageResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendPredefinedShortMessageResponseBody) SetSuccess(v bool) *SendPredefinedShortMessageResponseBody {
	s.Success = &v
	return s
}

type SendPredefinedShortMessageResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SendPredefinedShortMessageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SendPredefinedShortMessageResponse) String() string {
	return tea.Prettify(s)
}

func (s SendPredefinedShortMessageResponse) GoString() string {
	return s.String()
}

func (s *SendPredefinedShortMessageResponse) SetHeaders(v map[string]*string) *SendPredefinedShortMessageResponse {
	s.Headers = v
	return s
}

func (s *SendPredefinedShortMessageResponse) SetStatusCode(v int32) *SendPredefinedShortMessageResponse {
	s.StatusCode = &v
	return s
}

func (s *SendPredefinedShortMessageResponse) SetBody(v *SendPredefinedShortMessageResponseBody) *SendPredefinedShortMessageResponse {
	s.Body = v
	return s
}

type StartBack2BackCallRequest struct {
	CallCenterNumber *string `json:"CallCenterNumber,omitempty" xml:"CallCenterNumber,omitempty"`
	Callee           *string `json:"Callee,omitempty" xml:"Callee,omitempty"`
	Caller           *string `json:"Caller,omitempty" xml:"Caller,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	WorkflowId       *string `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s StartBack2BackCallRequest) String() string {
	return tea.Prettify(s)
}

func (s StartBack2BackCallRequest) GoString() string {
	return s.String()
}

func (s *StartBack2BackCallRequest) SetCallCenterNumber(v string) *StartBack2BackCallRequest {
	s.CallCenterNumber = &v
	return s
}

func (s *StartBack2BackCallRequest) SetCallee(v string) *StartBack2BackCallRequest {
	s.Callee = &v
	return s
}

func (s *StartBack2BackCallRequest) SetCaller(v string) *StartBack2BackCallRequest {
	s.Caller = &v
	return s
}

func (s *StartBack2BackCallRequest) SetInstanceId(v string) *StartBack2BackCallRequest {
	s.InstanceId = &v
	return s
}

func (s *StartBack2BackCallRequest) SetWorkflowId(v string) *StartBack2BackCallRequest {
	s.WorkflowId = &v
	return s
}

type StartBack2BackCallResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StatusCode     *string `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
	StatusDesc     *string `json:"StatusDesc,omitempty" xml:"StatusDesc,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	TaskId         *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TimeStamp      *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s StartBack2BackCallResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartBack2BackCallResponseBody) GoString() string {
	return s.String()
}

func (s *StartBack2BackCallResponseBody) SetCode(v string) *StartBack2BackCallResponseBody {
	s.Code = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetHttpStatusCode(v int32) *StartBack2BackCallResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetMessage(v string) *StartBack2BackCallResponseBody {
	s.Message = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetRequestId(v string) *StartBack2BackCallResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetStatusCode(v string) *StartBack2BackCallResponseBody {
	s.StatusCode = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetStatusDesc(v string) *StartBack2BackCallResponseBody {
	s.StatusDesc = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetSuccess(v bool) *StartBack2BackCallResponseBody {
	s.Success = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetTaskId(v string) *StartBack2BackCallResponseBody {
	s.TaskId = &v
	return s
}

func (s *StartBack2BackCallResponseBody) SetTimeStamp(v string) *StartBack2BackCallResponseBody {
	s.TimeStamp = &v
	return s
}

type StartBack2BackCallResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartBack2BackCallResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartBack2BackCallResponse) String() string {
	return tea.Prettify(s)
}

func (s StartBack2BackCallResponse) GoString() string {
	return s.String()
}

func (s *StartBack2BackCallResponse) SetHeaders(v map[string]*string) *StartBack2BackCallResponse {
	s.Headers = v
	return s
}

func (s *StartBack2BackCallResponse) SetStatusCode(v int32) *StartBack2BackCallResponse {
	s.StatusCode = &v
	return s
}

func (s *StartBack2BackCallResponse) SetBody(v *StartBack2BackCallResponseBody) *StartBack2BackCallResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-1":        tea.String("ccc.aliyuncs.com"),
		"ap-south-1":            tea.String("ccc.aliyuncs.com"),
		"ap-southeast-1":        tea.String("ccc.aliyuncs.com"),
		"ap-southeast-2":        tea.String("ccc.aliyuncs.com"),
		"ap-southeast-3":        tea.String("ccc.aliyuncs.com"),
		"ap-southeast-5":        tea.String("ccc.aliyuncs.com"),
		"cn-beijing":            tea.String("ccc.aliyuncs.com"),
		"cn-chengdu":            tea.String("ccc.aliyuncs.com"),
		"cn-hongkong":           tea.String("ccc.aliyuncs.com"),
		"cn-huhehaote":          tea.String("ccc.aliyuncs.com"),
		"cn-qingdao":            tea.String("ccc.aliyuncs.com"),
		"cn-shenzhen":           tea.String("ccc.aliyuncs.com"),
		"cn-zhangjiakou":        tea.String("ccc.aliyuncs.com"),
		"eu-central-1":          tea.String("ccc.aliyuncs.com"),
		"eu-west-1":             tea.String("ccc.aliyuncs.com"),
		"me-east-1":             tea.String("ccc.aliyuncs.com"),
		"us-east-1":             tea.String("ccc.aliyuncs.com"),
		"us-west-1":             tea.String("ccc.aliyuncs.com"),
		"cn-hangzhou-finance":   tea.String("ccc.aliyuncs.com"),
		"cn-shenzhen-finance-1": tea.String("ccc.aliyuncs.com"),
		"cn-shanghai-finance-1": tea.String("ccc.aliyuncs.com"),
		"cn-north-2-gov-1":      tea.String("ccc.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("ccc"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddAgentDeviceWithOptions(request *AddAgentDeviceRequest, runtime *util.RuntimeOptions) (_result *AddAgentDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientIp)) {
		query["ClientIp"] = request.ClientIp
	}

	if !tea.BoolValue(util.IsUnset(request.ClientPort)) {
		query["ClientPort"] = request.ClientPort
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BrowserVersion)) {
		body["BrowserVersion"] = request.BrowserVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		body["Remark"] = request.Remark
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAgentDevice"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAgentDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddAgentDevice(request *AddAgentDeviceRequest) (_result *AddAgentDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAgentDeviceResponse{}
	_body, _err := client.AddAgentDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddBulkPhoneNumbersWithOptions(request *AddBulkPhoneNumbersRequest, runtime *util.RuntimeOptions) (_result *AddBulkPhoneNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Usage)) {
		query["Usage"] = request.Usage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddBulkPhoneNumbers"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddBulkPhoneNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddBulkPhoneNumbers(request *AddBulkPhoneNumbersRequest) (_result *AddBulkPhoneNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddBulkPhoneNumbersResponse{}
	_body, _err := client.AddBulkPhoneNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddPhoneNumberWithOptions(request *AddPhoneNumberRequest, runtime *util.RuntimeOptions) (_result *AddPhoneNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Usage)) {
		query["Usage"] = request.Usage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPhoneNumber"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPhoneNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddPhoneNumber(request *AddPhoneNumberRequest) (_result *AddPhoneNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPhoneNumberResponse{}
	_body, _err := client.AddPhoneNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddPhoneTagsWithOptions(request *AddPhoneTagsRequest, runtime *util.RuntimeOptions) (_result *AddPhoneTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Concurrency)) {
		query["Concurrency"] = request.Concurrency
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumberList)) {
		query["PhoneNumberList"] = request.PhoneNumberList
	}

	if !tea.BoolValue(util.IsUnset(request.Provider)) {
		query["Provider"] = request.Provider
	}

	if !tea.BoolValue(util.IsUnset(request.RegionNameCity)) {
		query["RegionNameCity"] = request.RegionNameCity
	}

	if !tea.BoolValue(util.IsUnset(request.RegionNameProvince)) {
		query["RegionNameProvince"] = request.RegionNameProvince
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceTag)) {
		query["ServiceTag"] = request.ServiceTag
	}

	if !tea.BoolValue(util.IsUnset(request.SipTag)) {
		query["SipTag"] = request.SipTag
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPhoneTags"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPhoneTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddPhoneTags(request *AddPhoneTagsRequest) (_result *AddPhoneTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPhoneTagsResponse{}
	_body, _err := client.AddPhoneTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssignUsersWithOptions(request *AssignUsersRequest, runtime *util.RuntimeOptions) (_result *AssignUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleId)) {
		query["RoleId"] = request.RoleId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillLevel)) {
		query["SkillLevel"] = request.SkillLevel
	}

	if !tea.BoolValue(util.IsUnset(request.UserRamId)) {
		query["UserRamId"] = request.UserRamId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssignUsers"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssignUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssignUsers(request *AssignUsersRequest) (_result *AssignUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssignUsersResponse{}
	_body, _err := client.AssignUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CallOnlinePrivacyNumberWithOptions(request *CallOnlinePrivacyNumberRequest, runtime *util.RuntimeOptions) (_result *CallOnlinePrivacyNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TelA)) {
		query["TelA"] = request.TelA
	}

	if !tea.BoolValue(util.IsUnset(request.TelB)) {
		query["TelB"] = request.TelB
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CallOnlinePrivacyNumber"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CallOnlinePrivacyNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CallOnlinePrivacyNumber(request *CallOnlinePrivacyNumberRequest) (_result *CallOnlinePrivacyNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CallOnlinePrivacyNumberResponse{}
	_body, _err := client.CallOnlinePrivacyNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckNumberAvaliableWithOptions(request *CheckNumberAvaliableRequest, runtime *util.RuntimeOptions) (_result *CheckNumberAvaliableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Callee)) {
		query["Callee"] = request.Callee
	}

	if !tea.BoolValue(util.IsUnset(request.Caller)) {
		query["Caller"] = request.Caller
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckNumberAvaliable"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckNumberAvaliableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckNumberAvaliable(request *CheckNumberAvaliableRequest) (_result *CheckNumberAvaliableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckNumberAvaliableResponse{}
	_body, _err := client.CheckNumberAvaliableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CommitContactFlowVersionModificationWithOptions(request *CommitContactFlowVersionModificationRequest, runtime *util.RuntimeOptions) (_result *CommitContactFlowVersionModificationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowVersionId)) {
		query["ContactFlowVersionId"] = request.ContactFlowVersionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Canvas)) {
		body["Canvas"] = request.Canvas
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CommitContactFlowVersionModification"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CommitContactFlowVersionModificationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CommitContactFlowVersionModification(request *CommitContactFlowVersionModificationRequest) (_result *CommitContactFlowVersionModificationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CommitContactFlowVersionModificationResponse{}
	_body, _err := client.CommitContactFlowVersionModificationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateContactFlowWithOptions(request *CreateContactFlowRequest, runtime *util.RuntimeOptions) (_result *CreateContactFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Canvas)) {
		body["Canvas"] = request.Canvas
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateContactFlow"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateContactFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateContactFlow(request *CreateContactFlowRequest) (_result *CreateContactFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateContactFlowResponse{}
	_body, _err := client.CreateContactFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFaultWithOptions(request *CreateFaultRequest, runtime *util.RuntimeOptions) (_result *CreateFaultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentFilePath)) {
		query["AgentFilePath"] = request.AgentFilePath
	}

	if !tea.BoolValue(util.IsUnset(request.AgentId)) {
		query["AgentId"] = request.AgentId
	}

	if !tea.BoolValue(util.IsUnset(request.AgentOssFileName)) {
		query["AgentOssFileName"] = request.AgentOssFileName
	}

	if !tea.BoolValue(util.IsUnset(request.BrowserVersion)) {
		query["BrowserVersion"] = request.BrowserVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ClientIp)) {
		query["ClientIp"] = request.ClientIp
	}

	if !tea.BoolValue(util.IsUnset(request.ClientPort)) {
		query["ClientPort"] = request.ClientPort
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectId)) {
		query["ConnectId"] = request.ConnectId
	}

	if !tea.BoolValue(util.IsUnset(request.CustomFilePath)) {
		query["CustomFilePath"] = request.CustomFilePath
	}

	if !tea.BoolValue(util.IsUnset(request.CustomOssFileName)) {
		query["CustomOssFileName"] = request.CustomOssFileName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MicrophoneEquipment)) {
		query["MicrophoneEquipment"] = request.MicrophoneEquipment
	}

	if !tea.BoolValue(util.IsUnset(request.MicrophoneList)) {
		query["MicrophoneList"] = request.MicrophoneList
	}

	if !tea.BoolValue(util.IsUnset(request.OperatingSystemVersion)) {
		query["OperatingSystemVersion"] = request.OperatingSystemVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceIp)) {
		query["ServiceIp"] = request.ServiceIp
	}

	if !tea.BoolValue(util.IsUnset(request.ServicePort)) {
		query["ServicePort"] = request.ServicePort
	}

	if !tea.BoolValue(util.IsUnset(request.SpeakerEquipment)) {
		query["SpeakerEquipment"] = request.SpeakerEquipment
	}

	if !tea.BoolValue(util.IsUnset(request.SpeakerList)) {
		query["SpeakerList"] = request.SpeakerList
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFault"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFaultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFault(request *CreateFaultRequest) (_result *CreateFaultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFaultResponse{}
	_body, _err := client.CreateFaultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdminRamId)) {
		query["AdminRamId"] = request.AdminRamId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumbers)) {
		query["PhoneNumbers"] = request.PhoneNumbers
	}

	if !tea.BoolValue(util.IsUnset(request.StorageMaxDays)) {
		query["StorageMaxDays"] = request.StorageMaxDays
	}

	if !tea.BoolValue(util.IsUnset(request.StorageMaxSize)) {
		query["StorageMaxSize"] = request.StorageMaxSize
	}

	if !tea.BoolValue(util.IsUnset(request.UserObject)) {
		query["UserObject"] = request.UserObject
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstance"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMediaWithOptions(request *CreateMediaRequest, runtime *util.RuntimeOptions) (_result *CreateMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OssFileName)) {
		query["OssFileName"] = request.OssFileName
	}

	if !tea.BoolValue(util.IsUnset(request.OssFilePath)) {
		query["OssFilePath"] = request.OssFilePath
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UploadResult)) {
		query["UploadResult"] = request.UploadResult
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMedia"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMedia(request *CreateMediaRequest) (_result *CreateMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMediaResponse{}
	_body, _err := client.CreateMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSkillGroupWithOptions(request *CreateSkillGroupRequest, runtime *util.RuntimeOptions) (_result *CreateSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowPrivateOutboundNumber)) {
		query["AllowPrivateOutboundNumber"] = request.AllowPrivateOutboundNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundPhoneNumberId)) {
		query["OutboundPhoneNumberId"] = request.OutboundPhoneNumberId
	}

	if !tea.BoolValue(util.IsUnset(request.RoutingStrategy)) {
		query["RoutingStrategy"] = request.RoutingStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SkillLevel)) {
		query["SkillLevel"] = request.SkillLevel
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSkillGroup"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSkillGroup(request *CreateSkillGroupRequest) (_result *CreateSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSkillGroupResponse{}
	_body, _err := client.CreateSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUserWithOptions(request *CreateUserRequest, runtime *util.RuntimeOptions) (_result *CreateUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LoginName)) {
		query["LoginName"] = request.LoginName
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		query["Phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateOutboundNumberId)) {
		query["PrivateOutboundNumberId"] = request.PrivateOutboundNumberId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleId)) {
		query["RoleId"] = request.RoleId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillLevel)) {
		query["SkillLevel"] = request.SkillLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUser"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUser(request *CreateUserRequest) (_result *CreateUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUserResponse{}
	_body, _err := client.CreateUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVoiceAppraiseWithOptions(request *CreateVoiceAppraiseRequest, runtime *util.RuntimeOptions) (_result *CreateVoiceAppraiseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowVersionId)) {
		query["ContactFlowVersionId"] = request.ContactFlowVersionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsAppraise)) {
		query["IsAppraise"] = request.IsAppraise
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVoiceAppraise"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVoiceAppraiseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVoiceAppraise(request *CreateVoiceAppraiseRequest) (_result *CreateVoiceAppraiseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVoiceAppraiseResponse{}
	_body, _err := client.CreateVoiceAppraiseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteInstanceWithOptions(request *DeleteInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInstance"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteInstance(request *DeleteInstanceRequest) (_result *DeleteInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.DeleteInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMediaWithOptions(request *DeleteMediaRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMedia"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMedia(request *DeleteMediaRequest) (_result *DeleteMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaResponse{}
	_body, _err := client.DeleteMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePhoneTagsWithOptions(request *DeletePhoneTagsRequest, runtime *util.RuntimeOptions) (_result *DeletePhoneTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumberList)) {
		query["PhoneNumberList"] = request.PhoneNumberList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePhoneTags"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePhoneTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePhoneTags(request *DeletePhoneTagsRequest) (_result *DeletePhoneTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePhoneTagsResponse{}
	_body, _err := client.DeletePhoneTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSkillGroupWithOptions(request *DeleteSkillGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSkillGroup"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSkillGroup(request *DeleteSkillGroupRequest) (_result *DeleteSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSkillGroupResponse{}
	_body, _err := client.DeleteSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DialExWithOptions(request *DialExRequest, runtime *util.RuntimeOptions) (_result *DialExResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AnswerMode)) {
		query["AnswerMode"] = request.AnswerMode
	}

	if !tea.BoolValue(util.IsUnset(request.Callee)) {
		query["Callee"] = request.Callee
	}

	if !tea.BoolValue(util.IsUnset(request.Caller)) {
		query["Caller"] = request.Caller
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Provider)) {
		query["Provider"] = request.Provider
	}

	if !tea.BoolValue(util.IsUnset(request.RoutPoint)) {
		query["RoutPoint"] = request.RoutPoint
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DialEx"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DialExResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DialEx(request *DialExRequest) (_result *DialExResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DialExResponse{}
	_body, _err := client.DialExWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableTrunkProvidersWithOptions(request *DisableTrunkProvidersRequest, runtime *util.RuntimeOptions) (_result *DisableTrunkProvidersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProviderName)) {
		query["ProviderName"] = request.ProviderName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableTrunkProviders"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableTrunkProvidersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableTrunkProviders(request *DisableTrunkProvidersRequest) (_result *DisableTrunkProvidersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableTrunkProvidersResponse{}
	_body, _err := client.DisableTrunkProvidersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DownloadAllTypeRecordingWithOptions(request *DownloadAllTypeRecordingRequest, runtime *util.RuntimeOptions) (_result *DownloadAllTypeRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadAllTypeRecording"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadAllTypeRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DownloadAllTypeRecording(request *DownloadAllTypeRecordingRequest) (_result *DownloadAllTypeRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadAllTypeRecordingResponse{}
	_body, _err := client.DownloadAllTypeRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DownloadRecordingWithOptions(request *DownloadRecordingRequest, runtime *util.RuntimeOptions) (_result *DownloadRecordingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadRecording"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadRecordingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DownloadRecording(request *DownloadRecordingRequest) (_result *DownloadRecordingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadRecordingResponse{}
	_body, _err := client.DownloadRecordingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FindUsersWithOptions(request *FindUsersRequest, runtime *util.RuntimeOptions) (_result *FindUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FindUsers"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FindUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FindUsers(request *FindUsersRequest) (_result *FindUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FindUsersResponse{}
	_body, _err := client.FindUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GenerateAgentStatisticReportWithOptions(request *GenerateAgentStatisticReportRequest, runtime *util.RuntimeOptions) (_result *GenerateAgentStatisticReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentId)) {
		query["AgentId"] = request.AgentId
	}

	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GenerateAgentStatisticReport"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateAgentStatisticReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GenerateAgentStatisticReport(request *GenerateAgentStatisticReportRequest) (_result *GenerateAgentStatisticReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateAgentStatisticReportResponse{}
	_body, _err := client.GenerateAgentStatisticReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAgentDataWithOptions(request *GetAgentDataRequest, runtime *util.RuntimeOptions) (_result *GetAgentDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDay)) {
		query["EndDay"] = request.EndDay
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartDay)) {
		query["StartDay"] = request.StartDay
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAgentData"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAgentDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAgentData(request *GetAgentDataRequest) (_result *GetAgentDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAgentDataResponse{}
	_body, _err := client.GetAgentDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCallMeasureSummaryReportWithOptions(request *GetCallMeasureSummaryReportRequest, runtime *util.RuntimeOptions) (_result *GetCallMeasureSummaryReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Day)) {
		query["Day"] = request.Day
	}

	if !tea.BoolValue(util.IsUnset(request.IntervalType)) {
		query["IntervalType"] = request.IntervalType
	}

	if !tea.BoolValue(util.IsUnset(request.Month)) {
		query["Month"] = request.Month
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Year)) {
		query["Year"] = request.Year
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCallMeasureSummaryReport"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCallMeasureSummaryReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCallMeasureSummaryReport(request *GetCallMeasureSummaryReportRequest) (_result *GetCallMeasureSummaryReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCallMeasureSummaryReportResponse{}
	_body, _err := client.GetCallMeasureSummaryReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetConfigWithOptions(request *GetConfigRequest, runtime *util.RuntimeOptions) (_result *GetConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectId)) {
		query["ObjectId"] = request.ObjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectType)) {
		query["ObjectType"] = request.ObjectType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetConfig"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetConfig(request *GetConfigRequest) (_result *GetConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetConfigResponse{}
	_body, _err := client.GetConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetConversationDetailByContactIdWithOptions(request *GetConversationDetailByContactIdRequest, runtime *util.RuntimeOptions) (_result *GetConversationDetailByContactIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetConversationDetailByContactId"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetConversationDetailByContactIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetConversationDetailByContactId(request *GetConversationDetailByContactIdRequest) (_result *GetConversationDetailByContactIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetConversationDetailByContactIdResponse{}
	_body, _err := client.GetConversationDetailByContactIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceWithOptions(request *GetInstanceRequest, runtime *util.RuntimeOptions) (_result *GetInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstance"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstance(request *GetInstanceRequest) (_result *GetInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceResponse{}
	_body, _err := client.GetInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceStateWithOptions(request *GetInstanceStateRequest, runtime *util.RuntimeOptions) (_result *GetInstanceStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceState"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceStateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceState(request *GetInstanceStateRequest) (_result *GetInstanceStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceStateResponse{}
	_body, _err := client.GetInstanceStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceSummaryReportWithOptions(request *GetInstanceSummaryReportRequest, runtime *util.RuntimeOptions) (_result *GetInstanceSummaryReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceSummaryReport"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceSummaryReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceSummaryReport(request *GetInstanceSummaryReportRequest) (_result *GetInstanceSummaryReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceSummaryReportResponse{}
	_body, _err := client.GetInstanceSummaryReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceSummaryReportByIntervalWithOptions(request *GetInstanceSummaryReportByIntervalRequest, runtime *util.RuntimeOptions) (_result *GetInstanceSummaryReportByIntervalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceSummaryReportByInterval"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceSummaryReportByIntervalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceSummaryReportByInterval(request *GetInstanceSummaryReportByIntervalRequest) (_result *GetInstanceSummaryReportByIntervalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceSummaryReportByIntervalResponse{}
	_body, _err := client.GetInstanceSummaryReportByIntervalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstanceSummaryReportSinceMidnightWithOptions(request *GetInstanceSummaryReportSinceMidnightRequest, runtime *util.RuntimeOptions) (_result *GetInstanceSummaryReportSinceMidnightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceSummaryReportSinceMidnight"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceSummaryReportSinceMidnightResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstanceSummaryReportSinceMidnight(request *GetInstanceSummaryReportSinceMidnightRequest) (_result *GetInstanceSummaryReportSinceMidnightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceSummaryReportSinceMidnightResponse{}
	_body, _err := client.GetInstanceSummaryReportSinceMidnightWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNumberRegionInfoWithOptions(request *GetNumberRegionInfoRequest, runtime *util.RuntimeOptions) (_result *GetNumberRegionInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNumberRegionInfo"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNumberRegionInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNumberRegionInfo(request *GetNumberRegionInfoRequest) (_result *GetNumberRegionInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNumberRegionInfoResponse{}
	_body, _err := client.GetNumberRegionInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRecordOssUploadParamWithOptions(request *GetRecordOssUploadParamRequest, runtime *util.RuntimeOptions) (_result *GetRecordOssUploadParamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRecordOssUploadParam"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRecordOssUploadParamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRecordOssUploadParam(request *GetRecordOssUploadParamRequest) (_result *GetRecordOssUploadParamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRecordOssUploadParamResponse{}
	_body, _err := client.GetRecordOssUploadParamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRoutePointWithOptions(request *GetRoutePointRequest, runtime *util.RuntimeOptions) (_result *GetRoutePointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRoutePoint"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRoutePointResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRoutePoint(request *GetRoutePointRequest) (_result *GetRoutePointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRoutePointResponse{}
	_body, _err := client.GetRoutePointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceExtensionsWithOptions(request *GetServiceExtensionsRequest, runtime *util.RuntimeOptions) (_result *GetServiceExtensionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		query["ServiceType"] = request.ServiceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetServiceExtensions"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetServiceExtensionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceExtensions(request *GetServiceExtensionsRequest) (_result *GetServiceExtensionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetServiceExtensionsResponse{}
	_body, _err := client.GetServiceExtensionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSmsConfigWithOptions(request *GetSmsConfigRequest, runtime *util.RuntimeOptions) (_result *GetSmsConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Scenario)) {
		query["Scenario"] = request.Scenario
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSmsConfig"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSmsConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSmsConfig(request *GetSmsConfigRequest) (_result *GetSmsConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSmsConfigResponse{}
	_body, _err := client.GetSmsConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTURNCredentialsWithOptions(request *GetTURNCredentialsRequest, runtime *util.RuntimeOptions) (_result *GetTURNCredentialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTURNCredentials"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTURNCredentialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTURNCredentials(request *GetTURNCredentialsRequest) (_result *GetTURNCredentialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTURNCredentialsResponse{}
	_body, _err := client.GetTURNCredentialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTURNServerListWithOptions(request *GetTURNServerListRequest, runtime *util.RuntimeOptions) (_result *GetTURNServerListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTURNServerList"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTURNServerListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTURNServerList(request *GetTURNServerListRequest) (_result *GetTURNServerListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTURNServerListResponse{}
	_body, _err := client.GetTURNServerListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserWithOptions(request *GetUserRequest, runtime *util.RuntimeOptions) (_result *GetUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUser"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUser(request *GetUserRequest) (_result *GetUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserResponse{}
	_body, _err := client.GetUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserByExtensionWithOptions(request *GetUserByExtensionRequest, runtime *util.RuntimeOptions) (_result *GetUserByExtensionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Extension)) {
		query["Extension"] = request.Extension
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserByExtension"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserByExtensionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserByExtension(request *GetUserByExtensionRequest) (_result *GetUserByExtensionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserByExtensionResponse{}
	_body, _err := client.GetUserByExtensionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LaunchAppraiseWithOptions(request *LaunchAppraiseRequest, runtime *util.RuntimeOptions) (_result *LaunchAppraiseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Acid)) {
		query["Acid"] = request.Acid
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("LaunchAppraise"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &LaunchAppraiseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LaunchAppraise(request *LaunchAppraiseRequest) (_result *LaunchAppraiseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LaunchAppraiseResponse{}
	_body, _err := client.LaunchAppraiseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LaunchShortMessageAppraiseWithOptions(request *LaunchShortMessageAppraiseRequest, runtime *util.RuntimeOptions) (_result *LaunchShortMessageAppraiseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Acid)) {
		query["Acid"] = request.Acid
	}

	if !tea.BoolValue(util.IsUnset(request.ContactType)) {
		query["ContactType"] = request.ContactType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumbers)) {
		query["PhoneNumbers"] = request.PhoneNumbers
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("LaunchShortMessageAppraise"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &LaunchShortMessageAppraiseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LaunchShortMessageAppraise(request *LaunchShortMessageAppraiseRequest) (_result *LaunchShortMessageAppraiseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LaunchShortMessageAppraiseResponse{}
	_body, _err := client.LaunchShortMessageAppraiseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAgentDevicesWithOptions(request *ListAgentDevicesRequest, runtime *util.RuntimeOptions) (_result *ListAgentDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RamIds)) {
		query["RamIds"] = request.RamIds
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StopTime)) {
		query["StopTime"] = request.StopTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAgentDevices"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAgentDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAgentDevices(request *ListAgentDevicesRequest) (_result *ListAgentDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAgentDevicesResponse{}
	_body, _err := client.ListAgentDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAgentEventsWithOptions(request *ListAgentEventsRequest, runtime *util.RuntimeOptions) (_result *ListAgentEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Event)) {
		query["Event"] = request.Event
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RamId)) {
		query["RamId"] = request.RamId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StopTime)) {
		query["StopTime"] = request.StopTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAgentEvents"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAgentEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAgentEvents(request *ListAgentEventsRequest) (_result *ListAgentEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAgentEventsResponse{}
	_body, _err := client.ListAgentEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAgentStateLogsWithOptions(request *ListAgentStateLogsRequest, runtime *util.RuntimeOptions) (_result *ListAgentStateLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RamId)) {
		query["RamId"] = request.RamId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAgentStateLogs"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAgentStateLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAgentStateLogs(request *ListAgentStateLogsRequest) (_result *ListAgentStateLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAgentStateLogsResponse{}
	_body, _err := client.ListAgentStateLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAgentStatesWithOptions(request *ListAgentStatesRequest, runtime *util.RuntimeOptions) (_result *ListAgentStatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentIds)) {
		query["AgentIds"] = request.AgentIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAgentStates"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAgentStatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAgentStates(request *ListAgentStatesRequest) (_result *ListAgentStatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAgentStatesResponse{}
	_body, _err := client.ListAgentStatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAgentSummaryReportsWithOptions(request *ListAgentSummaryReportsRequest, runtime *util.RuntimeOptions) (_result *ListAgentSummaryReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentIds)) {
		query["AgentIds"] = request.AgentIds
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAgentSummaryReports"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAgentSummaryReportsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAgentSummaryReports(request *ListAgentSummaryReportsRequest) (_result *ListAgentSummaryReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAgentSummaryReportsResponse{}
	_body, _err := client.ListAgentSummaryReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAgentSummaryReportsByIntervalWithOptions(request *ListAgentSummaryReportsByIntervalRequest, runtime *util.RuntimeOptions) (_result *ListAgentSummaryReportsByIntervalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentIds)) {
		query["AgentIds"] = request.AgentIds
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAgentSummaryReportsByInterval"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAgentSummaryReportsByIntervalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAgentSummaryReportsByInterval(request *ListAgentSummaryReportsByIntervalRequest) (_result *ListAgentSummaryReportsByIntervalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAgentSummaryReportsByIntervalResponse{}
	_body, _err := client.ListAgentSummaryReportsByIntervalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAgentSummaryReportsSinceMidnightWithOptions(request *ListAgentSummaryReportsSinceMidnightRequest, runtime *util.RuntimeOptions) (_result *ListAgentSummaryReportsSinceMidnightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentIds)) {
		query["AgentIds"] = request.AgentIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAgentSummaryReportsSinceMidnight"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAgentSummaryReportsSinceMidnightResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAgentSummaryReportsSinceMidnight(request *ListAgentSummaryReportsSinceMidnightRequest) (_result *ListAgentSummaryReportsSinceMidnightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAgentSummaryReportsSinceMidnightResponse{}
	_body, _err := client.ListAgentSummaryReportsSinceMidnightWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCallDetailRecordsWithOptions(request *ListCallDetailRecordsRequest, runtime *util.RuntimeOptions) (_result *ListCallDetailRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactDisposition)) {
		query["ContactDisposition"] = request.ContactDisposition
	}

	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactType)) {
		query["ContactType"] = request.ContactType
	}

	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StopTime)) {
		query["StopTime"] = request.StopTime
	}

	if !tea.BoolValue(util.IsUnset(request.WithRecording)) {
		query["WithRecording"] = request.WithRecording
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCallDetailRecords"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCallDetailRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCallDetailRecords(request *ListCallDetailRecordsRequest) (_result *ListCallDetailRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCallDetailRecordsResponse{}
	_body, _err := client.ListCallDetailRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCallEventDetailByContactIdWithOptions(request *ListCallEventDetailByContactIdRequest, runtime *util.RuntimeOptions) (_result *ListCallEventDetailByContactIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCallEventDetailByContactId"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCallEventDetailByContactIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCallEventDetailByContactId(request *ListCallEventDetailByContactIdRequest) (_result *ListCallEventDetailByContactIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCallEventDetailByContactIdResponse{}
	_body, _err := client.ListCallEventDetailByContactIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCallMeasureSummaryReportsWithOptions(request *ListCallMeasureSummaryReportsRequest, runtime *util.RuntimeOptions) (_result *ListCallMeasureSummaryReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IntervalType)) {
		query["IntervalType"] = request.IntervalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCallMeasureSummaryReports"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCallMeasureSummaryReportsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCallMeasureSummaryReports(request *ListCallMeasureSummaryReportsRequest) (_result *ListCallMeasureSummaryReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCallMeasureSummaryReportsResponse{}
	_body, _err := client.ListCallMeasureSummaryReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListConfigWithOptions(request *ListConfigRequest, runtime *util.RuntimeOptions) (_result *ListConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigItem)) {
		query["ConfigItem"] = request.ConfigItem
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListConfig"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListConfig(request *ListConfigRequest) (_result *ListConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListConfigResponse{}
	_body, _err := client.ListConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListContactFlowsWithOptions(request *ListContactFlowsRequest, runtime *util.RuntimeOptions) (_result *ListContactFlowsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListContactFlows"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListContactFlowsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListContactFlows(request *ListContactFlowsRequest) (_result *ListContactFlowsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListContactFlowsResponse{}
	_body, _err := client.ListContactFlowsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListInstancesOfUserWithOptions(runtime *util.RuntimeOptions) (_result *ListInstancesOfUserResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListInstancesOfUser"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListInstancesOfUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListInstancesOfUser() (_result *ListInstancesOfUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInstancesOfUserResponse{}
	_body, _err := client.ListInstancesOfUserWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListIvrTrackingDetailWithOptions(request *ListIvrTrackingDetailRequest, runtime *util.RuntimeOptions) (_result *ListIvrTrackingDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalledNumber)) {
		query["CalledNumber"] = request.CalledNumber
	}

	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StopTime)) {
		query["StopTime"] = request.StopTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListIvrTrackingDetail"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListIvrTrackingDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListIvrTrackingDetail(request *ListIvrTrackingDetailRequest) (_result *ListIvrTrackingDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListIvrTrackingDetailResponse{}
	_body, _err := client.ListIvrTrackingDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMediasWithOptions(request *ListMediasRequest, runtime *util.RuntimeOptions) (_result *ListMediasResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NamePrefix)) {
		query["NamePrefix"] = request.NamePrefix
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMedias"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediasResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMedias(request *ListMediasRequest) (_result *ListMediasResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediasResponse{}
	_body, _err := client.ListMediasWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOutboundPhoneNumberOfUserWithOptions(request *ListOutboundPhoneNumberOfUserRequest, runtime *util.RuntimeOptions) (_result *ListOutboundPhoneNumberOfUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOutboundPhoneNumberOfUser"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListOutboundPhoneNumberOfUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOutboundPhoneNumberOfUser(request *ListOutboundPhoneNumberOfUserRequest) (_result *ListOutboundPhoneNumberOfUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOutboundPhoneNumberOfUserResponse{}
	_body, _err := client.ListOutboundPhoneNumberOfUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPhoneNumbersWithOptions(request *ListPhoneNumbersRequest, runtime *util.RuntimeOptions) (_result *ListPhoneNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundOnly)) {
		query["OutboundOnly"] = request.OutboundOnly
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPhoneNumbers"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPhoneNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPhoneNumbers(request *ListPhoneNumbersRequest) (_result *ListPhoneNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPhoneNumbersResponse{}
	_body, _err := client.ListPhoneNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPhoneTagsWithOptions(request *ListPhoneTagsRequest, runtime *util.RuntimeOptions) (_result *ListPhoneTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Number)) {
		query["Number"] = request.Number
	}

	if !tea.BoolValue(util.IsUnset(request.NumberGroupIds)) {
		query["NumberGroupIds"] = request.NumberGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundOnly)) {
		query["OutboundOnly"] = request.OutboundOnly
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPhoneTags"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPhoneTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPhoneTags(request *ListPhoneTagsRequest) (_result *ListPhoneTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPhoneTagsResponse{}
	_body, _err := client.ListPhoneTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRealTimeAgentWithOptions(request *ListRealTimeAgentRequest, runtime *util.RuntimeOptions) (_result *ListRealTimeAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRealTimeAgent"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRealTimeAgentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRealTimeAgent(request *ListRealTimeAgentRequest) (_result *ListRealTimeAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRealTimeAgentResponse{}
	_body, _err := client.ListRealTimeAgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRecentCallRecordsWithOptions(request *ListRecentCallRecordsRequest, runtime *util.RuntimeOptions) (_result *ListRecentCallRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StopTime)) {
		query["StopTime"] = request.StopTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRecentCallRecords"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRecentCallRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRecentCallRecords(request *ListRecentCallRecordsRequest) (_result *ListRecentCallRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRecentCallRecordsResponse{}
	_body, _err := client.ListRecentCallRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRecordingOfDualTrackWithOptions(request *ListRecordingOfDualTrackRequest, runtime *util.RuntimeOptions) (_result *ListRecordingOfDualTrackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentId)) {
		query["AgentId"] = request.AgentId
	}

	if !tea.BoolValue(util.IsUnset(request.CalledNumber)) {
		query["CalledNumber"] = request.CalledNumber
	}

	if !tea.BoolValue(util.IsUnset(request.CallingNumber)) {
		query["CallingNumber"] = request.CallingNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectId)) {
		query["ConnectId"] = request.ConnectId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StopTime)) {
		query["StopTime"] = request.StopTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRecordingOfDualTrack"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRecordingOfDualTrackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRecordingOfDualTrack(request *ListRecordingOfDualTrackRequest) (_result *ListRecordingOfDualTrackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRecordingOfDualTrackResponse{}
	_body, _err := client.ListRecordingOfDualTrackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRecordingsWithOptions(request *ListRecordingsRequest, runtime *util.RuntimeOptions) (_result *ListRecordingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentId)) {
		query["AgentId"] = request.AgentId
	}

	if !tea.BoolValue(util.IsUnset(request.Criteria)) {
		query["Criteria"] = request.Criteria
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumber)) {
		query["PhoneNumber"] = request.PhoneNumber
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StopTime)) {
		query["StopTime"] = request.StopTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRecordings"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRecordingsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRecordings(request *ListRecordingsRequest) (_result *ListRecordingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRecordingsResponse{}
	_body, _err := client.ListRecordingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRecordingsByContactIdWithOptions(request *ListRecordingsByContactIdRequest, runtime *util.RuntimeOptions) (_result *ListRecordingsByContactIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRecordingsByContactId"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRecordingsByContactIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRecordingsByContactId(request *ListRecordingsByContactIdRequest) (_result *ListRecordingsByContactIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRecordingsByContactIdResponse{}
	_body, _err := client.ListRecordingsByContactIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRolesWithOptions(request *ListRolesRequest, runtime *util.RuntimeOptions) (_result *ListRolesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRoles"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRolesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRoles(request *ListRolesRequest) (_result *ListRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRolesResponse{}
	_body, _err := client.ListRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSkillGroupStatesWithOptions(request *ListSkillGroupStatesRequest, runtime *util.RuntimeOptions) (_result *ListSkillGroupStatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupIds)) {
		query["SkillGroupIds"] = request.SkillGroupIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSkillGroupStates"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSkillGroupStatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSkillGroupStates(request *ListSkillGroupStatesRequest) (_result *ListSkillGroupStatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSkillGroupStatesResponse{}
	_body, _err := client.ListSkillGroupStatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSkillGroupSummaryReportsWithOptions(request *ListSkillGroupSummaryReportsRequest, runtime *util.RuntimeOptions) (_result *ListSkillGroupSummaryReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupIds)) {
		query["SkillGroupIds"] = request.SkillGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSkillGroupSummaryReports"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSkillGroupSummaryReportsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSkillGroupSummaryReports(request *ListSkillGroupSummaryReportsRequest) (_result *ListSkillGroupSummaryReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSkillGroupSummaryReportsResponse{}
	_body, _err := client.ListSkillGroupSummaryReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSkillGroupSummaryReportsByIntervalWithOptions(request *ListSkillGroupSummaryReportsByIntervalRequest, runtime *util.RuntimeOptions) (_result *ListSkillGroupSummaryReportsByIntervalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupIds)) {
		query["SkillGroupIds"] = request.SkillGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSkillGroupSummaryReportsByInterval"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSkillGroupSummaryReportsByIntervalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSkillGroupSummaryReportsByInterval(request *ListSkillGroupSummaryReportsByIntervalRequest) (_result *ListSkillGroupSummaryReportsByIntervalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSkillGroupSummaryReportsByIntervalResponse{}
	_body, _err := client.ListSkillGroupSummaryReportsByIntervalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSkillGroupSummaryReportsSinceMidnightWithOptions(request *ListSkillGroupSummaryReportsSinceMidnightRequest, runtime *util.RuntimeOptions) (_result *ListSkillGroupSummaryReportsSinceMidnightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroups)) {
		query["SkillGroups"] = request.SkillGroups
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSkillGroupSummaryReportsSinceMidnight"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSkillGroupSummaryReportsSinceMidnightResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSkillGroupSummaryReportsSinceMidnight(request *ListSkillGroupSummaryReportsSinceMidnightRequest) (_result *ListSkillGroupSummaryReportsSinceMidnightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSkillGroupSummaryReportsSinceMidnightResponse{}
	_body, _err := client.ListSkillGroupSummaryReportsSinceMidnightWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSkillGroupsWithOptions(request *ListSkillGroupsRequest, runtime *util.RuntimeOptions) (_result *ListSkillGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupName)) {
		query["SkillGroupName"] = request.SkillGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSkillGroups"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSkillGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSkillGroups(request *ListSkillGroupsRequest) (_result *ListSkillGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSkillGroupsResponse{}
	_body, _err := client.ListSkillGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSkillGroupsOfUserWithOptions(request *ListSkillGroupsOfUserRequest, runtime *util.RuntimeOptions) (_result *ListSkillGroupsOfUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSkillGroupsOfUser"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSkillGroupsOfUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSkillGroupsOfUser(request *ListSkillGroupsOfUserRequest) (_result *ListSkillGroupsOfUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSkillGroupsOfUserResponse{}
	_body, _err := client.ListSkillGroupsOfUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTransferableSkillGroupsWithOptions(request *ListTransferableSkillGroupsRequest, runtime *util.RuntimeOptions) (_result *ListTransferableSkillGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTransferableSkillGroups"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTransferableSkillGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTransferableSkillGroups(request *ListTransferableSkillGroupsRequest) (_result *ListTransferableSkillGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTransferableSkillGroupsResponse{}
	_body, _err := client.ListTransferableSkillGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTrunkProvidersWithOptions(runtime *util.RuntimeOptions) (_result *ListTrunkProvidersResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListTrunkProviders"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTrunkProvidersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTrunkProviders() (_result *ListTrunkProvidersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTrunkProvidersResponse{}
	_body, _err := client.ListTrunkProvidersWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTrunksOfSkillGroupWithOptions(request *ListTrunksOfSkillGroupRequest, runtime *util.RuntimeOptions) (_result *ListTrunksOfSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTrunksOfSkillGroup"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTrunksOfSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTrunksOfSkillGroup(request *ListTrunksOfSkillGroupRequest) (_result *ListTrunksOfSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTrunksOfSkillGroupResponse{}
	_body, _err := client.ListTrunksOfSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListUsersWithOptions(request *ListUsersRequest, runtime *util.RuntimeOptions) (_result *ListUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUsers"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListUsers(request *ListUsersRequest) (_result *ListUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUsersResponse{}
	_body, _err := client.ListUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListUsersOfSkillGroupWithOptions(request *ListUsersOfSkillGroupRequest, runtime *util.RuntimeOptions) (_result *ListUsersOfSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUsersOfSkillGroup"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUsersOfSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListUsersOfSkillGroup(request *ListUsersOfSkillGroupRequest) (_result *ListUsersOfSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUsersOfSkillGroupResponse{}
	_body, _err := client.ListUsersOfSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListVoiceAppraiseWithOptions(request *ListVoiceAppraiseRequest, runtime *util.RuntimeOptions) (_result *ListVoiceAppraiseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListVoiceAppraise"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListVoiceAppraiseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListVoiceAppraise(request *ListVoiceAppraiseRequest) (_result *ListVoiceAppraiseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListVoiceAppraiseResponse{}
	_body, _err := client.ListVoiceAppraiseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAgentDeviceWithOptions(request *ModifyAgentDeviceRequest, runtime *util.RuntimeOptions) (_result *ModifyAgentDeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AgentDeviceId)) {
		query["AgentDeviceId"] = request.AgentDeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsLogin)) {
		query["IsLogin"] = request.IsLogin
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAgentDevice"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAgentDeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAgentDevice(request *ModifyAgentDeviceRequest) (_result *ModifyAgentDeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAgentDeviceResponse{}
	_body, _err := client.ModifyAgentDeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPhoneNumberWithOptions(request *ModifyPhoneNumberRequest, runtime *util.RuntimeOptions) (_result *ModifyPhoneNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowId)) {
		query["ContactFlowId"] = request.ContactFlowId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumberId)) {
		query["PhoneNumberId"] = request.PhoneNumberId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Usage)) {
		query["Usage"] = request.Usage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPhoneNumber"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPhoneNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPhoneNumber(request *ModifyPhoneNumberRequest) (_result *ModifyPhoneNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPhoneNumberResponse{}
	_body, _err := client.ModifyPhoneNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPhoneTagsWithOptions(request *ModifyPhoneTagsRequest, runtime *util.RuntimeOptions) (_result *ModifyPhoneTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceTag)) {
		query["ServiceTag"] = request.ServiceTag
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupIdList)) {
		query["SkillGroupIdList"] = request.SkillGroupIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPhoneTags"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPhoneTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPhoneTags(request *ModifyPhoneTagsRequest) (_result *ModifyPhoneTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPhoneTagsResponse{}
	_body, _err := client.ModifyPhoneTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPrimaryTrunksOfSkillGroupWithOptions(request *ModifyPrimaryTrunksOfSkillGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyPrimaryTrunksOfSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryProviderName)) {
		query["PrimaryProviderName"] = request.PrimaryProviderName
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPrimaryTrunksOfSkillGroup"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPrimaryTrunksOfSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPrimaryTrunksOfSkillGroup(request *ModifyPrimaryTrunksOfSkillGroupRequest) (_result *ModifyPrimaryTrunksOfSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPrimaryTrunksOfSkillGroupResponse{}
	_body, _err := client.ModifyPrimaryTrunksOfSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPrivacyNumberCallDetailWithOptions(request *ModifyPrivacyNumberCallDetailRequest, runtime *util.RuntimeOptions) (_result *ModifyPrivacyNumberCallDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallId)) {
		query["CallId"] = request.CallId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactId)) {
		query["ContactId"] = request.ContactId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPrivacyNumberCallDetail"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPrivacyNumberCallDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPrivacyNumberCallDetail(request *ModifyPrivacyNumberCallDetailRequest) (_result *ModifyPrivacyNumberCallDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPrivacyNumberCallDetailResponse{}
	_body, _err := client.ModifyPrivacyNumberCallDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySkillGroupWithOptions(request *ModifySkillGroupRequest, runtime *util.RuntimeOptions) (_result *ModifySkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowPrivateOutboundNumber)) {
		query["AllowPrivateOutboundNumber"] = request.AllowPrivateOutboundNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundPhoneNumberId)) {
		query["OutboundPhoneNumberId"] = request.OutboundPhoneNumberId
	}

	if !tea.BoolValue(util.IsUnset(request.RoutingStrategy)) {
		query["RoutingStrategy"] = request.RoutingStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillLevel)) {
		query["SkillLevel"] = request.SkillLevel
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySkillGroup"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySkillGroup(request *ModifySkillGroupRequest) (_result *ModifySkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySkillGroupResponse{}
	_body, _err := client.ModifySkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySkillGroupBasicInfoWithOptions(request *ModifySkillGroupBasicInfoRequest, runtime *util.RuntimeOptions) (_result *ModifySkillGroupBasicInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowPrivateOutboundNumber)) {
		query["AllowPrivateOutboundNumber"] = request.AllowPrivateOutboundNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RoutingStrategy)) {
		query["RoutingStrategy"] = request.RoutingStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySkillGroupBasicInfo"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySkillGroupBasicInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySkillGroupBasicInfo(request *ModifySkillGroupBasicInfoRequest) (_result *ModifySkillGroupBasicInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySkillGroupBasicInfoResponse{}
	_body, _err := client.ModifySkillGroupBasicInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySkillGroupOfUserWithOptions(request *ModifySkillGroupOfUserRequest, runtime *util.RuntimeOptions) (_result *ModifySkillGroupOfUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleId)) {
		query["RoleId"] = request.RoleId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillLevel)) {
		query["SkillLevel"] = request.SkillLevel
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySkillGroupOfUser"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySkillGroupOfUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySkillGroupOfUser(request *ModifySkillGroupOfUserRequest) (_result *ModifySkillGroupOfUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySkillGroupOfUserResponse{}
	_body, _err := client.ModifySkillGroupOfUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySkillGroupOutboundNumbersWithOptions(request *ModifySkillGroupOutboundNumbersRequest, runtime *util.RuntimeOptions) (_result *ModifySkillGroupOutboundNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OperationType)) {
		query["OperationType"] = request.OperationType
	}

	if !tea.BoolValue(util.IsUnset(request.OutboundPhoneNumberId)) {
		query["OutboundPhoneNumberId"] = request.OutboundPhoneNumberId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySkillGroupOutboundNumbers"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySkillGroupOutboundNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySkillGroupOutboundNumbers(request *ModifySkillGroupOutboundNumbersRequest) (_result *ModifySkillGroupOutboundNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySkillGroupOutboundNumbersResponse{}
	_body, _err := client.ModifySkillGroupOutboundNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyUserWithOptions(request *ModifyUserRequest, runtime *util.RuntimeOptions) (_result *ModifyUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DisplayName)) {
		query["DisplayName"] = request.DisplayName
	}

	if !tea.BoolValue(util.IsUnset(request.Email)) {
		query["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		query["Phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateOutboundNumberId)) {
		query["PrivateOutboundNumberId"] = request.PrivateOutboundNumberId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleId)) {
		query["RoleId"] = request.RoleId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillLevel)) {
		query["SkillLevel"] = request.SkillLevel
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyUser"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyUser(request *ModifyUserRequest) (_result *ModifyUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUserResponse{}
	_body, _err := client.ModifyUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PickGlobalOutboundNumbersWithOptions(request *PickGlobalOutboundNumbersRequest, runtime *util.RuntimeOptions) (_result *PickGlobalOutboundNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalleeNumber)) {
		query["CalleeNumber"] = request.CalleeNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Count)) {
		query["Count"] = request.Count
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IsVirtual)) {
		query["IsVirtual"] = request.IsVirtual
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PickGlobalOutboundNumbers"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PickGlobalOutboundNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PickGlobalOutboundNumbers(request *PickGlobalOutboundNumbersRequest) (_result *PickGlobalOutboundNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PickGlobalOutboundNumbersResponse{}
	_body, _err := client.PickGlobalOutboundNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PickLocalNumberWithOptions(request *PickLocalNumberRequest, runtime *util.RuntimeOptions) (_result *PickLocalNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalleeNumber)) {
		query["CalleeNumber"] = request.CalleeNumber
	}

	if !tea.BoolValue(util.IsUnset(request.CandidateNumber)) {
		query["CandidateNumber"] = request.CandidateNumber
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PickLocalNumber"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PickLocalNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PickLocalNumber(request *PickLocalNumberRequest) (_result *PickLocalNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PickLocalNumberResponse{}
	_body, _err := client.PickLocalNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PickOutboundNumbersWithOptions(request *PickOutboundNumbersRequest, runtime *util.RuntimeOptions) (_result *PickOutboundNumbersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalleeNumber)) {
		query["CalleeNumber"] = request.CalleeNumber
	}

	if !tea.BoolValue(util.IsUnset(request.CandidateNumber)) {
		query["CandidateNumber"] = request.CandidateNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Count)) {
		query["Count"] = request.Count
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PickOutboundNumbers"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PickOutboundNumbersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PickOutboundNumbers(request *PickOutboundNumbersRequest) (_result *PickOutboundNumbersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PickOutboundNumbersResponse{}
	_body, _err := client.PickOutboundNumbersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PublishContactFlowVersionWithOptions(request *PublishContactFlowVersionRequest, runtime *util.RuntimeOptions) (_result *PublishContactFlowVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactFlowVersionId)) {
		query["ContactFlowVersionId"] = request.ContactFlowVersionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UseTianGong)) {
		query["UseTianGong"] = request.UseTianGong
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PublishContactFlowVersion"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PublishContactFlowVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PublishContactFlowVersion(request *PublishContactFlowVersionRequest) (_result *PublishContactFlowVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PublishContactFlowVersionResponse{}
	_body, _err := client.PublishContactFlowVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RefreshTokenWithOptions(request *RefreshTokenRequest, runtime *util.RuntimeOptions) (_result *RefreshTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefreshToken"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefreshTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RefreshToken(request *RefreshTokenRequest) (_result *RefreshTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefreshTokenResponse{}
	_body, _err := client.RefreshTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemovePhoneNumberWithOptions(request *RemovePhoneNumberRequest, runtime *util.RuntimeOptions) (_result *RemovePhoneNumberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumberId)) {
		query["PhoneNumberId"] = request.PhoneNumberId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemovePhoneNumber"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemovePhoneNumberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemovePhoneNumber(request *RemovePhoneNumberRequest) (_result *RemovePhoneNumberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemovePhoneNumberResponse{}
	_body, _err := client.RemovePhoneNumberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveUsersWithOptions(request *RemoveUsersRequest, runtime *util.RuntimeOptions) (_result *RemoveUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveUsers"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveUsers(request *RemoveUsersRequest) (_result *RemoveUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveUsersResponse{}
	_body, _err := client.RemoveUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveUsersFromSkillGroupWithOptions(request *RemoveUsersFromSkillGroupRequest, runtime *util.RuntimeOptions) (_result *RemoveUsersFromSkillGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SkillGroupId)) {
		query["SkillGroupId"] = request.SkillGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveUsersFromSkillGroup"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveUsersFromSkillGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveUsersFromSkillGroup(request *RemoveUsersFromSkillGroupRequest) (_result *RemoveUsersFromSkillGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveUsersFromSkillGroupResponse{}
	_body, _err := client.RemoveUsersFromSkillGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RequestLoginInfoWithOptions(request *RequestLoginInfoRequest, runtime *util.RuntimeOptions) (_result *RequestLoginInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RequestLoginInfo"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RequestLoginInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RequestLoginInfo(request *RequestLoginInfoRequest) (_result *RequestLoginInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RequestLoginInfoResponse{}
	_body, _err := client.RequestLoginInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetUserStatusWithOptions(request *ResetUserStatusRequest, runtime *util.RuntimeOptions) (_result *ResetUserStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RamIdList)) {
		query["RamIdList"] = request.RamIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetUserStatus"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetUserStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetUserStatus(request *ResetUserStatusRequest) (_result *ResetUserStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetUserStatusResponse{}
	_body, _err := client.ResetUserStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SaveWebRTCStatsWithOptions(request *SaveWebRTCStatsRequest, runtime *util.RuntimeOptions) (_result *SaveWebRTCStatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallId)) {
		query["CallId"] = request.CallId
	}

	if !tea.BoolValue(util.IsUnset(request.CallStartTime)) {
		query["CallStartTime"] = request.CallStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.CalleeNumber)) {
		query["CalleeNumber"] = request.CalleeNumber
	}

	if !tea.BoolValue(util.IsUnset(request.CallerNumber)) {
		query["CallerNumber"] = request.CallerNumber
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RecordTime)) {
		query["RecordTime"] = request.RecordTime
	}

	if !tea.BoolValue(util.IsUnset(request.Stats)) {
		query["Stats"] = request.Stats
	}

	if !tea.BoolValue(util.IsUnset(request.TenantId)) {
		query["TenantId"] = request.TenantId
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveWebRTCStats"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveWebRTCStatsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SaveWebRTCStats(request *SaveWebRTCStatsRequest) (_result *SaveWebRTCStatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveWebRTCStatsResponse{}
	_body, _err := client.SaveWebRTCStatsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SendPredefinedShortMessageWithOptions(request *SendPredefinedShortMessageRequest, runtime *util.RuntimeOptions) (_result *SendPredefinedShortMessageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigId)) {
		query["ConfigId"] = request.ConfigId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneNumbers)) {
		query["PhoneNumbers"] = request.PhoneNumbers
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateParam)) {
		query["TemplateParam"] = request.TemplateParam
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendPredefinedShortMessage"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendPredefinedShortMessageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SendPredefinedShortMessage(request *SendPredefinedShortMessageRequest) (_result *SendPredefinedShortMessageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendPredefinedShortMessageResponse{}
	_body, _err := client.SendPredefinedShortMessageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartBack2BackCallWithOptions(request *StartBack2BackCallRequest, runtime *util.RuntimeOptions) (_result *StartBack2BackCallResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallCenterNumber)) {
		query["CallCenterNumber"] = request.CallCenterNumber
	}

	if !tea.BoolValue(util.IsUnset(request.Callee)) {
		query["Callee"] = request.Callee
	}

	if !tea.BoolValue(util.IsUnset(request.Caller)) {
		query["Caller"] = request.Caller
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowId)) {
		query["WorkflowId"] = request.WorkflowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartBack2BackCall"),
		Version:     tea.String("2017-07-05"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartBack2BackCallResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartBack2BackCall(request *StartBack2BackCallRequest) (_result *StartBack2BackCallResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartBack2BackCallResponse{}
	_body, _err := client.StartBack2BackCallWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
