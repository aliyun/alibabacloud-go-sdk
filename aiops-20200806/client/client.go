// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddAlgorithmRequest struct {
	AlgorithmId       *string `json:"AlgorithmId,omitempty" xml:"AlgorithmId,omitempty"`
	AlgorithmType     *int32  `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	BusinessGroupId   *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	EndTime           *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ExpandInformation *string `json:"ExpandInformation,omitempty" xml:"ExpandInformation,omitempty"`
	IndexId           *string `json:"IndexId,omitempty" xml:"IndexId,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductType       *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	StartTime         *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s AddAlgorithmRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAlgorithmRequest) GoString() string {
	return s.String()
}

func (s *AddAlgorithmRequest) SetAlgorithmId(v string) *AddAlgorithmRequest {
	s.AlgorithmId = &v
	return s
}

func (s *AddAlgorithmRequest) SetAlgorithmType(v int32) *AddAlgorithmRequest {
	s.AlgorithmType = &v
	return s
}

func (s *AddAlgorithmRequest) SetBusinessGroupId(v string) *AddAlgorithmRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *AddAlgorithmRequest) SetEndTime(v int64) *AddAlgorithmRequest {
	s.EndTime = &v
	return s
}

func (s *AddAlgorithmRequest) SetExpandInformation(v string) *AddAlgorithmRequest {
	s.ExpandInformation = &v
	return s
}

func (s *AddAlgorithmRequest) SetIndexId(v string) *AddAlgorithmRequest {
	s.IndexId = &v
	return s
}

func (s *AddAlgorithmRequest) SetInstanceId(v string) *AddAlgorithmRequest {
	s.InstanceId = &v
	return s
}

func (s *AddAlgorithmRequest) SetOperaUid(v string) *AddAlgorithmRequest {
	s.OperaUid = &v
	return s
}

func (s *AddAlgorithmRequest) SetProductType(v string) *AddAlgorithmRequest {
	s.ProductType = &v
	return s
}

func (s *AddAlgorithmRequest) SetStartTime(v int64) *AddAlgorithmRequest {
	s.StartTime = &v
	return s
}

type AddAlgorithmResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AddAlgorithmResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAlgorithmResponseBody) GoString() string {
	return s.String()
}

func (s *AddAlgorithmResponseBody) SetCode(v int32) *AddAlgorithmResponseBody {
	s.Code = &v
	return s
}

func (s *AddAlgorithmResponseBody) SetData(v map[string]interface{}) *AddAlgorithmResponseBody {
	s.Data = v
	return s
}

func (s *AddAlgorithmResponseBody) SetMsg(v string) *AddAlgorithmResponseBody {
	s.Msg = &v
	return s
}

func (s *AddAlgorithmResponseBody) SetRequestId(v string) *AddAlgorithmResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddAlgorithmResponseBody) SetStatus(v string) *AddAlgorithmResponseBody {
	s.Status = &v
	return s
}

type AddAlgorithmResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddAlgorithmResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddAlgorithmResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAlgorithmResponse) GoString() string {
	return s.String()
}

func (s *AddAlgorithmResponse) SetHeaders(v map[string]*string) *AddAlgorithmResponse {
	s.Headers = v
	return s
}

func (s *AddAlgorithmResponse) SetStatusCode(v int32) *AddAlgorithmResponse {
	s.StatusCode = &v
	return s
}

func (s *AddAlgorithmResponse) SetBody(v *AddAlgorithmResponseBody) *AddAlgorithmResponse {
	s.Body = v
	return s
}

type AddBusinessGroupRequest struct {
	AliUid            *string   `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	BusinessGroupDesc *string   `json:"BusinessGroupDesc,omitempty" xml:"BusinessGroupDesc,omitempty"`
	BusinessGroupName *string   `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
	CreateUser        *string   `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	InstanceList      []*string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Repeated"`
	OperaUid          *string   `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ResourceType      *int32    `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	UpdateUser        *string   `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s AddBusinessGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBusinessGroupRequest) GoString() string {
	return s.String()
}

func (s *AddBusinessGroupRequest) SetAliUid(v string) *AddBusinessGroupRequest {
	s.AliUid = &v
	return s
}

func (s *AddBusinessGroupRequest) SetBusinessGroupDesc(v string) *AddBusinessGroupRequest {
	s.BusinessGroupDesc = &v
	return s
}

func (s *AddBusinessGroupRequest) SetBusinessGroupName(v string) *AddBusinessGroupRequest {
	s.BusinessGroupName = &v
	return s
}

func (s *AddBusinessGroupRequest) SetCreateUser(v string) *AddBusinessGroupRequest {
	s.CreateUser = &v
	return s
}

func (s *AddBusinessGroupRequest) SetInstanceList(v []*string) *AddBusinessGroupRequest {
	s.InstanceList = v
	return s
}

func (s *AddBusinessGroupRequest) SetOperaUid(v string) *AddBusinessGroupRequest {
	s.OperaUid = &v
	return s
}

func (s *AddBusinessGroupRequest) SetResourceType(v int32) *AddBusinessGroupRequest {
	s.ResourceType = &v
	return s
}

func (s *AddBusinessGroupRequest) SetUpdateUser(v string) *AddBusinessGroupRequest {
	s.UpdateUser = &v
	return s
}

type AddBusinessGroupShrinkRequest struct {
	AliUid             *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	BusinessGroupDesc  *string `json:"BusinessGroupDesc,omitempty" xml:"BusinessGroupDesc,omitempty"`
	BusinessGroupName  *string `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
	CreateUser         *string `json:"CreateUser,omitempty" xml:"CreateUser,omitempty"`
	InstanceListShrink *string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty"`
	OperaUid           *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ResourceType       *int32  `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	UpdateUser         *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s AddBusinessGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBusinessGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddBusinessGroupShrinkRequest) SetAliUid(v string) *AddBusinessGroupShrinkRequest {
	s.AliUid = &v
	return s
}

func (s *AddBusinessGroupShrinkRequest) SetBusinessGroupDesc(v string) *AddBusinessGroupShrinkRequest {
	s.BusinessGroupDesc = &v
	return s
}

func (s *AddBusinessGroupShrinkRequest) SetBusinessGroupName(v string) *AddBusinessGroupShrinkRequest {
	s.BusinessGroupName = &v
	return s
}

func (s *AddBusinessGroupShrinkRequest) SetCreateUser(v string) *AddBusinessGroupShrinkRequest {
	s.CreateUser = &v
	return s
}

func (s *AddBusinessGroupShrinkRequest) SetInstanceListShrink(v string) *AddBusinessGroupShrinkRequest {
	s.InstanceListShrink = &v
	return s
}

func (s *AddBusinessGroupShrinkRequest) SetOperaUid(v string) *AddBusinessGroupShrinkRequest {
	s.OperaUid = &v
	return s
}

func (s *AddBusinessGroupShrinkRequest) SetResourceType(v int32) *AddBusinessGroupShrinkRequest {
	s.ResourceType = &v
	return s
}

func (s *AddBusinessGroupShrinkRequest) SetUpdateUser(v string) *AddBusinessGroupShrinkRequest {
	s.UpdateUser = &v
	return s
}

type AddBusinessGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Msg       *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AddBusinessGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddBusinessGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddBusinessGroupResponseBody) SetCode(v int32) *AddBusinessGroupResponseBody {
	s.Code = &v
	return s
}

func (s *AddBusinessGroupResponseBody) SetMsg(v string) *AddBusinessGroupResponseBody {
	s.Msg = &v
	return s
}

func (s *AddBusinessGroupResponseBody) SetRequestId(v string) *AddBusinessGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddBusinessGroupResponseBody) SetStatus(v string) *AddBusinessGroupResponseBody {
	s.Status = &v
	return s
}

type AddBusinessGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddBusinessGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddBusinessGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBusinessGroupResponse) GoString() string {
	return s.String()
}

func (s *AddBusinessGroupResponse) SetHeaders(v map[string]*string) *AddBusinessGroupResponse {
	s.Headers = v
	return s
}

func (s *AddBusinessGroupResponse) SetStatusCode(v int32) *AddBusinessGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AddBusinessGroupResponse) SetBody(v *AddBusinessGroupResponseBody) *AddBusinessGroupResponse {
	s.Body = v
	return s
}

type AddBusinessGroupOneRequest struct {
	BusinessGroupDesc *string `json:"BusinessGroupDesc,omitempty" xml:"BusinessGroupDesc,omitempty"`
	BusinessGroupName *string `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s AddBusinessGroupOneRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBusinessGroupOneRequest) GoString() string {
	return s.String()
}

func (s *AddBusinessGroupOneRequest) SetBusinessGroupDesc(v string) *AddBusinessGroupOneRequest {
	s.BusinessGroupDesc = &v
	return s
}

func (s *AddBusinessGroupOneRequest) SetBusinessGroupName(v string) *AddBusinessGroupOneRequest {
	s.BusinessGroupName = &v
	return s
}

func (s *AddBusinessGroupOneRequest) SetOperaUid(v string) *AddBusinessGroupOneRequest {
	s.OperaUid = &v
	return s
}

type AddBusinessGroupOneResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AddBusinessGroupOneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddBusinessGroupOneResponseBody) GoString() string {
	return s.String()
}

func (s *AddBusinessGroupOneResponseBody) SetCode(v int32) *AddBusinessGroupOneResponseBody {
	s.Code = &v
	return s
}

func (s *AddBusinessGroupOneResponseBody) SetData(v map[string]interface{}) *AddBusinessGroupOneResponseBody {
	s.Data = v
	return s
}

func (s *AddBusinessGroupOneResponseBody) SetMsg(v string) *AddBusinessGroupOneResponseBody {
	s.Msg = &v
	return s
}

func (s *AddBusinessGroupOneResponseBody) SetRequestId(v string) *AddBusinessGroupOneResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddBusinessGroupOneResponseBody) SetStatus(v string) *AddBusinessGroupOneResponseBody {
	s.Status = &v
	return s
}

type AddBusinessGroupOneResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddBusinessGroupOneResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddBusinessGroupOneResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBusinessGroupOneResponse) GoString() string {
	return s.String()
}

func (s *AddBusinessGroupOneResponse) SetHeaders(v map[string]*string) *AddBusinessGroupOneResponse {
	s.Headers = v
	return s
}

func (s *AddBusinessGroupOneResponse) SetStatusCode(v int32) *AddBusinessGroupOneResponse {
	s.StatusCode = &v
	return s
}

func (s *AddBusinessGroupOneResponse) SetBody(v *AddBusinessGroupOneResponseBody) *AddBusinessGroupOneResponse {
	s.Body = v
	return s
}

type AddScenarioRequest struct {
	AlertSettingId *int64  `json:"AlertSettingId,omitempty" xml:"AlertSettingId,omitempty"`
	Level          *int64  `json:"Level,omitempty" xml:"Level,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s AddScenarioRequest) String() string {
	return tea.Prettify(s)
}

func (s AddScenarioRequest) GoString() string {
	return s.String()
}

func (s *AddScenarioRequest) SetAlertSettingId(v int64) *AddScenarioRequest {
	s.AlertSettingId = &v
	return s
}

func (s *AddScenarioRequest) SetLevel(v int64) *AddScenarioRequest {
	s.Level = &v
	return s
}

func (s *AddScenarioRequest) SetName(v string) *AddScenarioRequest {
	s.Name = &v
	return s
}

func (s *AddScenarioRequest) SetOperaUid(v string) *AddScenarioRequest {
	s.OperaUid = &v
	return s
}

type AddScenarioResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AddScenarioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddScenarioResponseBody) GoString() string {
	return s.String()
}

func (s *AddScenarioResponseBody) SetCode(v int32) *AddScenarioResponseBody {
	s.Code = &v
	return s
}

func (s *AddScenarioResponseBody) SetData(v map[string]interface{}) *AddScenarioResponseBody {
	s.Data = v
	return s
}

func (s *AddScenarioResponseBody) SetMsg(v string) *AddScenarioResponseBody {
	s.Msg = &v
	return s
}

func (s *AddScenarioResponseBody) SetPageTotal(v int64) *AddScenarioResponseBody {
	s.PageTotal = &v
	return s
}

func (s *AddScenarioResponseBody) SetRequestId(v string) *AddScenarioResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddScenarioResponseBody) SetStatus(v string) *AddScenarioResponseBody {
	s.Status = &v
	return s
}

type AddScenarioResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddScenarioResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddScenarioResponse) String() string {
	return tea.Prettify(s)
}

func (s AddScenarioResponse) GoString() string {
	return s.String()
}

func (s *AddScenarioResponse) SetHeaders(v map[string]*string) *AddScenarioResponse {
	s.Headers = v
	return s
}

func (s *AddScenarioResponse) SetStatusCode(v int32) *AddScenarioResponse {
	s.StatusCode = &v
	return s
}

func (s *AddScenarioResponse) SetBody(v *AddScenarioResponseBody) *AddScenarioResponse {
	s.Body = v
	return s
}

type AddSceneListRequest struct {
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SceneDescribe     *string `json:"SceneDescribe,omitempty" xml:"SceneDescribe,omitempty"`
	SceneName         *string `json:"SceneName,omitempty" xml:"SceneName,omitempty"`
	ScenePersonLiable *string `json:"ScenePersonLiable,omitempty" xml:"ScenePersonLiable,omitempty"`
	SceneType         *string `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	SceneVoJson       *string `json:"SceneVoJson,omitempty" xml:"SceneVoJson,omitempty"`
	Webhook           *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s AddSceneListRequest) String() string {
	return tea.Prettify(s)
}

func (s AddSceneListRequest) GoString() string {
	return s.String()
}

func (s *AddSceneListRequest) SetOperaUid(v string) *AddSceneListRequest {
	s.OperaUid = &v
	return s
}

func (s *AddSceneListRequest) SetSceneDescribe(v string) *AddSceneListRequest {
	s.SceneDescribe = &v
	return s
}

func (s *AddSceneListRequest) SetSceneName(v string) *AddSceneListRequest {
	s.SceneName = &v
	return s
}

func (s *AddSceneListRequest) SetScenePersonLiable(v string) *AddSceneListRequest {
	s.ScenePersonLiable = &v
	return s
}

func (s *AddSceneListRequest) SetSceneType(v string) *AddSceneListRequest {
	s.SceneType = &v
	return s
}

func (s *AddSceneListRequest) SetSceneVoJson(v string) *AddSceneListRequest {
	s.SceneVoJson = &v
	return s
}

func (s *AddSceneListRequest) SetWebhook(v string) *AddSceneListRequest {
	s.Webhook = &v
	return s
}

type AddSceneListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AddSceneListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddSceneListResponseBody) GoString() string {
	return s.String()
}

func (s *AddSceneListResponseBody) SetCode(v int32) *AddSceneListResponseBody {
	s.Code = &v
	return s
}

func (s *AddSceneListResponseBody) SetData(v map[string]interface{}) *AddSceneListResponseBody {
	s.Data = v
	return s
}

func (s *AddSceneListResponseBody) SetMsg(v string) *AddSceneListResponseBody {
	s.Msg = &v
	return s
}

func (s *AddSceneListResponseBody) SetRequestId(v string) *AddSceneListResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddSceneListResponseBody) SetStatus(v string) *AddSceneListResponseBody {
	s.Status = &v
	return s
}

type AddSceneListResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddSceneListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddSceneListResponse) String() string {
	return tea.Prettify(s)
}

func (s AddSceneListResponse) GoString() string {
	return s.String()
}

func (s *AddSceneListResponse) SetHeaders(v map[string]*string) *AddSceneListResponse {
	s.Headers = v
	return s
}

func (s *AddSceneListResponse) SetStatusCode(v int32) *AddSceneListResponse {
	s.StatusCode = &v
	return s
}

func (s *AddSceneListResponse) SetBody(v *AddSceneListResponseBody) *AddSceneListResponse {
	s.Body = v
	return s
}

type AddScriptRequest struct {
	HandleSuggestDesc *string `json:"HandleSuggestDesc,omitempty" xml:"HandleSuggestDesc,omitempty"`
	MetricName        *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode       *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	RootCauseDesc     *string `json:"RootCauseDesc,omitempty" xml:"RootCauseDesc,omitempty"`
	RootCausesLog     *string `json:"RootCausesLog,omitempty" xml:"RootCausesLog,omitempty"`
	SceneId           *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	Script            *string `json:"Script,omitempty" xml:"Script,omitempty"`
	ScriptDesc        *string `json:"ScriptDesc,omitempty" xml:"ScriptDesc,omitempty"`
	ScriptLanguage    *string `json:"ScriptLanguage,omitempty" xml:"ScriptLanguage,omitempty"`
	ScriptName        *string `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	ScriptVersion     *string `json:"ScriptVersion,omitempty" xml:"ScriptVersion,omitempty"`
	Status            *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type              *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s AddScriptRequest) GoString() string {
	return s.String()
}

func (s *AddScriptRequest) SetHandleSuggestDesc(v string) *AddScriptRequest {
	s.HandleSuggestDesc = &v
	return s
}

func (s *AddScriptRequest) SetMetricName(v string) *AddScriptRequest {
	s.MetricName = &v
	return s
}

func (s *AddScriptRequest) SetOperaUid(v string) *AddScriptRequest {
	s.OperaUid = &v
	return s
}

func (s *AddScriptRequest) SetProductCode(v string) *AddScriptRequest {
	s.ProductCode = &v
	return s
}

func (s *AddScriptRequest) SetRootCauseDesc(v string) *AddScriptRequest {
	s.RootCauseDesc = &v
	return s
}

func (s *AddScriptRequest) SetRootCausesLog(v string) *AddScriptRequest {
	s.RootCausesLog = &v
	return s
}

func (s *AddScriptRequest) SetSceneId(v string) *AddScriptRequest {
	s.SceneId = &v
	return s
}

func (s *AddScriptRequest) SetScript(v string) *AddScriptRequest {
	s.Script = &v
	return s
}

func (s *AddScriptRequest) SetScriptDesc(v string) *AddScriptRequest {
	s.ScriptDesc = &v
	return s
}

func (s *AddScriptRequest) SetScriptLanguage(v string) *AddScriptRequest {
	s.ScriptLanguage = &v
	return s
}

func (s *AddScriptRequest) SetScriptName(v string) *AddScriptRequest {
	s.ScriptName = &v
	return s
}

func (s *AddScriptRequest) SetScriptVersion(v string) *AddScriptRequest {
	s.ScriptVersion = &v
	return s
}

func (s *AddScriptRequest) SetStatus(v int32) *AddScriptRequest {
	s.Status = &v
	return s
}

func (s *AddScriptRequest) SetType(v int32) *AddScriptRequest {
	s.Type = &v
	return s
}

type AddScriptResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AddScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddScriptResponseBody) GoString() string {
	return s.String()
}

func (s *AddScriptResponseBody) SetCode(v int32) *AddScriptResponseBody {
	s.Code = &v
	return s
}

func (s *AddScriptResponseBody) SetData(v map[string]interface{}) *AddScriptResponseBody {
	s.Data = v
	return s
}

func (s *AddScriptResponseBody) SetMsg(v string) *AddScriptResponseBody {
	s.Msg = &v
	return s
}

func (s *AddScriptResponseBody) SetRequestId(v string) *AddScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddScriptResponseBody) SetStatus(v string) *AddScriptResponseBody {
	s.Status = &v
	return s
}

type AddScriptResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddScriptResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s AddScriptResponse) GoString() string {
	return s.String()
}

func (s *AddScriptResponse) SetHeaders(v map[string]*string) *AddScriptResponse {
	s.Headers = v
	return s
}

func (s *AddScriptResponse) SetStatusCode(v int32) *AddScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *AddScriptResponse) SetBody(v *AddScriptResponseBody) *AddScriptResponse {
	s.Body = v
	return s
}

type AddTagInfoRequest struct {
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductId *int64  `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	TagName   *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s AddTagInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTagInfoRequest) GoString() string {
	return s.String()
}

func (s *AddTagInfoRequest) SetOperaUid(v string) *AddTagInfoRequest {
	s.OperaUid = &v
	return s
}

func (s *AddTagInfoRequest) SetProductId(v int64) *AddTagInfoRequest {
	s.ProductId = &v
	return s
}

func (s *AddTagInfoRequest) SetTagName(v string) *AddTagInfoRequest {
	s.TagName = &v
	return s
}

type AddTagInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AddTagInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTagInfoResponseBody) GoString() string {
	return s.String()
}

func (s *AddTagInfoResponseBody) SetCode(v int32) *AddTagInfoResponseBody {
	s.Code = &v
	return s
}

func (s *AddTagInfoResponseBody) SetData(v map[string]interface{}) *AddTagInfoResponseBody {
	s.Data = v
	return s
}

func (s *AddTagInfoResponseBody) SetMsg(v string) *AddTagInfoResponseBody {
	s.Msg = &v
	return s
}

func (s *AddTagInfoResponseBody) SetRequestId(v string) *AddTagInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddTagInfoResponseBody) SetStatus(v string) *AddTagInfoResponseBody {
	s.Status = &v
	return s
}

type AddTagInfoResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddTagInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddTagInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTagInfoResponse) GoString() string {
	return s.String()
}

func (s *AddTagInfoResponse) SetHeaders(v map[string]*string) *AddTagInfoResponse {
	s.Headers = v
	return s
}

func (s *AddTagInfoResponse) SetStatusCode(v int32) *AddTagInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTagInfoResponse) SetBody(v *AddTagInfoResponseBody) *AddTagInfoResponse {
	s.Body = v
	return s
}

type AgainSubmitApplyPermissionRequest struct {
	SwitchFrontOperaUid *string `json:"SwitchFrontOperaUid,omitempty" xml:"SwitchFrontOperaUid,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uid                 *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s AgainSubmitApplyPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s AgainSubmitApplyPermissionRequest) GoString() string {
	return s.String()
}

func (s *AgainSubmitApplyPermissionRequest) SetSwitchFrontOperaUid(v string) *AgainSubmitApplyPermissionRequest {
	s.SwitchFrontOperaUid = &v
	return s
}

func (s *AgainSubmitApplyPermissionRequest) SetType(v string) *AgainSubmitApplyPermissionRequest {
	s.Type = &v
	return s
}

func (s *AgainSubmitApplyPermissionRequest) SetUid(v int64) *AgainSubmitApplyPermissionRequest {
	s.Uid = &v
	return s
}

type AgainSubmitApplyPermissionResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AgainSubmitApplyPermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AgainSubmitApplyPermissionResponseBody) GoString() string {
	return s.String()
}

func (s *AgainSubmitApplyPermissionResponseBody) SetCode(v int32) *AgainSubmitApplyPermissionResponseBody {
	s.Code = &v
	return s
}

func (s *AgainSubmitApplyPermissionResponseBody) SetData(v map[string]interface{}) *AgainSubmitApplyPermissionResponseBody {
	s.Data = v
	return s
}

func (s *AgainSubmitApplyPermissionResponseBody) SetMsg(v string) *AgainSubmitApplyPermissionResponseBody {
	s.Msg = &v
	return s
}

func (s *AgainSubmitApplyPermissionResponseBody) SetRequestId(v string) *AgainSubmitApplyPermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *AgainSubmitApplyPermissionResponseBody) SetStatus(v string) *AgainSubmitApplyPermissionResponseBody {
	s.Status = &v
	return s
}

type AgainSubmitApplyPermissionResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AgainSubmitApplyPermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AgainSubmitApplyPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s AgainSubmitApplyPermissionResponse) GoString() string {
	return s.String()
}

func (s *AgainSubmitApplyPermissionResponse) SetHeaders(v map[string]*string) *AgainSubmitApplyPermissionResponse {
	s.Headers = v
	return s
}

func (s *AgainSubmitApplyPermissionResponse) SetStatusCode(v int32) *AgainSubmitApplyPermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *AgainSubmitApplyPermissionResponse) SetBody(v *AgainSubmitApplyPermissionResponseBody) *AgainSubmitApplyPermissionResponse {
	s.Body = v
	return s
}

type ApplyAuthorizationRequest struct {
	SwitchFrontOperaUid *string `json:"SwitchFrontOperaUid,omitempty" xml:"SwitchFrontOperaUid,omitempty"`
	Uid                 *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s ApplyAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *ApplyAuthorizationRequest) SetSwitchFrontOperaUid(v string) *ApplyAuthorizationRequest {
	s.SwitchFrontOperaUid = &v
	return s
}

func (s *ApplyAuthorizationRequest) SetUid(v int64) *ApplyAuthorizationRequest {
	s.Uid = &v
	return s
}

type ApplyAuthorizationResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ApplyAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyAuthorizationResponseBody) SetCode(v int32) *ApplyAuthorizationResponseBody {
	s.Code = &v
	return s
}

func (s *ApplyAuthorizationResponseBody) SetData(v map[string]interface{}) *ApplyAuthorizationResponseBody {
	s.Data = v
	return s
}

func (s *ApplyAuthorizationResponseBody) SetMsg(v string) *ApplyAuthorizationResponseBody {
	s.Msg = &v
	return s
}

func (s *ApplyAuthorizationResponseBody) SetRequestId(v string) *ApplyAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyAuthorizationResponseBody) SetStatus(v string) *ApplyAuthorizationResponseBody {
	s.Status = &v
	return s
}

type ApplyAuthorizationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *ApplyAuthorizationResponse) SetHeaders(v map[string]*string) *ApplyAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *ApplyAuthorizationResponse) SetStatusCode(v int32) *ApplyAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyAuthorizationResponse) SetBody(v *ApplyAuthorizationResponseBody) *ApplyAuthorizationResponse {
	s.Body = v
	return s
}

type CheckDataSourceLinkConnectionRequest struct {
	DataSourceParams *string `json:"DataSourceParams,omitempty" xml:"DataSourceParams,omitempty"`
	DataSourceType   *int32  `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	OperaUid         *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s CheckDataSourceLinkConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckDataSourceLinkConnectionRequest) GoString() string {
	return s.String()
}

func (s *CheckDataSourceLinkConnectionRequest) SetDataSourceParams(v string) *CheckDataSourceLinkConnectionRequest {
	s.DataSourceParams = &v
	return s
}

func (s *CheckDataSourceLinkConnectionRequest) SetDataSourceType(v int32) *CheckDataSourceLinkConnectionRequest {
	s.DataSourceType = &v
	return s
}

func (s *CheckDataSourceLinkConnectionRequest) SetOperaUid(v string) *CheckDataSourceLinkConnectionRequest {
	s.OperaUid = &v
	return s
}

type CheckDataSourceLinkConnectionResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CheckDataSourceLinkConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckDataSourceLinkConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *CheckDataSourceLinkConnectionResponseBody) SetCode(v int32) *CheckDataSourceLinkConnectionResponseBody {
	s.Code = &v
	return s
}

func (s *CheckDataSourceLinkConnectionResponseBody) SetData(v map[string]interface{}) *CheckDataSourceLinkConnectionResponseBody {
	s.Data = v
	return s
}

func (s *CheckDataSourceLinkConnectionResponseBody) SetMsg(v string) *CheckDataSourceLinkConnectionResponseBody {
	s.Msg = &v
	return s
}

func (s *CheckDataSourceLinkConnectionResponseBody) SetRequestId(v string) *CheckDataSourceLinkConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckDataSourceLinkConnectionResponseBody) SetStatus(v string) *CheckDataSourceLinkConnectionResponseBody {
	s.Status = &v
	return s
}

type CheckDataSourceLinkConnectionResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckDataSourceLinkConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckDataSourceLinkConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckDataSourceLinkConnectionResponse) GoString() string {
	return s.String()
}

func (s *CheckDataSourceLinkConnectionResponse) SetHeaders(v map[string]*string) *CheckDataSourceLinkConnectionResponse {
	s.Headers = v
	return s
}

func (s *CheckDataSourceLinkConnectionResponse) SetStatusCode(v int32) *CheckDataSourceLinkConnectionResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckDataSourceLinkConnectionResponse) SetBody(v *CheckDataSourceLinkConnectionResponseBody) *CheckDataSourceLinkConnectionResponse {
	s.Body = v
	return s
}

type CheckLogRequest struct {
	DataSourceId *int64  `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	OperaUid     *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s CheckLogRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckLogRequest) GoString() string {
	return s.String()
}

func (s *CheckLogRequest) SetDataSourceId(v int64) *CheckLogRequest {
	s.DataSourceId = &v
	return s
}

func (s *CheckLogRequest) SetOperaUid(v string) *CheckLogRequest {
	s.OperaUid = &v
	return s
}

type CheckLogResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CheckLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckLogResponseBody) GoString() string {
	return s.String()
}

func (s *CheckLogResponseBody) SetCode(v int32) *CheckLogResponseBody {
	s.Code = &v
	return s
}

func (s *CheckLogResponseBody) SetData(v map[string]interface{}) *CheckLogResponseBody {
	s.Data = v
	return s
}

func (s *CheckLogResponseBody) SetMsg(v string) *CheckLogResponseBody {
	s.Msg = &v
	return s
}

func (s *CheckLogResponseBody) SetPageTotal(v int64) *CheckLogResponseBody {
	s.PageTotal = &v
	return s
}

func (s *CheckLogResponseBody) SetRequestId(v string) *CheckLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckLogResponseBody) SetStatus(v string) *CheckLogResponseBody {
	s.Status = &v
	return s
}

type CheckLogResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckLogResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckLogResponse) GoString() string {
	return s.String()
}

func (s *CheckLogResponse) SetHeaders(v map[string]*string) *CheckLogResponse {
	s.Headers = v
	return s
}

func (s *CheckLogResponse) SetStatusCode(v int32) *CheckLogResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckLogResponse) SetBody(v *CheckLogResponseBody) *CheckLogResponse {
	s.Body = v
	return s
}

type CloseEventRequest struct {
	CloseDesc *string `json:"CloseDesc,omitempty" xml:"CloseDesc,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CloseEventRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseEventRequest) GoString() string {
	return s.String()
}

func (s *CloseEventRequest) SetCloseDesc(v string) *CloseEventRequest {
	s.CloseDesc = &v
	return s
}

func (s *CloseEventRequest) SetId(v string) *CloseEventRequest {
	s.Id = &v
	return s
}

type CloseEventResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CloseEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloseEventResponseBody) GoString() string {
	return s.String()
}

func (s *CloseEventResponseBody) SetCode(v string) *CloseEventResponseBody {
	s.Code = &v
	return s
}

func (s *CloseEventResponseBody) SetData(v bool) *CloseEventResponseBody {
	s.Data = &v
	return s
}

func (s *CloseEventResponseBody) SetMsg(v string) *CloseEventResponseBody {
	s.Msg = &v
	return s
}

func (s *CloseEventResponseBody) SetRequestId(v string) *CloseEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *CloseEventResponseBody) SetStatus(v string) *CloseEventResponseBody {
	s.Status = &v
	return s
}

type CloseEventResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CloseEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CloseEventResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseEventResponse) GoString() string {
	return s.String()
}

func (s *CloseEventResponse) SetHeaders(v map[string]*string) *CloseEventResponse {
	s.Headers = v
	return s
}

func (s *CloseEventResponse) SetStatusCode(v int32) *CloseEventResponse {
	s.StatusCode = &v
	return s
}

func (s *CloseEventResponse) SetBody(v *CloseEventResponseBody) *CloseEventResponse {
	s.Body = v
	return s
}

type ConfirmAuthorizationRequest struct {
	PermissionType      *int32  `json:"PermissionType,omitempty" xml:"PermissionType,omitempty"`
	SwitchFrontOperaUid *string `json:"SwitchFrontOperaUid,omitempty" xml:"SwitchFrontOperaUid,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uid                 *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s ConfirmAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *ConfirmAuthorizationRequest) SetPermissionType(v int32) *ConfirmAuthorizationRequest {
	s.PermissionType = &v
	return s
}

func (s *ConfirmAuthorizationRequest) SetSwitchFrontOperaUid(v string) *ConfirmAuthorizationRequest {
	s.SwitchFrontOperaUid = &v
	return s
}

func (s *ConfirmAuthorizationRequest) SetType(v string) *ConfirmAuthorizationRequest {
	s.Type = &v
	return s
}

func (s *ConfirmAuthorizationRequest) SetUid(v int64) *ConfirmAuthorizationRequest {
	s.Uid = &v
	return s
}

type ConfirmAuthorizationResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ConfirmAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfirmAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *ConfirmAuthorizationResponseBody) SetCode(v int32) *ConfirmAuthorizationResponseBody {
	s.Code = &v
	return s
}

func (s *ConfirmAuthorizationResponseBody) SetData(v map[string]interface{}) *ConfirmAuthorizationResponseBody {
	s.Data = v
	return s
}

func (s *ConfirmAuthorizationResponseBody) SetMsg(v string) *ConfirmAuthorizationResponseBody {
	s.Msg = &v
	return s
}

func (s *ConfirmAuthorizationResponseBody) SetRequestId(v string) *ConfirmAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfirmAuthorizationResponseBody) SetStatus(v string) *ConfirmAuthorizationResponseBody {
	s.Status = &v
	return s
}

type ConfirmAuthorizationResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ConfirmAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ConfirmAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *ConfirmAuthorizationResponse) SetHeaders(v map[string]*string) *ConfirmAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *ConfirmAuthorizationResponse) SetStatusCode(v int32) *ConfirmAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfirmAuthorizationResponse) SetBody(v *ConfirmAuthorizationResponseBody) *ConfirmAuthorizationResponse {
	s.Body = v
	return s
}

type CountLatestReportsRequest struct {
	LogStore    *string `json:"LogStore,omitempty" xml:"LogStore,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	Uid         *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s CountLatestReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s CountLatestReportsRequest) GoString() string {
	return s.String()
}

func (s *CountLatestReportsRequest) SetLogStore(v string) *CountLatestReportsRequest {
	s.LogStore = &v
	return s
}

func (s *CountLatestReportsRequest) SetProductCode(v string) *CountLatestReportsRequest {
	s.ProductCode = &v
	return s
}

func (s *CountLatestReportsRequest) SetUid(v int64) *CountLatestReportsRequest {
	s.Uid = &v
	return s
}

type CountLatestReportsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CountLatestReportsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CountLatestReportsResponseBody) GoString() string {
	return s.String()
}

func (s *CountLatestReportsResponseBody) SetCode(v int32) *CountLatestReportsResponseBody {
	s.Code = &v
	return s
}

func (s *CountLatestReportsResponseBody) SetData(v map[string]interface{}) *CountLatestReportsResponseBody {
	s.Data = v
	return s
}

func (s *CountLatestReportsResponseBody) SetMessage(v string) *CountLatestReportsResponseBody {
	s.Message = &v
	return s
}

func (s *CountLatestReportsResponseBody) SetRequestId(v string) *CountLatestReportsResponseBody {
	s.RequestId = &v
	return s
}

func (s *CountLatestReportsResponseBody) SetStatus(v string) *CountLatestReportsResponseBody {
	s.Status = &v
	return s
}

type CountLatestReportsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CountLatestReportsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CountLatestReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s CountLatestReportsResponse) GoString() string {
	return s.String()
}

func (s *CountLatestReportsResponse) SetHeaders(v map[string]*string) *CountLatestReportsResponse {
	s.Headers = v
	return s
}

func (s *CountLatestReportsResponse) SetStatusCode(v int32) *CountLatestReportsResponse {
	s.StatusCode = &v
	return s
}

func (s *CountLatestReportsResponse) SetBody(v *CountLatestReportsResponseBody) *CountLatestReportsResponse {
	s.Body = v
	return s
}

type CreateAlertContactRequest struct {
	Email    *string `json:"Email,omitempty" xml:"Email,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	Phone    *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	Webhook  *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s CreateAlertContactRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactRequest) GoString() string {
	return s.String()
}

func (s *CreateAlertContactRequest) SetEmail(v string) *CreateAlertContactRequest {
	s.Email = &v
	return s
}

func (s *CreateAlertContactRequest) SetName(v string) *CreateAlertContactRequest {
	s.Name = &v
	return s
}

func (s *CreateAlertContactRequest) SetOperaUid(v string) *CreateAlertContactRequest {
	s.OperaUid = &v
	return s
}

func (s *CreateAlertContactRequest) SetPhone(v string) *CreateAlertContactRequest {
	s.Phone = &v
	return s
}

func (s *CreateAlertContactRequest) SetWebhook(v string) *CreateAlertContactRequest {
	s.Webhook = &v
	return s
}

type CreateAlertContactResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateAlertContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAlertContactResponseBody) SetCode(v int32) *CreateAlertContactResponseBody {
	s.Code = &v
	return s
}

func (s *CreateAlertContactResponseBody) SetData(v bool) *CreateAlertContactResponseBody {
	s.Data = &v
	return s
}

func (s *CreateAlertContactResponseBody) SetMessage(v string) *CreateAlertContactResponseBody {
	s.Message = &v
	return s
}

func (s *CreateAlertContactResponseBody) SetRequestId(v string) *CreateAlertContactResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAlertContactResponseBody) SetStatus(v string) *CreateAlertContactResponseBody {
	s.Status = &v
	return s
}

type CreateAlertContactResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAlertContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAlertContactResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactResponse) GoString() string {
	return s.String()
}

func (s *CreateAlertContactResponse) SetHeaders(v map[string]*string) *CreateAlertContactResponse {
	s.Headers = v
	return s
}

func (s *CreateAlertContactResponse) SetStatusCode(v int32) *CreateAlertContactResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAlertContactResponse) SetBody(v *CreateAlertContactResponseBody) *CreateAlertContactResponse {
	s.Body = v
	return s
}

type CreateAlertContactGroupRequest struct {
	AlertContactGroupJson *string `json:"AlertContactGroupJson,omitempty" xml:"AlertContactGroupJson,omitempty"`
	ContactIdsJson        *string `json:"ContactIdsJson,omitempty" xml:"ContactIdsJson,omitempty"`
	OperaUid              *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s CreateAlertContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateAlertContactGroupRequest) SetAlertContactGroupJson(v string) *CreateAlertContactGroupRequest {
	s.AlertContactGroupJson = &v
	return s
}

func (s *CreateAlertContactGroupRequest) SetContactIdsJson(v string) *CreateAlertContactGroupRequest {
	s.ContactIdsJson = &v
	return s
}

func (s *CreateAlertContactGroupRequest) SetOperaUid(v string) *CreateAlertContactGroupRequest {
	s.OperaUid = &v
	return s
}

type CreateAlertContactGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateAlertContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAlertContactGroupResponseBody) SetCode(v int32) *CreateAlertContactGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateAlertContactGroupResponseBody) SetData(v bool) *CreateAlertContactGroupResponseBody {
	s.Data = &v
	return s
}

func (s *CreateAlertContactGroupResponseBody) SetMessage(v string) *CreateAlertContactGroupResponseBody {
	s.Message = &v
	return s
}

func (s *CreateAlertContactGroupResponseBody) SetRequestId(v string) *CreateAlertContactGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAlertContactGroupResponseBody) SetStatus(v string) *CreateAlertContactGroupResponseBody {
	s.Status = &v
	return s
}

type CreateAlertContactGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAlertContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAlertContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAlertContactGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateAlertContactGroupResponse) SetHeaders(v map[string]*string) *CreateAlertContactGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateAlertContactGroupResponse) SetStatusCode(v int32) *CreateAlertContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAlertContactGroupResponse) SetBody(v *CreateAlertContactGroupResponseBody) *CreateAlertContactGroupResponse {
	s.Body = v
	return s
}

type CreateCommandRequest struct {
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	WorkingDir     *string `json:"WorkingDir,omitempty" xml:"WorkingDir,omitempty"`
	Timeout        *int64  `json:"timeout,omitempty" xml:"timeout,omitempty"`
}

func (s CreateCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCommandRequest) GoString() string {
	return s.String()
}

func (s *CreateCommandRequest) SetCommandContent(v string) *CreateCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *CreateCommandRequest) SetDescription(v string) *CreateCommandRequest {
	s.Description = &v
	return s
}

func (s *CreateCommandRequest) SetName(v string) *CreateCommandRequest {
	s.Name = &v
	return s
}

func (s *CreateCommandRequest) SetRegionId(v string) *CreateCommandRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCommandRequest) SetType(v string) *CreateCommandRequest {
	s.Type = &v
	return s
}

func (s *CreateCommandRequest) SetWorkingDir(v string) *CreateCommandRequest {
	s.WorkingDir = &v
	return s
}

func (s *CreateCommandRequest) SetTimeout(v int64) *CreateCommandRequest {
	s.Timeout = &v
	return s
}

type CreateCommandResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCommandResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCommandResponseBody) SetRequestId(v string) *CreateCommandResponseBody {
	s.RequestId = &v
	return s
}

type CreateCommandResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCommandResponse) GoString() string {
	return s.String()
}

func (s *CreateCommandResponse) SetHeaders(v map[string]*string) *CreateCommandResponse {
	s.Headers = v
	return s
}

func (s *CreateCommandResponse) SetStatusCode(v int32) *CreateCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCommandResponse) SetBody(v *CreateCommandResponseBody) *CreateCommandResponse {
	s.Body = v
	return s
}

type CreateDumpRequest struct {
	EventId    *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateDumpRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDumpRequest) GoString() string {
	return s.String()
}

func (s *CreateDumpRequest) SetEventId(v string) *CreateDumpRequest {
	s.EventId = &v
	return s
}

func (s *CreateDumpRequest) SetInstanceId(v string) *CreateDumpRequest {
	s.InstanceId = &v
	return s
}

type CreateDumpResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateDumpResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDumpResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDumpResponseBody) SetCode(v int32) *CreateDumpResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDumpResponseBody) SetData(v map[string]interface{}) *CreateDumpResponseBody {
	s.Data = v
	return s
}

func (s *CreateDumpResponseBody) SetMessage(v string) *CreateDumpResponseBody {
	s.Message = &v
	return s
}

func (s *CreateDumpResponseBody) SetRequestId(v string) *CreateDumpResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDumpResponseBody) SetStatus(v bool) *CreateDumpResponseBody {
	s.Status = &v
	return s
}

type CreateDumpResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDumpResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDumpResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDumpResponse) GoString() string {
	return s.String()
}

func (s *CreateDumpResponse) SetHeaders(v map[string]*string) *CreateDumpResponse {
	s.Headers = v
	return s
}

func (s *CreateDumpResponse) SetStatusCode(v int32) *CreateDumpResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDumpResponse) SetBody(v *CreateDumpResponseBody) *CreateDumpResponse {
	s.Body = v
	return s
}

type CreateInspectionRecordRequest struct {
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ResourceId  *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s CreateInspectionRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInspectionRecordRequest) GoString() string {
	return s.String()
}

func (s *CreateInspectionRecordRequest) SetOperaUid(v string) *CreateInspectionRecordRequest {
	s.OperaUid = &v
	return s
}

func (s *CreateInspectionRecordRequest) SetProductCode(v string) *CreateInspectionRecordRequest {
	s.ProductCode = &v
	return s
}

func (s *CreateInspectionRecordRequest) SetResourceId(v string) *CreateInspectionRecordRequest {
	s.ResourceId = &v
	return s
}

type CreateInspectionRecordResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateInspectionRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInspectionRecordResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInspectionRecordResponseBody) SetCode(v int32) *CreateInspectionRecordResponseBody {
	s.Code = &v
	return s
}

func (s *CreateInspectionRecordResponseBody) SetData(v string) *CreateInspectionRecordResponseBody {
	s.Data = &v
	return s
}

func (s *CreateInspectionRecordResponseBody) SetMessage(v string) *CreateInspectionRecordResponseBody {
	s.Message = &v
	return s
}

func (s *CreateInspectionRecordResponseBody) SetRequestId(v string) *CreateInspectionRecordResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInspectionRecordResponseBody) SetStatus(v string) *CreateInspectionRecordResponseBody {
	s.Status = &v
	return s
}

type CreateInspectionRecordResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateInspectionRecordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateInspectionRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInspectionRecordResponse) GoString() string {
	return s.String()
}

func (s *CreateInspectionRecordResponse) SetHeaders(v map[string]*string) *CreateInspectionRecordResponse {
	s.Headers = v
	return s
}

func (s *CreateInspectionRecordResponse) SetStatusCode(v int32) *CreateInspectionRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInspectionRecordResponse) SetBody(v *CreateInspectionRecordResponseBody) *CreateInspectionRecordResponse {
	s.Body = v
	return s
}

type CreateMessageRequest struct {
	EventId    *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateMessageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageRequest) GoString() string {
	return s.String()
}

func (s *CreateMessageRequest) SetEventId(v string) *CreateMessageRequest {
	s.EventId = &v
	return s
}

func (s *CreateMessageRequest) SetInstanceId(v string) *CreateMessageRequest {
	s.InstanceId = &v
	return s
}

type CreateMessageResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateMessageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMessageResponseBody) SetCode(v int32) *CreateMessageResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMessageResponseBody) SetData(v map[string]interface{}) *CreateMessageResponseBody {
	s.Data = v
	return s
}

func (s *CreateMessageResponseBody) SetMessage(v string) *CreateMessageResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMessageResponseBody) SetRequestId(v string) *CreateMessageResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMessageResponseBody) SetStatus(v bool) *CreateMessageResponseBody {
	s.Status = &v
	return s
}

type CreateMessageResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMessageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMessageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMessageResponse) GoString() string {
	return s.String()
}

func (s *CreateMessageResponse) SetHeaders(v map[string]*string) *CreateMessageResponse {
	s.Headers = v
	return s
}

func (s *CreateMessageResponse) SetStatusCode(v int32) *CreateMessageResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMessageResponse) SetBody(v *CreateMessageResponseBody) *CreateMessageResponse {
	s.Body = v
	return s
}

type CreateSceneRequest struct {
	FlowName       *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	MetricListJson *string `json:"MetricListJson,omitempty" xml:"MetricListJson,omitempty"`
	NodeListJson   *string `json:"NodeListJson,omitempty" xml:"NodeListJson,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SceneDesc      *string `json:"SceneDesc,omitempty" xml:"SceneDesc,omitempty"`
	SceneName      *string `json:"SceneName,omitempty" xml:"SceneName,omitempty"`
	SceneOwner     *string `json:"SceneOwner,omitempty" xml:"SceneOwner,omitempty"`
	SceneWebhook   *string `json:"SceneWebhook,omitempty" xml:"SceneWebhook,omitempty"`
}

func (s CreateSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneRequest) GoString() string {
	return s.String()
}

func (s *CreateSceneRequest) SetFlowName(v string) *CreateSceneRequest {
	s.FlowName = &v
	return s
}

func (s *CreateSceneRequest) SetMetricListJson(v string) *CreateSceneRequest {
	s.MetricListJson = &v
	return s
}

func (s *CreateSceneRequest) SetNodeListJson(v string) *CreateSceneRequest {
	s.NodeListJson = &v
	return s
}

func (s *CreateSceneRequest) SetOperaUid(v string) *CreateSceneRequest {
	s.OperaUid = &v
	return s
}

func (s *CreateSceneRequest) SetSceneDesc(v string) *CreateSceneRequest {
	s.SceneDesc = &v
	return s
}

func (s *CreateSceneRequest) SetSceneName(v string) *CreateSceneRequest {
	s.SceneName = &v
	return s
}

func (s *CreateSceneRequest) SetSceneOwner(v string) *CreateSceneRequest {
	s.SceneOwner = &v
	return s
}

func (s *CreateSceneRequest) SetSceneWebhook(v string) *CreateSceneRequest {
	s.SceneWebhook = &v
	return s
}

type CreateSceneResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSceneResponseBody) SetCode(v int32) *CreateSceneResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSceneResponseBody) SetData(v string) *CreateSceneResponseBody {
	s.Data = &v
	return s
}

func (s *CreateSceneResponseBody) SetMessage(v string) *CreateSceneResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSceneResponseBody) SetRequestId(v string) *CreateSceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSceneResponseBody) SetStatus(v string) *CreateSceneResponseBody {
	s.Status = &v
	return s
}

type CreateSceneResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSceneResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneResponse) GoString() string {
	return s.String()
}

func (s *CreateSceneResponse) SetHeaders(v map[string]*string) *CreateSceneResponse {
	s.Headers = v
	return s
}

func (s *CreateSceneResponse) SetStatusCode(v int32) *CreateSceneResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSceneResponse) SetBody(v *CreateSceneResponseBody) *CreateSceneResponse {
	s.Body = v
	return s
}

type CreateSceneModelRequest struct {
	FcFunctionName    *string `json:"FcFunctionName,omitempty" xml:"FcFunctionName,omitempty"`
	FcHandler         *string `json:"FcHandler,omitempty" xml:"FcHandler,omitempty"`
	FcInitializer     *string `json:"FcInitializer,omitempty" xml:"FcInitializer,omitempty"`
	FcRegionNo        *string `json:"FcRegionNo,omitempty" xml:"FcRegionNo,omitempty"`
	FcServiceName     *string `json:"FcServiceName,omitempty" xml:"FcServiceName,omitempty"`
	ModelDesc         *string `json:"ModelDesc,omitempty" xml:"ModelDesc,omitempty"`
	ModelLanguage     *int32  `json:"ModelLanguage,omitempty" xml:"ModelLanguage,omitempty"`
	ModelMemo         *string `json:"ModelMemo,omitempty" xml:"ModelMemo,omitempty"`
	ModelName         *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	ModelType         *int32  `json:"ModelType,omitempty" xml:"ModelType,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	RootCauseDesc     *string `json:"RootCauseDesc,omitempty" xml:"RootCauseDesc,omitempty"`
	RootCauseSolution *string `json:"RootCauseSolution,omitempty" xml:"RootCauseSolution,omitempty"`
}

func (s CreateSceneModelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneModelRequest) GoString() string {
	return s.String()
}

func (s *CreateSceneModelRequest) SetFcFunctionName(v string) *CreateSceneModelRequest {
	s.FcFunctionName = &v
	return s
}

func (s *CreateSceneModelRequest) SetFcHandler(v string) *CreateSceneModelRequest {
	s.FcHandler = &v
	return s
}

func (s *CreateSceneModelRequest) SetFcInitializer(v string) *CreateSceneModelRequest {
	s.FcInitializer = &v
	return s
}

func (s *CreateSceneModelRequest) SetFcRegionNo(v string) *CreateSceneModelRequest {
	s.FcRegionNo = &v
	return s
}

func (s *CreateSceneModelRequest) SetFcServiceName(v string) *CreateSceneModelRequest {
	s.FcServiceName = &v
	return s
}

func (s *CreateSceneModelRequest) SetModelDesc(v string) *CreateSceneModelRequest {
	s.ModelDesc = &v
	return s
}

func (s *CreateSceneModelRequest) SetModelLanguage(v int32) *CreateSceneModelRequest {
	s.ModelLanguage = &v
	return s
}

func (s *CreateSceneModelRequest) SetModelMemo(v string) *CreateSceneModelRequest {
	s.ModelMemo = &v
	return s
}

func (s *CreateSceneModelRequest) SetModelName(v string) *CreateSceneModelRequest {
	s.ModelName = &v
	return s
}

func (s *CreateSceneModelRequest) SetModelType(v int32) *CreateSceneModelRequest {
	s.ModelType = &v
	return s
}

func (s *CreateSceneModelRequest) SetOperaUid(v string) *CreateSceneModelRequest {
	s.OperaUid = &v
	return s
}

func (s *CreateSceneModelRequest) SetRootCauseDesc(v string) *CreateSceneModelRequest {
	s.RootCauseDesc = &v
	return s
}

func (s *CreateSceneModelRequest) SetRootCauseSolution(v string) *CreateSceneModelRequest {
	s.RootCauseSolution = &v
	return s
}

type CreateSceneModelResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateSceneModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneModelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSceneModelResponseBody) SetCode(v int32) *CreateSceneModelResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSceneModelResponseBody) SetData(v string) *CreateSceneModelResponseBody {
	s.Data = &v
	return s
}

func (s *CreateSceneModelResponseBody) SetMessage(v string) *CreateSceneModelResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSceneModelResponseBody) SetRequestId(v string) *CreateSceneModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSceneModelResponseBody) SetStatus(v string) *CreateSceneModelResponseBody {
	s.Status = &v
	return s
}

type CreateSceneModelResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSceneModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSceneModelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneModelResponse) GoString() string {
	return s.String()
}

func (s *CreateSceneModelResponse) SetHeaders(v map[string]*string) *CreateSceneModelResponse {
	s.Headers = v
	return s
}

func (s *CreateSceneModelResponse) SetStatusCode(v int32) *CreateSceneModelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSceneModelResponse) SetBody(v *CreateSceneModelResponseBody) *CreateSceneModelResponse {
	s.Body = v
	return s
}

type CreateSceneModelApplyRequest struct {
	ModelId  *int64  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s CreateSceneModelApplyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneModelApplyRequest) GoString() string {
	return s.String()
}

func (s *CreateSceneModelApplyRequest) SetModelId(v int64) *CreateSceneModelApplyRequest {
	s.ModelId = &v
	return s
}

func (s *CreateSceneModelApplyRequest) SetOperaUid(v string) *CreateSceneModelApplyRequest {
	s.OperaUid = &v
	return s
}

type CreateSceneModelApplyResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateSceneModelApplyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneModelApplyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSceneModelApplyResponseBody) SetCode(v int32) *CreateSceneModelApplyResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSceneModelApplyResponseBody) SetData(v string) *CreateSceneModelApplyResponseBody {
	s.Data = &v
	return s
}

func (s *CreateSceneModelApplyResponseBody) SetMessage(v string) *CreateSceneModelApplyResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSceneModelApplyResponseBody) SetRequestId(v string) *CreateSceneModelApplyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSceneModelApplyResponseBody) SetStatus(v string) *CreateSceneModelApplyResponseBody {
	s.Status = &v
	return s
}

type CreateSceneModelApplyResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSceneModelApplyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSceneModelApplyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSceneModelApplyResponse) GoString() string {
	return s.String()
}

func (s *CreateSceneModelApplyResponse) SetHeaders(v map[string]*string) *CreateSceneModelApplyResponse {
	s.Headers = v
	return s
}

func (s *CreateSceneModelApplyResponse) SetStatusCode(v int32) *CreateSceneModelApplyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSceneModelApplyResponse) SetBody(v *CreateSceneModelApplyResponseBody) *CreateSceneModelApplyResponse {
	s.Body = v
	return s
}

type DelBusinessGroupRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
}

func (s DelBusinessGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DelBusinessGroupRequest) GoString() string {
	return s.String()
}

func (s *DelBusinessGroupRequest) SetBusinessGroupId(v string) *DelBusinessGroupRequest {
	s.BusinessGroupId = &v
	return s
}

type DelBusinessGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Msg       *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DelBusinessGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DelBusinessGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DelBusinessGroupResponseBody) SetCode(v int32) *DelBusinessGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DelBusinessGroupResponseBody) SetMsg(v string) *DelBusinessGroupResponseBody {
	s.Msg = &v
	return s
}

func (s *DelBusinessGroupResponseBody) SetRequestId(v string) *DelBusinessGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DelBusinessGroupResponseBody) SetStatus(v string) *DelBusinessGroupResponseBody {
	s.Status = &v
	return s
}

type DelBusinessGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DelBusinessGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DelBusinessGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DelBusinessGroupResponse) GoString() string {
	return s.String()
}

func (s *DelBusinessGroupResponse) SetHeaders(v map[string]*string) *DelBusinessGroupResponse {
	s.Headers = v
	return s
}

func (s *DelBusinessGroupResponse) SetStatusCode(v int32) *DelBusinessGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DelBusinessGroupResponse) SetBody(v *DelBusinessGroupResponseBody) *DelBusinessGroupResponse {
	s.Body = v
	return s
}

type DeleteAlertContactRequest struct {
	ContactIdListJson *string `json:"ContactIdListJson,omitempty" xml:"ContactIdListJson,omitempty"`
	GroupId           *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteAlertContactRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactRequest) SetContactIdListJson(v string) *DeleteAlertContactRequest {
	s.ContactIdListJson = &v
	return s
}

func (s *DeleteAlertContactRequest) SetGroupId(v int64) *DeleteAlertContactRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteAlertContactRequest) SetOperaUid(v string) *DeleteAlertContactRequest {
	s.OperaUid = &v
	return s
}

type DeleteAlertContactResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteAlertContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactResponseBody) SetCode(v int32) *DeleteAlertContactResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAlertContactResponseBody) SetData(v bool) *DeleteAlertContactResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteAlertContactResponseBody) SetMessage(v string) *DeleteAlertContactResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAlertContactResponseBody) SetRequestId(v string) *DeleteAlertContactResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAlertContactResponseBody) SetStatus(v string) *DeleteAlertContactResponseBody {
	s.Status = &v
	return s
}

type DeleteAlertContactResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlertContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlertContactResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactResponse) SetHeaders(v map[string]*string) *DeleteAlertContactResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlertContactResponse) SetStatusCode(v int32) *DeleteAlertContactResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlertContactResponse) SetBody(v *DeleteAlertContactResponseBody) *DeleteAlertContactResponse {
	s.Body = v
	return s
}

type DeleteAlertContactFromGroupRequest struct {
	ContactIdListJson *string `json:"ContactIdListJson,omitempty" xml:"ContactIdListJson,omitempty"`
	GroupId           *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteAlertContactFromGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactFromGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactFromGroupRequest) SetContactIdListJson(v string) *DeleteAlertContactFromGroupRequest {
	s.ContactIdListJson = &v
	return s
}

func (s *DeleteAlertContactFromGroupRequest) SetGroupId(v int64) *DeleteAlertContactFromGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteAlertContactFromGroupRequest) SetOperaUid(v string) *DeleteAlertContactFromGroupRequest {
	s.OperaUid = &v
	return s
}

type DeleteAlertContactFromGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteAlertContactFromGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactFromGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactFromGroupResponseBody) SetCode(v int32) *DeleteAlertContactFromGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAlertContactFromGroupResponseBody) SetData(v bool) *DeleteAlertContactFromGroupResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteAlertContactFromGroupResponseBody) SetMessage(v string) *DeleteAlertContactFromGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAlertContactFromGroupResponseBody) SetRequestId(v string) *DeleteAlertContactFromGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAlertContactFromGroupResponseBody) SetStatus(v string) *DeleteAlertContactFromGroupResponseBody {
	s.Status = &v
	return s
}

type DeleteAlertContactFromGroupResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlertContactFromGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlertContactFromGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactFromGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactFromGroupResponse) SetHeaders(v map[string]*string) *DeleteAlertContactFromGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlertContactFromGroupResponse) SetStatusCode(v int32) *DeleteAlertContactFromGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlertContactFromGroupResponse) SetBody(v *DeleteAlertContactFromGroupResponseBody) *DeleteAlertContactFromGroupResponse {
	s.Body = v
	return s
}

type DeleteAlertContactGroupRequest struct {
	GroupId  *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteAlertContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactGroupRequest) SetGroupId(v int64) *DeleteAlertContactGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteAlertContactGroupRequest) SetOperaUid(v string) *DeleteAlertContactGroupRequest {
	s.OperaUid = &v
	return s
}

type DeleteAlertContactGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteAlertContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactGroupResponseBody) SetCode(v int32) *DeleteAlertContactGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAlertContactGroupResponseBody) SetData(v bool) *DeleteAlertContactGroupResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteAlertContactGroupResponseBody) SetMessage(v string) *DeleteAlertContactGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAlertContactGroupResponseBody) SetRequestId(v string) *DeleteAlertContactGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAlertContactGroupResponseBody) SetStatus(v string) *DeleteAlertContactGroupResponseBody {
	s.Status = &v
	return s
}

type DeleteAlertContactGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlertContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlertContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertContactGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlertContactGroupResponse) SetHeaders(v map[string]*string) *DeleteAlertContactGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlertContactGroupResponse) SetStatusCode(v int32) *DeleteAlertContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlertContactGroupResponse) SetBody(v *DeleteAlertContactGroupResponseBody) *DeleteAlertContactGroupResponse {
	s.Body = v
	return s
}

type DeleteAlertSettingRequest struct {
	AlertSettingId *int64  `json:"AlertSettingId,omitempty" xml:"AlertSettingId,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteAlertSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertSettingRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlertSettingRequest) SetAlertSettingId(v int64) *DeleteAlertSettingRequest {
	s.AlertSettingId = &v
	return s
}

func (s *DeleteAlertSettingRequest) SetOperaUid(v string) *DeleteAlertSettingRequest {
	s.OperaUid = &v
	return s
}

type DeleteAlertSettingResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteAlertSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertSettingResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlertSettingResponseBody) SetCode(v int32) *DeleteAlertSettingResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAlertSettingResponseBody) SetData(v bool) *DeleteAlertSettingResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteAlertSettingResponseBody) SetMessage(v string) *DeleteAlertSettingResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAlertSettingResponseBody) SetRequestId(v string) *DeleteAlertSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAlertSettingResponseBody) SetStatus(v string) *DeleteAlertSettingResponseBody {
	s.Status = &v
	return s
}

type DeleteAlertSettingResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlertSettingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlertSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertSettingResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlertSettingResponse) SetHeaders(v map[string]*string) *DeleteAlertSettingResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlertSettingResponse) SetStatusCode(v int32) *DeleteAlertSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlertSettingResponse) SetBody(v *DeleteAlertSettingResponseBody) *DeleteAlertSettingResponse {
	s.Body = v
	return s
}

type DeleteAlertSettingListRequest struct {
	CustomerIdsJson *string `json:"CustomerIdsJson,omitempty" xml:"CustomerIdsJson,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteAlertSettingListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertSettingListRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlertSettingListRequest) SetCustomerIdsJson(v string) *DeleteAlertSettingListRequest {
	s.CustomerIdsJson = &v
	return s
}

func (s *DeleteAlertSettingListRequest) SetOperaUid(v string) *DeleteAlertSettingListRequest {
	s.OperaUid = &v
	return s
}

type DeleteAlertSettingListResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteAlertSettingListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertSettingListResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlertSettingListResponseBody) SetCode(v int32) *DeleteAlertSettingListResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAlertSettingListResponseBody) SetData(v bool) *DeleteAlertSettingListResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteAlertSettingListResponseBody) SetMessage(v string) *DeleteAlertSettingListResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteAlertSettingListResponseBody) SetRequestId(v string) *DeleteAlertSettingListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAlertSettingListResponseBody) SetStatus(v string) *DeleteAlertSettingListResponseBody {
	s.Status = &v
	return s
}

type DeleteAlertSettingListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlertSettingListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlertSettingListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlertSettingListResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlertSettingListResponse) SetHeaders(v map[string]*string) *DeleteAlertSettingListResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlertSettingListResponse) SetStatusCode(v int32) *DeleteAlertSettingListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlertSettingListResponse) SetBody(v *DeleteAlertSettingListResponseBody) *DeleteAlertSettingListResponse {
	s.Body = v
	return s
}

type DeleteAlgorithmInfoRequest struct {
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteAlgorithmInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlgorithmInfoRequest) GoString() string {
	return s.String()
}

func (s *DeleteAlgorithmInfoRequest) SetId(v int64) *DeleteAlgorithmInfoRequest {
	s.Id = &v
	return s
}

func (s *DeleteAlgorithmInfoRequest) SetOperaUid(v string) *DeleteAlgorithmInfoRequest {
	s.OperaUid = &v
	return s
}

type DeleteAlgorithmInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteAlgorithmInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlgorithmInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAlgorithmInfoResponseBody) SetCode(v int32) *DeleteAlgorithmInfoResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteAlgorithmInfoResponseBody) SetData(v map[string]interface{}) *DeleteAlgorithmInfoResponseBody {
	s.Data = v
	return s
}

func (s *DeleteAlgorithmInfoResponseBody) SetMsg(v string) *DeleteAlgorithmInfoResponseBody {
	s.Msg = &v
	return s
}

func (s *DeleteAlgorithmInfoResponseBody) SetRequestId(v string) *DeleteAlgorithmInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAlgorithmInfoResponseBody) SetStatus(v string) *DeleteAlgorithmInfoResponseBody {
	s.Status = &v
	return s
}

type DeleteAlgorithmInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAlgorithmInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAlgorithmInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAlgorithmInfoResponse) GoString() string {
	return s.String()
}

func (s *DeleteAlgorithmInfoResponse) SetHeaders(v map[string]*string) *DeleteAlgorithmInfoResponse {
	s.Headers = v
	return s
}

func (s *DeleteAlgorithmInfoResponse) SetStatusCode(v int32) *DeleteAlgorithmInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAlgorithmInfoResponse) SetBody(v *DeleteAlgorithmInfoResponseBody) *DeleteAlgorithmInfoResponse {
	s.Body = v
	return s
}

type DeleteBusinessGroupRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteBusinessGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteBusinessGroupRequest) SetBusinessGroupId(v string) *DeleteBusinessGroupRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *DeleteBusinessGroupRequest) SetOperaUid(v string) *DeleteBusinessGroupRequest {
	s.OperaUid = &v
	return s
}

type DeleteBusinessGroupResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteBusinessGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBusinessGroupResponseBody) SetCode(v int32) *DeleteBusinessGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteBusinessGroupResponseBody) SetData(v map[string]interface{}) *DeleteBusinessGroupResponseBody {
	s.Data = v
	return s
}

func (s *DeleteBusinessGroupResponseBody) SetMsg(v string) *DeleteBusinessGroupResponseBody {
	s.Msg = &v
	return s
}

func (s *DeleteBusinessGroupResponseBody) SetRequestId(v string) *DeleteBusinessGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteBusinessGroupResponseBody) SetStatus(v string) *DeleteBusinessGroupResponseBody {
	s.Status = &v
	return s
}

type DeleteBusinessGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBusinessGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBusinessGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteBusinessGroupResponse) SetHeaders(v map[string]*string) *DeleteBusinessGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteBusinessGroupResponse) SetStatusCode(v int32) *DeleteBusinessGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBusinessGroupResponse) SetBody(v *DeleteBusinessGroupResponseBody) *DeleteBusinessGroupResponse {
	s.Body = v
	return s
}

type DeleteBusinessResourceTagRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductId       *string `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	Resources       *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
}

func (s DeleteBusinessResourceTagRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessResourceTagRequest) GoString() string {
	return s.String()
}

func (s *DeleteBusinessResourceTagRequest) SetBusinessGroupId(v string) *DeleteBusinessResourceTagRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *DeleteBusinessResourceTagRequest) SetOperaUid(v string) *DeleteBusinessResourceTagRequest {
	s.OperaUid = &v
	return s
}

func (s *DeleteBusinessResourceTagRequest) SetProductId(v string) *DeleteBusinessResourceTagRequest {
	s.ProductId = &v
	return s
}

func (s *DeleteBusinessResourceTagRequest) SetResources(v string) *DeleteBusinessResourceTagRequest {
	s.Resources = &v
	return s
}

type DeleteBusinessResourceTagResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteBusinessResourceTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessResourceTagResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBusinessResourceTagResponseBody) SetCode(v int32) *DeleteBusinessResourceTagResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteBusinessResourceTagResponseBody) SetData(v map[string]interface{}) *DeleteBusinessResourceTagResponseBody {
	s.Data = v
	return s
}

func (s *DeleteBusinessResourceTagResponseBody) SetMsg(v string) *DeleteBusinessResourceTagResponseBody {
	s.Msg = &v
	return s
}

func (s *DeleteBusinessResourceTagResponseBody) SetRequestId(v string) *DeleteBusinessResourceTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteBusinessResourceTagResponseBody) SetStatus(v string) *DeleteBusinessResourceTagResponseBody {
	s.Status = &v
	return s
}

type DeleteBusinessResourceTagResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBusinessResourceTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBusinessResourceTagResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBusinessResourceTagResponse) GoString() string {
	return s.String()
}

func (s *DeleteBusinessResourceTagResponse) SetHeaders(v map[string]*string) *DeleteBusinessResourceTagResponse {
	s.Headers = v
	return s
}

func (s *DeleteBusinessResourceTagResponse) SetStatusCode(v int32) *DeleteBusinessResourceTagResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBusinessResourceTagResponse) SetBody(v *DeleteBusinessResourceTagResponseBody) *DeleteBusinessResourceTagResponse {
	s.Body = v
	return s
}

type DeleteDataSourceConfigRequest struct {
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteDataSourceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceConfigRequest) SetId(v int64) *DeleteDataSourceConfigRequest {
	s.Id = &v
	return s
}

func (s *DeleteDataSourceConfigRequest) SetOperaUid(v string) *DeleteDataSourceConfigRequest {
	s.OperaUid = &v
	return s
}

type DeleteDataSourceConfigResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteDataSourceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceConfigResponseBody) SetCode(v int32) *DeleteDataSourceConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDataSourceConfigResponseBody) SetData(v map[string]interface{}) *DeleteDataSourceConfigResponseBody {
	s.Data = v
	return s
}

func (s *DeleteDataSourceConfigResponseBody) SetMsg(v string) *DeleteDataSourceConfigResponseBody {
	s.Msg = &v
	return s
}

func (s *DeleteDataSourceConfigResponseBody) SetRequestId(v string) *DeleteDataSourceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDataSourceConfigResponseBody) SetStatus(v string) *DeleteDataSourceConfigResponseBody {
	s.Status = &v
	return s
}

type DeleteDataSourceConfigResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDataSourceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDataSourceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDataSourceConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteDataSourceConfigResponse) SetHeaders(v map[string]*string) *DeleteDataSourceConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteDataSourceConfigResponse) SetStatusCode(v int32) *DeleteDataSourceConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDataSourceConfigResponse) SetBody(v *DeleteDataSourceConfigResponseBody) *DeleteDataSourceConfigResponse {
	s.Body = v
	return s
}

type DeleteGroupTopologyTagLogRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteGroupTopologyTagLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupTopologyTagLogRequest) GoString() string {
	return s.String()
}

func (s *DeleteGroupTopologyTagLogRequest) SetBusinessGroupId(v string) *DeleteGroupTopologyTagLogRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *DeleteGroupTopologyTagLogRequest) SetOperaUid(v string) *DeleteGroupTopologyTagLogRequest {
	s.OperaUid = &v
	return s
}

type DeleteGroupTopologyTagLogResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteGroupTopologyTagLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupTopologyTagLogResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGroupTopologyTagLogResponseBody) SetCode(v int32) *DeleteGroupTopologyTagLogResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteGroupTopologyTagLogResponseBody) SetData(v map[string]interface{}) *DeleteGroupTopologyTagLogResponseBody {
	s.Data = v
	return s
}

func (s *DeleteGroupTopologyTagLogResponseBody) SetMsg(v string) *DeleteGroupTopologyTagLogResponseBody {
	s.Msg = &v
	return s
}

func (s *DeleteGroupTopologyTagLogResponseBody) SetRequestId(v string) *DeleteGroupTopologyTagLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteGroupTopologyTagLogResponseBody) SetStatus(v string) *DeleteGroupTopologyTagLogResponseBody {
	s.Status = &v
	return s
}

type DeleteGroupTopologyTagLogResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteGroupTopologyTagLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteGroupTopologyTagLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupTopologyTagLogResponse) GoString() string {
	return s.String()
}

func (s *DeleteGroupTopologyTagLogResponse) SetHeaders(v map[string]*string) *DeleteGroupTopologyTagLogResponse {
	s.Headers = v
	return s
}

func (s *DeleteGroupTopologyTagLogResponse) SetStatusCode(v int32) *DeleteGroupTopologyTagLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGroupTopologyTagLogResponse) SetBody(v *DeleteGroupTopologyTagLogResponseBody) *DeleteGroupTopologyTagLogResponse {
	s.Body = v
	return s
}

type DeleteRealSceneInfoRequest struct {
	Id       *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteRealSceneInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRealSceneInfoRequest) GoString() string {
	return s.String()
}

func (s *DeleteRealSceneInfoRequest) SetId(v string) *DeleteRealSceneInfoRequest {
	s.Id = &v
	return s
}

func (s *DeleteRealSceneInfoRequest) SetOperaUid(v string) *DeleteRealSceneInfoRequest {
	s.OperaUid = &v
	return s
}

type DeleteRealSceneInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteRealSceneInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRealSceneInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRealSceneInfoResponseBody) SetCode(v int32) *DeleteRealSceneInfoResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteRealSceneInfoResponseBody) SetData(v map[string]interface{}) *DeleteRealSceneInfoResponseBody {
	s.Data = v
	return s
}

func (s *DeleteRealSceneInfoResponseBody) SetMsg(v string) *DeleteRealSceneInfoResponseBody {
	s.Msg = &v
	return s
}

func (s *DeleteRealSceneInfoResponseBody) SetRequestId(v string) *DeleteRealSceneInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteRealSceneInfoResponseBody) SetStatus(v string) *DeleteRealSceneInfoResponseBody {
	s.Status = &v
	return s
}

type DeleteRealSceneInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRealSceneInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRealSceneInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRealSceneInfoResponse) GoString() string {
	return s.String()
}

func (s *DeleteRealSceneInfoResponse) SetHeaders(v map[string]*string) *DeleteRealSceneInfoResponse {
	s.Headers = v
	return s
}

func (s *DeleteRealSceneInfoResponse) SetStatusCode(v int32) *DeleteRealSceneInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRealSceneInfoResponse) SetBody(v *DeleteRealSceneInfoResponseBody) *DeleteRealSceneInfoResponse {
	s.Body = v
	return s
}

type DeleteReportEmailConfigRequest struct {
	MailConfigId *int64  `json:"MailConfigId,omitempty" xml:"MailConfigId,omitempty"`
	OperaUid     *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteReportEmailConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteReportEmailConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteReportEmailConfigRequest) SetMailConfigId(v int64) *DeleteReportEmailConfigRequest {
	s.MailConfigId = &v
	return s
}

func (s *DeleteReportEmailConfigRequest) SetOperaUid(v string) *DeleteReportEmailConfigRequest {
	s.OperaUid = &v
	return s
}

type DeleteReportEmailConfigResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteReportEmailConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteReportEmailConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteReportEmailConfigResponseBody) SetCode(v int32) *DeleteReportEmailConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteReportEmailConfigResponseBody) SetData(v bool) *DeleteReportEmailConfigResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteReportEmailConfigResponseBody) SetMessage(v string) *DeleteReportEmailConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteReportEmailConfigResponseBody) SetRequestId(v string) *DeleteReportEmailConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteReportEmailConfigResponseBody) SetStatus(v string) *DeleteReportEmailConfigResponseBody {
	s.Status = &v
	return s
}

type DeleteReportEmailConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteReportEmailConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteReportEmailConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteReportEmailConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteReportEmailConfigResponse) SetHeaders(v map[string]*string) *DeleteReportEmailConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteReportEmailConfigResponse) SetStatusCode(v int32) *DeleteReportEmailConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteReportEmailConfigResponse) SetBody(v *DeleteReportEmailConfigResponseBody) *DeleteReportEmailConfigResponse {
	s.Body = v
	return s
}

type DeleteResourceWhitelistRequest struct {
	InspectionWhitelistId *int64  `json:"InspectionWhitelistId,omitempty" xml:"InspectionWhitelistId,omitempty"`
	OperaUid              *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteResourceWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceWhitelistRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourceWhitelistRequest) SetInspectionWhitelistId(v int64) *DeleteResourceWhitelistRequest {
	s.InspectionWhitelistId = &v
	return s
}

func (s *DeleteResourceWhitelistRequest) SetOperaUid(v string) *DeleteResourceWhitelistRequest {
	s.OperaUid = &v
	return s
}

type DeleteResourceWhitelistResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteResourceWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteResourceWhitelistResponseBody) SetCode(v int32) *DeleteResourceWhitelistResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteResourceWhitelistResponseBody) SetData(v bool) *DeleteResourceWhitelistResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteResourceWhitelistResponseBody) SetMessage(v string) *DeleteResourceWhitelistResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteResourceWhitelistResponseBody) SetRequestId(v string) *DeleteResourceWhitelistResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteResourceWhitelistResponseBody) SetStatus(v string) *DeleteResourceWhitelistResponseBody {
	s.Status = &v
	return s
}

type DeleteResourceWhitelistResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteResourceWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteResourceWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceWhitelistResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceWhitelistResponse) SetHeaders(v map[string]*string) *DeleteResourceWhitelistResponse {
	s.Headers = v
	return s
}

func (s *DeleteResourceWhitelistResponse) SetStatusCode(v int32) *DeleteResourceWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteResourceWhitelistResponse) SetBody(v *DeleteResourceWhitelistResponseBody) *DeleteResourceWhitelistResponse {
	s.Body = v
	return s
}

type DeleteScenarioRequest struct {
	Id       *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteScenarioRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenarioRequest) GoString() string {
	return s.String()
}

func (s *DeleteScenarioRequest) SetId(v string) *DeleteScenarioRequest {
	s.Id = &v
	return s
}

func (s *DeleteScenarioRequest) SetOperaUid(v string) *DeleteScenarioRequest {
	s.OperaUid = &v
	return s
}

type DeleteScenarioResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteScenarioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenarioResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteScenarioResponseBody) SetCode(v int32) *DeleteScenarioResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteScenarioResponseBody) SetData(v map[string]interface{}) *DeleteScenarioResponseBody {
	s.Data = v
	return s
}

func (s *DeleteScenarioResponseBody) SetMsg(v string) *DeleteScenarioResponseBody {
	s.Msg = &v
	return s
}

func (s *DeleteScenarioResponseBody) SetPageTotal(v int64) *DeleteScenarioResponseBody {
	s.PageTotal = &v
	return s
}

func (s *DeleteScenarioResponseBody) SetRequestId(v string) *DeleteScenarioResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteScenarioResponseBody) SetStatus(v string) *DeleteScenarioResponseBody {
	s.Status = &v
	return s
}

type DeleteScenarioResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteScenarioResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteScenarioResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenarioResponse) GoString() string {
	return s.String()
}

func (s *DeleteScenarioResponse) SetHeaders(v map[string]*string) *DeleteScenarioResponse {
	s.Headers = v
	return s
}

func (s *DeleteScenarioResponse) SetStatusCode(v int32) *DeleteScenarioResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteScenarioResponse) SetBody(v *DeleteScenarioResponseBody) *DeleteScenarioResponse {
	s.Body = v
	return s
}

type DeleteSceneRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SceneId  *int64  `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s DeleteSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneRequest) GoString() string {
	return s.String()
}

func (s *DeleteSceneRequest) SetOperaUid(v string) *DeleteSceneRequest {
	s.OperaUid = &v
	return s
}

func (s *DeleteSceneRequest) SetSceneId(v int64) *DeleteSceneRequest {
	s.SceneId = &v
	return s
}

type DeleteSceneResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSceneResponseBody) SetCode(v int32) *DeleteSceneResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSceneResponseBody) SetData(v string) *DeleteSceneResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteSceneResponseBody) SetMessage(v string) *DeleteSceneResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSceneResponseBody) SetRequestId(v string) *DeleteSceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSceneResponseBody) SetStatus(v string) *DeleteSceneResponseBody {
	s.Status = &v
	return s
}

type DeleteSceneResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSceneResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneResponse) GoString() string {
	return s.String()
}

func (s *DeleteSceneResponse) SetHeaders(v map[string]*string) *DeleteSceneResponse {
	s.Headers = v
	return s
}

func (s *DeleteSceneResponse) SetStatusCode(v int32) *DeleteSceneResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSceneResponse) SetBody(v *DeleteSceneResponseBody) *DeleteSceneResponse {
	s.Body = v
	return s
}

type DeleteSceneListRequest struct {
	Id       *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DeleteSceneListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneListRequest) GoString() string {
	return s.String()
}

func (s *DeleteSceneListRequest) SetId(v int32) *DeleteSceneListRequest {
	s.Id = &v
	return s
}

func (s *DeleteSceneListRequest) SetOperaUid(v string) *DeleteSceneListRequest {
	s.OperaUid = &v
	return s
}

type DeleteSceneListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteSceneListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneListResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSceneListResponseBody) SetCode(v int32) *DeleteSceneListResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSceneListResponseBody) SetData(v map[string]interface{}) *DeleteSceneListResponseBody {
	s.Data = v
	return s
}

func (s *DeleteSceneListResponseBody) SetMsg(v string) *DeleteSceneListResponseBody {
	s.Msg = &v
	return s
}

func (s *DeleteSceneListResponseBody) SetRequestId(v string) *DeleteSceneListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSceneListResponseBody) SetStatus(v string) *DeleteSceneListResponseBody {
	s.Status = &v
	return s
}

type DeleteSceneListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSceneListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSceneListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneListResponse) GoString() string {
	return s.String()
}

func (s *DeleteSceneListResponse) SetHeaders(v map[string]*string) *DeleteSceneListResponse {
	s.Headers = v
	return s
}

func (s *DeleteSceneListResponse) SetStatusCode(v int32) *DeleteSceneListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSceneListResponse) SetBody(v *DeleteSceneListResponseBody) *DeleteSceneListResponse {
	s.Body = v
	return s
}

type DeleteSceneModelRequest struct {
	ModelId    *int64  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	OperaUid   *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SureDelete *bool   `json:"SureDelete,omitempty" xml:"SureDelete,omitempty"`
}

func (s DeleteSceneModelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneModelRequest) GoString() string {
	return s.String()
}

func (s *DeleteSceneModelRequest) SetModelId(v int64) *DeleteSceneModelRequest {
	s.ModelId = &v
	return s
}

func (s *DeleteSceneModelRequest) SetOperaUid(v string) *DeleteSceneModelRequest {
	s.OperaUid = &v
	return s
}

func (s *DeleteSceneModelRequest) SetSureDelete(v bool) *DeleteSceneModelRequest {
	s.SureDelete = &v
	return s
}

type DeleteSceneModelResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteSceneModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneModelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSceneModelResponseBody) SetCode(v int32) *DeleteSceneModelResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSceneModelResponseBody) SetData(v string) *DeleteSceneModelResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteSceneModelResponseBody) SetMessage(v string) *DeleteSceneModelResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSceneModelResponseBody) SetRequestId(v string) *DeleteSceneModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSceneModelResponseBody) SetStatus(v string) *DeleteSceneModelResponseBody {
	s.Status = &v
	return s
}

type DeleteSceneModelResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSceneModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSceneModelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSceneModelResponse) GoString() string {
	return s.String()
}

func (s *DeleteSceneModelResponse) SetHeaders(v map[string]*string) *DeleteSceneModelResponse {
	s.Headers = v
	return s
}

func (s *DeleteSceneModelResponse) SetStatusCode(v int32) *DeleteSceneModelResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSceneModelResponse) SetBody(v *DeleteSceneModelResponseBody) *DeleteSceneModelResponse {
	s.Body = v
	return s
}

type DeleteTagInfoRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	TagId    *int64  `json:"TagId,omitempty" xml:"TagId,omitempty"`
}

func (s DeleteTagInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagInfoRequest) GoString() string {
	return s.String()
}

func (s *DeleteTagInfoRequest) SetOperaUid(v string) *DeleteTagInfoRequest {
	s.OperaUid = &v
	return s
}

func (s *DeleteTagInfoRequest) SetTagId(v int64) *DeleteTagInfoRequest {
	s.TagId = &v
	return s
}

type DeleteTagInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DeleteTagInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTagInfoResponseBody) SetCode(v int32) *DeleteTagInfoResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteTagInfoResponseBody) SetData(v map[string]interface{}) *DeleteTagInfoResponseBody {
	s.Data = v
	return s
}

func (s *DeleteTagInfoResponseBody) SetMsg(v string) *DeleteTagInfoResponseBody {
	s.Msg = &v
	return s
}

func (s *DeleteTagInfoResponseBody) SetRequestId(v string) *DeleteTagInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTagInfoResponseBody) SetStatus(v string) *DeleteTagInfoResponseBody {
	s.Status = &v
	return s
}

type DeleteTagInfoResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTagInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTagInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagInfoResponse) GoString() string {
	return s.String()
}

func (s *DeleteTagInfoResponse) SetHeaders(v map[string]*string) *DeleteTagInfoResponse {
	s.Headers = v
	return s
}

func (s *DeleteTagInfoResponse) SetStatusCode(v int32) *DeleteTagInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTagInfoResponse) SetBody(v *DeleteTagInfoResponseBody) *DeleteTagInfoResponse {
	s.Body = v
	return s
}

type DescribeAccountAlertEventRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeAccountAlertEventRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAlertEventRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountAlertEventRequest) SetEventId(v string) *DescribeAccountAlertEventRequest {
	s.EventId = &v
	return s
}

func (s *DescribeAccountAlertEventRequest) SetOperaUid(v string) *DescribeAccountAlertEventRequest {
	s.OperaUid = &v
	return s
}

type DescribeAccountAlertEventResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAccountAlertEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAlertEventResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccountAlertEventResponseBody) SetCode(v int32) *DescribeAccountAlertEventResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAccountAlertEventResponseBody) SetData(v map[string]interface{}) *DescribeAccountAlertEventResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAccountAlertEventResponseBody) SetMessage(v string) *DescribeAccountAlertEventResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAccountAlertEventResponseBody) SetRequestId(v string) *DescribeAccountAlertEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAccountAlertEventResponseBody) SetStatus(v string) *DescribeAccountAlertEventResponseBody {
	s.Status = &v
	return s
}

type DescribeAccountAlertEventResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAccountAlertEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAccountAlertEventResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountAlertEventResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountAlertEventResponse) SetHeaders(v map[string]*string) *DescribeAccountAlertEventResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccountAlertEventResponse) SetStatusCode(v int32) *DescribeAccountAlertEventResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAccountAlertEventResponse) SetBody(v *DescribeAccountAlertEventResponseBody) *DescribeAccountAlertEventResponse {
	s.Body = v
	return s
}

type DescribeAdvisorInspectionProductsRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeAdvisorInspectionProductsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvisorInspectionProductsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAdvisorInspectionProductsRequest) SetOperaUid(v string) *DescribeAdvisorInspectionProductsRequest {
	s.OperaUid = &v
	return s
}

type DescribeAdvisorInspectionProductsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAdvisorInspectionProductsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvisorInspectionProductsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAdvisorInspectionProductsResponseBody) SetCode(v int32) *DescribeAdvisorInspectionProductsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAdvisorInspectionProductsResponseBody) SetData(v map[string]interface{}) *DescribeAdvisorInspectionProductsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAdvisorInspectionProductsResponseBody) SetMessage(v string) *DescribeAdvisorInspectionProductsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAdvisorInspectionProductsResponseBody) SetRequestId(v string) *DescribeAdvisorInspectionProductsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAdvisorInspectionProductsResponseBody) SetStatus(v string) *DescribeAdvisorInspectionProductsResponseBody {
	s.Status = &v
	return s
}

type DescribeAdvisorInspectionProductsResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAdvisorInspectionProductsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAdvisorInspectionProductsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAdvisorInspectionProductsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAdvisorInspectionProductsResponse) SetHeaders(v map[string]*string) *DescribeAdvisorInspectionProductsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAdvisorInspectionProductsResponse) SetStatusCode(v int32) *DescribeAdvisorInspectionProductsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAdvisorInspectionProductsResponse) SetBody(v *DescribeAdvisorInspectionProductsResponseBody) *DescribeAdvisorInspectionProductsResponse {
	s.Body = v
	return s
}

type DescribeAlertBusinessGroupWithAlertSettingIdRequest struct {
	AlertSettingId *int64 `json:"AlertSettingId,omitempty" xml:"AlertSettingId,omitempty"`
}

func (s DescribeAlertBusinessGroupWithAlertSettingIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertBusinessGroupWithAlertSettingIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdRequest) SetAlertSettingId(v int64) *DescribeAlertBusinessGroupWithAlertSettingIdRequest {
	s.AlertSettingId = &v
	return s
}

type DescribeAlertBusinessGroupWithAlertSettingIdResponseBody struct {
	Code      *int32                                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAlertBusinessGroupWithAlertSettingIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertBusinessGroupWithAlertSettingIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody) SetCode(v int32) *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody) SetData(v []*DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData) *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody) SetMessage(v string) *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody) SetRequestId(v string) *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody) SetStatus(v string) *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody {
	s.Status = &v
	return s
}

type DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData struct {
	BusinessGroupId   *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	BusinessGroupName *string `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
}

func (s DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData) SetBusinessGroupId(v string) *DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData {
	s.BusinessGroupId = &v
	return s
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData) SetBusinessGroupName(v string) *DescribeAlertBusinessGroupWithAlertSettingIdResponseBodyData {
	s.BusinessGroupName = &v
	return s
}

type DescribeAlertBusinessGroupWithAlertSettingIdResponse struct {
	Headers    map[string]*string                                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertBusinessGroupWithAlertSettingIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertBusinessGroupWithAlertSettingIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdResponse) SetHeaders(v map[string]*string) *DescribeAlertBusinessGroupWithAlertSettingIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdResponse) SetStatusCode(v int32) *DescribeAlertBusinessGroupWithAlertSettingIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertBusinessGroupWithAlertSettingIdResponse) SetBody(v *DescribeAlertBusinessGroupWithAlertSettingIdResponseBody) *DescribeAlertBusinessGroupWithAlertSettingIdResponse {
	s.Body = v
	return s
}

type DescribeAlertContactRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchBy    *string `json:"SearchBy,omitempty" xml:"SearchBy,omitempty"`
	SearchLike  *string `json:"SearchLike,omitempty" xml:"SearchLike,omitempty"`
}

func (s DescribeAlertContactRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactRequest) SetCurrentPage(v int32) *DescribeAlertContactRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAlertContactRequest) SetOperaUid(v string) *DescribeAlertContactRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeAlertContactRequest) SetPageSize(v int32) *DescribeAlertContactRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAlertContactRequest) SetSearchBy(v string) *DescribeAlertContactRequest {
	s.SearchBy = &v
	return s
}

func (s *DescribeAlertContactRequest) SetSearchLike(v string) *DescribeAlertContactRequest {
	s.SearchLike = &v
	return s
}

type DescribeAlertContactResponseBody struct {
	Code      *int32                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DescribeAlertContactResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	Total     *int64                                  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeAlertContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactResponseBody) SetCode(v int32) *DescribeAlertContactResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertContactResponseBody) SetData(v []*DescribeAlertContactResponseBodyData) *DescribeAlertContactResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertContactResponseBody) SetMessage(v string) *DescribeAlertContactResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertContactResponseBody) SetRequestId(v string) *DescribeAlertContactResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertContactResponseBody) SetStatus(v string) *DescribeAlertContactResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeAlertContactResponseBody) SetTotal(v int64) *DescribeAlertContactResponseBody {
	s.Total = &v
	return s
}

type DescribeAlertContactResponseBodyData struct {
	Email       *string `json:"email,omitempty" xml:"email,omitempty"`
	GmtCreate   *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	GroupNames  *string `json:"groupNames,omitempty" xml:"groupNames,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	Phone       *string `json:"phone,omitempty" xml:"phone,omitempty"`
	Uid         *int64  `json:"uid,omitempty" xml:"uid,omitempty"`
	Webhook     *string `json:"webhook,omitempty" xml:"webhook,omitempty"`
}

func (s DescribeAlertContactResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactResponseBodyData) SetEmail(v string) *DescribeAlertContactResponseBodyData {
	s.Email = &v
	return s
}

func (s *DescribeAlertContactResponseBodyData) SetGmtCreate(v int64) *DescribeAlertContactResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *DescribeAlertContactResponseBodyData) SetGmtModified(v int64) *DescribeAlertContactResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *DescribeAlertContactResponseBodyData) SetGroupNames(v string) *DescribeAlertContactResponseBodyData {
	s.GroupNames = &v
	return s
}

func (s *DescribeAlertContactResponseBodyData) SetId(v int64) *DescribeAlertContactResponseBodyData {
	s.Id = &v
	return s
}

func (s *DescribeAlertContactResponseBodyData) SetName(v string) *DescribeAlertContactResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeAlertContactResponseBodyData) SetPhone(v string) *DescribeAlertContactResponseBodyData {
	s.Phone = &v
	return s
}

func (s *DescribeAlertContactResponseBodyData) SetUid(v int64) *DescribeAlertContactResponseBodyData {
	s.Uid = &v
	return s
}

func (s *DescribeAlertContactResponseBodyData) SetWebhook(v string) *DescribeAlertContactResponseBodyData {
	s.Webhook = &v
	return s
}

type DescribeAlertContactResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertContactResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactResponse) SetHeaders(v map[string]*string) *DescribeAlertContactResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertContactResponse) SetStatusCode(v int32) *DescribeAlertContactResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertContactResponse) SetBody(v *DescribeAlertContactResponseBody) *DescribeAlertContactResponse {
	s.Body = v
	return s
}

type DescribeAlertContactGroupRequest struct {
	CurrentPage *int64  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize    *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchLike  *string `json:"SearchLike,omitempty" xml:"SearchLike,omitempty"`
}

func (s DescribeAlertContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactGroupRequest) SetCurrentPage(v int64) *DescribeAlertContactGroupRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAlertContactGroupRequest) SetOperaUid(v string) *DescribeAlertContactGroupRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeAlertContactGroupRequest) SetPageSize(v int64) *DescribeAlertContactGroupRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAlertContactGroupRequest) SetSearchLike(v string) *DescribeAlertContactGroupRequest {
	s.SearchLike = &v
	return s
}

type DescribeAlertContactGroupResponseBody struct {
	Code      *int32                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DescribeAlertContactGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	Total     *int32                                       `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeAlertContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactGroupResponseBody) SetCode(v int32) *DescribeAlertContactGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBody) SetData(v []*DescribeAlertContactGroupResponseBodyData) *DescribeAlertContactGroupResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertContactGroupResponseBody) SetMessage(v string) *DescribeAlertContactGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBody) SetRequestId(v string) *DescribeAlertContactGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBody) SetStatus(v string) *DescribeAlertContactGroupResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBody) SetTotal(v int32) *DescribeAlertContactGroupResponseBody {
	s.Total = &v
	return s
}

type DescribeAlertContactGroupResponseBodyData struct {
	CreateTime  *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	GmtCreate   *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	GroupName   *string `json:"groupName,omitempty" xml:"groupName,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Uid         *int64  `json:"uid,omitempty" xml:"uid,omitempty"`
	UpdateTime  *string `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s DescribeAlertContactGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactGroupResponseBodyData) SetCreateTime(v string) *DescribeAlertContactGroupResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBodyData) SetDescription(v string) *DescribeAlertContactGroupResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBodyData) SetGmtCreate(v int64) *DescribeAlertContactGroupResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBodyData) SetGmtModified(v int64) *DescribeAlertContactGroupResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBodyData) SetGroupName(v string) *DescribeAlertContactGroupResponseBodyData {
	s.GroupName = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBodyData) SetId(v int64) *DescribeAlertContactGroupResponseBodyData {
	s.Id = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBodyData) SetUid(v int64) *DescribeAlertContactGroupResponseBodyData {
	s.Uid = &v
	return s
}

func (s *DescribeAlertContactGroupResponseBodyData) SetUpdateTime(v string) *DescribeAlertContactGroupResponseBodyData {
	s.UpdateTime = &v
	return s
}

type DescribeAlertContactGroupResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactGroupResponse) SetHeaders(v map[string]*string) *DescribeAlertContactGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertContactGroupResponse) SetStatusCode(v int32) *DescribeAlertContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertContactGroupResponse) SetBody(v *DescribeAlertContactGroupResponseBody) *DescribeAlertContactGroupResponse {
	s.Body = v
	return s
}

type DescribeAlertContactWithAlertSettingIdRequest struct {
	AlertSettingId *int64 `json:"AlertSettingId,omitempty" xml:"AlertSettingId,omitempty"`
	ContactType    *int64 `json:"ContactType,omitempty" xml:"ContactType,omitempty"`
}

func (s DescribeAlertContactWithAlertSettingIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactWithAlertSettingIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactWithAlertSettingIdRequest) SetAlertSettingId(v int64) *DescribeAlertContactWithAlertSettingIdRequest {
	s.AlertSettingId = &v
	return s
}

func (s *DescribeAlertContactWithAlertSettingIdRequest) SetContactType(v int64) *DescribeAlertContactWithAlertSettingIdRequest {
	s.ContactType = &v
	return s
}

type DescribeAlertContactWithAlertSettingIdResponseBody struct {
	Code      *int32                                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DescribeAlertContactWithAlertSettingIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAlertContactWithAlertSettingIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactWithAlertSettingIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactWithAlertSettingIdResponseBody) SetCode(v int32) *DescribeAlertContactWithAlertSettingIdResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertContactWithAlertSettingIdResponseBody) SetData(v []*DescribeAlertContactWithAlertSettingIdResponseBodyData) *DescribeAlertContactWithAlertSettingIdResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertContactWithAlertSettingIdResponseBody) SetMessage(v string) *DescribeAlertContactWithAlertSettingIdResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertContactWithAlertSettingIdResponseBody) SetRequestId(v string) *DescribeAlertContactWithAlertSettingIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertContactWithAlertSettingIdResponseBody) SetStatus(v string) *DescribeAlertContactWithAlertSettingIdResponseBody {
	s.Status = &v
	return s
}

type DescribeAlertContactWithAlertSettingIdResponseBodyData struct {
	ContactId   *int64  `json:"contactId,omitempty" xml:"contactId,omitempty"`
	ContactName *string `json:"contactName,omitempty" xml:"contactName,omitempty"`
	ContactType *int64  `json:"contactType,omitempty" xml:"contactType,omitempty"`
}

func (s DescribeAlertContactWithAlertSettingIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactWithAlertSettingIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactWithAlertSettingIdResponseBodyData) SetContactId(v int64) *DescribeAlertContactWithAlertSettingIdResponseBodyData {
	s.ContactId = &v
	return s
}

func (s *DescribeAlertContactWithAlertSettingIdResponseBodyData) SetContactName(v string) *DescribeAlertContactWithAlertSettingIdResponseBodyData {
	s.ContactName = &v
	return s
}

func (s *DescribeAlertContactWithAlertSettingIdResponseBodyData) SetContactType(v int64) *DescribeAlertContactWithAlertSettingIdResponseBodyData {
	s.ContactType = &v
	return s
}

type DescribeAlertContactWithAlertSettingIdResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertContactWithAlertSettingIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertContactWithAlertSettingIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactWithAlertSettingIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactWithAlertSettingIdResponse) SetHeaders(v map[string]*string) *DescribeAlertContactWithAlertSettingIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertContactWithAlertSettingIdResponse) SetStatusCode(v int32) *DescribeAlertContactWithAlertSettingIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertContactWithAlertSettingIdResponse) SetBody(v *DescribeAlertContactWithAlertSettingIdResponseBody) *DescribeAlertContactWithAlertSettingIdResponse {
	s.Body = v
	return s
}

type DescribeAlertContactWithGroupIdRequest struct {
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s DescribeAlertContactWithGroupIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactWithGroupIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactWithGroupIdRequest) SetGroupId(v int64) *DescribeAlertContactWithGroupIdRequest {
	s.GroupId = &v
	return s
}

type DescribeAlertContactWithGroupIdResponseBody struct {
	Code      *int32                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DescribeAlertContactWithGroupIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                            `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAlertContactWithGroupIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactWithGroupIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactWithGroupIdResponseBody) SetCode(v int32) *DescribeAlertContactWithGroupIdResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBody) SetData(v []*DescribeAlertContactWithGroupIdResponseBodyData) *DescribeAlertContactWithGroupIdResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBody) SetMessage(v string) *DescribeAlertContactWithGroupIdResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBody) SetRequestId(v string) *DescribeAlertContactWithGroupIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBody) SetStatus(v string) *DescribeAlertContactWithGroupIdResponseBody {
	s.Status = &v
	return s
}

type DescribeAlertContactWithGroupIdResponseBodyData struct {
	Email       *string `json:"email,omitempty" xml:"email,omitempty"`
	GmtCreate   *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	Phone       *string `json:"phone,omitempty" xml:"phone,omitempty"`
	Uid         *int64  `json:"uid,omitempty" xml:"uid,omitempty"`
	Webhook     *string `json:"webhook,omitempty" xml:"webhook,omitempty"`
}

func (s DescribeAlertContactWithGroupIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactWithGroupIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactWithGroupIdResponseBodyData) SetEmail(v string) *DescribeAlertContactWithGroupIdResponseBodyData {
	s.Email = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBodyData) SetGmtCreate(v int64) *DescribeAlertContactWithGroupIdResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBodyData) SetGmtModified(v int64) *DescribeAlertContactWithGroupIdResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBodyData) SetId(v int64) *DescribeAlertContactWithGroupIdResponseBodyData {
	s.Id = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBodyData) SetName(v string) *DescribeAlertContactWithGroupIdResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBodyData) SetPhone(v string) *DescribeAlertContactWithGroupIdResponseBodyData {
	s.Phone = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBodyData) SetUid(v int64) *DescribeAlertContactWithGroupIdResponseBodyData {
	s.Uid = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponseBodyData) SetWebhook(v string) *DescribeAlertContactWithGroupIdResponseBodyData {
	s.Webhook = &v
	return s
}

type DescribeAlertContactWithGroupIdResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertContactWithGroupIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertContactWithGroupIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertContactWithGroupIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertContactWithGroupIdResponse) SetHeaders(v map[string]*string) *DescribeAlertContactWithGroupIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponse) SetStatusCode(v int32) *DescribeAlertContactWithGroupIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertContactWithGroupIdResponse) SetBody(v *DescribeAlertContactWithGroupIdResponseBody) *DescribeAlertContactWithGroupIdResponse {
	s.Body = v
	return s
}

type DescribeAlertDetailDataRequest struct {
	AlertId  *int64  `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeAlertDetailDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertDetailDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertDetailDataRequest) SetAlertId(v int64) *DescribeAlertDetailDataRequest {
	s.AlertId = &v
	return s
}

func (s *DescribeAlertDetailDataRequest) SetOperaUid(v string) *DescribeAlertDetailDataRequest {
	s.OperaUid = &v
	return s
}

type DescribeAlertDetailDataResponseBody struct {
	Code      *int32                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeAlertDetailDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAlertDetailDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertDetailDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertDetailDataResponseBody) SetCode(v int32) *DescribeAlertDetailDataResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBody) SetData(v *DescribeAlertDetailDataResponseBodyData) *DescribeAlertDetailDataResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertDetailDataResponseBody) SetMessage(v string) *DescribeAlertDetailDataResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBody) SetRequestId(v string) *DescribeAlertDetailDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBody) SetStatus(v string) *DescribeAlertDetailDataResponseBody {
	s.Status = &v
	return s
}

type DescribeAlertDetailDataResponseBodyData struct {
	AlertName          *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	Algorithm          *string `json:"Algorithm,omitempty" xml:"Algorithm,omitempty"`
	BeginTime          *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	Category           *string `json:"Category,omitempty" xml:"Category,omitempty"`
	CountConvergence   *int32  `json:"CountConvergence,omitempty" xml:"CountConvergence,omitempty"`
	EndTime            *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName       *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceRegionName *string `json:"InstanceRegionName,omitempty" xml:"InstanceRegionName,omitempty"`
	MetricExtend       *string `json:"MetricExtend,omitempty" xml:"MetricExtend,omitempty"`
	Mttr               *string `json:"Mttr,omitempty" xml:"Mttr,omitempty"`
	ServiceType        *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	MetricName         *string `json:"metricName,omitempty" xml:"metricName,omitempty"`
	MetricUnit         *string `json:"metricUnit,omitempty" xml:"metricUnit,omitempty"`
	ProductCodeKey     *string `json:"productCodeKey,omitempty" xml:"productCodeKey,omitempty"`
}

func (s DescribeAlertDetailDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertDetailDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAlertDetailDataResponseBodyData) SetAlertName(v string) *DescribeAlertDetailDataResponseBodyData {
	s.AlertName = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetAlgorithm(v string) *DescribeAlertDetailDataResponseBodyData {
	s.Algorithm = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetBeginTime(v string) *DescribeAlertDetailDataResponseBodyData {
	s.BeginTime = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetCategory(v string) *DescribeAlertDetailDataResponseBodyData {
	s.Category = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetCountConvergence(v int32) *DescribeAlertDetailDataResponseBodyData {
	s.CountConvergence = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetEndTime(v string) *DescribeAlertDetailDataResponseBodyData {
	s.EndTime = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetInstanceId(v string) *DescribeAlertDetailDataResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetInstanceName(v string) *DescribeAlertDetailDataResponseBodyData {
	s.InstanceName = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetInstanceRegionName(v string) *DescribeAlertDetailDataResponseBodyData {
	s.InstanceRegionName = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetMetricExtend(v string) *DescribeAlertDetailDataResponseBodyData {
	s.MetricExtend = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetMttr(v string) *DescribeAlertDetailDataResponseBodyData {
	s.Mttr = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetServiceType(v string) *DescribeAlertDetailDataResponseBodyData {
	s.ServiceType = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetMetricName(v string) *DescribeAlertDetailDataResponseBodyData {
	s.MetricName = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetMetricUnit(v string) *DescribeAlertDetailDataResponseBodyData {
	s.MetricUnit = &v
	return s
}

func (s *DescribeAlertDetailDataResponseBodyData) SetProductCodeKey(v string) *DescribeAlertDetailDataResponseBodyData {
	s.ProductCodeKey = &v
	return s
}

type DescribeAlertDetailDataResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertDetailDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertDetailDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertDetailDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertDetailDataResponse) SetHeaders(v map[string]*string) *DescribeAlertDetailDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertDetailDataResponse) SetStatusCode(v int32) *DescribeAlertDetailDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertDetailDataResponse) SetBody(v *DescribeAlertDetailDataResponseBody) *DescribeAlertDetailDataResponse {
	s.Body = v
	return s
}

type DescribeAlertDetailTrendDataRequest struct {
	AlertId   *int64  `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	BeginTime *int64  `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime   *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeAlertDetailTrendDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertDetailTrendDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertDetailTrendDataRequest) SetAlertId(v int64) *DescribeAlertDetailTrendDataRequest {
	s.AlertId = &v
	return s
}

func (s *DescribeAlertDetailTrendDataRequest) SetBeginTime(v int64) *DescribeAlertDetailTrendDataRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeAlertDetailTrendDataRequest) SetEndTime(v int64) *DescribeAlertDetailTrendDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAlertDetailTrendDataRequest) SetOperaUid(v string) *DescribeAlertDetailTrendDataRequest {
	s.OperaUid = &v
	return s
}

type DescribeAlertDetailTrendDataResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAlertDetailTrendDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertDetailTrendDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertDetailTrendDataResponseBody) SetCode(v int32) *DescribeAlertDetailTrendDataResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertDetailTrendDataResponseBody) SetData(v map[string]interface{}) *DescribeAlertDetailTrendDataResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertDetailTrendDataResponseBody) SetMessage(v string) *DescribeAlertDetailTrendDataResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertDetailTrendDataResponseBody) SetRequestId(v string) *DescribeAlertDetailTrendDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertDetailTrendDataResponseBody) SetStatus(v string) *DescribeAlertDetailTrendDataResponseBody {
	s.Status = &v
	return s
}

type DescribeAlertDetailTrendDataResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertDetailTrendDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertDetailTrendDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertDetailTrendDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertDetailTrendDataResponse) SetHeaders(v map[string]*string) *DescribeAlertDetailTrendDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertDetailTrendDataResponse) SetStatusCode(v int32) *DescribeAlertDetailTrendDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertDetailTrendDataResponse) SetBody(v *DescribeAlertDetailTrendDataResponseBody) *DescribeAlertDetailTrendDataResponse {
	s.Body = v
	return s
}

type DescribeAlertEventRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeAlertEventRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertEventRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertEventRequest) SetEventId(v string) *DescribeAlertEventRequest {
	s.EventId = &v
	return s
}

func (s *DescribeAlertEventRequest) SetOperaUid(v string) *DescribeAlertEventRequest {
	s.OperaUid = &v
	return s
}

type DescribeAlertEventResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAlertEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertEventResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertEventResponseBody) SetCode(v int32) *DescribeAlertEventResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertEventResponseBody) SetData(v map[string]interface{}) *DescribeAlertEventResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertEventResponseBody) SetMessage(v string) *DescribeAlertEventResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertEventResponseBody) SetRequestId(v string) *DescribeAlertEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertEventResponseBody) SetStatus(v string) *DescribeAlertEventResponseBody {
	s.Status = &v
	return s
}

type DescribeAlertEventResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertEventResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertEventResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertEventResponse) SetHeaders(v map[string]*string) *DescribeAlertEventResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertEventResponse) SetStatusCode(v int32) *DescribeAlertEventResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertEventResponse) SetBody(v *DescribeAlertEventResponseBody) *DescribeAlertEventResponse {
	s.Body = v
	return s
}

type DescribeAlertFinalDataListRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	EndTime     *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MetricName  *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	StartTime   *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Uid         *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s DescribeAlertFinalDataListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertFinalDataListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertFinalDataListRequest) SetCurrentPage(v int32) *DescribeAlertFinalDataListRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAlertFinalDataListRequest) SetEndTime(v int64) *DescribeAlertFinalDataListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAlertFinalDataListRequest) SetInstanceId(v string) *DescribeAlertFinalDataListRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeAlertFinalDataListRequest) SetMetricName(v string) *DescribeAlertFinalDataListRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeAlertFinalDataListRequest) SetPageSize(v int32) *DescribeAlertFinalDataListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAlertFinalDataListRequest) SetProductCode(v string) *DescribeAlertFinalDataListRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeAlertFinalDataListRequest) SetStartTime(v int64) *DescribeAlertFinalDataListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeAlertFinalDataListRequest) SetUid(v string) *DescribeAlertFinalDataListRequest {
	s.Uid = &v
	return s
}

type DescribeAlertFinalDataListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAlertFinalDataListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertFinalDataListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertFinalDataListResponseBody) SetCode(v int32) *DescribeAlertFinalDataListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertFinalDataListResponseBody) SetData(v map[string]interface{}) *DescribeAlertFinalDataListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertFinalDataListResponseBody) SetMsg(v string) *DescribeAlertFinalDataListResponseBody {
	s.Msg = &v
	return s
}

func (s *DescribeAlertFinalDataListResponseBody) SetPageTotal(v int64) *DescribeAlertFinalDataListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *DescribeAlertFinalDataListResponseBody) SetRequestId(v string) *DescribeAlertFinalDataListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertFinalDataListResponseBody) SetStatus(v string) *DescribeAlertFinalDataListResponseBody {
	s.Status = &v
	return s
}

type DescribeAlertFinalDataListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertFinalDataListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertFinalDataListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertFinalDataListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertFinalDataListResponse) SetHeaders(v map[string]*string) *DescribeAlertFinalDataListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertFinalDataListResponse) SetStatusCode(v int32) *DescribeAlertFinalDataListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertFinalDataListResponse) SetBody(v *DescribeAlertFinalDataListResponseBody) *DescribeAlertFinalDataListResponse {
	s.Body = v
	return s
}

type DescribeAlertResourceRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeAlertResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertResourceRequest) SetEventId(v string) *DescribeAlertResourceRequest {
	s.EventId = &v
	return s
}

func (s *DescribeAlertResourceRequest) SetOperaUid(v string) *DescribeAlertResourceRequest {
	s.OperaUid = &v
	return s
}

type DescribeAlertResourceResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAlertResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertResourceResponseBody) SetCode(v int32) *DescribeAlertResourceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertResourceResponseBody) SetData(v map[string]interface{}) *DescribeAlertResourceResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertResourceResponseBody) SetMessage(v string) *DescribeAlertResourceResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertResourceResponseBody) SetRequestId(v string) *DescribeAlertResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertResourceResponseBody) SetStatus(v string) *DescribeAlertResourceResponseBody {
	s.Status = &v
	return s
}

type DescribeAlertResourceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertResourceResponse) SetHeaders(v map[string]*string) *DescribeAlertResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertResourceResponse) SetStatusCode(v int32) *DescribeAlertResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertResourceResponse) SetBody(v *DescribeAlertResourceResponseBody) *DescribeAlertResourceResponse {
	s.Body = v
	return s
}

type DescribeAlertSettingRequest struct {
	CurrentPage   *int64  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	CustomerName  *string `json:"CustomerName,omitempty" xml:"CustomerName,omitempty"`
	OperaUid      *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize      *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchKeyword *string `json:"SearchKeyword,omitempty" xml:"SearchKeyword,omitempty"`
	SettingStatus *string `json:"SettingStatus,omitempty" xml:"SettingStatus,omitempty"`
	Uid           *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s DescribeAlertSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertSettingRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertSettingRequest) SetCurrentPage(v int64) *DescribeAlertSettingRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeAlertSettingRequest) SetCustomerName(v string) *DescribeAlertSettingRequest {
	s.CustomerName = &v
	return s
}

func (s *DescribeAlertSettingRequest) SetOperaUid(v string) *DescribeAlertSettingRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeAlertSettingRequest) SetPageSize(v int64) *DescribeAlertSettingRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAlertSettingRequest) SetSearchKeyword(v string) *DescribeAlertSettingRequest {
	s.SearchKeyword = &v
	return s
}

func (s *DescribeAlertSettingRequest) SetSettingStatus(v string) *DescribeAlertSettingRequest {
	s.SettingStatus = &v
	return s
}

func (s *DescribeAlertSettingRequest) SetUid(v int64) *DescribeAlertSettingRequest {
	s.Uid = &v
	return s
}

type DescribeAlertSettingResponseBody struct {
	Code      *int32                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DescribeAlertSettingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	Total     *int32                                  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeAlertSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertSettingResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertSettingResponseBody) SetCode(v int32) *DescribeAlertSettingResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertSettingResponseBody) SetData(v []*DescribeAlertSettingResponseBodyData) *DescribeAlertSettingResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertSettingResponseBody) SetMessage(v string) *DescribeAlertSettingResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertSettingResponseBody) SetRequestId(v string) *DescribeAlertSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertSettingResponseBody) SetStatus(v string) *DescribeAlertSettingResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeAlertSettingResponseBody) SetTotal(v int32) *DescribeAlertSettingResponseBody {
	s.Total = &v
	return s
}

type DescribeAlertSettingResponseBodyData struct {
	AlarmLevel                  *string `json:"AlarmLevel,omitempty" xml:"AlarmLevel,omitempty"`
	AlertName                   *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	AlertSettingId              *int64  `json:"AlertSettingId,omitempty" xml:"AlertSettingId,omitempty"`
	BusinessGroupIds            *string `json:"BusinessGroupIds,omitempty" xml:"BusinessGroupIds,omitempty"`
	BusinessGroupNames          *string `json:"BusinessGroupNames,omitempty" xml:"BusinessGroupNames,omitempty"`
	ContactIds                  *string `json:"ContactIds,omitempty" xml:"ContactIds,omitempty"`
	ContactNames                *string `json:"ContactNames,omitempty" xml:"ContactNames,omitempty"`
	SendDingtalkNotice          *bool   `json:"SendDingtalkNotice,omitempty" xml:"SendDingtalkNotice,omitempty"`
	SendEmailNotice             *bool   `json:"SendEmailNotice,omitempty" xml:"SendEmailNotice,omitempty"`
	SendSmsNotice               *bool   `json:"SendSmsNotice,omitempty" xml:"SendSmsNotice,omitempty"`
	SettingStatus               *int64  `json:"SettingStatus,omitempty" xml:"SettingStatus,omitempty"`
	StopDuration                *int64  `json:"StopDuration,omitempty" xml:"StopDuration,omitempty"`
	TotalBusinessResourceNumber *int64  `json:"TotalBusinessResourceNumber,omitempty" xml:"TotalBusinessResourceNumber,omitempty"`
}

func (s DescribeAlertSettingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertSettingResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAlertSettingResponseBodyData) SetAlarmLevel(v string) *DescribeAlertSettingResponseBodyData {
	s.AlarmLevel = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetAlertName(v string) *DescribeAlertSettingResponseBodyData {
	s.AlertName = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetAlertSettingId(v int64) *DescribeAlertSettingResponseBodyData {
	s.AlertSettingId = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetBusinessGroupIds(v string) *DescribeAlertSettingResponseBodyData {
	s.BusinessGroupIds = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetBusinessGroupNames(v string) *DescribeAlertSettingResponseBodyData {
	s.BusinessGroupNames = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetContactIds(v string) *DescribeAlertSettingResponseBodyData {
	s.ContactIds = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetContactNames(v string) *DescribeAlertSettingResponseBodyData {
	s.ContactNames = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetSendDingtalkNotice(v bool) *DescribeAlertSettingResponseBodyData {
	s.SendDingtalkNotice = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetSendEmailNotice(v bool) *DescribeAlertSettingResponseBodyData {
	s.SendEmailNotice = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetSendSmsNotice(v bool) *DescribeAlertSettingResponseBodyData {
	s.SendSmsNotice = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetSettingStatus(v int64) *DescribeAlertSettingResponseBodyData {
	s.SettingStatus = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetStopDuration(v int64) *DescribeAlertSettingResponseBodyData {
	s.StopDuration = &v
	return s
}

func (s *DescribeAlertSettingResponseBodyData) SetTotalBusinessResourceNumber(v int64) *DescribeAlertSettingResponseBodyData {
	s.TotalBusinessResourceNumber = &v
	return s
}

type DescribeAlertSettingResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertSettingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertSettingResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertSettingResponse) SetHeaders(v map[string]*string) *DescribeAlertSettingResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertSettingResponse) SetStatusCode(v int32) *DescribeAlertSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertSettingResponse) SetBody(v *DescribeAlertSettingResponseBody) *DescribeAlertSettingResponse {
	s.Body = v
	return s
}

type DescribeAlertSettingByIdRequest struct {
	AlertSettingId *int64 `json:"AlertSettingId,omitempty" xml:"AlertSettingId,omitempty"`
}

func (s DescribeAlertSettingByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertSettingByIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertSettingByIdRequest) SetAlertSettingId(v int64) *DescribeAlertSettingByIdRequest {
	s.AlertSettingId = &v
	return s
}

type DescribeAlertSettingByIdResponseBody struct {
	Code      *int32                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeAlertSettingByIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                   `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAlertSettingByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertSettingByIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertSettingByIdResponseBody) SetCode(v int32) *DescribeAlertSettingByIdResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBody) SetData(v *DescribeAlertSettingByIdResponseBodyData) *DescribeAlertSettingByIdResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAlertSettingByIdResponseBody) SetMessage(v string) *DescribeAlertSettingByIdResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBody) SetRequestId(v string) *DescribeAlertSettingByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBody) SetStatus(v string) *DescribeAlertSettingByIdResponseBody {
	s.Status = &v
	return s
}

type DescribeAlertSettingByIdResponseBodyData struct {
	AlarmLevel             *string `json:"AlarmLevel,omitempty" xml:"AlarmLevel,omitempty"`
	AlertBusinessSettingId *int64  `json:"AlertBusinessSettingId,omitempty" xml:"AlertBusinessSettingId,omitempty"`
	AlertName              *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	DataCreateTime         *string `json:"DataCreateTime,omitempty" xml:"DataCreateTime,omitempty"`
	DataCreateUser         *string `json:"DataCreateUser,omitempty" xml:"DataCreateUser,omitempty"`
	DataModifyTime         *string `json:"DataModifyTime,omitempty" xml:"DataModifyTime,omitempty"`
	DataModifyUser         *string `json:"DataModifyUser,omitempty" xml:"DataModifyUser,omitempty"`
	SendDingtalkNotice     *bool   `json:"SendDingtalkNotice,omitempty" xml:"SendDingtalkNotice,omitempty"`
	SendEmailNotice        *bool   `json:"SendEmailNotice,omitempty" xml:"SendEmailNotice,omitempty"`
	SendSmsNotice          *bool   `json:"SendSmsNotice,omitempty" xml:"SendSmsNotice,omitempty"`
	SettingStatus          *int64  `json:"SettingStatus,omitempty" xml:"SettingStatus,omitempty"`
	StopDuration           *int64  `json:"StopDuration,omitempty" xml:"StopDuration,omitempty"`
	Uid                    *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s DescribeAlertSettingByIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertSettingByIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetAlarmLevel(v string) *DescribeAlertSettingByIdResponseBodyData {
	s.AlarmLevel = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetAlertBusinessSettingId(v int64) *DescribeAlertSettingByIdResponseBodyData {
	s.AlertBusinessSettingId = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetAlertName(v string) *DescribeAlertSettingByIdResponseBodyData {
	s.AlertName = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetDataCreateTime(v string) *DescribeAlertSettingByIdResponseBodyData {
	s.DataCreateTime = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetDataCreateUser(v string) *DescribeAlertSettingByIdResponseBodyData {
	s.DataCreateUser = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetDataModifyTime(v string) *DescribeAlertSettingByIdResponseBodyData {
	s.DataModifyTime = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetDataModifyUser(v string) *DescribeAlertSettingByIdResponseBodyData {
	s.DataModifyUser = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetSendDingtalkNotice(v bool) *DescribeAlertSettingByIdResponseBodyData {
	s.SendDingtalkNotice = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetSendEmailNotice(v bool) *DescribeAlertSettingByIdResponseBodyData {
	s.SendEmailNotice = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetSendSmsNotice(v bool) *DescribeAlertSettingByIdResponseBodyData {
	s.SendSmsNotice = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetSettingStatus(v int64) *DescribeAlertSettingByIdResponseBodyData {
	s.SettingStatus = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetStopDuration(v int64) *DescribeAlertSettingByIdResponseBodyData {
	s.StopDuration = &v
	return s
}

func (s *DescribeAlertSettingByIdResponseBodyData) SetUid(v int64) *DescribeAlertSettingByIdResponseBodyData {
	s.Uid = &v
	return s
}

type DescribeAlertSettingByIdResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertSettingByIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertSettingByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertSettingByIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertSettingByIdResponse) SetHeaders(v map[string]*string) *DescribeAlertSettingByIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertSettingByIdResponse) SetStatusCode(v int32) *DescribeAlertSettingByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertSettingByIdResponse) SetBody(v *DescribeAlertSettingByIdResponseBody) *DescribeAlertSettingByIdResponse {
	s.Body = v
	return s
}

type DescribeAllAlertContactRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeAllAlertContactRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllAlertContactRequest) GoString() string {
	return s.String()
}

func (s *DescribeAllAlertContactRequest) SetOperaUid(v string) *DescribeAllAlertContactRequest {
	s.OperaUid = &v
	return s
}

type DescribeAllAlertContactResponseBody struct {
	Code      *int32                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DescribeAllAlertContactResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                    `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAllAlertContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllAlertContactResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAllAlertContactResponseBody) SetCode(v int32) *DescribeAllAlertContactResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAllAlertContactResponseBody) SetData(v []*DescribeAllAlertContactResponseBodyData) *DescribeAllAlertContactResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAllAlertContactResponseBody) SetMessage(v string) *DescribeAllAlertContactResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAllAlertContactResponseBody) SetRequestId(v string) *DescribeAllAlertContactResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAllAlertContactResponseBody) SetStatus(v string) *DescribeAllAlertContactResponseBody {
	s.Status = &v
	return s
}

type DescribeAllAlertContactResponseBodyData struct {
	Email       *string `json:"email,omitempty" xml:"email,omitempty"`
	GmtCreate   *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	GroupNames  *string `json:"groupNames,omitempty" xml:"groupNames,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Name        *string `json:"name,omitempty" xml:"name,omitempty"`
	Phone       *string `json:"phone,omitempty" xml:"phone,omitempty"`
	Uid         *int64  `json:"uid,omitempty" xml:"uid,omitempty"`
	Webhook     *string `json:"webhook,omitempty" xml:"webhook,omitempty"`
}

func (s DescribeAllAlertContactResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllAlertContactResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAllAlertContactResponseBodyData) SetEmail(v string) *DescribeAllAlertContactResponseBodyData {
	s.Email = &v
	return s
}

func (s *DescribeAllAlertContactResponseBodyData) SetGmtCreate(v int64) *DescribeAllAlertContactResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *DescribeAllAlertContactResponseBodyData) SetGmtModified(v int64) *DescribeAllAlertContactResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *DescribeAllAlertContactResponseBodyData) SetGroupNames(v string) *DescribeAllAlertContactResponseBodyData {
	s.GroupNames = &v
	return s
}

func (s *DescribeAllAlertContactResponseBodyData) SetId(v int64) *DescribeAllAlertContactResponseBodyData {
	s.Id = &v
	return s
}

func (s *DescribeAllAlertContactResponseBodyData) SetName(v string) *DescribeAllAlertContactResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeAllAlertContactResponseBodyData) SetPhone(v string) *DescribeAllAlertContactResponseBodyData {
	s.Phone = &v
	return s
}

func (s *DescribeAllAlertContactResponseBodyData) SetUid(v int64) *DescribeAllAlertContactResponseBodyData {
	s.Uid = &v
	return s
}

func (s *DescribeAllAlertContactResponseBodyData) SetWebhook(v string) *DescribeAllAlertContactResponseBodyData {
	s.Webhook = &v
	return s
}

type DescribeAllAlertContactResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAllAlertContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAllAlertContactResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllAlertContactResponse) GoString() string {
	return s.String()
}

func (s *DescribeAllAlertContactResponse) SetHeaders(v map[string]*string) *DescribeAllAlertContactResponse {
	s.Headers = v
	return s
}

func (s *DescribeAllAlertContactResponse) SetStatusCode(v int32) *DescribeAllAlertContactResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAllAlertContactResponse) SetBody(v *DescribeAllAlertContactResponseBody) *DescribeAllAlertContactResponse {
	s.Body = v
	return s
}

type DescribeAllAlertContactGroupRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeAllAlertContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllAlertContactGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeAllAlertContactGroupRequest) SetOperaUid(v string) *DescribeAllAlertContactGroupRequest {
	s.OperaUid = &v
	return s
}

type DescribeAllAlertContactGroupResponseBody struct {
	Code      *int32                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DescribeAllAlertContactGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                         `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAllAlertContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllAlertContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAllAlertContactGroupResponseBody) SetCode(v int32) *DescribeAllAlertContactGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAllAlertContactGroupResponseBody) SetData(v []*DescribeAllAlertContactGroupResponseBodyData) *DescribeAllAlertContactGroupResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAllAlertContactGroupResponseBody) SetMessage(v string) *DescribeAllAlertContactGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAllAlertContactGroupResponseBody) SetRequestId(v string) *DescribeAllAlertContactGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAllAlertContactGroupResponseBody) SetStatus(v string) *DescribeAllAlertContactGroupResponseBody {
	s.Status = &v
	return s
}

type DescribeAllAlertContactGroupResponseBodyData struct {
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	GmtCreate   *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	GroupName   *string `json:"groupName,omitempty" xml:"groupName,omitempty"`
	Id          *int64  `json:"id,omitempty" xml:"id,omitempty"`
	Uid         *int64  `json:"uid,omitempty" xml:"uid,omitempty"`
}

func (s DescribeAllAlertContactGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllAlertContactGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAllAlertContactGroupResponseBodyData) SetDescription(v string) *DescribeAllAlertContactGroupResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeAllAlertContactGroupResponseBodyData) SetGmtCreate(v int64) *DescribeAllAlertContactGroupResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *DescribeAllAlertContactGroupResponseBodyData) SetGmtModified(v int64) *DescribeAllAlertContactGroupResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *DescribeAllAlertContactGroupResponseBodyData) SetGroupName(v string) *DescribeAllAlertContactGroupResponseBodyData {
	s.GroupName = &v
	return s
}

func (s *DescribeAllAlertContactGroupResponseBodyData) SetId(v int64) *DescribeAllAlertContactGroupResponseBodyData {
	s.Id = &v
	return s
}

func (s *DescribeAllAlertContactGroupResponseBodyData) SetUid(v int64) *DescribeAllAlertContactGroupResponseBodyData {
	s.Uid = &v
	return s
}

type DescribeAllAlertContactGroupResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAllAlertContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAllAlertContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllAlertContactGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeAllAlertContactGroupResponse) SetHeaders(v map[string]*string) *DescribeAllAlertContactGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeAllAlertContactGroupResponse) SetStatusCode(v int32) *DescribeAllAlertContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAllAlertContactGroupResponse) SetBody(v *DescribeAllAlertContactGroupResponseBody) *DescribeAllAlertContactGroupResponse {
	s.Body = v
	return s
}

type DescribeAllBusinessGroupInfoRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeAllBusinessGroupInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllBusinessGroupInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeAllBusinessGroupInfoRequest) SetOperaUid(v string) *DescribeAllBusinessGroupInfoRequest {
	s.OperaUid = &v
	return s
}

type DescribeAllBusinessGroupInfoResponseBody struct {
	Code      *int32                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*DescribeAllBusinessGroupInfoResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                                         `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAllBusinessGroupInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllBusinessGroupInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAllBusinessGroupInfoResponseBody) SetCode(v int32) *DescribeAllBusinessGroupInfoResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAllBusinessGroupInfoResponseBody) SetData(v []*DescribeAllBusinessGroupInfoResponseBodyData) *DescribeAllBusinessGroupInfoResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAllBusinessGroupInfoResponseBody) SetMessage(v string) *DescribeAllBusinessGroupInfoResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAllBusinessGroupInfoResponseBody) SetRequestId(v string) *DescribeAllBusinessGroupInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAllBusinessGroupInfoResponseBody) SetStatus(v string) *DescribeAllBusinessGroupInfoResponseBody {
	s.Status = &v
	return s
}

type DescribeAllBusinessGroupInfoResponseBodyData struct {
	BusinessGroupId   *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	BusinessGroupName *string `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
}

func (s DescribeAllBusinessGroupInfoResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllBusinessGroupInfoResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAllBusinessGroupInfoResponseBodyData) SetBusinessGroupId(v string) *DescribeAllBusinessGroupInfoResponseBodyData {
	s.BusinessGroupId = &v
	return s
}

func (s *DescribeAllBusinessGroupInfoResponseBodyData) SetBusinessGroupName(v string) *DescribeAllBusinessGroupInfoResponseBodyData {
	s.BusinessGroupName = &v
	return s
}

type DescribeAllBusinessGroupInfoResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAllBusinessGroupInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAllBusinessGroupInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllBusinessGroupInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeAllBusinessGroupInfoResponse) SetHeaders(v map[string]*string) *DescribeAllBusinessGroupInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeAllBusinessGroupInfoResponse) SetStatusCode(v int32) *DescribeAllBusinessGroupInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAllBusinessGroupInfoResponse) SetBody(v *DescribeAllBusinessGroupInfoResponseBody) *DescribeAllBusinessGroupInfoResponse {
	s.Body = v
	return s
}

type DescribeAllSceneModelRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeAllSceneModelRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllSceneModelRequest) GoString() string {
	return s.String()
}

func (s *DescribeAllSceneModelRequest) SetOperaUid(v string) *DescribeAllSceneModelRequest {
	s.OperaUid = &v
	return s
}

type DescribeAllSceneModelResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAllSceneModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllSceneModelResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAllSceneModelResponseBody) SetCode(v int32) *DescribeAllSceneModelResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAllSceneModelResponseBody) SetData(v map[string]interface{}) *DescribeAllSceneModelResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAllSceneModelResponseBody) SetMessage(v string) *DescribeAllSceneModelResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAllSceneModelResponseBody) SetRequestId(v string) *DescribeAllSceneModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAllSceneModelResponseBody) SetStatus(v string) *DescribeAllSceneModelResponseBody {
	s.Status = &v
	return s
}

type DescribeAllSceneModelResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAllSceneModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAllSceneModelResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAllSceneModelResponse) GoString() string {
	return s.String()
}

func (s *DescribeAllSceneModelResponse) SetHeaders(v map[string]*string) *DescribeAllSceneModelResponse {
	s.Headers = v
	return s
}

func (s *DescribeAllSceneModelResponse) SetStatusCode(v int32) *DescribeAllSceneModelResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAllSceneModelResponse) SetBody(v *DescribeAllSceneModelResponseBody) *DescribeAllSceneModelResponse {
	s.Body = v
	return s
}

type DescribeAnalysisDataListRequest struct {
	EndTime      *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MetricExtend *string `json:"MetricExtend,omitempty" xml:"MetricExtend,omitempty"`
	MetricName   *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	ProductCode  *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	StartTime    *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeAnalysisDataListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisDataListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisDataListRequest) SetEndTime(v int64) *DescribeAnalysisDataListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAnalysisDataListRequest) SetInstanceId(v string) *DescribeAnalysisDataListRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeAnalysisDataListRequest) SetMetricExtend(v string) *DescribeAnalysisDataListRequest {
	s.MetricExtend = &v
	return s
}

func (s *DescribeAnalysisDataListRequest) SetMetricName(v string) *DescribeAnalysisDataListRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeAnalysisDataListRequest) SetProductCode(v string) *DescribeAnalysisDataListRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeAnalysisDataListRequest) SetStartTime(v int64) *DescribeAnalysisDataListRequest {
	s.StartTime = &v
	return s
}

type DescribeAnalysisDataListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAnalysisDataListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisDataListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisDataListResponseBody) SetCode(v int32) *DescribeAnalysisDataListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAnalysisDataListResponseBody) SetData(v map[string]interface{}) *DescribeAnalysisDataListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAnalysisDataListResponseBody) SetMessage(v string) *DescribeAnalysisDataListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAnalysisDataListResponseBody) SetRequestId(v string) *DescribeAnalysisDataListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAnalysisDataListResponseBody) SetStatus(v bool) *DescribeAnalysisDataListResponseBody {
	s.Status = &v
	return s
}

type DescribeAnalysisDataListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAnalysisDataListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAnalysisDataListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAnalysisDataListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAnalysisDataListResponse) SetHeaders(v map[string]*string) *DescribeAnalysisDataListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAnalysisDataListResponse) SetStatusCode(v int32) *DescribeAnalysisDataListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAnalysisDataListResponse) SetBody(v *DescribeAnalysisDataListResponseBody) *DescribeAnalysisDataListResponse {
	s.Body = v
	return s
}

type DescribeBusinessAnalysisDataListRequest struct {
	ApiPath   *string `json:"ApiPath,omitempty" xml:"ApiPath,omitempty"`
	EndTime   *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Resource  *string `json:"Resource,omitempty" xml:"Resource,omitempty"`
	StartTime *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeBusinessAnalysisDataListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBusinessAnalysisDataListRequest) GoString() string {
	return s.String()
}

func (s *DescribeBusinessAnalysisDataListRequest) SetApiPath(v string) *DescribeBusinessAnalysisDataListRequest {
	s.ApiPath = &v
	return s
}

func (s *DescribeBusinessAnalysisDataListRequest) SetEndTime(v int64) *DescribeBusinessAnalysisDataListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeBusinessAnalysisDataListRequest) SetResource(v string) *DescribeBusinessAnalysisDataListRequest {
	s.Resource = &v
	return s
}

func (s *DescribeBusinessAnalysisDataListRequest) SetStartTime(v int64) *DescribeBusinessAnalysisDataListRequest {
	s.StartTime = &v
	return s
}

type DescribeBusinessAnalysisDataListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeBusinessAnalysisDataListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBusinessAnalysisDataListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBusinessAnalysisDataListResponseBody) SetCode(v int32) *DescribeBusinessAnalysisDataListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeBusinessAnalysisDataListResponseBody) SetData(v map[string]interface{}) *DescribeBusinessAnalysisDataListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeBusinessAnalysisDataListResponseBody) SetMessage(v string) *DescribeBusinessAnalysisDataListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeBusinessAnalysisDataListResponseBody) SetRequestId(v string) *DescribeBusinessAnalysisDataListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBusinessAnalysisDataListResponseBody) SetStatus(v bool) *DescribeBusinessAnalysisDataListResponseBody {
	s.Status = &v
	return s
}

type DescribeBusinessAnalysisDataListResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBusinessAnalysisDataListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBusinessAnalysisDataListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBusinessAnalysisDataListResponse) GoString() string {
	return s.String()
}

func (s *DescribeBusinessAnalysisDataListResponse) SetHeaders(v map[string]*string) *DescribeBusinessAnalysisDataListResponse {
	s.Headers = v
	return s
}

func (s *DescribeBusinessAnalysisDataListResponse) SetStatusCode(v int32) *DescribeBusinessAnalysisDataListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBusinessAnalysisDataListResponse) SetBody(v *DescribeBusinessAnalysisDataListResponseBody) *DescribeBusinessAnalysisDataListResponse {
	s.Body = v
	return s
}

type DescribeDiagnoseRequest struct {
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
}

func (s DescribeDiagnoseRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseRequest) SetProduct(v string) *DescribeDiagnoseRequest {
	s.Product = &v
	return s
}

type DescribeDiagnoseResponseBody struct {
	Code           *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	DiagnoseResult map[string]interface{} `json:"DiagnoseResult,omitempty" xml:"DiagnoseResult,omitempty"`
	Message        *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status         *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDiagnoseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseResponseBody) SetCode(v int32) *DescribeDiagnoseResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDiagnoseResponseBody) SetDiagnoseResult(v map[string]interface{}) *DescribeDiagnoseResponseBody {
	s.DiagnoseResult = v
	return s
}

func (s *DescribeDiagnoseResponseBody) SetMessage(v string) *DescribeDiagnoseResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDiagnoseResponseBody) SetRequestId(v string) *DescribeDiagnoseResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnoseResponseBody) SetStatus(v string) *DescribeDiagnoseResponseBody {
	s.Status = &v
	return s
}

type DescribeDiagnoseResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnoseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnoseResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseResponse) SetHeaders(v map[string]*string) *DescribeDiagnoseResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnoseResponse) SetStatusCode(v int32) *DescribeDiagnoseResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnoseResponse) SetBody(v *DescribeDiagnoseResponseBody) *DescribeDiagnoseResponse {
	s.Body = v
	return s
}

type DescribeDiagnoseResultRequest struct {
	CheckId *string `json:"CheckId,omitempty" xml:"CheckId,omitempty"`
}

func (s DescribeDiagnoseResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseResultRequest) SetCheckId(v string) *DescribeDiagnoseResultRequest {
	s.CheckId = &v
	return s
}

type DescribeDiagnoseResultResponseBody struct {
	Code           *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	DiagnoseResult map[string]interface{} `json:"DiagnoseResult,omitempty" xml:"DiagnoseResult,omitempty"`
	Message        *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status         *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDiagnoseResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseResultResponseBody) SetCode(v int32) *DescribeDiagnoseResultResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDiagnoseResultResponseBody) SetDiagnoseResult(v map[string]interface{}) *DescribeDiagnoseResultResponseBody {
	s.DiagnoseResult = v
	return s
}

func (s *DescribeDiagnoseResultResponseBody) SetMessage(v string) *DescribeDiagnoseResultResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDiagnoseResultResponseBody) SetRequestId(v string) *DescribeDiagnoseResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnoseResultResponseBody) SetStatus(v string) *DescribeDiagnoseResultResponseBody {
	s.Status = &v
	return s
}

type DescribeDiagnoseResultResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiagnoseResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiagnoseResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnoseResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnoseResultResponse) SetHeaders(v map[string]*string) *DescribeDiagnoseResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnoseResultResponse) SetStatusCode(v int32) *DescribeDiagnoseResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnoseResultResponse) SetBody(v *DescribeDiagnoseResultResponseBody) *DescribeDiagnoseResultResponse {
	s.Body = v
	return s
}

type DescribeEventTopologyRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeEventTopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTopologyRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventTopologyRequest) SetEventId(v string) *DescribeEventTopologyRequest {
	s.EventId = &v
	return s
}

func (s *DescribeEventTopologyRequest) SetOperaUid(v string) *DescribeEventTopologyRequest {
	s.OperaUid = &v
	return s
}

type DescribeEventTopologyResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEventTopologyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTopologyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventTopologyResponseBody) SetCode(v int32) *DescribeEventTopologyResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEventTopologyResponseBody) SetData(v map[string]interface{}) *DescribeEventTopologyResponseBody {
	s.Data = v
	return s
}

func (s *DescribeEventTopologyResponseBody) SetMessage(v string) *DescribeEventTopologyResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEventTopologyResponseBody) SetRequestId(v string) *DescribeEventTopologyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventTopologyResponseBody) SetStatus(v string) *DescribeEventTopologyResponseBody {
	s.Status = &v
	return s
}

type DescribeEventTopologyResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventTopologyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventTopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTopologyResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventTopologyResponse) SetHeaders(v map[string]*string) *DescribeEventTopologyResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventTopologyResponse) SetStatusCode(v int32) *DescribeEventTopologyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventTopologyResponse) SetBody(v *DescribeEventTopologyResponseBody) *DescribeEventTopologyResponse {
	s.Body = v
	return s
}

type DescribeEventTopologyDetailRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	TagId    *int64  `json:"TagId,omitempty" xml:"TagId,omitempty"`
}

func (s DescribeEventTopologyDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTopologyDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventTopologyDetailRequest) SetEventId(v string) *DescribeEventTopologyDetailRequest {
	s.EventId = &v
	return s
}

func (s *DescribeEventTopologyDetailRequest) SetOperaUid(v string) *DescribeEventTopologyDetailRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeEventTopologyDetailRequest) SetTagId(v int64) *DescribeEventTopologyDetailRequest {
	s.TagId = &v
	return s
}

type DescribeEventTopologyDetailResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEventTopologyDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTopologyDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventTopologyDetailResponseBody) SetCode(v int32) *DescribeEventTopologyDetailResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEventTopologyDetailResponseBody) SetData(v map[string]interface{}) *DescribeEventTopologyDetailResponseBody {
	s.Data = v
	return s
}

func (s *DescribeEventTopologyDetailResponseBody) SetMsg(v string) *DescribeEventTopologyDetailResponseBody {
	s.Msg = &v
	return s
}

func (s *DescribeEventTopologyDetailResponseBody) SetRequestId(v string) *DescribeEventTopologyDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventTopologyDetailResponseBody) SetStatus(v string) *DescribeEventTopologyDetailResponseBody {
	s.Status = &v
	return s
}

type DescribeEventTopologyDetailResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventTopologyDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventTopologyDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventTopologyDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventTopologyDetailResponse) SetHeaders(v map[string]*string) *DescribeEventTopologyDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventTopologyDetailResponse) SetStatusCode(v int32) *DescribeEventTopologyDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventTopologyDetailResponse) SetBody(v *DescribeEventTopologyDetailResponseBody) *DescribeEventTopologyDetailResponse {
	s.Body = v
	return s
}

type DescribeFcFunctionRequest struct {
	Limit       *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	NextToken   *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	Prefix      *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
	RegionCode  *string `json:"RegionCode,omitempty" xml:"RegionCode,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeFcFunctionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFcFunctionRequest) GoString() string {
	return s.String()
}

func (s *DescribeFcFunctionRequest) SetLimit(v int32) *DescribeFcFunctionRequest {
	s.Limit = &v
	return s
}

func (s *DescribeFcFunctionRequest) SetNextToken(v string) *DescribeFcFunctionRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeFcFunctionRequest) SetOperaUid(v string) *DescribeFcFunctionRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeFcFunctionRequest) SetPrefix(v string) *DescribeFcFunctionRequest {
	s.Prefix = &v
	return s
}

func (s *DescribeFcFunctionRequest) SetRegionCode(v string) *DescribeFcFunctionRequest {
	s.RegionCode = &v
	return s
}

func (s *DescribeFcFunctionRequest) SetServiceName(v string) *DescribeFcFunctionRequest {
	s.ServiceName = &v
	return s
}

type DescribeFcFunctionResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	NextToken *string                `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeFcFunctionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFcFunctionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFcFunctionResponseBody) SetCode(v int32) *DescribeFcFunctionResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeFcFunctionResponseBody) SetData(v map[string]interface{}) *DescribeFcFunctionResponseBody {
	s.Data = v
	return s
}

func (s *DescribeFcFunctionResponseBody) SetMessage(v string) *DescribeFcFunctionResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeFcFunctionResponseBody) SetNextToken(v string) *DescribeFcFunctionResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeFcFunctionResponseBody) SetRequestId(v string) *DescribeFcFunctionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFcFunctionResponseBody) SetStatus(v string) *DescribeFcFunctionResponseBody {
	s.Status = &v
	return s
}

type DescribeFcFunctionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFcFunctionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFcFunctionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFcFunctionResponse) GoString() string {
	return s.String()
}

func (s *DescribeFcFunctionResponse) SetHeaders(v map[string]*string) *DescribeFcFunctionResponse {
	s.Headers = v
	return s
}

func (s *DescribeFcFunctionResponse) SetStatusCode(v int32) *DescribeFcFunctionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFcFunctionResponse) SetBody(v *DescribeFcFunctionResponseBody) *DescribeFcFunctionResponse {
	s.Body = v
	return s
}

type DescribeFcRegionRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeFcRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFcRegionRequest) GoString() string {
	return s.String()
}

func (s *DescribeFcRegionRequest) SetOperaUid(v string) *DescribeFcRegionRequest {
	s.OperaUid = &v
	return s
}

type DescribeFcRegionResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeFcRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFcRegionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFcRegionResponseBody) SetCode(v int32) *DescribeFcRegionResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeFcRegionResponseBody) SetData(v map[string]interface{}) *DescribeFcRegionResponseBody {
	s.Data = v
	return s
}

func (s *DescribeFcRegionResponseBody) SetMessage(v string) *DescribeFcRegionResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeFcRegionResponseBody) SetRequestId(v string) *DescribeFcRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFcRegionResponseBody) SetStatus(v string) *DescribeFcRegionResponseBody {
	s.Status = &v
	return s
}

type DescribeFcRegionResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFcRegionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFcRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFcRegionResponse) GoString() string {
	return s.String()
}

func (s *DescribeFcRegionResponse) SetHeaders(v map[string]*string) *DescribeFcRegionResponse {
	s.Headers = v
	return s
}

func (s *DescribeFcRegionResponse) SetStatusCode(v int32) *DescribeFcRegionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFcRegionResponse) SetBody(v *DescribeFcRegionResponseBody) *DescribeFcRegionResponse {
	s.Body = v
	return s
}

type DescribeFcServiceRequest struct {
	Limit      *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	NextToken  *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OperaUid   *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	Prefix     *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
	RegionCode *string `json:"RegionCode,omitempty" xml:"RegionCode,omitempty"`
}

func (s DescribeFcServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFcServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeFcServiceRequest) SetLimit(v int32) *DescribeFcServiceRequest {
	s.Limit = &v
	return s
}

func (s *DescribeFcServiceRequest) SetNextToken(v string) *DescribeFcServiceRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeFcServiceRequest) SetOperaUid(v string) *DescribeFcServiceRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeFcServiceRequest) SetPrefix(v string) *DescribeFcServiceRequest {
	s.Prefix = &v
	return s
}

func (s *DescribeFcServiceRequest) SetRegionCode(v string) *DescribeFcServiceRequest {
	s.RegionCode = &v
	return s
}

type DescribeFcServiceResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	NextToken *string                `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeFcServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFcServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFcServiceResponseBody) SetCode(v int32) *DescribeFcServiceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeFcServiceResponseBody) SetData(v map[string]interface{}) *DescribeFcServiceResponseBody {
	s.Data = v
	return s
}

func (s *DescribeFcServiceResponseBody) SetMessage(v string) *DescribeFcServiceResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeFcServiceResponseBody) SetNextToken(v string) *DescribeFcServiceResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeFcServiceResponseBody) SetRequestId(v string) *DescribeFcServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFcServiceResponseBody) SetStatus(v string) *DescribeFcServiceResponseBody {
	s.Status = &v
	return s
}

type DescribeFcServiceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFcServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFcServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFcServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeFcServiceResponse) SetHeaders(v map[string]*string) *DescribeFcServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeFcServiceResponse) SetStatusCode(v int32) *DescribeFcServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFcServiceResponse) SetBody(v *DescribeFcServiceResponseBody) *DescribeFcServiceResponse {
	s.Body = v
	return s
}

type DescribeHistoryRiskRequest struct {
	CurrentPage       *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	LastFindTimeEnd   *string `json:"LastFindTimeEnd,omitempty" xml:"LastFindTimeEnd,omitempty"`
	LastFindTimeStart *string `json:"LastFindTimeStart,omitempty" xml:"LastFindTimeStart,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductCode       *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	Severity          *int32  `json:"Severity,omitempty" xml:"Severity,omitempty"`
}

func (s DescribeHistoryRiskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryRiskRequest) GoString() string {
	return s.String()
}

func (s *DescribeHistoryRiskRequest) SetCurrentPage(v int32) *DescribeHistoryRiskRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeHistoryRiskRequest) SetLastFindTimeEnd(v string) *DescribeHistoryRiskRequest {
	s.LastFindTimeEnd = &v
	return s
}

func (s *DescribeHistoryRiskRequest) SetLastFindTimeStart(v string) *DescribeHistoryRiskRequest {
	s.LastFindTimeStart = &v
	return s
}

func (s *DescribeHistoryRiskRequest) SetOperaUid(v string) *DescribeHistoryRiskRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeHistoryRiskRequest) SetPageSize(v int32) *DescribeHistoryRiskRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHistoryRiskRequest) SetProductCode(v string) *DescribeHistoryRiskRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeHistoryRiskRequest) SetSeverity(v int32) *DescribeHistoryRiskRequest {
	s.Severity = &v
	return s
}

type DescribeHistoryRiskResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
	Total     *int64                 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeHistoryRiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryRiskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHistoryRiskResponseBody) SetCode(v int32) *DescribeHistoryRiskResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHistoryRiskResponseBody) SetData(v map[string]interface{}) *DescribeHistoryRiskResponseBody {
	s.Data = v
	return s
}

func (s *DescribeHistoryRiskResponseBody) SetMessage(v string) *DescribeHistoryRiskResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHistoryRiskResponseBody) SetRequestId(v string) *DescribeHistoryRiskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHistoryRiskResponseBody) SetStatus(v string) *DescribeHistoryRiskResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeHistoryRiskResponseBody) SetTotal(v int64) *DescribeHistoryRiskResponseBody {
	s.Total = &v
	return s
}

type DescribeHistoryRiskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHistoryRiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHistoryRiskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHistoryRiskResponse) GoString() string {
	return s.String()
}

func (s *DescribeHistoryRiskResponse) SetHeaders(v map[string]*string) *DescribeHistoryRiskResponse {
	s.Headers = v
	return s
}

func (s *DescribeHistoryRiskResponse) SetStatusCode(v int32) *DescribeHistoryRiskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHistoryRiskResponse) SetBody(v *DescribeHistoryRiskResponseBody) *DescribeHistoryRiskResponse {
	s.Body = v
	return s
}

type DescribeInspectionProgressRequest struct {
	InspectionRecordId *int64  `json:"InspectionRecordId,omitempty" xml:"InspectionRecordId,omitempty"`
	OperaUid           *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeInspectionProgressRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionProgressRequest) GoString() string {
	return s.String()
}

func (s *DescribeInspectionProgressRequest) SetInspectionRecordId(v int64) *DescribeInspectionProgressRequest {
	s.InspectionRecordId = &v
	return s
}

func (s *DescribeInspectionProgressRequest) SetOperaUid(v string) *DescribeInspectionProgressRequest {
	s.OperaUid = &v
	return s
}

type DescribeInspectionProgressResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeInspectionProgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionProgressResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInspectionProgressResponseBody) SetCode(v int32) *DescribeInspectionProgressResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInspectionProgressResponseBody) SetData(v map[string]interface{}) *DescribeInspectionProgressResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInspectionProgressResponseBody) SetMessage(v string) *DescribeInspectionProgressResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInspectionProgressResponseBody) SetRequestId(v string) *DescribeInspectionProgressResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInspectionProgressResponseBody) SetStatus(v string) *DescribeInspectionProgressResponseBody {
	s.Status = &v
	return s
}

type DescribeInspectionProgressResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInspectionProgressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInspectionProgressResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionProgressResponse) GoString() string {
	return s.String()
}

func (s *DescribeInspectionProgressResponse) SetHeaders(v map[string]*string) *DescribeInspectionProgressResponse {
	s.Headers = v
	return s
}

func (s *DescribeInspectionProgressResponse) SetStatusCode(v int32) *DescribeInspectionProgressResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInspectionProgressResponse) SetBody(v *DescribeInspectionProgressResponseBody) *DescribeInspectionProgressResponse {
	s.Body = v
	return s
}

type DescribeInspectionResourcesRequest struct {
	Keyword     *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s DescribeInspectionResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInspectionResourcesRequest) SetKeyword(v string) *DescribeInspectionResourcesRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeInspectionResourcesRequest) SetOperaUid(v string) *DescribeInspectionResourcesRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeInspectionResourcesRequest) SetProductCode(v string) *DescribeInspectionResourcesRequest {
	s.ProductCode = &v
	return s
}

type DescribeInspectionResourcesResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeInspectionResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInspectionResourcesResponseBody) SetCode(v int32) *DescribeInspectionResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInspectionResourcesResponseBody) SetData(v map[string]interface{}) *DescribeInspectionResourcesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInspectionResourcesResponseBody) SetMessage(v string) *DescribeInspectionResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInspectionResourcesResponseBody) SetRequestId(v string) *DescribeInspectionResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInspectionResourcesResponseBody) SetStatus(v string) *DescribeInspectionResourcesResponseBody {
	s.Status = &v
	return s
}

type DescribeInspectionResourcesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInspectionResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInspectionResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInspectionResourcesResponse) SetHeaders(v map[string]*string) *DescribeInspectionResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInspectionResourcesResponse) SetStatusCode(v int32) *DescribeInspectionResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInspectionResourcesResponse) SetBody(v *DescribeInspectionResourcesResponseBody) *DescribeInspectionResourcesResponse {
	s.Body = v
	return s
}

type DescribeInspectionResultRequest struct {
	ContinuousDays *int32  `json:"ContinuousDays,omitempty" xml:"ContinuousDays,omitempty"`
	CurrentPage    *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RiskCode       *string `json:"RiskCode,omitempty" xml:"RiskCode,omitempty"`
	Severity       *int32  `json:"Severity,omitempty" xml:"Severity,omitempty"`
}

func (s DescribeInspectionResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeInspectionResultRequest) SetContinuousDays(v int32) *DescribeInspectionResultRequest {
	s.ContinuousDays = &v
	return s
}

func (s *DescribeInspectionResultRequest) SetCurrentPage(v int32) *DescribeInspectionResultRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeInspectionResultRequest) SetOperaUid(v string) *DescribeInspectionResultRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeInspectionResultRequest) SetPageSize(v int32) *DescribeInspectionResultRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInspectionResultRequest) SetRiskCode(v string) *DescribeInspectionResultRequest {
	s.RiskCode = &v
	return s
}

func (s *DescribeInspectionResultRequest) SetSeverity(v int32) *DescribeInspectionResultRequest {
	s.Severity = &v
	return s
}

type DescribeInspectionResultResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
	Total     *int64                 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeInspectionResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInspectionResultResponseBody) SetCode(v int32) *DescribeInspectionResultResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInspectionResultResponseBody) SetData(v map[string]interface{}) *DescribeInspectionResultResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInspectionResultResponseBody) SetMessage(v string) *DescribeInspectionResultResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInspectionResultResponseBody) SetRequestId(v string) *DescribeInspectionResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInspectionResultResponseBody) SetStatus(v string) *DescribeInspectionResultResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeInspectionResultResponseBody) SetTotal(v int64) *DescribeInspectionResultResponseBody {
	s.Total = &v
	return s
}

type DescribeInspectionResultResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInspectionResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInspectionResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeInspectionResultResponse) SetHeaders(v map[string]*string) *DescribeInspectionResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeInspectionResultResponse) SetStatusCode(v int32) *DescribeInspectionResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInspectionResultResponse) SetBody(v *DescribeInspectionResultResponseBody) *DescribeInspectionResultResponse {
	s.Body = v
	return s
}

type DescribeInspectionSettingsRequest struct {
	OperaUid         *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode      *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ProductType      *int32  `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RiskDesc         *string `json:"RiskDesc,omitempty" xml:"RiskDesc,omitempty"`
	RiskEnableStatus *int32  `json:"RiskEnableStatus,omitempty" xml:"RiskEnableStatus,omitempty"`
	RiskName         *string `json:"RiskName,omitempty" xml:"RiskName,omitempty"`
	RiskType         *int32  `json:"RiskType,omitempty" xml:"RiskType,omitempty"`
}

func (s DescribeInspectionSettingsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionSettingsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInspectionSettingsRequest) SetOperaUid(v string) *DescribeInspectionSettingsRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeInspectionSettingsRequest) SetProductCode(v string) *DescribeInspectionSettingsRequest {
	s.ProductCode = &v
	return s
}

func (s *DescribeInspectionSettingsRequest) SetProductType(v int32) *DescribeInspectionSettingsRequest {
	s.ProductType = &v
	return s
}

func (s *DescribeInspectionSettingsRequest) SetRiskDesc(v string) *DescribeInspectionSettingsRequest {
	s.RiskDesc = &v
	return s
}

func (s *DescribeInspectionSettingsRequest) SetRiskEnableStatus(v int32) *DescribeInspectionSettingsRequest {
	s.RiskEnableStatus = &v
	return s
}

func (s *DescribeInspectionSettingsRequest) SetRiskName(v string) *DescribeInspectionSettingsRequest {
	s.RiskName = &v
	return s
}

func (s *DescribeInspectionSettingsRequest) SetRiskType(v int32) *DescribeInspectionSettingsRequest {
	s.RiskType = &v
	return s
}

type DescribeInspectionSettingsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeInspectionSettingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionSettingsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInspectionSettingsResponseBody) SetCode(v int32) *DescribeInspectionSettingsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInspectionSettingsResponseBody) SetData(v map[string]interface{}) *DescribeInspectionSettingsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInspectionSettingsResponseBody) SetMessage(v string) *DescribeInspectionSettingsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInspectionSettingsResponseBody) SetRequestId(v string) *DescribeInspectionSettingsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInspectionSettingsResponseBody) SetStatus(v string) *DescribeInspectionSettingsResponseBody {
	s.Status = &v
	return s
}

type DescribeInspectionSettingsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInspectionSettingsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInspectionSettingsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionSettingsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInspectionSettingsResponse) SetHeaders(v map[string]*string) *DescribeInspectionSettingsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInspectionSettingsResponse) SetStatusCode(v int32) *DescribeInspectionSettingsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInspectionSettingsResponse) SetBody(v *DescribeInspectionSettingsResponseBody) *DescribeInspectionSettingsResponse {
	s.Body = v
	return s
}

type DescribeInspectionThresholdRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	RiskCode *string `json:"RiskCode,omitempty" xml:"RiskCode,omitempty"`
}

func (s DescribeInspectionThresholdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionThresholdRequest) GoString() string {
	return s.String()
}

func (s *DescribeInspectionThresholdRequest) SetOperaUid(v string) *DescribeInspectionThresholdRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeInspectionThresholdRequest) SetRiskCode(v string) *DescribeInspectionThresholdRequest {
	s.RiskCode = &v
	return s
}

type DescribeInspectionThresholdResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeInspectionThresholdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionThresholdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInspectionThresholdResponseBody) SetCode(v int32) *DescribeInspectionThresholdResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInspectionThresholdResponseBody) SetData(v map[string]interface{}) *DescribeInspectionThresholdResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInspectionThresholdResponseBody) SetMessage(v string) *DescribeInspectionThresholdResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInspectionThresholdResponseBody) SetRequestId(v string) *DescribeInspectionThresholdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInspectionThresholdResponseBody) SetStatus(v string) *DescribeInspectionThresholdResponseBody {
	s.Status = &v
	return s
}

type DescribeInspectionThresholdResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInspectionThresholdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInspectionThresholdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionThresholdResponse) GoString() string {
	return s.String()
}

func (s *DescribeInspectionThresholdResponse) SetHeaders(v map[string]*string) *DescribeInspectionThresholdResponse {
	s.Headers = v
	return s
}

func (s *DescribeInspectionThresholdResponse) SetStatusCode(v int32) *DescribeInspectionThresholdResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInspectionThresholdResponse) SetBody(v *DescribeInspectionThresholdResponseBody) *DescribeInspectionThresholdResponse {
	s.Body = v
	return s
}

type DescribeInspectionWhitelistsRequest struct {
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s DescribeInspectionWhitelistsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionWhitelistsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInspectionWhitelistsRequest) SetOperaUid(v string) *DescribeInspectionWhitelistsRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeInspectionWhitelistsRequest) SetProductCode(v string) *DescribeInspectionWhitelistsRequest {
	s.ProductCode = &v
	return s
}

type DescribeInspectionWhitelistsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeInspectionWhitelistsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionWhitelistsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInspectionWhitelistsResponseBody) SetCode(v int32) *DescribeInspectionWhitelistsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInspectionWhitelistsResponseBody) SetData(v map[string]interface{}) *DescribeInspectionWhitelistsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInspectionWhitelistsResponseBody) SetMessage(v string) *DescribeInspectionWhitelistsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInspectionWhitelistsResponseBody) SetRequestId(v string) *DescribeInspectionWhitelistsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInspectionWhitelistsResponseBody) SetStatus(v string) *DescribeInspectionWhitelistsResponseBody {
	s.Status = &v
	return s
}

type DescribeInspectionWhitelistsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInspectionWhitelistsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInspectionWhitelistsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInspectionWhitelistsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInspectionWhitelistsResponse) SetHeaders(v map[string]*string) *DescribeInspectionWhitelistsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInspectionWhitelistsResponse) SetStatusCode(v int32) *DescribeInspectionWhitelistsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInspectionWhitelistsResponse) SetBody(v *DescribeInspectionWhitelistsResponseBody) *DescribeInspectionWhitelistsResponse {
	s.Body = v
	return s
}

type DescribeInvocationResultsRequest struct {
	CommandId  *string `json:"CommandId,omitempty" xml:"CommandId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InvokeId   *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInvocationResultsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsRequest) SetCommandId(v string) *DescribeInvocationResultsRequest {
	s.CommandId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetInstanceId(v string) *DescribeInvocationResultsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetInvokeId(v string) *DescribeInvocationResultsRequest {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationResultsRequest) SetRegionId(v string) *DescribeInvocationResultsRequest {
	s.RegionId = &v
	return s
}

type DescribeInvocationResultsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeInvocationResultsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsResponseBody) SetCode(v int32) *DescribeInvocationResultsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInvocationResultsResponseBody) SetData(v map[string]interface{}) *DescribeInvocationResultsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeInvocationResultsResponseBody) SetMessage(v string) *DescribeInvocationResultsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInvocationResultsResponseBody) SetRequestId(v string) *DescribeInvocationResultsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInvocationResultsResponseBody) SetStatus(v bool) *DescribeInvocationResultsResponseBody {
	s.Status = &v
	return s
}

type DescribeInvocationResultsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInvocationResultsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInvocationResultsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationResultsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInvocationResultsResponse) SetHeaders(v map[string]*string) *DescribeInvocationResultsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInvocationResultsResponse) SetStatusCode(v int32) *DescribeInvocationResultsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInvocationResultsResponse) SetBody(v *DescribeInvocationResultsResponseBody) *DescribeInvocationResultsResponse {
	s.Body = v
	return s
}

type DescribeLastInspectionSummaryRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeLastInspectionSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLastInspectionSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeLastInspectionSummaryRequest) SetOperaUid(v string) *DescribeLastInspectionSummaryRequest {
	s.OperaUid = &v
	return s
}

type DescribeLastInspectionSummaryResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeLastInspectionSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLastInspectionSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLastInspectionSummaryResponseBody) SetCode(v int32) *DescribeLastInspectionSummaryResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeLastInspectionSummaryResponseBody) SetData(v map[string]interface{}) *DescribeLastInspectionSummaryResponseBody {
	s.Data = v
	return s
}

func (s *DescribeLastInspectionSummaryResponseBody) SetMessage(v string) *DescribeLastInspectionSummaryResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeLastInspectionSummaryResponseBody) SetRequestId(v string) *DescribeLastInspectionSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLastInspectionSummaryResponseBody) SetStatus(v string) *DescribeLastInspectionSummaryResponseBody {
	s.Status = &v
	return s
}

type DescribeLastInspectionSummaryResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLastInspectionSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLastInspectionSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLastInspectionSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeLastInspectionSummaryResponse) SetHeaders(v map[string]*string) *DescribeLastInspectionSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeLastInspectionSummaryResponse) SetStatusCode(v int32) *DescribeLastInspectionSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLastInspectionSummaryResponse) SetBody(v *DescribeLastInspectionSummaryResponseBody) *DescribeLastInspectionSummaryResponse {
	s.Body = v
	return s
}

type DescribeModelRelationScenesRequest struct {
	ModelId  *int64  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeModelRelationScenesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelRelationScenesRequest) GoString() string {
	return s.String()
}

func (s *DescribeModelRelationScenesRequest) SetModelId(v int64) *DescribeModelRelationScenesRequest {
	s.ModelId = &v
	return s
}

func (s *DescribeModelRelationScenesRequest) SetOperaUid(v string) *DescribeModelRelationScenesRequest {
	s.OperaUid = &v
	return s
}

type DescribeModelRelationScenesResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeModelRelationScenesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelRelationScenesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeModelRelationScenesResponseBody) SetCode(v int32) *DescribeModelRelationScenesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeModelRelationScenesResponseBody) SetData(v map[string]interface{}) *DescribeModelRelationScenesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeModelRelationScenesResponseBody) SetMessage(v string) *DescribeModelRelationScenesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeModelRelationScenesResponseBody) SetRequestId(v string) *DescribeModelRelationScenesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeModelRelationScenesResponseBody) SetStatus(v string) *DescribeModelRelationScenesResponseBody {
	s.Status = &v
	return s
}

type DescribeModelRelationScenesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeModelRelationScenesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeModelRelationScenesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeModelRelationScenesResponse) GoString() string {
	return s.String()
}

func (s *DescribeModelRelationScenesResponse) SetHeaders(v map[string]*string) *DescribeModelRelationScenesResponse {
	s.Headers = v
	return s
}

func (s *DescribeModelRelationScenesResponse) SetStatusCode(v int32) *DescribeModelRelationScenesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeModelRelationScenesResponse) SetBody(v *DescribeModelRelationScenesResponseBody) *DescribeModelRelationScenesResponse {
	s.Body = v
	return s
}

type DescribeProductRiskPieRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeProductRiskPieRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductRiskPieRequest) GoString() string {
	return s.String()
}

func (s *DescribeProductRiskPieRequest) SetOperaUid(v string) *DescribeProductRiskPieRequest {
	s.OperaUid = &v
	return s
}

type DescribeProductRiskPieResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeProductRiskPieResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductRiskPieResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProductRiskPieResponseBody) SetCode(v int32) *DescribeProductRiskPieResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProductRiskPieResponseBody) SetData(v map[string]interface{}) *DescribeProductRiskPieResponseBody {
	s.Data = v
	return s
}

func (s *DescribeProductRiskPieResponseBody) SetMessage(v string) *DescribeProductRiskPieResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProductRiskPieResponseBody) SetRequestId(v string) *DescribeProductRiskPieResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProductRiskPieResponseBody) SetStatus(v string) *DescribeProductRiskPieResponseBody {
	s.Status = &v
	return s
}

type DescribeProductRiskPieResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProductRiskPieResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProductRiskPieResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductRiskPieResponse) GoString() string {
	return s.String()
}

func (s *DescribeProductRiskPieResponse) SetHeaders(v map[string]*string) *DescribeProductRiskPieResponse {
	s.Headers = v
	return s
}

func (s *DescribeProductRiskPieResponse) SetStatusCode(v int32) *DescribeProductRiskPieResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProductRiskPieResponse) SetBody(v *DescribeProductRiskPieResponseBody) *DescribeProductRiskPieResponse {
	s.Body = v
	return s
}

type DescribeReportDataResponseBody struct {
	Code      *int32                              `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeReportDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                             `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeReportDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReportDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReportDataResponseBody) SetCode(v int32) *DescribeReportDataResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeReportDataResponseBody) SetData(v *DescribeReportDataResponseBodyData) *DescribeReportDataResponseBody {
	s.Data = v
	return s
}

func (s *DescribeReportDataResponseBody) SetMessage(v string) *DescribeReportDataResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeReportDataResponseBody) SetRequestId(v string) *DescribeReportDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReportDataResponseBody) SetStatus(v string) *DescribeReportDataResponseBody {
	s.Status = &v
	return s
}

type DescribeReportDataResponseBodyData struct {
	HeathScore          *int64   `json:"HeathScore,omitempty" xml:"HeathScore,omitempty"`
	HeathScoreTrendList []*int64 `json:"HeathScoreTrendList,omitempty" xml:"HeathScoreTrendList,omitempty" type:"Repeated"`
	PreUpdateTime       *string  `json:"PreUpdateTime,omitempty" xml:"PreUpdateTime,omitempty"`
	RiskCount           *int64   `json:"RiskCount,omitempty" xml:"RiskCount,omitempty"`
	RiskCountTrendList  []*int64 `json:"RiskCountTrendList,omitempty" xml:"RiskCountTrendList,omitempty" type:"Repeated"`
}

func (s DescribeReportDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeReportDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeReportDataResponseBodyData) SetHeathScore(v int64) *DescribeReportDataResponseBodyData {
	s.HeathScore = &v
	return s
}

func (s *DescribeReportDataResponseBodyData) SetHeathScoreTrendList(v []*int64) *DescribeReportDataResponseBodyData {
	s.HeathScoreTrendList = v
	return s
}

func (s *DescribeReportDataResponseBodyData) SetPreUpdateTime(v string) *DescribeReportDataResponseBodyData {
	s.PreUpdateTime = &v
	return s
}

func (s *DescribeReportDataResponseBodyData) SetRiskCount(v int64) *DescribeReportDataResponseBodyData {
	s.RiskCount = &v
	return s
}

func (s *DescribeReportDataResponseBodyData) SetRiskCountTrendList(v []*int64) *DescribeReportDataResponseBodyData {
	s.RiskCountTrendList = v
	return s
}

type DescribeReportDataResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeReportDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeReportDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReportDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeReportDataResponse) SetHeaders(v map[string]*string) *DescribeReportDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeReportDataResponse) SetStatusCode(v int32) *DescribeReportDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReportDataResponse) SetBody(v *DescribeReportDataResponseBody) *DescribeReportDataResponse {
	s.Body = v
	return s
}

type DescribeReportEmailConfigsRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeReportEmailConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReportEmailConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeReportEmailConfigsRequest) SetOperaUid(v string) *DescribeReportEmailConfigsRequest {
	s.OperaUid = &v
	return s
}

type DescribeReportEmailConfigsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeReportEmailConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReportEmailConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReportEmailConfigsResponseBody) SetCode(v int32) *DescribeReportEmailConfigsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeReportEmailConfigsResponseBody) SetData(v map[string]interface{}) *DescribeReportEmailConfigsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeReportEmailConfigsResponseBody) SetMessage(v string) *DescribeReportEmailConfigsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeReportEmailConfigsResponseBody) SetRequestId(v string) *DescribeReportEmailConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReportEmailConfigsResponseBody) SetStatus(v string) *DescribeReportEmailConfigsResponseBody {
	s.Status = &v
	return s
}

type DescribeReportEmailConfigsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeReportEmailConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeReportEmailConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReportEmailConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeReportEmailConfigsResponse) SetHeaders(v map[string]*string) *DescribeReportEmailConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeReportEmailConfigsResponse) SetStatusCode(v int32) *DescribeReportEmailConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReportEmailConfigsResponse) SetBody(v *DescribeReportEmailConfigsResponseBody) *DescribeReportEmailConfigsResponse {
	s.Body = v
	return s
}

type DescribeReportSubscriptionsRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeReportSubscriptionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReportSubscriptionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeReportSubscriptionsRequest) SetOperaUid(v string) *DescribeReportSubscriptionsRequest {
	s.OperaUid = &v
	return s
}

type DescribeReportSubscriptionsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeReportSubscriptionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReportSubscriptionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReportSubscriptionsResponseBody) SetCode(v int32) *DescribeReportSubscriptionsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeReportSubscriptionsResponseBody) SetData(v map[string]interface{}) *DescribeReportSubscriptionsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeReportSubscriptionsResponseBody) SetMessage(v string) *DescribeReportSubscriptionsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeReportSubscriptionsResponseBody) SetRequestId(v string) *DescribeReportSubscriptionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReportSubscriptionsResponseBody) SetStatus(v string) *DescribeReportSubscriptionsResponseBody {
	s.Status = &v
	return s
}

type DescribeReportSubscriptionsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeReportSubscriptionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeReportSubscriptionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReportSubscriptionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeReportSubscriptionsResponse) SetHeaders(v map[string]*string) *DescribeReportSubscriptionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeReportSubscriptionsResponse) SetStatusCode(v int32) *DescribeReportSubscriptionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReportSubscriptionsResponse) SetBody(v *DescribeReportSubscriptionsResponseBody) *DescribeReportSubscriptionsResponse {
	s.Body = v
	return s
}

type DescribeResourceMetricRequest struct {
	EventId     *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	FirstLoad   *int32  `json:"FirstLoad,omitempty" xml:"FirstLoad,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s DescribeResourceMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceMetricRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceMetricRequest) SetEventId(v string) *DescribeResourceMetricRequest {
	s.EventId = &v
	return s
}

func (s *DescribeResourceMetricRequest) SetFirstLoad(v int32) *DescribeResourceMetricRequest {
	s.FirstLoad = &v
	return s
}

func (s *DescribeResourceMetricRequest) SetInstanceId(v string) *DescribeResourceMetricRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeResourceMetricRequest) SetOperaUid(v string) *DescribeResourceMetricRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeResourceMetricRequest) SetProductCode(v string) *DescribeResourceMetricRequest {
	s.ProductCode = &v
	return s
}

type DescribeResourceMetricResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeResourceMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceMetricResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceMetricResponseBody) SetCode(v int32) *DescribeResourceMetricResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeResourceMetricResponseBody) SetData(v map[string]interface{}) *DescribeResourceMetricResponseBody {
	s.Data = v
	return s
}

func (s *DescribeResourceMetricResponseBody) SetMessage(v string) *DescribeResourceMetricResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeResourceMetricResponseBody) SetRequestId(v string) *DescribeResourceMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceMetricResponseBody) SetStatus(v string) *DescribeResourceMetricResponseBody {
	s.Status = &v
	return s
}

type DescribeResourceMetricResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeResourceMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeResourceMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceMetricResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceMetricResponse) SetHeaders(v map[string]*string) *DescribeResourceMetricResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceMetricResponse) SetStatusCode(v int32) *DescribeResourceMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceMetricResponse) SetBody(v *DescribeResourceMetricResponseBody) *DescribeResourceMetricResponse {
	s.Body = v
	return s
}

type DescribeRiskRequest struct {
	EndTime   *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Types     *string `json:"Types,omitempty" xml:"Types,omitempty"`
	Uid       *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s DescribeRiskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskRequest) SetEndTime(v int64) *DescribeRiskRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRiskRequest) SetStartTime(v int64) *DescribeRiskRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeRiskRequest) SetTypes(v string) *DescribeRiskRequest {
	s.Types = &v
	return s
}

func (s *DescribeRiskRequest) SetUid(v int64) *DescribeRiskRequest {
	s.Uid = &v
	return s
}

type DescribeRiskResponseBody struct {
	Code           *string                `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RiskAssessment map[string]interface{} `json:"RiskAssessment,omitempty" xml:"RiskAssessment,omitempty"`
	Status         *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskResponseBody) SetCode(v string) *DescribeRiskResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRiskResponseBody) SetMessage(v string) *DescribeRiskResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRiskResponseBody) SetRequestId(v string) *DescribeRiskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskResponseBody) SetRiskAssessment(v map[string]interface{}) *DescribeRiskResponseBody {
	s.RiskAssessment = v
	return s
}

func (s *DescribeRiskResponseBody) SetStatus(v string) *DescribeRiskResponseBody {
	s.Status = &v
	return s
}

type DescribeRiskResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRiskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskResponse) SetHeaders(v map[string]*string) *DescribeRiskResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskResponse) SetStatusCode(v int32) *DescribeRiskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskResponse) SetBody(v *DescribeRiskResponseBody) *DescribeRiskResponse {
	s.Body = v
	return s
}

type DescribeRiskConfigRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeRiskConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskConfigRequest) SetOperaUid(v string) *DescribeRiskConfigRequest {
	s.OperaUid = &v
	return s
}

type DescribeRiskConfigResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRiskConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskConfigResponseBody) SetCode(v int32) *DescribeRiskConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRiskConfigResponseBody) SetData(v map[string]interface{}) *DescribeRiskConfigResponseBody {
	s.Data = v
	return s
}

func (s *DescribeRiskConfigResponseBody) SetMessage(v string) *DescribeRiskConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRiskConfigResponseBody) SetRequestId(v string) *DescribeRiskConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskConfigResponseBody) SetStatus(v string) *DescribeRiskConfigResponseBody {
	s.Status = &v
	return s
}

type DescribeRiskConfigResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRiskConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRiskConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskConfigResponse) SetHeaders(v map[string]*string) *DescribeRiskConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskConfigResponse) SetStatusCode(v int32) *DescribeRiskConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskConfigResponse) SetBody(v *DescribeRiskConfigResponseBody) *DescribeRiskConfigResponse {
	s.Body = v
	return s
}

type DescribeRiskEventDetailsRequest struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeRiskEventDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskEventDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskEventDetailsRequest) SetPageNumber(v int32) *DescribeRiskEventDetailsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeRiskEventDetailsRequest) SetPageSize(v int32) *DescribeRiskEventDetailsRequest {
	s.PageSize = &v
	return s
}

type DescribeRiskEventDetailsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRiskEventDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskEventDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskEventDetailsResponseBody) SetCode(v int32) *DescribeRiskEventDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRiskEventDetailsResponseBody) SetData(v map[string]interface{}) *DescribeRiskEventDetailsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeRiskEventDetailsResponseBody) SetMessage(v string) *DescribeRiskEventDetailsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRiskEventDetailsResponseBody) SetPageTotal(v int64) *DescribeRiskEventDetailsResponseBody {
	s.PageTotal = &v
	return s
}

func (s *DescribeRiskEventDetailsResponseBody) SetRequestId(v string) *DescribeRiskEventDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskEventDetailsResponseBody) SetStatus(v bool) *DescribeRiskEventDetailsResponseBody {
	s.Status = &v
	return s
}

type DescribeRiskEventDetailsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRiskEventDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRiskEventDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskEventDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskEventDetailsResponse) SetHeaders(v map[string]*string) *DescribeRiskEventDetailsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskEventDetailsResponse) SetStatusCode(v int32) *DescribeRiskEventDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskEventDetailsResponse) SetBody(v *DescribeRiskEventDetailsResponseBody) *DescribeRiskEventDetailsResponse {
	s.Body = v
	return s
}

type DescribeRiskEventListRequest struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeRiskEventListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskEventListRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskEventListRequest) SetPageNumber(v int32) *DescribeRiskEventListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeRiskEventListRequest) SetPageSize(v int32) *DescribeRiskEventListRequest {
	s.PageSize = &v
	return s
}

type DescribeRiskEventListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRiskEventListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskEventListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskEventListResponseBody) SetCode(v int32) *DescribeRiskEventListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRiskEventListResponseBody) SetData(v map[string]interface{}) *DescribeRiskEventListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeRiskEventListResponseBody) SetMessage(v string) *DescribeRiskEventListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRiskEventListResponseBody) SetPageTotal(v int64) *DescribeRiskEventListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *DescribeRiskEventListResponseBody) SetRequestId(v string) *DescribeRiskEventListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskEventListResponseBody) SetStatus(v string) *DescribeRiskEventListResponseBody {
	s.Status = &v
	return s
}

type DescribeRiskEventListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRiskEventListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRiskEventListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskEventListResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskEventListResponse) SetHeaders(v map[string]*string) *DescribeRiskEventListResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskEventListResponse) SetStatusCode(v int32) *DescribeRiskEventListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskEventListResponse) SetBody(v *DescribeRiskEventListResponseBody) *DescribeRiskEventListResponse {
	s.Body = v
	return s
}

type DescribeRiskEventTopologyRequest struct {
	EventId  *int64  `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeRiskEventTopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskEventTopologyRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskEventTopologyRequest) SetEventId(v int64) *DescribeRiskEventTopologyRequest {
	s.EventId = &v
	return s
}

func (s *DescribeRiskEventTopologyRequest) SetOperaUid(v string) *DescribeRiskEventTopologyRequest {
	s.OperaUid = &v
	return s
}

type DescribeRiskEventTopologyResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRiskEventTopologyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskEventTopologyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskEventTopologyResponseBody) SetCode(v int32) *DescribeRiskEventTopologyResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRiskEventTopologyResponseBody) SetData(v map[string]interface{}) *DescribeRiskEventTopologyResponseBody {
	s.Data = v
	return s
}

func (s *DescribeRiskEventTopologyResponseBody) SetMessage(v string) *DescribeRiskEventTopologyResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRiskEventTopologyResponseBody) SetRequestId(v string) *DescribeRiskEventTopologyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskEventTopologyResponseBody) SetStatus(v string) *DescribeRiskEventTopologyResponseBody {
	s.Status = &v
	return s
}

type DescribeRiskEventTopologyResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRiskEventTopologyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRiskEventTopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskEventTopologyResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskEventTopologyResponse) SetHeaders(v map[string]*string) *DescribeRiskEventTopologyResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskEventTopologyResponse) SetStatusCode(v int32) *DescribeRiskEventTopologyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskEventTopologyResponse) SetBody(v *DescribeRiskEventTopologyResponseBody) *DescribeRiskEventTopologyResponse {
	s.Body = v
	return s
}

type DescribeRiskResultSeveritySummaryRequest struct {
	ContinuousDays *int32  `json:"ContinuousDays,omitempty" xml:"ContinuousDays,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode    *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s DescribeRiskResultSeveritySummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskResultSeveritySummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskResultSeveritySummaryRequest) SetContinuousDays(v int32) *DescribeRiskResultSeveritySummaryRequest {
	s.ContinuousDays = &v
	return s
}

func (s *DescribeRiskResultSeveritySummaryRequest) SetOperaUid(v string) *DescribeRiskResultSeveritySummaryRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeRiskResultSeveritySummaryRequest) SetProductCode(v string) *DescribeRiskResultSeveritySummaryRequest {
	s.ProductCode = &v
	return s
}

type DescribeRiskResultSeveritySummaryResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRiskResultSeveritySummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskResultSeveritySummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskResultSeveritySummaryResponseBody) SetCode(v int32) *DescribeRiskResultSeveritySummaryResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRiskResultSeveritySummaryResponseBody) SetData(v map[string]interface{}) *DescribeRiskResultSeveritySummaryResponseBody {
	s.Data = v
	return s
}

func (s *DescribeRiskResultSeveritySummaryResponseBody) SetMessage(v string) *DescribeRiskResultSeveritySummaryResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRiskResultSeveritySummaryResponseBody) SetRequestId(v string) *DescribeRiskResultSeveritySummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskResultSeveritySummaryResponseBody) SetStatus(v string) *DescribeRiskResultSeveritySummaryResponseBody {
	s.Status = &v
	return s
}

type DescribeRiskResultSeveritySummaryResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRiskResultSeveritySummaryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRiskResultSeveritySummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskResultSeveritySummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskResultSeveritySummaryResponse) SetHeaders(v map[string]*string) *DescribeRiskResultSeveritySummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskResultSeveritySummaryResponse) SetStatusCode(v int32) *DescribeRiskResultSeveritySummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskResultSeveritySummaryResponse) SetBody(v *DescribeRiskResultSeveritySummaryResponseBody) *DescribeRiskResultSeveritySummaryResponse {
	s.Body = v
	return s
}

type DescribeRiskResultStatisticalRequest struct {
	ContinuousDays *int32  `json:"ContinuousDays,omitempty" xml:"ContinuousDays,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode    *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s DescribeRiskResultStatisticalRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskResultStatisticalRequest) GoString() string {
	return s.String()
}

func (s *DescribeRiskResultStatisticalRequest) SetContinuousDays(v int32) *DescribeRiskResultStatisticalRequest {
	s.ContinuousDays = &v
	return s
}

func (s *DescribeRiskResultStatisticalRequest) SetOperaUid(v string) *DescribeRiskResultStatisticalRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeRiskResultStatisticalRequest) SetProductCode(v string) *DescribeRiskResultStatisticalRequest {
	s.ProductCode = &v
	return s
}

type DescribeRiskResultStatisticalResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeRiskResultStatisticalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskResultStatisticalResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRiskResultStatisticalResponseBody) SetCode(v int32) *DescribeRiskResultStatisticalResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeRiskResultStatisticalResponseBody) SetData(v map[string]interface{}) *DescribeRiskResultStatisticalResponseBody {
	s.Data = v
	return s
}

func (s *DescribeRiskResultStatisticalResponseBody) SetMessage(v string) *DescribeRiskResultStatisticalResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeRiskResultStatisticalResponseBody) SetRequestId(v string) *DescribeRiskResultStatisticalResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRiskResultStatisticalResponseBody) SetStatus(v string) *DescribeRiskResultStatisticalResponseBody {
	s.Status = &v
	return s
}

type DescribeRiskResultStatisticalResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRiskResultStatisticalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRiskResultStatisticalResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRiskResultStatisticalResponse) GoString() string {
	return s.String()
}

func (s *DescribeRiskResultStatisticalResponse) SetHeaders(v map[string]*string) *DescribeRiskResultStatisticalResponse {
	s.Headers = v
	return s
}

func (s *DescribeRiskResultStatisticalResponse) SetStatusCode(v int32) *DescribeRiskResultStatisticalResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRiskResultStatisticalResponse) SetBody(v *DescribeRiskResultStatisticalResponseBody) *DescribeRiskResultStatisticalResponse {
	s.Body = v
	return s
}

type DescribeSceneDetailRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SceneId  *int64  `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s DescribeSceneDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeSceneDetailRequest) SetOperaUid(v string) *DescribeSceneDetailRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeSceneDetailRequest) SetSceneId(v int64) *DescribeSceneDetailRequest {
	s.SceneId = &v
	return s
}

type DescribeSceneDetailResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSceneDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSceneDetailResponseBody) SetCode(v int32) *DescribeSceneDetailResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSceneDetailResponseBody) SetData(v map[string]interface{}) *DescribeSceneDetailResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSceneDetailResponseBody) SetMessage(v string) *DescribeSceneDetailResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSceneDetailResponseBody) SetRequestId(v string) *DescribeSceneDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSceneDetailResponseBody) SetStatus(v string) *DescribeSceneDetailResponseBody {
	s.Status = &v
	return s
}

type DescribeSceneDetailResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSceneDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSceneDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeSceneDetailResponse) SetHeaders(v map[string]*string) *DescribeSceneDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeSceneDetailResponse) SetStatusCode(v int32) *DescribeSceneDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSceneDetailResponse) SetBody(v *DescribeSceneDetailResponseBody) *DescribeSceneDetailResponse {
	s.Body = v
	return s
}

type DescribeSceneModelByTypeRequest struct {
	ModelType *int32  `json:"ModelType,omitempty" xml:"ModelType,omitempty"`
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeSceneModelByTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelByTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelByTypeRequest) SetModelType(v int32) *DescribeSceneModelByTypeRequest {
	s.ModelType = &v
	return s
}

func (s *DescribeSceneModelByTypeRequest) SetOperaUid(v string) *DescribeSceneModelByTypeRequest {
	s.OperaUid = &v
	return s
}

type DescribeSceneModelByTypeResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSceneModelByTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelByTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelByTypeResponseBody) SetCode(v int32) *DescribeSceneModelByTypeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSceneModelByTypeResponseBody) SetData(v map[string]interface{}) *DescribeSceneModelByTypeResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSceneModelByTypeResponseBody) SetMessage(v string) *DescribeSceneModelByTypeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSceneModelByTypeResponseBody) SetRequestId(v string) *DescribeSceneModelByTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSceneModelByTypeResponseBody) SetStatus(v string) *DescribeSceneModelByTypeResponseBody {
	s.Status = &v
	return s
}

type DescribeSceneModelByTypeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSceneModelByTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSceneModelByTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelByTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelByTypeResponse) SetHeaders(v map[string]*string) *DescribeSceneModelByTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeSceneModelByTypeResponse) SetStatusCode(v int32) *DescribeSceneModelByTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSceneModelByTypeResponse) SetBody(v *DescribeSceneModelByTypeResponseBody) *DescribeSceneModelByTypeResponse {
	s.Body = v
	return s
}

type DescribeSceneModelDetailRequest struct {
	ModelId  *int64  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeSceneModelDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelDetailRequest) SetModelId(v int64) *DescribeSceneModelDetailRequest {
	s.ModelId = &v
	return s
}

func (s *DescribeSceneModelDetailRequest) SetOperaUid(v string) *DescribeSceneModelDetailRequest {
	s.OperaUid = &v
	return s
}

type DescribeSceneModelDetailResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSceneModelDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelDetailResponseBody) SetCode(v int32) *DescribeSceneModelDetailResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSceneModelDetailResponseBody) SetData(v map[string]interface{}) *DescribeSceneModelDetailResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSceneModelDetailResponseBody) SetMessage(v string) *DescribeSceneModelDetailResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSceneModelDetailResponseBody) SetRequestId(v string) *DescribeSceneModelDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSceneModelDetailResponseBody) SetStatus(v string) *DescribeSceneModelDetailResponseBody {
	s.Status = &v
	return s
}

type DescribeSceneModelDetailResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSceneModelDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSceneModelDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelDetailResponse) SetHeaders(v map[string]*string) *DescribeSceneModelDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeSceneModelDetailResponse) SetStatusCode(v int32) *DescribeSceneModelDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSceneModelDetailResponse) SetBody(v *DescribeSceneModelDetailResponseBody) *DescribeSceneModelDetailResponse {
	s.Body = v
	return s
}

type DescribeSceneModelVersionHistoryRequest struct {
	ModelId  *int64  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeSceneModelVersionHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelVersionHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelVersionHistoryRequest) SetModelId(v int64) *DescribeSceneModelVersionHistoryRequest {
	s.ModelId = &v
	return s
}

func (s *DescribeSceneModelVersionHistoryRequest) SetOperaUid(v string) *DescribeSceneModelVersionHistoryRequest {
	s.OperaUid = &v
	return s
}

type DescribeSceneModelVersionHistoryResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSceneModelVersionHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelVersionHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelVersionHistoryResponseBody) SetCode(v int32) *DescribeSceneModelVersionHistoryResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSceneModelVersionHistoryResponseBody) SetData(v map[string]interface{}) *DescribeSceneModelVersionHistoryResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSceneModelVersionHistoryResponseBody) SetMessage(v string) *DescribeSceneModelVersionHistoryResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSceneModelVersionHistoryResponseBody) SetRequestId(v string) *DescribeSceneModelVersionHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSceneModelVersionHistoryResponseBody) SetStatus(v string) *DescribeSceneModelVersionHistoryResponseBody {
	s.Status = &v
	return s
}

type DescribeSceneModelVersionHistoryResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSceneModelVersionHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSceneModelVersionHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelVersionHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelVersionHistoryResponse) SetHeaders(v map[string]*string) *DescribeSceneModelVersionHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeSceneModelVersionHistoryResponse) SetStatusCode(v int32) *DescribeSceneModelVersionHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSceneModelVersionHistoryResponse) SetBody(v *DescribeSceneModelVersionHistoryResponseBody) *DescribeSceneModelVersionHistoryResponse {
	s.Body = v
	return s
}

type DescribeSceneModelsRequest struct {
	ApplyStatus *int32  `json:"ApplyStatus,omitempty" xml:"ApplyStatus,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ModelName   *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	ModelType   *int32  `json:"ModelType,omitempty" xml:"ModelType,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeSceneModelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelsRequest) SetApplyStatus(v int32) *DescribeSceneModelsRequest {
	s.ApplyStatus = &v
	return s
}

func (s *DescribeSceneModelsRequest) SetCurrentPage(v int32) *DescribeSceneModelsRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSceneModelsRequest) SetModelName(v string) *DescribeSceneModelsRequest {
	s.ModelName = &v
	return s
}

func (s *DescribeSceneModelsRequest) SetModelType(v int32) *DescribeSceneModelsRequest {
	s.ModelType = &v
	return s
}

func (s *DescribeSceneModelsRequest) SetOperaUid(v string) *DescribeSceneModelsRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeSceneModelsRequest) SetPageSize(v int32) *DescribeSceneModelsRequest {
	s.PageSize = &v
	return s
}

type DescribeSceneModelsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
	Total     *int64                 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeSceneModelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelsResponseBody) SetCode(v int32) *DescribeSceneModelsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSceneModelsResponseBody) SetData(v map[string]interface{}) *DescribeSceneModelsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSceneModelsResponseBody) SetMessage(v string) *DescribeSceneModelsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSceneModelsResponseBody) SetRequestId(v string) *DescribeSceneModelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSceneModelsResponseBody) SetStatus(v string) *DescribeSceneModelsResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeSceneModelsResponseBody) SetTotal(v int64) *DescribeSceneModelsResponseBody {
	s.Total = &v
	return s
}

type DescribeSceneModelsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSceneModelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSceneModelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneModelsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSceneModelsResponse) SetHeaders(v map[string]*string) *DescribeSceneModelsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSceneModelsResponse) SetStatusCode(v int32) *DescribeSceneModelsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSceneModelsResponse) SetBody(v *DescribeSceneModelsResponseBody) *DescribeSceneModelsResponse {
	s.Body = v
	return s
}

type DescribeSceneSystemModelRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	ModelName   *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	ModelStatus *int32  `json:"ModelStatus,omitempty" xml:"ModelStatus,omitempty"`
	ModelType   *int32  `json:"ModelType,omitempty" xml:"ModelType,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TypeId      *int64  `json:"TypeId,omitempty" xml:"TypeId,omitempty"`
}

func (s DescribeSceneSystemModelRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneSystemModelRequest) GoString() string {
	return s.String()
}

func (s *DescribeSceneSystemModelRequest) SetCurrentPage(v int32) *DescribeSceneSystemModelRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeSceneSystemModelRequest) SetModelName(v string) *DescribeSceneSystemModelRequest {
	s.ModelName = &v
	return s
}

func (s *DescribeSceneSystemModelRequest) SetModelStatus(v int32) *DescribeSceneSystemModelRequest {
	s.ModelStatus = &v
	return s
}

func (s *DescribeSceneSystemModelRequest) SetModelType(v int32) *DescribeSceneSystemModelRequest {
	s.ModelType = &v
	return s
}

func (s *DescribeSceneSystemModelRequest) SetOperaUid(v string) *DescribeSceneSystemModelRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeSceneSystemModelRequest) SetPageSize(v int32) *DescribeSceneSystemModelRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSceneSystemModelRequest) SetTypeId(v int64) *DescribeSceneSystemModelRequest {
	s.TypeId = &v
	return s
}

type DescribeSceneSystemModelResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
	Total     *int64                 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeSceneSystemModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneSystemModelResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSceneSystemModelResponseBody) SetCode(v int32) *DescribeSceneSystemModelResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSceneSystemModelResponseBody) SetData(v map[string]interface{}) *DescribeSceneSystemModelResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSceneSystemModelResponseBody) SetMessage(v string) *DescribeSceneSystemModelResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSceneSystemModelResponseBody) SetRequestId(v string) *DescribeSceneSystemModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSceneSystemModelResponseBody) SetStatus(v string) *DescribeSceneSystemModelResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeSceneSystemModelResponseBody) SetTotal(v int64) *DescribeSceneSystemModelResponseBody {
	s.Total = &v
	return s
}

type DescribeSceneSystemModelResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSceneSystemModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSceneSystemModelResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSceneSystemModelResponse) GoString() string {
	return s.String()
}

func (s *DescribeSceneSystemModelResponse) SetHeaders(v map[string]*string) *DescribeSceneSystemModelResponse {
	s.Headers = v
	return s
}

func (s *DescribeSceneSystemModelResponse) SetStatusCode(v int32) *DescribeSceneSystemModelResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSceneSystemModelResponse) SetBody(v *DescribeSceneSystemModelResponseBody) *DescribeSceneSystemModelResponse {
	s.Body = v
	return s
}

type DescribeScenesRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	FlowName    *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	ModelId     *int64  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SceneName   *string `json:"SceneName,omitempty" xml:"SceneName,omitempty"`
	SceneStatus *int32  `json:"SceneStatus,omitempty" xml:"SceneStatus,omitempty"`
}

func (s DescribeScenesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenesRequest) GoString() string {
	return s.String()
}

func (s *DescribeScenesRequest) SetCurrentPage(v int32) *DescribeScenesRequest {
	s.CurrentPage = &v
	return s
}

func (s *DescribeScenesRequest) SetFlowName(v string) *DescribeScenesRequest {
	s.FlowName = &v
	return s
}

func (s *DescribeScenesRequest) SetModelId(v int64) *DescribeScenesRequest {
	s.ModelId = &v
	return s
}

func (s *DescribeScenesRequest) SetOperaUid(v string) *DescribeScenesRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeScenesRequest) SetPageSize(v int32) *DescribeScenesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeScenesRequest) SetSceneName(v string) *DescribeScenesRequest {
	s.SceneName = &v
	return s
}

func (s *DescribeScenesRequest) SetSceneStatus(v int32) *DescribeScenesRequest {
	s.SceneStatus = &v
	return s
}

type DescribeScenesResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
	Total     *int64                 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeScenesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScenesResponseBody) SetCode(v int32) *DescribeScenesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeScenesResponseBody) SetData(v map[string]interface{}) *DescribeScenesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeScenesResponseBody) SetMessage(v string) *DescribeScenesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeScenesResponseBody) SetRequestId(v string) *DescribeScenesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScenesResponseBody) SetStatus(v string) *DescribeScenesResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeScenesResponseBody) SetTotal(v int64) *DescribeScenesResponseBody {
	s.Total = &v
	return s
}

type DescribeScenesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeScenesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeScenesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScenesResponse) GoString() string {
	return s.String()
}

func (s *DescribeScenesResponse) SetHeaders(v map[string]*string) *DescribeScenesResponse {
	s.Headers = v
	return s
}

func (s *DescribeScenesResponse) SetStatusCode(v int32) *DescribeScenesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeScenesResponse) SetBody(v *DescribeScenesResponseBody) *DescribeScenesResponse {
	s.Body = v
	return s
}

type DescribeStatisticalDataByProductRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeStatisticalDataByProductRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStatisticalDataByProductRequest) GoString() string {
	return s.String()
}

func (s *DescribeStatisticalDataByProductRequest) SetOperaUid(v string) *DescribeStatisticalDataByProductRequest {
	s.OperaUid = &v
	return s
}

type DescribeStatisticalDataByProductResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeStatisticalDataByProductResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStatisticalDataByProductResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStatisticalDataByProductResponseBody) SetCode(v int32) *DescribeStatisticalDataByProductResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeStatisticalDataByProductResponseBody) SetData(v map[string]interface{}) *DescribeStatisticalDataByProductResponseBody {
	s.Data = v
	return s
}

func (s *DescribeStatisticalDataByProductResponseBody) SetMessage(v string) *DescribeStatisticalDataByProductResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeStatisticalDataByProductResponseBody) SetRequestId(v string) *DescribeStatisticalDataByProductResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStatisticalDataByProductResponseBody) SetStatus(v string) *DescribeStatisticalDataByProductResponseBody {
	s.Status = &v
	return s
}

type DescribeStatisticalDataByProductResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStatisticalDataByProductResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStatisticalDataByProductResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStatisticalDataByProductResponse) GoString() string {
	return s.String()
}

func (s *DescribeStatisticalDataByProductResponse) SetHeaders(v map[string]*string) *DescribeStatisticalDataByProductResponse {
	s.Headers = v
	return s
}

func (s *DescribeStatisticalDataByProductResponse) SetStatusCode(v int32) *DescribeStatisticalDataByProductResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStatisticalDataByProductResponse) SetBody(v *DescribeStatisticalDataByProductResponseBody) *DescribeStatisticalDataByProductResponse {
	s.Body = v
	return s
}

type DescribeStatisticalDataByRiskCodeRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s DescribeStatisticalDataByRiskCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStatisticalDataByRiskCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeStatisticalDataByRiskCodeRequest) SetOperaUid(v string) *DescribeStatisticalDataByRiskCodeRequest {
	s.OperaUid = &v
	return s
}

type DescribeStatisticalDataByRiskCodeResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeStatisticalDataByRiskCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStatisticalDataByRiskCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStatisticalDataByRiskCodeResponseBody) SetCode(v int32) *DescribeStatisticalDataByRiskCodeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeStatisticalDataByRiskCodeResponseBody) SetData(v map[string]interface{}) *DescribeStatisticalDataByRiskCodeResponseBody {
	s.Data = v
	return s
}

func (s *DescribeStatisticalDataByRiskCodeResponseBody) SetMessage(v string) *DescribeStatisticalDataByRiskCodeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeStatisticalDataByRiskCodeResponseBody) SetRequestId(v string) *DescribeStatisticalDataByRiskCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStatisticalDataByRiskCodeResponseBody) SetStatus(v string) *DescribeStatisticalDataByRiskCodeResponseBody {
	s.Status = &v
	return s
}

type DescribeStatisticalDataByRiskCodeResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStatisticalDataByRiskCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStatisticalDataByRiskCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStatisticalDataByRiskCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeStatisticalDataByRiskCodeResponse) SetHeaders(v map[string]*string) *DescribeStatisticalDataByRiskCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeStatisticalDataByRiskCodeResponse) SetStatusCode(v int32) *DescribeStatisticalDataByRiskCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStatisticalDataByRiskCodeResponse) SetBody(v *DescribeStatisticalDataByRiskCodeResponseBody) *DescribeStatisticalDataByRiskCodeResponse {
	s.Body = v
	return s
}

type DescribeWhitelistResourcesRequest struct {
	Keyword     *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s DescribeWhitelistResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeWhitelistResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeWhitelistResourcesRequest) SetKeyword(v string) *DescribeWhitelistResourcesRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeWhitelistResourcesRequest) SetOperaUid(v string) *DescribeWhitelistResourcesRequest {
	s.OperaUid = &v
	return s
}

func (s *DescribeWhitelistResourcesRequest) SetProductCode(v string) *DescribeWhitelistResourcesRequest {
	s.ProductCode = &v
	return s
}

type DescribeWhitelistResourcesResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeWhitelistResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeWhitelistResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeWhitelistResourcesResponseBody) SetCode(v int32) *DescribeWhitelistResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeWhitelistResourcesResponseBody) SetData(v map[string]interface{}) *DescribeWhitelistResourcesResponseBody {
	s.Data = v
	return s
}

func (s *DescribeWhitelistResourcesResponseBody) SetMessage(v string) *DescribeWhitelistResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeWhitelistResourcesResponseBody) SetRequestId(v string) *DescribeWhitelistResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeWhitelistResourcesResponseBody) SetStatus(v string) *DescribeWhitelistResourcesResponseBody {
	s.Status = &v
	return s
}

type DescribeWhitelistResourcesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeWhitelistResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeWhitelistResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeWhitelistResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeWhitelistResourcesResponse) SetHeaders(v map[string]*string) *DescribeWhitelistResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeWhitelistResourcesResponse) SetStatusCode(v int32) *DescribeWhitelistResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeWhitelistResourcesResponse) SetBody(v *DescribeWhitelistResourcesResponseBody) *DescribeWhitelistResourcesResponse {
	s.Body = v
	return s
}

type EndScriptListRequest struct {
	Id       *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s EndScriptListRequest) String() string {
	return tea.Prettify(s)
}

func (s EndScriptListRequest) GoString() string {
	return s.String()
}

func (s *EndScriptListRequest) SetId(v string) *EndScriptListRequest {
	s.Id = &v
	return s
}

func (s *EndScriptListRequest) SetOperaUid(v string) *EndScriptListRequest {
	s.OperaUid = &v
	return s
}

type EndScriptListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s EndScriptListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EndScriptListResponseBody) GoString() string {
	return s.String()
}

func (s *EndScriptListResponseBody) SetCode(v int32) *EndScriptListResponseBody {
	s.Code = &v
	return s
}

func (s *EndScriptListResponseBody) SetData(v map[string]interface{}) *EndScriptListResponseBody {
	s.Data = v
	return s
}

func (s *EndScriptListResponseBody) SetMsg(v string) *EndScriptListResponseBody {
	s.Msg = &v
	return s
}

func (s *EndScriptListResponseBody) SetRequestId(v string) *EndScriptListResponseBody {
	s.RequestId = &v
	return s
}

func (s *EndScriptListResponseBody) SetStatus(v string) *EndScriptListResponseBody {
	s.Status = &v
	return s
}

type EndScriptListResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EndScriptListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EndScriptListResponse) String() string {
	return tea.Prettify(s)
}

func (s EndScriptListResponse) GoString() string {
	return s.String()
}

func (s *EndScriptListResponse) SetHeaders(v map[string]*string) *EndScriptListResponse {
	s.Headers = v
	return s
}

func (s *EndScriptListResponse) SetStatusCode(v int32) *EndScriptListResponse {
	s.StatusCode = &v
	return s
}

func (s *EndScriptListResponse) SetBody(v *EndScriptListResponseBody) *EndScriptListResponse {
	s.Body = v
	return s
}

type FeedbackAlertAlgorithmRequest struct {
	AlertId                   *int64  `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	AlgorithmAccurateDescribe *string `json:"AlgorithmAccurateDescribe,omitempty" xml:"AlgorithmAccurateDescribe,omitempty"`
	AlgorithmAccurateState    *int32  `json:"AlgorithmAccurateState,omitempty" xml:"AlgorithmAccurateState,omitempty"`
	FeedbackType              *int32  `json:"FeedbackType,omitempty" xml:"FeedbackType,omitempty"`
	OperaUid                  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s FeedbackAlertAlgorithmRequest) String() string {
	return tea.Prettify(s)
}

func (s FeedbackAlertAlgorithmRequest) GoString() string {
	return s.String()
}

func (s *FeedbackAlertAlgorithmRequest) SetAlertId(v int64) *FeedbackAlertAlgorithmRequest {
	s.AlertId = &v
	return s
}

func (s *FeedbackAlertAlgorithmRequest) SetAlgorithmAccurateDescribe(v string) *FeedbackAlertAlgorithmRequest {
	s.AlgorithmAccurateDescribe = &v
	return s
}

func (s *FeedbackAlertAlgorithmRequest) SetAlgorithmAccurateState(v int32) *FeedbackAlertAlgorithmRequest {
	s.AlgorithmAccurateState = &v
	return s
}

func (s *FeedbackAlertAlgorithmRequest) SetFeedbackType(v int32) *FeedbackAlertAlgorithmRequest {
	s.FeedbackType = &v
	return s
}

func (s *FeedbackAlertAlgorithmRequest) SetOperaUid(v string) *FeedbackAlertAlgorithmRequest {
	s.OperaUid = &v
	return s
}

type FeedbackAlertAlgorithmResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s FeedbackAlertAlgorithmResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FeedbackAlertAlgorithmResponseBody) GoString() string {
	return s.String()
}

func (s *FeedbackAlertAlgorithmResponseBody) SetCode(v int32) *FeedbackAlertAlgorithmResponseBody {
	s.Code = &v
	return s
}

func (s *FeedbackAlertAlgorithmResponseBody) SetData(v map[string]interface{}) *FeedbackAlertAlgorithmResponseBody {
	s.Data = v
	return s
}

func (s *FeedbackAlertAlgorithmResponseBody) SetMsg(v string) *FeedbackAlertAlgorithmResponseBody {
	s.Msg = &v
	return s
}

func (s *FeedbackAlertAlgorithmResponseBody) SetRequestId(v string) *FeedbackAlertAlgorithmResponseBody {
	s.RequestId = &v
	return s
}

func (s *FeedbackAlertAlgorithmResponseBody) SetStatus(v string) *FeedbackAlertAlgorithmResponseBody {
	s.Status = &v
	return s
}

type FeedbackAlertAlgorithmResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *FeedbackAlertAlgorithmResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s FeedbackAlertAlgorithmResponse) String() string {
	return tea.Prettify(s)
}

func (s FeedbackAlertAlgorithmResponse) GoString() string {
	return s.String()
}

func (s *FeedbackAlertAlgorithmResponse) SetHeaders(v map[string]*string) *FeedbackAlertAlgorithmResponse {
	s.Headers = v
	return s
}

func (s *FeedbackAlertAlgorithmResponse) SetStatusCode(v int32) *FeedbackAlertAlgorithmResponse {
	s.StatusCode = &v
	return s
}

func (s *FeedbackAlertAlgorithmResponse) SetBody(v *FeedbackAlertAlgorithmResponseBody) *FeedbackAlertAlgorithmResponse {
	s.Body = v
	return s
}

type GetAiopsEventListRequest struct {
	BusinessGroupId   *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	BusinessGroupName *string `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
	CurrentPage       *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	EventType         *int32  `json:"EventType,omitempty" xml:"EventType,omitempty"`
	EventUniqueId     *string `json:"EventUniqueId,omitempty" xml:"EventUniqueId,omitempty"`
	FeedbackStatus    *int32  `json:"FeedbackStatus,omitempty" xml:"FeedbackStatus,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PredictionState   *int32  `json:"PredictionState,omitempty" xml:"PredictionState,omitempty"`
	Severity          *int32  `json:"Severity,omitempty" xml:"Severity,omitempty"`
	Status            *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Uid               *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetAiopsEventListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAiopsEventListRequest) GoString() string {
	return s.String()
}

func (s *GetAiopsEventListRequest) SetBusinessGroupId(v string) *GetAiopsEventListRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetAiopsEventListRequest) SetBusinessGroupName(v string) *GetAiopsEventListRequest {
	s.BusinessGroupName = &v
	return s
}

func (s *GetAiopsEventListRequest) SetCurrentPage(v int32) *GetAiopsEventListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetAiopsEventListRequest) SetEventType(v int32) *GetAiopsEventListRequest {
	s.EventType = &v
	return s
}

func (s *GetAiopsEventListRequest) SetEventUniqueId(v string) *GetAiopsEventListRequest {
	s.EventUniqueId = &v
	return s
}

func (s *GetAiopsEventListRequest) SetFeedbackStatus(v int32) *GetAiopsEventListRequest {
	s.FeedbackStatus = &v
	return s
}

func (s *GetAiopsEventListRequest) SetName(v string) *GetAiopsEventListRequest {
	s.Name = &v
	return s
}

func (s *GetAiopsEventListRequest) SetOperaUid(v string) *GetAiopsEventListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetAiopsEventListRequest) SetPageSize(v int32) *GetAiopsEventListRequest {
	s.PageSize = &v
	return s
}

func (s *GetAiopsEventListRequest) SetPredictionState(v int32) *GetAiopsEventListRequest {
	s.PredictionState = &v
	return s
}

func (s *GetAiopsEventListRequest) SetSeverity(v int32) *GetAiopsEventListRequest {
	s.Severity = &v
	return s
}

func (s *GetAiopsEventListRequest) SetStatus(v int32) *GetAiopsEventListRequest {
	s.Status = &v
	return s
}

func (s *GetAiopsEventListRequest) SetUid(v int64) *GetAiopsEventListRequest {
	s.Uid = &v
	return s
}

type GetAiopsEventListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int32                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAiopsEventListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAiopsEventListResponseBody) GoString() string {
	return s.String()
}

func (s *GetAiopsEventListResponseBody) SetCode(v int32) *GetAiopsEventListResponseBody {
	s.Code = &v
	return s
}

func (s *GetAiopsEventListResponseBody) SetData(v map[string]interface{}) *GetAiopsEventListResponseBody {
	s.Data = v
	return s
}

func (s *GetAiopsEventListResponseBody) SetMsg(v string) *GetAiopsEventListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAiopsEventListResponseBody) SetPageTotal(v int32) *GetAiopsEventListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetAiopsEventListResponseBody) SetRequestId(v string) *GetAiopsEventListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAiopsEventListResponseBody) SetStatus(v string) *GetAiopsEventListResponseBody {
	s.Status = &v
	return s
}

type GetAiopsEventListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAiopsEventListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAiopsEventListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAiopsEventListResponse) GoString() string {
	return s.String()
}

func (s *GetAiopsEventListResponse) SetHeaders(v map[string]*string) *GetAiopsEventListResponse {
	s.Headers = v
	return s
}

func (s *GetAiopsEventListResponse) SetStatusCode(v int32) *GetAiopsEventListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAiopsEventListResponse) SetBody(v *GetAiopsEventListResponseBody) *GetAiopsEventListResponse {
	s.Body = v
	return s
}

type GetAiopsEventNewListRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Uid         *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetAiopsEventNewListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAiopsEventNewListRequest) GoString() string {
	return s.String()
}

func (s *GetAiopsEventNewListRequest) SetCurrentPage(v int32) *GetAiopsEventNewListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetAiopsEventNewListRequest) SetOperaUid(v string) *GetAiopsEventNewListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetAiopsEventNewListRequest) SetPageSize(v int32) *GetAiopsEventNewListRequest {
	s.PageSize = &v
	return s
}

func (s *GetAiopsEventNewListRequest) SetUid(v int64) *GetAiopsEventNewListRequest {
	s.Uid = &v
	return s
}

type GetAiopsEventNewListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAiopsEventNewListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAiopsEventNewListResponseBody) GoString() string {
	return s.String()
}

func (s *GetAiopsEventNewListResponseBody) SetCode(v int32) *GetAiopsEventNewListResponseBody {
	s.Code = &v
	return s
}

func (s *GetAiopsEventNewListResponseBody) SetData(v map[string]interface{}) *GetAiopsEventNewListResponseBody {
	s.Data = v
	return s
}

func (s *GetAiopsEventNewListResponseBody) SetMsg(v string) *GetAiopsEventNewListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAiopsEventNewListResponseBody) SetPageTotal(v int64) *GetAiopsEventNewListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetAiopsEventNewListResponseBody) SetRequestId(v string) *GetAiopsEventNewListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAiopsEventNewListResponseBody) SetStatus(v string) *GetAiopsEventNewListResponseBody {
	s.Status = &v
	return s
}

type GetAiopsEventNewListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAiopsEventNewListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAiopsEventNewListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAiopsEventNewListResponse) GoString() string {
	return s.String()
}

func (s *GetAiopsEventNewListResponse) SetHeaders(v map[string]*string) *GetAiopsEventNewListResponse {
	s.Headers = v
	return s
}

func (s *GetAiopsEventNewListResponse) SetStatusCode(v int32) *GetAiopsEventNewListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAiopsEventNewListResponse) SetBody(v *GetAiopsEventNewListResponseBody) *GetAiopsEventNewListResponse {
	s.Body = v
	return s
}

type GetAlertDetailTrendDataRequest struct {
	AbnormalId *int64  `json:"AbnormalId,omitempty" xml:"AbnormalId,omitempty"`
	AlertId    *int64  `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	BeginTime  *int64  `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime    *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OperaUid   *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetAlertDetailTrendDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlertDetailTrendDataRequest) GoString() string {
	return s.String()
}

func (s *GetAlertDetailTrendDataRequest) SetAbnormalId(v int64) *GetAlertDetailTrendDataRequest {
	s.AbnormalId = &v
	return s
}

func (s *GetAlertDetailTrendDataRequest) SetAlertId(v int64) *GetAlertDetailTrendDataRequest {
	s.AlertId = &v
	return s
}

func (s *GetAlertDetailTrendDataRequest) SetBeginTime(v int64) *GetAlertDetailTrendDataRequest {
	s.BeginTime = &v
	return s
}

func (s *GetAlertDetailTrendDataRequest) SetEndTime(v int64) *GetAlertDetailTrendDataRequest {
	s.EndTime = &v
	return s
}

func (s *GetAlertDetailTrendDataRequest) SetOperaUid(v string) *GetAlertDetailTrendDataRequest {
	s.OperaUid = &v
	return s
}

type GetAlertDetailTrendDataResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAlertDetailTrendDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlertDetailTrendDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlertDetailTrendDataResponseBody) SetCode(v int32) *GetAlertDetailTrendDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetAlertDetailTrendDataResponseBody) SetData(v map[string]interface{}) *GetAlertDetailTrendDataResponseBody {
	s.Data = v
	return s
}

func (s *GetAlertDetailTrendDataResponseBody) SetMsg(v string) *GetAlertDetailTrendDataResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAlertDetailTrendDataResponseBody) SetPageTotal(v int64) *GetAlertDetailTrendDataResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetAlertDetailTrendDataResponseBody) SetRequestId(v string) *GetAlertDetailTrendDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAlertDetailTrendDataResponseBody) SetStatus(v string) *GetAlertDetailTrendDataResponseBody {
	s.Status = &v
	return s
}

type GetAlertDetailTrendDataResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlertDetailTrendDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlertDetailTrendDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlertDetailTrendDataResponse) GoString() string {
	return s.String()
}

func (s *GetAlertDetailTrendDataResponse) SetHeaders(v map[string]*string) *GetAlertDetailTrendDataResponse {
	s.Headers = v
	return s
}

func (s *GetAlertDetailTrendDataResponse) SetStatusCode(v int32) *GetAlertDetailTrendDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlertDetailTrendDataResponse) SetBody(v *GetAlertDetailTrendDataResponseBody) *GetAlertDetailTrendDataResponse {
	s.Body = v
	return s
}

type GetAlertListRequest struct {
	AliUid   *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetAlertListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlertListRequest) GoString() string {
	return s.String()
}

func (s *GetAlertListRequest) SetAliUid(v string) *GetAlertListRequest {
	s.AliUid = &v
	return s
}

func (s *GetAlertListRequest) SetEventId(v string) *GetAlertListRequest {
	s.EventId = &v
	return s
}

func (s *GetAlertListRequest) SetOperaUid(v string) *GetAlertListRequest {
	s.OperaUid = &v
	return s
}

type GetAlertListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	PageTotal *int32                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAlertListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlertListResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlertListResponseBody) SetCode(v int32) *GetAlertListResponseBody {
	s.Code = &v
	return s
}

func (s *GetAlertListResponseBody) SetData(v map[string]interface{}) *GetAlertListResponseBody {
	s.Data = v
	return s
}

func (s *GetAlertListResponseBody) SetMessage(v string) *GetAlertListResponseBody {
	s.Message = &v
	return s
}

func (s *GetAlertListResponseBody) SetPageTotal(v int32) *GetAlertListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetAlertListResponseBody) SetRequestId(v string) *GetAlertListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAlertListResponseBody) SetStatus(v string) *GetAlertListResponseBody {
	s.Status = &v
	return s
}

type GetAlertListResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlertListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlertListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlertListResponse) GoString() string {
	return s.String()
}

func (s *GetAlertListResponse) SetHeaders(v map[string]*string) *GetAlertListResponse {
	s.Headers = v
	return s
}

func (s *GetAlertListResponse) SetStatusCode(v int32) *GetAlertListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlertListResponse) SetBody(v *GetAlertListResponseBody) *GetAlertListResponse {
	s.Body = v
	return s
}

type GetAlertTrentRequest struct {
	AliUid   *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetAlertTrentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlertTrentRequest) GoString() string {
	return s.String()
}

func (s *GetAlertTrentRequest) SetAliUid(v string) *GetAlertTrentRequest {
	s.AliUid = &v
	return s
}

func (s *GetAlertTrentRequest) SetEventId(v string) *GetAlertTrentRequest {
	s.EventId = &v
	return s
}

func (s *GetAlertTrentRequest) SetOperaUid(v string) *GetAlertTrentRequest {
	s.OperaUid = &v
	return s
}

type GetAlertTrentResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	PageTotal *int32                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAlertTrentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlertTrentResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlertTrentResponseBody) SetCode(v int32) *GetAlertTrentResponseBody {
	s.Code = &v
	return s
}

func (s *GetAlertTrentResponseBody) SetData(v map[string]interface{}) *GetAlertTrentResponseBody {
	s.Data = v
	return s
}

func (s *GetAlertTrentResponseBody) SetMessage(v string) *GetAlertTrentResponseBody {
	s.Message = &v
	return s
}

func (s *GetAlertTrentResponseBody) SetPageTotal(v int32) *GetAlertTrentResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetAlertTrentResponseBody) SetRequestId(v string) *GetAlertTrentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAlertTrentResponseBody) SetStatus(v string) *GetAlertTrentResponseBody {
	s.Status = &v
	return s
}

type GetAlertTrentResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlertTrentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlertTrentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlertTrentResponse) GoString() string {
	return s.String()
}

func (s *GetAlertTrentResponse) SetHeaders(v map[string]*string) *GetAlertTrentResponse {
	s.Headers = v
	return s
}

func (s *GetAlertTrentResponse) SetStatusCode(v int32) *GetAlertTrentResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlertTrentResponse) SetBody(v *GetAlertTrentResponseBody) *GetAlertTrentResponse {
	s.Body = v
	return s
}

type GetAlgorithmRequest struct {
	ExpandInformation *string `json:"ExpandInformation,omitempty" xml:"ExpandInformation,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MetricName        *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageNum           *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetAlgorithmRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmRequest) GoString() string {
	return s.String()
}

func (s *GetAlgorithmRequest) SetExpandInformation(v string) *GetAlgorithmRequest {
	s.ExpandInformation = &v
	return s
}

func (s *GetAlgorithmRequest) SetInstanceId(v string) *GetAlgorithmRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAlgorithmRequest) SetMetricName(v string) *GetAlgorithmRequest {
	s.MetricName = &v
	return s
}

func (s *GetAlgorithmRequest) SetOperaUid(v string) *GetAlgorithmRequest {
	s.OperaUid = &v
	return s
}

func (s *GetAlgorithmRequest) SetPageNum(v int32) *GetAlgorithmRequest {
	s.PageNum = &v
	return s
}

func (s *GetAlgorithmRequest) SetPageSize(v int32) *GetAlgorithmRequest {
	s.PageSize = &v
	return s
}

type GetAlgorithmResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAlgorithmResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlgorithmResponseBody) SetCode(v int32) *GetAlgorithmResponseBody {
	s.Code = &v
	return s
}

func (s *GetAlgorithmResponseBody) SetData(v map[string]interface{}) *GetAlgorithmResponseBody {
	s.Data = v
	return s
}

func (s *GetAlgorithmResponseBody) SetMsg(v string) *GetAlgorithmResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAlgorithmResponseBody) SetPageTotal(v int64) *GetAlgorithmResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetAlgorithmResponseBody) SetRequestId(v string) *GetAlgorithmResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAlgorithmResponseBody) SetStatus(v string) *GetAlgorithmResponseBody {
	s.Status = &v
	return s
}

type GetAlgorithmResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlgorithmResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlgorithmResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmResponse) GoString() string {
	return s.String()
}

func (s *GetAlgorithmResponse) SetHeaders(v map[string]*string) *GetAlgorithmResponse {
	s.Headers = v
	return s
}

func (s *GetAlgorithmResponse) SetStatusCode(v int32) *GetAlgorithmResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlgorithmResponse) SetBody(v *GetAlgorithmResponseBody) *GetAlgorithmResponse {
	s.Body = v
	return s
}

type GetAlgorithmConfigRequest struct {
	AlgorithmTypeCode *string `json:"AlgorithmTypeCode,omitempty" xml:"AlgorithmTypeCode,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetAlgorithmConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmConfigRequest) GoString() string {
	return s.String()
}

func (s *GetAlgorithmConfigRequest) SetAlgorithmTypeCode(v string) *GetAlgorithmConfigRequest {
	s.AlgorithmTypeCode = &v
	return s
}

func (s *GetAlgorithmConfigRequest) SetOperaUid(v string) *GetAlgorithmConfigRequest {
	s.OperaUid = &v
	return s
}

type GetAlgorithmConfigResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAlgorithmConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlgorithmConfigResponseBody) SetCode(v int32) *GetAlgorithmConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetAlgorithmConfigResponseBody) SetData(v map[string]interface{}) *GetAlgorithmConfigResponseBody {
	s.Data = v
	return s
}

func (s *GetAlgorithmConfigResponseBody) SetMsg(v string) *GetAlgorithmConfigResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAlgorithmConfigResponseBody) SetPageTotal(v int64) *GetAlgorithmConfigResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetAlgorithmConfigResponseBody) SetRequestId(v string) *GetAlgorithmConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAlgorithmConfigResponseBody) SetStatus(v string) *GetAlgorithmConfigResponseBody {
	s.Status = &v
	return s
}

type GetAlgorithmConfigResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlgorithmConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlgorithmConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmConfigResponse) GoString() string {
	return s.String()
}

func (s *GetAlgorithmConfigResponse) SetHeaders(v map[string]*string) *GetAlgorithmConfigResponse {
	s.Headers = v
	return s
}

func (s *GetAlgorithmConfigResponse) SetStatusCode(v int32) *GetAlgorithmConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlgorithmConfigResponse) SetBody(v *GetAlgorithmConfigResponseBody) *GetAlgorithmConfigResponse {
	s.Body = v
	return s
}

type GetAlgorithmDataRequest struct {
	EndTime   *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Id        *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	StartTime *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetAlgorithmDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmDataRequest) GoString() string {
	return s.String()
}

func (s *GetAlgorithmDataRequest) SetEndTime(v int64) *GetAlgorithmDataRequest {
	s.EndTime = &v
	return s
}

func (s *GetAlgorithmDataRequest) SetId(v int64) *GetAlgorithmDataRequest {
	s.Id = &v
	return s
}

func (s *GetAlgorithmDataRequest) SetOperaUid(v string) *GetAlgorithmDataRequest {
	s.OperaUid = &v
	return s
}

func (s *GetAlgorithmDataRequest) SetStartTime(v int64) *GetAlgorithmDataRequest {
	s.StartTime = &v
	return s
}

type GetAlgorithmDataResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAlgorithmDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlgorithmDataResponseBody) SetCode(v int32) *GetAlgorithmDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetAlgorithmDataResponseBody) SetData(v map[string]interface{}) *GetAlgorithmDataResponseBody {
	s.Data = v
	return s
}

func (s *GetAlgorithmDataResponseBody) SetMsg(v string) *GetAlgorithmDataResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAlgorithmDataResponseBody) SetRequestId(v string) *GetAlgorithmDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAlgorithmDataResponseBody) SetStatus(v string) *GetAlgorithmDataResponseBody {
	s.Status = &v
	return s
}

type GetAlgorithmDataResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlgorithmDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlgorithmDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmDataResponse) GoString() string {
	return s.String()
}

func (s *GetAlgorithmDataResponse) SetHeaders(v map[string]*string) *GetAlgorithmDataResponse {
	s.Headers = v
	return s
}

func (s *GetAlgorithmDataResponse) SetStatusCode(v int32) *GetAlgorithmDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlgorithmDataResponse) SetBody(v *GetAlgorithmDataResponseBody) *GetAlgorithmDataResponse {
	s.Body = v
	return s
}

type GetAlgorithmDetailsRequest struct {
	Id       *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageNum  *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetAlgorithmDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmDetailsRequest) GoString() string {
	return s.String()
}

func (s *GetAlgorithmDetailsRequest) SetId(v int32) *GetAlgorithmDetailsRequest {
	s.Id = &v
	return s
}

func (s *GetAlgorithmDetailsRequest) SetOperaUid(v string) *GetAlgorithmDetailsRequest {
	s.OperaUid = &v
	return s
}

func (s *GetAlgorithmDetailsRequest) SetPageNum(v int32) *GetAlgorithmDetailsRequest {
	s.PageNum = &v
	return s
}

func (s *GetAlgorithmDetailsRequest) SetPageSize(v int32) *GetAlgorithmDetailsRequest {
	s.PageSize = &v
	return s
}

type GetAlgorithmDetailsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAlgorithmDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlgorithmDetailsResponseBody) SetCode(v int32) *GetAlgorithmDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *GetAlgorithmDetailsResponseBody) SetData(v map[string]interface{}) *GetAlgorithmDetailsResponseBody {
	s.Data = v
	return s
}

func (s *GetAlgorithmDetailsResponseBody) SetMsg(v string) *GetAlgorithmDetailsResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAlgorithmDetailsResponseBody) SetPageTotal(v int64) *GetAlgorithmDetailsResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetAlgorithmDetailsResponseBody) SetRequestId(v string) *GetAlgorithmDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAlgorithmDetailsResponseBody) SetStatus(v string) *GetAlgorithmDetailsResponseBody {
	s.Status = &v
	return s
}

type GetAlgorithmDetailsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlgorithmDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlgorithmDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmDetailsResponse) GoString() string {
	return s.String()
}

func (s *GetAlgorithmDetailsResponse) SetHeaders(v map[string]*string) *GetAlgorithmDetailsResponse {
	s.Headers = v
	return s
}

func (s *GetAlgorithmDetailsResponse) SetStatusCode(v int32) *GetAlgorithmDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlgorithmDetailsResponse) SetBody(v *GetAlgorithmDetailsResponseBody) *GetAlgorithmDetailsResponse {
	s.Body = v
	return s
}

type GetAlgorithmForecastDataRequest struct {
	AliUid    *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	EndTime   *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Id        *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	StartTime *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetAlgorithmForecastDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmForecastDataRequest) GoString() string {
	return s.String()
}

func (s *GetAlgorithmForecastDataRequest) SetAliUid(v string) *GetAlgorithmForecastDataRequest {
	s.AliUid = &v
	return s
}

func (s *GetAlgorithmForecastDataRequest) SetEndTime(v int64) *GetAlgorithmForecastDataRequest {
	s.EndTime = &v
	return s
}

func (s *GetAlgorithmForecastDataRequest) SetId(v int32) *GetAlgorithmForecastDataRequest {
	s.Id = &v
	return s
}

func (s *GetAlgorithmForecastDataRequest) SetOperaUid(v string) *GetAlgorithmForecastDataRequest {
	s.OperaUid = &v
	return s
}

func (s *GetAlgorithmForecastDataRequest) SetStartTime(v int64) *GetAlgorithmForecastDataRequest {
	s.StartTime = &v
	return s
}

type GetAlgorithmForecastDataResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAlgorithmForecastDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmForecastDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlgorithmForecastDataResponseBody) SetCode(v int32) *GetAlgorithmForecastDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetAlgorithmForecastDataResponseBody) SetData(v map[string]interface{}) *GetAlgorithmForecastDataResponseBody {
	s.Data = v
	return s
}

func (s *GetAlgorithmForecastDataResponseBody) SetMsg(v string) *GetAlgorithmForecastDataResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAlgorithmForecastDataResponseBody) SetRequestId(v string) *GetAlgorithmForecastDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAlgorithmForecastDataResponseBody) SetStatus(v string) *GetAlgorithmForecastDataResponseBody {
	s.Status = &v
	return s
}

type GetAlgorithmForecastDataResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlgorithmForecastDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlgorithmForecastDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmForecastDataResponse) GoString() string {
	return s.String()
}

func (s *GetAlgorithmForecastDataResponse) SetHeaders(v map[string]*string) *GetAlgorithmForecastDataResponse {
	s.Headers = v
	return s
}

func (s *GetAlgorithmForecastDataResponse) SetStatusCode(v int32) *GetAlgorithmForecastDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlgorithmForecastDataResponse) SetBody(v *GetAlgorithmForecastDataResponseBody) *GetAlgorithmForecastDataResponse {
	s.Body = v
	return s
}

type GetAlgorithmForecastDetailsRequest struct {
	AliUid   *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	Id       *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetAlgorithmForecastDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmForecastDetailsRequest) GoString() string {
	return s.String()
}

func (s *GetAlgorithmForecastDetailsRequest) SetAliUid(v string) *GetAlgorithmForecastDetailsRequest {
	s.AliUid = &v
	return s
}

func (s *GetAlgorithmForecastDetailsRequest) SetId(v int32) *GetAlgorithmForecastDetailsRequest {
	s.Id = &v
	return s
}

func (s *GetAlgorithmForecastDetailsRequest) SetOperaUid(v string) *GetAlgorithmForecastDetailsRequest {
	s.OperaUid = &v
	return s
}

type GetAlgorithmForecastDetailsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAlgorithmForecastDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmForecastDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlgorithmForecastDetailsResponseBody) SetCode(v int32) *GetAlgorithmForecastDetailsResponseBody {
	s.Code = &v
	return s
}

func (s *GetAlgorithmForecastDetailsResponseBody) SetData(v map[string]interface{}) *GetAlgorithmForecastDetailsResponseBody {
	s.Data = v
	return s
}

func (s *GetAlgorithmForecastDetailsResponseBody) SetMsg(v string) *GetAlgorithmForecastDetailsResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAlgorithmForecastDetailsResponseBody) SetRequestId(v string) *GetAlgorithmForecastDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAlgorithmForecastDetailsResponseBody) SetStatus(v string) *GetAlgorithmForecastDetailsResponseBody {
	s.Status = &v
	return s
}

type GetAlgorithmForecastDetailsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlgorithmForecastDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlgorithmForecastDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmForecastDetailsResponse) GoString() string {
	return s.String()
}

func (s *GetAlgorithmForecastDetailsResponse) SetHeaders(v map[string]*string) *GetAlgorithmForecastDetailsResponse {
	s.Headers = v
	return s
}

func (s *GetAlgorithmForecastDetailsResponse) SetStatusCode(v int32) *GetAlgorithmForecastDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlgorithmForecastDetailsResponse) SetBody(v *GetAlgorithmForecastDetailsResponseBody) *GetAlgorithmForecastDetailsResponse {
	s.Body = v
	return s
}

type GetAlgorithmListRequest struct {
	AlgorithmType     *int32  `json:"AlgorithmType,omitempty" xml:"AlgorithmType,omitempty"`
	ExpandInformation *string `json:"ExpandInformation,omitempty" xml:"ExpandInformation,omitempty"`
	InstanceId        *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MetricName        *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageNum           *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetAlgorithmListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmListRequest) GoString() string {
	return s.String()
}

func (s *GetAlgorithmListRequest) SetAlgorithmType(v int32) *GetAlgorithmListRequest {
	s.AlgorithmType = &v
	return s
}

func (s *GetAlgorithmListRequest) SetExpandInformation(v string) *GetAlgorithmListRequest {
	s.ExpandInformation = &v
	return s
}

func (s *GetAlgorithmListRequest) SetInstanceId(v string) *GetAlgorithmListRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAlgorithmListRequest) SetMetricName(v string) *GetAlgorithmListRequest {
	s.MetricName = &v
	return s
}

func (s *GetAlgorithmListRequest) SetOperaUid(v string) *GetAlgorithmListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetAlgorithmListRequest) SetPageNum(v int32) *GetAlgorithmListRequest {
	s.PageNum = &v
	return s
}

func (s *GetAlgorithmListRequest) SetPageSize(v int32) *GetAlgorithmListRequest {
	s.PageSize = &v
	return s
}

type GetAlgorithmListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAlgorithmListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmListResponseBody) GoString() string {
	return s.String()
}

func (s *GetAlgorithmListResponseBody) SetCode(v int32) *GetAlgorithmListResponseBody {
	s.Code = &v
	return s
}

func (s *GetAlgorithmListResponseBody) SetData(v map[string]interface{}) *GetAlgorithmListResponseBody {
	s.Data = v
	return s
}

func (s *GetAlgorithmListResponseBody) SetMsg(v string) *GetAlgorithmListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAlgorithmListResponseBody) SetRequestId(v string) *GetAlgorithmListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAlgorithmListResponseBody) SetStatus(v string) *GetAlgorithmListResponseBody {
	s.Status = &v
	return s
}

type GetAlgorithmListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAlgorithmListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAlgorithmListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAlgorithmListResponse) GoString() string {
	return s.String()
}

func (s *GetAlgorithmListResponse) SetHeaders(v map[string]*string) *GetAlgorithmListResponse {
	s.Headers = v
	return s
}

func (s *GetAlgorithmListResponse) SetStatusCode(v int32) *GetAlgorithmListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAlgorithmListResponse) SetBody(v *GetAlgorithmListResponseBody) *GetAlgorithmListResponse {
	s.Body = v
	return s
}

type GetAllAlgorithmConfigRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetAllAlgorithmConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAllAlgorithmConfigRequest) GoString() string {
	return s.String()
}

func (s *GetAllAlgorithmConfigRequest) SetOperaUid(v string) *GetAllAlgorithmConfigRequest {
	s.OperaUid = &v
	return s
}

type GetAllAlgorithmConfigResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAllAlgorithmConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAllAlgorithmConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetAllAlgorithmConfigResponseBody) SetCode(v int32) *GetAllAlgorithmConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetAllAlgorithmConfigResponseBody) SetData(v map[string]interface{}) *GetAllAlgorithmConfigResponseBody {
	s.Data = v
	return s
}

func (s *GetAllAlgorithmConfigResponseBody) SetMsg(v string) *GetAllAlgorithmConfigResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAllAlgorithmConfigResponseBody) SetPageTotal(v int64) *GetAllAlgorithmConfigResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetAllAlgorithmConfigResponseBody) SetRequestId(v string) *GetAllAlgorithmConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAllAlgorithmConfigResponseBody) SetStatus(v string) *GetAllAlgorithmConfigResponseBody {
	s.Status = &v
	return s
}

type GetAllAlgorithmConfigResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAllAlgorithmConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAllAlgorithmConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAllAlgorithmConfigResponse) GoString() string {
	return s.String()
}

func (s *GetAllAlgorithmConfigResponse) SetHeaders(v map[string]*string) *GetAllAlgorithmConfigResponse {
	s.Headers = v
	return s
}

func (s *GetAllAlgorithmConfigResponse) SetStatusCode(v int32) *GetAllAlgorithmConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAllAlgorithmConfigResponse) SetBody(v *GetAllAlgorithmConfigResponseBody) *GetAllAlgorithmConfigResponse {
	s.Body = v
	return s
}

type GetAllTagResourceNumListRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductId   *int64  `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	TagName     *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s GetAllTagResourceNumListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAllTagResourceNumListRequest) GoString() string {
	return s.String()
}

func (s *GetAllTagResourceNumListRequest) SetCurrentPage(v int32) *GetAllTagResourceNumListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetAllTagResourceNumListRequest) SetOperaUid(v string) *GetAllTagResourceNumListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetAllTagResourceNumListRequest) SetPageSize(v int32) *GetAllTagResourceNumListRequest {
	s.PageSize = &v
	return s
}

func (s *GetAllTagResourceNumListRequest) SetProductId(v int64) *GetAllTagResourceNumListRequest {
	s.ProductId = &v
	return s
}

func (s *GetAllTagResourceNumListRequest) SetTagName(v string) *GetAllTagResourceNumListRequest {
	s.TagName = &v
	return s
}

type GetAllTagResourceNumListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int32                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAllTagResourceNumListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAllTagResourceNumListResponseBody) GoString() string {
	return s.String()
}

func (s *GetAllTagResourceNumListResponseBody) SetCode(v int32) *GetAllTagResourceNumListResponseBody {
	s.Code = &v
	return s
}

func (s *GetAllTagResourceNumListResponseBody) SetData(v map[string]interface{}) *GetAllTagResourceNumListResponseBody {
	s.Data = v
	return s
}

func (s *GetAllTagResourceNumListResponseBody) SetMsg(v string) *GetAllTagResourceNumListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAllTagResourceNumListResponseBody) SetPageTotal(v int32) *GetAllTagResourceNumListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetAllTagResourceNumListResponseBody) SetRequestId(v string) *GetAllTagResourceNumListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAllTagResourceNumListResponseBody) SetStatus(v string) *GetAllTagResourceNumListResponseBody {
	s.Status = &v
	return s
}

type GetAllTagResourceNumListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAllTagResourceNumListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAllTagResourceNumListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAllTagResourceNumListResponse) GoString() string {
	return s.String()
}

func (s *GetAllTagResourceNumListResponse) SetHeaders(v map[string]*string) *GetAllTagResourceNumListResponse {
	s.Headers = v
	return s
}

func (s *GetAllTagResourceNumListResponse) SetStatusCode(v int32) *GetAllTagResourceNumListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAllTagResourceNumListResponse) SetBody(v *GetAllTagResourceNumListResponseBody) *GetAllTagResourceNumListResponse {
	s.Body = v
	return s
}

type GetAnalysisProcessRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetAnalysisProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAnalysisProcessRequest) GoString() string {
	return s.String()
}

func (s *GetAnalysisProcessRequest) SetEventId(v string) *GetAnalysisProcessRequest {
	s.EventId = &v
	return s
}

func (s *GetAnalysisProcessRequest) SetLang(v string) *GetAnalysisProcessRequest {
	s.Lang = &v
	return s
}

func (s *GetAnalysisProcessRequest) SetOperaUid(v string) *GetAnalysisProcessRequest {
	s.OperaUid = &v
	return s
}

type GetAnalysisProcessResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAnalysisProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAnalysisProcessResponseBody) GoString() string {
	return s.String()
}

func (s *GetAnalysisProcessResponseBody) SetCode(v int32) *GetAnalysisProcessResponseBody {
	s.Code = &v
	return s
}

func (s *GetAnalysisProcessResponseBody) SetData(v map[string]interface{}) *GetAnalysisProcessResponseBody {
	s.Data = v
	return s
}

func (s *GetAnalysisProcessResponseBody) SetMsg(v string) *GetAnalysisProcessResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAnalysisProcessResponseBody) SetRequestId(v string) *GetAnalysisProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAnalysisProcessResponseBody) SetStatus(v string) *GetAnalysisProcessResponseBody {
	s.Status = &v
	return s
}

type GetAnalysisProcessResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAnalysisProcessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAnalysisProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAnalysisProcessResponse) GoString() string {
	return s.String()
}

func (s *GetAnalysisProcessResponse) SetHeaders(v map[string]*string) *GetAnalysisProcessResponse {
	s.Headers = v
	return s
}

func (s *GetAnalysisProcessResponse) SetStatusCode(v int32) *GetAnalysisProcessResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAnalysisProcessResponse) SetBody(v *GetAnalysisProcessResponseBody) *GetAnalysisProcessResponse {
	s.Body = v
	return s
}

type GetAuthorizationRequest struct {
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *GetAuthorizationRequest) SetUserId(v string) *GetAuthorizationRequest {
	s.UserId = &v
	return s
}

type GetAuthorizationResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *GetAuthorizationResponseBody) SetCode(v string) *GetAuthorizationResponseBody {
	s.Code = &v
	return s
}

func (s *GetAuthorizationResponseBody) SetData(v bool) *GetAuthorizationResponseBody {
	s.Data = &v
	return s
}

func (s *GetAuthorizationResponseBody) SetMessage(v string) *GetAuthorizationResponseBody {
	s.Message = &v
	return s
}

func (s *GetAuthorizationResponseBody) SetRequestId(v string) *GetAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAuthorizationResponseBody) SetStatus(v string) *GetAuthorizationResponseBody {
	s.Status = &v
	return s
}

type GetAuthorizationResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *GetAuthorizationResponse) SetHeaders(v map[string]*string) *GetAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *GetAuthorizationResponse) SetStatusCode(v int32) *GetAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAuthorizationResponse) SetBody(v *GetAuthorizationResponseBody) *GetAuthorizationResponse {
	s.Body = v
	return s
}

type GetAvgRepairTimeRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	Uid      *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetAvgRepairTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAvgRepairTimeRequest) GoString() string {
	return s.String()
}

func (s *GetAvgRepairTimeRequest) SetOperaUid(v string) *GetAvgRepairTimeRequest {
	s.OperaUid = &v
	return s
}

func (s *GetAvgRepairTimeRequest) SetUid(v int64) *GetAvgRepairTimeRequest {
	s.Uid = &v
	return s
}

type GetAvgRepairTimeResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAvgRepairTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAvgRepairTimeResponseBody) GoString() string {
	return s.String()
}

func (s *GetAvgRepairTimeResponseBody) SetCode(v int32) *GetAvgRepairTimeResponseBody {
	s.Code = &v
	return s
}

func (s *GetAvgRepairTimeResponseBody) SetData(v map[string]interface{}) *GetAvgRepairTimeResponseBody {
	s.Data = v
	return s
}

func (s *GetAvgRepairTimeResponseBody) SetMsg(v string) *GetAvgRepairTimeResponseBody {
	s.Msg = &v
	return s
}

func (s *GetAvgRepairTimeResponseBody) SetRequestId(v string) *GetAvgRepairTimeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAvgRepairTimeResponseBody) SetStatus(v bool) *GetAvgRepairTimeResponseBody {
	s.Status = &v
	return s
}

type GetAvgRepairTimeResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAvgRepairTimeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAvgRepairTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAvgRepairTimeResponse) GoString() string {
	return s.String()
}

func (s *GetAvgRepairTimeResponse) SetHeaders(v map[string]*string) *GetAvgRepairTimeResponse {
	s.Headers = v
	return s
}

func (s *GetAvgRepairTimeResponse) SetStatusCode(v int32) *GetAvgRepairTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAvgRepairTimeResponse) SetBody(v *GetAvgRepairTimeResponseBody) *GetAvgRepairTimeResponse {
	s.Body = v
	return s
}

type GetBackScriptListRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SceneId  *int32  `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
}

func (s GetBackScriptListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBackScriptListRequest) GoString() string {
	return s.String()
}

func (s *GetBackScriptListRequest) SetOperaUid(v string) *GetBackScriptListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetBackScriptListRequest) SetSceneId(v int32) *GetBackScriptListRequest {
	s.SceneId = &v
	return s
}

type GetBackScriptListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBackScriptListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBackScriptListResponseBody) GoString() string {
	return s.String()
}

func (s *GetBackScriptListResponseBody) SetCode(v int32) *GetBackScriptListResponseBody {
	s.Code = &v
	return s
}

func (s *GetBackScriptListResponseBody) SetData(v map[string]interface{}) *GetBackScriptListResponseBody {
	s.Data = v
	return s
}

func (s *GetBackScriptListResponseBody) SetMsg(v string) *GetBackScriptListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBackScriptListResponseBody) SetRequestId(v string) *GetBackScriptListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBackScriptListResponseBody) SetStatus(v string) *GetBackScriptListResponseBody {
	s.Status = &v
	return s
}

type GetBackScriptListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBackScriptListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBackScriptListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBackScriptListResponse) GoString() string {
	return s.String()
}

func (s *GetBackScriptListResponse) SetHeaders(v map[string]*string) *GetBackScriptListResponse {
	s.Headers = v
	return s
}

func (s *GetBackScriptListResponse) SetStatusCode(v int32) *GetBackScriptListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBackScriptListResponse) SetBody(v *GetBackScriptListResponseBody) *GetBackScriptListResponse {
	s.Body = v
	return s
}

type GetBusinessGroupRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetBusinessGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupRequest) SetOperaUid(v string) *GetBusinessGroupRequest {
	s.OperaUid = &v
	return s
}

type GetBusinessGroupResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupResponseBody) SetCode(v int32) *GetBusinessGroupResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessGroupResponseBody) SetData(v map[string]interface{}) *GetBusinessGroupResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessGroupResponseBody) SetMsg(v string) *GetBusinessGroupResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessGroupResponseBody) SetRequestId(v string) *GetBusinessGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessGroupResponseBody) SetStatus(v string) *GetBusinessGroupResponseBody {
	s.Status = &v
	return s
}

type GetBusinessGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupResponse) SetHeaders(v map[string]*string) *GetBusinessGroupResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessGroupResponse) SetStatusCode(v int32) *GetBusinessGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessGroupResponse) SetBody(v *GetBusinessGroupResponseBody) *GetBusinessGroupResponse {
	s.Body = v
	return s
}

type GetBusinessGroupAllRequest struct {
	BusinessGroupName *string `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
	CurrentPage       *int64  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize          *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status            *int64  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessGroupAllRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupAllRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupAllRequest) SetBusinessGroupName(v string) *GetBusinessGroupAllRequest {
	s.BusinessGroupName = &v
	return s
}

func (s *GetBusinessGroupAllRequest) SetCurrentPage(v int64) *GetBusinessGroupAllRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetBusinessGroupAllRequest) SetOperaUid(v string) *GetBusinessGroupAllRequest {
	s.OperaUid = &v
	return s
}

func (s *GetBusinessGroupAllRequest) SetPageSize(v int64) *GetBusinessGroupAllRequest {
	s.PageSize = &v
	return s
}

func (s *GetBusinessGroupAllRequest) SetStatus(v int64) *GetBusinessGroupAllRequest {
	s.Status = &v
	return s
}

type GetBusinessGroupAllResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessGroupAllResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupAllResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupAllResponseBody) SetCode(v int32) *GetBusinessGroupAllResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessGroupAllResponseBody) SetData(v map[string]interface{}) *GetBusinessGroupAllResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessGroupAllResponseBody) SetMsg(v string) *GetBusinessGroupAllResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessGroupAllResponseBody) SetPageTotal(v int64) *GetBusinessGroupAllResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetBusinessGroupAllResponseBody) SetRequestId(v string) *GetBusinessGroupAllResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessGroupAllResponseBody) SetStatus(v string) *GetBusinessGroupAllResponseBody {
	s.Status = &v
	return s
}

type GetBusinessGroupAllResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessGroupAllResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessGroupAllResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupAllResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupAllResponse) SetHeaders(v map[string]*string) *GetBusinessGroupAllResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessGroupAllResponse) SetStatusCode(v int32) *GetBusinessGroupAllResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessGroupAllResponse) SetBody(v *GetBusinessGroupAllResponseBody) *GetBusinessGroupAllResponse {
	s.Body = v
	return s
}

type GetBusinessGroupIndexRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductId       *int32  `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
}

func (s GetBusinessGroupIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupIndexRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupIndexRequest) SetBusinessGroupId(v string) *GetBusinessGroupIndexRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetBusinessGroupIndexRequest) SetOperaUid(v string) *GetBusinessGroupIndexRequest {
	s.OperaUid = &v
	return s
}

func (s *GetBusinessGroupIndexRequest) SetProductId(v int32) *GetBusinessGroupIndexRequest {
	s.ProductId = &v
	return s
}

type GetBusinessGroupIndexResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessGroupIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupIndexResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupIndexResponseBody) SetCode(v int32) *GetBusinessGroupIndexResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessGroupIndexResponseBody) SetData(v map[string]interface{}) *GetBusinessGroupIndexResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessGroupIndexResponseBody) SetMsg(v string) *GetBusinessGroupIndexResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessGroupIndexResponseBody) SetRequestId(v string) *GetBusinessGroupIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessGroupIndexResponseBody) SetStatus(v string) *GetBusinessGroupIndexResponseBody {
	s.Status = &v
	return s
}

type GetBusinessGroupIndexResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessGroupIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessGroupIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupIndexResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupIndexResponse) SetHeaders(v map[string]*string) *GetBusinessGroupIndexResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessGroupIndexResponse) SetStatusCode(v int32) *GetBusinessGroupIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessGroupIndexResponse) SetBody(v *GetBusinessGroupIndexResponseBody) *GetBusinessGroupIndexResponse {
	s.Body = v
	return s
}

type GetBusinessGroupInfoRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetBusinessGroupInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupInfoRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupInfoRequest) SetBusinessGroupId(v string) *GetBusinessGroupInfoRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetBusinessGroupInfoRequest) SetOperaUid(v string) *GetBusinessGroupInfoRequest {
	s.OperaUid = &v
	return s
}

type GetBusinessGroupInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessGroupInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupInfoResponseBody) SetCode(v int32) *GetBusinessGroupInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessGroupInfoResponseBody) SetData(v map[string]interface{}) *GetBusinessGroupInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessGroupInfoResponseBody) SetMsg(v string) *GetBusinessGroupInfoResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessGroupInfoResponseBody) SetRequestId(v string) *GetBusinessGroupInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessGroupInfoResponseBody) SetStatus(v bool) *GetBusinessGroupInfoResponseBody {
	s.Status = &v
	return s
}

type GetBusinessGroupInfoResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessGroupInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessGroupInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupInfoResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupInfoResponse) SetHeaders(v map[string]*string) *GetBusinessGroupInfoResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessGroupInfoResponse) SetStatusCode(v int32) *GetBusinessGroupInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessGroupInfoResponse) SetBody(v *GetBusinessGroupInfoResponseBody) *GetBusinessGroupInfoResponse {
	s.Body = v
	return s
}

type GetBusinessGroupOverviewListRequest struct {
	AliUid      *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetBusinessGroupOverviewListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupOverviewListRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupOverviewListRequest) SetAliUid(v string) *GetBusinessGroupOverviewListRequest {
	s.AliUid = &v
	return s
}

func (s *GetBusinessGroupOverviewListRequest) SetCurrentPage(v int32) *GetBusinessGroupOverviewListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetBusinessGroupOverviewListRequest) SetOperaUid(v string) *GetBusinessGroupOverviewListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetBusinessGroupOverviewListRequest) SetPageSize(v int32) *GetBusinessGroupOverviewListRequest {
	s.PageSize = &v
	return s
}

type GetBusinessGroupOverviewListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int32                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessGroupOverviewListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupOverviewListResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupOverviewListResponseBody) SetCode(v int32) *GetBusinessGroupOverviewListResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessGroupOverviewListResponseBody) SetData(v map[string]interface{}) *GetBusinessGroupOverviewListResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessGroupOverviewListResponseBody) SetMsg(v string) *GetBusinessGroupOverviewListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessGroupOverviewListResponseBody) SetPageTotal(v int32) *GetBusinessGroupOverviewListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetBusinessGroupOverviewListResponseBody) SetRequestId(v string) *GetBusinessGroupOverviewListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessGroupOverviewListResponseBody) SetStatus(v bool) *GetBusinessGroupOverviewListResponseBody {
	s.Status = &v
	return s
}

type GetBusinessGroupOverviewListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessGroupOverviewListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessGroupOverviewListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessGroupOverviewListResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessGroupOverviewListResponse) SetHeaders(v map[string]*string) *GetBusinessGroupOverviewListResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessGroupOverviewListResponse) SetStatusCode(v int32) *GetBusinessGroupOverviewListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessGroupOverviewListResponse) SetBody(v *GetBusinessGroupOverviewListResponseBody) *GetBusinessGroupOverviewListResponse {
	s.Body = v
	return s
}

type GetBusinessLogAlertDetailRequest struct {
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetBusinessLogAlertDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessLogAlertDetailRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessLogAlertDetailRequest) SetId(v int64) *GetBusinessLogAlertDetailRequest {
	s.Id = &v
	return s
}

func (s *GetBusinessLogAlertDetailRequest) SetOperaUid(v string) *GetBusinessLogAlertDetailRequest {
	s.OperaUid = &v
	return s
}

type GetBusinessLogAlertDetailResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessLogAlertDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessLogAlertDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessLogAlertDetailResponseBody) SetCode(v int32) *GetBusinessLogAlertDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessLogAlertDetailResponseBody) SetData(v map[string]interface{}) *GetBusinessLogAlertDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessLogAlertDetailResponseBody) SetMsg(v string) *GetBusinessLogAlertDetailResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessLogAlertDetailResponseBody) SetPageTotal(v int64) *GetBusinessLogAlertDetailResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetBusinessLogAlertDetailResponseBody) SetRequestId(v string) *GetBusinessLogAlertDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessLogAlertDetailResponseBody) SetStatus(v string) *GetBusinessLogAlertDetailResponseBody {
	s.Status = &v
	return s
}

type GetBusinessLogAlertDetailResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessLogAlertDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessLogAlertDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessLogAlertDetailResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessLogAlertDetailResponse) SetHeaders(v map[string]*string) *GetBusinessLogAlertDetailResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessLogAlertDetailResponse) SetStatusCode(v int32) *GetBusinessLogAlertDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessLogAlertDetailResponse) SetBody(v *GetBusinessLogAlertDetailResponseBody) *GetBusinessLogAlertDetailResponse {
	s.Body = v
	return s
}

type GetBusinessLogAlertListRequest struct {
	EventId  *int64  `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetBusinessLogAlertListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessLogAlertListRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessLogAlertListRequest) SetEventId(v int64) *GetBusinessLogAlertListRequest {
	s.EventId = &v
	return s
}

func (s *GetBusinessLogAlertListRequest) SetOperaUid(v string) *GetBusinessLogAlertListRequest {
	s.OperaUid = &v
	return s
}

type GetBusinessLogAlertListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessLogAlertListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessLogAlertListResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessLogAlertListResponseBody) SetCode(v int32) *GetBusinessLogAlertListResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessLogAlertListResponseBody) SetData(v map[string]interface{}) *GetBusinessLogAlertListResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessLogAlertListResponseBody) SetMsg(v string) *GetBusinessLogAlertListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessLogAlertListResponseBody) SetPageTotal(v int64) *GetBusinessLogAlertListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetBusinessLogAlertListResponseBody) SetRequestId(v string) *GetBusinessLogAlertListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessLogAlertListResponseBody) SetStatus(v string) *GetBusinessLogAlertListResponseBody {
	s.Status = &v
	return s
}

type GetBusinessLogAlertListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessLogAlertListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessLogAlertListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessLogAlertListResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessLogAlertListResponse) SetHeaders(v map[string]*string) *GetBusinessLogAlertListResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessLogAlertListResponse) SetStatusCode(v int32) *GetBusinessLogAlertListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessLogAlertListResponse) SetBody(v *GetBusinessLogAlertListResponseBody) *GetBusinessLogAlertListResponse {
	s.Body = v
	return s
}

type GetBusinessLogAlertTopNRequest struct {
	AlertType *string `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	EventId   *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	TopNum    *int64  `json:"TopNum,omitempty" xml:"TopNum,omitempty"`
}

func (s GetBusinessLogAlertTopNRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessLogAlertTopNRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessLogAlertTopNRequest) SetAlertType(v string) *GetBusinessLogAlertTopNRequest {
	s.AlertType = &v
	return s
}

func (s *GetBusinessLogAlertTopNRequest) SetEventId(v string) *GetBusinessLogAlertTopNRequest {
	s.EventId = &v
	return s
}

func (s *GetBusinessLogAlertTopNRequest) SetOperaUid(v string) *GetBusinessLogAlertTopNRequest {
	s.OperaUid = &v
	return s
}

func (s *GetBusinessLogAlertTopNRequest) SetTopNum(v int64) *GetBusinessLogAlertTopNRequest {
	s.TopNum = &v
	return s
}

type GetBusinessLogAlertTopNResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessLogAlertTopNResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessLogAlertTopNResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessLogAlertTopNResponseBody) SetCode(v int32) *GetBusinessLogAlertTopNResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessLogAlertTopNResponseBody) SetData(v map[string]interface{}) *GetBusinessLogAlertTopNResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessLogAlertTopNResponseBody) SetMsg(v string) *GetBusinessLogAlertTopNResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessLogAlertTopNResponseBody) SetPageTotal(v int64) *GetBusinessLogAlertTopNResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetBusinessLogAlertTopNResponseBody) SetRequestId(v string) *GetBusinessLogAlertTopNResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessLogAlertTopNResponseBody) SetStatus(v string) *GetBusinessLogAlertTopNResponseBody {
	s.Status = &v
	return s
}

type GetBusinessLogAlertTopNResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessLogAlertTopNResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessLogAlertTopNResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessLogAlertTopNResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessLogAlertTopNResponse) SetHeaders(v map[string]*string) *GetBusinessLogAlertTopNResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessLogAlertTopNResponse) SetStatusCode(v int32) *GetBusinessLogAlertTopNResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessLogAlertTopNResponse) SetBody(v *GetBusinessLogAlertTopNResponseBody) *GetBusinessLogAlertTopNResponse {
	s.Body = v
	return s
}

type GetBusinessMetricAlertDetailListRequest struct {
	EventId    *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	Id         *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	OperaUid   *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetBusinessMetricAlertDetailListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAlertDetailListRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAlertDetailListRequest) SetEventId(v string) *GetBusinessMetricAlertDetailListRequest {
	s.EventId = &v
	return s
}

func (s *GetBusinessMetricAlertDetailListRequest) SetId(v int64) *GetBusinessMetricAlertDetailListRequest {
	s.Id = &v
	return s
}

func (s *GetBusinessMetricAlertDetailListRequest) SetMetricName(v string) *GetBusinessMetricAlertDetailListRequest {
	s.MetricName = &v
	return s
}

func (s *GetBusinessMetricAlertDetailListRequest) SetOperaUid(v string) *GetBusinessMetricAlertDetailListRequest {
	s.OperaUid = &v
	return s
}

type GetBusinessMetricAlertDetailListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessMetricAlertDetailListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAlertDetailListResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAlertDetailListResponseBody) SetCode(v int32) *GetBusinessMetricAlertDetailListResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessMetricAlertDetailListResponseBody) SetData(v map[string]interface{}) *GetBusinessMetricAlertDetailListResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessMetricAlertDetailListResponseBody) SetMsg(v string) *GetBusinessMetricAlertDetailListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessMetricAlertDetailListResponseBody) SetRequestId(v string) *GetBusinessMetricAlertDetailListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessMetricAlertDetailListResponseBody) SetStatus(v string) *GetBusinessMetricAlertDetailListResponseBody {
	s.Status = &v
	return s
}

type GetBusinessMetricAlertDetailListResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessMetricAlertDetailListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessMetricAlertDetailListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAlertDetailListResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAlertDetailListResponse) SetHeaders(v map[string]*string) *GetBusinessMetricAlertDetailListResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessMetricAlertDetailListResponse) SetStatusCode(v int32) *GetBusinessMetricAlertDetailListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessMetricAlertDetailListResponse) SetBody(v *GetBusinessMetricAlertDetailListResponseBody) *GetBusinessMetricAlertDetailListResponse {
	s.Body = v
	return s
}

type GetBusinessMetricAlertListRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetBusinessMetricAlertListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAlertListRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAlertListRequest) SetEventId(v string) *GetBusinessMetricAlertListRequest {
	s.EventId = &v
	return s
}

func (s *GetBusinessMetricAlertListRequest) SetOperaUid(v string) *GetBusinessMetricAlertListRequest {
	s.OperaUid = &v
	return s
}

type GetBusinessMetricAlertListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessMetricAlertListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAlertListResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAlertListResponseBody) SetCode(v int32) *GetBusinessMetricAlertListResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessMetricAlertListResponseBody) SetData(v map[string]interface{}) *GetBusinessMetricAlertListResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessMetricAlertListResponseBody) SetMsg(v string) *GetBusinessMetricAlertListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessMetricAlertListResponseBody) SetRequestId(v string) *GetBusinessMetricAlertListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessMetricAlertListResponseBody) SetStatus(v string) *GetBusinessMetricAlertListResponseBody {
	s.Status = &v
	return s
}

type GetBusinessMetricAlertListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessMetricAlertListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessMetricAlertListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAlertListResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAlertListResponse) SetHeaders(v map[string]*string) *GetBusinessMetricAlertListResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessMetricAlertListResponse) SetStatusCode(v int32) *GetBusinessMetricAlertListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessMetricAlertListResponse) SetBody(v *GetBusinessMetricAlertListResponseBody) *GetBusinessMetricAlertListResponse {
	s.Body = v
	return s
}

type GetBusinessMetricAlertTopNRequest struct {
	AlertType *string `json:"AlertType,omitempty" xml:"AlertType,omitempty"`
	EventId   *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	TopNum    *int64  `json:"TopNum,omitempty" xml:"TopNum,omitempty"`
}

func (s GetBusinessMetricAlertTopNRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAlertTopNRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAlertTopNRequest) SetAlertType(v string) *GetBusinessMetricAlertTopNRequest {
	s.AlertType = &v
	return s
}

func (s *GetBusinessMetricAlertTopNRequest) SetEventId(v string) *GetBusinessMetricAlertTopNRequest {
	s.EventId = &v
	return s
}

func (s *GetBusinessMetricAlertTopNRequest) SetOperaUid(v string) *GetBusinessMetricAlertTopNRequest {
	s.OperaUid = &v
	return s
}

func (s *GetBusinessMetricAlertTopNRequest) SetTopNum(v int64) *GetBusinessMetricAlertTopNRequest {
	s.TopNum = &v
	return s
}

type GetBusinessMetricAlertTopNResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessMetricAlertTopNResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAlertTopNResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAlertTopNResponseBody) SetCode(v int32) *GetBusinessMetricAlertTopNResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessMetricAlertTopNResponseBody) SetData(v map[string]interface{}) *GetBusinessMetricAlertTopNResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessMetricAlertTopNResponseBody) SetMsg(v string) *GetBusinessMetricAlertTopNResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessMetricAlertTopNResponseBody) SetPageTotal(v int64) *GetBusinessMetricAlertTopNResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetBusinessMetricAlertTopNResponseBody) SetRequestId(v string) *GetBusinessMetricAlertTopNResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessMetricAlertTopNResponseBody) SetStatus(v string) *GetBusinessMetricAlertTopNResponseBody {
	s.Status = &v
	return s
}

type GetBusinessMetricAlertTopNResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessMetricAlertTopNResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessMetricAlertTopNResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAlertTopNResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAlertTopNResponse) SetHeaders(v map[string]*string) *GetBusinessMetricAlertTopNResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessMetricAlertTopNResponse) SetStatusCode(v int32) *GetBusinessMetricAlertTopNResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessMetricAlertTopNResponse) SetBody(v *GetBusinessMetricAlertTopNResponseBody) *GetBusinessMetricAlertTopNResponse {
	s.Body = v
	return s
}

type GetBusinessMetricAllListRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetBusinessMetricAllListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAllListRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAllListRequest) SetOperaUid(v string) *GetBusinessMetricAllListRequest {
	s.OperaUid = &v
	return s
}

type GetBusinessMetricAllListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessMetricAllListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAllListResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAllListResponseBody) SetCode(v int32) *GetBusinessMetricAllListResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessMetricAllListResponseBody) SetData(v map[string]interface{}) *GetBusinessMetricAllListResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessMetricAllListResponseBody) SetMsg(v string) *GetBusinessMetricAllListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessMetricAllListResponseBody) SetRequestId(v string) *GetBusinessMetricAllListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessMetricAllListResponseBody) SetStatus(v string) *GetBusinessMetricAllListResponseBody {
	s.Status = &v
	return s
}

type GetBusinessMetricAllListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessMetricAllListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessMetricAllListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricAllListResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricAllListResponse) SetHeaders(v map[string]*string) *GetBusinessMetricAllListResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessMetricAllListResponse) SetStatusCode(v int32) *GetBusinessMetricAllListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessMetricAllListResponse) SetBody(v *GetBusinessMetricAllListResponseBody) *GetBusinessMetricAllListResponse {
	s.Body = v
	return s
}

type GetBusinessMetricForecastListRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetBusinessMetricForecastListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricForecastListRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricForecastListRequest) SetEventId(v string) *GetBusinessMetricForecastListRequest {
	s.EventId = &v
	return s
}

func (s *GetBusinessMetricForecastListRequest) SetOperaUid(v string) *GetBusinessMetricForecastListRequest {
	s.OperaUid = &v
	return s
}

type GetBusinessMetricForecastListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessMetricForecastListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricForecastListResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricForecastListResponseBody) SetCode(v int32) *GetBusinessMetricForecastListResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessMetricForecastListResponseBody) SetData(v map[string]interface{}) *GetBusinessMetricForecastListResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessMetricForecastListResponseBody) SetMsg(v string) *GetBusinessMetricForecastListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessMetricForecastListResponseBody) SetRequestId(v string) *GetBusinessMetricForecastListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessMetricForecastListResponseBody) SetStatus(v string) *GetBusinessMetricForecastListResponseBody {
	s.Status = &v
	return s
}

type GetBusinessMetricForecastListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessMetricForecastListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessMetricForecastListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricForecastListResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricForecastListResponse) SetHeaders(v map[string]*string) *GetBusinessMetricForecastListResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessMetricForecastListResponse) SetStatusCode(v int32) *GetBusinessMetricForecastListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessMetricForecastListResponse) SetBody(v *GetBusinessMetricForecastListResponseBody) *GetBusinessMetricForecastListResponse {
	s.Body = v
	return s
}

type GetBusinessMetricResourceByMetricIdRequest struct {
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetBusinessMetricResourceByMetricIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricResourceByMetricIdRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricResourceByMetricIdRequest) SetId(v int64) *GetBusinessMetricResourceByMetricIdRequest {
	s.Id = &v
	return s
}

func (s *GetBusinessMetricResourceByMetricIdRequest) SetOperaUid(v string) *GetBusinessMetricResourceByMetricIdRequest {
	s.OperaUid = &v
	return s
}

type GetBusinessMetricResourceByMetricIdResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessMetricResourceByMetricIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricResourceByMetricIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricResourceByMetricIdResponseBody) SetCode(v int32) *GetBusinessMetricResourceByMetricIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessMetricResourceByMetricIdResponseBody) SetData(v map[string]interface{}) *GetBusinessMetricResourceByMetricIdResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessMetricResourceByMetricIdResponseBody) SetMsg(v string) *GetBusinessMetricResourceByMetricIdResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessMetricResourceByMetricIdResponseBody) SetPageTotal(v int64) *GetBusinessMetricResourceByMetricIdResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetBusinessMetricResourceByMetricIdResponseBody) SetRequestId(v string) *GetBusinessMetricResourceByMetricIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessMetricResourceByMetricIdResponseBody) SetStatus(v string) *GetBusinessMetricResourceByMetricIdResponseBody {
	s.Status = &v
	return s
}

type GetBusinessMetricResourceByMetricIdResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessMetricResourceByMetricIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessMetricResourceByMetricIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricResourceByMetricIdResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricResourceByMetricIdResponse) SetHeaders(v map[string]*string) *GetBusinessMetricResourceByMetricIdResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessMetricResourceByMetricIdResponse) SetStatusCode(v int32) *GetBusinessMetricResourceByMetricIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessMetricResourceByMetricIdResponse) SetBody(v *GetBusinessMetricResourceByMetricIdResponseBody) *GetBusinessMetricResourceByMetricIdResponse {
	s.Body = v
	return s
}

type GetBusinessMetricSceneListRequest struct {
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetBusinessMetricSceneListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricSceneListRequest) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricSceneListRequest) SetId(v int64) *GetBusinessMetricSceneListRequest {
	s.Id = &v
	return s
}

func (s *GetBusinessMetricSceneListRequest) SetOperaUid(v string) *GetBusinessMetricSceneListRequest {
	s.OperaUid = &v
	return s
}

type GetBusinessMetricSceneListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBusinessMetricSceneListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricSceneListResponseBody) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricSceneListResponseBody) SetCode(v int32) *GetBusinessMetricSceneListResponseBody {
	s.Code = &v
	return s
}

func (s *GetBusinessMetricSceneListResponseBody) SetData(v map[string]interface{}) *GetBusinessMetricSceneListResponseBody {
	s.Data = v
	return s
}

func (s *GetBusinessMetricSceneListResponseBody) SetMsg(v string) *GetBusinessMetricSceneListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetBusinessMetricSceneListResponseBody) SetRequestId(v string) *GetBusinessMetricSceneListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBusinessMetricSceneListResponseBody) SetStatus(v string) *GetBusinessMetricSceneListResponseBody {
	s.Status = &v
	return s
}

type GetBusinessMetricSceneListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBusinessMetricSceneListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBusinessMetricSceneListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBusinessMetricSceneListResponse) GoString() string {
	return s.String()
}

func (s *GetBusinessMetricSceneListResponse) SetHeaders(v map[string]*string) *GetBusinessMetricSceneListResponse {
	s.Headers = v
	return s
}

func (s *GetBusinessMetricSceneListResponse) SetStatusCode(v int32) *GetBusinessMetricSceneListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBusinessMetricSceneListResponse) SetBody(v *GetBusinessMetricSceneListResponseBody) *GetBusinessMetricSceneListResponse {
	s.Body = v
	return s
}

type GetCidInfoRequest struct {
	Uid *int64 `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetCidInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCidInfoRequest) GoString() string {
	return s.String()
}

func (s *GetCidInfoRequest) SetUid(v int64) *GetCidInfoRequest {
	s.Uid = &v
	return s
}

type GetCidInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetCidInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCidInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetCidInfoResponseBody) SetCode(v int32) *GetCidInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetCidInfoResponseBody) SetData(v map[string]interface{}) *GetCidInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetCidInfoResponseBody) SetMessage(v string) *GetCidInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetCidInfoResponseBody) SetRequestId(v string) *GetCidInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCidInfoResponseBody) SetStatus(v string) *GetCidInfoResponseBody {
	s.Status = &v
	return s
}

type GetCidInfoResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCidInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCidInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCidInfoResponse) GoString() string {
	return s.String()
}

func (s *GetCidInfoResponse) SetHeaders(v map[string]*string) *GetCidInfoResponse {
	s.Headers = v
	return s
}

func (s *GetCidInfoResponse) SetStatusCode(v int32) *GetCidInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCidInfoResponse) SetBody(v *GetCidInfoResponseBody) *GetCidInfoResponse {
	s.Body = v
	return s
}

type GetCloudAllResourceListRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	Uid      *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetCloudAllResourceListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAllResourceListRequest) GoString() string {
	return s.String()
}

func (s *GetCloudAllResourceListRequest) SetOperaUid(v string) *GetCloudAllResourceListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetCloudAllResourceListRequest) SetUid(v string) *GetCloudAllResourceListRequest {
	s.Uid = &v
	return s
}

type GetCloudAllResourceListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetCloudAllResourceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAllResourceListResponseBody) GoString() string {
	return s.String()
}

func (s *GetCloudAllResourceListResponseBody) SetCode(v int32) *GetCloudAllResourceListResponseBody {
	s.Code = &v
	return s
}

func (s *GetCloudAllResourceListResponseBody) SetData(v map[string]interface{}) *GetCloudAllResourceListResponseBody {
	s.Data = v
	return s
}

func (s *GetCloudAllResourceListResponseBody) SetMsg(v string) *GetCloudAllResourceListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetCloudAllResourceListResponseBody) SetRequestId(v string) *GetCloudAllResourceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCloudAllResourceListResponseBody) SetStatus(v bool) *GetCloudAllResourceListResponseBody {
	s.Status = &v
	return s
}

type GetCloudAllResourceListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCloudAllResourceListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCloudAllResourceListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCloudAllResourceListResponse) GoString() string {
	return s.String()
}

func (s *GetCloudAllResourceListResponse) SetHeaders(v map[string]*string) *GetCloudAllResourceListResponse {
	s.Headers = v
	return s
}

func (s *GetCloudAllResourceListResponse) SetStatusCode(v int32) *GetCloudAllResourceListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCloudAllResourceListResponse) SetBody(v *GetCloudAllResourceListResponseBody) *GetCloudAllResourceListResponse {
	s.Body = v
	return s
}

type GetCloudResourceRequest struct {
	CloudTypeName *string `json:"CloudTypeName,omitempty" xml:"CloudTypeName,omitempty"`
	CurrentPage   *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	OperaUid      *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status        *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetCloudResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCloudResourceRequest) GoString() string {
	return s.String()
}

func (s *GetCloudResourceRequest) SetCloudTypeName(v string) *GetCloudResourceRequest {
	s.CloudTypeName = &v
	return s
}

func (s *GetCloudResourceRequest) SetCurrentPage(v int32) *GetCloudResourceRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetCloudResourceRequest) SetOperaUid(v string) *GetCloudResourceRequest {
	s.OperaUid = &v
	return s
}

func (s *GetCloudResourceRequest) SetPageSize(v int32) *GetCloudResourceRequest {
	s.PageSize = &v
	return s
}

func (s *GetCloudResourceRequest) SetStatus(v int32) *GetCloudResourceRequest {
	s.Status = &v
	return s
}

type GetCloudResourceResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetCloudResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCloudResourceResponseBody) GoString() string {
	return s.String()
}

func (s *GetCloudResourceResponseBody) SetCode(v int32) *GetCloudResourceResponseBody {
	s.Code = &v
	return s
}

func (s *GetCloudResourceResponseBody) SetData(v map[string]interface{}) *GetCloudResourceResponseBody {
	s.Data = v
	return s
}

func (s *GetCloudResourceResponseBody) SetMsg(v string) *GetCloudResourceResponseBody {
	s.Msg = &v
	return s
}

func (s *GetCloudResourceResponseBody) SetPageTotal(v int64) *GetCloudResourceResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetCloudResourceResponseBody) SetRequestId(v string) *GetCloudResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCloudResourceResponseBody) SetStatus(v string) *GetCloudResourceResponseBody {
	s.Status = &v
	return s
}

type GetCloudResourceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCloudResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCloudResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCloudResourceResponse) GoString() string {
	return s.String()
}

func (s *GetCloudResourceResponse) SetHeaders(v map[string]*string) *GetCloudResourceResponse {
	s.Headers = v
	return s
}

func (s *GetCloudResourceResponse) SetStatusCode(v int32) *GetCloudResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCloudResourceResponse) SetBody(v *GetCloudResourceResponseBody) *GetCloudResourceResponse {
	s.Body = v
	return s
}

type GetCloudResourceListRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	CloudRegionId   *string `json:"CloudRegionId,omitempty" xml:"CloudRegionId,omitempty"`
	CurrentPage     *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName    *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	IsOptional      *int32  `json:"IsOptional,omitempty" xml:"IsOptional,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrivateIp       *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	ReleaseStatus   *int32  `json:"ReleaseStatus,omitempty" xml:"ReleaseStatus,omitempty"`
	TagName         *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	Uid             *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetCloudResourceListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCloudResourceListRequest) GoString() string {
	return s.String()
}

func (s *GetCloudResourceListRequest) SetBusinessGroupId(v string) *GetCloudResourceListRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetCloudResourceListRequest) SetCloudRegionId(v string) *GetCloudResourceListRequest {
	s.CloudRegionId = &v
	return s
}

func (s *GetCloudResourceListRequest) SetCurrentPage(v int32) *GetCloudResourceListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetCloudResourceListRequest) SetId(v string) *GetCloudResourceListRequest {
	s.Id = &v
	return s
}

func (s *GetCloudResourceListRequest) SetInstanceId(v string) *GetCloudResourceListRequest {
	s.InstanceId = &v
	return s
}

func (s *GetCloudResourceListRequest) SetInstanceName(v string) *GetCloudResourceListRequest {
	s.InstanceName = &v
	return s
}

func (s *GetCloudResourceListRequest) SetIsOptional(v int32) *GetCloudResourceListRequest {
	s.IsOptional = &v
	return s
}

func (s *GetCloudResourceListRequest) SetOperaUid(v string) *GetCloudResourceListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetCloudResourceListRequest) SetPageSize(v int32) *GetCloudResourceListRequest {
	s.PageSize = &v
	return s
}

func (s *GetCloudResourceListRequest) SetPrivateIp(v string) *GetCloudResourceListRequest {
	s.PrivateIp = &v
	return s
}

func (s *GetCloudResourceListRequest) SetReleaseStatus(v int32) *GetCloudResourceListRequest {
	s.ReleaseStatus = &v
	return s
}

func (s *GetCloudResourceListRequest) SetTagName(v string) *GetCloudResourceListRequest {
	s.TagName = &v
	return s
}

func (s *GetCloudResourceListRequest) SetUid(v string) *GetCloudResourceListRequest {
	s.Uid = &v
	return s
}

type GetCloudResourceListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetCloudResourceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCloudResourceListResponseBody) GoString() string {
	return s.String()
}

func (s *GetCloudResourceListResponseBody) SetCode(v int32) *GetCloudResourceListResponseBody {
	s.Code = &v
	return s
}

func (s *GetCloudResourceListResponseBody) SetData(v map[string]interface{}) *GetCloudResourceListResponseBody {
	s.Data = v
	return s
}

func (s *GetCloudResourceListResponseBody) SetMsg(v string) *GetCloudResourceListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetCloudResourceListResponseBody) SetPageTotal(v int64) *GetCloudResourceListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetCloudResourceListResponseBody) SetRequestId(v string) *GetCloudResourceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCloudResourceListResponseBody) SetStatus(v string) *GetCloudResourceListResponseBody {
	s.Status = &v
	return s
}

type GetCloudResourceListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCloudResourceListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCloudResourceListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCloudResourceListResponse) GoString() string {
	return s.String()
}

func (s *GetCloudResourceListResponse) SetHeaders(v map[string]*string) *GetCloudResourceListResponse {
	s.Headers = v
	return s
}

func (s *GetCloudResourceListResponse) SetStatusCode(v int32) *GetCloudResourceListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCloudResourceListResponse) SetBody(v *GetCloudResourceListResponseBody) *GetCloudResourceListResponse {
	s.Body = v
	return s
}

type GetConnectInstancesRequest struct {
	Uid *int64 `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetConnectInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConnectInstancesRequest) GoString() string {
	return s.String()
}

func (s *GetConnectInstancesRequest) SetUid(v int64) *GetConnectInstancesRequest {
	s.Uid = &v
	return s
}

type GetConnectInstancesResponseBody struct {
	Code      *int64                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetConnectInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetConnectInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *GetConnectInstancesResponseBody) SetCode(v int64) *GetConnectInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *GetConnectInstancesResponseBody) SetData(v []map[string]interface{}) *GetConnectInstancesResponseBody {
	s.Data = v
	return s
}

func (s *GetConnectInstancesResponseBody) SetMessage(v string) *GetConnectInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *GetConnectInstancesResponseBody) SetRequestId(v string) *GetConnectInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetConnectInstancesResponseBody) SetStatus(v string) *GetConnectInstancesResponseBody {
	s.Status = &v
	return s
}

type GetConnectInstancesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetConnectInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetConnectInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConnectInstancesResponse) GoString() string {
	return s.String()
}

func (s *GetConnectInstancesResponse) SetHeaders(v map[string]*string) *GetConnectInstancesResponse {
	s.Headers = v
	return s
}

func (s *GetConnectInstancesResponse) SetStatusCode(v int32) *GetConnectInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetConnectInstancesResponse) SetBody(v *GetConnectInstancesResponseBody) *GetConnectInstancesResponse {
	s.Body = v
	return s
}

type GetDataSourceDetailRequest struct {
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetDataSourceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceDetailRequest) GoString() string {
	return s.String()
}

func (s *GetDataSourceDetailRequest) SetId(v int64) *GetDataSourceDetailRequest {
	s.Id = &v
	return s
}

func (s *GetDataSourceDetailRequest) SetOperaUid(v string) *GetDataSourceDetailRequest {
	s.OperaUid = &v
	return s
}

type GetDataSourceDetailResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDataSourceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataSourceDetailResponseBody) SetCode(v int32) *GetDataSourceDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetDataSourceDetailResponseBody) SetData(v map[string]interface{}) *GetDataSourceDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetDataSourceDetailResponseBody) SetMsg(v string) *GetDataSourceDetailResponseBody {
	s.Msg = &v
	return s
}

func (s *GetDataSourceDetailResponseBody) SetRequestId(v string) *GetDataSourceDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDataSourceDetailResponseBody) SetStatus(v string) *GetDataSourceDetailResponseBody {
	s.Status = &v
	return s
}

type GetDataSourceDetailResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataSourceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataSourceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceDetailResponse) GoString() string {
	return s.String()
}

func (s *GetDataSourceDetailResponse) SetHeaders(v map[string]*string) *GetDataSourceDetailResponse {
	s.Headers = v
	return s
}

func (s *GetDataSourceDetailResponse) SetStatusCode(v int32) *GetDataSourceDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataSourceDetailResponse) SetBody(v *GetDataSourceDetailResponseBody) *GetDataSourceDetailResponse {
	s.Body = v
	return s
}

type GetDataSourceListRequest struct {
	CurrentPage    *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DataSourceName *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	DataSourceType *int32  `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetDataSourceListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceListRequest) GoString() string {
	return s.String()
}

func (s *GetDataSourceListRequest) SetCurrentPage(v int32) *GetDataSourceListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetDataSourceListRequest) SetDataSourceName(v string) *GetDataSourceListRequest {
	s.DataSourceName = &v
	return s
}

func (s *GetDataSourceListRequest) SetDataSourceType(v int32) *GetDataSourceListRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetDataSourceListRequest) SetOperaUid(v string) *GetDataSourceListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetDataSourceListRequest) SetPageSize(v int32) *GetDataSourceListRequest {
	s.PageSize = &v
	return s
}

type GetDataSourceListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDataSourceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceListResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataSourceListResponseBody) SetCode(v int32) *GetDataSourceListResponseBody {
	s.Code = &v
	return s
}

func (s *GetDataSourceListResponseBody) SetData(v map[string]interface{}) *GetDataSourceListResponseBody {
	s.Data = v
	return s
}

func (s *GetDataSourceListResponseBody) SetMsg(v string) *GetDataSourceListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetDataSourceListResponseBody) SetPageTotal(v int64) *GetDataSourceListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetDataSourceListResponseBody) SetRequestId(v string) *GetDataSourceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDataSourceListResponseBody) SetStatus(v string) *GetDataSourceListResponseBody {
	s.Status = &v
	return s
}

type GetDataSourceListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataSourceListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataSourceListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceListResponse) GoString() string {
	return s.String()
}

func (s *GetDataSourceListResponse) SetHeaders(v map[string]*string) *GetDataSourceListResponse {
	s.Headers = v
	return s
}

func (s *GetDataSourceListResponse) SetStatusCode(v int32) *GetDataSourceListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataSourceListResponse) SetBody(v *GetDataSourceListResponseBody) *GetDataSourceListResponse {
	s.Body = v
	return s
}

type GetDataSourceTargetParamListRequest struct {
	DataSourceType *int32  `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetDataSourceTargetParamListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceTargetParamListRequest) GoString() string {
	return s.String()
}

func (s *GetDataSourceTargetParamListRequest) SetDataSourceType(v int32) *GetDataSourceTargetParamListRequest {
	s.DataSourceType = &v
	return s
}

func (s *GetDataSourceTargetParamListRequest) SetOperaUid(v string) *GetDataSourceTargetParamListRequest {
	s.OperaUid = &v
	return s
}

type GetDataSourceTargetParamListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDataSourceTargetParamListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceTargetParamListResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataSourceTargetParamListResponseBody) SetCode(v int32) *GetDataSourceTargetParamListResponseBody {
	s.Code = &v
	return s
}

func (s *GetDataSourceTargetParamListResponseBody) SetData(v map[string]interface{}) *GetDataSourceTargetParamListResponseBody {
	s.Data = v
	return s
}

func (s *GetDataSourceTargetParamListResponseBody) SetMsg(v string) *GetDataSourceTargetParamListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetDataSourceTargetParamListResponseBody) SetRequestId(v string) *GetDataSourceTargetParamListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDataSourceTargetParamListResponseBody) SetStatus(v string) *GetDataSourceTargetParamListResponseBody {
	s.Status = &v
	return s
}

type GetDataSourceTargetParamListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataSourceTargetParamListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataSourceTargetParamListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataSourceTargetParamListResponse) GoString() string {
	return s.String()
}

func (s *GetDataSourceTargetParamListResponse) SetHeaders(v map[string]*string) *GetDataSourceTargetParamListResponse {
	s.Headers = v
	return s
}

func (s *GetDataSourceTargetParamListResponse) SetStatusCode(v int32) *GetDataSourceTargetParamListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataSourceTargetParamListResponse) SetBody(v *GetDataSourceTargetParamListResponseBody) *GetDataSourceTargetParamListResponse {
	s.Body = v
	return s
}

type GetDataVolumeRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetDataVolumeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDataVolumeRequest) GoString() string {
	return s.String()
}

func (s *GetDataVolumeRequest) SetOperaUid(v string) *GetDataVolumeRequest {
	s.OperaUid = &v
	return s
}

type GetDataVolumeResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDataVolumeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDataVolumeResponseBody) GoString() string {
	return s.String()
}

func (s *GetDataVolumeResponseBody) SetCode(v int32) *GetDataVolumeResponseBody {
	s.Code = &v
	return s
}

func (s *GetDataVolumeResponseBody) SetData(v map[string]interface{}) *GetDataVolumeResponseBody {
	s.Data = v
	return s
}

func (s *GetDataVolumeResponseBody) SetMsg(v string) *GetDataVolumeResponseBody {
	s.Msg = &v
	return s
}

func (s *GetDataVolumeResponseBody) SetRequestId(v string) *GetDataVolumeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDataVolumeResponseBody) SetStatus(v string) *GetDataVolumeResponseBody {
	s.Status = &v
	return s
}

type GetDataVolumeResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDataVolumeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDataVolumeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDataVolumeResponse) GoString() string {
	return s.String()
}

func (s *GetDataVolumeResponse) SetHeaders(v map[string]*string) *GetDataVolumeResponse {
	s.Headers = v
	return s
}

func (s *GetDataVolumeResponse) SetStatusCode(v int32) *GetDataVolumeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDataVolumeResponse) SetBody(v *GetDataVolumeResponseBody) *GetDataVolumeResponse {
	s.Body = v
	return s
}

type GetDiagInfoRequest struct {
	CurrentPage  *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	DiagnosticId *string `json:"DiagnosticId,omitempty" xml:"DiagnosticId,omitempty"`
	EndTime      *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime    *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Uid          *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetDiagInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDiagInfoRequest) GoString() string {
	return s.String()
}

func (s *GetDiagInfoRequest) SetCurrentPage(v int32) *GetDiagInfoRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetDiagInfoRequest) SetDiagnosticId(v string) *GetDiagInfoRequest {
	s.DiagnosticId = &v
	return s
}

func (s *GetDiagInfoRequest) SetEndTime(v int64) *GetDiagInfoRequest {
	s.EndTime = &v
	return s
}

func (s *GetDiagInfoRequest) SetPageSize(v int32) *GetDiagInfoRequest {
	s.PageSize = &v
	return s
}

func (s *GetDiagInfoRequest) SetStartTime(v int64) *GetDiagInfoRequest {
	s.StartTime = &v
	return s
}

func (s *GetDiagInfoRequest) SetStatus(v string) *GetDiagInfoRequest {
	s.Status = &v
	return s
}

func (s *GetDiagInfoRequest) SetUid(v int64) *GetDiagInfoRequest {
	s.Uid = &v
	return s
}

type GetDiagInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDiagInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDiagInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetDiagInfoResponseBody) SetCode(v int32) *GetDiagInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetDiagInfoResponseBody) SetData(v map[string]interface{}) *GetDiagInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetDiagInfoResponseBody) SetMsg(v string) *GetDiagInfoResponseBody {
	s.Msg = &v
	return s
}

func (s *GetDiagInfoResponseBody) SetPageTotal(v int64) *GetDiagInfoResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetDiagInfoResponseBody) SetRequestId(v string) *GetDiagInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDiagInfoResponseBody) SetStatus(v string) *GetDiagInfoResponseBody {
	s.Status = &v
	return s
}

type GetDiagInfoResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDiagInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDiagInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDiagInfoResponse) GoString() string {
	return s.String()
}

func (s *GetDiagInfoResponse) SetHeaders(v map[string]*string) *GetDiagInfoResponse {
	s.Headers = v
	return s
}

func (s *GetDiagInfoResponse) SetStatusCode(v int32) *GetDiagInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDiagInfoResponse) SetBody(v *GetDiagInfoResponseBody) *GetDiagInfoResponse {
	s.Body = v
	return s
}

type GetDomainConfigRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	EventId         *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductId       *int32  `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
}

func (s GetDomainConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDomainConfigRequest) GoString() string {
	return s.String()
}

func (s *GetDomainConfigRequest) SetBusinessGroupId(v string) *GetDomainConfigRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetDomainConfigRequest) SetEventId(v string) *GetDomainConfigRequest {
	s.EventId = &v
	return s
}

func (s *GetDomainConfigRequest) SetOperaUid(v string) *GetDomainConfigRequest {
	s.OperaUid = &v
	return s
}

func (s *GetDomainConfigRequest) SetProductId(v int32) *GetDomainConfigRequest {
	s.ProductId = &v
	return s
}

type GetDomainConfigResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDomainConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDomainConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetDomainConfigResponseBody) SetCode(v int32) *GetDomainConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetDomainConfigResponseBody) SetData(v map[string]interface{}) *GetDomainConfigResponseBody {
	s.Data = v
	return s
}

func (s *GetDomainConfigResponseBody) SetMsg(v string) *GetDomainConfigResponseBody {
	s.Msg = &v
	return s
}

func (s *GetDomainConfigResponseBody) SetRequestId(v string) *GetDomainConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDomainConfigResponseBody) SetStatus(v string) *GetDomainConfigResponseBody {
	s.Status = &v
	return s
}

type GetDomainConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDomainConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDomainConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDomainConfigResponse) GoString() string {
	return s.String()
}

func (s *GetDomainConfigResponse) SetHeaders(v map[string]*string) *GetDomainConfigResponse {
	s.Headers = v
	return s
}

func (s *GetDomainConfigResponse) SetStatusCode(v int32) *GetDomainConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDomainConfigResponse) SetBody(v *GetDomainConfigResponseBody) *GetDomainConfigResponse {
	s.Body = v
	return s
}

type GetEventAbNormalDetailRequest struct {
	Id       *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetEventAbNormalDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventAbNormalDetailRequest) GoString() string {
	return s.String()
}

func (s *GetEventAbNormalDetailRequest) SetId(v string) *GetEventAbNormalDetailRequest {
	s.Id = &v
	return s
}

func (s *GetEventAbNormalDetailRequest) SetOperaUid(v string) *GetEventAbNormalDetailRequest {
	s.OperaUid = &v
	return s
}

type GetEventAbNormalDetailResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetEventAbNormalDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventAbNormalDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventAbNormalDetailResponseBody) SetCode(v int32) *GetEventAbNormalDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventAbNormalDetailResponseBody) SetData(v map[string]interface{}) *GetEventAbNormalDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetEventAbNormalDetailResponseBody) SetMsg(v string) *GetEventAbNormalDetailResponseBody {
	s.Msg = &v
	return s
}

func (s *GetEventAbNormalDetailResponseBody) SetRequestId(v string) *GetEventAbNormalDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventAbNormalDetailResponseBody) SetStatus(v string) *GetEventAbNormalDetailResponseBody {
	s.Status = &v
	return s
}

type GetEventAbNormalDetailResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventAbNormalDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventAbNormalDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventAbNormalDetailResponse) GoString() string {
	return s.String()
}

func (s *GetEventAbNormalDetailResponse) SetHeaders(v map[string]*string) *GetEventAbNormalDetailResponse {
	s.Headers = v
	return s
}

func (s *GetEventAbNormalDetailResponse) SetStatusCode(v int32) *GetEventAbNormalDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventAbNormalDetailResponse) SetBody(v *GetEventAbNormalDetailResponseBody) *GetEventAbNormalDetailResponse {
	s.Body = v
	return s
}

type GetEventAbNormalDetailTrendDataRequest struct {
	BeginTime *int64  `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime   *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetEventAbNormalDetailTrendDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventAbNormalDetailTrendDataRequest) GoString() string {
	return s.String()
}

func (s *GetEventAbNormalDetailTrendDataRequest) SetBeginTime(v int64) *GetEventAbNormalDetailTrendDataRequest {
	s.BeginTime = &v
	return s
}

func (s *GetEventAbNormalDetailTrendDataRequest) SetEndTime(v int64) *GetEventAbNormalDetailTrendDataRequest {
	s.EndTime = &v
	return s
}

func (s *GetEventAbNormalDetailTrendDataRequest) SetId(v string) *GetEventAbNormalDetailTrendDataRequest {
	s.Id = &v
	return s
}

func (s *GetEventAbNormalDetailTrendDataRequest) SetOperaUid(v string) *GetEventAbNormalDetailTrendDataRequest {
	s.OperaUid = &v
	return s
}

type GetEventAbNormalDetailTrendDataResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetEventAbNormalDetailTrendDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventAbNormalDetailTrendDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventAbNormalDetailTrendDataResponseBody) SetCode(v int32) *GetEventAbNormalDetailTrendDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventAbNormalDetailTrendDataResponseBody) SetData(v map[string]interface{}) *GetEventAbNormalDetailTrendDataResponseBody {
	s.Data = v
	return s
}

func (s *GetEventAbNormalDetailTrendDataResponseBody) SetMsg(v string) *GetEventAbNormalDetailTrendDataResponseBody {
	s.Msg = &v
	return s
}

func (s *GetEventAbNormalDetailTrendDataResponseBody) SetRequestId(v string) *GetEventAbNormalDetailTrendDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventAbNormalDetailTrendDataResponseBody) SetStatus(v string) *GetEventAbNormalDetailTrendDataResponseBody {
	s.Status = &v
	return s
}

type GetEventAbNormalDetailTrendDataResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventAbNormalDetailTrendDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventAbNormalDetailTrendDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventAbNormalDetailTrendDataResponse) GoString() string {
	return s.String()
}

func (s *GetEventAbNormalDetailTrendDataResponse) SetHeaders(v map[string]*string) *GetEventAbNormalDetailTrendDataResponse {
	s.Headers = v
	return s
}

func (s *GetEventAbNormalDetailTrendDataResponse) SetStatusCode(v int32) *GetEventAbNormalDetailTrendDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventAbNormalDetailTrendDataResponse) SetBody(v *GetEventAbNormalDetailTrendDataResponseBody) *GetEventAbNormalDetailTrendDataResponse {
	s.Body = v
	return s
}

type GetEventAbNormalListRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetEventAbNormalListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventAbNormalListRequest) GoString() string {
	return s.String()
}

func (s *GetEventAbNormalListRequest) SetEventId(v string) *GetEventAbNormalListRequest {
	s.EventId = &v
	return s
}

func (s *GetEventAbNormalListRequest) SetOperaUid(v string) *GetEventAbNormalListRequest {
	s.OperaUid = &v
	return s
}

type GetEventAbNormalListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetEventAbNormalListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventAbNormalListResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventAbNormalListResponseBody) SetCode(v int32) *GetEventAbNormalListResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventAbNormalListResponseBody) SetData(v map[string]interface{}) *GetEventAbNormalListResponseBody {
	s.Data = v
	return s
}

func (s *GetEventAbNormalListResponseBody) SetMsg(v string) *GetEventAbNormalListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetEventAbNormalListResponseBody) SetRequestId(v string) *GetEventAbNormalListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventAbNormalListResponseBody) SetStatus(v string) *GetEventAbNormalListResponseBody {
	s.Status = &v
	return s
}

type GetEventAbNormalListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventAbNormalListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventAbNormalListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventAbNormalListResponse) GoString() string {
	return s.String()
}

func (s *GetEventAbNormalListResponse) SetHeaders(v map[string]*string) *GetEventAbNormalListResponse {
	s.Headers = v
	return s
}

func (s *GetEventAbNormalListResponse) SetStatusCode(v int32) *GetEventAbNormalListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventAbNormalListResponse) SetBody(v *GetEventAbNormalListResponseBody) *GetEventAbNormalListResponse {
	s.Body = v
	return s
}

type GetEventBusinessMetricListRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetEventBusinessMetricListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventBusinessMetricListRequest) GoString() string {
	return s.String()
}

func (s *GetEventBusinessMetricListRequest) SetEventId(v string) *GetEventBusinessMetricListRequest {
	s.EventId = &v
	return s
}

func (s *GetEventBusinessMetricListRequest) SetOperaUid(v string) *GetEventBusinessMetricListRequest {
	s.OperaUid = &v
	return s
}

type GetEventBusinessMetricListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetEventBusinessMetricListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventBusinessMetricListResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventBusinessMetricListResponseBody) SetCode(v int32) *GetEventBusinessMetricListResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventBusinessMetricListResponseBody) SetData(v map[string]interface{}) *GetEventBusinessMetricListResponseBody {
	s.Data = v
	return s
}

func (s *GetEventBusinessMetricListResponseBody) SetMsg(v string) *GetEventBusinessMetricListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetEventBusinessMetricListResponseBody) SetRequestId(v string) *GetEventBusinessMetricListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventBusinessMetricListResponseBody) SetStatus(v string) *GetEventBusinessMetricListResponseBody {
	s.Status = &v
	return s
}

type GetEventBusinessMetricListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventBusinessMetricListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventBusinessMetricListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventBusinessMetricListResponse) GoString() string {
	return s.String()
}

func (s *GetEventBusinessMetricListResponse) SetHeaders(v map[string]*string) *GetEventBusinessMetricListResponse {
	s.Headers = v
	return s
}

func (s *GetEventBusinessMetricListResponse) SetStatusCode(v int32) *GetEventBusinessMetricListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventBusinessMetricListResponse) SetBody(v *GetEventBusinessMetricListResponseBody) *GetEventBusinessMetricListResponse {
	s.Body = v
	return s
}

type GetEventDetailRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetEventDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventDetailRequest) GoString() string {
	return s.String()
}

func (s *GetEventDetailRequest) SetEventId(v string) *GetEventDetailRequest {
	s.EventId = &v
	return s
}

func (s *GetEventDetailRequest) SetId(v int64) *GetEventDetailRequest {
	s.Id = &v
	return s
}

func (s *GetEventDetailRequest) SetOperaUid(v string) *GetEventDetailRequest {
	s.OperaUid = &v
	return s
}

type GetEventDetailResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetEventDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventDetailResponseBody) SetCode(v int32) *GetEventDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventDetailResponseBody) SetData(v map[string]interface{}) *GetEventDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetEventDetailResponseBody) SetMsg(v string) *GetEventDetailResponseBody {
	s.Msg = &v
	return s
}

func (s *GetEventDetailResponseBody) SetRequestId(v string) *GetEventDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventDetailResponseBody) SetStatus(v string) *GetEventDetailResponseBody {
	s.Status = &v
	return s
}

type GetEventDetailResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventDetailResponse) GoString() string {
	return s.String()
}

func (s *GetEventDetailResponse) SetHeaders(v map[string]*string) *GetEventDetailResponse {
	s.Headers = v
	return s
}

func (s *GetEventDetailResponse) SetStatusCode(v int32) *GetEventDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventDetailResponse) SetBody(v *GetEventDetailResponseBody) *GetEventDetailResponse {
	s.Body = v
	return s
}

type GetEventRootCauseRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetEventRootCauseRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventRootCauseRequest) GoString() string {
	return s.String()
}

func (s *GetEventRootCauseRequest) SetEventId(v string) *GetEventRootCauseRequest {
	s.EventId = &v
	return s
}

func (s *GetEventRootCauseRequest) SetOperaUid(v string) *GetEventRootCauseRequest {
	s.OperaUid = &v
	return s
}

type GetEventRootCauseResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int32                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetEventRootCauseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventRootCauseResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventRootCauseResponseBody) SetCode(v int32) *GetEventRootCauseResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventRootCauseResponseBody) SetData(v map[string]interface{}) *GetEventRootCauseResponseBody {
	s.Data = v
	return s
}

func (s *GetEventRootCauseResponseBody) SetMsg(v string) *GetEventRootCauseResponseBody {
	s.Msg = &v
	return s
}

func (s *GetEventRootCauseResponseBody) SetPageTotal(v int32) *GetEventRootCauseResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetEventRootCauseResponseBody) SetRequestId(v string) *GetEventRootCauseResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventRootCauseResponseBody) SetStatus(v string) *GetEventRootCauseResponseBody {
	s.Status = &v
	return s
}

type GetEventRootCauseResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventRootCauseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventRootCauseResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventRootCauseResponse) GoString() string {
	return s.String()
}

func (s *GetEventRootCauseResponse) SetHeaders(v map[string]*string) *GetEventRootCauseResponse {
	s.Headers = v
	return s
}

func (s *GetEventRootCauseResponse) SetStatusCode(v int32) *GetEventRootCauseResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventRootCauseResponse) SetBody(v *GetEventRootCauseResponseBody) *GetEventRootCauseResponse {
	s.Body = v
	return s
}

type GetEventSequentialTrentRequest struct {
	AliUid   *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetEventSequentialTrentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventSequentialTrentRequest) GoString() string {
	return s.String()
}

func (s *GetEventSequentialTrentRequest) SetAliUid(v string) *GetEventSequentialTrentRequest {
	s.AliUid = &v
	return s
}

func (s *GetEventSequentialTrentRequest) SetEventId(v string) *GetEventSequentialTrentRequest {
	s.EventId = &v
	return s
}

func (s *GetEventSequentialTrentRequest) SetOperaUid(v string) *GetEventSequentialTrentRequest {
	s.OperaUid = &v
	return s
}

type GetEventSequentialTrentResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	PageTotal *int32                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetEventSequentialTrentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventSequentialTrentResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventSequentialTrentResponseBody) SetCode(v int32) *GetEventSequentialTrentResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventSequentialTrentResponseBody) SetData(v map[string]interface{}) *GetEventSequentialTrentResponseBody {
	s.Data = v
	return s
}

func (s *GetEventSequentialTrentResponseBody) SetMessage(v string) *GetEventSequentialTrentResponseBody {
	s.Message = &v
	return s
}

func (s *GetEventSequentialTrentResponseBody) SetPageTotal(v int32) *GetEventSequentialTrentResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetEventSequentialTrentResponseBody) SetRequestId(v string) *GetEventSequentialTrentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventSequentialTrentResponseBody) SetStatus(v string) *GetEventSequentialTrentResponseBody {
	s.Status = &v
	return s
}

type GetEventSequentialTrentResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventSequentialTrentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventSequentialTrentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventSequentialTrentResponse) GoString() string {
	return s.String()
}

func (s *GetEventSequentialTrentResponse) SetHeaders(v map[string]*string) *GetEventSequentialTrentResponse {
	s.Headers = v
	return s
}

func (s *GetEventSequentialTrentResponse) SetStatusCode(v int32) *GetEventSequentialTrentResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventSequentialTrentResponse) SetBody(v *GetEventSequentialTrentResponseBody) *GetEventSequentialTrentResponse {
	s.Body = v
	return s
}

type GetEventStatisticsRequest struct {
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Uid       *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetEventStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventStatisticsRequest) GoString() string {
	return s.String()
}

func (s *GetEventStatisticsRequest) SetEndTime(v string) *GetEventStatisticsRequest {
	s.EndTime = &v
	return s
}

func (s *GetEventStatisticsRequest) SetOperaUid(v string) *GetEventStatisticsRequest {
	s.OperaUid = &v
	return s
}

func (s *GetEventStatisticsRequest) SetStartTime(v string) *GetEventStatisticsRequest {
	s.StartTime = &v
	return s
}

func (s *GetEventStatisticsRequest) SetUid(v int64) *GetEventStatisticsRequest {
	s.Uid = &v
	return s
}

type GetEventStatisticsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetEventStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventStatisticsResponseBody) SetCode(v int32) *GetEventStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventStatisticsResponseBody) SetData(v map[string]interface{}) *GetEventStatisticsResponseBody {
	s.Data = v
	return s
}

func (s *GetEventStatisticsResponseBody) SetMsg(v string) *GetEventStatisticsResponseBody {
	s.Msg = &v
	return s
}

func (s *GetEventStatisticsResponseBody) SetRequestId(v string) *GetEventStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventStatisticsResponseBody) SetStatus(v string) *GetEventStatisticsResponseBody {
	s.Status = &v
	return s
}

type GetEventStatisticsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventStatisticsResponse) GoString() string {
	return s.String()
}

func (s *GetEventStatisticsResponse) SetHeaders(v map[string]*string) *GetEventStatisticsResponse {
	s.Headers = v
	return s
}

func (s *GetEventStatisticsResponse) SetStatusCode(v int32) *GetEventStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventStatisticsResponse) SetBody(v *GetEventStatisticsResponseBody) *GetEventStatisticsResponse {
	s.Body = v
	return s
}

type GetEventTrentRequest struct {
	EndTime         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	GranularityType *string `json:"GranularityType,omitempty" xml:"GranularityType,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	StartTime       *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TimeType        *string `json:"TimeType,omitempty" xml:"TimeType,omitempty"`
	Uid             *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetEventTrentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventTrentRequest) GoString() string {
	return s.String()
}

func (s *GetEventTrentRequest) SetEndTime(v string) *GetEventTrentRequest {
	s.EndTime = &v
	return s
}

func (s *GetEventTrentRequest) SetGranularityType(v string) *GetEventTrentRequest {
	s.GranularityType = &v
	return s
}

func (s *GetEventTrentRequest) SetOperaUid(v string) *GetEventTrentRequest {
	s.OperaUid = &v
	return s
}

func (s *GetEventTrentRequest) SetStartTime(v string) *GetEventTrentRequest {
	s.StartTime = &v
	return s
}

func (s *GetEventTrentRequest) SetTimeType(v string) *GetEventTrentRequest {
	s.TimeType = &v
	return s
}

func (s *GetEventTrentRequest) SetUid(v int64) *GetEventTrentRequest {
	s.Uid = &v
	return s
}

type GetEventTrentResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetEventTrentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventTrentResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventTrentResponseBody) SetCode(v int32) *GetEventTrentResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventTrentResponseBody) SetData(v map[string]interface{}) *GetEventTrentResponseBody {
	s.Data = v
	return s
}

func (s *GetEventTrentResponseBody) SetMsg(v string) *GetEventTrentResponseBody {
	s.Msg = &v
	return s
}

func (s *GetEventTrentResponseBody) SetPageTotal(v int64) *GetEventTrentResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetEventTrentResponseBody) SetRequestId(v string) *GetEventTrentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventTrentResponseBody) SetStatus(v string) *GetEventTrentResponseBody {
	s.Status = &v
	return s
}

type GetEventTrentResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventTrentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventTrentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventTrentResponse) GoString() string {
	return s.String()
}

func (s *GetEventTrentResponse) SetHeaders(v map[string]*string) *GetEventTrentResponse {
	s.Headers = v
	return s
}

func (s *GetEventTrentResponse) SetStatusCode(v int32) *GetEventTrentResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventTrentResponse) SetBody(v *GetEventTrentResponseBody) *GetEventTrentResponse {
	s.Body = v
	return s
}

type GetEventTypeRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductId       *int32  `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
}

func (s GetEventTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventTypeRequest) GoString() string {
	return s.String()
}

func (s *GetEventTypeRequest) SetBusinessGroupId(v string) *GetEventTypeRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetEventTypeRequest) SetId(v int64) *GetEventTypeRequest {
	s.Id = &v
	return s
}

func (s *GetEventTypeRequest) SetOperaUid(v string) *GetEventTypeRequest {
	s.OperaUid = &v
	return s
}

func (s *GetEventTypeRequest) SetProductId(v int32) *GetEventTypeRequest {
	s.ProductId = &v
	return s
}

type GetEventTypeResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetEventTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventTypeResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventTypeResponseBody) SetCode(v int32) *GetEventTypeResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventTypeResponseBody) SetData(v map[string]interface{}) *GetEventTypeResponseBody {
	s.Data = v
	return s
}

func (s *GetEventTypeResponseBody) SetMsg(v string) *GetEventTypeResponseBody {
	s.Msg = &v
	return s
}

func (s *GetEventTypeResponseBody) SetRequestId(v string) *GetEventTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventTypeResponseBody) SetStatus(v string) *GetEventTypeResponseBody {
	s.Status = &v
	return s
}

type GetEventTypeResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventTypeResponse) GoString() string {
	return s.String()
}

func (s *GetEventTypeResponse) SetHeaders(v map[string]*string) *GetEventTypeResponse {
	s.Headers = v
	return s
}

func (s *GetEventTypeResponse) SetStatusCode(v int32) *GetEventTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventTypeResponse) SetBody(v *GetEventTypeResponseBody) *GetEventTypeResponse {
	s.Body = v
	return s
}

type GetExceptionsRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetExceptionsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetExceptionsRequest) GoString() string {
	return s.String()
}

func (s *GetExceptionsRequest) SetOperaUid(v string) *GetExceptionsRequest {
	s.OperaUid = &v
	return s
}

type GetExceptionsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetExceptionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetExceptionsResponseBody) GoString() string {
	return s.String()
}

func (s *GetExceptionsResponseBody) SetCode(v int32) *GetExceptionsResponseBody {
	s.Code = &v
	return s
}

func (s *GetExceptionsResponseBody) SetData(v map[string]interface{}) *GetExceptionsResponseBody {
	s.Data = v
	return s
}

func (s *GetExceptionsResponseBody) SetMsg(v string) *GetExceptionsResponseBody {
	s.Msg = &v
	return s
}

func (s *GetExceptionsResponseBody) SetRequestId(v string) *GetExceptionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetExceptionsResponseBody) SetStatus(v string) *GetExceptionsResponseBody {
	s.Status = &v
	return s
}

type GetExceptionsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetExceptionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetExceptionsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetExceptionsResponse) GoString() string {
	return s.String()
}

func (s *GetExceptionsResponse) SetHeaders(v map[string]*string) *GetExceptionsResponse {
	s.Headers = v
	return s
}

func (s *GetExceptionsResponse) SetStatusCode(v int32) *GetExceptionsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetExceptionsResponse) SetBody(v *GetExceptionsResponseBody) *GetExceptionsResponse {
	s.Body = v
	return s
}

type GetExtendRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MetricId   *string `json:"MetricId,omitempty" xml:"MetricId,omitempty"`
	OperaUid   *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetExtendRequest) String() string {
	return tea.Prettify(s)
}

func (s GetExtendRequest) GoString() string {
	return s.String()
}

func (s *GetExtendRequest) SetInstanceId(v string) *GetExtendRequest {
	s.InstanceId = &v
	return s
}

func (s *GetExtendRequest) SetMetricId(v string) *GetExtendRequest {
	s.MetricId = &v
	return s
}

func (s *GetExtendRequest) SetOperaUid(v string) *GetExtendRequest {
	s.OperaUid = &v
	return s
}

type GetExtendResponse struct {
	Headers    map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
}

func (s GetExtendResponse) String() string {
	return tea.Prettify(s)
}

func (s GetExtendResponse) GoString() string {
	return s.String()
}

func (s *GetExtendResponse) SetHeaders(v map[string]*string) *GetExtendResponse {
	s.Headers = v
	return s
}

func (s *GetExtendResponse) SetStatusCode(v int32) *GetExtendResponse {
	s.StatusCode = &v
	return s
}

type GetForecastBusinessMetricRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetForecastBusinessMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s GetForecastBusinessMetricRequest) GoString() string {
	return s.String()
}

func (s *GetForecastBusinessMetricRequest) SetEventId(v string) *GetForecastBusinessMetricRequest {
	s.EventId = &v
	return s
}

func (s *GetForecastBusinessMetricRequest) SetOperaUid(v string) *GetForecastBusinessMetricRequest {
	s.OperaUid = &v
	return s
}

type GetForecastBusinessMetricResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetForecastBusinessMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetForecastBusinessMetricResponseBody) GoString() string {
	return s.String()
}

func (s *GetForecastBusinessMetricResponseBody) SetCode(v int32) *GetForecastBusinessMetricResponseBody {
	s.Code = &v
	return s
}

func (s *GetForecastBusinessMetricResponseBody) SetData(v map[string]interface{}) *GetForecastBusinessMetricResponseBody {
	s.Data = v
	return s
}

func (s *GetForecastBusinessMetricResponseBody) SetMsg(v string) *GetForecastBusinessMetricResponseBody {
	s.Msg = &v
	return s
}

func (s *GetForecastBusinessMetricResponseBody) SetRequestId(v string) *GetForecastBusinessMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetForecastBusinessMetricResponseBody) SetStatus(v string) *GetForecastBusinessMetricResponseBody {
	s.Status = &v
	return s
}

type GetForecastBusinessMetricResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetForecastBusinessMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetForecastBusinessMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s GetForecastBusinessMetricResponse) GoString() string {
	return s.String()
}

func (s *GetForecastBusinessMetricResponse) SetHeaders(v map[string]*string) *GetForecastBusinessMetricResponse {
	s.Headers = v
	return s
}

func (s *GetForecastBusinessMetricResponse) SetStatusCode(v int32) *GetForecastBusinessMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *GetForecastBusinessMetricResponse) SetBody(v *GetForecastBusinessMetricResponseBody) *GetForecastBusinessMetricResponse {
	s.Body = v
	return s
}

type GetFunctionValidInfoRequest struct {
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	OperaUid     *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	RegionCode   *string `json:"RegionCode,omitempty" xml:"RegionCode,omitempty"`
	ServiceName  *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s GetFunctionValidInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFunctionValidInfoRequest) GoString() string {
	return s.String()
}

func (s *GetFunctionValidInfoRequest) SetFunctionName(v string) *GetFunctionValidInfoRequest {
	s.FunctionName = &v
	return s
}

func (s *GetFunctionValidInfoRequest) SetOperaUid(v string) *GetFunctionValidInfoRequest {
	s.OperaUid = &v
	return s
}

func (s *GetFunctionValidInfoRequest) SetRegionCode(v string) *GetFunctionValidInfoRequest {
	s.RegionCode = &v
	return s
}

func (s *GetFunctionValidInfoRequest) SetServiceName(v string) *GetFunctionValidInfoRequest {
	s.ServiceName = &v
	return s
}

type GetFunctionValidInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetFunctionValidInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFunctionValidInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetFunctionValidInfoResponseBody) SetCode(v int32) *GetFunctionValidInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetFunctionValidInfoResponseBody) SetData(v map[string]interface{}) *GetFunctionValidInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetFunctionValidInfoResponseBody) SetMessage(v string) *GetFunctionValidInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetFunctionValidInfoResponseBody) SetRequestId(v string) *GetFunctionValidInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFunctionValidInfoResponseBody) SetStatus(v string) *GetFunctionValidInfoResponseBody {
	s.Status = &v
	return s
}

type GetFunctionValidInfoResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFunctionValidInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFunctionValidInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFunctionValidInfoResponse) GoString() string {
	return s.String()
}

func (s *GetFunctionValidInfoResponse) SetHeaders(v map[string]*string) *GetFunctionValidInfoResponse {
	s.Headers = v
	return s
}

func (s *GetFunctionValidInfoResponse) SetStatusCode(v int32) *GetFunctionValidInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFunctionValidInfoResponse) SetBody(v *GetFunctionValidInfoResponseBody) *GetFunctionValidInfoResponse {
	s.Body = v
	return s
}

type GetGroupByDimensionDataRequest struct {
	End      *int64  `json:"End,omitempty" xml:"End,omitempty"`
	Flag     *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	GroupBy  *string `json:"GroupBy,omitempty" xml:"GroupBy,omitempty"`
	MetricId *string `json:"MetricId,omitempty" xml:"MetricId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	Start    *int64  `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetGroupByDimensionDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGroupByDimensionDataRequest) GoString() string {
	return s.String()
}

func (s *GetGroupByDimensionDataRequest) SetEnd(v int64) *GetGroupByDimensionDataRequest {
	s.End = &v
	return s
}

func (s *GetGroupByDimensionDataRequest) SetFlag(v string) *GetGroupByDimensionDataRequest {
	s.Flag = &v
	return s
}

func (s *GetGroupByDimensionDataRequest) SetGroupBy(v string) *GetGroupByDimensionDataRequest {
	s.GroupBy = &v
	return s
}

func (s *GetGroupByDimensionDataRequest) SetMetricId(v string) *GetGroupByDimensionDataRequest {
	s.MetricId = &v
	return s
}

func (s *GetGroupByDimensionDataRequest) SetOperaUid(v string) *GetGroupByDimensionDataRequest {
	s.OperaUid = &v
	return s
}

func (s *GetGroupByDimensionDataRequest) SetStart(v int64) *GetGroupByDimensionDataRequest {
	s.Start = &v
	return s
}

type GetGroupByDimensionDataResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetGroupByDimensionDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGroupByDimensionDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetGroupByDimensionDataResponseBody) SetCode(v int32) *GetGroupByDimensionDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetGroupByDimensionDataResponseBody) SetData(v map[string]interface{}) *GetGroupByDimensionDataResponseBody {
	s.Data = v
	return s
}

func (s *GetGroupByDimensionDataResponseBody) SetMsg(v string) *GetGroupByDimensionDataResponseBody {
	s.Msg = &v
	return s
}

func (s *GetGroupByDimensionDataResponseBody) SetPageTotal(v int64) *GetGroupByDimensionDataResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetGroupByDimensionDataResponseBody) SetRequestId(v string) *GetGroupByDimensionDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGroupByDimensionDataResponseBody) SetStatus(v string) *GetGroupByDimensionDataResponseBody {
	s.Status = &v
	return s
}

type GetGroupByDimensionDataResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetGroupByDimensionDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetGroupByDimensionDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGroupByDimensionDataResponse) GoString() string {
	return s.String()
}

func (s *GetGroupByDimensionDataResponse) SetHeaders(v map[string]*string) *GetGroupByDimensionDataResponse {
	s.Headers = v
	return s
}

func (s *GetGroupByDimensionDataResponse) SetStatusCode(v int32) *GetGroupByDimensionDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetGroupByDimensionDataResponse) SetBody(v *GetGroupByDimensionDataResponseBody) *GetGroupByDimensionDataResponse {
	s.Body = v
	return s
}

type GetGroupResourceNumRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetGroupResourceNumRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGroupResourceNumRequest) GoString() string {
	return s.String()
}

func (s *GetGroupResourceNumRequest) SetBusinessGroupId(v string) *GetGroupResourceNumRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetGroupResourceNumRequest) SetOperaUid(v string) *GetGroupResourceNumRequest {
	s.OperaUid = &v
	return s
}

type GetGroupResourceNumResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetGroupResourceNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGroupResourceNumResponseBody) GoString() string {
	return s.String()
}

func (s *GetGroupResourceNumResponseBody) SetCode(v int32) *GetGroupResourceNumResponseBody {
	s.Code = &v
	return s
}

func (s *GetGroupResourceNumResponseBody) SetData(v map[string]interface{}) *GetGroupResourceNumResponseBody {
	s.Data = v
	return s
}

func (s *GetGroupResourceNumResponseBody) SetMessage(v string) *GetGroupResourceNumResponseBody {
	s.Message = &v
	return s
}

func (s *GetGroupResourceNumResponseBody) SetRequestId(v string) *GetGroupResourceNumResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGroupResourceNumResponseBody) SetStatus(v string) *GetGroupResourceNumResponseBody {
	s.Status = &v
	return s
}

type GetGroupResourceNumResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetGroupResourceNumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetGroupResourceNumResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGroupResourceNumResponse) GoString() string {
	return s.String()
}

func (s *GetGroupResourceNumResponse) SetHeaders(v map[string]*string) *GetGroupResourceNumResponse {
	s.Headers = v
	return s
}

func (s *GetGroupResourceNumResponse) SetStatusCode(v int32) *GetGroupResourceNumResponse {
	s.StatusCode = &v
	return s
}

func (s *GetGroupResourceNumResponse) SetBody(v *GetGroupResourceNumResponseBody) *GetGroupResourceNumResponse {
	s.Body = v
	return s
}

type GetGroupTopologyTagRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetGroupTopologyTagRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGroupTopologyTagRequest) GoString() string {
	return s.String()
}

func (s *GetGroupTopologyTagRequest) SetBusinessGroupId(v string) *GetGroupTopologyTagRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetGroupTopologyTagRequest) SetOperaUid(v string) *GetGroupTopologyTagRequest {
	s.OperaUid = &v
	return s
}

type GetGroupTopologyTagResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetGroupTopologyTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGroupTopologyTagResponseBody) GoString() string {
	return s.String()
}

func (s *GetGroupTopologyTagResponseBody) SetCode(v int32) *GetGroupTopologyTagResponseBody {
	s.Code = &v
	return s
}

func (s *GetGroupTopologyTagResponseBody) SetData(v map[string]interface{}) *GetGroupTopologyTagResponseBody {
	s.Data = v
	return s
}

func (s *GetGroupTopologyTagResponseBody) SetMsg(v string) *GetGroupTopologyTagResponseBody {
	s.Msg = &v
	return s
}

func (s *GetGroupTopologyTagResponseBody) SetRequestId(v string) *GetGroupTopologyTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGroupTopologyTagResponseBody) SetStatus(v string) *GetGroupTopologyTagResponseBody {
	s.Status = &v
	return s
}

type GetGroupTopologyTagResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetGroupTopologyTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetGroupTopologyTagResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGroupTopologyTagResponse) GoString() string {
	return s.String()
}

func (s *GetGroupTopologyTagResponse) SetHeaders(v map[string]*string) *GetGroupTopologyTagResponse {
	s.Headers = v
	return s
}

func (s *GetGroupTopologyTagResponse) SetStatusCode(v int32) *GetGroupTopologyTagResponse {
	s.StatusCode = &v
	return s
}

func (s *GetGroupTopologyTagResponse) SetBody(v *GetGroupTopologyTagResponseBody) *GetGroupTopologyTagResponse {
	s.Body = v
	return s
}

type GetIncidentAllRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetIncidentAllRequest) String() string {
	return tea.Prettify(s)
}

func (s GetIncidentAllRequest) GoString() string {
	return s.String()
}

func (s *GetIncidentAllRequest) SetOperaUid(v string) *GetIncidentAllRequest {
	s.OperaUid = &v
	return s
}

type GetIncidentAllResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetIncidentAllResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetIncidentAllResponseBody) GoString() string {
	return s.String()
}

func (s *GetIncidentAllResponseBody) SetCode(v int32) *GetIncidentAllResponseBody {
	s.Code = &v
	return s
}

func (s *GetIncidentAllResponseBody) SetData(v map[string]interface{}) *GetIncidentAllResponseBody {
	s.Data = v
	return s
}

func (s *GetIncidentAllResponseBody) SetMsg(v string) *GetIncidentAllResponseBody {
	s.Msg = &v
	return s
}

func (s *GetIncidentAllResponseBody) SetRequestId(v string) *GetIncidentAllResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetIncidentAllResponseBody) SetStatus(v string) *GetIncidentAllResponseBody {
	s.Status = &v
	return s
}

type GetIncidentAllResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetIncidentAllResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetIncidentAllResponse) String() string {
	return tea.Prettify(s)
}

func (s GetIncidentAllResponse) GoString() string {
	return s.String()
}

func (s *GetIncidentAllResponse) SetHeaders(v map[string]*string) *GetIncidentAllResponse {
	s.Headers = v
	return s
}

func (s *GetIncidentAllResponse) SetStatusCode(v int32) *GetIncidentAllResponse {
	s.StatusCode = &v
	return s
}

func (s *GetIncidentAllResponse) SetBody(v *GetIncidentAllResponseBody) *GetIncidentAllResponse {
	s.Body = v
	return s
}

type GetIndexDialysisArrayRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	CloudResourceId *string `json:"CloudResourceId,omitempty" xml:"CloudResourceId,omitempty"`
	CloudTypeName   *string `json:"CloudTypeName,omitempty" xml:"CloudTypeName,omitempty"`
	CurrentPage     *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	IndexCode       *string `json:"IndexCode,omitempty" xml:"IndexCode,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetIndexDialysisArrayRequest) String() string {
	return tea.Prettify(s)
}

func (s GetIndexDialysisArrayRequest) GoString() string {
	return s.String()
}

func (s *GetIndexDialysisArrayRequest) SetBusinessGroupId(v string) *GetIndexDialysisArrayRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetIndexDialysisArrayRequest) SetCloudResourceId(v string) *GetIndexDialysisArrayRequest {
	s.CloudResourceId = &v
	return s
}

func (s *GetIndexDialysisArrayRequest) SetCloudTypeName(v string) *GetIndexDialysisArrayRequest {
	s.CloudTypeName = &v
	return s
}

func (s *GetIndexDialysisArrayRequest) SetCurrentPage(v int32) *GetIndexDialysisArrayRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetIndexDialysisArrayRequest) SetIndexCode(v string) *GetIndexDialysisArrayRequest {
	s.IndexCode = &v
	return s
}

func (s *GetIndexDialysisArrayRequest) SetOperaUid(v string) *GetIndexDialysisArrayRequest {
	s.OperaUid = &v
	return s
}

func (s *GetIndexDialysisArrayRequest) SetPageSize(v int32) *GetIndexDialysisArrayRequest {
	s.PageSize = &v
	return s
}

type GetIndexDialysisArrayResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetIndexDialysisArrayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetIndexDialysisArrayResponseBody) GoString() string {
	return s.String()
}

func (s *GetIndexDialysisArrayResponseBody) SetCode(v int32) *GetIndexDialysisArrayResponseBody {
	s.Code = &v
	return s
}

func (s *GetIndexDialysisArrayResponseBody) SetData(v map[string]interface{}) *GetIndexDialysisArrayResponseBody {
	s.Data = v
	return s
}

func (s *GetIndexDialysisArrayResponseBody) SetMsg(v string) *GetIndexDialysisArrayResponseBody {
	s.Msg = &v
	return s
}

func (s *GetIndexDialysisArrayResponseBody) SetPageTotal(v int64) *GetIndexDialysisArrayResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetIndexDialysisArrayResponseBody) SetRequestId(v string) *GetIndexDialysisArrayResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetIndexDialysisArrayResponseBody) SetStatus(v string) *GetIndexDialysisArrayResponseBody {
	s.Status = &v
	return s
}

type GetIndexDialysisArrayResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetIndexDialysisArrayResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetIndexDialysisArrayResponse) String() string {
	return tea.Prettify(s)
}

func (s GetIndexDialysisArrayResponse) GoString() string {
	return s.String()
}

func (s *GetIndexDialysisArrayResponse) SetHeaders(v map[string]*string) *GetIndexDialysisArrayResponse {
	s.Headers = v
	return s
}

func (s *GetIndexDialysisArrayResponse) SetStatusCode(v int32) *GetIndexDialysisArrayResponse {
	s.StatusCode = &v
	return s
}

func (s *GetIndexDialysisArrayResponse) SetBody(v *GetIndexDialysisArrayResponseBody) *GetIndexDialysisArrayResponse {
	s.Body = v
	return s
}

type GetIndexDialysisListRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	CloudResourceId *string `json:"CloudResourceId,omitempty" xml:"CloudResourceId,omitempty"`
	CloudTypeName   *string `json:"CloudTypeName,omitempty" xml:"CloudTypeName,omitempty"`
	CurrentPage     *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	IndexCode       *string `json:"IndexCode,omitempty" xml:"IndexCode,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetIndexDialysisListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetIndexDialysisListRequest) GoString() string {
	return s.String()
}

func (s *GetIndexDialysisListRequest) SetBusinessGroupId(v string) *GetIndexDialysisListRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetIndexDialysisListRequest) SetCloudResourceId(v string) *GetIndexDialysisListRequest {
	s.CloudResourceId = &v
	return s
}

func (s *GetIndexDialysisListRequest) SetCloudTypeName(v string) *GetIndexDialysisListRequest {
	s.CloudTypeName = &v
	return s
}

func (s *GetIndexDialysisListRequest) SetCurrentPage(v int32) *GetIndexDialysisListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetIndexDialysisListRequest) SetIndexCode(v string) *GetIndexDialysisListRequest {
	s.IndexCode = &v
	return s
}

func (s *GetIndexDialysisListRequest) SetOperaUid(v string) *GetIndexDialysisListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetIndexDialysisListRequest) SetPageSize(v int32) *GetIndexDialysisListRequest {
	s.PageSize = &v
	return s
}

type GetIndexDialysisListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetIndexDialysisListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetIndexDialysisListResponseBody) GoString() string {
	return s.String()
}

func (s *GetIndexDialysisListResponseBody) SetCode(v int32) *GetIndexDialysisListResponseBody {
	s.Code = &v
	return s
}

func (s *GetIndexDialysisListResponseBody) SetData(v map[string]interface{}) *GetIndexDialysisListResponseBody {
	s.Data = v
	return s
}

func (s *GetIndexDialysisListResponseBody) SetMsg(v string) *GetIndexDialysisListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetIndexDialysisListResponseBody) SetPageTotal(v int64) *GetIndexDialysisListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetIndexDialysisListResponseBody) SetRequestId(v string) *GetIndexDialysisListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetIndexDialysisListResponseBody) SetStatus(v string) *GetIndexDialysisListResponseBody {
	s.Status = &v
	return s
}

type GetIndexDialysisListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetIndexDialysisListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetIndexDialysisListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetIndexDialysisListResponse) GoString() string {
	return s.String()
}

func (s *GetIndexDialysisListResponse) SetHeaders(v map[string]*string) *GetIndexDialysisListResponse {
	s.Headers = v
	return s
}

func (s *GetIndexDialysisListResponse) SetStatusCode(v int32) *GetIndexDialysisListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetIndexDialysisListResponse) SetBody(v *GetIndexDialysisListResponseBody) *GetIndexDialysisListResponse {
	s.Body = v
	return s
}

type GetIndexDialysisListLineRequest struct {
	BeginTime       *int64  `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	CloudResourceId *string `json:"CloudResourceId,omitempty" xml:"CloudResourceId,omitempty"`
	CloudTypeName   *string `json:"CloudTypeName,omitempty" xml:"CloudTypeName,omitempty"`
	EndTime         *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	IndexCode       *string `json:"IndexCode,omitempty" xml:"IndexCode,omitempty"`
	MetricExtend    *string `json:"MetricExtend,omitempty" xml:"MetricExtend,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetIndexDialysisListLineRequest) String() string {
	return tea.Prettify(s)
}

func (s GetIndexDialysisListLineRequest) GoString() string {
	return s.String()
}

func (s *GetIndexDialysisListLineRequest) SetBeginTime(v int64) *GetIndexDialysisListLineRequest {
	s.BeginTime = &v
	return s
}

func (s *GetIndexDialysisListLineRequest) SetCloudResourceId(v string) *GetIndexDialysisListLineRequest {
	s.CloudResourceId = &v
	return s
}

func (s *GetIndexDialysisListLineRequest) SetCloudTypeName(v string) *GetIndexDialysisListLineRequest {
	s.CloudTypeName = &v
	return s
}

func (s *GetIndexDialysisListLineRequest) SetEndTime(v int64) *GetIndexDialysisListLineRequest {
	s.EndTime = &v
	return s
}

func (s *GetIndexDialysisListLineRequest) SetIndexCode(v string) *GetIndexDialysisListLineRequest {
	s.IndexCode = &v
	return s
}

func (s *GetIndexDialysisListLineRequest) SetMetricExtend(v string) *GetIndexDialysisListLineRequest {
	s.MetricExtend = &v
	return s
}

func (s *GetIndexDialysisListLineRequest) SetOperaUid(v string) *GetIndexDialysisListLineRequest {
	s.OperaUid = &v
	return s
}

type GetIndexDialysisListLineResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetIndexDialysisListLineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetIndexDialysisListLineResponseBody) GoString() string {
	return s.String()
}

func (s *GetIndexDialysisListLineResponseBody) SetCode(v int32) *GetIndexDialysisListLineResponseBody {
	s.Code = &v
	return s
}

func (s *GetIndexDialysisListLineResponseBody) SetData(v map[string]interface{}) *GetIndexDialysisListLineResponseBody {
	s.Data = v
	return s
}

func (s *GetIndexDialysisListLineResponseBody) SetMsg(v string) *GetIndexDialysisListLineResponseBody {
	s.Msg = &v
	return s
}

func (s *GetIndexDialysisListLineResponseBody) SetRequestId(v string) *GetIndexDialysisListLineResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetIndexDialysisListLineResponseBody) SetStatus(v string) *GetIndexDialysisListLineResponseBody {
	s.Status = &v
	return s
}

type GetIndexDialysisListLineResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetIndexDialysisListLineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetIndexDialysisListLineResponse) String() string {
	return tea.Prettify(s)
}

func (s GetIndexDialysisListLineResponse) GoString() string {
	return s.String()
}

func (s *GetIndexDialysisListLineResponse) SetHeaders(v map[string]*string) *GetIndexDialysisListLineResponse {
	s.Headers = v
	return s
}

func (s *GetIndexDialysisListLineResponse) SetStatusCode(v int32) *GetIndexDialysisListLineResponse {
	s.StatusCode = &v
	return s
}

func (s *GetIndexDialysisListLineResponse) SetBody(v *GetIndexDialysisListLineResponseBody) *GetIndexDialysisListLineResponse {
	s.Body = v
	return s
}

type GetInspectionReportDownloadUrlRequest struct {
	DownloadReportListJson *string `json:"DownloadReportListJson,omitempty" xml:"DownloadReportListJson,omitempty"`
	OperaUid               *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetInspectionReportDownloadUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInspectionReportDownloadUrlRequest) GoString() string {
	return s.String()
}

func (s *GetInspectionReportDownloadUrlRequest) SetDownloadReportListJson(v string) *GetInspectionReportDownloadUrlRequest {
	s.DownloadReportListJson = &v
	return s
}

func (s *GetInspectionReportDownloadUrlRequest) SetOperaUid(v string) *GetInspectionReportDownloadUrlRequest {
	s.OperaUid = &v
	return s
}

type GetInspectionReportDownloadUrlResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetInspectionReportDownloadUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInspectionReportDownloadUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetInspectionReportDownloadUrlResponseBody) SetCode(v int32) *GetInspectionReportDownloadUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetInspectionReportDownloadUrlResponseBody) SetData(v string) *GetInspectionReportDownloadUrlResponseBody {
	s.Data = &v
	return s
}

func (s *GetInspectionReportDownloadUrlResponseBody) SetMessage(v string) *GetInspectionReportDownloadUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetInspectionReportDownloadUrlResponseBody) SetRequestId(v string) *GetInspectionReportDownloadUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInspectionReportDownloadUrlResponseBody) SetStatus(v string) *GetInspectionReportDownloadUrlResponseBody {
	s.Status = &v
	return s
}

type GetInspectionReportDownloadUrlResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInspectionReportDownloadUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInspectionReportDownloadUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInspectionReportDownloadUrlResponse) GoString() string {
	return s.String()
}

func (s *GetInspectionReportDownloadUrlResponse) SetHeaders(v map[string]*string) *GetInspectionReportDownloadUrlResponse {
	s.Headers = v
	return s
}

func (s *GetInspectionReportDownloadUrlResponse) SetStatusCode(v int32) *GetInspectionReportDownloadUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInspectionReportDownloadUrlResponse) SetBody(v *GetInspectionReportDownloadUrlResponseBody) *GetInspectionReportDownloadUrlResponse {
	s.Body = v
	return s
}

type GetInstancesNumRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetInstancesNumRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesNumRequest) GoString() string {
	return s.String()
}

func (s *GetInstancesNumRequest) SetOperaUid(v string) *GetInstancesNumRequest {
	s.OperaUid = &v
	return s
}

type GetInstancesNumResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetInstancesNumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesNumResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstancesNumResponseBody) SetCode(v int32) *GetInstancesNumResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstancesNumResponseBody) SetData(v map[string]interface{}) *GetInstancesNumResponseBody {
	s.Data = v
	return s
}

func (s *GetInstancesNumResponseBody) SetMsg(v string) *GetInstancesNumResponseBody {
	s.Msg = &v
	return s
}

func (s *GetInstancesNumResponseBody) SetRequestId(v string) *GetInstancesNumResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstancesNumResponseBody) SetStatus(v string) *GetInstancesNumResponseBody {
	s.Status = &v
	return s
}

type GetInstancesNumResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstancesNumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstancesNumResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesNumResponse) GoString() string {
	return s.String()
}

func (s *GetInstancesNumResponse) SetHeaders(v map[string]*string) *GetInstancesNumResponse {
	s.Headers = v
	return s
}

func (s *GetInstancesNumResponse) SetStatusCode(v int32) *GetInstancesNumResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstancesNumResponse) SetBody(v *GetInstancesNumResponseBody) *GetInstancesNumResponse {
	s.Body = v
	return s
}

type GetLogSampleRequest struct {
	AppField     *string `json:"AppField,omitempty" xml:"AppField,omitempty"`
	AppValue     *string `json:"AppValue,omitempty" xml:"AppValue,omitempty"`
	DataSourceId *int64  `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	LogField     *string `json:"LogField,omitempty" xml:"LogField,omitempty"`
	OperaUid     *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetLogSampleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLogSampleRequest) GoString() string {
	return s.String()
}

func (s *GetLogSampleRequest) SetAppField(v string) *GetLogSampleRequest {
	s.AppField = &v
	return s
}

func (s *GetLogSampleRequest) SetAppValue(v string) *GetLogSampleRequest {
	s.AppValue = &v
	return s
}

func (s *GetLogSampleRequest) SetDataSourceId(v int64) *GetLogSampleRequest {
	s.DataSourceId = &v
	return s
}

func (s *GetLogSampleRequest) SetLogField(v string) *GetLogSampleRequest {
	s.LogField = &v
	return s
}

func (s *GetLogSampleRequest) SetOperaUid(v string) *GetLogSampleRequest {
	s.OperaUid = &v
	return s
}

type GetLogSampleResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetLogSampleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLogSampleResponseBody) GoString() string {
	return s.String()
}

func (s *GetLogSampleResponseBody) SetCode(v int32) *GetLogSampleResponseBody {
	s.Code = &v
	return s
}

func (s *GetLogSampleResponseBody) SetData(v map[string]interface{}) *GetLogSampleResponseBody {
	s.Data = v
	return s
}

func (s *GetLogSampleResponseBody) SetMsg(v string) *GetLogSampleResponseBody {
	s.Msg = &v
	return s
}

func (s *GetLogSampleResponseBody) SetRequestId(v string) *GetLogSampleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLogSampleResponseBody) SetStatus(v string) *GetLogSampleResponseBody {
	s.Status = &v
	return s
}

type GetLogSampleResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLogSampleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLogSampleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLogSampleResponse) GoString() string {
	return s.String()
}

func (s *GetLogSampleResponse) SetHeaders(v map[string]*string) *GetLogSampleResponse {
	s.Headers = v
	return s
}

func (s *GetLogSampleResponse) SetStatusCode(v int32) *GetLogSampleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLogSampleResponse) SetBody(v *GetLogSampleResponseBody) *GetLogSampleResponse {
	s.Body = v
	return s
}

type GetLogSampleColumnRequest struct {
	DataSourceId *int64  `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	OperaUid     *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetLogSampleColumnRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLogSampleColumnRequest) GoString() string {
	return s.String()
}

func (s *GetLogSampleColumnRequest) SetDataSourceId(v int64) *GetLogSampleColumnRequest {
	s.DataSourceId = &v
	return s
}

func (s *GetLogSampleColumnRequest) SetOperaUid(v string) *GetLogSampleColumnRequest {
	s.OperaUid = &v
	return s
}

type GetLogSampleColumnResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetLogSampleColumnResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLogSampleColumnResponseBody) GoString() string {
	return s.String()
}

func (s *GetLogSampleColumnResponseBody) SetCode(v int32) *GetLogSampleColumnResponseBody {
	s.Code = &v
	return s
}

func (s *GetLogSampleColumnResponseBody) SetData(v map[string]interface{}) *GetLogSampleColumnResponseBody {
	s.Data = v
	return s
}

func (s *GetLogSampleColumnResponseBody) SetMsg(v string) *GetLogSampleColumnResponseBody {
	s.Msg = &v
	return s
}

func (s *GetLogSampleColumnResponseBody) SetPageTotal(v int64) *GetLogSampleColumnResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetLogSampleColumnResponseBody) SetRequestId(v string) *GetLogSampleColumnResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLogSampleColumnResponseBody) SetStatus(v string) *GetLogSampleColumnResponseBody {
	s.Status = &v
	return s
}

type GetLogSampleColumnResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLogSampleColumnResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLogSampleColumnResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLogSampleColumnResponse) GoString() string {
	return s.String()
}

func (s *GetLogSampleColumnResponse) SetHeaders(v map[string]*string) *GetLogSampleColumnResponse {
	s.Headers = v
	return s
}

func (s *GetLogSampleColumnResponse) SetStatusCode(v int32) *GetLogSampleColumnResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLogSampleColumnResponse) SetBody(v *GetLogSampleColumnResponseBody) *GetLogSampleColumnResponse {
	s.Body = v
	return s
}

type GetMetricEventSequentialTrentRequest struct {
	AliUid   *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetMetricEventSequentialTrentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMetricEventSequentialTrentRequest) GoString() string {
	return s.String()
}

func (s *GetMetricEventSequentialTrentRequest) SetAliUid(v string) *GetMetricEventSequentialTrentRequest {
	s.AliUid = &v
	return s
}

func (s *GetMetricEventSequentialTrentRequest) SetEventId(v string) *GetMetricEventSequentialTrentRequest {
	s.EventId = &v
	return s
}

func (s *GetMetricEventSequentialTrentRequest) SetOperaUid(v string) *GetMetricEventSequentialTrentRequest {
	s.OperaUid = &v
	return s
}

type GetMetricEventSequentialTrentResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	PageTotal *int32                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetMetricEventSequentialTrentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMetricEventSequentialTrentResponseBody) GoString() string {
	return s.String()
}

func (s *GetMetricEventSequentialTrentResponseBody) SetCode(v int32) *GetMetricEventSequentialTrentResponseBody {
	s.Code = &v
	return s
}

func (s *GetMetricEventSequentialTrentResponseBody) SetData(v map[string]interface{}) *GetMetricEventSequentialTrentResponseBody {
	s.Data = v
	return s
}

func (s *GetMetricEventSequentialTrentResponseBody) SetMessage(v string) *GetMetricEventSequentialTrentResponseBody {
	s.Message = &v
	return s
}

func (s *GetMetricEventSequentialTrentResponseBody) SetPageTotal(v int32) *GetMetricEventSequentialTrentResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetMetricEventSequentialTrentResponseBody) SetRequestId(v string) *GetMetricEventSequentialTrentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMetricEventSequentialTrentResponseBody) SetStatus(v string) *GetMetricEventSequentialTrentResponseBody {
	s.Status = &v
	return s
}

type GetMetricEventSequentialTrentResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMetricEventSequentialTrentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMetricEventSequentialTrentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMetricEventSequentialTrentResponse) GoString() string {
	return s.String()
}

func (s *GetMetricEventSequentialTrentResponse) SetHeaders(v map[string]*string) *GetMetricEventSequentialTrentResponse {
	s.Headers = v
	return s
}

func (s *GetMetricEventSequentialTrentResponse) SetStatusCode(v int32) *GetMetricEventSequentialTrentResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMetricEventSequentialTrentResponse) SetBody(v *GetMetricEventSequentialTrentResponseBody) *GetMetricEventSequentialTrentResponse {
	s.Body = v
	return s
}

type GetNewOptimizationItemDataRequest struct {
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetNewOptimizationItemDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNewOptimizationItemDataRequest) GoString() string {
	return s.String()
}

func (s *GetNewOptimizationItemDataRequest) SetLang(v string) *GetNewOptimizationItemDataRequest {
	s.Lang = &v
	return s
}

func (s *GetNewOptimizationItemDataRequest) SetOperaUid(v string) *GetNewOptimizationItemDataRequest {
	s.OperaUid = &v
	return s
}

type GetNewOptimizationItemDataResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetNewOptimizationItemDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNewOptimizationItemDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetNewOptimizationItemDataResponseBody) SetCode(v int32) *GetNewOptimizationItemDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetNewOptimizationItemDataResponseBody) SetData(v map[string]interface{}) *GetNewOptimizationItemDataResponseBody {
	s.Data = v
	return s
}

func (s *GetNewOptimizationItemDataResponseBody) SetMsg(v string) *GetNewOptimizationItemDataResponseBody {
	s.Msg = &v
	return s
}

func (s *GetNewOptimizationItemDataResponseBody) SetRequestId(v string) *GetNewOptimizationItemDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNewOptimizationItemDataResponseBody) SetStatus(v string) *GetNewOptimizationItemDataResponseBody {
	s.Status = &v
	return s
}

type GetNewOptimizationItemDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetNewOptimizationItemDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetNewOptimizationItemDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNewOptimizationItemDataResponse) GoString() string {
	return s.String()
}

func (s *GetNewOptimizationItemDataResponse) SetHeaders(v map[string]*string) *GetNewOptimizationItemDataResponse {
	s.Headers = v
	return s
}

func (s *GetNewOptimizationItemDataResponse) SetStatusCode(v int32) *GetNewOptimizationItemDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNewOptimizationItemDataResponse) SetBody(v *GetNewOptimizationItemDataResponseBody) *GetNewOptimizationItemDataResponse {
	s.Body = v
	return s
}

type GetPatrolInspectionDetailListRequest struct {
	CurrentPage  *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	OperaUid     *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PatrolId     *int64  `json:"PatrolId,omitempty" xml:"PatrolId,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPatrolInspectionDetailListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionDetailListRequest) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionDetailListRequest) SetCurrentPage(v int32) *GetPatrolInspectionDetailListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetPatrolInspectionDetailListRequest) SetInstanceId(v string) *GetPatrolInspectionDetailListRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPatrolInspectionDetailListRequest) SetInstanceName(v string) *GetPatrolInspectionDetailListRequest {
	s.InstanceName = &v
	return s
}

func (s *GetPatrolInspectionDetailListRequest) SetOperaUid(v string) *GetPatrolInspectionDetailListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetPatrolInspectionDetailListRequest) SetPageSize(v int32) *GetPatrolInspectionDetailListRequest {
	s.PageSize = &v
	return s
}

func (s *GetPatrolInspectionDetailListRequest) SetPatrolId(v int64) *GetPatrolInspectionDetailListRequest {
	s.PatrolId = &v
	return s
}

func (s *GetPatrolInspectionDetailListRequest) SetStatus(v int32) *GetPatrolInspectionDetailListRequest {
	s.Status = &v
	return s
}

type GetPatrolInspectionDetailListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPatrolInspectionDetailListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionDetailListResponseBody) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionDetailListResponseBody) SetCode(v int32) *GetPatrolInspectionDetailListResponseBody {
	s.Code = &v
	return s
}

func (s *GetPatrolInspectionDetailListResponseBody) SetData(v map[string]interface{}) *GetPatrolInspectionDetailListResponseBody {
	s.Data = v
	return s
}

func (s *GetPatrolInspectionDetailListResponseBody) SetMsg(v string) *GetPatrolInspectionDetailListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetPatrolInspectionDetailListResponseBody) SetPageTotal(v int64) *GetPatrolInspectionDetailListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetPatrolInspectionDetailListResponseBody) SetRequestId(v string) *GetPatrolInspectionDetailListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPatrolInspectionDetailListResponseBody) SetStatus(v string) *GetPatrolInspectionDetailListResponseBody {
	s.Status = &v
	return s
}

type GetPatrolInspectionDetailListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPatrolInspectionDetailListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPatrolInspectionDetailListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionDetailListResponse) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionDetailListResponse) SetHeaders(v map[string]*string) *GetPatrolInspectionDetailListResponse {
	s.Headers = v
	return s
}

func (s *GetPatrolInspectionDetailListResponse) SetStatusCode(v int32) *GetPatrolInspectionDetailListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPatrolInspectionDetailListResponse) SetBody(v *GetPatrolInspectionDetailListResponseBody) *GetPatrolInspectionDetailListResponse {
	s.Body = v
	return s
}

type GetPatrolInspectionDetailThrendDataRequest struct {
	EndTime        *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	RequestContent *string `json:"RequestContent,omitempty" xml:"RequestContent,omitempty"`
	StartTime      *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetPatrolInspectionDetailThrendDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionDetailThrendDataRequest) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionDetailThrendDataRequest) SetEndTime(v int64) *GetPatrolInspectionDetailThrendDataRequest {
	s.EndTime = &v
	return s
}

func (s *GetPatrolInspectionDetailThrendDataRequest) SetOperaUid(v string) *GetPatrolInspectionDetailThrendDataRequest {
	s.OperaUid = &v
	return s
}

func (s *GetPatrolInspectionDetailThrendDataRequest) SetRequestContent(v string) *GetPatrolInspectionDetailThrendDataRequest {
	s.RequestContent = &v
	return s
}

func (s *GetPatrolInspectionDetailThrendDataRequest) SetStartTime(v int64) *GetPatrolInspectionDetailThrendDataRequest {
	s.StartTime = &v
	return s
}

type GetPatrolInspectionDetailThrendDataResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPatrolInspectionDetailThrendDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionDetailThrendDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionDetailThrendDataResponseBody) SetCode(v int32) *GetPatrolInspectionDetailThrendDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetPatrolInspectionDetailThrendDataResponseBody) SetData(v map[string]interface{}) *GetPatrolInspectionDetailThrendDataResponseBody {
	s.Data = v
	return s
}

func (s *GetPatrolInspectionDetailThrendDataResponseBody) SetMsg(v string) *GetPatrolInspectionDetailThrendDataResponseBody {
	s.Msg = &v
	return s
}

func (s *GetPatrolInspectionDetailThrendDataResponseBody) SetRequestId(v string) *GetPatrolInspectionDetailThrendDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPatrolInspectionDetailThrendDataResponseBody) SetStatus(v string) *GetPatrolInspectionDetailThrendDataResponseBody {
	s.Status = &v
	return s
}

type GetPatrolInspectionDetailThrendDataResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPatrolInspectionDetailThrendDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPatrolInspectionDetailThrendDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionDetailThrendDataResponse) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionDetailThrendDataResponse) SetHeaders(v map[string]*string) *GetPatrolInspectionDetailThrendDataResponse {
	s.Headers = v
	return s
}

func (s *GetPatrolInspectionDetailThrendDataResponse) SetStatusCode(v int32) *GetPatrolInspectionDetailThrendDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPatrolInspectionDetailThrendDataResponse) SetBody(v *GetPatrolInspectionDetailThrendDataResponseBody) *GetPatrolInspectionDetailThrendDataResponse {
	s.Body = v
	return s
}

type GetPatrolInspectionItemsListRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetPatrolInspectionItemsListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionItemsListRequest) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionItemsListRequest) SetOperaUid(v string) *GetPatrolInspectionItemsListRequest {
	s.OperaUid = &v
	return s
}

type GetPatrolInspectionItemsListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPatrolInspectionItemsListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionItemsListResponseBody) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionItemsListResponseBody) SetCode(v int32) *GetPatrolInspectionItemsListResponseBody {
	s.Code = &v
	return s
}

func (s *GetPatrolInspectionItemsListResponseBody) SetData(v map[string]interface{}) *GetPatrolInspectionItemsListResponseBody {
	s.Data = v
	return s
}

func (s *GetPatrolInspectionItemsListResponseBody) SetMsg(v string) *GetPatrolInspectionItemsListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetPatrolInspectionItemsListResponseBody) SetRequestId(v string) *GetPatrolInspectionItemsListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPatrolInspectionItemsListResponseBody) SetStatus(v string) *GetPatrolInspectionItemsListResponseBody {
	s.Status = &v
	return s
}

type GetPatrolInspectionItemsListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPatrolInspectionItemsListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPatrolInspectionItemsListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionItemsListResponse) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionItemsListResponse) SetHeaders(v map[string]*string) *GetPatrolInspectionItemsListResponse {
	s.Headers = v
	return s
}

func (s *GetPatrolInspectionItemsListResponse) SetStatusCode(v int32) *GetPatrolInspectionItemsListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPatrolInspectionItemsListResponse) SetBody(v *GetPatrolInspectionItemsListResponseBody) *GetPatrolInspectionItemsListResponse {
	s.Body = v
	return s
}

type GetPatrolInspectionListRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	CurrentPage     *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Lang            *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PatrolId        *int64  `json:"PatrolId,omitempty" xml:"PatrolId,omitempty"`
	ProductCode     *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	RiskLevel       *int32  `json:"RiskLevel,omitempty" xml:"RiskLevel,omitempty"`
	RiskName        *string `json:"RiskName,omitempty" xml:"RiskName,omitempty"`
	RiskPatrolItem  *string `json:"RiskPatrolItem,omitempty" xml:"RiskPatrolItem,omitempty"`
	RiskType        *int32  `json:"RiskType,omitempty" xml:"RiskType,omitempty"`
	SeverityLevel   *int32  `json:"SeverityLevel,omitempty" xml:"SeverityLevel,omitempty"`
	Status          *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPatrolInspectionListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionListRequest) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionListRequest) SetBusinessGroupId(v string) *GetPatrolInspectionListRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetCurrentPage(v int32) *GetPatrolInspectionListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetLang(v string) *GetPatrolInspectionListRequest {
	s.Lang = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetOperaUid(v string) *GetPatrolInspectionListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetPageSize(v int32) *GetPatrolInspectionListRequest {
	s.PageSize = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetPatrolId(v int64) *GetPatrolInspectionListRequest {
	s.PatrolId = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetProductCode(v string) *GetPatrolInspectionListRequest {
	s.ProductCode = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetRiskLevel(v int32) *GetPatrolInspectionListRequest {
	s.RiskLevel = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetRiskName(v string) *GetPatrolInspectionListRequest {
	s.RiskName = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetRiskPatrolItem(v string) *GetPatrolInspectionListRequest {
	s.RiskPatrolItem = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetRiskType(v int32) *GetPatrolInspectionListRequest {
	s.RiskType = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetSeverityLevel(v int32) *GetPatrolInspectionListRequest {
	s.SeverityLevel = &v
	return s
}

func (s *GetPatrolInspectionListRequest) SetStatus(v int32) *GetPatrolInspectionListRequest {
	s.Status = &v
	return s
}

type GetPatrolInspectionListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPatrolInspectionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionListResponseBody) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionListResponseBody) SetCode(v int32) *GetPatrolInspectionListResponseBody {
	s.Code = &v
	return s
}

func (s *GetPatrolInspectionListResponseBody) SetData(v map[string]interface{}) *GetPatrolInspectionListResponseBody {
	s.Data = v
	return s
}

func (s *GetPatrolInspectionListResponseBody) SetMsg(v string) *GetPatrolInspectionListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetPatrolInspectionListResponseBody) SetPageTotal(v int64) *GetPatrolInspectionListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetPatrolInspectionListResponseBody) SetRequestId(v string) *GetPatrolInspectionListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPatrolInspectionListResponseBody) SetStatus(v string) *GetPatrolInspectionListResponseBody {
	s.Status = &v
	return s
}

type GetPatrolInspectionListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPatrolInspectionListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPatrolInspectionListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionListResponse) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionListResponse) SetHeaders(v map[string]*string) *GetPatrolInspectionListResponse {
	s.Headers = v
	return s
}

func (s *GetPatrolInspectionListResponse) SetStatusCode(v int32) *GetPatrolInspectionListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPatrolInspectionListResponse) SetBody(v *GetPatrolInspectionListResponseBody) *GetPatrolInspectionListResponse {
	s.Body = v
	return s
}

type GetPatrolInspectionStatusRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetPatrolInspectionStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionStatusRequest) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionStatusRequest) SetOperaUid(v string) *GetPatrolInspectionStatusRequest {
	s.OperaUid = &v
	return s
}

type GetPatrolInspectionStatusResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPatrolInspectionStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionStatusResponseBody) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionStatusResponseBody) SetCode(v int32) *GetPatrolInspectionStatusResponseBody {
	s.Code = &v
	return s
}

func (s *GetPatrolInspectionStatusResponseBody) SetData(v map[string]interface{}) *GetPatrolInspectionStatusResponseBody {
	s.Data = v
	return s
}

func (s *GetPatrolInspectionStatusResponseBody) SetMsg(v string) *GetPatrolInspectionStatusResponseBody {
	s.Msg = &v
	return s
}

func (s *GetPatrolInspectionStatusResponseBody) SetRequestId(v string) *GetPatrolInspectionStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPatrolInspectionStatusResponseBody) SetStatus(v string) *GetPatrolInspectionStatusResponseBody {
	s.Status = &v
	return s
}

type GetPatrolInspectionStatusResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPatrolInspectionStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPatrolInspectionStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPatrolInspectionStatusResponse) GoString() string {
	return s.String()
}

func (s *GetPatrolInspectionStatusResponse) SetHeaders(v map[string]*string) *GetPatrolInspectionStatusResponse {
	s.Headers = v
	return s
}

func (s *GetPatrolInspectionStatusResponse) SetStatusCode(v int32) *GetPatrolInspectionStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPatrolInspectionStatusResponse) SetBody(v *GetPatrolInspectionStatusResponseBody) *GetPatrolInspectionStatusResponse {
	s.Body = v
	return s
}

type GetProductInstanceRequest struct {
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s GetProductInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProductInstanceRequest) GoString() string {
	return s.String()
}

func (s *GetProductInstanceRequest) SetInstanceId(v string) *GetProductInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *GetProductInstanceRequest) SetOperaUid(v string) *GetProductInstanceRequest {
	s.OperaUid = &v
	return s
}

func (s *GetProductInstanceRequest) SetProductCode(v string) *GetProductInstanceRequest {
	s.ProductCode = &v
	return s
}

type GetProductInstanceResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetProductInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProductInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *GetProductInstanceResponseBody) SetCode(v int32) *GetProductInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *GetProductInstanceResponseBody) SetData(v map[string]interface{}) *GetProductInstanceResponseBody {
	s.Data = v
	return s
}

func (s *GetProductInstanceResponseBody) SetMsg(v string) *GetProductInstanceResponseBody {
	s.Msg = &v
	return s
}

func (s *GetProductInstanceResponseBody) SetRequestId(v string) *GetProductInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetProductInstanceResponseBody) SetStatus(v string) *GetProductInstanceResponseBody {
	s.Status = &v
	return s
}

type GetProductInstanceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetProductInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetProductInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProductInstanceResponse) GoString() string {
	return s.String()
}

func (s *GetProductInstanceResponse) SetHeaders(v map[string]*string) *GetProductInstanceResponse {
	s.Headers = v
	return s
}

func (s *GetProductInstanceResponse) SetStatusCode(v int32) *GetProductInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetProductInstanceResponse) SetBody(v *GetProductInstanceResponseBody) *GetProductInstanceResponse {
	s.Body = v
	return s
}

type GetProductMetricListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetProductMetricListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProductMetricListResponseBody) GoString() string {
	return s.String()
}

func (s *GetProductMetricListResponseBody) SetCode(v int32) *GetProductMetricListResponseBody {
	s.Code = &v
	return s
}

func (s *GetProductMetricListResponseBody) SetData(v map[string]interface{}) *GetProductMetricListResponseBody {
	s.Data = v
	return s
}

func (s *GetProductMetricListResponseBody) SetMsg(v string) *GetProductMetricListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetProductMetricListResponseBody) SetRequestId(v string) *GetProductMetricListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetProductMetricListResponseBody) SetStatus(v string) *GetProductMetricListResponseBody {
	s.Status = &v
	return s
}

type GetProductMetricListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetProductMetricListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetProductMetricListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProductMetricListResponse) GoString() string {
	return s.String()
}

func (s *GetProductMetricListResponse) SetHeaders(v map[string]*string) *GetProductMetricListResponse {
	s.Headers = v
	return s
}

func (s *GetProductMetricListResponse) SetStatusCode(v int32) *GetProductMetricListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetProductMetricListResponse) SetBody(v *GetProductMetricListResponseBody) *GetProductMetricListResponse {
	s.Body = v
	return s
}

type GetRealDataRequest struct {
	EndTimestamp   *string `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	FlowName       *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	StartTimestamp *string `json:"StartTimestamp,omitempty" xml:"StartTimestamp,omitempty"`
	Uid            *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetRealDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRealDataRequest) GoString() string {
	return s.String()
}

func (s *GetRealDataRequest) SetEndTimestamp(v string) *GetRealDataRequest {
	s.EndTimestamp = &v
	return s
}

func (s *GetRealDataRequest) SetFlowName(v string) *GetRealDataRequest {
	s.FlowName = &v
	return s
}

func (s *GetRealDataRequest) SetInstanceId(v string) *GetRealDataRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRealDataRequest) SetStartTimestamp(v string) *GetRealDataRequest {
	s.StartTimestamp = &v
	return s
}

func (s *GetRealDataRequest) SetUid(v int64) *GetRealDataRequest {
	s.Uid = &v
	return s
}

type GetRealDataResponseBody struct {
	Code      *int64                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRealDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRealDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetRealDataResponseBody) SetCode(v int64) *GetRealDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetRealDataResponseBody) SetData(v map[string]interface{}) *GetRealDataResponseBody {
	s.Data = v
	return s
}

func (s *GetRealDataResponseBody) SetMessage(v string) *GetRealDataResponseBody {
	s.Message = &v
	return s
}

func (s *GetRealDataResponseBody) SetRequestId(v string) *GetRealDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRealDataResponseBody) SetStatus(v string) *GetRealDataResponseBody {
	s.Status = &v
	return s
}

type GetRealDataResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRealDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRealDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRealDataResponse) GoString() string {
	return s.String()
}

func (s *GetRealDataResponse) SetHeaders(v map[string]*string) *GetRealDataResponse {
	s.Headers = v
	return s
}

func (s *GetRealDataResponse) SetStatusCode(v int32) *GetRealDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRealDataResponse) SetBody(v *GetRealDataResponseBody) *GetRealDataResponse {
	s.Body = v
	return s
}

type GetRegionListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRegionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRegionListResponseBody) GoString() string {
	return s.String()
}

func (s *GetRegionListResponseBody) SetCode(v int32) *GetRegionListResponseBody {
	s.Code = &v
	return s
}

func (s *GetRegionListResponseBody) SetData(v map[string]interface{}) *GetRegionListResponseBody {
	s.Data = v
	return s
}

func (s *GetRegionListResponseBody) SetMsg(v string) *GetRegionListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetRegionListResponseBody) SetRequestId(v string) *GetRegionListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRegionListResponseBody) SetStatus(v bool) *GetRegionListResponseBody {
	s.Status = &v
	return s
}

type GetRegionListResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRegionListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRegionListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRegionListResponse) GoString() string {
	return s.String()
}

func (s *GetRegionListResponse) SetHeaders(v map[string]*string) *GetRegionListResponse {
	s.Headers = v
	return s
}

func (s *GetRegionListResponse) SetStatusCode(v int32) *GetRegionListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRegionListResponse) SetBody(v *GetRegionListResponseBody) *GetRegionListResponse {
	s.Body = v
	return s
}

type GetRepairScriptRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetRepairScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRepairScriptRequest) GoString() string {
	return s.String()
}

func (s *GetRepairScriptRequest) SetEventId(v string) *GetRepairScriptRequest {
	s.EventId = &v
	return s
}

func (s *GetRepairScriptRequest) SetOperaUid(v string) *GetRepairScriptRequest {
	s.OperaUid = &v
	return s
}

type GetRepairScriptResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRepairScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRepairScriptResponseBody) GoString() string {
	return s.String()
}

func (s *GetRepairScriptResponseBody) SetCode(v int32) *GetRepairScriptResponseBody {
	s.Code = &v
	return s
}

func (s *GetRepairScriptResponseBody) SetData(v map[string]interface{}) *GetRepairScriptResponseBody {
	s.Data = v
	return s
}

func (s *GetRepairScriptResponseBody) SetMsg(v string) *GetRepairScriptResponseBody {
	s.Msg = &v
	return s
}

func (s *GetRepairScriptResponseBody) SetRequestId(v string) *GetRepairScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRepairScriptResponseBody) SetStatus(v string) *GetRepairScriptResponseBody {
	s.Status = &v
	return s
}

type GetRepairScriptResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRepairScriptResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRepairScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRepairScriptResponse) GoString() string {
	return s.String()
}

func (s *GetRepairScriptResponse) SetHeaders(v map[string]*string) *GetRepairScriptResponse {
	s.Headers = v
	return s
}

func (s *GetRepairScriptResponse) SetStatusCode(v int32) *GetRepairScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRepairScriptResponse) SetBody(v *GetRepairScriptResponseBody) *GetRepairScriptResponse {
	s.Body = v
	return s
}

type GetResourceListRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetResourceListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetResourceListRequest) GoString() string {
	return s.String()
}

func (s *GetResourceListRequest) SetOperaUid(v string) *GetResourceListRequest {
	s.OperaUid = &v
	return s
}

type GetResourceListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetResourceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetResourceListResponseBody) GoString() string {
	return s.String()
}

func (s *GetResourceListResponseBody) SetCode(v int32) *GetResourceListResponseBody {
	s.Code = &v
	return s
}

func (s *GetResourceListResponseBody) SetData(v map[string]interface{}) *GetResourceListResponseBody {
	s.Data = v
	return s
}

func (s *GetResourceListResponseBody) SetMsg(v string) *GetResourceListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetResourceListResponseBody) SetRequestId(v string) *GetResourceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetResourceListResponseBody) SetStatus(v string) *GetResourceListResponseBody {
	s.Status = &v
	return s
}

type GetResourceListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetResourceListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetResourceListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetResourceListResponse) GoString() string {
	return s.String()
}

func (s *GetResourceListResponse) SetHeaders(v map[string]*string) *GetResourceListResponse {
	s.Headers = v
	return s
}

func (s *GetResourceListResponse) SetStatusCode(v int32) *GetResourceListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetResourceListResponse) SetBody(v *GetResourceListResponseBody) *GetResourceListResponse {
	s.Body = v
	return s
}

type GetResourceTagDropListRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetResourceTagDropListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetResourceTagDropListRequest) GoString() string {
	return s.String()
}

func (s *GetResourceTagDropListRequest) SetBusinessGroupId(v string) *GetResourceTagDropListRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetResourceTagDropListRequest) SetOperaUid(v string) *GetResourceTagDropListRequest {
	s.OperaUid = &v
	return s
}

type GetResourceTagDropListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetResourceTagDropListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetResourceTagDropListResponseBody) GoString() string {
	return s.String()
}

func (s *GetResourceTagDropListResponseBody) SetCode(v int32) *GetResourceTagDropListResponseBody {
	s.Code = &v
	return s
}

func (s *GetResourceTagDropListResponseBody) SetData(v map[string]interface{}) *GetResourceTagDropListResponseBody {
	s.Data = v
	return s
}

func (s *GetResourceTagDropListResponseBody) SetMsg(v string) *GetResourceTagDropListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetResourceTagDropListResponseBody) SetRequestId(v string) *GetResourceTagDropListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetResourceTagDropListResponseBody) SetStatus(v string) *GetResourceTagDropListResponseBody {
	s.Status = &v
	return s
}

type GetResourceTagDropListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetResourceTagDropListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetResourceTagDropListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetResourceTagDropListResponse) GoString() string {
	return s.String()
}

func (s *GetResourceTagDropListResponse) SetHeaders(v map[string]*string) *GetResourceTagDropListResponse {
	s.Headers = v
	return s
}

func (s *GetResourceTagDropListResponse) SetStatusCode(v int32) *GetResourceTagDropListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetResourceTagDropListResponse) SetBody(v *GetResourceTagDropListResponseBody) *GetResourceTagDropListResponse {
	s.Body = v
	return s
}

type GetResourceTypeListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetResourceTypeListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetResourceTypeListResponseBody) GoString() string {
	return s.String()
}

func (s *GetResourceTypeListResponseBody) SetCode(v int32) *GetResourceTypeListResponseBody {
	s.Code = &v
	return s
}

func (s *GetResourceTypeListResponseBody) SetData(v map[string]interface{}) *GetResourceTypeListResponseBody {
	s.Data = v
	return s
}

func (s *GetResourceTypeListResponseBody) SetMsg(v string) *GetResourceTypeListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetResourceTypeListResponseBody) SetRequestId(v string) *GetResourceTypeListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetResourceTypeListResponseBody) SetStatus(v bool) *GetResourceTypeListResponseBody {
	s.Status = &v
	return s
}

type GetResourceTypeListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetResourceTypeListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetResourceTypeListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetResourceTypeListResponse) GoString() string {
	return s.String()
}

func (s *GetResourceTypeListResponse) SetHeaders(v map[string]*string) *GetResourceTypeListResponse {
	s.Headers = v
	return s
}

func (s *GetResourceTypeListResponse) SetStatusCode(v int32) *GetResourceTypeListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetResourceTypeListResponse) SetBody(v *GetResourceTypeListResponseBody) *GetResourceTypeListResponse {
	s.Body = v
	return s
}

type GetRiskInAllRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	Screen   *int32  `json:"Screen,omitempty" xml:"Screen,omitempty"`
}

func (s GetRiskInAllRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRiskInAllRequest) GoString() string {
	return s.String()
}

func (s *GetRiskInAllRequest) SetOperaUid(v string) *GetRiskInAllRequest {
	s.OperaUid = &v
	return s
}

func (s *GetRiskInAllRequest) SetScreen(v int32) *GetRiskInAllRequest {
	s.Screen = &v
	return s
}

type GetRiskInAllResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRiskInAllResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRiskInAllResponseBody) GoString() string {
	return s.String()
}

func (s *GetRiskInAllResponseBody) SetCode(v int32) *GetRiskInAllResponseBody {
	s.Code = &v
	return s
}

func (s *GetRiskInAllResponseBody) SetData(v map[string]interface{}) *GetRiskInAllResponseBody {
	s.Data = v
	return s
}

func (s *GetRiskInAllResponseBody) SetMsg(v string) *GetRiskInAllResponseBody {
	s.Msg = &v
	return s
}

func (s *GetRiskInAllResponseBody) SetPageTotal(v int64) *GetRiskInAllResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetRiskInAllResponseBody) SetRequestId(v string) *GetRiskInAllResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRiskInAllResponseBody) SetStatus(v string) *GetRiskInAllResponseBody {
	s.Status = &v
	return s
}

type GetRiskInAllResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRiskInAllResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRiskInAllResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRiskInAllResponse) GoString() string {
	return s.String()
}

func (s *GetRiskInAllResponse) SetHeaders(v map[string]*string) *GetRiskInAllResponse {
	s.Headers = v
	return s
}

func (s *GetRiskInAllResponse) SetStatusCode(v int32) *GetRiskInAllResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRiskInAllResponse) SetBody(v *GetRiskInAllResponseBody) *GetRiskInAllResponse {
	s.Body = v
	return s
}

type GetRiskInspectStatisticsRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetRiskInspectStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRiskInspectStatisticsRequest) GoString() string {
	return s.String()
}

func (s *GetRiskInspectStatisticsRequest) SetOperaUid(v string) *GetRiskInspectStatisticsRequest {
	s.OperaUid = &v
	return s
}

type GetRiskInspectStatisticsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRiskInspectStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRiskInspectStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *GetRiskInspectStatisticsResponseBody) SetCode(v int32) *GetRiskInspectStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *GetRiskInspectStatisticsResponseBody) SetData(v map[string]interface{}) *GetRiskInspectStatisticsResponseBody {
	s.Data = v
	return s
}

func (s *GetRiskInspectStatisticsResponseBody) SetMsg(v string) *GetRiskInspectStatisticsResponseBody {
	s.Msg = &v
	return s
}

func (s *GetRiskInspectStatisticsResponseBody) SetRequestId(v string) *GetRiskInspectStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRiskInspectStatisticsResponseBody) SetStatus(v string) *GetRiskInspectStatisticsResponseBody {
	s.Status = &v
	return s
}

type GetRiskInspectStatisticsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRiskInspectStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRiskInspectStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRiskInspectStatisticsResponse) GoString() string {
	return s.String()
}

func (s *GetRiskInspectStatisticsResponse) SetHeaders(v map[string]*string) *GetRiskInspectStatisticsResponse {
	s.Headers = v
	return s
}

func (s *GetRiskInspectStatisticsResponse) SetStatusCode(v int32) *GetRiskInspectStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRiskInspectStatisticsResponse) SetBody(v *GetRiskInspectStatisticsResponseBody) *GetRiskInspectStatisticsResponse {
	s.Body = v
	return s
}

type GetRiskInspectionTypeListRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetRiskInspectionTypeListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRiskInspectionTypeListRequest) GoString() string {
	return s.String()
}

func (s *GetRiskInspectionTypeListRequest) SetOperaUid(v string) *GetRiskInspectionTypeListRequest {
	s.OperaUid = &v
	return s
}

type GetRiskInspectionTypeListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRiskInspectionTypeListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRiskInspectionTypeListResponseBody) GoString() string {
	return s.String()
}

func (s *GetRiskInspectionTypeListResponseBody) SetCode(v int32) *GetRiskInspectionTypeListResponseBody {
	s.Code = &v
	return s
}

func (s *GetRiskInspectionTypeListResponseBody) SetData(v map[string]interface{}) *GetRiskInspectionTypeListResponseBody {
	s.Data = v
	return s
}

func (s *GetRiskInspectionTypeListResponseBody) SetMsg(v string) *GetRiskInspectionTypeListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetRiskInspectionTypeListResponseBody) SetRequestId(v string) *GetRiskInspectionTypeListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRiskInspectionTypeListResponseBody) SetStatus(v string) *GetRiskInspectionTypeListResponseBody {
	s.Status = &v
	return s
}

type GetRiskInspectionTypeListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRiskInspectionTypeListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRiskInspectionTypeListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRiskInspectionTypeListResponse) GoString() string {
	return s.String()
}

func (s *GetRiskInspectionTypeListResponse) SetHeaders(v map[string]*string) *GetRiskInspectionTypeListResponse {
	s.Headers = v
	return s
}

func (s *GetRiskInspectionTypeListResponse) SetStatusCode(v int32) *GetRiskInspectionTypeListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRiskInspectionTypeListResponse) SetBody(v *GetRiskInspectionTypeListResponseBody) *GetRiskInspectionTypeListResponse {
	s.Body = v
	return s
}

type GetRiskPatrolDetailListRequest struct {
	CurrentPage  *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	OperaUid     *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PatrolId     *int64  `json:"PatrolId,omitempty" xml:"PatrolId,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRiskPatrolDetailListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolDetailListRequest) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolDetailListRequest) SetCurrentPage(v int32) *GetRiskPatrolDetailListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetRiskPatrolDetailListRequest) SetInstanceId(v string) *GetRiskPatrolDetailListRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRiskPatrolDetailListRequest) SetInstanceName(v string) *GetRiskPatrolDetailListRequest {
	s.InstanceName = &v
	return s
}

func (s *GetRiskPatrolDetailListRequest) SetOperaUid(v string) *GetRiskPatrolDetailListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetRiskPatrolDetailListRequest) SetPageSize(v int32) *GetRiskPatrolDetailListRequest {
	s.PageSize = &v
	return s
}

func (s *GetRiskPatrolDetailListRequest) SetPatrolId(v int64) *GetRiskPatrolDetailListRequest {
	s.PatrolId = &v
	return s
}

func (s *GetRiskPatrolDetailListRequest) SetStatus(v int32) *GetRiskPatrolDetailListRequest {
	s.Status = &v
	return s
}

type GetRiskPatrolDetailListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRiskPatrolDetailListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolDetailListResponseBody) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolDetailListResponseBody) SetCode(v int32) *GetRiskPatrolDetailListResponseBody {
	s.Code = &v
	return s
}

func (s *GetRiskPatrolDetailListResponseBody) SetData(v map[string]interface{}) *GetRiskPatrolDetailListResponseBody {
	s.Data = v
	return s
}

func (s *GetRiskPatrolDetailListResponseBody) SetMsg(v string) *GetRiskPatrolDetailListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetRiskPatrolDetailListResponseBody) SetPageTotal(v int64) *GetRiskPatrolDetailListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetRiskPatrolDetailListResponseBody) SetRequestId(v string) *GetRiskPatrolDetailListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRiskPatrolDetailListResponseBody) SetStatus(v string) *GetRiskPatrolDetailListResponseBody {
	s.Status = &v
	return s
}

type GetRiskPatrolDetailListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRiskPatrolDetailListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRiskPatrolDetailListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolDetailListResponse) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolDetailListResponse) SetHeaders(v map[string]*string) *GetRiskPatrolDetailListResponse {
	s.Headers = v
	return s
}

func (s *GetRiskPatrolDetailListResponse) SetStatusCode(v int32) *GetRiskPatrolDetailListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRiskPatrolDetailListResponse) SetBody(v *GetRiskPatrolDetailListResponseBody) *GetRiskPatrolDetailListResponse {
	s.Body = v
	return s
}

type GetRiskPatrolListRequest struct {
	BusinessGroupId   *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	BusinessGroupName *string `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
	CurrentPage       *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PatrolId          *int64  `json:"PatrolId,omitempty" xml:"PatrolId,omitempty"`
	RiskPatrolItem    *string `json:"RiskPatrolItem,omitempty" xml:"RiskPatrolItem,omitempty"`
	SeverityLevel     *int32  `json:"SeverityLevel,omitempty" xml:"SeverityLevel,omitempty"`
	Status            *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRiskPatrolListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolListRequest) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolListRequest) SetBusinessGroupId(v string) *GetRiskPatrolListRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *GetRiskPatrolListRequest) SetBusinessGroupName(v string) *GetRiskPatrolListRequest {
	s.BusinessGroupName = &v
	return s
}

func (s *GetRiskPatrolListRequest) SetCurrentPage(v int32) *GetRiskPatrolListRequest {
	s.CurrentPage = &v
	return s
}

func (s *GetRiskPatrolListRequest) SetOperaUid(v string) *GetRiskPatrolListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetRiskPatrolListRequest) SetPageSize(v int32) *GetRiskPatrolListRequest {
	s.PageSize = &v
	return s
}

func (s *GetRiskPatrolListRequest) SetPatrolId(v int64) *GetRiskPatrolListRequest {
	s.PatrolId = &v
	return s
}

func (s *GetRiskPatrolListRequest) SetRiskPatrolItem(v string) *GetRiskPatrolListRequest {
	s.RiskPatrolItem = &v
	return s
}

func (s *GetRiskPatrolListRequest) SetSeverityLevel(v int32) *GetRiskPatrolListRequest {
	s.SeverityLevel = &v
	return s
}

func (s *GetRiskPatrolListRequest) SetStatus(v int32) *GetRiskPatrolListRequest {
	s.Status = &v
	return s
}

type GetRiskPatrolListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRiskPatrolListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolListResponseBody) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolListResponseBody) SetCode(v int32) *GetRiskPatrolListResponseBody {
	s.Code = &v
	return s
}

func (s *GetRiskPatrolListResponseBody) SetData(v map[string]interface{}) *GetRiskPatrolListResponseBody {
	s.Data = v
	return s
}

func (s *GetRiskPatrolListResponseBody) SetMsg(v string) *GetRiskPatrolListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetRiskPatrolListResponseBody) SetPageTotal(v int64) *GetRiskPatrolListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetRiskPatrolListResponseBody) SetRequestId(v string) *GetRiskPatrolListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRiskPatrolListResponseBody) SetStatus(v string) *GetRiskPatrolListResponseBody {
	s.Status = &v
	return s
}

type GetRiskPatrolListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRiskPatrolListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRiskPatrolListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolListResponse) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolListResponse) SetHeaders(v map[string]*string) *GetRiskPatrolListResponse {
	s.Headers = v
	return s
}

func (s *GetRiskPatrolListResponse) SetStatusCode(v int32) *GetRiskPatrolListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRiskPatrolListResponse) SetBody(v *GetRiskPatrolListResponseBody) *GetRiskPatrolListResponse {
	s.Body = v
	return s
}

type GetRiskPatrolStatisticalTrendsRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	Lang     *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetRiskPatrolStatisticalTrendsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolStatisticalTrendsRequest) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolStatisticalTrendsRequest) SetEventId(v string) *GetRiskPatrolStatisticalTrendsRequest {
	s.EventId = &v
	return s
}

func (s *GetRiskPatrolStatisticalTrendsRequest) SetLang(v string) *GetRiskPatrolStatisticalTrendsRequest {
	s.Lang = &v
	return s
}

func (s *GetRiskPatrolStatisticalTrendsRequest) SetOperaUid(v string) *GetRiskPatrolStatisticalTrendsRequest {
	s.OperaUid = &v
	return s
}

type GetRiskPatrolStatisticalTrendsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRiskPatrolStatisticalTrendsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolStatisticalTrendsResponseBody) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolStatisticalTrendsResponseBody) SetCode(v int32) *GetRiskPatrolStatisticalTrendsResponseBody {
	s.Code = &v
	return s
}

func (s *GetRiskPatrolStatisticalTrendsResponseBody) SetData(v map[string]interface{}) *GetRiskPatrolStatisticalTrendsResponseBody {
	s.Data = v
	return s
}

func (s *GetRiskPatrolStatisticalTrendsResponseBody) SetMsg(v string) *GetRiskPatrolStatisticalTrendsResponseBody {
	s.Msg = &v
	return s
}

func (s *GetRiskPatrolStatisticalTrendsResponseBody) SetRequestId(v string) *GetRiskPatrolStatisticalTrendsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRiskPatrolStatisticalTrendsResponseBody) SetStatus(v string) *GetRiskPatrolStatisticalTrendsResponseBody {
	s.Status = &v
	return s
}

type GetRiskPatrolStatisticalTrendsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRiskPatrolStatisticalTrendsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRiskPatrolStatisticalTrendsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolStatisticalTrendsResponse) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolStatisticalTrendsResponse) SetHeaders(v map[string]*string) *GetRiskPatrolStatisticalTrendsResponse {
	s.Headers = v
	return s
}

func (s *GetRiskPatrolStatisticalTrendsResponse) SetStatusCode(v int32) *GetRiskPatrolStatisticalTrendsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRiskPatrolStatisticalTrendsResponse) SetBody(v *GetRiskPatrolStatisticalTrendsResponseBody) *GetRiskPatrolStatisticalTrendsResponse {
	s.Body = v
	return s
}

type GetRiskPatrolStatisticsRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetRiskPatrolStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolStatisticsRequest) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolStatisticsRequest) SetOperaUid(v string) *GetRiskPatrolStatisticsRequest {
	s.OperaUid = &v
	return s
}

type GetRiskPatrolStatisticsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRiskPatrolStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolStatisticsResponseBody) SetCode(v int32) *GetRiskPatrolStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *GetRiskPatrolStatisticsResponseBody) SetData(v map[string]interface{}) *GetRiskPatrolStatisticsResponseBody {
	s.Data = v
	return s
}

func (s *GetRiskPatrolStatisticsResponseBody) SetMsg(v string) *GetRiskPatrolStatisticsResponseBody {
	s.Msg = &v
	return s
}

func (s *GetRiskPatrolStatisticsResponseBody) SetRequestId(v string) *GetRiskPatrolStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRiskPatrolStatisticsResponseBody) SetStatus(v string) *GetRiskPatrolStatisticsResponseBody {
	s.Status = &v
	return s
}

type GetRiskPatrolStatisticsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRiskPatrolStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRiskPatrolStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolStatisticsResponse) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolStatisticsResponse) SetHeaders(v map[string]*string) *GetRiskPatrolStatisticsResponse {
	s.Headers = v
	return s
}

func (s *GetRiskPatrolStatisticsResponse) SetStatusCode(v int32) *GetRiskPatrolStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRiskPatrolStatisticsResponse) SetBody(v *GetRiskPatrolStatisticsResponseBody) *GetRiskPatrolStatisticsResponse {
	s.Body = v
	return s
}

type GetRiskPatrolStatusRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetRiskPatrolStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolStatusRequest) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolStatusRequest) SetOperaUid(v string) *GetRiskPatrolStatusRequest {
	s.OperaUid = &v
	return s
}

type GetRiskPatrolStatusResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRiskPatrolStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolStatusResponseBody) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolStatusResponseBody) SetCode(v int32) *GetRiskPatrolStatusResponseBody {
	s.Code = &v
	return s
}

func (s *GetRiskPatrolStatusResponseBody) SetData(v map[string]interface{}) *GetRiskPatrolStatusResponseBody {
	s.Data = v
	return s
}

func (s *GetRiskPatrolStatusResponseBody) SetMsg(v string) *GetRiskPatrolStatusResponseBody {
	s.Msg = &v
	return s
}

func (s *GetRiskPatrolStatusResponseBody) SetRequestId(v string) *GetRiskPatrolStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRiskPatrolStatusResponseBody) SetStatus(v string) *GetRiskPatrolStatusResponseBody {
	s.Status = &v
	return s
}

type GetRiskPatrolStatusResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRiskPatrolStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRiskPatrolStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRiskPatrolStatusResponse) GoString() string {
	return s.String()
}

func (s *GetRiskPatrolStatusResponse) SetHeaders(v map[string]*string) *GetRiskPatrolStatusResponse {
	s.Headers = v
	return s
}

func (s *GetRiskPatrolStatusResponse) SetStatusCode(v int32) *GetRiskPatrolStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRiskPatrolStatusResponse) SetBody(v *GetRiskPatrolStatusResponseBody) *GetRiskPatrolStatusResponse {
	s.Body = v
	return s
}

type GetRoleResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Staus     *string `json:"Staus,omitempty" xml:"Staus,omitempty"`
}

func (s GetRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRoleResponseBody) GoString() string {
	return s.String()
}

func (s *GetRoleResponseBody) SetCode(v int32) *GetRoleResponseBody {
	s.Code = &v
	return s
}

func (s *GetRoleResponseBody) SetData(v bool) *GetRoleResponseBody {
	s.Data = &v
	return s
}

func (s *GetRoleResponseBody) SetMessage(v string) *GetRoleResponseBody {
	s.Message = &v
	return s
}

func (s *GetRoleResponseBody) SetRequestId(v string) *GetRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRoleResponseBody) SetStaus(v string) *GetRoleResponseBody {
	s.Staus = &v
	return s
}

type GetRoleResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRoleResponse) GoString() string {
	return s.String()
}

func (s *GetRoleResponse) SetHeaders(v map[string]*string) *GetRoleResponse {
	s.Headers = v
	return s
}

func (s *GetRoleResponse) SetStatusCode(v int32) *GetRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRoleResponse) SetBody(v *GetRoleResponseBody) *GetRoleResponse {
	s.Body = v
	return s
}

type GetRootCauseRequest struct {
	EventId     *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RootCauseId *string `json:"RootCauseId,omitempty" xml:"RootCauseId,omitempty"`
}

func (s GetRootCauseRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRootCauseRequest) GoString() string {
	return s.String()
}

func (s *GetRootCauseRequest) SetEventId(v string) *GetRootCauseRequest {
	s.EventId = &v
	return s
}

func (s *GetRootCauseRequest) SetInstanceId(v string) *GetRootCauseRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRootCauseRequest) SetRootCauseId(v string) *GetRootCauseRequest {
	s.RootCauseId = &v
	return s
}

type GetRootCauseResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetRootCauseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRootCauseResponseBody) GoString() string {
	return s.String()
}

func (s *GetRootCauseResponseBody) SetCode(v int32) *GetRootCauseResponseBody {
	s.Code = &v
	return s
}

func (s *GetRootCauseResponseBody) SetData(v map[string]interface{}) *GetRootCauseResponseBody {
	s.Data = v
	return s
}

func (s *GetRootCauseResponseBody) SetMessage(v string) *GetRootCauseResponseBody {
	s.Message = &v
	return s
}

func (s *GetRootCauseResponseBody) SetRequestId(v string) *GetRootCauseResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRootCauseResponseBody) SetStatus(v string) *GetRootCauseResponseBody {
	s.Status = &v
	return s
}

type GetRootCauseResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRootCauseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRootCauseResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRootCauseResponse) GoString() string {
	return s.String()
}

func (s *GetRootCauseResponse) SetHeaders(v map[string]*string) *GetRootCauseResponse {
	s.Headers = v
	return s
}

func (s *GetRootCauseResponse) SetStatusCode(v int32) *GetRootCauseResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRootCauseResponse) SetBody(v *GetRootCauseResponseBody) *GetRootCauseResponse {
	s.Body = v
	return s
}

type GetScenarioDetailRequest struct {
	Id       *string `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetScenarioDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetScenarioDetailRequest) GoString() string {
	return s.String()
}

func (s *GetScenarioDetailRequest) SetId(v string) *GetScenarioDetailRequest {
	s.Id = &v
	return s
}

func (s *GetScenarioDetailRequest) SetOperaUid(v string) *GetScenarioDetailRequest {
	s.OperaUid = &v
	return s
}

type GetScenarioDetailResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetScenarioDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetScenarioDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetScenarioDetailResponseBody) SetCode(v int32) *GetScenarioDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetScenarioDetailResponseBody) SetData(v map[string]interface{}) *GetScenarioDetailResponseBody {
	s.Data = v
	return s
}

func (s *GetScenarioDetailResponseBody) SetMsg(v string) *GetScenarioDetailResponseBody {
	s.Msg = &v
	return s
}

func (s *GetScenarioDetailResponseBody) SetPageTotal(v int64) *GetScenarioDetailResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetScenarioDetailResponseBody) SetRequestId(v string) *GetScenarioDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetScenarioDetailResponseBody) SetStatus(v string) *GetScenarioDetailResponseBody {
	s.Status = &v
	return s
}

type GetScenarioDetailResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetScenarioDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetScenarioDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetScenarioDetailResponse) GoString() string {
	return s.String()
}

func (s *GetScenarioDetailResponse) SetHeaders(v map[string]*string) *GetScenarioDetailResponse {
	s.Headers = v
	return s
}

func (s *GetScenarioDetailResponse) SetStatusCode(v int32) *GetScenarioDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetScenarioDetailResponse) SetBody(v *GetScenarioDetailResponseBody) *GetScenarioDetailResponse {
	s.Body = v
	return s
}

type GetScenarioListRequest struct {
	OperaUid         *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageNo           *int64  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize         *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ScenarioName     *string `json:"ScenarioName,omitempty" xml:"ScenarioName,omitempty"`
	SceneSelectLabel *string `json:"SceneSelectLabel,omitempty" xml:"SceneSelectLabel,omitempty"`
}

func (s GetScenarioListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetScenarioListRequest) GoString() string {
	return s.String()
}

func (s *GetScenarioListRequest) SetOperaUid(v string) *GetScenarioListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetScenarioListRequest) SetPageNo(v int64) *GetScenarioListRequest {
	s.PageNo = &v
	return s
}

func (s *GetScenarioListRequest) SetPageSize(v int64) *GetScenarioListRequest {
	s.PageSize = &v
	return s
}

func (s *GetScenarioListRequest) SetScenarioName(v string) *GetScenarioListRequest {
	s.ScenarioName = &v
	return s
}

func (s *GetScenarioListRequest) SetSceneSelectLabel(v string) *GetScenarioListRequest {
	s.SceneSelectLabel = &v
	return s
}

type GetScenarioListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetScenarioListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetScenarioListResponseBody) GoString() string {
	return s.String()
}

func (s *GetScenarioListResponseBody) SetCode(v int32) *GetScenarioListResponseBody {
	s.Code = &v
	return s
}

func (s *GetScenarioListResponseBody) SetData(v map[string]interface{}) *GetScenarioListResponseBody {
	s.Data = v
	return s
}

func (s *GetScenarioListResponseBody) SetMsg(v string) *GetScenarioListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetScenarioListResponseBody) SetPageTotal(v int64) *GetScenarioListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetScenarioListResponseBody) SetRequestId(v string) *GetScenarioListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetScenarioListResponseBody) SetStatus(v string) *GetScenarioListResponseBody {
	s.Status = &v
	return s
}

type GetScenarioListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetScenarioListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetScenarioListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetScenarioListResponse) GoString() string {
	return s.String()
}

func (s *GetScenarioListResponse) SetHeaders(v map[string]*string) *GetScenarioListResponse {
	s.Headers = v
	return s
}

func (s *GetScenarioListResponse) SetStatusCode(v int32) *GetScenarioListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetScenarioListResponse) SetBody(v *GetScenarioListResponseBody) *GetScenarioListResponse {
	s.Body = v
	return s
}

type GetScenarioStatisticsListRequest struct {
	EndTime     *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ScenarioIds *string `json:"ScenarioIds,omitempty" xml:"ScenarioIds,omitempty"`
}

func (s GetScenarioStatisticsListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetScenarioStatisticsListRequest) GoString() string {
	return s.String()
}

func (s *GetScenarioStatisticsListRequest) SetEndTime(v int64) *GetScenarioStatisticsListRequest {
	s.EndTime = &v
	return s
}

func (s *GetScenarioStatisticsListRequest) SetOperaUid(v string) *GetScenarioStatisticsListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetScenarioStatisticsListRequest) SetScenarioIds(v string) *GetScenarioStatisticsListRequest {
	s.ScenarioIds = &v
	return s
}

type GetScenarioStatisticsListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetScenarioStatisticsListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetScenarioStatisticsListResponseBody) GoString() string {
	return s.String()
}

func (s *GetScenarioStatisticsListResponseBody) SetCode(v int32) *GetScenarioStatisticsListResponseBody {
	s.Code = &v
	return s
}

func (s *GetScenarioStatisticsListResponseBody) SetData(v map[string]interface{}) *GetScenarioStatisticsListResponseBody {
	s.Data = v
	return s
}

func (s *GetScenarioStatisticsListResponseBody) SetMsg(v string) *GetScenarioStatisticsListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetScenarioStatisticsListResponseBody) SetPageTotal(v int64) *GetScenarioStatisticsListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetScenarioStatisticsListResponseBody) SetRequestId(v string) *GetScenarioStatisticsListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetScenarioStatisticsListResponseBody) SetStatus(v string) *GetScenarioStatisticsListResponseBody {
	s.Status = &v
	return s
}

type GetScenarioStatisticsListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetScenarioStatisticsListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetScenarioStatisticsListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetScenarioStatisticsListResponse) GoString() string {
	return s.String()
}

func (s *GetScenarioStatisticsListResponse) SetHeaders(v map[string]*string) *GetScenarioStatisticsListResponse {
	s.Headers = v
	return s
}

func (s *GetScenarioStatisticsListResponse) SetStatusCode(v int32) *GetScenarioStatisticsListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetScenarioStatisticsListResponse) SetBody(v *GetScenarioStatisticsListResponseBody) *GetScenarioStatisticsListResponse {
	s.Body = v
	return s
}

type GetSceneByIdRequest struct {
	Id       *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	MetricId *int32  `json:"MetricId,omitempty" xml:"MetricId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetSceneByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSceneByIdRequest) GoString() string {
	return s.String()
}

func (s *GetSceneByIdRequest) SetId(v int32) *GetSceneByIdRequest {
	s.Id = &v
	return s
}

func (s *GetSceneByIdRequest) SetMetricId(v int32) *GetSceneByIdRequest {
	s.MetricId = &v
	return s
}

func (s *GetSceneByIdRequest) SetOperaUid(v string) *GetSceneByIdRequest {
	s.OperaUid = &v
	return s
}

type GetSceneByIdResponseBody struct {
	Code      *int32            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]*int32 `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string           `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string           `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetSceneByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSceneByIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetSceneByIdResponseBody) SetCode(v int32) *GetSceneByIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetSceneByIdResponseBody) SetData(v map[string]*int32) *GetSceneByIdResponseBody {
	s.Data = v
	return s
}

func (s *GetSceneByIdResponseBody) SetMsg(v string) *GetSceneByIdResponseBody {
	s.Msg = &v
	return s
}

func (s *GetSceneByIdResponseBody) SetRequestId(v string) *GetSceneByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSceneByIdResponseBody) SetStatus(v string) *GetSceneByIdResponseBody {
	s.Status = &v
	return s
}

type GetSceneByIdResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSceneByIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSceneByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSceneByIdResponse) GoString() string {
	return s.String()
}

func (s *GetSceneByIdResponse) SetHeaders(v map[string]*string) *GetSceneByIdResponse {
	s.Headers = v
	return s
}

func (s *GetSceneByIdResponse) SetStatusCode(v int32) *GetSceneByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSceneByIdResponse) SetBody(v *GetSceneByIdResponseBody) *GetSceneByIdResponse {
	s.Body = v
	return s
}

type GetSceneDetailsListRequest struct {
	Id       *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetSceneDetailsListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSceneDetailsListRequest) GoString() string {
	return s.String()
}

func (s *GetSceneDetailsListRequest) SetId(v int32) *GetSceneDetailsListRequest {
	s.Id = &v
	return s
}

func (s *GetSceneDetailsListRequest) SetOperaUid(v string) *GetSceneDetailsListRequest {
	s.OperaUid = &v
	return s
}

type GetSceneDetailsListResponseBody struct {
	Code      *int32            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]*int32 `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string           `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string           `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetSceneDetailsListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSceneDetailsListResponseBody) GoString() string {
	return s.String()
}

func (s *GetSceneDetailsListResponseBody) SetCode(v int32) *GetSceneDetailsListResponseBody {
	s.Code = &v
	return s
}

func (s *GetSceneDetailsListResponseBody) SetData(v map[string]*int32) *GetSceneDetailsListResponseBody {
	s.Data = v
	return s
}

func (s *GetSceneDetailsListResponseBody) SetMsg(v string) *GetSceneDetailsListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetSceneDetailsListResponseBody) SetRequestId(v string) *GetSceneDetailsListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSceneDetailsListResponseBody) SetStatus(v string) *GetSceneDetailsListResponseBody {
	s.Status = &v
	return s
}

type GetSceneDetailsListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSceneDetailsListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSceneDetailsListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSceneDetailsListResponse) GoString() string {
	return s.String()
}

func (s *GetSceneDetailsListResponse) SetHeaders(v map[string]*string) *GetSceneDetailsListResponse {
	s.Headers = v
	return s
}

func (s *GetSceneDetailsListResponse) SetStatusCode(v int32) *GetSceneDetailsListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSceneDetailsListResponse) SetBody(v *GetSceneDetailsListResponseBody) *GetSceneDetailsListResponse {
	s.Body = v
	return s
}

type GetSceneListRequest struct {
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PageNum     *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageTotal   *int32  `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	SceneType   *string `json:"SceneType,omitempty" xml:"SceneType,omitempty"`
	SearchName  *string `json:"SearchName,omitempty" xml:"SearchName,omitempty"`
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
	Status      *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetSceneListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSceneListRequest) GoString() string {
	return s.String()
}

func (s *GetSceneListRequest) SetOperaUid(v string) *GetSceneListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetSceneListRequest) SetPageNum(v int32) *GetSceneListRequest {
	s.PageNum = &v
	return s
}

func (s *GetSceneListRequest) SetPageSize(v int32) *GetSceneListRequest {
	s.PageSize = &v
	return s
}

func (s *GetSceneListRequest) SetPageTotal(v int32) *GetSceneListRequest {
	s.PageTotal = &v
	return s
}

func (s *GetSceneListRequest) SetSceneType(v string) *GetSceneListRequest {
	s.SceneType = &v
	return s
}

func (s *GetSceneListRequest) SetSearchName(v string) *GetSceneListRequest {
	s.SearchName = &v
	return s
}

func (s *GetSceneListRequest) SetSearchValue(v string) *GetSceneListRequest {
	s.SearchValue = &v
	return s
}

func (s *GetSceneListRequest) SetStatus(v int32) *GetSceneListRequest {
	s.Status = &v
	return s
}

type GetSceneListResponseBody struct {
	Code      *int32            `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]*int32 `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string           `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int32            `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string           `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetSceneListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSceneListResponseBody) GoString() string {
	return s.String()
}

func (s *GetSceneListResponseBody) SetCode(v int32) *GetSceneListResponseBody {
	s.Code = &v
	return s
}

func (s *GetSceneListResponseBody) SetData(v map[string]*int32) *GetSceneListResponseBody {
	s.Data = v
	return s
}

func (s *GetSceneListResponseBody) SetMsg(v string) *GetSceneListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetSceneListResponseBody) SetPageTotal(v int32) *GetSceneListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetSceneListResponseBody) SetRequestId(v string) *GetSceneListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSceneListResponseBody) SetStatus(v string) *GetSceneListResponseBody {
	s.Status = &v
	return s
}

type GetSceneListResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSceneListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSceneListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSceneListResponse) GoString() string {
	return s.String()
}

func (s *GetSceneListResponse) SetHeaders(v map[string]*string) *GetSceneListResponse {
	s.Headers = v
	return s
}

func (s *GetSceneListResponse) SetStatusCode(v int32) *GetSceneListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSceneListResponse) SetBody(v *GetSceneListResponseBody) *GetSceneListResponse {
	s.Body = v
	return s
}

type GetSceneMetricTableRequest struct {
	End      *int64  `json:"End,omitempty" xml:"End,omitempty"`
	MetricId *string `json:"MetricId,omitempty" xml:"MetricId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	Start    *int64  `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetSceneMetricTableRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSceneMetricTableRequest) GoString() string {
	return s.String()
}

func (s *GetSceneMetricTableRequest) SetEnd(v int64) *GetSceneMetricTableRequest {
	s.End = &v
	return s
}

func (s *GetSceneMetricTableRequest) SetMetricId(v string) *GetSceneMetricTableRequest {
	s.MetricId = &v
	return s
}

func (s *GetSceneMetricTableRequest) SetOperaUid(v string) *GetSceneMetricTableRequest {
	s.OperaUid = &v
	return s
}

func (s *GetSceneMetricTableRequest) SetStart(v int64) *GetSceneMetricTableRequest {
	s.Start = &v
	return s
}

type GetSceneMetricTableResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetSceneMetricTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSceneMetricTableResponseBody) GoString() string {
	return s.String()
}

func (s *GetSceneMetricTableResponseBody) SetCode(v int32) *GetSceneMetricTableResponseBody {
	s.Code = &v
	return s
}

func (s *GetSceneMetricTableResponseBody) SetData(v map[string]interface{}) *GetSceneMetricTableResponseBody {
	s.Data = v
	return s
}

func (s *GetSceneMetricTableResponseBody) SetMsg(v string) *GetSceneMetricTableResponseBody {
	s.Msg = &v
	return s
}

func (s *GetSceneMetricTableResponseBody) SetPageTotal(v int64) *GetSceneMetricTableResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetSceneMetricTableResponseBody) SetRequestId(v string) *GetSceneMetricTableResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSceneMetricTableResponseBody) SetStatus(v string) *GetSceneMetricTableResponseBody {
	s.Status = &v
	return s
}

type GetSceneMetricTableResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSceneMetricTableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSceneMetricTableResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSceneMetricTableResponse) GoString() string {
	return s.String()
}

func (s *GetSceneMetricTableResponse) SetHeaders(v map[string]*string) *GetSceneMetricTableResponse {
	s.Headers = v
	return s
}

func (s *GetSceneMetricTableResponse) SetStatusCode(v int32) *GetSceneMetricTableResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSceneMetricTableResponse) SetBody(v *GetSceneMetricTableResponseBody) *GetSceneMetricTableResponse {
	s.Body = v
	return s
}

type GetScriptEventRootCauseRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetScriptEventRootCauseRequest) String() string {
	return tea.Prettify(s)
}

func (s GetScriptEventRootCauseRequest) GoString() string {
	return s.String()
}

func (s *GetScriptEventRootCauseRequest) SetEventId(v string) *GetScriptEventRootCauseRequest {
	s.EventId = &v
	return s
}

func (s *GetScriptEventRootCauseRequest) SetOperaUid(v string) *GetScriptEventRootCauseRequest {
	s.OperaUid = &v
	return s
}

type GetScriptEventRootCauseResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetScriptEventRootCauseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetScriptEventRootCauseResponseBody) GoString() string {
	return s.String()
}

func (s *GetScriptEventRootCauseResponseBody) SetCode(v int32) *GetScriptEventRootCauseResponseBody {
	s.Code = &v
	return s
}

func (s *GetScriptEventRootCauseResponseBody) SetData(v map[string]interface{}) *GetScriptEventRootCauseResponseBody {
	s.Data = v
	return s
}

func (s *GetScriptEventRootCauseResponseBody) SetMsg(v string) *GetScriptEventRootCauseResponseBody {
	s.Msg = &v
	return s
}

func (s *GetScriptEventRootCauseResponseBody) SetRequestId(v string) *GetScriptEventRootCauseResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetScriptEventRootCauseResponseBody) SetStatus(v string) *GetScriptEventRootCauseResponseBody {
	s.Status = &v
	return s
}

type GetScriptEventRootCauseResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetScriptEventRootCauseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetScriptEventRootCauseResponse) String() string {
	return tea.Prettify(s)
}

func (s GetScriptEventRootCauseResponse) GoString() string {
	return s.String()
}

func (s *GetScriptEventRootCauseResponse) SetHeaders(v map[string]*string) *GetScriptEventRootCauseResponse {
	s.Headers = v
	return s
}

func (s *GetScriptEventRootCauseResponse) SetStatusCode(v int32) *GetScriptEventRootCauseResponse {
	s.StatusCode = &v
	return s
}

func (s *GetScriptEventRootCauseResponse) SetBody(v *GetScriptEventRootCauseResponseBody) *GetScriptEventRootCauseResponse {
	s.Body = v
	return s
}

type GetSlsLogDataRequest struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Domain    *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	EndTime   *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	StartTime *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Url       *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetSlsLogDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSlsLogDataRequest) GoString() string {
	return s.String()
}

func (s *GetSlsLogDataRequest) SetCode(v string) *GetSlsLogDataRequest {
	s.Code = &v
	return s
}

func (s *GetSlsLogDataRequest) SetDomain(v string) *GetSlsLogDataRequest {
	s.Domain = &v
	return s
}

func (s *GetSlsLogDataRequest) SetEndTime(v int64) *GetSlsLogDataRequest {
	s.EndTime = &v
	return s
}

func (s *GetSlsLogDataRequest) SetOperaUid(v string) *GetSlsLogDataRequest {
	s.OperaUid = &v
	return s
}

func (s *GetSlsLogDataRequest) SetStartTime(v int64) *GetSlsLogDataRequest {
	s.StartTime = &v
	return s
}

func (s *GetSlsLogDataRequest) SetUrl(v string) *GetSlsLogDataRequest {
	s.Url = &v
	return s
}

type GetSlsLogDataResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetSlsLogDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSlsLogDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetSlsLogDataResponseBody) SetCode(v int32) *GetSlsLogDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetSlsLogDataResponseBody) SetData(v map[string]interface{}) *GetSlsLogDataResponseBody {
	s.Data = v
	return s
}

func (s *GetSlsLogDataResponseBody) SetMsg(v string) *GetSlsLogDataResponseBody {
	s.Msg = &v
	return s
}

func (s *GetSlsLogDataResponseBody) SetRequestId(v string) *GetSlsLogDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSlsLogDataResponseBody) SetStatus(v string) *GetSlsLogDataResponseBody {
	s.Status = &v
	return s
}

type GetSlsLogDataResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSlsLogDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSlsLogDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSlsLogDataResponse) GoString() string {
	return s.String()
}

func (s *GetSlsLogDataResponse) SetHeaders(v map[string]*string) *GetSlsLogDataResponse {
	s.Headers = v
	return s
}

func (s *GetSlsLogDataResponse) SetStatusCode(v int32) *GetSlsLogDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSlsLogDataResponse) SetBody(v *GetSlsLogDataResponseBody) *GetSlsLogDataResponse {
	s.Body = v
	return s
}

type GetSynCloudResourceListRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetSynCloudResourceListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSynCloudResourceListRequest) GoString() string {
	return s.String()
}

func (s *GetSynCloudResourceListRequest) SetOperaUid(v string) *GetSynCloudResourceListRequest {
	s.OperaUid = &v
	return s
}

type GetSynCloudResourceListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int32                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetSynCloudResourceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSynCloudResourceListResponseBody) GoString() string {
	return s.String()
}

func (s *GetSynCloudResourceListResponseBody) SetCode(v int32) *GetSynCloudResourceListResponseBody {
	s.Code = &v
	return s
}

func (s *GetSynCloudResourceListResponseBody) SetData(v map[string]interface{}) *GetSynCloudResourceListResponseBody {
	s.Data = v
	return s
}

func (s *GetSynCloudResourceListResponseBody) SetMsg(v string) *GetSynCloudResourceListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetSynCloudResourceListResponseBody) SetPageTotal(v int32) *GetSynCloudResourceListResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetSynCloudResourceListResponseBody) SetRequestId(v string) *GetSynCloudResourceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSynCloudResourceListResponseBody) SetStatus(v string) *GetSynCloudResourceListResponseBody {
	s.Status = &v
	return s
}

type GetSynCloudResourceListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSynCloudResourceListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSynCloudResourceListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSynCloudResourceListResponse) GoString() string {
	return s.String()
}

func (s *GetSynCloudResourceListResponse) SetHeaders(v map[string]*string) *GetSynCloudResourceListResponse {
	s.Headers = v
	return s
}

func (s *GetSynCloudResourceListResponse) SetStatusCode(v int32) *GetSynCloudResourceListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSynCloudResourceListResponse) SetBody(v *GetSynCloudResourceListResponseBody) *GetSynCloudResourceListResponse {
	s.Body = v
	return s
}

type GetTagBusinessGroupListRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	TagId    *int64  `json:"TagId,omitempty" xml:"TagId,omitempty"`
}

func (s GetTagBusinessGroupListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTagBusinessGroupListRequest) GoString() string {
	return s.String()
}

func (s *GetTagBusinessGroupListRequest) SetOperaUid(v string) *GetTagBusinessGroupListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetTagBusinessGroupListRequest) SetTagId(v int64) *GetTagBusinessGroupListRequest {
	s.TagId = &v
	return s
}

type GetTagBusinessGroupListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetTagBusinessGroupListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTagBusinessGroupListResponseBody) GoString() string {
	return s.String()
}

func (s *GetTagBusinessGroupListResponseBody) SetCode(v int32) *GetTagBusinessGroupListResponseBody {
	s.Code = &v
	return s
}

func (s *GetTagBusinessGroupListResponseBody) SetData(v map[string]interface{}) *GetTagBusinessGroupListResponseBody {
	s.Data = v
	return s
}

func (s *GetTagBusinessGroupListResponseBody) SetMsg(v string) *GetTagBusinessGroupListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetTagBusinessGroupListResponseBody) SetRequestId(v string) *GetTagBusinessGroupListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTagBusinessGroupListResponseBody) SetStatus(v string) *GetTagBusinessGroupListResponseBody {
	s.Status = &v
	return s
}

type GetTagBusinessGroupListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTagBusinessGroupListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTagBusinessGroupListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTagBusinessGroupListResponse) GoString() string {
	return s.String()
}

func (s *GetTagBusinessGroupListResponse) SetHeaders(v map[string]*string) *GetTagBusinessGroupListResponse {
	s.Headers = v
	return s
}

func (s *GetTagBusinessGroupListResponse) SetStatusCode(v int32) *GetTagBusinessGroupListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTagBusinessGroupListResponse) SetBody(v *GetTagBusinessGroupListResponseBody) *GetTagBusinessGroupListResponse {
	s.Body = v
	return s
}

type GetTagDropListRequest struct {
	OperaUid  *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductId *int64  `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
}

func (s GetTagDropListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTagDropListRequest) GoString() string {
	return s.String()
}

func (s *GetTagDropListRequest) SetOperaUid(v string) *GetTagDropListRequest {
	s.OperaUid = &v
	return s
}

func (s *GetTagDropListRequest) SetProductId(v int64) *GetTagDropListRequest {
	s.ProductId = &v
	return s
}

type GetTagDropListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetTagDropListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTagDropListResponseBody) GoString() string {
	return s.String()
}

func (s *GetTagDropListResponseBody) SetCode(v int32) *GetTagDropListResponseBody {
	s.Code = &v
	return s
}

func (s *GetTagDropListResponseBody) SetData(v map[string]interface{}) *GetTagDropListResponseBody {
	s.Data = v
	return s
}

func (s *GetTagDropListResponseBody) SetMsg(v string) *GetTagDropListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetTagDropListResponseBody) SetRequestId(v string) *GetTagDropListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTagDropListResponseBody) SetStatus(v string) *GetTagDropListResponseBody {
	s.Status = &v
	return s
}

type GetTagDropListResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTagDropListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTagDropListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTagDropListResponse) GoString() string {
	return s.String()
}

func (s *GetTagDropListResponse) SetHeaders(v map[string]*string) *GetTagDropListResponse {
	s.Headers = v
	return s
}

func (s *GetTagDropListResponse) SetStatusCode(v int32) *GetTagDropListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTagDropListResponse) SetBody(v *GetTagDropListResponseBody) *GetTagDropListResponse {
	s.Body = v
	return s
}

type GetTargetDimensionDataRequest struct {
	End        *int64  `json:"End,omitempty" xml:"End,omitempty"`
	Flag       *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	LabelValue *string `json:"LabelValue,omitempty" xml:"LabelValue,omitempty"`
	MetricId   *string `json:"MetricId,omitempty" xml:"MetricId,omitempty"`
	OperaUid   *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	Start      *int64  `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetTargetDimensionDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTargetDimensionDataRequest) GoString() string {
	return s.String()
}

func (s *GetTargetDimensionDataRequest) SetEnd(v int64) *GetTargetDimensionDataRequest {
	s.End = &v
	return s
}

func (s *GetTargetDimensionDataRequest) SetFlag(v string) *GetTargetDimensionDataRequest {
	s.Flag = &v
	return s
}

func (s *GetTargetDimensionDataRequest) SetLabel(v string) *GetTargetDimensionDataRequest {
	s.Label = &v
	return s
}

func (s *GetTargetDimensionDataRequest) SetLabelValue(v string) *GetTargetDimensionDataRequest {
	s.LabelValue = &v
	return s
}

func (s *GetTargetDimensionDataRequest) SetMetricId(v string) *GetTargetDimensionDataRequest {
	s.MetricId = &v
	return s
}

func (s *GetTargetDimensionDataRequest) SetOperaUid(v string) *GetTargetDimensionDataRequest {
	s.OperaUid = &v
	return s
}

func (s *GetTargetDimensionDataRequest) SetStart(v int64) *GetTargetDimensionDataRequest {
	s.Start = &v
	return s
}

type GetTargetDimensionDataResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetTargetDimensionDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTargetDimensionDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetTargetDimensionDataResponseBody) SetCode(v int32) *GetTargetDimensionDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetTargetDimensionDataResponseBody) SetData(v map[string]interface{}) *GetTargetDimensionDataResponseBody {
	s.Data = v
	return s
}

func (s *GetTargetDimensionDataResponseBody) SetMsg(v string) *GetTargetDimensionDataResponseBody {
	s.Msg = &v
	return s
}

func (s *GetTargetDimensionDataResponseBody) SetPageTotal(v int64) *GetTargetDimensionDataResponseBody {
	s.PageTotal = &v
	return s
}

func (s *GetTargetDimensionDataResponseBody) SetRequestId(v string) *GetTargetDimensionDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTargetDimensionDataResponseBody) SetStatus(v string) *GetTargetDimensionDataResponseBody {
	s.Status = &v
	return s
}

type GetTargetDimensionDataResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTargetDimensionDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTargetDimensionDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTargetDimensionDataResponse) GoString() string {
	return s.String()
}

func (s *GetTargetDimensionDataResponse) SetHeaders(v map[string]*string) *GetTargetDimensionDataResponse {
	s.Headers = v
	return s
}

func (s *GetTargetDimensionDataResponse) SetStatusCode(v int32) *GetTargetDimensionDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTargetDimensionDataResponse) SetBody(v *GetTargetDimensionDataResponseBody) *GetTargetDimensionDataResponse {
	s.Body = v
	return s
}

type GetThresholdListRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetThresholdListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThresholdListRequest) GoString() string {
	return s.String()
}

func (s *GetThresholdListRequest) SetOperaUid(v string) *GetThresholdListRequest {
	s.OperaUid = &v
	return s
}

type GetThresholdListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetThresholdListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetThresholdListResponseBody) GoString() string {
	return s.String()
}

func (s *GetThresholdListResponseBody) SetCode(v int32) *GetThresholdListResponseBody {
	s.Code = &v
	return s
}

func (s *GetThresholdListResponseBody) SetData(v map[string]interface{}) *GetThresholdListResponseBody {
	s.Data = v
	return s
}

func (s *GetThresholdListResponseBody) SetMsg(v string) *GetThresholdListResponseBody {
	s.Msg = &v
	return s
}

func (s *GetThresholdListResponseBody) SetRequestId(v string) *GetThresholdListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetThresholdListResponseBody) SetStatus(v string) *GetThresholdListResponseBody {
	s.Status = &v
	return s
}

type GetThresholdListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetThresholdListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetThresholdListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThresholdListResponse) GoString() string {
	return s.String()
}

func (s *GetThresholdListResponse) SetHeaders(v map[string]*string) *GetThresholdListResponse {
	s.Headers = v
	return s
}

func (s *GetThresholdListResponse) SetStatusCode(v int32) *GetThresholdListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetThresholdListResponse) SetBody(v *GetThresholdListResponseBody) *GetThresholdListResponse {
	s.Body = v
	return s
}

type GetThroughPutRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetThroughPutRequest) String() string {
	return tea.Prettify(s)
}

func (s GetThroughPutRequest) GoString() string {
	return s.String()
}

func (s *GetThroughPutRequest) SetOperaUid(v string) *GetThroughPutRequest {
	s.OperaUid = &v
	return s
}

type GetThroughPutResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetThroughPutResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetThroughPutResponseBody) GoString() string {
	return s.String()
}

func (s *GetThroughPutResponseBody) SetCode(v int32) *GetThroughPutResponseBody {
	s.Code = &v
	return s
}

func (s *GetThroughPutResponseBody) SetData(v map[string]interface{}) *GetThroughPutResponseBody {
	s.Data = v
	return s
}

func (s *GetThroughPutResponseBody) SetMsg(v string) *GetThroughPutResponseBody {
	s.Msg = &v
	return s
}

func (s *GetThroughPutResponseBody) SetRequestId(v string) *GetThroughPutResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetThroughPutResponseBody) SetStatus(v string) *GetThroughPutResponseBody {
	s.Status = &v
	return s
}

type GetThroughPutResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetThroughPutResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetThroughPutResponse) String() string {
	return tea.Prettify(s)
}

func (s GetThroughPutResponse) GoString() string {
	return s.String()
}

func (s *GetThroughPutResponse) SetHeaders(v map[string]*string) *GetThroughPutResponse {
	s.Headers = v
	return s
}

func (s *GetThroughPutResponse) SetStatusCode(v int32) *GetThroughPutResponse {
	s.StatusCode = &v
	return s
}

func (s *GetThroughPutResponse) SetBody(v *GetThroughPutResponseBody) *GetThroughPutResponse {
	s.Body = v
	return s
}

type GetTrendSlsReportsRequest struct {
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	Severity    *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	Uid         *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s GetTrendSlsReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTrendSlsReportsRequest) GoString() string {
	return s.String()
}

func (s *GetTrendSlsReportsRequest) SetInstanceId(v string) *GetTrendSlsReportsRequest {
	s.InstanceId = &v
	return s
}

func (s *GetTrendSlsReportsRequest) SetProductCode(v string) *GetTrendSlsReportsRequest {
	s.ProductCode = &v
	return s
}

func (s *GetTrendSlsReportsRequest) SetSeverity(v string) *GetTrendSlsReportsRequest {
	s.Severity = &v
	return s
}

func (s *GetTrendSlsReportsRequest) SetUid(v int64) *GetTrendSlsReportsRequest {
	s.Uid = &v
	return s
}

type GetTrendSlsReportsResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetTrendSlsReportsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTrendSlsReportsResponseBody) GoString() string {
	return s.String()
}

func (s *GetTrendSlsReportsResponseBody) SetCode(v int32) *GetTrendSlsReportsResponseBody {
	s.Code = &v
	return s
}

func (s *GetTrendSlsReportsResponseBody) SetData(v map[string]interface{}) *GetTrendSlsReportsResponseBody {
	s.Data = v
	return s
}

func (s *GetTrendSlsReportsResponseBody) SetMessage(v string) *GetTrendSlsReportsResponseBody {
	s.Message = &v
	return s
}

func (s *GetTrendSlsReportsResponseBody) SetRequestId(v string) *GetTrendSlsReportsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTrendSlsReportsResponseBody) SetStatus(v string) *GetTrendSlsReportsResponseBody {
	s.Status = &v
	return s
}

type GetTrendSlsReportsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTrendSlsReportsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTrendSlsReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTrendSlsReportsResponse) GoString() string {
	return s.String()
}

func (s *GetTrendSlsReportsResponse) SetHeaders(v map[string]*string) *GetTrendSlsReportsResponse {
	s.Headers = v
	return s
}

func (s *GetTrendSlsReportsResponse) SetStatusCode(v int32) *GetTrendSlsReportsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTrendSlsReportsResponse) SetBody(v *GetTrendSlsReportsResponseBody) *GetTrendSlsReportsResponse {
	s.Body = v
	return s
}

type GetUserInfoRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetUserInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserInfoRequest) GoString() string {
	return s.String()
}

func (s *GetUserInfoRequest) SetOperaUid(v string) *GetUserInfoRequest {
	s.OperaUid = &v
	return s
}

type GetUserInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetUserInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserInfoResponseBody) SetCode(v int32) *GetUserInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetUserInfoResponseBody) SetData(v map[string]interface{}) *GetUserInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetUserInfoResponseBody) SetMsg(v string) *GetUserInfoResponseBody {
	s.Msg = &v
	return s
}

func (s *GetUserInfoResponseBody) SetRequestId(v string) *GetUserInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserInfoResponseBody) SetStatus(v string) *GetUserInfoResponseBody {
	s.Status = &v
	return s
}

type GetUserInfoResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserInfoResponse) GoString() string {
	return s.String()
}

func (s *GetUserInfoResponse) SetHeaders(v map[string]*string) *GetUserInfoResponse {
	s.Headers = v
	return s
}

func (s *GetUserInfoResponse) SetStatusCode(v int32) *GetUserInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserInfoResponse) SetBody(v *GetUserInfoResponseBody) *GetUserInfoResponse {
	s.Body = v
	return s
}

type GetUserLoginInfoRequest struct {
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountPrincipalName *string `json:"AccountPrincipalName,omitempty" xml:"AccountPrincipalName,omitempty"`
	AccountType          *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	CurrentPk            *string `json:"CurrentPk,omitempty" xml:"CurrentPk,omitempty"`
	MainAccountPk        *string `json:"MainAccountPk,omitempty" xml:"MainAccountPk,omitempty"`
}

func (s GetUserLoginInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserLoginInfoRequest) GoString() string {
	return s.String()
}

func (s *GetUserLoginInfoRequest) SetAccountName(v string) *GetUserLoginInfoRequest {
	s.AccountName = &v
	return s
}

func (s *GetUserLoginInfoRequest) SetAccountPrincipalName(v string) *GetUserLoginInfoRequest {
	s.AccountPrincipalName = &v
	return s
}

func (s *GetUserLoginInfoRequest) SetAccountType(v string) *GetUserLoginInfoRequest {
	s.AccountType = &v
	return s
}

func (s *GetUserLoginInfoRequest) SetCurrentPk(v string) *GetUserLoginInfoRequest {
	s.CurrentPk = &v
	return s
}

func (s *GetUserLoginInfoRequest) SetMainAccountPk(v string) *GetUserLoginInfoRequest {
	s.MainAccountPk = &v
	return s
}

type GetUserLoginInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetUserLoginInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserLoginInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserLoginInfoResponseBody) SetCode(v int32) *GetUserLoginInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetUserLoginInfoResponseBody) SetData(v map[string]interface{}) *GetUserLoginInfoResponseBody {
	s.Data = v
	return s
}

func (s *GetUserLoginInfoResponseBody) SetMsg(v string) *GetUserLoginInfoResponseBody {
	s.Msg = &v
	return s
}

func (s *GetUserLoginInfoResponseBody) SetRequestId(v string) *GetUserLoginInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserLoginInfoResponseBody) SetStatus(v string) *GetUserLoginInfoResponseBody {
	s.Status = &v
	return s
}

type GetUserLoginInfoResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserLoginInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserLoginInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserLoginInfoResponse) GoString() string {
	return s.String()
}

func (s *GetUserLoginInfoResponse) SetHeaders(v map[string]*string) *GetUserLoginInfoResponse {
	s.Headers = v
	return s
}

func (s *GetUserLoginInfoResponse) SetStatusCode(v int32) *GetUserLoginInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserLoginInfoResponse) SetBody(v *GetUserLoginInfoResponseBody) *GetUserLoginInfoResponse {
	s.Body = v
	return s
}

type GetUserOrderConfigRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s GetUserOrderConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserOrderConfigRequest) GoString() string {
	return s.String()
}

func (s *GetUserOrderConfigRequest) SetOperaUid(v string) *GetUserOrderConfigRequest {
	s.OperaUid = &v
	return s
}

type GetUserOrderConfigResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetUserOrderConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserOrderConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserOrderConfigResponseBody) SetCode(v int32) *GetUserOrderConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetUserOrderConfigResponseBody) SetData(v map[string]interface{}) *GetUserOrderConfigResponseBody {
	s.Data = v
	return s
}

func (s *GetUserOrderConfigResponseBody) SetMsg(v string) *GetUserOrderConfigResponseBody {
	s.Msg = &v
	return s
}

func (s *GetUserOrderConfigResponseBody) SetRequestId(v string) *GetUserOrderConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserOrderConfigResponseBody) SetStatus(v string) *GetUserOrderConfigResponseBody {
	s.Status = &v
	return s
}

type GetUserOrderConfigResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserOrderConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserOrderConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserOrderConfigResponse) GoString() string {
	return s.String()
}

func (s *GetUserOrderConfigResponse) SetHeaders(v map[string]*string) *GetUserOrderConfigResponse {
	s.Headers = v
	return s
}

func (s *GetUserOrderConfigResponse) SetStatusCode(v int32) *GetUserOrderConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserOrderConfigResponse) SetBody(v *GetUserOrderConfigResponseBody) *GetUserOrderConfigResponse {
	s.Body = v
	return s
}

type IgnoreAlarmsRequest struct {
	AlarmId *string `json:"AlarmId,omitempty" xml:"AlarmId,omitempty"`
}

func (s IgnoreAlarmsRequest) String() string {
	return tea.Prettify(s)
}

func (s IgnoreAlarmsRequest) GoString() string {
	return s.String()
}

func (s *IgnoreAlarmsRequest) SetAlarmId(v string) *IgnoreAlarmsRequest {
	s.AlarmId = &v
	return s
}

type IgnoreAlarmsResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s IgnoreAlarmsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s IgnoreAlarmsResponseBody) GoString() string {
	return s.String()
}

func (s *IgnoreAlarmsResponseBody) SetCode(v string) *IgnoreAlarmsResponseBody {
	s.Code = &v
	return s
}

func (s *IgnoreAlarmsResponseBody) SetData(v bool) *IgnoreAlarmsResponseBody {
	s.Data = &v
	return s
}

func (s *IgnoreAlarmsResponseBody) SetMessage(v string) *IgnoreAlarmsResponseBody {
	s.Message = &v
	return s
}

func (s *IgnoreAlarmsResponseBody) SetRequestId(v string) *IgnoreAlarmsResponseBody {
	s.RequestId = &v
	return s
}

func (s *IgnoreAlarmsResponseBody) SetStatus(v string) *IgnoreAlarmsResponseBody {
	s.Status = &v
	return s
}

type IgnoreAlarmsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *IgnoreAlarmsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s IgnoreAlarmsResponse) String() string {
	return tea.Prettify(s)
}

func (s IgnoreAlarmsResponse) GoString() string {
	return s.String()
}

func (s *IgnoreAlarmsResponse) SetHeaders(v map[string]*string) *IgnoreAlarmsResponse {
	s.Headers = v
	return s
}

func (s *IgnoreAlarmsResponse) SetStatusCode(v int32) *IgnoreAlarmsResponse {
	s.StatusCode = &v
	return s
}

func (s *IgnoreAlarmsResponse) SetBody(v *IgnoreAlarmsResponseBody) *IgnoreAlarmsResponse {
	s.Body = v
	return s
}

type ListApplyAuthorizationRequest struct {
	CurrentPage         *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize            *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PermissionType      *int32  `json:"PermissionType,omitempty" xml:"PermissionType,omitempty"`
	SwitchFrontOperaUid *string `json:"SwitchFrontOperaUid,omitempty" xml:"SwitchFrontOperaUid,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uid                 *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s ListApplyAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplyAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *ListApplyAuthorizationRequest) SetCurrentPage(v int32) *ListApplyAuthorizationRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListApplyAuthorizationRequest) SetPageSize(v int32) *ListApplyAuthorizationRequest {
	s.PageSize = &v
	return s
}

func (s *ListApplyAuthorizationRequest) SetPermissionType(v int32) *ListApplyAuthorizationRequest {
	s.PermissionType = &v
	return s
}

func (s *ListApplyAuthorizationRequest) SetSwitchFrontOperaUid(v string) *ListApplyAuthorizationRequest {
	s.SwitchFrontOperaUid = &v
	return s
}

func (s *ListApplyAuthorizationRequest) SetType(v string) *ListApplyAuthorizationRequest {
	s.Type = &v
	return s
}

func (s *ListApplyAuthorizationRequest) SetUid(v int64) *ListApplyAuthorizationRequest {
	s.Uid = &v
	return s
}

type ListApplyAuthorizationResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListApplyAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplyAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplyAuthorizationResponseBody) SetCode(v int32) *ListApplyAuthorizationResponseBody {
	s.Code = &v
	return s
}

func (s *ListApplyAuthorizationResponseBody) SetData(v map[string]interface{}) *ListApplyAuthorizationResponseBody {
	s.Data = v
	return s
}

func (s *ListApplyAuthorizationResponseBody) SetMsg(v string) *ListApplyAuthorizationResponseBody {
	s.Msg = &v
	return s
}

func (s *ListApplyAuthorizationResponseBody) SetPageTotal(v int64) *ListApplyAuthorizationResponseBody {
	s.PageTotal = &v
	return s
}

func (s *ListApplyAuthorizationResponseBody) SetRequestId(v string) *ListApplyAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListApplyAuthorizationResponseBody) SetStatus(v string) *ListApplyAuthorizationResponseBody {
	s.Status = &v
	return s
}

type ListApplyAuthorizationResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListApplyAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListApplyAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplyAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *ListApplyAuthorizationResponse) SetHeaders(v map[string]*string) *ListApplyAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *ListApplyAuthorizationResponse) SetStatusCode(v int32) *ListApplyAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *ListApplyAuthorizationResponse) SetBody(v *ListApplyAuthorizationResponseBody) *ListApplyAuthorizationResponse {
	s.Body = v
	return s
}

type ListAuthRequest struct {
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAuthRequest) GoString() string {
	return s.String()
}

func (s *ListAuthRequest) SetUserId(v string) *ListAuthRequest {
	s.UserId = &v
	return s
}

type ListAuthResponseBody struct {
	List      []*string `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	Message   *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAuthResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAuthResponseBody) GoString() string {
	return s.String()
}

func (s *ListAuthResponseBody) SetList(v []*string) *ListAuthResponseBody {
	s.List = v
	return s
}

func (s *ListAuthResponseBody) SetMessage(v string) *ListAuthResponseBody {
	s.Message = &v
	return s
}

func (s *ListAuthResponseBody) SetRequestId(v string) *ListAuthResponseBody {
	s.RequestId = &v
	return s
}

type ListAuthResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAuthResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAuthResponse) GoString() string {
	return s.String()
}

func (s *ListAuthResponse) SetHeaders(v map[string]*string) *ListAuthResponse {
	s.Headers = v
	return s
}

func (s *ListAuthResponse) SetStatusCode(v int32) *ListAuthResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAuthResponse) SetBody(v *ListAuthResponseBody) *ListAuthResponse {
	s.Body = v
	return s
}

type ListAuthorizedUidResponseBody struct {
	Code      *int32   `json:"Code,omitempty" xml:"Code,omitempty"`
	List      []*int64 `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	Message   *string  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListAuthorizedUidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorizedUidResponseBody) GoString() string {
	return s.String()
}

func (s *ListAuthorizedUidResponseBody) SetCode(v int32) *ListAuthorizedUidResponseBody {
	s.Code = &v
	return s
}

func (s *ListAuthorizedUidResponseBody) SetList(v []*int64) *ListAuthorizedUidResponseBody {
	s.List = v
	return s
}

func (s *ListAuthorizedUidResponseBody) SetMessage(v string) *ListAuthorizedUidResponseBody {
	s.Message = &v
	return s
}

func (s *ListAuthorizedUidResponseBody) SetRequestId(v string) *ListAuthorizedUidResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAuthorizedUidResponseBody) SetStatus(v string) *ListAuthorizedUidResponseBody {
	s.Status = &v
	return s
}

type ListAuthorizedUidResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAuthorizedUidResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAuthorizedUidResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorizedUidResponse) GoString() string {
	return s.String()
}

func (s *ListAuthorizedUidResponse) SetHeaders(v map[string]*string) *ListAuthorizedUidResponse {
	s.Headers = v
	return s
}

func (s *ListAuthorizedUidResponse) SetStatusCode(v int32) *ListAuthorizedUidResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAuthorizedUidResponse) SetBody(v *ListAuthorizedUidResponseBody) *ListAuthorizedUidResponse {
	s.Body = v
	return s
}

type ListCausePlanRequest struct {
	EventId     *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RootCauseId *string `json:"RootCauseId,omitempty" xml:"RootCauseId,omitempty"`
}

func (s ListCausePlanRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCausePlanRequest) GoString() string {
	return s.String()
}

func (s *ListCausePlanRequest) SetEventId(v string) *ListCausePlanRequest {
	s.EventId = &v
	return s
}

func (s *ListCausePlanRequest) SetInstanceId(v string) *ListCausePlanRequest {
	s.InstanceId = &v
	return s
}

func (s *ListCausePlanRequest) SetRootCauseId(v string) *ListCausePlanRequest {
	s.RootCauseId = &v
	return s
}

type ListCausePlanResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListCausePlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCausePlanResponseBody) GoString() string {
	return s.String()
}

func (s *ListCausePlanResponseBody) SetCode(v int32) *ListCausePlanResponseBody {
	s.Code = &v
	return s
}

func (s *ListCausePlanResponseBody) SetData(v map[string]interface{}) *ListCausePlanResponseBody {
	s.Data = v
	return s
}

func (s *ListCausePlanResponseBody) SetMessage(v string) *ListCausePlanResponseBody {
	s.Message = &v
	return s
}

func (s *ListCausePlanResponseBody) SetRequestId(v string) *ListCausePlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCausePlanResponseBody) SetStatus(v string) *ListCausePlanResponseBody {
	s.Status = &v
	return s
}

type ListCausePlanResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCausePlanResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCausePlanResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCausePlanResponse) GoString() string {
	return s.String()
}

func (s *ListCausePlanResponse) SetHeaders(v map[string]*string) *ListCausePlanResponse {
	s.Headers = v
	return s
}

func (s *ListCausePlanResponse) SetStatusCode(v int32) *ListCausePlanResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCausePlanResponse) SetBody(v *ListCausePlanResponseBody) *ListCausePlanResponse {
	s.Body = v
	return s
}

type ListConfirmAuthorizationRequest struct {
	CurrentPage         *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize            *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PermissionType      *int32  `json:"PermissionType,omitempty" xml:"PermissionType,omitempty"`
	SwitchFrontOperaUid *string `json:"SwitchFrontOperaUid,omitempty" xml:"SwitchFrontOperaUid,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uid                 *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s ListConfirmAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConfirmAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *ListConfirmAuthorizationRequest) SetCurrentPage(v int32) *ListConfirmAuthorizationRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListConfirmAuthorizationRequest) SetPageSize(v int32) *ListConfirmAuthorizationRequest {
	s.PageSize = &v
	return s
}

func (s *ListConfirmAuthorizationRequest) SetPermissionType(v int32) *ListConfirmAuthorizationRequest {
	s.PermissionType = &v
	return s
}

func (s *ListConfirmAuthorizationRequest) SetSwitchFrontOperaUid(v string) *ListConfirmAuthorizationRequest {
	s.SwitchFrontOperaUid = &v
	return s
}

func (s *ListConfirmAuthorizationRequest) SetType(v string) *ListConfirmAuthorizationRequest {
	s.Type = &v
	return s
}

func (s *ListConfirmAuthorizationRequest) SetUid(v int64) *ListConfirmAuthorizationRequest {
	s.Uid = &v
	return s
}

type ListConfirmAuthorizationResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListConfirmAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConfirmAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *ListConfirmAuthorizationResponseBody) SetCode(v int32) *ListConfirmAuthorizationResponseBody {
	s.Code = &v
	return s
}

func (s *ListConfirmAuthorizationResponseBody) SetData(v map[string]interface{}) *ListConfirmAuthorizationResponseBody {
	s.Data = v
	return s
}

func (s *ListConfirmAuthorizationResponseBody) SetMsg(v string) *ListConfirmAuthorizationResponseBody {
	s.Msg = &v
	return s
}

func (s *ListConfirmAuthorizationResponseBody) SetPageTotal(v int64) *ListConfirmAuthorizationResponseBody {
	s.PageTotal = &v
	return s
}

func (s *ListConfirmAuthorizationResponseBody) SetRequestId(v string) *ListConfirmAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListConfirmAuthorizationResponseBody) SetStatus(v string) *ListConfirmAuthorizationResponseBody {
	s.Status = &v
	return s
}

type ListConfirmAuthorizationResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListConfirmAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListConfirmAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConfirmAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *ListConfirmAuthorizationResponse) SetHeaders(v map[string]*string) *ListConfirmAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *ListConfirmAuthorizationResponse) SetStatusCode(v int32) *ListConfirmAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *ListConfirmAuthorizationResponse) SetBody(v *ListConfirmAuthorizationResponseBody) *ListConfirmAuthorizationResponse {
	s.Body = v
	return s
}

type ListEventRequest struct {
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Uid         *int64 `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s ListEventRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEventRequest) GoString() string {
	return s.String()
}

func (s *ListEventRequest) SetCurrentPage(v int32) *ListEventRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListEventRequest) SetPageSize(v int32) *ListEventRequest {
	s.PageSize = &v
	return s
}

func (s *ListEventRequest) SetUid(v int64) *ListEventRequest {
	s.Uid = &v
	return s
}

type ListEventResponseBody struct {
	Code      *int64                   `json:"Code,omitempty" xml:"Code,omitempty"`
	List      []map[string]interface{} `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	Message   *string                  `json:"Message,omitempty" xml:"Message,omitempty"`
	PageTotal *int64                   `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEventResponseBody) GoString() string {
	return s.String()
}

func (s *ListEventResponseBody) SetCode(v int64) *ListEventResponseBody {
	s.Code = &v
	return s
}

func (s *ListEventResponseBody) SetList(v []map[string]interface{}) *ListEventResponseBody {
	s.List = v
	return s
}

func (s *ListEventResponseBody) SetMessage(v string) *ListEventResponseBody {
	s.Message = &v
	return s
}

func (s *ListEventResponseBody) SetPageTotal(v int64) *ListEventResponseBody {
	s.PageTotal = &v
	return s
}

func (s *ListEventResponseBody) SetRequestId(v string) *ListEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEventResponseBody) SetStatus(v string) *ListEventResponseBody {
	s.Status = &v
	return s
}

type ListEventResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEventResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEventResponse) GoString() string {
	return s.String()
}

func (s *ListEventResponse) SetHeaders(v map[string]*string) *ListEventResponse {
	s.Headers = v
	return s
}

func (s *ListEventResponse) SetStatusCode(v int32) *ListEventResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEventResponse) SetBody(v *ListEventResponseBody) *ListEventResponse {
	s.Body = v
	return s
}

type ListNotAuthorizedUidResponseBody struct {
	Code      *int32   `json:"Code,omitempty" xml:"Code,omitempty"`
	List      []*int64 `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	Message   *string  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListNotAuthorizedUidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNotAuthorizedUidResponseBody) GoString() string {
	return s.String()
}

func (s *ListNotAuthorizedUidResponseBody) SetCode(v int32) *ListNotAuthorizedUidResponseBody {
	s.Code = &v
	return s
}

func (s *ListNotAuthorizedUidResponseBody) SetList(v []*int64) *ListNotAuthorizedUidResponseBody {
	s.List = v
	return s
}

func (s *ListNotAuthorizedUidResponseBody) SetMessage(v string) *ListNotAuthorizedUidResponseBody {
	s.Message = &v
	return s
}

func (s *ListNotAuthorizedUidResponseBody) SetRequestId(v string) *ListNotAuthorizedUidResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNotAuthorizedUidResponseBody) SetStatus(v string) *ListNotAuthorizedUidResponseBody {
	s.Status = &v
	return s
}

type ListNotAuthorizedUidResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNotAuthorizedUidResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNotAuthorizedUidResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNotAuthorizedUidResponse) GoString() string {
	return s.String()
}

func (s *ListNotAuthorizedUidResponse) SetHeaders(v map[string]*string) *ListNotAuthorizedUidResponse {
	s.Headers = v
	return s
}

func (s *ListNotAuthorizedUidResponse) SetStatusCode(v int32) *ListNotAuthorizedUidResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNotAuthorizedUidResponse) SetBody(v *ListNotAuthorizedUidResponseBody) *ListNotAuthorizedUidResponse {
	s.Body = v
	return s
}

type ListReportsRequest struct {
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Uid         *int64 `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s ListReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListReportsRequest) GoString() string {
	return s.String()
}

func (s *ListReportsRequest) SetCurrentPage(v int32) *ListReportsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListReportsRequest) SetPageSize(v int32) *ListReportsRequest {
	s.PageSize = &v
	return s
}

func (s *ListReportsRequest) SetUid(v int64) *ListReportsRequest {
	s.Uid = &v
	return s
}

type ListReportsResponseBody struct {
	Code      *int32                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []*ListReportsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                        `json:"Message,omitempty" xml:"Message,omitempty"`
	PageTotal *int64                         `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                        `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListReportsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListReportsResponseBody) GoString() string {
	return s.String()
}

func (s *ListReportsResponseBody) SetCode(v int32) *ListReportsResponseBody {
	s.Code = &v
	return s
}

func (s *ListReportsResponseBody) SetData(v []*ListReportsResponseBodyData) *ListReportsResponseBody {
	s.Data = v
	return s
}

func (s *ListReportsResponseBody) SetMessage(v string) *ListReportsResponseBody {
	s.Message = &v
	return s
}

func (s *ListReportsResponseBody) SetPageTotal(v int64) *ListReportsResponseBody {
	s.PageTotal = &v
	return s
}

func (s *ListReportsResponseBody) SetRequestId(v string) *ListReportsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListReportsResponseBody) SetStatus(v string) *ListReportsResponseBody {
	s.Status = &v
	return s
}

type ListReportsResponseBodyData struct {
	Bid                    *string `json:"bid,omitempty" xml:"bid,omitempty"`
	Cid                    *int64  `json:"cid,omitempty" xml:"cid,omitempty"`
	CostCount              *int64  `json:"costCount,omitempty" xml:"costCount,omitempty"`
	CostCountTrendJson     *string `json:"costCountTrendJson,omitempty" xml:"costCountTrendJson,omitempty"`
	CriticalCount          *int64  `json:"criticalCount,omitempty" xml:"criticalCount,omitempty"`
	CriticalCountTrendJson *string `json:"criticalCountTrendJson,omitempty" xml:"criticalCountTrendJson,omitempty"`
	CustomerName           *string `json:"customerName,omitempty" xml:"customerName,omitempty"`
	GcLevel                *string `json:"gcLevel,omitempty" xml:"gcLevel,omitempty"`
	GmtCreate              *int64  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified            *int64  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Id                     *int64  `json:"id,omitempty" xml:"id,omitempty"`
	NormalCount            *int64  `json:"normalCount,omitempty" xml:"normalCount,omitempty"`
	NormalCountTrendJson   *string `json:"normalCountTrendJson,omitempty" xml:"normalCountTrendJson,omitempty"`
	Score                  *int64  `json:"score,omitempty" xml:"score,omitempty"`
	ScoreTrendJson         *string `json:"scoreTrendJson,omitempty" xml:"scoreTrendJson,omitempty"`
	TrendJson              *string `json:"trendJson,omitempty" xml:"trendJson,omitempty"`
	Uid                    *int64  `json:"uid,omitempty" xml:"uid,omitempty"`
	WarningCount           *int64  `json:"warningCount,omitempty" xml:"warningCount,omitempty"`
	WarningCountTrendJson  *string `json:"warningCountTrendJson,omitempty" xml:"warningCountTrendJson,omitempty"`
}

func (s ListReportsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListReportsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListReportsResponseBodyData) SetBid(v string) *ListReportsResponseBodyData {
	s.Bid = &v
	return s
}

func (s *ListReportsResponseBodyData) SetCid(v int64) *ListReportsResponseBodyData {
	s.Cid = &v
	return s
}

func (s *ListReportsResponseBodyData) SetCostCount(v int64) *ListReportsResponseBodyData {
	s.CostCount = &v
	return s
}

func (s *ListReportsResponseBodyData) SetCostCountTrendJson(v string) *ListReportsResponseBodyData {
	s.CostCountTrendJson = &v
	return s
}

func (s *ListReportsResponseBodyData) SetCriticalCount(v int64) *ListReportsResponseBodyData {
	s.CriticalCount = &v
	return s
}

func (s *ListReportsResponseBodyData) SetCriticalCountTrendJson(v string) *ListReportsResponseBodyData {
	s.CriticalCountTrendJson = &v
	return s
}

func (s *ListReportsResponseBodyData) SetCustomerName(v string) *ListReportsResponseBodyData {
	s.CustomerName = &v
	return s
}

func (s *ListReportsResponseBodyData) SetGcLevel(v string) *ListReportsResponseBodyData {
	s.GcLevel = &v
	return s
}

func (s *ListReportsResponseBodyData) SetGmtCreate(v int64) *ListReportsResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *ListReportsResponseBodyData) SetGmtModified(v int64) *ListReportsResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *ListReportsResponseBodyData) SetId(v int64) *ListReportsResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListReportsResponseBodyData) SetNormalCount(v int64) *ListReportsResponseBodyData {
	s.NormalCount = &v
	return s
}

func (s *ListReportsResponseBodyData) SetNormalCountTrendJson(v string) *ListReportsResponseBodyData {
	s.NormalCountTrendJson = &v
	return s
}

func (s *ListReportsResponseBodyData) SetScore(v int64) *ListReportsResponseBodyData {
	s.Score = &v
	return s
}

func (s *ListReportsResponseBodyData) SetScoreTrendJson(v string) *ListReportsResponseBodyData {
	s.ScoreTrendJson = &v
	return s
}

func (s *ListReportsResponseBodyData) SetTrendJson(v string) *ListReportsResponseBodyData {
	s.TrendJson = &v
	return s
}

func (s *ListReportsResponseBodyData) SetUid(v int64) *ListReportsResponseBodyData {
	s.Uid = &v
	return s
}

func (s *ListReportsResponseBodyData) SetWarningCount(v int64) *ListReportsResponseBodyData {
	s.WarningCount = &v
	return s
}

func (s *ListReportsResponseBodyData) SetWarningCountTrendJson(v string) *ListReportsResponseBodyData {
	s.WarningCountTrendJson = &v
	return s
}

type ListReportsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListReportsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListReportsResponse) GoString() string {
	return s.String()
}

func (s *ListReportsResponse) SetHeaders(v map[string]*string) *ListReportsResponse {
	s.Headers = v
	return s
}

func (s *ListReportsResponse) SetStatusCode(v int32) *ListReportsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListReportsResponse) SetBody(v *ListReportsResponseBody) *ListReportsResponse {
	s.Body = v
	return s
}

type ListRootCauseRequest struct {
	EventId     *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RootCauseId *string `json:"RootCauseId,omitempty" xml:"RootCauseId,omitempty"`
}

func (s ListRootCauseRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRootCauseRequest) GoString() string {
	return s.String()
}

func (s *ListRootCauseRequest) SetEventId(v string) *ListRootCauseRequest {
	s.EventId = &v
	return s
}

func (s *ListRootCauseRequest) SetInstanceId(v string) *ListRootCauseRequest {
	s.InstanceId = &v
	return s
}

func (s *ListRootCauseRequest) SetRootCauseId(v string) *ListRootCauseRequest {
	s.RootCauseId = &v
	return s
}

type ListRootCauseResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListRootCauseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRootCauseResponseBody) GoString() string {
	return s.String()
}

func (s *ListRootCauseResponseBody) SetCode(v int32) *ListRootCauseResponseBody {
	s.Code = &v
	return s
}

func (s *ListRootCauseResponseBody) SetData(v map[string]interface{}) *ListRootCauseResponseBody {
	s.Data = v
	return s
}

func (s *ListRootCauseResponseBody) SetMessage(v string) *ListRootCauseResponseBody {
	s.Message = &v
	return s
}

func (s *ListRootCauseResponseBody) SetRequestId(v string) *ListRootCauseResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRootCauseResponseBody) SetStatus(v string) *ListRootCauseResponseBody {
	s.Status = &v
	return s
}

type ListRootCauseResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListRootCauseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListRootCauseResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRootCauseResponse) GoString() string {
	return s.String()
}

func (s *ListRootCauseResponse) SetHeaders(v map[string]*string) *ListRootCauseResponse {
	s.Headers = v
	return s
}

func (s *ListRootCauseResponse) SetStatusCode(v int32) *ListRootCauseResponse {
	s.StatusCode = &v
	return s
}

func (s *ListRootCauseResponse) SetBody(v *ListRootCauseResponseBody) *ListRootCauseResponse {
	s.Body = v
	return s
}

type ListSlsReportsRequest struct {
	CurrentPage *int32  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	LogStore    *string `json:"LogStore,omitempty" xml:"LogStore,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	Severity    *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
	Uid         *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s ListSlsReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSlsReportsRequest) GoString() string {
	return s.String()
}

func (s *ListSlsReportsRequest) SetCurrentPage(v int32) *ListSlsReportsRequest {
	s.CurrentPage = &v
	return s
}

func (s *ListSlsReportsRequest) SetInstanceId(v string) *ListSlsReportsRequest {
	s.InstanceId = &v
	return s
}

func (s *ListSlsReportsRequest) SetLogStore(v string) *ListSlsReportsRequest {
	s.LogStore = &v
	return s
}

func (s *ListSlsReportsRequest) SetPageSize(v int32) *ListSlsReportsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSlsReportsRequest) SetProductCode(v string) *ListSlsReportsRequest {
	s.ProductCode = &v
	return s
}

func (s *ListSlsReportsRequest) SetSeverity(v string) *ListSlsReportsRequest {
	s.Severity = &v
	return s
}

func (s *ListSlsReportsRequest) SetUid(v int64) *ListSlsReportsRequest {
	s.Uid = &v
	return s
}

type ListSlsReportsResponseBody struct {
	Code      *int32                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      []map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Message   *string                  `json:"Message,omitempty" xml:"Message,omitempty"`
	PageTotal *int64                   `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListSlsReportsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSlsReportsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSlsReportsResponseBody) SetCode(v int32) *ListSlsReportsResponseBody {
	s.Code = &v
	return s
}

func (s *ListSlsReportsResponseBody) SetData(v []map[string]interface{}) *ListSlsReportsResponseBody {
	s.Data = v
	return s
}

func (s *ListSlsReportsResponseBody) SetMessage(v string) *ListSlsReportsResponseBody {
	s.Message = &v
	return s
}

func (s *ListSlsReportsResponseBody) SetPageTotal(v int64) *ListSlsReportsResponseBody {
	s.PageTotal = &v
	return s
}

func (s *ListSlsReportsResponseBody) SetRequestId(v string) *ListSlsReportsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSlsReportsResponseBody) SetStatus(v string) *ListSlsReportsResponseBody {
	s.Status = &v
	return s
}

type ListSlsReportsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSlsReportsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSlsReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSlsReportsResponse) GoString() string {
	return s.String()
}

func (s *ListSlsReportsResponse) SetHeaders(v map[string]*string) *ListSlsReportsResponse {
	s.Headers = v
	return s
}

func (s *ListSlsReportsResponse) SetStatusCode(v int32) *ListSlsReportsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSlsReportsResponse) SetBody(v *ListSlsReportsResponseBody) *ListSlsReportsResponse {
	s.Body = v
	return s
}

type PutAlertContactRequest struct {
	Email    *string `json:"Email,omitempty" xml:"Email,omitempty"`
	Id       *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	Phone    *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	Webhook  *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s PutAlertContactRequest) String() string {
	return tea.Prettify(s)
}

func (s PutAlertContactRequest) GoString() string {
	return s.String()
}

func (s *PutAlertContactRequest) SetEmail(v string) *PutAlertContactRequest {
	s.Email = &v
	return s
}

func (s *PutAlertContactRequest) SetId(v int64) *PutAlertContactRequest {
	s.Id = &v
	return s
}

func (s *PutAlertContactRequest) SetName(v string) *PutAlertContactRequest {
	s.Name = &v
	return s
}

func (s *PutAlertContactRequest) SetOperaUid(v string) *PutAlertContactRequest {
	s.OperaUid = &v
	return s
}

func (s *PutAlertContactRequest) SetPhone(v string) *PutAlertContactRequest {
	s.Phone = &v
	return s
}

func (s *PutAlertContactRequest) SetWebhook(v string) *PutAlertContactRequest {
	s.Webhook = &v
	return s
}

type PutAlertContactResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutAlertContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutAlertContactResponseBody) GoString() string {
	return s.String()
}

func (s *PutAlertContactResponseBody) SetCode(v int32) *PutAlertContactResponseBody {
	s.Code = &v
	return s
}

func (s *PutAlertContactResponseBody) SetData(v bool) *PutAlertContactResponseBody {
	s.Data = &v
	return s
}

func (s *PutAlertContactResponseBody) SetMessage(v string) *PutAlertContactResponseBody {
	s.Message = &v
	return s
}

func (s *PutAlertContactResponseBody) SetRequestId(v string) *PutAlertContactResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutAlertContactResponseBody) SetStatus(v string) *PutAlertContactResponseBody {
	s.Status = &v
	return s
}

type PutAlertContactResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutAlertContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutAlertContactResponse) String() string {
	return tea.Prettify(s)
}

func (s PutAlertContactResponse) GoString() string {
	return s.String()
}

func (s *PutAlertContactResponse) SetHeaders(v map[string]*string) *PutAlertContactResponse {
	s.Headers = v
	return s
}

func (s *PutAlertContactResponse) SetStatusCode(v int32) *PutAlertContactResponse {
	s.StatusCode = &v
	return s
}

func (s *PutAlertContactResponse) SetBody(v *PutAlertContactResponseBody) *PutAlertContactResponse {
	s.Body = v
	return s
}

type PutAlertContactGroupRequest struct {
	AlertContactGroupJson *string `json:"AlertContactGroupJson,omitempty" xml:"AlertContactGroupJson,omitempty"`
	ContactIdsJson        *string `json:"ContactIdsJson,omitempty" xml:"ContactIdsJson,omitempty"`
	OperaUid              *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s PutAlertContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s PutAlertContactGroupRequest) GoString() string {
	return s.String()
}

func (s *PutAlertContactGroupRequest) SetAlertContactGroupJson(v string) *PutAlertContactGroupRequest {
	s.AlertContactGroupJson = &v
	return s
}

func (s *PutAlertContactGroupRequest) SetContactIdsJson(v string) *PutAlertContactGroupRequest {
	s.ContactIdsJson = &v
	return s
}

func (s *PutAlertContactGroupRequest) SetOperaUid(v string) *PutAlertContactGroupRequest {
	s.OperaUid = &v
	return s
}

type PutAlertContactGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutAlertContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutAlertContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *PutAlertContactGroupResponseBody) SetCode(v int32) *PutAlertContactGroupResponseBody {
	s.Code = &v
	return s
}

func (s *PutAlertContactGroupResponseBody) SetData(v bool) *PutAlertContactGroupResponseBody {
	s.Data = &v
	return s
}

func (s *PutAlertContactGroupResponseBody) SetMessage(v string) *PutAlertContactGroupResponseBody {
	s.Message = &v
	return s
}

func (s *PutAlertContactGroupResponseBody) SetRequestId(v string) *PutAlertContactGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutAlertContactGroupResponseBody) SetStatus(v string) *PutAlertContactGroupResponseBody {
	s.Status = &v
	return s
}

type PutAlertContactGroupResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutAlertContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutAlertContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s PutAlertContactGroupResponse) GoString() string {
	return s.String()
}

func (s *PutAlertContactGroupResponse) SetHeaders(v map[string]*string) *PutAlertContactGroupResponse {
	s.Headers = v
	return s
}

func (s *PutAlertContactGroupResponse) SetStatusCode(v int32) *PutAlertContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *PutAlertContactGroupResponse) SetBody(v *PutAlertContactGroupResponseBody) *PutAlertContactGroupResponse {
	s.Body = v
	return s
}

type PutAlertContactToGroupRequest struct {
	ContactIdListJson *string `json:"ContactIdListJson,omitempty" xml:"ContactIdListJson,omitempty"`
	GroupId           *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupIdListJson   *string `json:"GroupIdListJson,omitempty" xml:"GroupIdListJson,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s PutAlertContactToGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s PutAlertContactToGroupRequest) GoString() string {
	return s.String()
}

func (s *PutAlertContactToGroupRequest) SetContactIdListJson(v string) *PutAlertContactToGroupRequest {
	s.ContactIdListJson = &v
	return s
}

func (s *PutAlertContactToGroupRequest) SetGroupId(v int64) *PutAlertContactToGroupRequest {
	s.GroupId = &v
	return s
}

func (s *PutAlertContactToGroupRequest) SetGroupIdListJson(v string) *PutAlertContactToGroupRequest {
	s.GroupIdListJson = &v
	return s
}

func (s *PutAlertContactToGroupRequest) SetOperaUid(v string) *PutAlertContactToGroupRequest {
	s.OperaUid = &v
	return s
}

type PutAlertContactToGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutAlertContactToGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutAlertContactToGroupResponseBody) GoString() string {
	return s.String()
}

func (s *PutAlertContactToGroupResponseBody) SetCode(v int32) *PutAlertContactToGroupResponseBody {
	s.Code = &v
	return s
}

func (s *PutAlertContactToGroupResponseBody) SetData(v bool) *PutAlertContactToGroupResponseBody {
	s.Data = &v
	return s
}

func (s *PutAlertContactToGroupResponseBody) SetMessage(v string) *PutAlertContactToGroupResponseBody {
	s.Message = &v
	return s
}

func (s *PutAlertContactToGroupResponseBody) SetRequestId(v string) *PutAlertContactToGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutAlertContactToGroupResponseBody) SetStatus(v string) *PutAlertContactToGroupResponseBody {
	s.Status = &v
	return s
}

type PutAlertContactToGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutAlertContactToGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutAlertContactToGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s PutAlertContactToGroupResponse) GoString() string {
	return s.String()
}

func (s *PutAlertContactToGroupResponse) SetHeaders(v map[string]*string) *PutAlertContactToGroupResponse {
	s.Headers = v
	return s
}

func (s *PutAlertContactToGroupResponse) SetStatusCode(v int32) *PutAlertContactToGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *PutAlertContactToGroupResponse) SetBody(v *PutAlertContactToGroupResponseBody) *PutAlertContactToGroupResponse {
	s.Body = v
	return s
}

type PutAlertIgnoreRequest struct {
	AlertId  *int64  `json:"AlertId,omitempty" xml:"AlertId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s PutAlertIgnoreRequest) String() string {
	return tea.Prettify(s)
}

func (s PutAlertIgnoreRequest) GoString() string {
	return s.String()
}

func (s *PutAlertIgnoreRequest) SetAlertId(v int64) *PutAlertIgnoreRequest {
	s.AlertId = &v
	return s
}

func (s *PutAlertIgnoreRequest) SetOperaUid(v string) *PutAlertIgnoreRequest {
	s.OperaUid = &v
	return s
}

type PutAlertIgnoreResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutAlertIgnoreResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutAlertIgnoreResponseBody) GoString() string {
	return s.String()
}

func (s *PutAlertIgnoreResponseBody) SetCode(v int32) *PutAlertIgnoreResponseBody {
	s.Code = &v
	return s
}

func (s *PutAlertIgnoreResponseBody) SetData(v map[string]interface{}) *PutAlertIgnoreResponseBody {
	s.Data = v
	return s
}

func (s *PutAlertIgnoreResponseBody) SetMessage(v string) *PutAlertIgnoreResponseBody {
	s.Message = &v
	return s
}

func (s *PutAlertIgnoreResponseBody) SetRequestId(v string) *PutAlertIgnoreResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutAlertIgnoreResponseBody) SetStatus(v string) *PutAlertIgnoreResponseBody {
	s.Status = &v
	return s
}

type PutAlertIgnoreResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutAlertIgnoreResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutAlertIgnoreResponse) String() string {
	return tea.Prettify(s)
}

func (s PutAlertIgnoreResponse) GoString() string {
	return s.String()
}

func (s *PutAlertIgnoreResponse) SetHeaders(v map[string]*string) *PutAlertIgnoreResponse {
	s.Headers = v
	return s
}

func (s *PutAlertIgnoreResponse) SetStatusCode(v int32) *PutAlertIgnoreResponse {
	s.StatusCode = &v
	return s
}

func (s *PutAlertIgnoreResponse) SetBody(v *PutAlertIgnoreResponseBody) *PutAlertIgnoreResponse {
	s.Body = v
	return s
}

type PutAlertSettingRequest struct {
	AlarmLevel           *string `json:"AlarmLevel,omitempty" xml:"AlarmLevel,omitempty"`
	AlertName            *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	AlertSettingId       *int64  `json:"AlertSettingId,omitempty" xml:"AlertSettingId,omitempty"`
	AlertSilenceConfig   *string `json:"AlertSilenceConfig,omitempty" xml:"AlertSilenceConfig,omitempty"`
	BusinessGroupIdsJson *string `json:"BusinessGroupIdsJson,omitempty" xml:"BusinessGroupIdsJson,omitempty"`
	ContactGroupIdsJson  *string `json:"ContactGroupIdsJson,omitempty" xml:"ContactGroupIdsJson,omitempty"`
	ContactIdsJson       *string `json:"ContactIdsJson,omitempty" xml:"ContactIdsJson,omitempty"`
	CustomerUid          *int64  `json:"CustomerUid,omitempty" xml:"CustomerUid,omitempty"`
	OperaUid             *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SendDingtalkNotice   *bool   `json:"SendDingtalkNotice,omitempty" xml:"SendDingtalkNotice,omitempty"`
	SendEmailNotice      *bool   `json:"SendEmailNotice,omitempty" xml:"SendEmailNotice,omitempty"`
	SendSmsNotice        *bool   `json:"SendSmsNotice,omitempty" xml:"SendSmsNotice,omitempty"`
	StopDuration         *int64  `json:"StopDuration,omitempty" xml:"StopDuration,omitempty"`
}

func (s PutAlertSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s PutAlertSettingRequest) GoString() string {
	return s.String()
}

func (s *PutAlertSettingRequest) SetAlarmLevel(v string) *PutAlertSettingRequest {
	s.AlarmLevel = &v
	return s
}

func (s *PutAlertSettingRequest) SetAlertName(v string) *PutAlertSettingRequest {
	s.AlertName = &v
	return s
}

func (s *PutAlertSettingRequest) SetAlertSettingId(v int64) *PutAlertSettingRequest {
	s.AlertSettingId = &v
	return s
}

func (s *PutAlertSettingRequest) SetAlertSilenceConfig(v string) *PutAlertSettingRequest {
	s.AlertSilenceConfig = &v
	return s
}

func (s *PutAlertSettingRequest) SetBusinessGroupIdsJson(v string) *PutAlertSettingRequest {
	s.BusinessGroupIdsJson = &v
	return s
}

func (s *PutAlertSettingRequest) SetContactGroupIdsJson(v string) *PutAlertSettingRequest {
	s.ContactGroupIdsJson = &v
	return s
}

func (s *PutAlertSettingRequest) SetContactIdsJson(v string) *PutAlertSettingRequest {
	s.ContactIdsJson = &v
	return s
}

func (s *PutAlertSettingRequest) SetCustomerUid(v int64) *PutAlertSettingRequest {
	s.CustomerUid = &v
	return s
}

func (s *PutAlertSettingRequest) SetOperaUid(v string) *PutAlertSettingRequest {
	s.OperaUid = &v
	return s
}

func (s *PutAlertSettingRequest) SetSendDingtalkNotice(v bool) *PutAlertSettingRequest {
	s.SendDingtalkNotice = &v
	return s
}

func (s *PutAlertSettingRequest) SetSendEmailNotice(v bool) *PutAlertSettingRequest {
	s.SendEmailNotice = &v
	return s
}

func (s *PutAlertSettingRequest) SetSendSmsNotice(v bool) *PutAlertSettingRequest {
	s.SendSmsNotice = &v
	return s
}

func (s *PutAlertSettingRequest) SetStopDuration(v int64) *PutAlertSettingRequest {
	s.StopDuration = &v
	return s
}

type PutAlertSettingResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutAlertSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutAlertSettingResponseBody) GoString() string {
	return s.String()
}

func (s *PutAlertSettingResponseBody) SetCode(v int32) *PutAlertSettingResponseBody {
	s.Code = &v
	return s
}

func (s *PutAlertSettingResponseBody) SetData(v bool) *PutAlertSettingResponseBody {
	s.Data = &v
	return s
}

func (s *PutAlertSettingResponseBody) SetMessage(v string) *PutAlertSettingResponseBody {
	s.Message = &v
	return s
}

func (s *PutAlertSettingResponseBody) SetRequestId(v string) *PutAlertSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutAlertSettingResponseBody) SetStatus(v string) *PutAlertSettingResponseBody {
	s.Status = &v
	return s
}

type PutAlertSettingResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutAlertSettingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutAlertSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s PutAlertSettingResponse) GoString() string {
	return s.String()
}

func (s *PutAlertSettingResponse) SetHeaders(v map[string]*string) *PutAlertSettingResponse {
	s.Headers = v
	return s
}

func (s *PutAlertSettingResponse) SetStatusCode(v int32) *PutAlertSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *PutAlertSettingResponse) SetBody(v *PutAlertSettingResponseBody) *PutAlertSettingResponse {
	s.Body = v
	return s
}

type PutAlertSettingListRequest struct {
	AlertSettingEditRequestListJson *string `json:"AlertSettingEditRequestListJson,omitempty" xml:"AlertSettingEditRequestListJson,omitempty"`
	ContactGroupIdsJson             *string `json:"ContactGroupIdsJson,omitempty" xml:"ContactGroupIdsJson,omitempty"`
	ContactIdsJson                  *string `json:"ContactIdsJson,omitempty" xml:"ContactIdsJson,omitempty"`
}

func (s PutAlertSettingListRequest) String() string {
	return tea.Prettify(s)
}

func (s PutAlertSettingListRequest) GoString() string {
	return s.String()
}

func (s *PutAlertSettingListRequest) SetAlertSettingEditRequestListJson(v string) *PutAlertSettingListRequest {
	s.AlertSettingEditRequestListJson = &v
	return s
}

func (s *PutAlertSettingListRequest) SetContactGroupIdsJson(v string) *PutAlertSettingListRequest {
	s.ContactGroupIdsJson = &v
	return s
}

func (s *PutAlertSettingListRequest) SetContactIdsJson(v string) *PutAlertSettingListRequest {
	s.ContactIdsJson = &v
	return s
}

type PutAlertSettingListResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutAlertSettingListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutAlertSettingListResponseBody) GoString() string {
	return s.String()
}

func (s *PutAlertSettingListResponseBody) SetCode(v int32) *PutAlertSettingListResponseBody {
	s.Code = &v
	return s
}

func (s *PutAlertSettingListResponseBody) SetData(v bool) *PutAlertSettingListResponseBody {
	s.Data = &v
	return s
}

func (s *PutAlertSettingListResponseBody) SetMessage(v string) *PutAlertSettingListResponseBody {
	s.Message = &v
	return s
}

func (s *PutAlertSettingListResponseBody) SetRequestId(v string) *PutAlertSettingListResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutAlertSettingListResponseBody) SetStatus(v string) *PutAlertSettingListResponseBody {
	s.Status = &v
	return s
}

type PutAlertSettingListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutAlertSettingListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutAlertSettingListResponse) String() string {
	return tea.Prettify(s)
}

func (s PutAlertSettingListResponse) GoString() string {
	return s.String()
}

func (s *PutAlertSettingListResponse) SetHeaders(v map[string]*string) *PutAlertSettingListResponse {
	s.Headers = v
	return s
}

func (s *PutAlertSettingListResponse) SetStatusCode(v int32) *PutAlertSettingListResponse {
	s.StatusCode = &v
	return s
}

func (s *PutAlertSettingListResponse) SetBody(v *PutAlertSettingListResponseBody) *PutAlertSettingListResponse {
	s.Body = v
	return s
}

type PutAlertSettingStatusRequest struct {
	AlertSettingId *int64  `json:"AlertSettingId,omitempty" xml:"AlertSettingId,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SettingStatus  *int64  `json:"SettingStatus,omitempty" xml:"SettingStatus,omitempty"`
}

func (s PutAlertSettingStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s PutAlertSettingStatusRequest) GoString() string {
	return s.String()
}

func (s *PutAlertSettingStatusRequest) SetAlertSettingId(v int64) *PutAlertSettingStatusRequest {
	s.AlertSettingId = &v
	return s
}

func (s *PutAlertSettingStatusRequest) SetOperaUid(v string) *PutAlertSettingStatusRequest {
	s.OperaUid = &v
	return s
}

func (s *PutAlertSettingStatusRequest) SetSettingStatus(v int64) *PutAlertSettingStatusRequest {
	s.SettingStatus = &v
	return s
}

type PutAlertSettingStatusResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutAlertSettingStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutAlertSettingStatusResponseBody) GoString() string {
	return s.String()
}

func (s *PutAlertSettingStatusResponseBody) SetCode(v int32) *PutAlertSettingStatusResponseBody {
	s.Code = &v
	return s
}

func (s *PutAlertSettingStatusResponseBody) SetData(v bool) *PutAlertSettingStatusResponseBody {
	s.Data = &v
	return s
}

func (s *PutAlertSettingStatusResponseBody) SetMessage(v string) *PutAlertSettingStatusResponseBody {
	s.Message = &v
	return s
}

func (s *PutAlertSettingStatusResponseBody) SetRequestId(v string) *PutAlertSettingStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutAlertSettingStatusResponseBody) SetStatus(v string) *PutAlertSettingStatusResponseBody {
	s.Status = &v
	return s
}

type PutAlertSettingStatusResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutAlertSettingStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutAlertSettingStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s PutAlertSettingStatusResponse) GoString() string {
	return s.String()
}

func (s *PutAlertSettingStatusResponse) SetHeaders(v map[string]*string) *PutAlertSettingStatusResponse {
	s.Headers = v
	return s
}

func (s *PutAlertSettingStatusResponse) SetStatusCode(v int32) *PutAlertSettingStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *PutAlertSettingStatusResponse) SetBody(v *PutAlertSettingStatusResponseBody) *PutAlertSettingStatusResponse {
	s.Body = v
	return s
}

type PutDataSourceConfigRequest struct {
	DataSourceDescribe      *string `json:"DataSourceDescribe,omitempty" xml:"DataSourceDescribe,omitempty"`
	DataSourceName          *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	DataSourceParams        *string `json:"DataSourceParams,omitempty" xml:"DataSourceParams,omitempty"`
	DataSourceParamsMapping *string `json:"DataSourceParamsMapping,omitempty" xml:"DataSourceParamsMapping,omitempty"`
	DataSourceType          *int32  `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	OperaUid                *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s PutDataSourceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s PutDataSourceConfigRequest) GoString() string {
	return s.String()
}

func (s *PutDataSourceConfigRequest) SetDataSourceDescribe(v string) *PutDataSourceConfigRequest {
	s.DataSourceDescribe = &v
	return s
}

func (s *PutDataSourceConfigRequest) SetDataSourceName(v string) *PutDataSourceConfigRequest {
	s.DataSourceName = &v
	return s
}

func (s *PutDataSourceConfigRequest) SetDataSourceParams(v string) *PutDataSourceConfigRequest {
	s.DataSourceParams = &v
	return s
}

func (s *PutDataSourceConfigRequest) SetDataSourceParamsMapping(v string) *PutDataSourceConfigRequest {
	s.DataSourceParamsMapping = &v
	return s
}

func (s *PutDataSourceConfigRequest) SetDataSourceType(v int32) *PutDataSourceConfigRequest {
	s.DataSourceType = &v
	return s
}

func (s *PutDataSourceConfigRequest) SetOperaUid(v string) *PutDataSourceConfigRequest {
	s.OperaUid = &v
	return s
}

type PutDataSourceConfigResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutDataSourceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutDataSourceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *PutDataSourceConfigResponseBody) SetCode(v int32) *PutDataSourceConfigResponseBody {
	s.Code = &v
	return s
}

func (s *PutDataSourceConfigResponseBody) SetData(v map[string]interface{}) *PutDataSourceConfigResponseBody {
	s.Data = v
	return s
}

func (s *PutDataSourceConfigResponseBody) SetMsg(v string) *PutDataSourceConfigResponseBody {
	s.Msg = &v
	return s
}

func (s *PutDataSourceConfigResponseBody) SetRequestId(v string) *PutDataSourceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutDataSourceConfigResponseBody) SetStatus(v string) *PutDataSourceConfigResponseBody {
	s.Status = &v
	return s
}

type PutDataSourceConfigResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutDataSourceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutDataSourceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s PutDataSourceConfigResponse) GoString() string {
	return s.String()
}

func (s *PutDataSourceConfigResponse) SetHeaders(v map[string]*string) *PutDataSourceConfigResponse {
	s.Headers = v
	return s
}

func (s *PutDataSourceConfigResponse) SetStatusCode(v int32) *PutDataSourceConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *PutDataSourceConfigResponse) SetBody(v *PutDataSourceConfigResponseBody) *PutDataSourceConfigResponse {
	s.Body = v
	return s
}

type PutGroupResourceTagRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductId       *string `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	Resources       *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	TagId           *string `json:"TagId,omitempty" xml:"TagId,omitempty"`
}

func (s PutGroupResourceTagRequest) String() string {
	return tea.Prettify(s)
}

func (s PutGroupResourceTagRequest) GoString() string {
	return s.String()
}

func (s *PutGroupResourceTagRequest) SetBusinessGroupId(v string) *PutGroupResourceTagRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *PutGroupResourceTagRequest) SetOperaUid(v string) *PutGroupResourceTagRequest {
	s.OperaUid = &v
	return s
}

func (s *PutGroupResourceTagRequest) SetProductId(v string) *PutGroupResourceTagRequest {
	s.ProductId = &v
	return s
}

func (s *PutGroupResourceTagRequest) SetResources(v string) *PutGroupResourceTagRequest {
	s.Resources = &v
	return s
}

func (s *PutGroupResourceTagRequest) SetTagId(v string) *PutGroupResourceTagRequest {
	s.TagId = &v
	return s
}

type PutGroupResourceTagResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutGroupResourceTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutGroupResourceTagResponseBody) GoString() string {
	return s.String()
}

func (s *PutGroupResourceTagResponseBody) SetCode(v int32) *PutGroupResourceTagResponseBody {
	s.Code = &v
	return s
}

func (s *PutGroupResourceTagResponseBody) SetData(v map[string]interface{}) *PutGroupResourceTagResponseBody {
	s.Data = v
	return s
}

func (s *PutGroupResourceTagResponseBody) SetMsg(v string) *PutGroupResourceTagResponseBody {
	s.Msg = &v
	return s
}

func (s *PutGroupResourceTagResponseBody) SetRequestId(v string) *PutGroupResourceTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutGroupResourceTagResponseBody) SetStatus(v string) *PutGroupResourceTagResponseBody {
	s.Status = &v
	return s
}

type PutGroupResourceTagResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutGroupResourceTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutGroupResourceTagResponse) String() string {
	return tea.Prettify(s)
}

func (s PutGroupResourceTagResponse) GoString() string {
	return s.String()
}

func (s *PutGroupResourceTagResponse) SetHeaders(v map[string]*string) *PutGroupResourceTagResponse {
	s.Headers = v
	return s
}

func (s *PutGroupResourceTagResponse) SetStatusCode(v int32) *PutGroupResourceTagResponse {
	s.StatusCode = &v
	return s
}

func (s *PutGroupResourceTagResponse) SetBody(v *PutGroupResourceTagResponseBody) *PutGroupResourceTagResponse {
	s.Body = v
	return s
}

type PutGroupTopologyTagLogRequest struct {
	BusinessGroupId *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	TopologyTag     *string `json:"TopologyTag,omitempty" xml:"TopologyTag,omitempty"`
	TopologyTagShow *string `json:"TopologyTagShow,omitempty" xml:"TopologyTagShow,omitempty"`
}

func (s PutGroupTopologyTagLogRequest) String() string {
	return tea.Prettify(s)
}

func (s PutGroupTopologyTagLogRequest) GoString() string {
	return s.String()
}

func (s *PutGroupTopologyTagLogRequest) SetBusinessGroupId(v string) *PutGroupTopologyTagLogRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *PutGroupTopologyTagLogRequest) SetOperaUid(v string) *PutGroupTopologyTagLogRequest {
	s.OperaUid = &v
	return s
}

func (s *PutGroupTopologyTagLogRequest) SetTopologyTag(v string) *PutGroupTopologyTagLogRequest {
	s.TopologyTag = &v
	return s
}

func (s *PutGroupTopologyTagLogRequest) SetTopologyTagShow(v string) *PutGroupTopologyTagLogRequest {
	s.TopologyTagShow = &v
	return s
}

type PutGroupTopologyTagLogResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutGroupTopologyTagLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutGroupTopologyTagLogResponseBody) GoString() string {
	return s.String()
}

func (s *PutGroupTopologyTagLogResponseBody) SetCode(v int32) *PutGroupTopologyTagLogResponseBody {
	s.Code = &v
	return s
}

func (s *PutGroupTopologyTagLogResponseBody) SetData(v map[string]interface{}) *PutGroupTopologyTagLogResponseBody {
	s.Data = v
	return s
}

func (s *PutGroupTopologyTagLogResponseBody) SetMsg(v string) *PutGroupTopologyTagLogResponseBody {
	s.Msg = &v
	return s
}

func (s *PutGroupTopologyTagLogResponseBody) SetRequestId(v string) *PutGroupTopologyTagLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutGroupTopologyTagLogResponseBody) SetStatus(v string) *PutGroupTopologyTagLogResponseBody {
	s.Status = &v
	return s
}

type PutGroupTopologyTagLogResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutGroupTopologyTagLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutGroupTopologyTagLogResponse) String() string {
	return tea.Prettify(s)
}

func (s PutGroupTopologyTagLogResponse) GoString() string {
	return s.String()
}

func (s *PutGroupTopologyTagLogResponse) SetHeaders(v map[string]*string) *PutGroupTopologyTagLogResponse {
	s.Headers = v
	return s
}

func (s *PutGroupTopologyTagLogResponse) SetStatusCode(v int32) *PutGroupTopologyTagLogResponse {
	s.StatusCode = &v
	return s
}

func (s *PutGroupTopologyTagLogResponse) SetBody(v *PutGroupTopologyTagLogResponseBody) *PutGroupTopologyTagLogResponse {
	s.Body = v
	return s
}

type PutReportEmailConfigRequest struct {
	Email    *string `json:"Email,omitempty" xml:"Email,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s PutReportEmailConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s PutReportEmailConfigRequest) GoString() string {
	return s.String()
}

func (s *PutReportEmailConfigRequest) SetEmail(v string) *PutReportEmailConfigRequest {
	s.Email = &v
	return s
}

func (s *PutReportEmailConfigRequest) SetOperaUid(v string) *PutReportEmailConfigRequest {
	s.OperaUid = &v
	return s
}

type PutReportEmailConfigResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutReportEmailConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutReportEmailConfigResponseBody) GoString() string {
	return s.String()
}

func (s *PutReportEmailConfigResponseBody) SetCode(v int32) *PutReportEmailConfigResponseBody {
	s.Code = &v
	return s
}

func (s *PutReportEmailConfigResponseBody) SetData(v bool) *PutReportEmailConfigResponseBody {
	s.Data = &v
	return s
}

func (s *PutReportEmailConfigResponseBody) SetMessage(v string) *PutReportEmailConfigResponseBody {
	s.Message = &v
	return s
}

func (s *PutReportEmailConfigResponseBody) SetRequestId(v string) *PutReportEmailConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutReportEmailConfigResponseBody) SetStatus(v string) *PutReportEmailConfigResponseBody {
	s.Status = &v
	return s
}

type PutReportEmailConfigResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutReportEmailConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutReportEmailConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s PutReportEmailConfigResponse) GoString() string {
	return s.String()
}

func (s *PutReportEmailConfigResponse) SetHeaders(v map[string]*string) *PutReportEmailConfigResponse {
	s.Headers = v
	return s
}

func (s *PutReportEmailConfigResponse) SetStatusCode(v int32) *PutReportEmailConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *PutReportEmailConfigResponse) SetBody(v *PutReportEmailConfigResponseBody) *PutReportEmailConfigResponse {
	s.Body = v
	return s
}

type PutResourceWhitelistRequest struct {
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	ResourceId  *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s PutResourceWhitelistRequest) String() string {
	return tea.Prettify(s)
}

func (s PutResourceWhitelistRequest) GoString() string {
	return s.String()
}

func (s *PutResourceWhitelistRequest) SetOperaUid(v string) *PutResourceWhitelistRequest {
	s.OperaUid = &v
	return s
}

func (s *PutResourceWhitelistRequest) SetProductCode(v string) *PutResourceWhitelistRequest {
	s.ProductCode = &v
	return s
}

func (s *PutResourceWhitelistRequest) SetResourceId(v string) *PutResourceWhitelistRequest {
	s.ResourceId = &v
	return s
}

type PutResourceWhitelistResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutResourceWhitelistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutResourceWhitelistResponseBody) GoString() string {
	return s.String()
}

func (s *PutResourceWhitelistResponseBody) SetCode(v int32) *PutResourceWhitelistResponseBody {
	s.Code = &v
	return s
}

func (s *PutResourceWhitelistResponseBody) SetData(v bool) *PutResourceWhitelistResponseBody {
	s.Data = &v
	return s
}

func (s *PutResourceWhitelistResponseBody) SetMessage(v string) *PutResourceWhitelistResponseBody {
	s.Message = &v
	return s
}

func (s *PutResourceWhitelistResponseBody) SetRequestId(v string) *PutResourceWhitelistResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutResourceWhitelistResponseBody) SetStatus(v string) *PutResourceWhitelistResponseBody {
	s.Status = &v
	return s
}

type PutResourceWhitelistResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutResourceWhitelistResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutResourceWhitelistResponse) String() string {
	return tea.Prettify(s)
}

func (s PutResourceWhitelistResponse) GoString() string {
	return s.String()
}

func (s *PutResourceWhitelistResponse) SetHeaders(v map[string]*string) *PutResourceWhitelistResponse {
	s.Headers = v
	return s
}

func (s *PutResourceWhitelistResponse) SetStatusCode(v int32) *PutResourceWhitelistResponse {
	s.StatusCode = &v
	return s
}

func (s *PutResourceWhitelistResponse) SetBody(v *PutResourceWhitelistResponseBody) *PutResourceWhitelistResponse {
	s.Body = v
	return s
}

type ReplaceScriptListRequest struct {
	Id       *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SceneId  *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	Type     *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ReplaceScriptListRequest) String() string {
	return tea.Prettify(s)
}

func (s ReplaceScriptListRequest) GoString() string {
	return s.String()
}

func (s *ReplaceScriptListRequest) SetId(v int32) *ReplaceScriptListRequest {
	s.Id = &v
	return s
}

func (s *ReplaceScriptListRequest) SetOperaUid(v string) *ReplaceScriptListRequest {
	s.OperaUid = &v
	return s
}

func (s *ReplaceScriptListRequest) SetSceneId(v string) *ReplaceScriptListRequest {
	s.SceneId = &v
	return s
}

func (s *ReplaceScriptListRequest) SetType(v int32) *ReplaceScriptListRequest {
	s.Type = &v
	return s
}

type ReplaceScriptListResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ReplaceScriptListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReplaceScriptListResponseBody) GoString() string {
	return s.String()
}

func (s *ReplaceScriptListResponseBody) SetCode(v int32) *ReplaceScriptListResponseBody {
	s.Code = &v
	return s
}

func (s *ReplaceScriptListResponseBody) SetData(v map[string]interface{}) *ReplaceScriptListResponseBody {
	s.Data = v
	return s
}

func (s *ReplaceScriptListResponseBody) SetMsg(v string) *ReplaceScriptListResponseBody {
	s.Msg = &v
	return s
}

func (s *ReplaceScriptListResponseBody) SetRequestId(v string) *ReplaceScriptListResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReplaceScriptListResponseBody) SetStatus(v string) *ReplaceScriptListResponseBody {
	s.Status = &v
	return s
}

type ReplaceScriptListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReplaceScriptListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReplaceScriptListResponse) String() string {
	return tea.Prettify(s)
}

func (s ReplaceScriptListResponse) GoString() string {
	return s.String()
}

func (s *ReplaceScriptListResponse) SetHeaders(v map[string]*string) *ReplaceScriptListResponse {
	s.Headers = v
	return s
}

func (s *ReplaceScriptListResponse) SetStatusCode(v int32) *ReplaceScriptListResponse {
	s.StatusCode = &v
	return s
}

func (s *ReplaceScriptListResponse) SetBody(v *ReplaceScriptListResponseBody) *ReplaceScriptListResponse {
	s.Body = v
	return s
}

type RevokeSubmitApplyPermissionRequest struct {
	SwitchFrontOperaUid *string `json:"SwitchFrontOperaUid,omitempty" xml:"SwitchFrontOperaUid,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uid                 *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s RevokeSubmitApplyPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeSubmitApplyPermissionRequest) GoString() string {
	return s.String()
}

func (s *RevokeSubmitApplyPermissionRequest) SetSwitchFrontOperaUid(v string) *RevokeSubmitApplyPermissionRequest {
	s.SwitchFrontOperaUid = &v
	return s
}

func (s *RevokeSubmitApplyPermissionRequest) SetType(v string) *RevokeSubmitApplyPermissionRequest {
	s.Type = &v
	return s
}

func (s *RevokeSubmitApplyPermissionRequest) SetUid(v int64) *RevokeSubmitApplyPermissionRequest {
	s.Uid = &v
	return s
}

type RevokeSubmitApplyPermissionResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s RevokeSubmitApplyPermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeSubmitApplyPermissionResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeSubmitApplyPermissionResponseBody) SetCode(v int32) *RevokeSubmitApplyPermissionResponseBody {
	s.Code = &v
	return s
}

func (s *RevokeSubmitApplyPermissionResponseBody) SetData(v map[string]interface{}) *RevokeSubmitApplyPermissionResponseBody {
	s.Data = v
	return s
}

func (s *RevokeSubmitApplyPermissionResponseBody) SetMsg(v string) *RevokeSubmitApplyPermissionResponseBody {
	s.Msg = &v
	return s
}

func (s *RevokeSubmitApplyPermissionResponseBody) SetRequestId(v string) *RevokeSubmitApplyPermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *RevokeSubmitApplyPermissionResponseBody) SetStatus(v string) *RevokeSubmitApplyPermissionResponseBody {
	s.Status = &v
	return s
}

type RevokeSubmitApplyPermissionResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RevokeSubmitApplyPermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RevokeSubmitApplyPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeSubmitApplyPermissionResponse) GoString() string {
	return s.String()
}

func (s *RevokeSubmitApplyPermissionResponse) SetHeaders(v map[string]*string) *RevokeSubmitApplyPermissionResponse {
	s.Headers = v
	return s
}

func (s *RevokeSubmitApplyPermissionResponse) SetStatusCode(v int32) *RevokeSubmitApplyPermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokeSubmitApplyPermissionResponse) SetBody(v *RevokeSubmitApplyPermissionResponseBody) *RevokeSubmitApplyPermissionResponse {
	s.Body = v
	return s
}

type RunAnalysisProcessRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s RunAnalysisProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s RunAnalysisProcessRequest) GoString() string {
	return s.String()
}

func (s *RunAnalysisProcessRequest) SetEventId(v string) *RunAnalysisProcessRequest {
	s.EventId = &v
	return s
}

func (s *RunAnalysisProcessRequest) SetOperaUid(v string) *RunAnalysisProcessRequest {
	s.OperaUid = &v
	return s
}

type RunAnalysisProcessResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s RunAnalysisProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunAnalysisProcessResponseBody) GoString() string {
	return s.String()
}

func (s *RunAnalysisProcessResponseBody) SetCode(v int32) *RunAnalysisProcessResponseBody {
	s.Code = &v
	return s
}

func (s *RunAnalysisProcessResponseBody) SetData(v map[string]interface{}) *RunAnalysisProcessResponseBody {
	s.Data = v
	return s
}

func (s *RunAnalysisProcessResponseBody) SetMsg(v string) *RunAnalysisProcessResponseBody {
	s.Msg = &v
	return s
}

func (s *RunAnalysisProcessResponseBody) SetRequestId(v string) *RunAnalysisProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunAnalysisProcessResponseBody) SetStatus(v string) *RunAnalysisProcessResponseBody {
	s.Status = &v
	return s
}

type RunAnalysisProcessResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunAnalysisProcessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunAnalysisProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s RunAnalysisProcessResponse) GoString() string {
	return s.String()
}

func (s *RunAnalysisProcessResponse) SetHeaders(v map[string]*string) *RunAnalysisProcessResponse {
	s.Headers = v
	return s
}

func (s *RunAnalysisProcessResponse) SetStatusCode(v int32) *RunAnalysisProcessResponse {
	s.StatusCode = &v
	return s
}

func (s *RunAnalysisProcessResponse) SetBody(v *RunAnalysisProcessResponseBody) *RunAnalysisProcessResponse {
	s.Body = v
	return s
}

type RunCommandRequest struct {
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	InstanceIds    *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s RunCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCommandRequest) GoString() string {
	return s.String()
}

func (s *RunCommandRequest) SetCommandContent(v string) *RunCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *RunCommandRequest) SetInstanceIds(v string) *RunCommandRequest {
	s.InstanceIds = &v
	return s
}

func (s *RunCommandRequest) SetName(v string) *RunCommandRequest {
	s.Name = &v
	return s
}

func (s *RunCommandRequest) SetRegionId(v string) *RunCommandRequest {
	s.RegionId = &v
	return s
}

func (s *RunCommandRequest) SetType(v string) *RunCommandRequest {
	s.Type = &v
	return s
}

type RunCommandResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *bool                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s RunCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunCommandResponseBody) GoString() string {
	return s.String()
}

func (s *RunCommandResponseBody) SetCode(v int32) *RunCommandResponseBody {
	s.Code = &v
	return s
}

func (s *RunCommandResponseBody) SetData(v map[string]interface{}) *RunCommandResponseBody {
	s.Data = v
	return s
}

func (s *RunCommandResponseBody) SetMessage(v string) *RunCommandResponseBody {
	s.Message = &v
	return s
}

func (s *RunCommandResponseBody) SetRequestId(v string) *RunCommandResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunCommandResponseBody) SetStatus(v bool) *RunCommandResponseBody {
	s.Status = &v
	return s
}

type RunCommandResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s RunCommandResponse) GoString() string {
	return s.String()
}

func (s *RunCommandResponse) SetHeaders(v map[string]*string) *RunCommandResponse {
	s.Headers = v
	return s
}

func (s *RunCommandResponse) SetStatusCode(v int32) *RunCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *RunCommandResponse) SetBody(v *RunCommandResponseBody) *RunCommandResponse {
	s.Body = v
	return s
}

type RunForecastAnalyzeRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s RunForecastAnalyzeRequest) String() string {
	return tea.Prettify(s)
}

func (s RunForecastAnalyzeRequest) GoString() string {
	return s.String()
}

func (s *RunForecastAnalyzeRequest) SetEventId(v string) *RunForecastAnalyzeRequest {
	s.EventId = &v
	return s
}

func (s *RunForecastAnalyzeRequest) SetOperaUid(v string) *RunForecastAnalyzeRequest {
	s.OperaUid = &v
	return s
}

type RunForecastAnalyzeResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s RunForecastAnalyzeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunForecastAnalyzeResponseBody) GoString() string {
	return s.String()
}

func (s *RunForecastAnalyzeResponseBody) SetCode(v int32) *RunForecastAnalyzeResponseBody {
	s.Code = &v
	return s
}

func (s *RunForecastAnalyzeResponseBody) SetData(v map[string]interface{}) *RunForecastAnalyzeResponseBody {
	s.Data = v
	return s
}

func (s *RunForecastAnalyzeResponseBody) SetMsg(v string) *RunForecastAnalyzeResponseBody {
	s.Msg = &v
	return s
}

func (s *RunForecastAnalyzeResponseBody) SetRequestId(v string) *RunForecastAnalyzeResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunForecastAnalyzeResponseBody) SetStatus(v string) *RunForecastAnalyzeResponseBody {
	s.Status = &v
	return s
}

type RunForecastAnalyzeResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunForecastAnalyzeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunForecastAnalyzeResponse) String() string {
	return tea.Prettify(s)
}

func (s RunForecastAnalyzeResponse) GoString() string {
	return s.String()
}

func (s *RunForecastAnalyzeResponse) SetHeaders(v map[string]*string) *RunForecastAnalyzeResponse {
	s.Headers = v
	return s
}

func (s *RunForecastAnalyzeResponse) SetStatusCode(v int32) *RunForecastAnalyzeResponse {
	s.StatusCode = &v
	return s
}

func (s *RunForecastAnalyzeResponse) SetBody(v *RunForecastAnalyzeResponseBody) *RunForecastAnalyzeResponse {
	s.Body = v
	return s
}

type RunPatrolInspectionRequest struct {
	OperaUid     *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCodes *string `json:"ProductCodes,omitempty" xml:"ProductCodes,omitempty"`
	RiskCodeList *string `json:"RiskCodeList,omitempty" xml:"RiskCodeList,omitempty"`
}

func (s RunPatrolInspectionRequest) String() string {
	return tea.Prettify(s)
}

func (s RunPatrolInspectionRequest) GoString() string {
	return s.String()
}

func (s *RunPatrolInspectionRequest) SetOperaUid(v string) *RunPatrolInspectionRequest {
	s.OperaUid = &v
	return s
}

func (s *RunPatrolInspectionRequest) SetProductCodes(v string) *RunPatrolInspectionRequest {
	s.ProductCodes = &v
	return s
}

func (s *RunPatrolInspectionRequest) SetRiskCodeList(v string) *RunPatrolInspectionRequest {
	s.RiskCodeList = &v
	return s
}

type RunPatrolInspectionResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s RunPatrolInspectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunPatrolInspectionResponseBody) GoString() string {
	return s.String()
}

func (s *RunPatrolInspectionResponseBody) SetCode(v int32) *RunPatrolInspectionResponseBody {
	s.Code = &v
	return s
}

func (s *RunPatrolInspectionResponseBody) SetData(v map[string]interface{}) *RunPatrolInspectionResponseBody {
	s.Data = v
	return s
}

func (s *RunPatrolInspectionResponseBody) SetMsg(v string) *RunPatrolInspectionResponseBody {
	s.Msg = &v
	return s
}

func (s *RunPatrolInspectionResponseBody) SetRequestId(v string) *RunPatrolInspectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunPatrolInspectionResponseBody) SetStatus(v string) *RunPatrolInspectionResponseBody {
	s.Status = &v
	return s
}

type RunPatrolInspectionResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunPatrolInspectionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunPatrolInspectionResponse) String() string {
	return tea.Prettify(s)
}

func (s RunPatrolInspectionResponse) GoString() string {
	return s.String()
}

func (s *RunPatrolInspectionResponse) SetHeaders(v map[string]*string) *RunPatrolInspectionResponse {
	s.Headers = v
	return s
}

func (s *RunPatrolInspectionResponse) SetStatusCode(v int32) *RunPatrolInspectionResponse {
	s.StatusCode = &v
	return s
}

func (s *RunPatrolInspectionResponse) SetBody(v *RunPatrolInspectionResponseBody) *RunPatrolInspectionResponse {
	s.Body = v
	return s
}

type RunRepairScriptRequest struct {
	EventId  *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s RunRepairScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s RunRepairScriptRequest) GoString() string {
	return s.String()
}

func (s *RunRepairScriptRequest) SetEventId(v string) *RunRepairScriptRequest {
	s.EventId = &v
	return s
}

func (s *RunRepairScriptRequest) SetOperaUid(v string) *RunRepairScriptRequest {
	s.OperaUid = &v
	return s
}

type RunRepairScriptResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s RunRepairScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunRepairScriptResponseBody) GoString() string {
	return s.String()
}

func (s *RunRepairScriptResponseBody) SetCode(v int32) *RunRepairScriptResponseBody {
	s.Code = &v
	return s
}

func (s *RunRepairScriptResponseBody) SetData(v map[string]interface{}) *RunRepairScriptResponseBody {
	s.Data = v
	return s
}

func (s *RunRepairScriptResponseBody) SetMsg(v string) *RunRepairScriptResponseBody {
	s.Msg = &v
	return s
}

func (s *RunRepairScriptResponseBody) SetRequestId(v string) *RunRepairScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunRepairScriptResponseBody) SetStatus(v string) *RunRepairScriptResponseBody {
	s.Status = &v
	return s
}

type RunRepairScriptResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunRepairScriptResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunRepairScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s RunRepairScriptResponse) GoString() string {
	return s.String()
}

func (s *RunRepairScriptResponse) SetHeaders(v map[string]*string) *RunRepairScriptResponse {
	s.Headers = v
	return s
}

func (s *RunRepairScriptResponse) SetStatusCode(v int32) *RunRepairScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *RunRepairScriptResponse) SetBody(v *RunRepairScriptResponseBody) *RunRepairScriptResponse {
	s.Body = v
	return s
}

type RunRiskPatrolRequest struct {
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	RiskPatrolTypes *string `json:"RiskPatrolTypes,omitempty" xml:"RiskPatrolTypes,omitempty"`
}

func (s RunRiskPatrolRequest) String() string {
	return tea.Prettify(s)
}

func (s RunRiskPatrolRequest) GoString() string {
	return s.String()
}

func (s *RunRiskPatrolRequest) SetOperaUid(v string) *RunRiskPatrolRequest {
	s.OperaUid = &v
	return s
}

func (s *RunRiskPatrolRequest) SetRiskPatrolTypes(v string) *RunRiskPatrolRequest {
	s.RiskPatrolTypes = &v
	return s
}

type RunRiskPatrolResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s RunRiskPatrolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunRiskPatrolResponseBody) GoString() string {
	return s.String()
}

func (s *RunRiskPatrolResponseBody) SetCode(v int32) *RunRiskPatrolResponseBody {
	s.Code = &v
	return s
}

func (s *RunRiskPatrolResponseBody) SetData(v map[string]interface{}) *RunRiskPatrolResponseBody {
	s.Data = v
	return s
}

func (s *RunRiskPatrolResponseBody) SetMsg(v string) *RunRiskPatrolResponseBody {
	s.Msg = &v
	return s
}

func (s *RunRiskPatrolResponseBody) SetRequestId(v string) *RunRiskPatrolResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunRiskPatrolResponseBody) SetStatus(v string) *RunRiskPatrolResponseBody {
	s.Status = &v
	return s
}

type RunRiskPatrolResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunRiskPatrolResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunRiskPatrolResponse) String() string {
	return tea.Prettify(s)
}

func (s RunRiskPatrolResponse) GoString() string {
	return s.String()
}

func (s *RunRiskPatrolResponse) SetHeaders(v map[string]*string) *RunRiskPatrolResponse {
	s.Headers = v
	return s
}

func (s *RunRiskPatrolResponse) SetStatusCode(v int32) *RunRiskPatrolResponse {
	s.StatusCode = &v
	return s
}

func (s *RunRiskPatrolResponse) SetBody(v *RunRiskPatrolResponseBody) *RunRiskPatrolResponse {
	s.Body = v
	return s
}

type SwitchUserTopRequest struct {
	SwitchFrontOperaUid *string `json:"SwitchFrontOperaUid,omitempty" xml:"SwitchFrontOperaUid,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Uid                 *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s SwitchUserTopRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchUserTopRequest) GoString() string {
	return s.String()
}

func (s *SwitchUserTopRequest) SetSwitchFrontOperaUid(v string) *SwitchUserTopRequest {
	s.SwitchFrontOperaUid = &v
	return s
}

func (s *SwitchUserTopRequest) SetType(v string) *SwitchUserTopRequest {
	s.Type = &v
	return s
}

func (s *SwitchUserTopRequest) SetUid(v int64) *SwitchUserTopRequest {
	s.Uid = &v
	return s
}

type SwitchUserTopResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s SwitchUserTopResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchUserTopResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchUserTopResponseBody) SetCode(v int32) *SwitchUserTopResponseBody {
	s.Code = &v
	return s
}

func (s *SwitchUserTopResponseBody) SetData(v map[string]interface{}) *SwitchUserTopResponseBody {
	s.Data = v
	return s
}

func (s *SwitchUserTopResponseBody) SetMsg(v string) *SwitchUserTopResponseBody {
	s.Msg = &v
	return s
}

func (s *SwitchUserTopResponseBody) SetRequestId(v string) *SwitchUserTopResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchUserTopResponseBody) SetStatus(v string) *SwitchUserTopResponseBody {
	s.Status = &v
	return s
}

type SwitchUserTopResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SwitchUserTopResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SwitchUserTopResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchUserTopResponse) GoString() string {
	return s.String()
}

func (s *SwitchUserTopResponse) SetHeaders(v map[string]*string) *SwitchUserTopResponse {
	s.Headers = v
	return s
}

func (s *SwitchUserTopResponse) SetStatusCode(v int32) *SwitchUserTopResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchUserTopResponse) SetBody(v *SwitchUserTopResponseBody) *SwitchUserTopResponse {
	s.Body = v
	return s
}

type UpdBusinessGroupRequest struct {
	AliUid            *string   `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	BusinessGroupDesc *string   `json:"BusinessGroupDesc,omitempty" xml:"BusinessGroupDesc,omitempty"`
	BusinessGroupId   *string   `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	BusinessGroupName *string   `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
	InstanceList      []*string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Repeated"`
	ResourceType      *int32    `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	UpdateUser        *string   `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s UpdBusinessGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdBusinessGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdBusinessGroupRequest) SetAliUid(v string) *UpdBusinessGroupRequest {
	s.AliUid = &v
	return s
}

func (s *UpdBusinessGroupRequest) SetBusinessGroupDesc(v string) *UpdBusinessGroupRequest {
	s.BusinessGroupDesc = &v
	return s
}

func (s *UpdBusinessGroupRequest) SetBusinessGroupId(v string) *UpdBusinessGroupRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *UpdBusinessGroupRequest) SetBusinessGroupName(v string) *UpdBusinessGroupRequest {
	s.BusinessGroupName = &v
	return s
}

func (s *UpdBusinessGroupRequest) SetInstanceList(v []*string) *UpdBusinessGroupRequest {
	s.InstanceList = v
	return s
}

func (s *UpdBusinessGroupRequest) SetResourceType(v int32) *UpdBusinessGroupRequest {
	s.ResourceType = &v
	return s
}

func (s *UpdBusinessGroupRequest) SetUpdateUser(v string) *UpdBusinessGroupRequest {
	s.UpdateUser = &v
	return s
}

type UpdBusinessGroupShrinkRequest struct {
	AliUid             *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	BusinessGroupDesc  *string `json:"BusinessGroupDesc,omitempty" xml:"BusinessGroupDesc,omitempty"`
	BusinessGroupId    *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	BusinessGroupName  *string `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
	InstanceListShrink *string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty"`
	ResourceType       *int32  `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	UpdateUser         *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s UpdBusinessGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdBusinessGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdBusinessGroupShrinkRequest) SetAliUid(v string) *UpdBusinessGroupShrinkRequest {
	s.AliUid = &v
	return s
}

func (s *UpdBusinessGroupShrinkRequest) SetBusinessGroupDesc(v string) *UpdBusinessGroupShrinkRequest {
	s.BusinessGroupDesc = &v
	return s
}

func (s *UpdBusinessGroupShrinkRequest) SetBusinessGroupId(v string) *UpdBusinessGroupShrinkRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *UpdBusinessGroupShrinkRequest) SetBusinessGroupName(v string) *UpdBusinessGroupShrinkRequest {
	s.BusinessGroupName = &v
	return s
}

func (s *UpdBusinessGroupShrinkRequest) SetInstanceListShrink(v string) *UpdBusinessGroupShrinkRequest {
	s.InstanceListShrink = &v
	return s
}

func (s *UpdBusinessGroupShrinkRequest) SetResourceType(v int32) *UpdBusinessGroupShrinkRequest {
	s.ResourceType = &v
	return s
}

func (s *UpdBusinessGroupShrinkRequest) SetUpdateUser(v string) *UpdBusinessGroupShrinkRequest {
	s.UpdateUser = &v
	return s
}

type UpdBusinessGroupResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Msg       *string `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdBusinessGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdBusinessGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdBusinessGroupResponseBody) SetCode(v int32) *UpdBusinessGroupResponseBody {
	s.Code = &v
	return s
}

func (s *UpdBusinessGroupResponseBody) SetMsg(v string) *UpdBusinessGroupResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdBusinessGroupResponseBody) SetRequestId(v string) *UpdBusinessGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdBusinessGroupResponseBody) SetStatus(v string) *UpdBusinessGroupResponseBody {
	s.Status = &v
	return s
}

type UpdBusinessGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdBusinessGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdBusinessGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdBusinessGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdBusinessGroupResponse) SetHeaders(v map[string]*string) *UpdBusinessGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdBusinessGroupResponse) SetStatusCode(v int32) *UpdBusinessGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdBusinessGroupResponse) SetBody(v *UpdBusinessGroupResponseBody) *UpdBusinessGroupResponse {
	s.Body = v
	return s
}

type UpdateAuthorizationRequest struct {
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UpdateAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *UpdateAuthorizationRequest) SetType(v string) *UpdateAuthorizationRequest {
	s.Type = &v
	return s
}

func (s *UpdateAuthorizationRequest) SetUserId(v string) *UpdateAuthorizationRequest {
	s.UserId = &v
	return s
}

type UpdateAuthorizationResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAuthorizationResponseBody) SetCode(v string) *UpdateAuthorizationResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAuthorizationResponseBody) SetData(v string) *UpdateAuthorizationResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateAuthorizationResponseBody) SetMessage(v string) *UpdateAuthorizationResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAuthorizationResponseBody) SetRequestId(v string) *UpdateAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAuthorizationResponseBody) SetStatus(v string) *UpdateAuthorizationResponseBody {
	s.Status = &v
	return s
}

type UpdateAuthorizationResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *UpdateAuthorizationResponse) SetHeaders(v map[string]*string) *UpdateAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *UpdateAuthorizationResponse) SetStatusCode(v int32) *UpdateAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAuthorizationResponse) SetBody(v *UpdateAuthorizationResponseBody) *UpdateAuthorizationResponse {
	s.Body = v
	return s
}

type UpdateBindMetricRequest struct {
	Id       *string `json:"Id,omitempty" xml:"Id,omitempty"`
	MetricId *int64  `json:"MetricId,omitempty" xml:"MetricId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s UpdateBindMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBindMetricRequest) GoString() string {
	return s.String()
}

func (s *UpdateBindMetricRequest) SetId(v string) *UpdateBindMetricRequest {
	s.Id = &v
	return s
}

func (s *UpdateBindMetricRequest) SetMetricId(v int64) *UpdateBindMetricRequest {
	s.MetricId = &v
	return s
}

func (s *UpdateBindMetricRequest) SetOperaUid(v string) *UpdateBindMetricRequest {
	s.OperaUid = &v
	return s
}

type UpdateBindMetricResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateBindMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateBindMetricResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateBindMetricResponseBody) SetCode(v int32) *UpdateBindMetricResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateBindMetricResponseBody) SetData(v map[string]interface{}) *UpdateBindMetricResponseBody {
	s.Data = v
	return s
}

func (s *UpdateBindMetricResponseBody) SetMsg(v string) *UpdateBindMetricResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateBindMetricResponseBody) SetPageTotal(v int64) *UpdateBindMetricResponseBody {
	s.PageTotal = &v
	return s
}

func (s *UpdateBindMetricResponseBody) SetRequestId(v string) *UpdateBindMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateBindMetricResponseBody) SetStatus(v string) *UpdateBindMetricResponseBody {
	s.Status = &v
	return s
}

type UpdateBindMetricResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateBindMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateBindMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBindMetricResponse) GoString() string {
	return s.String()
}

func (s *UpdateBindMetricResponse) SetHeaders(v map[string]*string) *UpdateBindMetricResponse {
	s.Headers = v
	return s
}

func (s *UpdateBindMetricResponse) SetStatusCode(v int32) *UpdateBindMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateBindMetricResponse) SetBody(v *UpdateBindMetricResponseBody) *UpdateBindMetricResponse {
	s.Body = v
	return s
}

type UpdateBusinessGroupRequest struct {
	AliUid              *string   `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	BusinessGroupDesc   *string   `json:"BusinessGroupDesc,omitempty" xml:"BusinessGroupDesc,omitempty"`
	BusinessGroupId     *string   `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	BusinessGroupName   *string   `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
	CloudResourceTypeId *string   `json:"CloudResourceTypeId,omitempty" xml:"CloudResourceTypeId,omitempty"`
	DealType            *int32    `json:"DealType,omitempty" xml:"DealType,omitempty"`
	InstanceList        []*string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Repeated"`
	OperaUid            *string   `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ResourceType        *int32    `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	UpdateUser          *string   `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s UpdateBusinessGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateBusinessGroupRequest) SetAliUid(v string) *UpdateBusinessGroupRequest {
	s.AliUid = &v
	return s
}

func (s *UpdateBusinessGroupRequest) SetBusinessGroupDesc(v string) *UpdateBusinessGroupRequest {
	s.BusinessGroupDesc = &v
	return s
}

func (s *UpdateBusinessGroupRequest) SetBusinessGroupId(v string) *UpdateBusinessGroupRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *UpdateBusinessGroupRequest) SetBusinessGroupName(v string) *UpdateBusinessGroupRequest {
	s.BusinessGroupName = &v
	return s
}

func (s *UpdateBusinessGroupRequest) SetCloudResourceTypeId(v string) *UpdateBusinessGroupRequest {
	s.CloudResourceTypeId = &v
	return s
}

func (s *UpdateBusinessGroupRequest) SetDealType(v int32) *UpdateBusinessGroupRequest {
	s.DealType = &v
	return s
}

func (s *UpdateBusinessGroupRequest) SetInstanceList(v []*string) *UpdateBusinessGroupRequest {
	s.InstanceList = v
	return s
}

func (s *UpdateBusinessGroupRequest) SetOperaUid(v string) *UpdateBusinessGroupRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateBusinessGroupRequest) SetResourceType(v int32) *UpdateBusinessGroupRequest {
	s.ResourceType = &v
	return s
}

func (s *UpdateBusinessGroupRequest) SetUpdateUser(v string) *UpdateBusinessGroupRequest {
	s.UpdateUser = &v
	return s
}

type UpdateBusinessGroupShrinkRequest struct {
	AliUid              *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	BusinessGroupDesc   *string `json:"BusinessGroupDesc,omitempty" xml:"BusinessGroupDesc,omitempty"`
	BusinessGroupId     *string `json:"BusinessGroupId,omitempty" xml:"BusinessGroupId,omitempty"`
	BusinessGroupName   *string `json:"BusinessGroupName,omitempty" xml:"BusinessGroupName,omitempty"`
	CloudResourceTypeId *string `json:"CloudResourceTypeId,omitempty" xml:"CloudResourceTypeId,omitempty"`
	DealType            *int32  `json:"DealType,omitempty" xml:"DealType,omitempty"`
	InstanceListShrink  *string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty"`
	OperaUid            *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ResourceType        *int32  `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	UpdateUser          *string `json:"UpdateUser,omitempty" xml:"UpdateUser,omitempty"`
}

func (s UpdateBusinessGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateBusinessGroupShrinkRequest) SetAliUid(v string) *UpdateBusinessGroupShrinkRequest {
	s.AliUid = &v
	return s
}

func (s *UpdateBusinessGroupShrinkRequest) SetBusinessGroupDesc(v string) *UpdateBusinessGroupShrinkRequest {
	s.BusinessGroupDesc = &v
	return s
}

func (s *UpdateBusinessGroupShrinkRequest) SetBusinessGroupId(v string) *UpdateBusinessGroupShrinkRequest {
	s.BusinessGroupId = &v
	return s
}

func (s *UpdateBusinessGroupShrinkRequest) SetBusinessGroupName(v string) *UpdateBusinessGroupShrinkRequest {
	s.BusinessGroupName = &v
	return s
}

func (s *UpdateBusinessGroupShrinkRequest) SetCloudResourceTypeId(v string) *UpdateBusinessGroupShrinkRequest {
	s.CloudResourceTypeId = &v
	return s
}

func (s *UpdateBusinessGroupShrinkRequest) SetDealType(v int32) *UpdateBusinessGroupShrinkRequest {
	s.DealType = &v
	return s
}

func (s *UpdateBusinessGroupShrinkRequest) SetInstanceListShrink(v string) *UpdateBusinessGroupShrinkRequest {
	s.InstanceListShrink = &v
	return s
}

func (s *UpdateBusinessGroupShrinkRequest) SetOperaUid(v string) *UpdateBusinessGroupShrinkRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateBusinessGroupShrinkRequest) SetResourceType(v int32) *UpdateBusinessGroupShrinkRequest {
	s.ResourceType = &v
	return s
}

func (s *UpdateBusinessGroupShrinkRequest) SetUpdateUser(v string) *UpdateBusinessGroupShrinkRequest {
	s.UpdateUser = &v
	return s
}

type UpdateBusinessGroupResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateBusinessGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateBusinessGroupResponseBody) SetCode(v int32) *UpdateBusinessGroupResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateBusinessGroupResponseBody) SetData(v map[string]interface{}) *UpdateBusinessGroupResponseBody {
	s.Data = v
	return s
}

func (s *UpdateBusinessGroupResponseBody) SetMsg(v string) *UpdateBusinessGroupResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateBusinessGroupResponseBody) SetRequestId(v string) *UpdateBusinessGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateBusinessGroupResponseBody) SetStatus(v string) *UpdateBusinessGroupResponseBody {
	s.Status = &v
	return s
}

type UpdateBusinessGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateBusinessGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateBusinessGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateBusinessGroupResponse) SetHeaders(v map[string]*string) *UpdateBusinessGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateBusinessGroupResponse) SetStatusCode(v int32) *UpdateBusinessGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateBusinessGroupResponse) SetBody(v *UpdateBusinessGroupResponseBody) *UpdateBusinessGroupResponse {
	s.Body = v
	return s
}

type UpdateBusinessMetricAlertConfigRequest struct {
	AlertConfigId *int64  `json:"AlertConfigId,omitempty" xml:"AlertConfigId,omitempty"`
	Configs       *string `json:"Configs,omitempty" xml:"Configs,omitempty"`
	MetricId      *int64  `json:"MetricId,omitempty" xml:"MetricId,omitempty"`
	OperaUid      *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s UpdateBusinessMetricAlertConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessMetricAlertConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateBusinessMetricAlertConfigRequest) SetAlertConfigId(v int64) *UpdateBusinessMetricAlertConfigRequest {
	s.AlertConfigId = &v
	return s
}

func (s *UpdateBusinessMetricAlertConfigRequest) SetConfigs(v string) *UpdateBusinessMetricAlertConfigRequest {
	s.Configs = &v
	return s
}

func (s *UpdateBusinessMetricAlertConfigRequest) SetMetricId(v int64) *UpdateBusinessMetricAlertConfigRequest {
	s.MetricId = &v
	return s
}

func (s *UpdateBusinessMetricAlertConfigRequest) SetOperaUid(v string) *UpdateBusinessMetricAlertConfigRequest {
	s.OperaUid = &v
	return s
}

type UpdateBusinessMetricAlertConfigResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateBusinessMetricAlertConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessMetricAlertConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateBusinessMetricAlertConfigResponseBody) SetCode(v int32) *UpdateBusinessMetricAlertConfigResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateBusinessMetricAlertConfigResponseBody) SetData(v map[string]interface{}) *UpdateBusinessMetricAlertConfigResponseBody {
	s.Data = v
	return s
}

func (s *UpdateBusinessMetricAlertConfigResponseBody) SetMsg(v string) *UpdateBusinessMetricAlertConfigResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateBusinessMetricAlertConfigResponseBody) SetRequestId(v string) *UpdateBusinessMetricAlertConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateBusinessMetricAlertConfigResponseBody) SetStatus(v string) *UpdateBusinessMetricAlertConfigResponseBody {
	s.Status = &v
	return s
}

type UpdateBusinessMetricAlertConfigResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateBusinessMetricAlertConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateBusinessMetricAlertConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessMetricAlertConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateBusinessMetricAlertConfigResponse) SetHeaders(v map[string]*string) *UpdateBusinessMetricAlertConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateBusinessMetricAlertConfigResponse) SetStatusCode(v int32) *UpdateBusinessMetricAlertConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateBusinessMetricAlertConfigResponse) SetBody(v *UpdateBusinessMetricAlertConfigResponseBody) *UpdateBusinessMetricAlertConfigResponse {
	s.Body = v
	return s
}

type UpdateBusinessMetricResourceRequest struct {
	BusinessMetricId *int64  `json:"BusinessMetricId,omitempty" xml:"BusinessMetricId,omitempty"`
	OperaUid         *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ResourceList     *string `json:"ResourceList,omitempty" xml:"ResourceList,omitempty"`
}

func (s UpdateBusinessMetricResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessMetricResourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateBusinessMetricResourceRequest) SetBusinessMetricId(v int64) *UpdateBusinessMetricResourceRequest {
	s.BusinessMetricId = &v
	return s
}

func (s *UpdateBusinessMetricResourceRequest) SetOperaUid(v string) *UpdateBusinessMetricResourceRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateBusinessMetricResourceRequest) SetResourceList(v string) *UpdateBusinessMetricResourceRequest {
	s.ResourceList = &v
	return s
}

type UpdateBusinessMetricResourceResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateBusinessMetricResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessMetricResourceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateBusinessMetricResourceResponseBody) SetCode(v int32) *UpdateBusinessMetricResourceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateBusinessMetricResourceResponseBody) SetData(v map[string]interface{}) *UpdateBusinessMetricResourceResponseBody {
	s.Data = v
	return s
}

func (s *UpdateBusinessMetricResourceResponseBody) SetMsg(v string) *UpdateBusinessMetricResourceResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateBusinessMetricResourceResponseBody) SetPageTotal(v int64) *UpdateBusinessMetricResourceResponseBody {
	s.PageTotal = &v
	return s
}

func (s *UpdateBusinessMetricResourceResponseBody) SetRequestId(v string) *UpdateBusinessMetricResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateBusinessMetricResourceResponseBody) SetStatus(v string) *UpdateBusinessMetricResourceResponseBody {
	s.Status = &v
	return s
}

type UpdateBusinessMetricResourceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateBusinessMetricResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateBusinessMetricResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBusinessMetricResourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateBusinessMetricResourceResponse) SetHeaders(v map[string]*string) *UpdateBusinessMetricResourceResponse {
	s.Headers = v
	return s
}

func (s *UpdateBusinessMetricResourceResponse) SetStatusCode(v int32) *UpdateBusinessMetricResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateBusinessMetricResourceResponse) SetBody(v *UpdateBusinessMetricResourceResponseBody) *UpdateBusinessMetricResourceResponse {
	s.Body = v
	return s
}

type UpdateDataSourceConfigRequest struct {
	DataSourceDescribe      *string `json:"DataSourceDescribe,omitempty" xml:"DataSourceDescribe,omitempty"`
	DataSourceName          *string `json:"DataSourceName,omitempty" xml:"DataSourceName,omitempty"`
	DataSourceParams        *string `json:"DataSourceParams,omitempty" xml:"DataSourceParams,omitempty"`
	DataSourceParamsMapping *string `json:"DataSourceParamsMapping,omitempty" xml:"DataSourceParamsMapping,omitempty"`
	DataSourceType          *int32  `json:"DataSourceType,omitempty" xml:"DataSourceType,omitempty"`
	Id                      *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid                *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s UpdateDataSourceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceConfigRequest) SetDataSourceDescribe(v string) *UpdateDataSourceConfigRequest {
	s.DataSourceDescribe = &v
	return s
}

func (s *UpdateDataSourceConfigRequest) SetDataSourceName(v string) *UpdateDataSourceConfigRequest {
	s.DataSourceName = &v
	return s
}

func (s *UpdateDataSourceConfigRequest) SetDataSourceParams(v string) *UpdateDataSourceConfigRequest {
	s.DataSourceParams = &v
	return s
}

func (s *UpdateDataSourceConfigRequest) SetDataSourceParamsMapping(v string) *UpdateDataSourceConfigRequest {
	s.DataSourceParamsMapping = &v
	return s
}

func (s *UpdateDataSourceConfigRequest) SetDataSourceType(v int32) *UpdateDataSourceConfigRequest {
	s.DataSourceType = &v
	return s
}

func (s *UpdateDataSourceConfigRequest) SetId(v int64) *UpdateDataSourceConfigRequest {
	s.Id = &v
	return s
}

func (s *UpdateDataSourceConfigRequest) SetOperaUid(v string) *UpdateDataSourceConfigRequest {
	s.OperaUid = &v
	return s
}

type UpdateDataSourceConfigResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateDataSourceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceConfigResponseBody) SetCode(v int32) *UpdateDataSourceConfigResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDataSourceConfigResponseBody) SetData(v map[string]interface{}) *UpdateDataSourceConfigResponseBody {
	s.Data = v
	return s
}

func (s *UpdateDataSourceConfigResponseBody) SetMsg(v string) *UpdateDataSourceConfigResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateDataSourceConfigResponseBody) SetRequestId(v string) *UpdateDataSourceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateDataSourceConfigResponseBody) SetStatus(v string) *UpdateDataSourceConfigResponseBody {
	s.Status = &v
	return s
}

type UpdateDataSourceConfigResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateDataSourceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateDataSourceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceConfigResponse) SetHeaders(v map[string]*string) *UpdateDataSourceConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataSourceConfigResponse) SetStatusCode(v int32) *UpdateDataSourceConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateDataSourceConfigResponse) SetBody(v *UpdateDataSourceConfigResponseBody) *UpdateDataSourceConfigResponse {
	s.Body = v
	return s
}

type UpdateHandleRiskRequest struct {
	PatrolDetailIds     *string `json:"PatrolDetailIds,omitempty" xml:"PatrolDetailIds,omitempty"`
	PatrolId            *int64  `json:"PatrolId,omitempty" xml:"PatrolId,omitempty"`
	SwitchFrontOperaUid *string `json:"SwitchFrontOperaUid,omitempty" xml:"SwitchFrontOperaUid,omitempty"`
}

func (s UpdateHandleRiskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHandleRiskRequest) GoString() string {
	return s.String()
}

func (s *UpdateHandleRiskRequest) SetPatrolDetailIds(v string) *UpdateHandleRiskRequest {
	s.PatrolDetailIds = &v
	return s
}

func (s *UpdateHandleRiskRequest) SetPatrolId(v int64) *UpdateHandleRiskRequest {
	s.PatrolId = &v
	return s
}

func (s *UpdateHandleRiskRequest) SetSwitchFrontOperaUid(v string) *UpdateHandleRiskRequest {
	s.SwitchFrontOperaUid = &v
	return s
}

type UpdateHandleRiskResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateHandleRiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHandleRiskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHandleRiskResponseBody) SetCode(v int32) *UpdateHandleRiskResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateHandleRiskResponseBody) SetData(v map[string]interface{}) *UpdateHandleRiskResponseBody {
	s.Data = v
	return s
}

func (s *UpdateHandleRiskResponseBody) SetMsg(v string) *UpdateHandleRiskResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateHandleRiskResponseBody) SetRequestId(v string) *UpdateHandleRiskResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateHandleRiskResponseBody) SetStatus(v string) *UpdateHandleRiskResponseBody {
	s.Status = &v
	return s
}

type UpdateHandleRiskResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateHandleRiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateHandleRiskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHandleRiskResponse) GoString() string {
	return s.String()
}

func (s *UpdateHandleRiskResponse) SetHeaders(v map[string]*string) *UpdateHandleRiskResponse {
	s.Headers = v
	return s
}

func (s *UpdateHandleRiskResponse) SetStatusCode(v int32) *UpdateHandleRiskResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateHandleRiskResponse) SetBody(v *UpdateHandleRiskResponseBody) *UpdateHandleRiskResponse {
	s.Body = v
	return s
}

type UpdateHandleRiskBaseRequest struct {
	HandleDescribe  *string `json:"HandleDescribe,omitempty" xml:"HandleDescribe,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PatrolDetailIds *string `json:"PatrolDetailIds,omitempty" xml:"PatrolDetailIds,omitempty"`
	PatrolId        *int64  `json:"PatrolId,omitempty" xml:"PatrolId,omitempty"`
}

func (s UpdateHandleRiskBaseRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHandleRiskBaseRequest) GoString() string {
	return s.String()
}

func (s *UpdateHandleRiskBaseRequest) SetHandleDescribe(v string) *UpdateHandleRiskBaseRequest {
	s.HandleDescribe = &v
	return s
}

func (s *UpdateHandleRiskBaseRequest) SetOperaUid(v string) *UpdateHandleRiskBaseRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateHandleRiskBaseRequest) SetPatrolDetailIds(v string) *UpdateHandleRiskBaseRequest {
	s.PatrolDetailIds = &v
	return s
}

func (s *UpdateHandleRiskBaseRequest) SetPatrolId(v int64) *UpdateHandleRiskBaseRequest {
	s.PatrolId = &v
	return s
}

type UpdateHandleRiskBaseResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateHandleRiskBaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHandleRiskBaseResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHandleRiskBaseResponseBody) SetCode(v int32) *UpdateHandleRiskBaseResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateHandleRiskBaseResponseBody) SetData(v map[string]interface{}) *UpdateHandleRiskBaseResponseBody {
	s.Data = v
	return s
}

func (s *UpdateHandleRiskBaseResponseBody) SetMsg(v string) *UpdateHandleRiskBaseResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateHandleRiskBaseResponseBody) SetPageTotal(v int64) *UpdateHandleRiskBaseResponseBody {
	s.PageTotal = &v
	return s
}

func (s *UpdateHandleRiskBaseResponseBody) SetRequestId(v string) *UpdateHandleRiskBaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateHandleRiskBaseResponseBody) SetStatus(v string) *UpdateHandleRiskBaseResponseBody {
	s.Status = &v
	return s
}

type UpdateHandleRiskBaseResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateHandleRiskBaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateHandleRiskBaseResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHandleRiskBaseResponse) GoString() string {
	return s.String()
}

func (s *UpdateHandleRiskBaseResponse) SetHeaders(v map[string]*string) *UpdateHandleRiskBaseResponse {
	s.Headers = v
	return s
}

func (s *UpdateHandleRiskBaseResponse) SetStatusCode(v int32) *UpdateHandleRiskBaseResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateHandleRiskBaseResponse) SetBody(v *UpdateHandleRiskBaseResponseBody) *UpdateHandleRiskBaseResponse {
	s.Body = v
	return s
}

type UpdateIgnoreRiskRequest struct {
	PatrolDetailIds     *string `json:"PatrolDetailIds,omitempty" xml:"PatrolDetailIds,omitempty"`
	PatrolId            *int64  `json:"PatrolId,omitempty" xml:"PatrolId,omitempty"`
	SwitchFrontOperaUid *string `json:"SwitchFrontOperaUid,omitempty" xml:"SwitchFrontOperaUid,omitempty"`
}

func (s UpdateIgnoreRiskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIgnoreRiskRequest) GoString() string {
	return s.String()
}

func (s *UpdateIgnoreRiskRequest) SetPatrolDetailIds(v string) *UpdateIgnoreRiskRequest {
	s.PatrolDetailIds = &v
	return s
}

func (s *UpdateIgnoreRiskRequest) SetPatrolId(v int64) *UpdateIgnoreRiskRequest {
	s.PatrolId = &v
	return s
}

func (s *UpdateIgnoreRiskRequest) SetSwitchFrontOperaUid(v string) *UpdateIgnoreRiskRequest {
	s.SwitchFrontOperaUid = &v
	return s
}

type UpdateIgnoreRiskResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateIgnoreRiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateIgnoreRiskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateIgnoreRiskResponseBody) SetCode(v int32) *UpdateIgnoreRiskResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateIgnoreRiskResponseBody) SetData(v map[string]interface{}) *UpdateIgnoreRiskResponseBody {
	s.Data = v
	return s
}

func (s *UpdateIgnoreRiskResponseBody) SetMsg(v string) *UpdateIgnoreRiskResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateIgnoreRiskResponseBody) SetRequestId(v string) *UpdateIgnoreRiskResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateIgnoreRiskResponseBody) SetStatus(v string) *UpdateIgnoreRiskResponseBody {
	s.Status = &v
	return s
}

type UpdateIgnoreRiskResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateIgnoreRiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateIgnoreRiskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIgnoreRiskResponse) GoString() string {
	return s.String()
}

func (s *UpdateIgnoreRiskResponse) SetHeaders(v map[string]*string) *UpdateIgnoreRiskResponse {
	s.Headers = v
	return s
}

func (s *UpdateIgnoreRiskResponse) SetStatusCode(v int32) *UpdateIgnoreRiskResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateIgnoreRiskResponse) SetBody(v *UpdateIgnoreRiskResponseBody) *UpdateIgnoreRiskResponse {
	s.Body = v
	return s
}

type UpdateIgnoreRiskBaseRequest struct {
	HandleDescribe  *string `json:"HandleDescribe,omitempty" xml:"HandleDescribe,omitempty"`
	OperaUid        *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	PatrolDetailIds *string `json:"PatrolDetailIds,omitempty" xml:"PatrolDetailIds,omitempty"`
	PatrolId        *int64  `json:"PatrolId,omitempty" xml:"PatrolId,omitempty"`
}

func (s UpdateIgnoreRiskBaseRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateIgnoreRiskBaseRequest) GoString() string {
	return s.String()
}

func (s *UpdateIgnoreRiskBaseRequest) SetHandleDescribe(v string) *UpdateIgnoreRiskBaseRequest {
	s.HandleDescribe = &v
	return s
}

func (s *UpdateIgnoreRiskBaseRequest) SetOperaUid(v string) *UpdateIgnoreRiskBaseRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateIgnoreRiskBaseRequest) SetPatrolDetailIds(v string) *UpdateIgnoreRiskBaseRequest {
	s.PatrolDetailIds = &v
	return s
}

func (s *UpdateIgnoreRiskBaseRequest) SetPatrolId(v int64) *UpdateIgnoreRiskBaseRequest {
	s.PatrolId = &v
	return s
}

type UpdateIgnoreRiskBaseResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateIgnoreRiskBaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateIgnoreRiskBaseResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateIgnoreRiskBaseResponseBody) SetCode(v int32) *UpdateIgnoreRiskBaseResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateIgnoreRiskBaseResponseBody) SetData(v map[string]interface{}) *UpdateIgnoreRiskBaseResponseBody {
	s.Data = v
	return s
}

func (s *UpdateIgnoreRiskBaseResponseBody) SetMsg(v string) *UpdateIgnoreRiskBaseResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateIgnoreRiskBaseResponseBody) SetPageTotal(v int64) *UpdateIgnoreRiskBaseResponseBody {
	s.PageTotal = &v
	return s
}

func (s *UpdateIgnoreRiskBaseResponseBody) SetRequestId(v string) *UpdateIgnoreRiskBaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateIgnoreRiskBaseResponseBody) SetStatus(v string) *UpdateIgnoreRiskBaseResponseBody {
	s.Status = &v
	return s
}

type UpdateIgnoreRiskBaseResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateIgnoreRiskBaseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateIgnoreRiskBaseResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateIgnoreRiskBaseResponse) GoString() string {
	return s.String()
}

func (s *UpdateIgnoreRiskBaseResponse) SetHeaders(v map[string]*string) *UpdateIgnoreRiskBaseResponse {
	s.Headers = v
	return s
}

func (s *UpdateIgnoreRiskBaseResponse) SetStatusCode(v int32) *UpdateIgnoreRiskBaseResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateIgnoreRiskBaseResponse) SetBody(v *UpdateIgnoreRiskBaseResponseBody) *UpdateIgnoreRiskBaseResponse {
	s.Body = v
	return s
}

type UpdateInspectionSettingStatusRequest struct {
	OperaUid         *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	RiskCode         *string `json:"RiskCode,omitempty" xml:"RiskCode,omitempty"`
	RiskEnableStatus *int32  `json:"RiskEnableStatus,omitempty" xml:"RiskEnableStatus,omitempty"`
}

func (s UpdateInspectionSettingStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateInspectionSettingStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateInspectionSettingStatusRequest) SetOperaUid(v string) *UpdateInspectionSettingStatusRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateInspectionSettingStatusRequest) SetRiskCode(v string) *UpdateInspectionSettingStatusRequest {
	s.RiskCode = &v
	return s
}

func (s *UpdateInspectionSettingStatusRequest) SetRiskEnableStatus(v int32) *UpdateInspectionSettingStatusRequest {
	s.RiskEnableStatus = &v
	return s
}

type UpdateInspectionSettingStatusResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateInspectionSettingStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateInspectionSettingStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateInspectionSettingStatusResponseBody) SetCode(v int32) *UpdateInspectionSettingStatusResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateInspectionSettingStatusResponseBody) SetData(v bool) *UpdateInspectionSettingStatusResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateInspectionSettingStatusResponseBody) SetMessage(v string) *UpdateInspectionSettingStatusResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateInspectionSettingStatusResponseBody) SetRequestId(v string) *UpdateInspectionSettingStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateInspectionSettingStatusResponseBody) SetStatus(v string) *UpdateInspectionSettingStatusResponseBody {
	s.Status = &v
	return s
}

type UpdateInspectionSettingStatusResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateInspectionSettingStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateInspectionSettingStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateInspectionSettingStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateInspectionSettingStatusResponse) SetHeaders(v map[string]*string) *UpdateInspectionSettingStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateInspectionSettingStatusResponse) SetStatusCode(v int32) *UpdateInspectionSettingStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateInspectionSettingStatusResponse) SetBody(v *UpdateInspectionSettingStatusResponseBody) *UpdateInspectionSettingStatusResponse {
	s.Body = v
	return s
}

type UpdateInspectionThresholdRequest struct {
	OperaUid              *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	RiskCode              *string `json:"RiskCode,omitempty" xml:"RiskCode,omitempty"`
	ThresholdItemListJson *string `json:"ThresholdItemListJson,omitempty" xml:"ThresholdItemListJson,omitempty"`
}

func (s UpdateInspectionThresholdRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateInspectionThresholdRequest) GoString() string {
	return s.String()
}

func (s *UpdateInspectionThresholdRequest) SetOperaUid(v string) *UpdateInspectionThresholdRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateInspectionThresholdRequest) SetRiskCode(v string) *UpdateInspectionThresholdRequest {
	s.RiskCode = &v
	return s
}

func (s *UpdateInspectionThresholdRequest) SetThresholdItemListJson(v string) *UpdateInspectionThresholdRequest {
	s.ThresholdItemListJson = &v
	return s
}

type UpdateInspectionThresholdResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateInspectionThresholdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateInspectionThresholdResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateInspectionThresholdResponseBody) SetCode(v int32) *UpdateInspectionThresholdResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateInspectionThresholdResponseBody) SetData(v bool) *UpdateInspectionThresholdResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateInspectionThresholdResponseBody) SetMessage(v string) *UpdateInspectionThresholdResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateInspectionThresholdResponseBody) SetRequestId(v string) *UpdateInspectionThresholdResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateInspectionThresholdResponseBody) SetStatus(v string) *UpdateInspectionThresholdResponseBody {
	s.Status = &v
	return s
}

type UpdateInspectionThresholdResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateInspectionThresholdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateInspectionThresholdResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateInspectionThresholdResponse) GoString() string {
	return s.String()
}

func (s *UpdateInspectionThresholdResponse) SetHeaders(v map[string]*string) *UpdateInspectionThresholdResponse {
	s.Headers = v
	return s
}

func (s *UpdateInspectionThresholdResponse) SetStatusCode(v int32) *UpdateInspectionThresholdResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateInspectionThresholdResponse) SetBody(v *UpdateInspectionThresholdResponseBody) *UpdateInspectionThresholdResponse {
	s.Body = v
	return s
}

type UpdateOperationPermissionRequest struct {
	PermissionType      *int32  `json:"PermissionType,omitempty" xml:"PermissionType,omitempty"`
	SwitchFrontOperaUid *string `json:"SwitchFrontOperaUid,omitempty" xml:"SwitchFrontOperaUid,omitempty"`
	Uid                 *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
}

func (s UpdateOperationPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateOperationPermissionRequest) GoString() string {
	return s.String()
}

func (s *UpdateOperationPermissionRequest) SetPermissionType(v int32) *UpdateOperationPermissionRequest {
	s.PermissionType = &v
	return s
}

func (s *UpdateOperationPermissionRequest) SetSwitchFrontOperaUid(v string) *UpdateOperationPermissionRequest {
	s.SwitchFrontOperaUid = &v
	return s
}

func (s *UpdateOperationPermissionRequest) SetUid(v int64) *UpdateOperationPermissionRequest {
	s.Uid = &v
	return s
}

type UpdateOperationPermissionResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateOperationPermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateOperationPermissionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateOperationPermissionResponseBody) SetCode(v int32) *UpdateOperationPermissionResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateOperationPermissionResponseBody) SetData(v map[string]interface{}) *UpdateOperationPermissionResponseBody {
	s.Data = v
	return s
}

func (s *UpdateOperationPermissionResponseBody) SetMsg(v string) *UpdateOperationPermissionResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateOperationPermissionResponseBody) SetRequestId(v string) *UpdateOperationPermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateOperationPermissionResponseBody) SetStatus(v string) *UpdateOperationPermissionResponseBody {
	s.Status = &v
	return s
}

type UpdateOperationPermissionResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateOperationPermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateOperationPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateOperationPermissionResponse) GoString() string {
	return s.String()
}

func (s *UpdateOperationPermissionResponse) SetHeaders(v map[string]*string) *UpdateOperationPermissionResponse {
	s.Headers = v
	return s
}

func (s *UpdateOperationPermissionResponse) SetStatusCode(v int32) *UpdateOperationPermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateOperationPermissionResponse) SetBody(v *UpdateOperationPermissionResponseBody) *UpdateOperationPermissionResponse {
	s.Body = v
	return s
}

type UpdateReportEmailConfigStatusRequest struct {
	ConfigStatus *int32  `json:"ConfigStatus,omitempty" xml:"ConfigStatus,omitempty"`
	MailConfigId *int64  `json:"MailConfigId,omitempty" xml:"MailConfigId,omitempty"`
	OperaUid     *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s UpdateReportEmailConfigStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateReportEmailConfigStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateReportEmailConfigStatusRequest) SetConfigStatus(v int32) *UpdateReportEmailConfigStatusRequest {
	s.ConfigStatus = &v
	return s
}

func (s *UpdateReportEmailConfigStatusRequest) SetMailConfigId(v int64) *UpdateReportEmailConfigStatusRequest {
	s.MailConfigId = &v
	return s
}

func (s *UpdateReportEmailConfigStatusRequest) SetOperaUid(v string) *UpdateReportEmailConfigStatusRequest {
	s.OperaUid = &v
	return s
}

type UpdateReportEmailConfigStatusResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateReportEmailConfigStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateReportEmailConfigStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateReportEmailConfigStatusResponseBody) SetCode(v int32) *UpdateReportEmailConfigStatusResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateReportEmailConfigStatusResponseBody) SetData(v bool) *UpdateReportEmailConfigStatusResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateReportEmailConfigStatusResponseBody) SetMessage(v string) *UpdateReportEmailConfigStatusResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateReportEmailConfigStatusResponseBody) SetRequestId(v string) *UpdateReportEmailConfigStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateReportEmailConfigStatusResponseBody) SetStatus(v string) *UpdateReportEmailConfigStatusResponseBody {
	s.Status = &v
	return s
}

type UpdateReportEmailConfigStatusResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateReportEmailConfigStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateReportEmailConfigStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateReportEmailConfigStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateReportEmailConfigStatusResponse) SetHeaders(v map[string]*string) *UpdateReportEmailConfigStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateReportEmailConfigStatusResponse) SetStatusCode(v int32) *UpdateReportEmailConfigStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateReportEmailConfigStatusResponse) SetBody(v *UpdateReportEmailConfigStatusResponseBody) *UpdateReportEmailConfigStatusResponse {
	s.Body = v
	return s
}

type UpdateReportSubscriptionRequest struct {
	DayOfWeek  *int32  `json:"DayOfWeek,omitempty" xml:"DayOfWeek,omitempty"`
	HourOfDay  *int32  `json:"HourOfDay,omitempty" xml:"HourOfDay,omitempty"`
	OperaUid   *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ReportName *string `json:"ReportName,omitempty" xml:"ReportName,omitempty"`
	Subscribe  *int32  `json:"Subscribe,omitempty" xml:"Subscribe,omitempty"`
}

func (s UpdateReportSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateReportSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *UpdateReportSubscriptionRequest) SetDayOfWeek(v int32) *UpdateReportSubscriptionRequest {
	s.DayOfWeek = &v
	return s
}

func (s *UpdateReportSubscriptionRequest) SetHourOfDay(v int32) *UpdateReportSubscriptionRequest {
	s.HourOfDay = &v
	return s
}

func (s *UpdateReportSubscriptionRequest) SetOperaUid(v string) *UpdateReportSubscriptionRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateReportSubscriptionRequest) SetReportName(v string) *UpdateReportSubscriptionRequest {
	s.ReportName = &v
	return s
}

func (s *UpdateReportSubscriptionRequest) SetSubscribe(v int32) *UpdateReportSubscriptionRequest {
	s.Subscribe = &v
	return s
}

type UpdateReportSubscriptionResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateReportSubscriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateReportSubscriptionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateReportSubscriptionResponseBody) SetCode(v int32) *UpdateReportSubscriptionResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateReportSubscriptionResponseBody) SetData(v bool) *UpdateReportSubscriptionResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateReportSubscriptionResponseBody) SetMessage(v string) *UpdateReportSubscriptionResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateReportSubscriptionResponseBody) SetRequestId(v string) *UpdateReportSubscriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateReportSubscriptionResponseBody) SetStatus(v string) *UpdateReportSubscriptionResponseBody {
	s.Status = &v
	return s
}

type UpdateReportSubscriptionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateReportSubscriptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateReportSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateReportSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *UpdateReportSubscriptionResponse) SetHeaders(v map[string]*string) *UpdateReportSubscriptionResponse {
	s.Headers = v
	return s
}

func (s *UpdateReportSubscriptionResponse) SetStatusCode(v int32) *UpdateReportSubscriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateReportSubscriptionResponse) SetBody(v *UpdateReportSubscriptionResponseBody) *UpdateReportSubscriptionResponse {
	s.Body = v
	return s
}

type UpdateScenarioRequest struct {
	AlertSettingId *int64  `json:"AlertSettingId,omitempty" xml:"AlertSettingId,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Level          *int64  `json:"Level,omitempty" xml:"Level,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s UpdateScenarioRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateScenarioRequest) GoString() string {
	return s.String()
}

func (s *UpdateScenarioRequest) SetAlertSettingId(v int64) *UpdateScenarioRequest {
	s.AlertSettingId = &v
	return s
}

func (s *UpdateScenarioRequest) SetId(v string) *UpdateScenarioRequest {
	s.Id = &v
	return s
}

func (s *UpdateScenarioRequest) SetLevel(v int64) *UpdateScenarioRequest {
	s.Level = &v
	return s
}

func (s *UpdateScenarioRequest) SetName(v string) *UpdateScenarioRequest {
	s.Name = &v
	return s
}

func (s *UpdateScenarioRequest) SetOperaUid(v string) *UpdateScenarioRequest {
	s.OperaUid = &v
	return s
}

type UpdateScenarioResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	PageTotal *int64                 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateScenarioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateScenarioResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateScenarioResponseBody) SetCode(v int32) *UpdateScenarioResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateScenarioResponseBody) SetData(v map[string]interface{}) *UpdateScenarioResponseBody {
	s.Data = v
	return s
}

func (s *UpdateScenarioResponseBody) SetMsg(v string) *UpdateScenarioResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateScenarioResponseBody) SetPageTotal(v int64) *UpdateScenarioResponseBody {
	s.PageTotal = &v
	return s
}

func (s *UpdateScenarioResponseBody) SetRequestId(v string) *UpdateScenarioResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateScenarioResponseBody) SetStatus(v string) *UpdateScenarioResponseBody {
	s.Status = &v
	return s
}

type UpdateScenarioResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateScenarioResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateScenarioResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateScenarioResponse) GoString() string {
	return s.String()
}

func (s *UpdateScenarioResponse) SetHeaders(v map[string]*string) *UpdateScenarioResponse {
	s.Headers = v
	return s
}

func (s *UpdateScenarioResponse) SetStatusCode(v int32) *UpdateScenarioResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateScenarioResponse) SetBody(v *UpdateScenarioResponseBody) *UpdateScenarioResponse {
	s.Body = v
	return s
}

type UpdateSceneRequest struct {
	FlowName       *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	MetricListJson *string `json:"MetricListJson,omitempty" xml:"MetricListJson,omitempty"`
	NodeListJson   *string `json:"NodeListJson,omitempty" xml:"NodeListJson,omitempty"`
	OperaUid       *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SceneDesc      *string `json:"SceneDesc,omitempty" xml:"SceneDesc,omitempty"`
	SceneId        *int64  `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	SceneName      *string `json:"SceneName,omitempty" xml:"SceneName,omitempty"`
	SceneOwner     *string `json:"SceneOwner,omitempty" xml:"SceneOwner,omitempty"`
	SceneWebhook   *string `json:"SceneWebhook,omitempty" xml:"SceneWebhook,omitempty"`
}

func (s UpdateSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneRequest) GoString() string {
	return s.String()
}

func (s *UpdateSceneRequest) SetFlowName(v string) *UpdateSceneRequest {
	s.FlowName = &v
	return s
}

func (s *UpdateSceneRequest) SetMetricListJson(v string) *UpdateSceneRequest {
	s.MetricListJson = &v
	return s
}

func (s *UpdateSceneRequest) SetNodeListJson(v string) *UpdateSceneRequest {
	s.NodeListJson = &v
	return s
}

func (s *UpdateSceneRequest) SetOperaUid(v string) *UpdateSceneRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateSceneRequest) SetSceneDesc(v string) *UpdateSceneRequest {
	s.SceneDesc = &v
	return s
}

func (s *UpdateSceneRequest) SetSceneId(v int64) *UpdateSceneRequest {
	s.SceneId = &v
	return s
}

func (s *UpdateSceneRequest) SetSceneName(v string) *UpdateSceneRequest {
	s.SceneName = &v
	return s
}

func (s *UpdateSceneRequest) SetSceneOwner(v string) *UpdateSceneRequest {
	s.SceneOwner = &v
	return s
}

func (s *UpdateSceneRequest) SetSceneWebhook(v string) *UpdateSceneRequest {
	s.SceneWebhook = &v
	return s
}

type UpdateSceneResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSceneResponseBody) SetCode(v int32) *UpdateSceneResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSceneResponseBody) SetData(v string) *UpdateSceneResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateSceneResponseBody) SetMessage(v string) *UpdateSceneResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSceneResponseBody) SetRequestId(v string) *UpdateSceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSceneResponseBody) SetStatus(v string) *UpdateSceneResponseBody {
	s.Status = &v
	return s
}

type UpdateSceneResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSceneResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneResponse) GoString() string {
	return s.String()
}

func (s *UpdateSceneResponse) SetHeaders(v map[string]*string) *UpdateSceneResponse {
	s.Headers = v
	return s
}

func (s *UpdateSceneResponse) SetStatusCode(v int32) *UpdateSceneResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSceneResponse) SetBody(v *UpdateSceneResponseBody) *UpdateSceneResponse {
	s.Body = v
	return s
}

type UpdateSceneModelRequest struct {
	FcFunctionName    *string `json:"FcFunctionName,omitempty" xml:"FcFunctionName,omitempty"`
	FcHandler         *string `json:"FcHandler,omitempty" xml:"FcHandler,omitempty"`
	FcInitializer     *string `json:"FcInitializer,omitempty" xml:"FcInitializer,omitempty"`
	FcRegionNo        *string `json:"FcRegionNo,omitempty" xml:"FcRegionNo,omitempty"`
	FcServiceName     *string `json:"FcServiceName,omitempty" xml:"FcServiceName,omitempty"`
	ModelDesc         *string `json:"ModelDesc,omitempty" xml:"ModelDesc,omitempty"`
	ModelId           *int64  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	ModelLanguage     *int32  `json:"ModelLanguage,omitempty" xml:"ModelLanguage,omitempty"`
	ModelMemo         *string `json:"ModelMemo,omitempty" xml:"ModelMemo,omitempty"`
	ModelName         *string `json:"ModelName,omitempty" xml:"ModelName,omitempty"`
	ModelType         *int32  `json:"ModelType,omitempty" xml:"ModelType,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	RootCauseDesc     *string `json:"RootCauseDesc,omitempty" xml:"RootCauseDesc,omitempty"`
	RootCauseSolution *string `json:"RootCauseSolution,omitempty" xml:"RootCauseSolution,omitempty"`
}

func (s UpdateSceneModelRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneModelRequest) GoString() string {
	return s.String()
}

func (s *UpdateSceneModelRequest) SetFcFunctionName(v string) *UpdateSceneModelRequest {
	s.FcFunctionName = &v
	return s
}

func (s *UpdateSceneModelRequest) SetFcHandler(v string) *UpdateSceneModelRequest {
	s.FcHandler = &v
	return s
}

func (s *UpdateSceneModelRequest) SetFcInitializer(v string) *UpdateSceneModelRequest {
	s.FcInitializer = &v
	return s
}

func (s *UpdateSceneModelRequest) SetFcRegionNo(v string) *UpdateSceneModelRequest {
	s.FcRegionNo = &v
	return s
}

func (s *UpdateSceneModelRequest) SetFcServiceName(v string) *UpdateSceneModelRequest {
	s.FcServiceName = &v
	return s
}

func (s *UpdateSceneModelRequest) SetModelDesc(v string) *UpdateSceneModelRequest {
	s.ModelDesc = &v
	return s
}

func (s *UpdateSceneModelRequest) SetModelId(v int64) *UpdateSceneModelRequest {
	s.ModelId = &v
	return s
}

func (s *UpdateSceneModelRequest) SetModelLanguage(v int32) *UpdateSceneModelRequest {
	s.ModelLanguage = &v
	return s
}

func (s *UpdateSceneModelRequest) SetModelMemo(v string) *UpdateSceneModelRequest {
	s.ModelMemo = &v
	return s
}

func (s *UpdateSceneModelRequest) SetModelName(v string) *UpdateSceneModelRequest {
	s.ModelName = &v
	return s
}

func (s *UpdateSceneModelRequest) SetModelType(v int32) *UpdateSceneModelRequest {
	s.ModelType = &v
	return s
}

func (s *UpdateSceneModelRequest) SetOperaUid(v string) *UpdateSceneModelRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateSceneModelRequest) SetRootCauseDesc(v string) *UpdateSceneModelRequest {
	s.RootCauseDesc = &v
	return s
}

func (s *UpdateSceneModelRequest) SetRootCauseSolution(v string) *UpdateSceneModelRequest {
	s.RootCauseSolution = &v
	return s
}

type UpdateSceneModelResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateSceneModelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneModelResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSceneModelResponseBody) SetCode(v int32) *UpdateSceneModelResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSceneModelResponseBody) SetData(v string) *UpdateSceneModelResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateSceneModelResponseBody) SetMessage(v string) *UpdateSceneModelResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSceneModelResponseBody) SetRequestId(v string) *UpdateSceneModelResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSceneModelResponseBody) SetStatus(v string) *UpdateSceneModelResponseBody {
	s.Status = &v
	return s
}

type UpdateSceneModelResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSceneModelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSceneModelResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneModelResponse) GoString() string {
	return s.String()
}

func (s *UpdateSceneModelResponse) SetHeaders(v map[string]*string) *UpdateSceneModelResponse {
	s.Headers = v
	return s
}

func (s *UpdateSceneModelResponse) SetStatusCode(v int32) *UpdateSceneModelResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSceneModelResponse) SetBody(v *UpdateSceneModelResponseBody) *UpdateSceneModelResponse {
	s.Body = v
	return s
}

type UpdateSceneModelApplyRequest struct {
	ApplyContent *string `json:"ApplyContent,omitempty" xml:"ApplyContent,omitempty"`
	ApplyId      *int64  `json:"ApplyId,omitempty" xml:"ApplyId,omitempty"`
	ApplyStatus  *int32  `json:"ApplyStatus,omitempty" xml:"ApplyStatus,omitempty"`
	OperaUid     *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s UpdateSceneModelApplyRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneModelApplyRequest) GoString() string {
	return s.String()
}

func (s *UpdateSceneModelApplyRequest) SetApplyContent(v string) *UpdateSceneModelApplyRequest {
	s.ApplyContent = &v
	return s
}

func (s *UpdateSceneModelApplyRequest) SetApplyId(v int64) *UpdateSceneModelApplyRequest {
	s.ApplyId = &v
	return s
}

func (s *UpdateSceneModelApplyRequest) SetApplyStatus(v int32) *UpdateSceneModelApplyRequest {
	s.ApplyStatus = &v
	return s
}

func (s *UpdateSceneModelApplyRequest) SetOperaUid(v string) *UpdateSceneModelApplyRequest {
	s.OperaUid = &v
	return s
}

type UpdateSceneModelApplyResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateSceneModelApplyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneModelApplyResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSceneModelApplyResponseBody) SetCode(v int32) *UpdateSceneModelApplyResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSceneModelApplyResponseBody) SetData(v string) *UpdateSceneModelApplyResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateSceneModelApplyResponseBody) SetMessage(v string) *UpdateSceneModelApplyResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSceneModelApplyResponseBody) SetRequestId(v string) *UpdateSceneModelApplyResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSceneModelApplyResponseBody) SetStatus(v string) *UpdateSceneModelApplyResponseBody {
	s.Status = &v
	return s
}

type UpdateSceneModelApplyResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSceneModelApplyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSceneModelApplyResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneModelApplyResponse) GoString() string {
	return s.String()
}

func (s *UpdateSceneModelApplyResponse) SetHeaders(v map[string]*string) *UpdateSceneModelApplyResponse {
	s.Headers = v
	return s
}

func (s *UpdateSceneModelApplyResponse) SetStatusCode(v int32) *UpdateSceneModelApplyResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSceneModelApplyResponse) SetBody(v *UpdateSceneModelApplyResponseBody) *UpdateSceneModelApplyResponse {
	s.Body = v
	return s
}

type UpdateSceneModelCurVersionRequest struct {
	ExtId    *int64  `json:"ExtId,omitempty" xml:"ExtId,omitempty"`
	ModelId  *int64  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s UpdateSceneModelCurVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneModelCurVersionRequest) GoString() string {
	return s.String()
}

func (s *UpdateSceneModelCurVersionRequest) SetExtId(v int64) *UpdateSceneModelCurVersionRequest {
	s.ExtId = &v
	return s
}

func (s *UpdateSceneModelCurVersionRequest) SetModelId(v int64) *UpdateSceneModelCurVersionRequest {
	s.ModelId = &v
	return s
}

func (s *UpdateSceneModelCurVersionRequest) SetOperaUid(v string) *UpdateSceneModelCurVersionRequest {
	s.OperaUid = &v
	return s
}

type UpdateSceneModelCurVersionResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateSceneModelCurVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneModelCurVersionResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSceneModelCurVersionResponseBody) SetCode(v int32) *UpdateSceneModelCurVersionResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSceneModelCurVersionResponseBody) SetData(v string) *UpdateSceneModelCurVersionResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateSceneModelCurVersionResponseBody) SetMessage(v string) *UpdateSceneModelCurVersionResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSceneModelCurVersionResponseBody) SetRequestId(v string) *UpdateSceneModelCurVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSceneModelCurVersionResponseBody) SetStatus(v string) *UpdateSceneModelCurVersionResponseBody {
	s.Status = &v
	return s
}

type UpdateSceneModelCurVersionResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSceneModelCurVersionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSceneModelCurVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneModelCurVersionResponse) GoString() string {
	return s.String()
}

func (s *UpdateSceneModelCurVersionResponse) SetHeaders(v map[string]*string) *UpdateSceneModelCurVersionResponse {
	s.Headers = v
	return s
}

func (s *UpdateSceneModelCurVersionResponse) SetStatusCode(v int32) *UpdateSceneModelCurVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSceneModelCurVersionResponse) SetBody(v *UpdateSceneModelCurVersionResponseBody) *UpdateSceneModelCurVersionResponse {
	s.Body = v
	return s
}

type UpdateSceneSystemModelStatusRequest struct {
	ModelId     *int64  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	ModelStatus *int32  `json:"ModelStatus,omitempty" xml:"ModelStatus,omitempty"`
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s UpdateSceneSystemModelStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneSystemModelStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateSceneSystemModelStatusRequest) SetModelId(v int64) *UpdateSceneSystemModelStatusRequest {
	s.ModelId = &v
	return s
}

func (s *UpdateSceneSystemModelStatusRequest) SetModelStatus(v int32) *UpdateSceneSystemModelStatusRequest {
	s.ModelStatus = &v
	return s
}

func (s *UpdateSceneSystemModelStatusRequest) SetOperaUid(v string) *UpdateSceneSystemModelStatusRequest {
	s.OperaUid = &v
	return s
}

type UpdateSceneSystemModelStatusResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateSceneSystemModelStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneSystemModelStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSceneSystemModelStatusResponseBody) SetCode(v int32) *UpdateSceneSystemModelStatusResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSceneSystemModelStatusResponseBody) SetData(v string) *UpdateSceneSystemModelStatusResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateSceneSystemModelStatusResponseBody) SetMessage(v string) *UpdateSceneSystemModelStatusResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSceneSystemModelStatusResponseBody) SetRequestId(v string) *UpdateSceneSystemModelStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSceneSystemModelStatusResponseBody) SetStatus(v string) *UpdateSceneSystemModelStatusResponseBody {
	s.Status = &v
	return s
}

type UpdateSceneSystemModelStatusResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSceneSystemModelStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSceneSystemModelStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSceneSystemModelStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateSceneSystemModelStatusResponse) SetHeaders(v map[string]*string) *UpdateSceneSystemModelStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateSceneSystemModelStatusResponse) SetStatusCode(v int32) *UpdateSceneSystemModelStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSceneSystemModelStatusResponse) SetBody(v *UpdateSceneSystemModelStatusResponseBody) *UpdateSceneSystemModelStatusResponse {
	s.Body = v
	return s
}

type UpdateScenestatusRequest struct {
	Id       *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
}

func (s UpdateScenestatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateScenestatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateScenestatusRequest) SetId(v int32) *UpdateScenestatusRequest {
	s.Id = &v
	return s
}

func (s *UpdateScenestatusRequest) SetOperaUid(v string) *UpdateScenestatusRequest {
	s.OperaUid = &v
	return s
}

type UpdateScenestatusResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateScenestatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateScenestatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateScenestatusResponseBody) SetCode(v int32) *UpdateScenestatusResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateScenestatusResponseBody) SetData(v map[string]interface{}) *UpdateScenestatusResponseBody {
	s.Data = v
	return s
}

func (s *UpdateScenestatusResponseBody) SetMsg(v string) *UpdateScenestatusResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateScenestatusResponseBody) SetRequestId(v string) *UpdateScenestatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateScenestatusResponseBody) SetStatus(v string) *UpdateScenestatusResponseBody {
	s.Status = &v
	return s
}

type UpdateScenestatusResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateScenestatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateScenestatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateScenestatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateScenestatusResponse) SetHeaders(v map[string]*string) *UpdateScenestatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateScenestatusResponse) SetStatusCode(v int32) *UpdateScenestatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateScenestatusResponse) SetBody(v *UpdateScenestatusResponseBody) *UpdateScenestatusResponse {
	s.Body = v
	return s
}

type UpdateScriptRequest struct {
	HandleSuggestDesc *string `json:"HandleSuggestDesc,omitempty" xml:"HandleSuggestDesc,omitempty"`
	Id                *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	MetricName        *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	OperaUid          *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	ProductCode       *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	RootCauseDesc     *string `json:"RootCauseDesc,omitempty" xml:"RootCauseDesc,omitempty"`
	RootCausesLog     *string `json:"RootCausesLog,omitempty" xml:"RootCausesLog,omitempty"`
	SceneId           *string `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	Script            *string `json:"Script,omitempty" xml:"Script,omitempty"`
	ScriptLanguage    *string `json:"ScriptLanguage,omitempty" xml:"ScriptLanguage,omitempty"`
	ScriptName        *string `json:"ScriptName,omitempty" xml:"ScriptName,omitempty"`
	Status            *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type              *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateScriptRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateScriptRequest) GoString() string {
	return s.String()
}

func (s *UpdateScriptRequest) SetHandleSuggestDesc(v string) *UpdateScriptRequest {
	s.HandleSuggestDesc = &v
	return s
}

func (s *UpdateScriptRequest) SetId(v int32) *UpdateScriptRequest {
	s.Id = &v
	return s
}

func (s *UpdateScriptRequest) SetMetricName(v string) *UpdateScriptRequest {
	s.MetricName = &v
	return s
}

func (s *UpdateScriptRequest) SetOperaUid(v string) *UpdateScriptRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateScriptRequest) SetProductCode(v string) *UpdateScriptRequest {
	s.ProductCode = &v
	return s
}

func (s *UpdateScriptRequest) SetRootCauseDesc(v string) *UpdateScriptRequest {
	s.RootCauseDesc = &v
	return s
}

func (s *UpdateScriptRequest) SetRootCausesLog(v string) *UpdateScriptRequest {
	s.RootCausesLog = &v
	return s
}

func (s *UpdateScriptRequest) SetSceneId(v string) *UpdateScriptRequest {
	s.SceneId = &v
	return s
}

func (s *UpdateScriptRequest) SetScript(v string) *UpdateScriptRequest {
	s.Script = &v
	return s
}

func (s *UpdateScriptRequest) SetScriptLanguage(v string) *UpdateScriptRequest {
	s.ScriptLanguage = &v
	return s
}

func (s *UpdateScriptRequest) SetScriptName(v string) *UpdateScriptRequest {
	s.ScriptName = &v
	return s
}

func (s *UpdateScriptRequest) SetStatus(v int32) *UpdateScriptRequest {
	s.Status = &v
	return s
}

func (s *UpdateScriptRequest) SetType(v int32) *UpdateScriptRequest {
	s.Type = &v
	return s
}

type UpdateScriptResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateScriptResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateScriptResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateScriptResponseBody) SetCode(v int32) *UpdateScriptResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateScriptResponseBody) SetData(v map[string]interface{}) *UpdateScriptResponseBody {
	s.Data = v
	return s
}

func (s *UpdateScriptResponseBody) SetMsg(v string) *UpdateScriptResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateScriptResponseBody) SetRequestId(v string) *UpdateScriptResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateScriptResponseBody) SetStatus(v string) *UpdateScriptResponseBody {
	s.Status = &v
	return s
}

type UpdateScriptResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateScriptResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateScriptResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateScriptResponse) GoString() string {
	return s.String()
}

func (s *UpdateScriptResponse) SetHeaders(v map[string]*string) *UpdateScriptResponse {
	s.Headers = v
	return s
}

func (s *UpdateScriptResponse) SetStatusCode(v int32) *UpdateScriptResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateScriptResponse) SetBody(v *UpdateScriptResponseBody) *UpdateScriptResponse {
	s.Body = v
	return s
}

type UpdateStatusOfSceneRequest struct {
	OperaUid    *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	SceneId     *int64  `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	SceneStatus *int32  `json:"SceneStatus,omitempty" xml:"SceneStatus,omitempty"`
}

func (s UpdateStatusOfSceneRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateStatusOfSceneRequest) GoString() string {
	return s.String()
}

func (s *UpdateStatusOfSceneRequest) SetOperaUid(v string) *UpdateStatusOfSceneRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateStatusOfSceneRequest) SetSceneId(v int64) *UpdateStatusOfSceneRequest {
	s.SceneId = &v
	return s
}

func (s *UpdateStatusOfSceneRequest) SetSceneStatus(v int32) *UpdateStatusOfSceneRequest {
	s.SceneStatus = &v
	return s
}

type UpdateStatusOfSceneResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateStatusOfSceneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateStatusOfSceneResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateStatusOfSceneResponseBody) SetCode(v int32) *UpdateStatusOfSceneResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateStatusOfSceneResponseBody) SetData(v string) *UpdateStatusOfSceneResponseBody {
	s.Data = &v
	return s
}

func (s *UpdateStatusOfSceneResponseBody) SetMessage(v string) *UpdateStatusOfSceneResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateStatusOfSceneResponseBody) SetRequestId(v string) *UpdateStatusOfSceneResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateStatusOfSceneResponseBody) SetStatus(v string) *UpdateStatusOfSceneResponseBody {
	s.Status = &v
	return s
}

type UpdateStatusOfSceneResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateStatusOfSceneResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateStatusOfSceneResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateStatusOfSceneResponse) GoString() string {
	return s.String()
}

func (s *UpdateStatusOfSceneResponse) SetHeaders(v map[string]*string) *UpdateStatusOfSceneResponse {
	s.Headers = v
	return s
}

func (s *UpdateStatusOfSceneResponse) SetStatusCode(v int32) *UpdateStatusOfSceneResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateStatusOfSceneResponse) SetBody(v *UpdateStatusOfSceneResponseBody) *UpdateStatusOfSceneResponse {
	s.Body = v
	return s
}

type UpdateTagInfoRequest struct {
	OperaUid *string `json:"OperaUid,omitempty" xml:"OperaUid,omitempty"`
	TagId    *int64  `json:"TagId,omitempty" xml:"TagId,omitempty"`
	TagName  *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
}

func (s UpdateTagInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTagInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateTagInfoRequest) SetOperaUid(v string) *UpdateTagInfoRequest {
	s.OperaUid = &v
	return s
}

func (s *UpdateTagInfoRequest) SetTagId(v int64) *UpdateTagInfoRequest {
	s.TagId = &v
	return s
}

func (s *UpdateTagInfoRequest) SetTagName(v string) *UpdateTagInfoRequest {
	s.TagName = &v
	return s
}

type UpdateTagInfoResponseBody struct {
	Code      *int32                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	Msg       *string                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateTagInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTagInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTagInfoResponseBody) SetCode(v int32) *UpdateTagInfoResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateTagInfoResponseBody) SetData(v map[string]interface{}) *UpdateTagInfoResponseBody {
	s.Data = v
	return s
}

func (s *UpdateTagInfoResponseBody) SetMsg(v string) *UpdateTagInfoResponseBody {
	s.Msg = &v
	return s
}

func (s *UpdateTagInfoResponseBody) SetRequestId(v string) *UpdateTagInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTagInfoResponseBody) SetStatus(v string) *UpdateTagInfoResponseBody {
	s.Status = &v
	return s
}

type UpdateTagInfoResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTagInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTagInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTagInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateTagInfoResponse) SetHeaders(v map[string]*string) *UpdateTagInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateTagInfoResponse) SetStatusCode(v int32) *UpdateTagInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTagInfoResponse) SetBody(v *UpdateTagInfoResponseBody) *UpdateTagInfoResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("aiops"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddAlgorithmWithOptions(request *AddAlgorithmRequest, runtime *util.RuntimeOptions) (_result *AddAlgorithmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmId)) {
		query["AlgorithmId"] = request.AlgorithmId
	}

	if !tea.BoolValue(util.IsUnset(request.AlgorithmType)) {
		query["AlgorithmType"] = request.AlgorithmType
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExpandInformation)) {
		query["ExpandInformation"] = request.ExpandInformation
	}

	if !tea.BoolValue(util.IsUnset(request.IndexId)) {
		query["IndexId"] = request.IndexId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAlgorithm"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAlgorithmResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddAlgorithm(request *AddAlgorithmRequest) (_result *AddAlgorithmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAlgorithmResponse{}
	_body, _err := client.AddAlgorithmWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddBusinessGroupWithOptions(tmpReq *AddBusinessGroupRequest, runtime *util.RuntimeOptions) (_result *AddBusinessGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddBusinessGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceList)) {
		request.InstanceListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceList, tea.String("InstanceList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupDesc)) {
		query["BusinessGroupDesc"] = request.BusinessGroupDesc
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupName)) {
		query["BusinessGroupName"] = request.BusinessGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.CreateUser)) {
		query["CreateUser"] = request.CreateUser
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceListShrink)) {
		query["InstanceList"] = request.InstanceListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateUser)) {
		query["UpdateUser"] = request.UpdateUser
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddBusinessGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddBusinessGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddBusinessGroup(request *AddBusinessGroupRequest) (_result *AddBusinessGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddBusinessGroupResponse{}
	_body, _err := client.AddBusinessGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddBusinessGroupOneWithOptions(request *AddBusinessGroupOneRequest, runtime *util.RuntimeOptions) (_result *AddBusinessGroupOneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessGroupDesc)) {
		body["BusinessGroupDesc"] = request.BusinessGroupDesc
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupName)) {
		body["BusinessGroupName"] = request.BusinessGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddBusinessGroupOne"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddBusinessGroupOneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddBusinessGroupOne(request *AddBusinessGroupOneRequest) (_result *AddBusinessGroupOneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddBusinessGroupOneResponse{}
	_body, _err := client.AddBusinessGroupOneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddScenarioWithOptions(request *AddScenarioRequest, runtime *util.RuntimeOptions) (_result *AddScenarioResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertSettingId)) {
		query["AlertSettingId"] = request.AlertSettingId
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddScenario"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddScenarioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddScenario(request *AddScenarioRequest) (_result *AddScenarioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddScenarioResponse{}
	_body, _err := client.AddScenarioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddSceneListWithOptions(request *AddSceneListRequest, runtime *util.RuntimeOptions) (_result *AddSceneListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddSceneList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddSceneListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddSceneList(request *AddSceneListRequest) (_result *AddSceneListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddSceneListResponse{}
	_body, _err := client.AddSceneListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddScriptWithOptions(request *AddScriptRequest, runtime *util.RuntimeOptions) (_result *AddScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HandleSuggestDesc)) {
		query["HandleSuggestDesc"] = request.HandleSuggestDesc
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.RootCauseDesc)) {
		query["RootCauseDesc"] = request.RootCauseDesc
	}

	if !tea.BoolValue(util.IsUnset(request.RootCausesLog)) {
		query["RootCausesLog"] = request.RootCausesLog
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	if !tea.BoolValue(util.IsUnset(request.Script)) {
		query["Script"] = request.Script
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptDesc)) {
		query["ScriptDesc"] = request.ScriptDesc
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptLanguage)) {
		query["ScriptLanguage"] = request.ScriptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptName)) {
		query["ScriptName"] = request.ScriptName
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptVersion)) {
		query["ScriptVersion"] = request.ScriptVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddScript"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddScript(request *AddScriptRequest) (_result *AddScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddScriptResponse{}
	_body, _err := client.AddScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTagInfoWithOptions(request *AddTagInfoRequest, runtime *util.RuntimeOptions) (_result *AddTagInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTagInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTagInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTagInfo(request *AddTagInfoRequest) (_result *AddTagInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTagInfoResponse{}
	_body, _err := client.AddTagInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AgainSubmitApplyPermissionWithOptions(request *AgainSubmitApplyPermissionRequest, runtime *util.RuntimeOptions) (_result *AgainSubmitApplyPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SwitchFrontOperaUid)) {
		query["SwitchFrontOperaUid"] = request.SwitchFrontOperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AgainSubmitApplyPermission"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AgainSubmitApplyPermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AgainSubmitApplyPermission(request *AgainSubmitApplyPermissionRequest) (_result *AgainSubmitApplyPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AgainSubmitApplyPermissionResponse{}
	_body, _err := client.AgainSubmitApplyPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ApplyAuthorizationWithOptions(request *ApplyAuthorizationRequest, runtime *util.RuntimeOptions) (_result *ApplyAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SwitchFrontOperaUid)) {
		query["SwitchFrontOperaUid"] = request.SwitchFrontOperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyAuthorization"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ApplyAuthorization(request *ApplyAuthorizationRequest) (_result *ApplyAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyAuthorizationResponse{}
	_body, _err := client.ApplyAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckDataSourceLinkConnectionWithOptions(request *CheckDataSourceLinkConnectionRequest, runtime *util.RuntimeOptions) (_result *CheckDataSourceLinkConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceParams)) {
		query["DataSourceParams"] = request.DataSourceParams
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckDataSourceLinkConnection"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckDataSourceLinkConnectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckDataSourceLinkConnection(request *CheckDataSourceLinkConnectionRequest) (_result *CheckDataSourceLinkConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckDataSourceLinkConnectionResponse{}
	_body, _err := client.CheckDataSourceLinkConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckLogWithOptions(request *CheckLogRequest, runtime *util.RuntimeOptions) (_result *CheckLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckLog"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckLog(request *CheckLogRequest) (_result *CheckLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckLogResponse{}
	_body, _err := client.CheckLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloseEventWithOptions(request *CloseEventRequest, runtime *util.RuntimeOptions) (_result *CloseEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CloseDesc)) {
		query["CloseDesc"] = request.CloseDesc
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CloseEvent"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CloseEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloseEvent(request *CloseEventRequest) (_result *CloseEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloseEventResponse{}
	_body, _err := client.CloseEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfirmAuthorizationWithOptions(request *ConfirmAuthorizationRequest, runtime *util.RuntimeOptions) (_result *ConfirmAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PermissionType)) {
		query["PermissionType"] = request.PermissionType
	}

	if !tea.BoolValue(util.IsUnset(request.SwitchFrontOperaUid)) {
		query["SwitchFrontOperaUid"] = request.SwitchFrontOperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfirmAuthorization"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfirmAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfirmAuthorization(request *ConfirmAuthorizationRequest) (_result *ConfirmAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfirmAuthorizationResponse{}
	_body, _err := client.ConfirmAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CountLatestReportsWithOptions(request *CountLatestReportsRequest, runtime *util.RuntimeOptions) (_result *CountLatestReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogStore)) {
		query["LogStore"] = request.LogStore
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CountLatestReports"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CountLatestReportsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CountLatestReports(request *CountLatestReportsRequest) (_result *CountLatestReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CountLatestReportsResponse{}
	_body, _err := client.CountLatestReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAlertContactWithOptions(request *CreateAlertContactRequest, runtime *util.RuntimeOptions) (_result *CreateAlertContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Email)) {
		body["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		body["Phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.Webhook)) {
		body["Webhook"] = request.Webhook
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAlertContact"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAlertContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAlertContact(request *CreateAlertContactRequest) (_result *CreateAlertContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAlertContactResponse{}
	_body, _err := client.CreateAlertContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAlertContactGroupWithOptions(request *CreateAlertContactGroupRequest, runtime *util.RuntimeOptions) (_result *CreateAlertContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertContactGroupJson)) {
		body["AlertContactGroupJson"] = request.AlertContactGroupJson
	}

	if !tea.BoolValue(util.IsUnset(request.ContactIdsJson)) {
		body["ContactIdsJson"] = request.ContactIdsJson
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAlertContactGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAlertContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAlertContactGroup(request *CreateAlertContactGroupRequest) (_result *CreateAlertContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAlertContactGroupResponse{}
	_body, _err := client.CreateAlertContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCommandWithOptions(request *CreateCommandRequest, runtime *util.RuntimeOptions) (_result *CreateCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommandContent)) {
		query["CommandContent"] = request.CommandContent
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WorkingDir)) {
		query["WorkingDir"] = request.WorkingDir
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCommand"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCommand(request *CreateCommandRequest) (_result *CreateCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCommandResponse{}
	_body, _err := client.CreateCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDumpWithOptions(request *CreateDumpRequest, runtime *util.RuntimeOptions) (_result *CreateDumpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDump"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDumpResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDump(request *CreateDumpRequest) (_result *CreateDumpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDumpResponse{}
	_body, _err := client.CreateDumpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInspectionRecordWithOptions(request *CreateInspectionRecordRequest, runtime *util.RuntimeOptions) (_result *CreateInspectionRecordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		body["ResourceId"] = request.ResourceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInspectionRecord"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInspectionRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInspectionRecord(request *CreateInspectionRecordRequest) (_result *CreateInspectionRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInspectionRecordResponse{}
	_body, _err := client.CreateInspectionRecordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMessageWithOptions(request *CreateMessageRequest, runtime *util.RuntimeOptions) (_result *CreateMessageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMessage"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMessageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMessage(request *CreateMessageRequest) (_result *CreateMessageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMessageResponse{}
	_body, _err := client.CreateMessageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSceneWithOptions(request *CreateSceneRequest, runtime *util.RuntimeOptions) (_result *CreateSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowName)) {
		body["FlowName"] = request.FlowName
	}

	if !tea.BoolValue(util.IsUnset(request.MetricListJson)) {
		body["MetricListJson"] = request.MetricListJson
	}

	if !tea.BoolValue(util.IsUnset(request.NodeListJson)) {
		body["NodeListJson"] = request.NodeListJson
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.SceneDesc)) {
		body["SceneDesc"] = request.SceneDesc
	}

	if !tea.BoolValue(util.IsUnset(request.SceneName)) {
		body["SceneName"] = request.SceneName
	}

	if !tea.BoolValue(util.IsUnset(request.SceneOwner)) {
		body["SceneOwner"] = request.SceneOwner
	}

	if !tea.BoolValue(util.IsUnset(request.SceneWebhook)) {
		body["SceneWebhook"] = request.SceneWebhook
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateScene"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateScene(request *CreateSceneRequest) (_result *CreateSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSceneResponse{}
	_body, _err := client.CreateSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSceneModelWithOptions(request *CreateSceneModelRequest, runtime *util.RuntimeOptions) (_result *CreateSceneModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FcFunctionName)) {
		body["FcFunctionName"] = request.FcFunctionName
	}

	if !tea.BoolValue(util.IsUnset(request.FcHandler)) {
		body["FcHandler"] = request.FcHandler
	}

	if !tea.BoolValue(util.IsUnset(request.FcInitializer)) {
		body["FcInitializer"] = request.FcInitializer
	}

	if !tea.BoolValue(util.IsUnset(request.FcRegionNo)) {
		body["FcRegionNo"] = request.FcRegionNo
	}

	if !tea.BoolValue(util.IsUnset(request.FcServiceName)) {
		body["FcServiceName"] = request.FcServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.ModelDesc)) {
		body["ModelDesc"] = request.ModelDesc
	}

	if !tea.BoolValue(util.IsUnset(request.ModelLanguage)) {
		body["ModelLanguage"] = request.ModelLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.ModelMemo)) {
		body["ModelMemo"] = request.ModelMemo
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		body["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.ModelType)) {
		body["ModelType"] = request.ModelType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.RootCauseDesc)) {
		body["RootCauseDesc"] = request.RootCauseDesc
	}

	if !tea.BoolValue(util.IsUnset(request.RootCauseSolution)) {
		body["RootCauseSolution"] = request.RootCauseSolution
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSceneModel"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSceneModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSceneModel(request *CreateSceneModelRequest) (_result *CreateSceneModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSceneModelResponse{}
	_body, _err := client.CreateSceneModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSceneModelApplyWithOptions(request *CreateSceneModelApplyRequest, runtime *util.RuntimeOptions) (_result *CreateSceneModelApplyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSceneModelApply"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSceneModelApplyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSceneModelApply(request *CreateSceneModelApplyRequest) (_result *CreateSceneModelApplyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSceneModelApplyResponse{}
	_body, _err := client.CreateSceneModelApplyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DelBusinessGroupWithOptions(request *DelBusinessGroupRequest, runtime *util.RuntimeOptions) (_result *DelBusinessGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DelBusinessGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DelBusinessGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DelBusinessGroup(request *DelBusinessGroupRequest) (_result *DelBusinessGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DelBusinessGroupResponse{}
	_body, _err := client.DelBusinessGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAlertContactWithOptions(request *DeleteAlertContactRequest, runtime *util.RuntimeOptions) (_result *DeleteAlertContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactIdListJson)) {
		body["ContactIdListJson"] = request.ContactIdListJson
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlertContact"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlertContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAlertContact(request *DeleteAlertContactRequest) (_result *DeleteAlertContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlertContactResponse{}
	_body, _err := client.DeleteAlertContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAlertContactFromGroupWithOptions(request *DeleteAlertContactFromGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteAlertContactFromGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactIdListJson)) {
		body["ContactIdListJson"] = request.ContactIdListJson
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlertContactFromGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlertContactFromGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAlertContactFromGroup(request *DeleteAlertContactFromGroupRequest) (_result *DeleteAlertContactFromGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlertContactFromGroupResponse{}
	_body, _err := client.DeleteAlertContactFromGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAlertContactGroupWithOptions(request *DeleteAlertContactGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteAlertContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlertContactGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlertContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAlertContactGroup(request *DeleteAlertContactGroupRequest) (_result *DeleteAlertContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlertContactGroupResponse{}
	_body, _err := client.DeleteAlertContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAlertSettingWithOptions(request *DeleteAlertSettingRequest, runtime *util.RuntimeOptions) (_result *DeleteAlertSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertSettingId)) {
		body["AlertSettingId"] = request.AlertSettingId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlertSetting"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlertSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAlertSetting(request *DeleteAlertSettingRequest) (_result *DeleteAlertSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlertSettingResponse{}
	_body, _err := client.DeleteAlertSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAlertSettingListWithOptions(request *DeleteAlertSettingListRequest, runtime *util.RuntimeOptions) (_result *DeleteAlertSettingListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomerIdsJson)) {
		body["CustomerIdsJson"] = request.CustomerIdsJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlertSettingList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlertSettingListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAlertSettingList(request *DeleteAlertSettingListRequest) (_result *DeleteAlertSettingListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlertSettingListResponse{}
	_body, _err := client.DeleteAlertSettingListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAlgorithmInfoWithOptions(request *DeleteAlgorithmInfoRequest, runtime *util.RuntimeOptions) (_result *DeleteAlgorithmInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAlgorithmInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAlgorithmInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAlgorithmInfo(request *DeleteAlgorithmInfoRequest) (_result *DeleteAlgorithmInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAlgorithmInfoResponse{}
	_body, _err := client.DeleteAlgorithmInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBusinessGroupWithOptions(request *DeleteBusinessGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteBusinessGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBusinessGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBusinessGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBusinessGroup(request *DeleteBusinessGroupRequest) (_result *DeleteBusinessGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBusinessGroupResponse{}
	_body, _err := client.DeleteBusinessGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBusinessResourceTagWithOptions(request *DeleteBusinessResourceTagRequest, runtime *util.RuntimeOptions) (_result *DeleteBusinessResourceTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBusinessResourceTag"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBusinessResourceTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBusinessResourceTag(request *DeleteBusinessResourceTagRequest) (_result *DeleteBusinessResourceTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBusinessResourceTagResponse{}
	_body, _err := client.DeleteBusinessResourceTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDataSourceConfigWithOptions(request *DeleteDataSourceConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteDataSourceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDataSourceConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDataSourceConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDataSourceConfig(request *DeleteDataSourceConfigRequest) (_result *DeleteDataSourceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDataSourceConfigResponse{}
	_body, _err := client.DeleteDataSourceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteGroupTopologyTagLogWithOptions(request *DeleteGroupTopologyTagLogRequest, runtime *util.RuntimeOptions) (_result *DeleteGroupTopologyTagLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGroupTopologyTagLog"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGroupTopologyTagLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteGroupTopologyTagLog(request *DeleteGroupTopologyTagLogRequest) (_result *DeleteGroupTopologyTagLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGroupTopologyTagLogResponse{}
	_body, _err := client.DeleteGroupTopologyTagLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRealSceneInfoWithOptions(request *DeleteRealSceneInfoRequest, runtime *util.RuntimeOptions) (_result *DeleteRealSceneInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRealSceneInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRealSceneInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRealSceneInfo(request *DeleteRealSceneInfoRequest) (_result *DeleteRealSceneInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRealSceneInfoResponse{}
	_body, _err := client.DeleteRealSceneInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteReportEmailConfigWithOptions(request *DeleteReportEmailConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteReportEmailConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MailConfigId)) {
		body["MailConfigId"] = request.MailConfigId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteReportEmailConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteReportEmailConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteReportEmailConfig(request *DeleteReportEmailConfigRequest) (_result *DeleteReportEmailConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteReportEmailConfigResponse{}
	_body, _err := client.DeleteReportEmailConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteResourceWhitelistWithOptions(request *DeleteResourceWhitelistRequest, runtime *util.RuntimeOptions) (_result *DeleteResourceWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InspectionWhitelistId)) {
		body["InspectionWhitelistId"] = request.InspectionWhitelistId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteResourceWhitelist"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteResourceWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteResourceWhitelist(request *DeleteResourceWhitelistRequest) (_result *DeleteResourceWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteResourceWhitelistResponse{}
	_body, _err := client.DeleteResourceWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteScenarioWithOptions(request *DeleteScenarioRequest, runtime *util.RuntimeOptions) (_result *DeleteScenarioResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteScenario"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteScenarioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteScenario(request *DeleteScenarioRequest) (_result *DeleteScenarioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteScenarioResponse{}
	_body, _err := client.DeleteScenarioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSceneWithOptions(request *DeleteSceneRequest, runtime *util.RuntimeOptions) (_result *DeleteSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		body["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteScene"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteScene(request *DeleteSceneRequest) (_result *DeleteSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSceneResponse{}
	_body, _err := client.DeleteSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSceneListWithOptions(request *DeleteSceneListRequest, runtime *util.RuntimeOptions) (_result *DeleteSceneListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSceneList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSceneListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSceneList(request *DeleteSceneListRequest) (_result *DeleteSceneListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSceneListResponse{}
	_body, _err := client.DeleteSceneListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSceneModelWithOptions(request *DeleteSceneModelRequest, runtime *util.RuntimeOptions) (_result *DeleteSceneModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.SureDelete)) {
		body["SureDelete"] = request.SureDelete
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSceneModel"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSceneModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSceneModel(request *DeleteSceneModelRequest) (_result *DeleteSceneModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSceneModelResponse{}
	_body, _err := client.DeleteSceneModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTagInfoWithOptions(request *DeleteTagInfoRequest, runtime *util.RuntimeOptions) (_result *DeleteTagInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTagInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTagInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTagInfo(request *DeleteTagInfoRequest) (_result *DeleteTagInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTagInfoResponse{}
	_body, _err := client.DeleteTagInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccountAlertEventWithOptions(request *DescribeAccountAlertEventRequest, runtime *util.RuntimeOptions) (_result *DescribeAccountAlertEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAccountAlertEvent"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAccountAlertEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccountAlertEvent(request *DescribeAccountAlertEventRequest) (_result *DescribeAccountAlertEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccountAlertEventResponse{}
	_body, _err := client.DescribeAccountAlertEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAdvisorInspectionProductsWithOptions(request *DescribeAdvisorInspectionProductsRequest, runtime *util.RuntimeOptions) (_result *DescribeAdvisorInspectionProductsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAdvisorInspectionProducts"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAdvisorInspectionProductsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAdvisorInspectionProducts(request *DescribeAdvisorInspectionProductsRequest) (_result *DescribeAdvisorInspectionProductsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAdvisorInspectionProductsResponse{}
	_body, _err := client.DescribeAdvisorInspectionProductsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertBusinessGroupWithAlertSettingIdWithOptions(request *DescribeAlertBusinessGroupWithAlertSettingIdRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertBusinessGroupWithAlertSettingIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertSettingId)) {
		body["AlertSettingId"] = request.AlertSettingId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertBusinessGroupWithAlertSettingId"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertBusinessGroupWithAlertSettingIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertBusinessGroupWithAlertSettingId(request *DescribeAlertBusinessGroupWithAlertSettingIdRequest) (_result *DescribeAlertBusinessGroupWithAlertSettingIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertBusinessGroupWithAlertSettingIdResponse{}
	_body, _err := client.DescribeAlertBusinessGroupWithAlertSettingIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertContactWithOptions(request *DescribeAlertContactRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchBy)) {
		body["SearchBy"] = request.SearchBy
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLike)) {
		body["SearchLike"] = request.SearchLike
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertContact"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertContact(request *DescribeAlertContactRequest) (_result *DescribeAlertContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertContactResponse{}
	_body, _err := client.DescribeAlertContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertContactGroupWithOptions(request *DescribeAlertContactGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLike)) {
		body["SearchLike"] = request.SearchLike
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertContactGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertContactGroup(request *DescribeAlertContactGroupRequest) (_result *DescribeAlertContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertContactGroupResponse{}
	_body, _err := client.DescribeAlertContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertContactWithAlertSettingIdWithOptions(request *DescribeAlertContactWithAlertSettingIdRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertContactWithAlertSettingIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertSettingId)) {
		body["AlertSettingId"] = request.AlertSettingId
	}

	if !tea.BoolValue(util.IsUnset(request.ContactType)) {
		body["ContactType"] = request.ContactType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertContactWithAlertSettingId"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertContactWithAlertSettingIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertContactWithAlertSettingId(request *DescribeAlertContactWithAlertSettingIdRequest) (_result *DescribeAlertContactWithAlertSettingIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertContactWithAlertSettingIdResponse{}
	_body, _err := client.DescribeAlertContactWithAlertSettingIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertContactWithGroupIdWithOptions(request *DescribeAlertContactWithGroupIdRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertContactWithGroupIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertContactWithGroupId"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertContactWithGroupIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertContactWithGroupId(request *DescribeAlertContactWithGroupIdRequest) (_result *DescribeAlertContactWithGroupIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertContactWithGroupIdResponse{}
	_body, _err := client.DescribeAlertContactWithGroupIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertDetailDataWithOptions(request *DescribeAlertDetailDataRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertDetailDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertDetailData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertDetailDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertDetailData(request *DescribeAlertDetailDataRequest) (_result *DescribeAlertDetailDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertDetailDataResponse{}
	_body, _err := client.DescribeAlertDetailDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertDetailTrendDataWithOptions(request *DescribeAlertDetailTrendDataRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertDetailTrendDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertDetailTrendData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertDetailTrendDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertDetailTrendData(request *DescribeAlertDetailTrendDataRequest) (_result *DescribeAlertDetailTrendDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertDetailTrendDataResponse{}
	_body, _err := client.DescribeAlertDetailTrendDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertEventWithOptions(request *DescribeAlertEventRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertEvent"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertEvent(request *DescribeAlertEventRequest) (_result *DescribeAlertEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertEventResponse{}
	_body, _err := client.DescribeAlertEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertFinalDataListWithOptions(request *DescribeAlertFinalDataListRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertFinalDataListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertFinalDataList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertFinalDataListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertFinalDataList(request *DescribeAlertFinalDataListRequest) (_result *DescribeAlertFinalDataListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertFinalDataListResponse{}
	_body, _err := client.DescribeAlertFinalDataListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertResourceWithOptions(request *DescribeAlertResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertResource"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertResource(request *DescribeAlertResourceRequest) (_result *DescribeAlertResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertResourceResponse{}
	_body, _err := client.DescribeAlertResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertSettingWithOptions(request *DescribeAlertSettingRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.CustomerName)) {
		body["CustomerName"] = request.CustomerName
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeyword)) {
		body["SearchKeyword"] = request.SearchKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.SettingStatus)) {
		body["SettingStatus"] = request.SettingStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		body["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertSetting"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertSetting(request *DescribeAlertSettingRequest) (_result *DescribeAlertSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertSettingResponse{}
	_body, _err := client.DescribeAlertSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAlertSettingByIdWithOptions(request *DescribeAlertSettingByIdRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertSettingByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertSettingId)) {
		body["AlertSettingId"] = request.AlertSettingId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertSettingById"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertSettingByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAlertSettingById(request *DescribeAlertSettingByIdRequest) (_result *DescribeAlertSettingByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertSettingByIdResponse{}
	_body, _err := client.DescribeAlertSettingByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAllAlertContactWithOptions(request *DescribeAllAlertContactRequest, runtime *util.RuntimeOptions) (_result *DescribeAllAlertContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAllAlertContact"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAllAlertContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAllAlertContact(request *DescribeAllAlertContactRequest) (_result *DescribeAllAlertContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAllAlertContactResponse{}
	_body, _err := client.DescribeAllAlertContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAllAlertContactGroupWithOptions(request *DescribeAllAlertContactGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeAllAlertContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAllAlertContactGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAllAlertContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAllAlertContactGroup(request *DescribeAllAlertContactGroupRequest) (_result *DescribeAllAlertContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAllAlertContactGroupResponse{}
	_body, _err := client.DescribeAllAlertContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAllBusinessGroupInfoWithOptions(request *DescribeAllBusinessGroupInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeAllBusinessGroupInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAllBusinessGroupInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAllBusinessGroupInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAllBusinessGroupInfo(request *DescribeAllBusinessGroupInfoRequest) (_result *DescribeAllBusinessGroupInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAllBusinessGroupInfoResponse{}
	_body, _err := client.DescribeAllBusinessGroupInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAllSceneModelWithOptions(request *DescribeAllSceneModelRequest, runtime *util.RuntimeOptions) (_result *DescribeAllSceneModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAllSceneModel"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAllSceneModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAllSceneModel(request *DescribeAllSceneModelRequest) (_result *DescribeAllSceneModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAllSceneModelResponse{}
	_body, _err := client.DescribeAllSceneModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAnalysisDataListWithOptions(request *DescribeAnalysisDataListRequest, runtime *util.RuntimeOptions) (_result *DescribeAnalysisDataListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MetricExtend)) {
		query["MetricExtend"] = request.MetricExtend
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAnalysisDataList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAnalysisDataListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAnalysisDataList(request *DescribeAnalysisDataListRequest) (_result *DescribeAnalysisDataListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAnalysisDataListResponse{}
	_body, _err := client.DescribeAnalysisDataListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBusinessAnalysisDataListWithOptions(request *DescribeBusinessAnalysisDataListRequest, runtime *util.RuntimeOptions) (_result *DescribeBusinessAnalysisDataListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApiPath)) {
		query["ApiPath"] = request.ApiPath
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Resource)) {
		query["Resource"] = request.Resource
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBusinessAnalysisDataList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBusinessAnalysisDataListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBusinessAnalysisDataList(request *DescribeBusinessAnalysisDataListRequest) (_result *DescribeBusinessAnalysisDataListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBusinessAnalysisDataListResponse{}
	_body, _err := client.DescribeBusinessAnalysisDataListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDiagnoseWithOptions(request *DescribeDiagnoseRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnoseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnose"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDiagnoseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDiagnose(request *DescribeDiagnoseRequest) (_result *DescribeDiagnoseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnoseResponse{}
	_body, _err := client.DescribeDiagnoseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDiagnoseResultWithOptions(request *DescribeDiagnoseResultRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnoseResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckId)) {
		query["CheckId"] = request.CheckId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnoseResult"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDiagnoseResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDiagnoseResult(request *DescribeDiagnoseResultRequest) (_result *DescribeDiagnoseResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnoseResultResponse{}
	_body, _err := client.DescribeDiagnoseResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEventTopologyWithOptions(request *DescribeEventTopologyRequest, runtime *util.RuntimeOptions) (_result *DescribeEventTopologyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventTopology"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventTopologyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEventTopology(request *DescribeEventTopologyRequest) (_result *DescribeEventTopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventTopologyResponse{}
	_body, _err := client.DescribeEventTopologyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEventTopologyDetailWithOptions(request *DescribeEventTopologyDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeEventTopologyDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.TagId)) {
		query["TagId"] = request.TagId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventTopologyDetail"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventTopologyDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEventTopologyDetail(request *DescribeEventTopologyDetailRequest) (_result *DescribeEventTopologyDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventTopologyDetailResponse{}
	_body, _err := client.DescribeEventTopologyDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFcFunctionWithOptions(request *DescribeFcFunctionRequest, runtime *util.RuntimeOptions) (_result *DescribeFcFunctionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		body["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Prefix)) {
		body["Prefix"] = request.Prefix
	}

	if !tea.BoolValue(util.IsUnset(request.RegionCode)) {
		body["RegionCode"] = request.RegionCode
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		body["ServiceName"] = request.ServiceName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFcFunction"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFcFunctionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFcFunction(request *DescribeFcFunctionRequest) (_result *DescribeFcFunctionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFcFunctionResponse{}
	_body, _err := client.DescribeFcFunctionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFcRegionWithOptions(request *DescribeFcRegionRequest, runtime *util.RuntimeOptions) (_result *DescribeFcRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFcRegion"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFcRegionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFcRegion(request *DescribeFcRegionRequest) (_result *DescribeFcRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFcRegionResponse{}
	_body, _err := client.DescribeFcRegionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFcServiceWithOptions(request *DescribeFcServiceRequest, runtime *util.RuntimeOptions) (_result *DescribeFcServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		body["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Prefix)) {
		body["Prefix"] = request.Prefix
	}

	if !tea.BoolValue(util.IsUnset(request.RegionCode)) {
		body["RegionCode"] = request.RegionCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFcService"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFcServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFcService(request *DescribeFcServiceRequest) (_result *DescribeFcServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFcServiceResponse{}
	_body, _err := client.DescribeFcServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHistoryRiskWithOptions(request *DescribeHistoryRiskRequest, runtime *util.RuntimeOptions) (_result *DescribeHistoryRiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.LastFindTimeEnd)) {
		body["LastFindTimeEnd"] = request.LastFindTimeEnd
	}

	if !tea.BoolValue(util.IsUnset(request.LastFindTimeStart)) {
		body["LastFindTimeStart"] = request.LastFindTimeStart
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		body["Severity"] = request.Severity
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHistoryRisk"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHistoryRiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHistoryRisk(request *DescribeHistoryRiskRequest) (_result *DescribeHistoryRiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHistoryRiskResponse{}
	_body, _err := client.DescribeHistoryRiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInspectionProgressWithOptions(request *DescribeInspectionProgressRequest, runtime *util.RuntimeOptions) (_result *DescribeInspectionProgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InspectionRecordId)) {
		body["InspectionRecordId"] = request.InspectionRecordId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInspectionProgress"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInspectionProgressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInspectionProgress(request *DescribeInspectionProgressRequest) (_result *DescribeInspectionProgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInspectionProgressResponse{}
	_body, _err := client.DescribeInspectionProgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInspectionResourcesWithOptions(request *DescribeInspectionResourcesRequest, runtime *util.RuntimeOptions) (_result *DescribeInspectionResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInspectionResources"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInspectionResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInspectionResources(request *DescribeInspectionResourcesRequest) (_result *DescribeInspectionResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInspectionResourcesResponse{}
	_body, _err := client.DescribeInspectionResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInspectionResultWithOptions(request *DescribeInspectionResultRequest, runtime *util.RuntimeOptions) (_result *DescribeInspectionResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContinuousDays)) {
		body["ContinuousDays"] = request.ContinuousDays
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RiskCode)) {
		body["RiskCode"] = request.RiskCode
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		body["Severity"] = request.Severity
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInspectionResult"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInspectionResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInspectionResult(request *DescribeInspectionResultRequest) (_result *DescribeInspectionResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInspectionResultResponse{}
	_body, _err := client.DescribeInspectionResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInspectionSettingsWithOptions(request *DescribeInspectionSettingsRequest, runtime *util.RuntimeOptions) (_result *DescribeInspectionSettingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		body["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RiskDesc)) {
		body["RiskDesc"] = request.RiskDesc
	}

	if !tea.BoolValue(util.IsUnset(request.RiskEnableStatus)) {
		body["RiskEnableStatus"] = request.RiskEnableStatus
	}

	if !tea.BoolValue(util.IsUnset(request.RiskName)) {
		body["RiskName"] = request.RiskName
	}

	if !tea.BoolValue(util.IsUnset(request.RiskType)) {
		body["RiskType"] = request.RiskType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInspectionSettings"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInspectionSettingsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInspectionSettings(request *DescribeInspectionSettingsRequest) (_result *DescribeInspectionSettingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInspectionSettingsResponse{}
	_body, _err := client.DescribeInspectionSettingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInspectionThresholdWithOptions(request *DescribeInspectionThresholdRequest, runtime *util.RuntimeOptions) (_result *DescribeInspectionThresholdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.RiskCode)) {
		body["RiskCode"] = request.RiskCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInspectionThreshold"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInspectionThresholdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInspectionThreshold(request *DescribeInspectionThresholdRequest) (_result *DescribeInspectionThresholdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInspectionThresholdResponse{}
	_body, _err := client.DescribeInspectionThresholdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInspectionWhitelistsWithOptions(request *DescribeInspectionWhitelistsRequest, runtime *util.RuntimeOptions) (_result *DescribeInspectionWhitelistsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInspectionWhitelists"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInspectionWhitelistsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInspectionWhitelists(request *DescribeInspectionWhitelistsRequest) (_result *DescribeInspectionWhitelistsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInspectionWhitelistsResponse{}
	_body, _err := client.DescribeInspectionWhitelistsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInvocationResultsWithOptions(request *DescribeInvocationResultsRequest, runtime *util.RuntimeOptions) (_result *DescribeInvocationResultsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommandId)) {
		query["CommandId"] = request.CommandId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InvokeId)) {
		query["InvokeId"] = request.InvokeId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInvocationResults"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInvocationResultsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInvocationResults(request *DescribeInvocationResultsRequest) (_result *DescribeInvocationResultsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInvocationResultsResponse{}
	_body, _err := client.DescribeInvocationResultsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLastInspectionSummaryWithOptions(request *DescribeLastInspectionSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeLastInspectionSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLastInspectionSummary"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLastInspectionSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLastInspectionSummary(request *DescribeLastInspectionSummaryRequest) (_result *DescribeLastInspectionSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLastInspectionSummaryResponse{}
	_body, _err := client.DescribeLastInspectionSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeModelRelationScenesWithOptions(request *DescribeModelRelationScenesRequest, runtime *util.RuntimeOptions) (_result *DescribeModelRelationScenesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeModelRelationScenes"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeModelRelationScenesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeModelRelationScenes(request *DescribeModelRelationScenesRequest) (_result *DescribeModelRelationScenesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeModelRelationScenesResponse{}
	_body, _err := client.DescribeModelRelationScenesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeProductRiskPieWithOptions(request *DescribeProductRiskPieRequest, runtime *util.RuntimeOptions) (_result *DescribeProductRiskPieResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeProductRiskPie"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProductRiskPieResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeProductRiskPie(request *DescribeProductRiskPieRequest) (_result *DescribeProductRiskPieResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProductRiskPieResponse{}
	_body, _err := client.DescribeProductRiskPieWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReportDataWithOptions(runtime *util.RuntimeOptions) (_result *DescribeReportDataResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeReportData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeReportDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReportData() (_result *DescribeReportDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReportDataResponse{}
	_body, _err := client.DescribeReportDataWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReportEmailConfigsWithOptions(request *DescribeReportEmailConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeReportEmailConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeReportEmailConfigs"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeReportEmailConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReportEmailConfigs(request *DescribeReportEmailConfigsRequest) (_result *DescribeReportEmailConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReportEmailConfigsResponse{}
	_body, _err := client.DescribeReportEmailConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReportSubscriptionsWithOptions(request *DescribeReportSubscriptionsRequest, runtime *util.RuntimeOptions) (_result *DescribeReportSubscriptionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeReportSubscriptions"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeReportSubscriptionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReportSubscriptions(request *DescribeReportSubscriptionsRequest) (_result *DescribeReportSubscriptionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReportSubscriptionsResponse{}
	_body, _err := client.DescribeReportSubscriptionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceMetricWithOptions(request *DescribeResourceMetricRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.FirstLoad)) {
		query["FirstLoad"] = request.FirstLoad
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceMetric"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceMetric(request *DescribeResourceMetricRequest) (_result *DescribeResourceMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceMetricResponse{}
	_body, _err := client.DescribeResourceMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRiskWithOptions(request *DescribeRiskRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Types)) {
		query["Types"] = request.Types
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRisk"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRisk(request *DescribeRiskRequest) (_result *DescribeRiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskResponse{}
	_body, _err := client.DescribeRiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRiskConfigWithOptions(request *DescribeRiskConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRiskConfig(request *DescribeRiskConfigRequest) (_result *DescribeRiskConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskConfigResponse{}
	_body, _err := client.DescribeRiskConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRiskEventDetailsWithOptions(request *DescribeRiskEventDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskEventDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskEventDetails"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskEventDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRiskEventDetails(request *DescribeRiskEventDetailsRequest) (_result *DescribeRiskEventDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskEventDetailsResponse{}
	_body, _err := client.DescribeRiskEventDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRiskEventListWithOptions(request *DescribeRiskEventListRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskEventListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskEventList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskEventListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRiskEventList(request *DescribeRiskEventListRequest) (_result *DescribeRiskEventListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskEventListResponse{}
	_body, _err := client.DescribeRiskEventListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRiskEventTopologyWithOptions(request *DescribeRiskEventTopologyRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskEventTopologyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskEventTopology"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskEventTopologyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRiskEventTopology(request *DescribeRiskEventTopologyRequest) (_result *DescribeRiskEventTopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskEventTopologyResponse{}
	_body, _err := client.DescribeRiskEventTopologyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRiskResultSeveritySummaryWithOptions(request *DescribeRiskResultSeveritySummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskResultSeveritySummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContinuousDays)) {
		body["ContinuousDays"] = request.ContinuousDays
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskResultSeveritySummary"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskResultSeveritySummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRiskResultSeveritySummary(request *DescribeRiskResultSeveritySummaryRequest) (_result *DescribeRiskResultSeveritySummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskResultSeveritySummaryResponse{}
	_body, _err := client.DescribeRiskResultSeveritySummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRiskResultStatisticalWithOptions(request *DescribeRiskResultStatisticalRequest, runtime *util.RuntimeOptions) (_result *DescribeRiskResultStatisticalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContinuousDays)) {
		body["ContinuousDays"] = request.ContinuousDays
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRiskResultStatistical"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRiskResultStatisticalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRiskResultStatistical(request *DescribeRiskResultStatisticalRequest) (_result *DescribeRiskResultStatisticalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRiskResultStatisticalResponse{}
	_body, _err := client.DescribeRiskResultStatisticalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSceneDetailWithOptions(request *DescribeSceneDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeSceneDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		body["SceneId"] = request.SceneId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSceneDetail"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSceneDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSceneDetail(request *DescribeSceneDetailRequest) (_result *DescribeSceneDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSceneDetailResponse{}
	_body, _err := client.DescribeSceneDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSceneModelByTypeWithOptions(request *DescribeSceneModelByTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeSceneModelByTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelType)) {
		body["ModelType"] = request.ModelType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSceneModelByType"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSceneModelByTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSceneModelByType(request *DescribeSceneModelByTypeRequest) (_result *DescribeSceneModelByTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSceneModelByTypeResponse{}
	_body, _err := client.DescribeSceneModelByTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSceneModelDetailWithOptions(request *DescribeSceneModelDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeSceneModelDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSceneModelDetail"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSceneModelDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSceneModelDetail(request *DescribeSceneModelDetailRequest) (_result *DescribeSceneModelDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSceneModelDetailResponse{}
	_body, _err := client.DescribeSceneModelDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSceneModelVersionHistoryWithOptions(request *DescribeSceneModelVersionHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeSceneModelVersionHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSceneModelVersionHistory"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSceneModelVersionHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSceneModelVersionHistory(request *DescribeSceneModelVersionHistoryRequest) (_result *DescribeSceneModelVersionHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSceneModelVersionHistoryResponse{}
	_body, _err := client.DescribeSceneModelVersionHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSceneModelsWithOptions(request *DescribeSceneModelsRequest, runtime *util.RuntimeOptions) (_result *DescribeSceneModelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyStatus)) {
		body["ApplyStatus"] = request.ApplyStatus
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		body["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.ModelType)) {
		body["ModelType"] = request.ModelType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSceneModels"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSceneModelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSceneModels(request *DescribeSceneModelsRequest) (_result *DescribeSceneModelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSceneModelsResponse{}
	_body, _err := client.DescribeSceneModelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSceneSystemModelWithOptions(request *DescribeSceneSystemModelRequest, runtime *util.RuntimeOptions) (_result *DescribeSceneSystemModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		body["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.ModelStatus)) {
		body["ModelStatus"] = request.ModelStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ModelType)) {
		body["ModelType"] = request.ModelType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TypeId)) {
		body["TypeId"] = request.TypeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSceneSystemModel"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSceneSystemModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSceneSystemModel(request *DescribeSceneSystemModelRequest) (_result *DescribeSceneSystemModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSceneSystemModelResponse{}
	_body, _err := client.DescribeSceneSystemModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScenesWithOptions(request *DescribeScenesRequest, runtime *util.RuntimeOptions) (_result *DescribeScenesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.FlowName)) {
		body["FlowName"] = request.FlowName
	}

	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SceneName)) {
		body["SceneName"] = request.SceneName
	}

	if !tea.BoolValue(util.IsUnset(request.SceneStatus)) {
		body["SceneStatus"] = request.SceneStatus
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScenes"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScenesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScenes(request *DescribeScenesRequest) (_result *DescribeScenesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScenesResponse{}
	_body, _err := client.DescribeScenesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStatisticalDataByProductWithOptions(request *DescribeStatisticalDataByProductRequest, runtime *util.RuntimeOptions) (_result *DescribeStatisticalDataByProductResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStatisticalDataByProduct"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStatisticalDataByProductResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStatisticalDataByProduct(request *DescribeStatisticalDataByProductRequest) (_result *DescribeStatisticalDataByProductResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStatisticalDataByProductResponse{}
	_body, _err := client.DescribeStatisticalDataByProductWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeStatisticalDataByRiskCodeWithOptions(request *DescribeStatisticalDataByRiskCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeStatisticalDataByRiskCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStatisticalDataByRiskCode"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeStatisticalDataByRiskCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeStatisticalDataByRiskCode(request *DescribeStatisticalDataByRiskCodeRequest) (_result *DescribeStatisticalDataByRiskCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStatisticalDataByRiskCodeResponse{}
	_body, _err := client.DescribeStatisticalDataByRiskCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeWhitelistResourcesWithOptions(request *DescribeWhitelistResourcesRequest, runtime *util.RuntimeOptions) (_result *DescribeWhitelistResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeWhitelistResources"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeWhitelistResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeWhitelistResources(request *DescribeWhitelistResourcesRequest) (_result *DescribeWhitelistResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeWhitelistResourcesResponse{}
	_body, _err := client.DescribeWhitelistResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EndScriptListWithOptions(request *EndScriptListRequest, runtime *util.RuntimeOptions) (_result *EndScriptListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EndScriptList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EndScriptListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EndScriptList(request *EndScriptListRequest) (_result *EndScriptListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EndScriptListResponse{}
	_body, _err := client.EndScriptListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) FeedbackAlertAlgorithmWithOptions(request *FeedbackAlertAlgorithmRequest, runtime *util.RuntimeOptions) (_result *FeedbackAlertAlgorithmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.AlgorithmAccurateDescribe)) {
		query["AlgorithmAccurateDescribe"] = request.AlgorithmAccurateDescribe
	}

	if !tea.BoolValue(util.IsUnset(request.AlgorithmAccurateState)) {
		query["AlgorithmAccurateState"] = request.AlgorithmAccurateState
	}

	if !tea.BoolValue(util.IsUnset(request.FeedbackType)) {
		query["FeedbackType"] = request.FeedbackType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("FeedbackAlertAlgorithm"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FeedbackAlertAlgorithmResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) FeedbackAlertAlgorithm(request *FeedbackAlertAlgorithmRequest) (_result *FeedbackAlertAlgorithmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FeedbackAlertAlgorithmResponse{}
	_body, _err := client.FeedbackAlertAlgorithmWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAiopsEventListWithOptions(request *GetAiopsEventListRequest, runtime *util.RuntimeOptions) (_result *GetAiopsEventListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupName)) {
		query["BusinessGroupName"] = request.BusinessGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.EventUniqueId)) {
		query["EventUniqueId"] = request.EventUniqueId
	}

	if !tea.BoolValue(util.IsUnset(request.FeedbackStatus)) {
		query["FeedbackStatus"] = request.FeedbackStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PredictionState)) {
		query["PredictionState"] = request.PredictionState
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		query["Severity"] = request.Severity
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAiopsEventList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAiopsEventListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAiopsEventList(request *GetAiopsEventListRequest) (_result *GetAiopsEventListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAiopsEventListResponse{}
	_body, _err := client.GetAiopsEventListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAiopsEventNewListWithOptions(request *GetAiopsEventNewListRequest, runtime *util.RuntimeOptions) (_result *GetAiopsEventNewListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAiopsEventNewList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAiopsEventNewListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAiopsEventNewList(request *GetAiopsEventNewListRequest) (_result *GetAiopsEventNewListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAiopsEventNewListResponse{}
	_body, _err := client.GetAiopsEventNewListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlertDetailTrendDataWithOptions(request *GetAlertDetailTrendDataRequest, runtime *util.RuntimeOptions) (_result *GetAlertDetailTrendDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AbnormalId)) {
		query["AbnormalId"] = request.AbnormalId
	}

	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlertDetailTrendData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlertDetailTrendDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlertDetailTrendData(request *GetAlertDetailTrendDataRequest) (_result *GetAlertDetailTrendDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlertDetailTrendDataResponse{}
	_body, _err := client.GetAlertDetailTrendDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlertListWithOptions(request *GetAlertListRequest, runtime *util.RuntimeOptions) (_result *GetAlertListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlertList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlertListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlertList(request *GetAlertListRequest) (_result *GetAlertListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlertListResponse{}
	_body, _err := client.GetAlertListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlertTrentWithOptions(request *GetAlertTrentRequest, runtime *util.RuntimeOptions) (_result *GetAlertTrentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlertTrent"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlertTrentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlertTrent(request *GetAlertTrentRequest) (_result *GetAlertTrentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlertTrentResponse{}
	_body, _err := client.GetAlertTrentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlgorithmWithOptions(request *GetAlgorithmRequest, runtime *util.RuntimeOptions) (_result *GetAlgorithmResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExpandInformation)) {
		query["ExpandInformation"] = request.ExpandInformation
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlgorithm"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlgorithmResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlgorithm(request *GetAlgorithmRequest) (_result *GetAlgorithmResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlgorithmResponse{}
	_body, _err := client.GetAlgorithmWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlgorithmConfigWithOptions(request *GetAlgorithmConfigRequest, runtime *util.RuntimeOptions) (_result *GetAlgorithmConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlgorithmTypeCode)) {
		query["AlgorithmTypeCode"] = request.AlgorithmTypeCode
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlgorithmConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlgorithmConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlgorithmConfig(request *GetAlgorithmConfigRequest) (_result *GetAlgorithmConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlgorithmConfigResponse{}
	_body, _err := client.GetAlgorithmConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlgorithmDataWithOptions(request *GetAlgorithmDataRequest, runtime *util.RuntimeOptions) (_result *GetAlgorithmDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlgorithmData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlgorithmDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlgorithmData(request *GetAlgorithmDataRequest) (_result *GetAlgorithmDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlgorithmDataResponse{}
	_body, _err := client.GetAlgorithmDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlgorithmDetailsWithOptions(request *GetAlgorithmDetailsRequest, runtime *util.RuntimeOptions) (_result *GetAlgorithmDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlgorithmDetails"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlgorithmDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlgorithmDetails(request *GetAlgorithmDetailsRequest) (_result *GetAlgorithmDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlgorithmDetailsResponse{}
	_body, _err := client.GetAlgorithmDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlgorithmForecastDataWithOptions(request *GetAlgorithmForecastDataRequest, runtime *util.RuntimeOptions) (_result *GetAlgorithmForecastDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlgorithmForecastData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlgorithmForecastDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlgorithmForecastData(request *GetAlgorithmForecastDataRequest) (_result *GetAlgorithmForecastDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlgorithmForecastDataResponse{}
	_body, _err := client.GetAlgorithmForecastDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlgorithmForecastDetailsWithOptions(request *GetAlgorithmForecastDetailsRequest, runtime *util.RuntimeOptions) (_result *GetAlgorithmForecastDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlgorithmForecastDetails"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlgorithmForecastDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlgorithmForecastDetails(request *GetAlgorithmForecastDetailsRequest) (_result *GetAlgorithmForecastDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlgorithmForecastDetailsResponse{}
	_body, _err := client.GetAlgorithmForecastDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAlgorithmListWithOptions(request *GetAlgorithmListRequest, runtime *util.RuntimeOptions) (_result *GetAlgorithmListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAlgorithmList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAlgorithmListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAlgorithmList(request *GetAlgorithmListRequest) (_result *GetAlgorithmListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAlgorithmListResponse{}
	_body, _err := client.GetAlgorithmListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAllAlgorithmConfigWithOptions(request *GetAllAlgorithmConfigRequest, runtime *util.RuntimeOptions) (_result *GetAllAlgorithmConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAllAlgorithmConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAllAlgorithmConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAllAlgorithmConfig(request *GetAllAlgorithmConfigRequest) (_result *GetAllAlgorithmConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAllAlgorithmConfigResponse{}
	_body, _err := client.GetAllAlgorithmConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAllTagResourceNumListWithOptions(request *GetAllTagResourceNumListRequest, runtime *util.RuntimeOptions) (_result *GetAllTagResourceNumListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAllTagResourceNumList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAllTagResourceNumListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAllTagResourceNumList(request *GetAllTagResourceNumListRequest) (_result *GetAllTagResourceNumListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAllTagResourceNumListResponse{}
	_body, _err := client.GetAllTagResourceNumListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAnalysisProcessWithOptions(request *GetAnalysisProcessRequest, runtime *util.RuntimeOptions) (_result *GetAnalysisProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAnalysisProcess"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAnalysisProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAnalysisProcess(request *GetAnalysisProcessRequest) (_result *GetAnalysisProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAnalysisProcessResponse{}
	_body, _err := client.GetAnalysisProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAuthorizationWithOptions(request *GetAuthorizationRequest, runtime *util.RuntimeOptions) (_result *GetAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAuthorization"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAuthorization(request *GetAuthorizationRequest) (_result *GetAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAuthorizationResponse{}
	_body, _err := client.GetAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAvgRepairTimeWithOptions(request *GetAvgRepairTimeRequest, runtime *util.RuntimeOptions) (_result *GetAvgRepairTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAvgRepairTime"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAvgRepairTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAvgRepairTime(request *GetAvgRepairTimeRequest) (_result *GetAvgRepairTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAvgRepairTimeResponse{}
	_body, _err := client.GetAvgRepairTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBackScriptListWithOptions(request *GetBackScriptListRequest, runtime *util.RuntimeOptions) (_result *GetBackScriptListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBackScriptList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBackScriptListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBackScriptList(request *GetBackScriptListRequest) (_result *GetBackScriptListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBackScriptListResponse{}
	_body, _err := client.GetBackScriptListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessGroupWithOptions(request *GetBusinessGroupRequest, runtime *util.RuntimeOptions) (_result *GetBusinessGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessGroup(request *GetBusinessGroupRequest) (_result *GetBusinessGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessGroupResponse{}
	_body, _err := client.GetBusinessGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessGroupAllWithOptions(request *GetBusinessGroupAllRequest, runtime *util.RuntimeOptions) (_result *GetBusinessGroupAllResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessGroupName)) {
		query["BusinessGroupName"] = request.BusinessGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessGroupAll"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessGroupAllResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessGroupAll(request *GetBusinessGroupAllRequest) (_result *GetBusinessGroupAllResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessGroupAllResponse{}
	_body, _err := client.GetBusinessGroupAllWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessGroupIndexWithOptions(request *GetBusinessGroupIndexRequest, runtime *util.RuntimeOptions) (_result *GetBusinessGroupIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessGroupIndex"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessGroupIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessGroupIndex(request *GetBusinessGroupIndexRequest) (_result *GetBusinessGroupIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessGroupIndexResponse{}
	_body, _err := client.GetBusinessGroupIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessGroupInfoWithOptions(request *GetBusinessGroupInfoRequest, runtime *util.RuntimeOptions) (_result *GetBusinessGroupInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessGroupInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessGroupInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessGroupInfo(request *GetBusinessGroupInfoRequest) (_result *GetBusinessGroupInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessGroupInfoResponse{}
	_body, _err := client.GetBusinessGroupInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessGroupOverviewListWithOptions(request *GetBusinessGroupOverviewListRequest, runtime *util.RuntimeOptions) (_result *GetBusinessGroupOverviewListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessGroupOverviewList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessGroupOverviewListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessGroupOverviewList(request *GetBusinessGroupOverviewListRequest) (_result *GetBusinessGroupOverviewListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessGroupOverviewListResponse{}
	_body, _err := client.GetBusinessGroupOverviewListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessLogAlertDetailWithOptions(request *GetBusinessLogAlertDetailRequest, runtime *util.RuntimeOptions) (_result *GetBusinessLogAlertDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessLogAlertDetail"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessLogAlertDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessLogAlertDetail(request *GetBusinessLogAlertDetailRequest) (_result *GetBusinessLogAlertDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessLogAlertDetailResponse{}
	_body, _err := client.GetBusinessLogAlertDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessLogAlertListWithOptions(request *GetBusinessLogAlertListRequest, runtime *util.RuntimeOptions) (_result *GetBusinessLogAlertListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessLogAlertList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessLogAlertListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessLogAlertList(request *GetBusinessLogAlertListRequest) (_result *GetBusinessLogAlertListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessLogAlertListResponse{}
	_body, _err := client.GetBusinessLogAlertListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessLogAlertTopNWithOptions(request *GetBusinessLogAlertTopNRequest, runtime *util.RuntimeOptions) (_result *GetBusinessLogAlertTopNResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertType)) {
		query["AlertType"] = request.AlertType
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.TopNum)) {
		query["TopNum"] = request.TopNum
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessLogAlertTopN"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessLogAlertTopNResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessLogAlertTopN(request *GetBusinessLogAlertTopNRequest) (_result *GetBusinessLogAlertTopNResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessLogAlertTopNResponse{}
	_body, _err := client.GetBusinessLogAlertTopNWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessMetricAlertDetailListWithOptions(request *GetBusinessMetricAlertDetailListRequest, runtime *util.RuntimeOptions) (_result *GetBusinessMetricAlertDetailListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessMetricAlertDetailList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessMetricAlertDetailListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessMetricAlertDetailList(request *GetBusinessMetricAlertDetailListRequest) (_result *GetBusinessMetricAlertDetailListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessMetricAlertDetailListResponse{}
	_body, _err := client.GetBusinessMetricAlertDetailListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessMetricAlertListWithOptions(request *GetBusinessMetricAlertListRequest, runtime *util.RuntimeOptions) (_result *GetBusinessMetricAlertListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessMetricAlertList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessMetricAlertListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessMetricAlertList(request *GetBusinessMetricAlertListRequest) (_result *GetBusinessMetricAlertListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessMetricAlertListResponse{}
	_body, _err := client.GetBusinessMetricAlertListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessMetricAlertTopNWithOptions(request *GetBusinessMetricAlertTopNRequest, runtime *util.RuntimeOptions) (_result *GetBusinessMetricAlertTopNResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertType)) {
		query["AlertType"] = request.AlertType
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.TopNum)) {
		query["TopNum"] = request.TopNum
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessMetricAlertTopN"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessMetricAlertTopNResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessMetricAlertTopN(request *GetBusinessMetricAlertTopNRequest) (_result *GetBusinessMetricAlertTopNResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessMetricAlertTopNResponse{}
	_body, _err := client.GetBusinessMetricAlertTopNWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessMetricAllListWithOptions(request *GetBusinessMetricAllListRequest, runtime *util.RuntimeOptions) (_result *GetBusinessMetricAllListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessMetricAllList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessMetricAllListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessMetricAllList(request *GetBusinessMetricAllListRequest) (_result *GetBusinessMetricAllListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessMetricAllListResponse{}
	_body, _err := client.GetBusinessMetricAllListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessMetricForecastListWithOptions(request *GetBusinessMetricForecastListRequest, runtime *util.RuntimeOptions) (_result *GetBusinessMetricForecastListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessMetricForecastList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessMetricForecastListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessMetricForecastList(request *GetBusinessMetricForecastListRequest) (_result *GetBusinessMetricForecastListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessMetricForecastListResponse{}
	_body, _err := client.GetBusinessMetricForecastListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessMetricResourceByMetricIdWithOptions(request *GetBusinessMetricResourceByMetricIdRequest, runtime *util.RuntimeOptions) (_result *GetBusinessMetricResourceByMetricIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessMetricResourceByMetricId"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessMetricResourceByMetricIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessMetricResourceByMetricId(request *GetBusinessMetricResourceByMetricIdRequest) (_result *GetBusinessMetricResourceByMetricIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessMetricResourceByMetricIdResponse{}
	_body, _err := client.GetBusinessMetricResourceByMetricIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetBusinessMetricSceneListWithOptions(request *GetBusinessMetricSceneListRequest, runtime *util.RuntimeOptions) (_result *GetBusinessMetricSceneListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBusinessMetricSceneList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBusinessMetricSceneListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetBusinessMetricSceneList(request *GetBusinessMetricSceneListRequest) (_result *GetBusinessMetricSceneListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBusinessMetricSceneListResponse{}
	_body, _err := client.GetBusinessMetricSceneListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCidInfoWithOptions(request *GetCidInfoRequest, runtime *util.RuntimeOptions) (_result *GetCidInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCidInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCidInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCidInfo(request *GetCidInfoRequest) (_result *GetCidInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCidInfoResponse{}
	_body, _err := client.GetCidInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCloudAllResourceListWithOptions(request *GetCloudAllResourceListRequest, runtime *util.RuntimeOptions) (_result *GetCloudAllResourceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCloudAllResourceList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCloudAllResourceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCloudAllResourceList(request *GetCloudAllResourceListRequest) (_result *GetCloudAllResourceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCloudAllResourceListResponse{}
	_body, _err := client.GetCloudAllResourceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCloudResourceWithOptions(request *GetCloudResourceRequest, runtime *util.RuntimeOptions) (_result *GetCloudResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CloudTypeName)) {
		query["CloudTypeName"] = request.CloudTypeName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCloudResource"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCloudResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCloudResource(request *GetCloudResourceRequest) (_result *GetCloudResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCloudResourceResponse{}
	_body, _err := client.GetCloudResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCloudResourceListWithOptions(request *GetCloudResourceListRequest, runtime *util.RuntimeOptions) (_result *GetCloudResourceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.CloudRegionId)) {
		query["CloudRegionId"] = request.CloudRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.IsOptional)) {
		query["IsOptional"] = request.IsOptional
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIp)) {
		query["PrivateIp"] = request.PrivateIp
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseStatus)) {
		query["ReleaseStatus"] = request.ReleaseStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TagName)) {
		query["TagName"] = request.TagName
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCloudResourceList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCloudResourceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCloudResourceList(request *GetCloudResourceListRequest) (_result *GetCloudResourceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCloudResourceListResponse{}
	_body, _err := client.GetCloudResourceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetConnectInstancesWithOptions(request *GetConnectInstancesRequest, runtime *util.RuntimeOptions) (_result *GetConnectInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetConnectInstances"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetConnectInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetConnectInstances(request *GetConnectInstancesRequest) (_result *GetConnectInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetConnectInstancesResponse{}
	_body, _err := client.GetConnectInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataSourceDetailWithOptions(request *GetDataSourceDetailRequest, runtime *util.RuntimeOptions) (_result *GetDataSourceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataSourceDetail"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataSourceDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataSourceDetail(request *GetDataSourceDetailRequest) (_result *GetDataSourceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataSourceDetailResponse{}
	_body, _err := client.GetDataSourceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataSourceListWithOptions(request *GetDataSourceListRequest, runtime *util.RuntimeOptions) (_result *GetDataSourceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceName)) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataSourceList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataSourceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataSourceList(request *GetDataSourceListRequest) (_result *GetDataSourceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataSourceListResponse{}
	_body, _err := client.GetDataSourceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataSourceTargetParamListWithOptions(request *GetDataSourceTargetParamListRequest, runtime *util.RuntimeOptions) (_result *GetDataSourceTargetParamListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataSourceTargetParamList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataSourceTargetParamListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataSourceTargetParamList(request *GetDataSourceTargetParamListRequest) (_result *GetDataSourceTargetParamListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataSourceTargetParamListResponse{}
	_body, _err := client.GetDataSourceTargetParamListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDataVolumeWithOptions(request *GetDataVolumeRequest, runtime *util.RuntimeOptions) (_result *GetDataVolumeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDataVolume"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDataVolumeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDataVolume(request *GetDataVolumeRequest) (_result *GetDataVolumeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDataVolumeResponse{}
	_body, _err := client.GetDataVolumeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDiagInfoWithOptions(request *GetDiagInfoRequest, runtime *util.RuntimeOptions) (_result *GetDiagInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.DiagnosticId)) {
		query["DiagnosticId"] = request.DiagnosticId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDiagInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDiagInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDiagInfo(request *GetDiagInfoRequest) (_result *GetDiagInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDiagInfoResponse{}
	_body, _err := client.GetDiagInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDomainConfigWithOptions(request *GetDomainConfigRequest, runtime *util.RuntimeOptions) (_result *GetDomainConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductId)) {
		query["ProductId"] = request.ProductId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDomainConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDomainConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDomainConfig(request *GetDomainConfigRequest) (_result *GetDomainConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDomainConfigResponse{}
	_body, _err := client.GetDomainConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventAbNormalDetailWithOptions(request *GetEventAbNormalDetailRequest, runtime *util.RuntimeOptions) (_result *GetEventAbNormalDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventAbNormalDetail"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventAbNormalDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventAbNormalDetail(request *GetEventAbNormalDetailRequest) (_result *GetEventAbNormalDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventAbNormalDetailResponse{}
	_body, _err := client.GetEventAbNormalDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventAbNormalDetailTrendDataWithOptions(request *GetEventAbNormalDetailTrendDataRequest, runtime *util.RuntimeOptions) (_result *GetEventAbNormalDetailTrendDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventAbNormalDetailTrendData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventAbNormalDetailTrendDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventAbNormalDetailTrendData(request *GetEventAbNormalDetailTrendDataRequest) (_result *GetEventAbNormalDetailTrendDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventAbNormalDetailTrendDataResponse{}
	_body, _err := client.GetEventAbNormalDetailTrendDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventAbNormalListWithOptions(request *GetEventAbNormalListRequest, runtime *util.RuntimeOptions) (_result *GetEventAbNormalListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventAbNormalList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventAbNormalListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventAbNormalList(request *GetEventAbNormalListRequest) (_result *GetEventAbNormalListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventAbNormalListResponse{}
	_body, _err := client.GetEventAbNormalListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventBusinessMetricListWithOptions(request *GetEventBusinessMetricListRequest, runtime *util.RuntimeOptions) (_result *GetEventBusinessMetricListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventBusinessMetricList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventBusinessMetricListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventBusinessMetricList(request *GetEventBusinessMetricListRequest) (_result *GetEventBusinessMetricListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventBusinessMetricListResponse{}
	_body, _err := client.GetEventBusinessMetricListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventDetailWithOptions(request *GetEventDetailRequest, runtime *util.RuntimeOptions) (_result *GetEventDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventDetail"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventDetail(request *GetEventDetailRequest) (_result *GetEventDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventDetailResponse{}
	_body, _err := client.GetEventDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventRootCauseWithOptions(request *GetEventRootCauseRequest, runtime *util.RuntimeOptions) (_result *GetEventRootCauseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventRootCause"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventRootCauseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventRootCause(request *GetEventRootCauseRequest) (_result *GetEventRootCauseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventRootCauseResponse{}
	_body, _err := client.GetEventRootCauseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventSequentialTrentWithOptions(request *GetEventSequentialTrentRequest, runtime *util.RuntimeOptions) (_result *GetEventSequentialTrentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventSequentialTrent"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventSequentialTrentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventSequentialTrent(request *GetEventSequentialTrentRequest) (_result *GetEventSequentialTrentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventSequentialTrentResponse{}
	_body, _err := client.GetEventSequentialTrentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventStatisticsWithOptions(request *GetEventStatisticsRequest, runtime *util.RuntimeOptions) (_result *GetEventStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventStatistics"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventStatistics(request *GetEventStatisticsRequest) (_result *GetEventStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventStatisticsResponse{}
	_body, _err := client.GetEventStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventTrentWithOptions(request *GetEventTrentRequest, runtime *util.RuntimeOptions) (_result *GetEventTrentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GranularityType)) {
		query["GranularityType"] = request.GranularityType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TimeType)) {
		query["TimeType"] = request.TimeType
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventTrent"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventTrentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventTrent(request *GetEventTrentRequest) (_result *GetEventTrentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventTrentResponse{}
	_body, _err := client.GetEventTrentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventTypeWithOptions(request *GetEventTypeRequest, runtime *util.RuntimeOptions) (_result *GetEventTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventType"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventType(request *GetEventTypeRequest) (_result *GetEventTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventTypeResponse{}
	_body, _err := client.GetEventTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetExceptionsWithOptions(request *GetExceptionsRequest, runtime *util.RuntimeOptions) (_result *GetExceptionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetExceptions"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetExceptionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetExceptions(request *GetExceptionsRequest) (_result *GetExceptionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetExceptionsResponse{}
	_body, _err := client.GetExceptionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetExtendWithOptions(request *GetExtendRequest, runtime *util.RuntimeOptions) (_result *GetExtendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetExtend"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("none"),
	}
	_result = &GetExtendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetExtend(request *GetExtendRequest) (_result *GetExtendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetExtendResponse{}
	_body, _err := client.GetExtendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetForecastBusinessMetricWithOptions(request *GetForecastBusinessMetricRequest, runtime *util.RuntimeOptions) (_result *GetForecastBusinessMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetForecastBusinessMetric"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetForecastBusinessMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetForecastBusinessMetric(request *GetForecastBusinessMetricRequest) (_result *GetForecastBusinessMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetForecastBusinessMetricResponse{}
	_body, _err := client.GetForecastBusinessMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetFunctionValidInfoWithOptions(request *GetFunctionValidInfoRequest, runtime *util.RuntimeOptions) (_result *GetFunctionValidInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FunctionName)) {
		body["FunctionName"] = request.FunctionName
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.RegionCode)) {
		body["RegionCode"] = request.RegionCode
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		body["ServiceName"] = request.ServiceName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFunctionValidInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFunctionValidInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetFunctionValidInfo(request *GetFunctionValidInfoRequest) (_result *GetFunctionValidInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFunctionValidInfoResponse{}
	_body, _err := client.GetFunctionValidInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetGroupByDimensionDataWithOptions(request *GetGroupByDimensionDataRequest, runtime *util.RuntimeOptions) (_result *GetGroupByDimensionDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.Flag)) {
		query["Flag"] = request.Flag
	}

	if !tea.BoolValue(util.IsUnset(request.GroupBy)) {
		query["GroupBy"] = request.GroupBy
	}

	if !tea.BoolValue(util.IsUnset(request.MetricId)) {
		query["MetricId"] = request.MetricId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetGroupByDimensionData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetGroupByDimensionDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetGroupByDimensionData(request *GetGroupByDimensionDataRequest) (_result *GetGroupByDimensionDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetGroupByDimensionDataResponse{}
	_body, _err := client.GetGroupByDimensionDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetGroupResourceNumWithOptions(request *GetGroupResourceNumRequest, runtime *util.RuntimeOptions) (_result *GetGroupResourceNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetGroupResourceNum"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetGroupResourceNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetGroupResourceNum(request *GetGroupResourceNumRequest) (_result *GetGroupResourceNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetGroupResourceNumResponse{}
	_body, _err := client.GetGroupResourceNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetGroupTopologyTagWithOptions(request *GetGroupTopologyTagRequest, runtime *util.RuntimeOptions) (_result *GetGroupTopologyTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetGroupTopologyTag"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetGroupTopologyTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetGroupTopologyTag(request *GetGroupTopologyTagRequest) (_result *GetGroupTopologyTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetGroupTopologyTagResponse{}
	_body, _err := client.GetGroupTopologyTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetIncidentAllWithOptions(request *GetIncidentAllRequest, runtime *util.RuntimeOptions) (_result *GetIncidentAllResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetIncidentAll"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetIncidentAllResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetIncidentAll(request *GetIncidentAllRequest) (_result *GetIncidentAllResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetIncidentAllResponse{}
	_body, _err := client.GetIncidentAllWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetIndexDialysisArrayWithOptions(request *GetIndexDialysisArrayRequest, runtime *util.RuntimeOptions) (_result *GetIndexDialysisArrayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.CloudResourceId)) {
		query["CloudResourceId"] = request.CloudResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.CloudTypeName)) {
		query["CloudTypeName"] = request.CloudTypeName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.IndexCode)) {
		query["IndexCode"] = request.IndexCode
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetIndexDialysisArray"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetIndexDialysisArrayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetIndexDialysisArray(request *GetIndexDialysisArrayRequest) (_result *GetIndexDialysisArrayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetIndexDialysisArrayResponse{}
	_body, _err := client.GetIndexDialysisArrayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetIndexDialysisListWithOptions(request *GetIndexDialysisListRequest, runtime *util.RuntimeOptions) (_result *GetIndexDialysisListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.CloudResourceId)) {
		query["CloudResourceId"] = request.CloudResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.CloudTypeName)) {
		query["CloudTypeName"] = request.CloudTypeName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.IndexCode)) {
		query["IndexCode"] = request.IndexCode
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetIndexDialysisList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetIndexDialysisListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetIndexDialysisList(request *GetIndexDialysisListRequest) (_result *GetIndexDialysisListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetIndexDialysisListResponse{}
	_body, _err := client.GetIndexDialysisListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetIndexDialysisListLineWithOptions(request *GetIndexDialysisListLineRequest, runtime *util.RuntimeOptions) (_result *GetIndexDialysisListLineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTime)) {
		query["BeginTime"] = request.BeginTime
	}

	if !tea.BoolValue(util.IsUnset(request.CloudResourceId)) {
		query["CloudResourceId"] = request.CloudResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.CloudTypeName)) {
		query["CloudTypeName"] = request.CloudTypeName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IndexCode)) {
		query["IndexCode"] = request.IndexCode
	}

	if !tea.BoolValue(util.IsUnset(request.MetricExtend)) {
		query["MetricExtend"] = request.MetricExtend
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetIndexDialysisListLine"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetIndexDialysisListLineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetIndexDialysisListLine(request *GetIndexDialysisListLineRequest) (_result *GetIndexDialysisListLineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetIndexDialysisListLineResponse{}
	_body, _err := client.GetIndexDialysisListLineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInspectionReportDownloadUrlWithOptions(request *GetInspectionReportDownloadUrlRequest, runtime *util.RuntimeOptions) (_result *GetInspectionReportDownloadUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DownloadReportListJson)) {
		body["DownloadReportListJson"] = request.DownloadReportListJson
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInspectionReportDownloadUrl"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInspectionReportDownloadUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInspectionReportDownloadUrl(request *GetInspectionReportDownloadUrlRequest) (_result *GetInspectionReportDownloadUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInspectionReportDownloadUrlResponse{}
	_body, _err := client.GetInspectionReportDownloadUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetInstancesNumWithOptions(request *GetInstancesNumRequest, runtime *util.RuntimeOptions) (_result *GetInstancesNumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstancesNum"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstancesNumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetInstancesNum(request *GetInstancesNumRequest) (_result *GetInstancesNumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstancesNumResponse{}
	_body, _err := client.GetInstancesNumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLogSampleWithOptions(request *GetLogSampleRequest, runtime *util.RuntimeOptions) (_result *GetLogSampleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppField)) {
		query["AppField"] = request.AppField
	}

	if !tea.BoolValue(util.IsUnset(request.AppValue)) {
		query["AppValue"] = request.AppValue
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.LogField)) {
		query["LogField"] = request.LogField
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLogSample"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLogSampleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLogSample(request *GetLogSampleRequest) (_result *GetLogSampleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLogSampleResponse{}
	_body, _err := client.GetLogSampleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLogSampleColumnWithOptions(request *GetLogSampleColumnRequest, runtime *util.RuntimeOptions) (_result *GetLogSampleColumnResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceId)) {
		query["DataSourceId"] = request.DataSourceId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLogSampleColumn"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLogSampleColumnResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLogSampleColumn(request *GetLogSampleColumnRequest) (_result *GetLogSampleColumnResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLogSampleColumnResponse{}
	_body, _err := client.GetLogSampleColumnWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMetricEventSequentialTrentWithOptions(request *GetMetricEventSequentialTrentRequest, runtime *util.RuntimeOptions) (_result *GetMetricEventSequentialTrentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMetricEventSequentialTrent"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMetricEventSequentialTrentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMetricEventSequentialTrent(request *GetMetricEventSequentialTrentRequest) (_result *GetMetricEventSequentialTrentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMetricEventSequentialTrentResponse{}
	_body, _err := client.GetMetricEventSequentialTrentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetNewOptimizationItemDataWithOptions(request *GetNewOptimizationItemDataRequest, runtime *util.RuntimeOptions) (_result *GetNewOptimizationItemDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNewOptimizationItemData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNewOptimizationItemDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetNewOptimizationItemData(request *GetNewOptimizationItemDataRequest) (_result *GetNewOptimizationItemDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetNewOptimizationItemDataResponse{}
	_body, _err := client.GetNewOptimizationItemDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPatrolInspectionDetailListWithOptions(request *GetPatrolInspectionDetailListRequest, runtime *util.RuntimeOptions) (_result *GetPatrolInspectionDetailListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPatrolInspectionDetailList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPatrolInspectionDetailListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPatrolInspectionDetailList(request *GetPatrolInspectionDetailListRequest) (_result *GetPatrolInspectionDetailListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPatrolInspectionDetailListResponse{}
	_body, _err := client.GetPatrolInspectionDetailListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPatrolInspectionDetailThrendDataWithOptions(request *GetPatrolInspectionDetailThrendDataRequest, runtime *util.RuntimeOptions) (_result *GetPatrolInspectionDetailThrendDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.RequestContent)) {
		query["RequestContent"] = request.RequestContent
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPatrolInspectionDetailThrendData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPatrolInspectionDetailThrendDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPatrolInspectionDetailThrendData(request *GetPatrolInspectionDetailThrendDataRequest) (_result *GetPatrolInspectionDetailThrendDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPatrolInspectionDetailThrendDataResponse{}
	_body, _err := client.GetPatrolInspectionDetailThrendDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPatrolInspectionItemsListWithOptions(request *GetPatrolInspectionItemsListRequest, runtime *util.RuntimeOptions) (_result *GetPatrolInspectionItemsListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPatrolInspectionItemsList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPatrolInspectionItemsListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPatrolInspectionItemsList(request *GetPatrolInspectionItemsListRequest) (_result *GetPatrolInspectionItemsListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPatrolInspectionItemsListResponse{}
	_body, _err := client.GetPatrolInspectionItemsListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPatrolInspectionListWithOptions(request *GetPatrolInspectionListRequest, runtime *util.RuntimeOptions) (_result *GetPatrolInspectionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPatrolInspectionList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPatrolInspectionListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPatrolInspectionList(request *GetPatrolInspectionListRequest) (_result *GetPatrolInspectionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPatrolInspectionListResponse{}
	_body, _err := client.GetPatrolInspectionListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPatrolInspectionStatusWithOptions(request *GetPatrolInspectionStatusRequest, runtime *util.RuntimeOptions) (_result *GetPatrolInspectionStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPatrolInspectionStatus"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPatrolInspectionStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPatrolInspectionStatus(request *GetPatrolInspectionStatusRequest) (_result *GetPatrolInspectionStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPatrolInspectionStatusResponse{}
	_body, _err := client.GetPatrolInspectionStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetProductInstanceWithOptions(request *GetProductInstanceRequest, runtime *util.RuntimeOptions) (_result *GetProductInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProductInstance"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProductInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetProductInstance(request *GetProductInstanceRequest) (_result *GetProductInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProductInstanceResponse{}
	_body, _err := client.GetProductInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetProductMetricListWithOptions(runtime *util.RuntimeOptions) (_result *GetProductMetricListResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetProductMetricList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProductMetricListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetProductMetricList() (_result *GetProductMetricListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetProductMetricListResponse{}
	_body, _err := client.GetProductMetricListWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRealDataWithOptions(request *GetRealDataRequest, runtime *util.RuntimeOptions) (_result *GetRealDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTimestamp)) {
		query["EndTimestamp"] = request.EndTimestamp
	}

	if !tea.BoolValue(util.IsUnset(request.FlowName)) {
		query["FlowName"] = request.FlowName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTimestamp)) {
		query["StartTimestamp"] = request.StartTimestamp
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRealData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRealDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRealData(request *GetRealDataRequest) (_result *GetRealDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRealDataResponse{}
	_body, _err := client.GetRealDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRegionListWithOptions(runtime *util.RuntimeOptions) (_result *GetRegionListResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetRegionList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRegionListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRegionList() (_result *GetRegionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRegionListResponse{}
	_body, _err := client.GetRegionListWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRepairScriptWithOptions(request *GetRepairScriptRequest, runtime *util.RuntimeOptions) (_result *GetRepairScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRepairScript"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRepairScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRepairScript(request *GetRepairScriptRequest) (_result *GetRepairScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRepairScriptResponse{}
	_body, _err := client.GetRepairScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetResourceListWithOptions(request *GetResourceListRequest, runtime *util.RuntimeOptions) (_result *GetResourceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetResourceList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetResourceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetResourceList(request *GetResourceListRequest) (_result *GetResourceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetResourceListResponse{}
	_body, _err := client.GetResourceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetResourceTagDropListWithOptions(request *GetResourceTagDropListRequest, runtime *util.RuntimeOptions) (_result *GetResourceTagDropListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetResourceTagDropList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetResourceTagDropListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetResourceTagDropList(request *GetResourceTagDropListRequest) (_result *GetResourceTagDropListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetResourceTagDropListResponse{}
	_body, _err := client.GetResourceTagDropListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetResourceTypeListWithOptions(runtime *util.RuntimeOptions) (_result *GetResourceTypeListResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetResourceTypeList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetResourceTypeListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetResourceTypeList() (_result *GetResourceTypeListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetResourceTypeListResponse{}
	_body, _err := client.GetResourceTypeListWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRiskInAllWithOptions(request *GetRiskInAllRequest, runtime *util.RuntimeOptions) (_result *GetRiskInAllResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Screen)) {
		query["Screen"] = request.Screen
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRiskInAll"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRiskInAllResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRiskInAll(request *GetRiskInAllRequest) (_result *GetRiskInAllResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRiskInAllResponse{}
	_body, _err := client.GetRiskInAllWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRiskInspectStatisticsWithOptions(request *GetRiskInspectStatisticsRequest, runtime *util.RuntimeOptions) (_result *GetRiskInspectStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRiskInspectStatistics"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRiskInspectStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRiskInspectStatistics(request *GetRiskInspectStatisticsRequest) (_result *GetRiskInspectStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRiskInspectStatisticsResponse{}
	_body, _err := client.GetRiskInspectStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRiskInspectionTypeListWithOptions(request *GetRiskInspectionTypeListRequest, runtime *util.RuntimeOptions) (_result *GetRiskInspectionTypeListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRiskInspectionTypeList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRiskInspectionTypeListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRiskInspectionTypeList(request *GetRiskInspectionTypeListRequest) (_result *GetRiskInspectionTypeListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRiskInspectionTypeListResponse{}
	_body, _err := client.GetRiskInspectionTypeListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRiskPatrolDetailListWithOptions(request *GetRiskPatrolDetailListRequest, runtime *util.RuntimeOptions) (_result *GetRiskPatrolDetailListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRiskPatrolDetailList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRiskPatrolDetailListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRiskPatrolDetailList(request *GetRiskPatrolDetailListRequest) (_result *GetRiskPatrolDetailListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRiskPatrolDetailListResponse{}
	_body, _err := client.GetRiskPatrolDetailListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRiskPatrolListWithOptions(request *GetRiskPatrolListRequest, runtime *util.RuntimeOptions) (_result *GetRiskPatrolListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupName)) {
		query["BusinessGroupName"] = request.BusinessGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PatrolId)) {
		query["PatrolId"] = request.PatrolId
	}

	if !tea.BoolValue(util.IsUnset(request.RiskPatrolItem)) {
		query["RiskPatrolItem"] = request.RiskPatrolItem
	}

	if !tea.BoolValue(util.IsUnset(request.SeverityLevel)) {
		query["SeverityLevel"] = request.SeverityLevel
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRiskPatrolList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRiskPatrolListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRiskPatrolList(request *GetRiskPatrolListRequest) (_result *GetRiskPatrolListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRiskPatrolListResponse{}
	_body, _err := client.GetRiskPatrolListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRiskPatrolStatisticalTrendsWithOptions(request *GetRiskPatrolStatisticalTrendsRequest, runtime *util.RuntimeOptions) (_result *GetRiskPatrolStatisticalTrendsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRiskPatrolStatisticalTrends"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRiskPatrolStatisticalTrendsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRiskPatrolStatisticalTrends(request *GetRiskPatrolStatisticalTrendsRequest) (_result *GetRiskPatrolStatisticalTrendsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRiskPatrolStatisticalTrendsResponse{}
	_body, _err := client.GetRiskPatrolStatisticalTrendsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRiskPatrolStatisticsWithOptions(request *GetRiskPatrolStatisticsRequest, runtime *util.RuntimeOptions) (_result *GetRiskPatrolStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRiskPatrolStatistics"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRiskPatrolStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRiskPatrolStatistics(request *GetRiskPatrolStatisticsRequest) (_result *GetRiskPatrolStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRiskPatrolStatisticsResponse{}
	_body, _err := client.GetRiskPatrolStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRiskPatrolStatusWithOptions(request *GetRiskPatrolStatusRequest, runtime *util.RuntimeOptions) (_result *GetRiskPatrolStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRiskPatrolStatus"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRiskPatrolStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRiskPatrolStatus(request *GetRiskPatrolStatusRequest) (_result *GetRiskPatrolStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRiskPatrolStatusResponse{}
	_body, _err := client.GetRiskPatrolStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRoleWithOptions(runtime *util.RuntimeOptions) (_result *GetRoleResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetRole"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRole() (_result *GetRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRoleResponse{}
	_body, _err := client.GetRoleWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetRootCauseWithOptions(request *GetRootCauseRequest, runtime *util.RuntimeOptions) (_result *GetRootCauseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RootCauseId)) {
		query["RootCauseId"] = request.RootCauseId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRootCause"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRootCauseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetRootCause(request *GetRootCauseRequest) (_result *GetRootCauseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRootCauseResponse{}
	_body, _err := client.GetRootCauseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetScenarioDetailWithOptions(request *GetScenarioDetailRequest, runtime *util.RuntimeOptions) (_result *GetScenarioDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetScenarioDetail"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetScenarioDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetScenarioDetail(request *GetScenarioDetailRequest) (_result *GetScenarioDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetScenarioDetailResponse{}
	_body, _err := client.GetScenarioDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetScenarioListWithOptions(request *GetScenarioListRequest, runtime *util.RuntimeOptions) (_result *GetScenarioListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioName)) {
		query["ScenarioName"] = request.ScenarioName
	}

	if !tea.BoolValue(util.IsUnset(request.SceneSelectLabel)) {
		query["SceneSelectLabel"] = request.SceneSelectLabel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetScenarioList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetScenarioListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetScenarioList(request *GetScenarioListRequest) (_result *GetScenarioListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetScenarioListResponse{}
	_body, _err := client.GetScenarioListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetScenarioStatisticsListWithOptions(request *GetScenarioStatisticsListRequest, runtime *util.RuntimeOptions) (_result *GetScenarioStatisticsListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ScenarioIds)) {
		query["ScenarioIds"] = request.ScenarioIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetScenarioStatisticsList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetScenarioStatisticsListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetScenarioStatisticsList(request *GetScenarioStatisticsListRequest) (_result *GetScenarioStatisticsListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetScenarioStatisticsListResponse{}
	_body, _err := client.GetScenarioStatisticsListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSceneByIdWithOptions(request *GetSceneByIdRequest, runtime *util.RuntimeOptions) (_result *GetSceneByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSceneById"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSceneByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSceneById(request *GetSceneByIdRequest) (_result *GetSceneByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSceneByIdResponse{}
	_body, _err := client.GetSceneByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSceneDetailsListWithOptions(request *GetSceneDetailsListRequest, runtime *util.RuntimeOptions) (_result *GetSceneDetailsListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSceneDetailsList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSceneDetailsListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSceneDetailsList(request *GetSceneDetailsListRequest) (_result *GetSceneDetailsListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSceneDetailsListResponse{}
	_body, _err := client.GetSceneDetailsListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSceneListWithOptions(request *GetSceneListRequest, runtime *util.RuntimeOptions) (_result *GetSceneListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PageTotal)) {
		query["PageTotal"] = request.PageTotal
	}

	if !tea.BoolValue(util.IsUnset(request.SceneType)) {
		query["SceneType"] = request.SceneType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchName)) {
		query["SearchName"] = request.SearchName
	}

	if !tea.BoolValue(util.IsUnset(request.SearchValue)) {
		query["SearchValue"] = request.SearchValue
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSceneList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSceneListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSceneList(request *GetSceneListRequest) (_result *GetSceneListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSceneListResponse{}
	_body, _err := client.GetSceneListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSceneMetricTableWithOptions(request *GetSceneMetricTableRequest, runtime *util.RuntimeOptions) (_result *GetSceneMetricTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.MetricId)) {
		query["MetricId"] = request.MetricId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSceneMetricTable"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSceneMetricTableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSceneMetricTable(request *GetSceneMetricTableRequest) (_result *GetSceneMetricTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSceneMetricTableResponse{}
	_body, _err := client.GetSceneMetricTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetScriptEventRootCauseWithOptions(request *GetScriptEventRootCauseRequest, runtime *util.RuntimeOptions) (_result *GetScriptEventRootCauseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetScriptEventRootCause"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetScriptEventRootCauseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetScriptEventRootCause(request *GetScriptEventRootCauseRequest) (_result *GetScriptEventRootCauseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetScriptEventRootCauseResponse{}
	_body, _err := client.GetScriptEventRootCauseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSlsLogDataWithOptions(request *GetSlsLogDataRequest, runtime *util.RuntimeOptions) (_result *GetSlsLogDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		query["Code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		query["Url"] = request.Url
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSlsLogData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSlsLogDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSlsLogData(request *GetSlsLogDataRequest) (_result *GetSlsLogDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSlsLogDataResponse{}
	_body, _err := client.GetSlsLogDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSynCloudResourceListWithOptions(request *GetSynCloudResourceListRequest, runtime *util.RuntimeOptions) (_result *GetSynCloudResourceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSynCloudResourceList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSynCloudResourceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSynCloudResourceList(request *GetSynCloudResourceListRequest) (_result *GetSynCloudResourceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSynCloudResourceListResponse{}
	_body, _err := client.GetSynCloudResourceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTagBusinessGroupListWithOptions(request *GetTagBusinessGroupListRequest, runtime *util.RuntimeOptions) (_result *GetTagBusinessGroupListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTagBusinessGroupList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTagBusinessGroupListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTagBusinessGroupList(request *GetTagBusinessGroupListRequest) (_result *GetTagBusinessGroupListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTagBusinessGroupListResponse{}
	_body, _err := client.GetTagBusinessGroupListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTagDropListWithOptions(request *GetTagDropListRequest, runtime *util.RuntimeOptions) (_result *GetTagDropListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTagDropList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTagDropListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTagDropList(request *GetTagDropListRequest) (_result *GetTagDropListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTagDropListResponse{}
	_body, _err := client.GetTagDropListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTargetDimensionDataWithOptions(request *GetTargetDimensionDataRequest, runtime *util.RuntimeOptions) (_result *GetTargetDimensionDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.Flag)) {
		query["Flag"] = request.Flag
	}

	if !tea.BoolValue(util.IsUnset(request.Label)) {
		query["Label"] = request.Label
	}

	if !tea.BoolValue(util.IsUnset(request.LabelValue)) {
		query["LabelValue"] = request.LabelValue
	}

	if !tea.BoolValue(util.IsUnset(request.MetricId)) {
		query["MetricId"] = request.MetricId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTargetDimensionData"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTargetDimensionDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTargetDimensionData(request *GetTargetDimensionDataRequest) (_result *GetTargetDimensionDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTargetDimensionDataResponse{}
	_body, _err := client.GetTargetDimensionDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThresholdListWithOptions(request *GetThresholdListRequest, runtime *util.RuntimeOptions) (_result *GetThresholdListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetThresholdList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetThresholdListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThresholdList(request *GetThresholdListRequest) (_result *GetThresholdListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThresholdListResponse{}
	_body, _err := client.GetThresholdListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetThroughPutWithOptions(request *GetThroughPutRequest, runtime *util.RuntimeOptions) (_result *GetThroughPutResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetThroughPut"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetThroughPutResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetThroughPut(request *GetThroughPutRequest) (_result *GetThroughPutResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetThroughPutResponse{}
	_body, _err := client.GetThroughPutWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTrendSlsReportsWithOptions(request *GetTrendSlsReportsRequest, runtime *util.RuntimeOptions) (_result *GetTrendSlsReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		query["Severity"] = request.Severity
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTrendSlsReports"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTrendSlsReportsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTrendSlsReports(request *GetTrendSlsReportsRequest) (_result *GetTrendSlsReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTrendSlsReportsResponse{}
	_body, _err := client.GetTrendSlsReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserInfoWithOptions(request *GetUserInfoRequest, runtime *util.RuntimeOptions) (_result *GetUserInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserInfo(request *GetUserInfoRequest) (_result *GetUserInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserInfoResponse{}
	_body, _err := client.GetUserInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserLoginInfoWithOptions(request *GetUserLoginInfoRequest, runtime *util.RuntimeOptions) (_result *GetUserLoginInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		query["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.AccountPrincipalName)) {
		query["AccountPrincipalName"] = request.AccountPrincipalName
	}

	if !tea.BoolValue(util.IsUnset(request.AccountType)) {
		query["AccountType"] = request.AccountType
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPk)) {
		query["CurrentPk"] = request.CurrentPk
	}

	if !tea.BoolValue(util.IsUnset(request.MainAccountPk)) {
		query["MainAccountPk"] = request.MainAccountPk
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserLoginInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserLoginInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserLoginInfo(request *GetUserLoginInfoRequest) (_result *GetUserLoginInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserLoginInfoResponse{}
	_body, _err := client.GetUserLoginInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserOrderConfigWithOptions(request *GetUserOrderConfigRequest, runtime *util.RuntimeOptions) (_result *GetUserOrderConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserOrderConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserOrderConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserOrderConfig(request *GetUserOrderConfigRequest) (_result *GetUserOrderConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserOrderConfigResponse{}
	_body, _err := client.GetUserOrderConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) IgnoreAlarmsWithOptions(request *IgnoreAlarmsRequest, runtime *util.RuntimeOptions) (_result *IgnoreAlarmsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmId)) {
		query["AlarmId"] = request.AlarmId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("IgnoreAlarms"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &IgnoreAlarmsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) IgnoreAlarms(request *IgnoreAlarmsRequest) (_result *IgnoreAlarmsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &IgnoreAlarmsResponse{}
	_body, _err := client.IgnoreAlarmsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListApplyAuthorizationWithOptions(request *ListApplyAuthorizationRequest, runtime *util.RuntimeOptions) (_result *ListApplyAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PermissionType)) {
		query["PermissionType"] = request.PermissionType
	}

	if !tea.BoolValue(util.IsUnset(request.SwitchFrontOperaUid)) {
		query["SwitchFrontOperaUid"] = request.SwitchFrontOperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListApplyAuthorization"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListApplyAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListApplyAuthorization(request *ListApplyAuthorizationRequest) (_result *ListApplyAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListApplyAuthorizationResponse{}
	_body, _err := client.ListApplyAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAuthWithOptions(request *ListAuthRequest, runtime *util.RuntimeOptions) (_result *ListAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAuth"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAuthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAuth(request *ListAuthRequest) (_result *ListAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAuthResponse{}
	_body, _err := client.ListAuthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAuthorizedUidWithOptions(runtime *util.RuntimeOptions) (_result *ListAuthorizedUidResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListAuthorizedUid"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAuthorizedUidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAuthorizedUid() (_result *ListAuthorizedUidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAuthorizedUidResponse{}
	_body, _err := client.ListAuthorizedUidWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCausePlanWithOptions(request *ListCausePlanRequest, runtime *util.RuntimeOptions) (_result *ListCausePlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RootCauseId)) {
		query["RootCauseId"] = request.RootCauseId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCausePlan"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCausePlanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCausePlan(request *ListCausePlanRequest) (_result *ListCausePlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCausePlanResponse{}
	_body, _err := client.ListCausePlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListConfirmAuthorizationWithOptions(request *ListConfirmAuthorizationRequest, runtime *util.RuntimeOptions) (_result *ListConfirmAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PermissionType)) {
		query["PermissionType"] = request.PermissionType
	}

	if !tea.BoolValue(util.IsUnset(request.SwitchFrontOperaUid)) {
		query["SwitchFrontOperaUid"] = request.SwitchFrontOperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListConfirmAuthorization"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListConfirmAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListConfirmAuthorization(request *ListConfirmAuthorizationRequest) (_result *ListConfirmAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListConfirmAuthorizationResponse{}
	_body, _err := client.ListConfirmAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEventWithOptions(request *ListEventRequest, runtime *util.RuntimeOptions) (_result *ListEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEvent"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEvent(request *ListEventRequest) (_result *ListEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEventResponse{}
	_body, _err := client.ListEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNotAuthorizedUidWithOptions(runtime *util.RuntimeOptions) (_result *ListNotAuthorizedUidResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListNotAuthorizedUid"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNotAuthorizedUidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNotAuthorizedUid() (_result *ListNotAuthorizedUidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNotAuthorizedUidResponse{}
	_body, _err := client.ListNotAuthorizedUidWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListReportsWithOptions(request *ListReportsRequest, runtime *util.RuntimeOptions) (_result *ListReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListReports"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListReportsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListReports(request *ListReportsRequest) (_result *ListReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListReportsResponse{}
	_body, _err := client.ListReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRootCauseWithOptions(request *ListRootCauseRequest, runtime *util.RuntimeOptions) (_result *ListRootCauseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RootCauseId)) {
		query["RootCauseId"] = request.RootCauseId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListRootCause"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListRootCauseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRootCause(request *ListRootCauseRequest) (_result *ListRootCauseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRootCauseResponse{}
	_body, _err := client.ListRootCauseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSlsReportsWithOptions(request *ListSlsReportsRequest, runtime *util.RuntimeOptions) (_result *ListSlsReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		query["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LogStore)) {
		query["LogStore"] = request.LogStore
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		query["Severity"] = request.Severity
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSlsReports"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSlsReportsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSlsReports(request *ListSlsReportsRequest) (_result *ListSlsReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSlsReportsResponse{}
	_body, _err := client.ListSlsReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutAlertContactWithOptions(request *PutAlertContactRequest, runtime *util.RuntimeOptions) (_result *PutAlertContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Email)) {
		body["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		body["Phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.Webhook)) {
		body["Webhook"] = request.Webhook
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PutAlertContact"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutAlertContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutAlertContact(request *PutAlertContactRequest) (_result *PutAlertContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutAlertContactResponse{}
	_body, _err := client.PutAlertContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutAlertContactGroupWithOptions(request *PutAlertContactGroupRequest, runtime *util.RuntimeOptions) (_result *PutAlertContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertContactGroupJson)) {
		body["AlertContactGroupJson"] = request.AlertContactGroupJson
	}

	if !tea.BoolValue(util.IsUnset(request.ContactIdsJson)) {
		body["ContactIdsJson"] = request.ContactIdsJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PutAlertContactGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutAlertContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutAlertContactGroup(request *PutAlertContactGroupRequest) (_result *PutAlertContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutAlertContactGroupResponse{}
	_body, _err := client.PutAlertContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutAlertContactToGroupWithOptions(request *PutAlertContactToGroupRequest, runtime *util.RuntimeOptions) (_result *PutAlertContactToGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactIdListJson)) {
		body["ContactIdListJson"] = request.ContactIdListJson
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupIdListJson)) {
		body["GroupIdListJson"] = request.GroupIdListJson
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PutAlertContactToGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutAlertContactToGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutAlertContactToGroup(request *PutAlertContactToGroupRequest) (_result *PutAlertContactToGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutAlertContactToGroupResponse{}
	_body, _err := client.PutAlertContactToGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutAlertIgnoreWithOptions(request *PutAlertIgnoreRequest, runtime *util.RuntimeOptions) (_result *PutAlertIgnoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertId)) {
		query["AlertId"] = request.AlertId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutAlertIgnore"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutAlertIgnoreResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutAlertIgnore(request *PutAlertIgnoreRequest) (_result *PutAlertIgnoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutAlertIgnoreResponse{}
	_body, _err := client.PutAlertIgnoreWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutAlertSettingWithOptions(request *PutAlertSettingRequest, runtime *util.RuntimeOptions) (_result *PutAlertSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertSilenceConfig)) {
		query["AlertSilenceConfig"] = request.AlertSilenceConfig
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlarmLevel)) {
		body["AlarmLevel"] = request.AlarmLevel
	}

	if !tea.BoolValue(util.IsUnset(request.AlertName)) {
		body["AlertName"] = request.AlertName
	}

	if !tea.BoolValue(util.IsUnset(request.AlertSettingId)) {
		body["AlertSettingId"] = request.AlertSettingId
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupIdsJson)) {
		body["BusinessGroupIdsJson"] = request.BusinessGroupIdsJson
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroupIdsJson)) {
		body["ContactGroupIdsJson"] = request.ContactGroupIdsJson
	}

	if !tea.BoolValue(util.IsUnset(request.ContactIdsJson)) {
		body["ContactIdsJson"] = request.ContactIdsJson
	}

	if !tea.BoolValue(util.IsUnset(request.CustomerUid)) {
		body["CustomerUid"] = request.CustomerUid
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.SendDingtalkNotice)) {
		body["SendDingtalkNotice"] = request.SendDingtalkNotice
	}

	if !tea.BoolValue(util.IsUnset(request.SendEmailNotice)) {
		body["SendEmailNotice"] = request.SendEmailNotice
	}

	if !tea.BoolValue(util.IsUnset(request.SendSmsNotice)) {
		body["SendSmsNotice"] = request.SendSmsNotice
	}

	if !tea.BoolValue(util.IsUnset(request.StopDuration)) {
		body["StopDuration"] = request.StopDuration
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PutAlertSetting"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutAlertSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutAlertSetting(request *PutAlertSettingRequest) (_result *PutAlertSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutAlertSettingResponse{}
	_body, _err := client.PutAlertSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutAlertSettingListWithOptions(request *PutAlertSettingListRequest, runtime *util.RuntimeOptions) (_result *PutAlertSettingListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertSettingEditRequestListJson)) {
		body["AlertSettingEditRequestListJson"] = request.AlertSettingEditRequestListJson
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroupIdsJson)) {
		body["ContactGroupIdsJson"] = request.ContactGroupIdsJson
	}

	if !tea.BoolValue(util.IsUnset(request.ContactIdsJson)) {
		body["ContactIdsJson"] = request.ContactIdsJson
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PutAlertSettingList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutAlertSettingListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutAlertSettingList(request *PutAlertSettingListRequest) (_result *PutAlertSettingListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutAlertSettingListResponse{}
	_body, _err := client.PutAlertSettingListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutAlertSettingStatusWithOptions(request *PutAlertSettingStatusRequest, runtime *util.RuntimeOptions) (_result *PutAlertSettingStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertSettingId)) {
		body["AlertSettingId"] = request.AlertSettingId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.SettingStatus)) {
		body["SettingStatus"] = request.SettingStatus
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PutAlertSettingStatus"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutAlertSettingStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutAlertSettingStatus(request *PutAlertSettingStatusRequest) (_result *PutAlertSettingStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutAlertSettingStatusResponse{}
	_body, _err := client.PutAlertSettingStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutDataSourceConfigWithOptions(request *PutDataSourceConfigRequest, runtime *util.RuntimeOptions) (_result *PutDataSourceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceDescribe)) {
		query["DataSourceDescribe"] = request.DataSourceDescribe
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceName)) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceParams)) {
		query["DataSourceParams"] = request.DataSourceParams
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceParamsMapping)) {
		query["DataSourceParamsMapping"] = request.DataSourceParamsMapping
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutDataSourceConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutDataSourceConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutDataSourceConfig(request *PutDataSourceConfigRequest) (_result *PutDataSourceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutDataSourceConfigResponse{}
	_body, _err := client.PutDataSourceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutGroupResourceTagWithOptions(request *PutGroupResourceTagRequest, runtime *util.RuntimeOptions) (_result *PutGroupResourceTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutGroupResourceTag"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutGroupResourceTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutGroupResourceTag(request *PutGroupResourceTagRequest) (_result *PutGroupResourceTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutGroupResourceTagResponse{}
	_body, _err := client.PutGroupResourceTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutGroupTopologyTagLogWithOptions(request *PutGroupTopologyTagLogRequest, runtime *util.RuntimeOptions) (_result *PutGroupTopologyTagLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutGroupTopologyTagLog"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutGroupTopologyTagLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutGroupTopologyTagLog(request *PutGroupTopologyTagLogRequest) (_result *PutGroupTopologyTagLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutGroupTopologyTagLogResponse{}
	_body, _err := client.PutGroupTopologyTagLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutReportEmailConfigWithOptions(request *PutReportEmailConfigRequest, runtime *util.RuntimeOptions) (_result *PutReportEmailConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Email)) {
		body["Email"] = request.Email
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PutReportEmailConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutReportEmailConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutReportEmailConfig(request *PutReportEmailConfigRequest) (_result *PutReportEmailConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutReportEmailConfigResponse{}
	_body, _err := client.PutReportEmailConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PutResourceWhitelistWithOptions(request *PutResourceWhitelistRequest, runtime *util.RuntimeOptions) (_result *PutResourceWhitelistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		body["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		body["ResourceId"] = request.ResourceId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PutResourceWhitelist"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutResourceWhitelistResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PutResourceWhitelist(request *PutResourceWhitelistRequest) (_result *PutResourceWhitelistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutResourceWhitelistResponse{}
	_body, _err := client.PutResourceWhitelistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReplaceScriptListWithOptions(request *ReplaceScriptListRequest, runtime *util.RuntimeOptions) (_result *ReplaceScriptListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReplaceScriptList"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReplaceScriptListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReplaceScriptList(request *ReplaceScriptListRequest) (_result *ReplaceScriptListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReplaceScriptListResponse{}
	_body, _err := client.ReplaceScriptListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeSubmitApplyPermissionWithOptions(request *RevokeSubmitApplyPermissionRequest, runtime *util.RuntimeOptions) (_result *RevokeSubmitApplyPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SwitchFrontOperaUid)) {
		query["SwitchFrontOperaUid"] = request.SwitchFrontOperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeSubmitApplyPermission"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokeSubmitApplyPermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeSubmitApplyPermission(request *RevokeSubmitApplyPermissionRequest) (_result *RevokeSubmitApplyPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeSubmitApplyPermissionResponse{}
	_body, _err := client.RevokeSubmitApplyPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunAnalysisProcessWithOptions(request *RunAnalysisProcessRequest, runtime *util.RuntimeOptions) (_result *RunAnalysisProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunAnalysisProcess"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunAnalysisProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunAnalysisProcess(request *RunAnalysisProcessRequest) (_result *RunAnalysisProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunAnalysisProcessResponse{}
	_body, _err := client.RunAnalysisProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunCommandWithOptions(request *RunCommandRequest, runtime *util.RuntimeOptions) (_result *RunCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommandContent)) {
		query["CommandContent"] = request.CommandContent
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunCommand"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunCommand(request *RunCommandRequest) (_result *RunCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunCommandResponse{}
	_body, _err := client.RunCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunForecastAnalyzeWithOptions(request *RunForecastAnalyzeRequest, runtime *util.RuntimeOptions) (_result *RunForecastAnalyzeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunForecastAnalyze"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunForecastAnalyzeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunForecastAnalyze(request *RunForecastAnalyzeRequest) (_result *RunForecastAnalyzeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunForecastAnalyzeResponse{}
	_body, _err := client.RunForecastAnalyzeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunPatrolInspectionWithOptions(request *RunPatrolInspectionRequest, runtime *util.RuntimeOptions) (_result *RunPatrolInspectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunPatrolInspection"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunPatrolInspectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunPatrolInspection(request *RunPatrolInspectionRequest) (_result *RunPatrolInspectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunPatrolInspectionResponse{}
	_body, _err := client.RunPatrolInspectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunRepairScriptWithOptions(request *RunRepairScriptRequest, runtime *util.RuntimeOptions) (_result *RunRepairScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunRepairScript"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunRepairScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunRepairScript(request *RunRepairScriptRequest) (_result *RunRepairScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunRepairScriptResponse{}
	_body, _err := client.RunRepairScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunRiskPatrolWithOptions(request *RunRiskPatrolRequest, runtime *util.RuntimeOptions) (_result *RunRiskPatrolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunRiskPatrol"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunRiskPatrolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunRiskPatrol(request *RunRiskPatrolRequest) (_result *RunRiskPatrolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunRiskPatrolResponse{}
	_body, _err := client.RunRiskPatrolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchUserTopWithOptions(request *SwitchUserTopRequest, runtime *util.RuntimeOptions) (_result *SwitchUserTopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SwitchFrontOperaUid)) {
		query["SwitchFrontOperaUid"] = request.SwitchFrontOperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchUserTop"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchUserTopResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchUserTop(request *SwitchUserTopRequest) (_result *SwitchUserTopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchUserTopResponse{}
	_body, _err := client.SwitchUserTopWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdBusinessGroupWithOptions(tmpReq *UpdBusinessGroupRequest, runtime *util.RuntimeOptions) (_result *UpdBusinessGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdBusinessGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceList)) {
		request.InstanceListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceList, tea.String("InstanceList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupDesc)) {
		query["BusinessGroupDesc"] = request.BusinessGroupDesc
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupName)) {
		query["BusinessGroupName"] = request.BusinessGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceListShrink)) {
		query["InstanceList"] = request.InstanceListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateUser)) {
		query["UpdateUser"] = request.UpdateUser
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdBusinessGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdBusinessGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdBusinessGroup(request *UpdBusinessGroupRequest) (_result *UpdBusinessGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdBusinessGroupResponse{}
	_body, _err := client.UpdBusinessGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateAuthorizationWithOptions(request *UpdateAuthorizationRequest, runtime *util.RuntimeOptions) (_result *UpdateAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAuthorization"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateAuthorization(request *UpdateAuthorizationRequest) (_result *UpdateAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAuthorizationResponse{}
	_body, _err := client.UpdateAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateBindMetricWithOptions(request *UpdateBindMetricRequest, runtime *util.RuntimeOptions) (_result *UpdateBindMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MetricId)) {
		query["MetricId"] = request.MetricId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateBindMetric"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateBindMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateBindMetric(request *UpdateBindMetricRequest) (_result *UpdateBindMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateBindMetricResponse{}
	_body, _err := client.UpdateBindMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateBusinessGroupWithOptions(tmpReq *UpdateBusinessGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateBusinessGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateBusinessGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceList)) {
		request.InstanceListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceList, tea.String("InstanceList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUid)) {
		query["AliUid"] = request.AliUid
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupDesc)) {
		query["BusinessGroupDesc"] = request.BusinessGroupDesc
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupId)) {
		query["BusinessGroupId"] = request.BusinessGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessGroupName)) {
		query["BusinessGroupName"] = request.BusinessGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.CloudResourceTypeId)) {
		query["CloudResourceTypeId"] = request.CloudResourceTypeId
	}

	if !tea.BoolValue(util.IsUnset(request.DealType)) {
		query["DealType"] = request.DealType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceListShrink)) {
		query["InstanceList"] = request.InstanceListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateUser)) {
		query["UpdateUser"] = request.UpdateUser
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateBusinessGroup"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateBusinessGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateBusinessGroup(request *UpdateBusinessGroupRequest) (_result *UpdateBusinessGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateBusinessGroupResponse{}
	_body, _err := client.UpdateBusinessGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateBusinessMetricAlertConfigWithOptions(request *UpdateBusinessMetricAlertConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateBusinessMetricAlertConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateBusinessMetricAlertConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateBusinessMetricAlertConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateBusinessMetricAlertConfig(request *UpdateBusinessMetricAlertConfigRequest) (_result *UpdateBusinessMetricAlertConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateBusinessMetricAlertConfigResponse{}
	_body, _err := client.UpdateBusinessMetricAlertConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateBusinessMetricResourceWithOptions(request *UpdateBusinessMetricResourceRequest, runtime *util.RuntimeOptions) (_result *UpdateBusinessMetricResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessMetricId)) {
		query["BusinessMetricId"] = request.BusinessMetricId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceList)) {
		query["ResourceList"] = request.ResourceList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateBusinessMetricResource"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateBusinessMetricResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateBusinessMetricResource(request *UpdateBusinessMetricResourceRequest) (_result *UpdateBusinessMetricResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateBusinessMetricResourceResponse{}
	_body, _err := client.UpdateBusinessMetricResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDataSourceConfigWithOptions(request *UpdateDataSourceConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateDataSourceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataSourceDescribe)) {
		query["DataSourceDescribe"] = request.DataSourceDescribe
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceName)) {
		query["DataSourceName"] = request.DataSourceName
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceParams)) {
		query["DataSourceParams"] = request.DataSourceParams
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceParamsMapping)) {
		query["DataSourceParamsMapping"] = request.DataSourceParamsMapping
	}

	if !tea.BoolValue(util.IsUnset(request.DataSourceType)) {
		query["DataSourceType"] = request.DataSourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateDataSourceConfig"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateDataSourceConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDataSourceConfig(request *UpdateDataSourceConfigRequest) (_result *UpdateDataSourceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataSourceConfigResponse{}
	_body, _err := client.UpdateDataSourceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateHandleRiskWithOptions(request *UpdateHandleRiskRequest, runtime *util.RuntimeOptions) (_result *UpdateHandleRiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateHandleRisk"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateHandleRiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateHandleRisk(request *UpdateHandleRiskRequest) (_result *UpdateHandleRiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateHandleRiskResponse{}
	_body, _err := client.UpdateHandleRiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateHandleRiskBaseWithOptions(request *UpdateHandleRiskBaseRequest, runtime *util.RuntimeOptions) (_result *UpdateHandleRiskBaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateHandleRiskBase"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateHandleRiskBaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateHandleRiskBase(request *UpdateHandleRiskBaseRequest) (_result *UpdateHandleRiskBaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateHandleRiskBaseResponse{}
	_body, _err := client.UpdateHandleRiskBaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateIgnoreRiskWithOptions(request *UpdateIgnoreRiskRequest, runtime *util.RuntimeOptions) (_result *UpdateIgnoreRiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateIgnoreRisk"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateIgnoreRiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateIgnoreRisk(request *UpdateIgnoreRiskRequest) (_result *UpdateIgnoreRiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateIgnoreRiskResponse{}
	_body, _err := client.UpdateIgnoreRiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateIgnoreRiskBaseWithOptions(request *UpdateIgnoreRiskBaseRequest, runtime *util.RuntimeOptions) (_result *UpdateIgnoreRiskBaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateIgnoreRiskBase"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateIgnoreRiskBaseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateIgnoreRiskBase(request *UpdateIgnoreRiskBaseRequest) (_result *UpdateIgnoreRiskBaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateIgnoreRiskBaseResponse{}
	_body, _err := client.UpdateIgnoreRiskBaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateInspectionSettingStatusWithOptions(request *UpdateInspectionSettingStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateInspectionSettingStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.RiskCode)) {
		body["RiskCode"] = request.RiskCode
	}

	if !tea.BoolValue(util.IsUnset(request.RiskEnableStatus)) {
		body["RiskEnableStatus"] = request.RiskEnableStatus
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateInspectionSettingStatus"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateInspectionSettingStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateInspectionSettingStatus(request *UpdateInspectionSettingStatusRequest) (_result *UpdateInspectionSettingStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateInspectionSettingStatusResponse{}
	_body, _err := client.UpdateInspectionSettingStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateInspectionThresholdWithOptions(request *UpdateInspectionThresholdRequest, runtime *util.RuntimeOptions) (_result *UpdateInspectionThresholdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.RiskCode)) {
		body["RiskCode"] = request.RiskCode
	}

	if !tea.BoolValue(util.IsUnset(request.ThresholdItemListJson)) {
		body["ThresholdItemListJson"] = request.ThresholdItemListJson
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateInspectionThreshold"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateInspectionThresholdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateInspectionThreshold(request *UpdateInspectionThresholdRequest) (_result *UpdateInspectionThresholdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateInspectionThresholdResponse{}
	_body, _err := client.UpdateInspectionThresholdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateOperationPermissionWithOptions(request *UpdateOperationPermissionRequest, runtime *util.RuntimeOptions) (_result *UpdateOperationPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PermissionType)) {
		query["PermissionType"] = request.PermissionType
	}

	if !tea.BoolValue(util.IsUnset(request.SwitchFrontOperaUid)) {
		query["SwitchFrontOperaUid"] = request.SwitchFrontOperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateOperationPermission"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateOperationPermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateOperationPermission(request *UpdateOperationPermissionRequest) (_result *UpdateOperationPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateOperationPermissionResponse{}
	_body, _err := client.UpdateOperationPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateReportEmailConfigStatusWithOptions(request *UpdateReportEmailConfigStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateReportEmailConfigStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigStatus)) {
		body["ConfigStatus"] = request.ConfigStatus
	}

	if !tea.BoolValue(util.IsUnset(request.MailConfigId)) {
		body["MailConfigId"] = request.MailConfigId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateReportEmailConfigStatus"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateReportEmailConfigStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateReportEmailConfigStatus(request *UpdateReportEmailConfigStatusRequest) (_result *UpdateReportEmailConfigStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateReportEmailConfigStatusResponse{}
	_body, _err := client.UpdateReportEmailConfigStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateReportSubscriptionWithOptions(request *UpdateReportSubscriptionRequest, runtime *util.RuntimeOptions) (_result *UpdateReportSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DayOfWeek)) {
		body["DayOfWeek"] = request.DayOfWeek
	}

	if !tea.BoolValue(util.IsUnset(request.HourOfDay)) {
		body["HourOfDay"] = request.HourOfDay
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ReportName)) {
		body["ReportName"] = request.ReportName
	}

	if !tea.BoolValue(util.IsUnset(request.Subscribe)) {
		body["Subscribe"] = request.Subscribe
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateReportSubscription"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateReportSubscriptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateReportSubscription(request *UpdateReportSubscriptionRequest) (_result *UpdateReportSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateReportSubscriptionResponse{}
	_body, _err := client.UpdateReportSubscriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateScenarioWithOptions(request *UpdateScenarioRequest, runtime *util.RuntimeOptions) (_result *UpdateScenarioResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertSettingId)) {
		query["AlertSettingId"] = request.AlertSettingId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateScenario"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateScenarioResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateScenario(request *UpdateScenarioRequest) (_result *UpdateScenarioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateScenarioResponse{}
	_body, _err := client.UpdateScenarioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSceneWithOptions(request *UpdateSceneRequest, runtime *util.RuntimeOptions) (_result *UpdateSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowName)) {
		body["FlowName"] = request.FlowName
	}

	if !tea.BoolValue(util.IsUnset(request.MetricListJson)) {
		body["MetricListJson"] = request.MetricListJson
	}

	if !tea.BoolValue(util.IsUnset(request.NodeListJson)) {
		body["NodeListJson"] = request.NodeListJson
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.SceneDesc)) {
		body["SceneDesc"] = request.SceneDesc
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		body["SceneId"] = request.SceneId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneName)) {
		body["SceneName"] = request.SceneName
	}

	if !tea.BoolValue(util.IsUnset(request.SceneOwner)) {
		body["SceneOwner"] = request.SceneOwner
	}

	if !tea.BoolValue(util.IsUnset(request.SceneWebhook)) {
		body["SceneWebhook"] = request.SceneWebhook
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateScene"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateScene(request *UpdateSceneRequest) (_result *UpdateSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSceneResponse{}
	_body, _err := client.UpdateSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSceneModelWithOptions(request *UpdateSceneModelRequest, runtime *util.RuntimeOptions) (_result *UpdateSceneModelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FcFunctionName)) {
		body["FcFunctionName"] = request.FcFunctionName
	}

	if !tea.BoolValue(util.IsUnset(request.FcHandler)) {
		body["FcHandler"] = request.FcHandler
	}

	if !tea.BoolValue(util.IsUnset(request.FcInitializer)) {
		body["FcInitializer"] = request.FcInitializer
	}

	if !tea.BoolValue(util.IsUnset(request.FcRegionNo)) {
		body["FcRegionNo"] = request.FcRegionNo
	}

	if !tea.BoolValue(util.IsUnset(request.FcServiceName)) {
		body["FcServiceName"] = request.FcServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.ModelDesc)) {
		body["ModelDesc"] = request.ModelDesc
	}

	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelLanguage)) {
		body["ModelLanguage"] = request.ModelLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.ModelMemo)) {
		body["ModelMemo"] = request.ModelMemo
	}

	if !tea.BoolValue(util.IsUnset(request.ModelName)) {
		body["ModelName"] = request.ModelName
	}

	if !tea.BoolValue(util.IsUnset(request.ModelType)) {
		body["ModelType"] = request.ModelType
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.RootCauseDesc)) {
		body["RootCauseDesc"] = request.RootCauseDesc
	}

	if !tea.BoolValue(util.IsUnset(request.RootCauseSolution)) {
		body["RootCauseSolution"] = request.RootCauseSolution
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSceneModel"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSceneModelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSceneModel(request *UpdateSceneModelRequest) (_result *UpdateSceneModelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSceneModelResponse{}
	_body, _err := client.UpdateSceneModelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSceneModelApplyWithOptions(request *UpdateSceneModelApplyRequest, runtime *util.RuntimeOptions) (_result *UpdateSceneModelApplyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ApplyContent)) {
		body["ApplyContent"] = request.ApplyContent
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyId)) {
		body["ApplyId"] = request.ApplyId
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyStatus)) {
		body["ApplyStatus"] = request.ApplyStatus
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSceneModelApply"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSceneModelApplyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSceneModelApply(request *UpdateSceneModelApplyRequest) (_result *UpdateSceneModelApplyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSceneModelApplyResponse{}
	_body, _err := client.UpdateSceneModelApplyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSceneModelCurVersionWithOptions(request *UpdateSceneModelCurVersionRequest, runtime *util.RuntimeOptions) (_result *UpdateSceneModelCurVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExtId)) {
		body["ExtId"] = request.ExtId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSceneModelCurVersion"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSceneModelCurVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSceneModelCurVersion(request *UpdateSceneModelCurVersionRequest) (_result *UpdateSceneModelCurVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSceneModelCurVersionResponse{}
	_body, _err := client.UpdateSceneModelCurVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSceneSystemModelStatusWithOptions(request *UpdateSceneSystemModelStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateSceneSystemModelStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ModelId)) {
		body["ModelId"] = request.ModelId
	}

	if !tea.BoolValue(util.IsUnset(request.ModelStatus)) {
		body["ModelStatus"] = request.ModelStatus
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSceneSystemModelStatus"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSceneSystemModelStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSceneSystemModelStatus(request *UpdateSceneSystemModelStatusRequest) (_result *UpdateSceneSystemModelStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSceneSystemModelStatusResponse{}
	_body, _err := client.UpdateSceneSystemModelStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateScenestatusWithOptions(request *UpdateScenestatusRequest, runtime *util.RuntimeOptions) (_result *UpdateScenestatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateScenestatus"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateScenestatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateScenestatus(request *UpdateScenestatusRequest) (_result *UpdateScenestatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateScenestatusResponse{}
	_body, _err := client.UpdateScenestatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateScriptWithOptions(request *UpdateScriptRequest, runtime *util.RuntimeOptions) (_result *UpdateScriptResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HandleSuggestDesc)) {
		query["HandleSuggestDesc"] = request.HandleSuggestDesc
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		query["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.ProductCode)) {
		query["ProductCode"] = request.ProductCode
	}

	if !tea.BoolValue(util.IsUnset(request.RootCauseDesc)) {
		query["RootCauseDesc"] = request.RootCauseDesc
	}

	if !tea.BoolValue(util.IsUnset(request.RootCausesLog)) {
		query["RootCausesLog"] = request.RootCausesLog
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		query["SceneId"] = request.SceneId
	}

	if !tea.BoolValue(util.IsUnset(request.Script)) {
		query["Script"] = request.Script
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptLanguage)) {
		query["ScriptLanguage"] = request.ScriptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.ScriptName)) {
		query["ScriptName"] = request.ScriptName
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateScript"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateScriptResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateScript(request *UpdateScriptRequest) (_result *UpdateScriptResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateScriptResponse{}
	_body, _err := client.UpdateScriptWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateStatusOfSceneWithOptions(request *UpdateStatusOfSceneRequest, runtime *util.RuntimeOptions) (_result *UpdateStatusOfSceneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperaUid)) {
		body["OperaUid"] = request.OperaUid
	}

	if !tea.BoolValue(util.IsUnset(request.SceneId)) {
		body["SceneId"] = request.SceneId
	}

	if !tea.BoolValue(util.IsUnset(request.SceneStatus)) {
		body["SceneStatus"] = request.SceneStatus
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateStatusOfScene"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateStatusOfSceneResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateStatusOfScene(request *UpdateStatusOfSceneRequest) (_result *UpdateStatusOfSceneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateStatusOfSceneResponse{}
	_body, _err := client.UpdateStatusOfSceneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTagInfoWithOptions(request *UpdateTagInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateTagInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTagInfo"),
		Version:     tea.String("2020-08-06"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTagInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTagInfo(request *UpdateTagInfoRequest) (_result *UpdateTagInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTagInfoResponse{}
	_body, _err := client.UpdateTagInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
