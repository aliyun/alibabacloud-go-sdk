// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type ActivateMediaWorkflowRequest struct {
	// This parameter is required.
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ActivateMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s ActivateMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *ActivateMediaWorkflowRequest) SetMediaWorkflowId(v string) *ActivateMediaWorkflowRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *ActivateMediaWorkflowRequest) SetOwnerAccount(v string) *ActivateMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ActivateMediaWorkflowRequest) SetOwnerId(v int64) *ActivateMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *ActivateMediaWorkflowRequest) SetResourceOwnerAccount(v string) *ActivateMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ActivateMediaWorkflowRequest) SetResourceOwnerId(v int64) *ActivateMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

type ActivateMediaWorkflowResponseBody struct {
	MediaWorkflow *ActivateMediaWorkflowResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ActivateMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ActivateMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *ActivateMediaWorkflowResponseBody) SetMediaWorkflow(v *ActivateMediaWorkflowResponseBodyMediaWorkflow) *ActivateMediaWorkflowResponseBody {
	s.MediaWorkflow = v
	return s
}

func (s *ActivateMediaWorkflowResponseBody) SetRequestId(v string) *ActivateMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

type ActivateMediaWorkflowResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s ActivateMediaWorkflowResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s ActivateMediaWorkflowResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *ActivateMediaWorkflowResponseBodyMediaWorkflow) SetCreationTime(v string) *ActivateMediaWorkflowResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *ActivateMediaWorkflowResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *ActivateMediaWorkflowResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *ActivateMediaWorkflowResponseBodyMediaWorkflow) SetName(v string) *ActivateMediaWorkflowResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *ActivateMediaWorkflowResponseBodyMediaWorkflow) SetState(v string) *ActivateMediaWorkflowResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *ActivateMediaWorkflowResponseBodyMediaWorkflow) SetTopology(v string) *ActivateMediaWorkflowResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

type ActivateMediaWorkflowResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ActivateMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ActivateMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s ActivateMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *ActivateMediaWorkflowResponse) SetHeaders(v map[string]*string) *ActivateMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *ActivateMediaWorkflowResponse) SetStatusCode(v int32) *ActivateMediaWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *ActivateMediaWorkflowResponse) SetBody(v *ActivateMediaWorkflowResponseBody) *ActivateMediaWorkflowResponse {
	s.Body = v
	return s
}

type AddCategoryRequest struct {
	// This parameter is required.
	CateName             *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ParentId             *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s AddCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryRequest) GoString() string {
	return s.String()
}

func (s *AddCategoryRequest) SetCateName(v string) *AddCategoryRequest {
	s.CateName = &v
	return s
}

func (s *AddCategoryRequest) SetOwnerAccount(v string) *AddCategoryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddCategoryRequest) SetOwnerId(v int64) *AddCategoryRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCategoryRequest) SetParentId(v int64) *AddCategoryRequest {
	s.ParentId = &v
	return s
}

func (s *AddCategoryRequest) SetResourceOwnerAccount(v string) *AddCategoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddCategoryRequest) SetResourceOwnerId(v int64) *AddCategoryRequest {
	s.ResourceOwnerId = &v
	return s
}

type AddCategoryResponseBody struct {
	Category  *AddCategoryResponseBodyCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Struct"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *AddCategoryResponseBody) SetCategory(v *AddCategoryResponseBodyCategory) *AddCategoryResponseBody {
	s.Category = v
	return s
}

func (s *AddCategoryResponseBody) SetRequestId(v string) *AddCategoryResponseBody {
	s.RequestId = &v
	return s
}

type AddCategoryResponseBodyCategory struct {
	CateId   *string `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	Level    *string `json:"Level,omitempty" xml:"Level,omitempty"`
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s AddCategoryResponseBodyCategory) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponseBodyCategory) GoString() string {
	return s.String()
}

func (s *AddCategoryResponseBodyCategory) SetCateId(v string) *AddCategoryResponseBodyCategory {
	s.CateId = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetCateName(v string) *AddCategoryResponseBodyCategory {
	s.CateName = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetLevel(v string) *AddCategoryResponseBodyCategory {
	s.Level = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetParentId(v string) *AddCategoryResponseBodyCategory {
	s.ParentId = &v
	return s
}

type AddCategoryResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponse) GoString() string {
	return s.String()
}

func (s *AddCategoryResponse) SetHeaders(v map[string]*string) *AddCategoryResponse {
	s.Headers = v
	return s
}

func (s *AddCategoryResponse) SetStatusCode(v int32) *AddCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCategoryResponse) SetBody(v *AddCategoryResponseBody) *AddCategoryResponse {
	s.Body = v
	return s
}

type AddMediaRequest struct {
	CateId      *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CoverURL    *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	FileURL               *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	InputUnbind           *bool   `json:"InputUnbind,omitempty" xml:"InputUnbind,omitempty"`
	MediaWorkflowId       *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	MediaWorkflowUserData *string `json:"MediaWorkflowUserData,omitempty" xml:"MediaWorkflowUserData,omitempty"`
	OverrideParams        *string `json:"OverrideParams,omitempty" xml:"OverrideParams,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tags                  *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Title                 *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s AddMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMediaRequest) GoString() string {
	return s.String()
}

func (s *AddMediaRequest) SetCateId(v int64) *AddMediaRequest {
	s.CateId = &v
	return s
}

func (s *AddMediaRequest) SetCoverURL(v string) *AddMediaRequest {
	s.CoverURL = &v
	return s
}

func (s *AddMediaRequest) SetDescription(v string) *AddMediaRequest {
	s.Description = &v
	return s
}

func (s *AddMediaRequest) SetFileURL(v string) *AddMediaRequest {
	s.FileURL = &v
	return s
}

func (s *AddMediaRequest) SetInputUnbind(v bool) *AddMediaRequest {
	s.InputUnbind = &v
	return s
}

func (s *AddMediaRequest) SetMediaWorkflowId(v string) *AddMediaRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *AddMediaRequest) SetMediaWorkflowUserData(v string) *AddMediaRequest {
	s.MediaWorkflowUserData = &v
	return s
}

func (s *AddMediaRequest) SetOverrideParams(v string) *AddMediaRequest {
	s.OverrideParams = &v
	return s
}

func (s *AddMediaRequest) SetOwnerAccount(v string) *AddMediaRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddMediaRequest) SetOwnerId(v int64) *AddMediaRequest {
	s.OwnerId = &v
	return s
}

func (s *AddMediaRequest) SetResourceOwnerAccount(v string) *AddMediaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddMediaRequest) SetResourceOwnerId(v int64) *AddMediaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddMediaRequest) SetTags(v string) *AddMediaRequest {
	s.Tags = &v
	return s
}

func (s *AddMediaRequest) SetTitle(v string) *AddMediaRequest {
	s.Title = &v
	return s
}

type AddMediaResponseBody struct {
	Media     *AddMediaResponseBodyMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Struct"`
	RequestId *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponseBody) GoString() string {
	return s.String()
}

func (s *AddMediaResponseBody) SetMedia(v *AddMediaResponseBodyMedia) *AddMediaResponseBody {
	s.Media = v
	return s
}

func (s *AddMediaResponseBody) SetRequestId(v string) *AddMediaResponseBody {
	s.RequestId = &v
	return s
}

type AddMediaResponseBodyMedia struct {
	Bitrate      *string                             `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CateId       *int64                              `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CensorState  *string                             `json:"CensorState,omitempty" xml:"CensorState,omitempty"`
	CoverURL     *string                             `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	CreationTime *string                             `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string                             `json:"Description,omitempty" xml:"Description,omitempty"`
	Duration     *string                             `json:"Duration,omitempty" xml:"Duration,omitempty"`
	File         *AddMediaResponseBodyMediaFile      `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	Format       *string                             `json:"Format,omitempty" xml:"Format,omitempty"`
	Fps          *string                             `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height       *string                             `json:"Height,omitempty" xml:"Height,omitempty"`
	MediaId      *string                             `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	PublishState *string                             `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	RunIdList    *AddMediaResponseBodyMediaRunIdList `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Size         *string                             `json:"Size,omitempty" xml:"Size,omitempty"`
	Tags         *AddMediaResponseBodyMediaTags      `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Title        *string                             `json:"Title,omitempty" xml:"Title,omitempty"`
	Width        *string                             `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddMediaResponseBodyMedia) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponseBodyMedia) GoString() string {
	return s.String()
}

func (s *AddMediaResponseBodyMedia) SetBitrate(v string) *AddMediaResponseBodyMedia {
	s.Bitrate = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetCateId(v int64) *AddMediaResponseBodyMedia {
	s.CateId = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetCensorState(v string) *AddMediaResponseBodyMedia {
	s.CensorState = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetCoverURL(v string) *AddMediaResponseBodyMedia {
	s.CoverURL = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetCreationTime(v string) *AddMediaResponseBodyMedia {
	s.CreationTime = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetDescription(v string) *AddMediaResponseBodyMedia {
	s.Description = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetDuration(v string) *AddMediaResponseBodyMedia {
	s.Duration = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetFile(v *AddMediaResponseBodyMediaFile) *AddMediaResponseBodyMedia {
	s.File = v
	return s
}

func (s *AddMediaResponseBodyMedia) SetFormat(v string) *AddMediaResponseBodyMedia {
	s.Format = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetFps(v string) *AddMediaResponseBodyMedia {
	s.Fps = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetHeight(v string) *AddMediaResponseBodyMedia {
	s.Height = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetMediaId(v string) *AddMediaResponseBodyMedia {
	s.MediaId = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetPublishState(v string) *AddMediaResponseBodyMedia {
	s.PublishState = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetRunIdList(v *AddMediaResponseBodyMediaRunIdList) *AddMediaResponseBodyMedia {
	s.RunIdList = v
	return s
}

func (s *AddMediaResponseBodyMedia) SetSize(v string) *AddMediaResponseBodyMedia {
	s.Size = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetTags(v *AddMediaResponseBodyMediaTags) *AddMediaResponseBodyMedia {
	s.Tags = v
	return s
}

func (s *AddMediaResponseBodyMedia) SetTitle(v string) *AddMediaResponseBodyMedia {
	s.Title = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetWidth(v string) *AddMediaResponseBodyMedia {
	s.Width = &v
	return s
}

type AddMediaResponseBodyMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s AddMediaResponseBodyMediaFile) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponseBodyMediaFile) GoString() string {
	return s.String()
}

func (s *AddMediaResponseBodyMediaFile) SetState(v string) *AddMediaResponseBodyMediaFile {
	s.State = &v
	return s
}

func (s *AddMediaResponseBodyMediaFile) SetURL(v string) *AddMediaResponseBodyMediaFile {
	s.URL = &v
	return s
}

type AddMediaResponseBodyMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s AddMediaResponseBodyMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponseBodyMediaRunIdList) GoString() string {
	return s.String()
}

func (s *AddMediaResponseBodyMediaRunIdList) SetRunId(v []*string) *AddMediaResponseBodyMediaRunIdList {
	s.RunId = v
	return s
}

type AddMediaResponseBodyMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s AddMediaResponseBodyMediaTags) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponseBodyMediaTags) GoString() string {
	return s.String()
}

func (s *AddMediaResponseBodyMediaTags) SetTag(v []*string) *AddMediaResponseBodyMediaTags {
	s.Tag = v
	return s
}

type AddMediaResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponse) GoString() string {
	return s.String()
}

func (s *AddMediaResponse) SetHeaders(v map[string]*string) *AddMediaResponse {
	s.Headers = v
	return s
}

func (s *AddMediaResponse) SetStatusCode(v int32) *AddMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMediaResponse) SetBody(v *AddMediaResponseBody) *AddMediaResponse {
	s.Body = v
	return s
}

type AddMediaTagRequest struct {
	// This parameter is required.
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                  *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s AddMediaTagRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMediaTagRequest) GoString() string {
	return s.String()
}

func (s *AddMediaTagRequest) SetMediaId(v string) *AddMediaTagRequest {
	s.MediaId = &v
	return s
}

func (s *AddMediaTagRequest) SetOwnerAccount(v string) *AddMediaTagRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddMediaTagRequest) SetOwnerId(v int64) *AddMediaTagRequest {
	s.OwnerId = &v
	return s
}

func (s *AddMediaTagRequest) SetResourceOwnerAccount(v string) *AddMediaTagRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddMediaTagRequest) SetResourceOwnerId(v int64) *AddMediaTagRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddMediaTagRequest) SetTag(v string) *AddMediaTagRequest {
	s.Tag = &v
	return s
}

type AddMediaTagResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddMediaTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMediaTagResponseBody) GoString() string {
	return s.String()
}

func (s *AddMediaTagResponseBody) SetRequestId(v string) *AddMediaTagResponseBody {
	s.RequestId = &v
	return s
}

type AddMediaTagResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddMediaTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddMediaTagResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMediaTagResponse) GoString() string {
	return s.String()
}

func (s *AddMediaTagResponse) SetHeaders(v map[string]*string) *AddMediaTagResponse {
	s.Headers = v
	return s
}

func (s *AddMediaTagResponse) SetStatusCode(v int32) *AddMediaTagResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMediaTagResponse) SetBody(v *AddMediaTagResponseBody) *AddMediaTagResponse {
	s.Body = v
	return s
}

type AddMediaWorkflowRequest struct {
	// This parameter is required.
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	Topology    *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
	TriggerMode *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
}

func (s AddMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *AddMediaWorkflowRequest) SetName(v string) *AddMediaWorkflowRequest {
	s.Name = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetOwnerAccount(v string) *AddMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetOwnerId(v int64) *AddMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetResourceOwnerAccount(v string) *AddMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetResourceOwnerId(v int64) *AddMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetTopology(v string) *AddMediaWorkflowRequest {
	s.Topology = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetTriggerMode(v string) *AddMediaWorkflowRequest {
	s.TriggerMode = &v
	return s
}

type AddMediaWorkflowResponseBody struct {
	MediaWorkflow *AddMediaWorkflowResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
	RequestId     *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *AddMediaWorkflowResponseBody) SetMediaWorkflow(v *AddMediaWorkflowResponseBodyMediaWorkflow) *AddMediaWorkflowResponseBody {
	s.MediaWorkflow = v
	return s
}

func (s *AddMediaWorkflowResponseBody) SetRequestId(v string) *AddMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

type AddMediaWorkflowResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
	TriggerMode     *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
}

func (s AddMediaWorkflowResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s AddMediaWorkflowResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetCreationTime(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetName(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetState(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetTopology(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetTriggerMode(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.TriggerMode = &v
	return s
}

type AddMediaWorkflowResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *AddMediaWorkflowResponse) SetHeaders(v map[string]*string) *AddMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *AddMediaWorkflowResponse) SetStatusCode(v int32) *AddMediaWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMediaWorkflowResponse) SetBody(v *AddMediaWorkflowResponseBody) *AddMediaWorkflowResponse {
	s.Body = v
	return s
}

type AddPipelineRequest struct {
	// This parameter is required.
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Speed                *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	SpeedLevel           *int64  `json:"SpeedLevel,omitempty" xml:"SpeedLevel,omitempty"`
}

func (s AddPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineRequest) GoString() string {
	return s.String()
}

func (s *AddPipelineRequest) SetName(v string) *AddPipelineRequest {
	s.Name = &v
	return s
}

func (s *AddPipelineRequest) SetNotifyConfig(v string) *AddPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *AddPipelineRequest) SetOwnerAccount(v string) *AddPipelineRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddPipelineRequest) SetOwnerId(v int64) *AddPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *AddPipelineRequest) SetResourceOwnerAccount(v string) *AddPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddPipelineRequest) SetResourceOwnerId(v int64) *AddPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddPipelineRequest) SetRole(v string) *AddPipelineRequest {
	s.Role = &v
	return s
}

func (s *AddPipelineRequest) SetSpeed(v string) *AddPipelineRequest {
	s.Speed = &v
	return s
}

func (s *AddPipelineRequest) SetSpeedLevel(v int64) *AddPipelineRequest {
	s.SpeedLevel = &v
	return s
}

type AddPipelineResponseBody struct {
	Pipeline  *AddPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *AddPipelineResponseBody) SetPipeline(v *AddPipelineResponseBodyPipeline) *AddPipelineResponseBody {
	s.Pipeline = v
	return s
}

func (s *AddPipelineResponseBody) SetRequestId(v string) *AddPipelineResponseBody {
	s.RequestId = &v
	return s
}

type AddPipelineResponseBodyPipeline struct {
	Id           *string                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	NotifyConfig *AddPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Role         *string                                      `json:"Role,omitempty" xml:"Role,omitempty"`
	Speed        *string                                      `json:"Speed,omitempty" xml:"Speed,omitempty"`
	SpeedLevel   *int64                                       `json:"SpeedLevel,omitempty" xml:"SpeedLevel,omitempty"`
	State        *string                                      `json:"State,omitempty" xml:"State,omitempty"`
}

func (s AddPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *AddPipelineResponseBodyPipeline) SetId(v string) *AddPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetName(v string) *AddPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetNotifyConfig(v *AddPipelineResponseBodyPipelineNotifyConfig) *AddPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetRole(v string) *AddPipelineResponseBodyPipeline {
	s.Role = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetSpeed(v string) *AddPipelineResponseBodyPipeline {
	s.Speed = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetSpeedLevel(v int64) *AddPipelineResponseBodyPipeline {
	s.SpeedLevel = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetState(v string) *AddPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

type AddPipelineResponseBodyPipelineNotifyConfig struct {
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s AddPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *AddPipelineResponseBodyPipelineNotifyConfig) SetQueueName(v string) *AddPipelineResponseBodyPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *AddPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *AddPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type AddPipelineResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineResponse) GoString() string {
	return s.String()
}

func (s *AddPipelineResponse) SetHeaders(v map[string]*string) *AddPipelineResponse {
	s.Headers = v
	return s
}

func (s *AddPipelineResponse) SetStatusCode(v int32) *AddPipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *AddPipelineResponse) SetBody(v *AddPipelineResponseBody) *AddPipelineResponse {
	s.Body = v
	return s
}

type AddTemplateRequest struct {
	// example:
	//
	// "Codec":"aac","Samplerate":"44100","Bitrate":"500","Channels":"2"
	Audio *string `json:"Audio,omitempty" xml:"Audio,omitempty"`
	// example:
	//
	// "Format":"mp4"
	Container *string `json:"Container,omitempty" xml:"Container,omitempty"`
	// example:
	//
	// "Segment":{"Duration":"12"}
	MuxConfig *string `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// X
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// example:
	//
	// "TransMode":"onepass"
	TransConfig *string `json:"TransConfig,omitempty" xml:"TransConfig,omitempty"`
	// example:
	//
	// "Codec":"H.264","Profile":"high","Bitrate":"500","Crf":"15","Width":"256","Height":"800","Fps":"25","Gop":"10"
	Video *string `json:"Video,omitempty" xml:"Video,omitempty"`
}

func (s AddTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateRequest) GoString() string {
	return s.String()
}

func (s *AddTemplateRequest) SetAudio(v string) *AddTemplateRequest {
	s.Audio = &v
	return s
}

func (s *AddTemplateRequest) SetContainer(v string) *AddTemplateRequest {
	s.Container = &v
	return s
}

func (s *AddTemplateRequest) SetMuxConfig(v string) *AddTemplateRequest {
	s.MuxConfig = &v
	return s
}

func (s *AddTemplateRequest) SetName(v string) *AddTemplateRequest {
	s.Name = &v
	return s
}

func (s *AddTemplateRequest) SetOwnerAccount(v string) *AddTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddTemplateRequest) SetOwnerId(v int64) *AddTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *AddTemplateRequest) SetResourceOwnerAccount(v string) *AddTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddTemplateRequest) SetResourceOwnerId(v int64) *AddTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddTemplateRequest) SetTransConfig(v string) *AddTemplateRequest {
	s.TransConfig = &v
	return s
}

func (s *AddTemplateRequest) SetVideo(v string) *AddTemplateRequest {
	s.Video = &v
	return s
}

type AddTemplateResponseBody struct {
	// example:
	//
	// FA258E67-09B8-4EAA-8F33-BA5678341CF2
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Template  *AddTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s AddTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBody) SetRequestId(v string) *AddTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddTemplateResponseBody) SetTemplate(v *AddTemplateResponseBodyTemplate) *AddTemplateResponseBody {
	s.Template = v
	return s
}

type AddTemplateResponseBodyTemplate struct {
	Audio     *AddTemplateResponseBodyTemplateAudio     `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container *AddTemplateResponseBodyTemplateContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// example:
	//
	// 16f01ad6175e4230ac42bb5182cd05c3
	Id        *string                                   `json:"Id,omitempty" xml:"Id,omitempty"`
	MuxConfig *AddTemplateResponseBodyTemplateMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// example:
	//
	// yourname
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Normal
	State       *string                                     `json:"State,omitempty" xml:"State,omitempty"`
	TransConfig *AddTemplateResponseBodyTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *AddTemplateResponseBodyTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s AddTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplate) SetAudio(v *AddTemplateResponseBodyTemplateAudio) *AddTemplateResponseBodyTemplate {
	s.Audio = v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetContainer(v *AddTemplateResponseBodyTemplateContainer) *AddTemplateResponseBodyTemplate {
	s.Container = v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetId(v string) *AddTemplateResponseBodyTemplate {
	s.Id = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetMuxConfig(v *AddTemplateResponseBodyTemplateMuxConfig) *AddTemplateResponseBodyTemplate {
	s.MuxConfig = v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetName(v string) *AddTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetState(v string) *AddTemplateResponseBodyTemplate {
	s.State = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetTransConfig(v *AddTemplateResponseBodyTemplateTransConfig) *AddTemplateResponseBodyTemplate {
	s.TransConfig = v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetVideo(v *AddTemplateResponseBodyTemplateVideo) *AddTemplateResponseBodyTemplate {
	s.Video = v
	return s
}

type AddTemplateResponseBodyTemplateAudio struct {
	// example:
	//
	// 50
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// acc
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// aac_eld
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 20
	Qscale *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// 22050
	Samplerate *string                                     `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *AddTemplateResponseBodyTemplateAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s AddTemplateResponseBodyTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateAudio) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateAudio) SetBitrate(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Bitrate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetChannels(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Channels = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetCodec(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Codec = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetProfile(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Profile = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetQscale(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetRemove(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Remove = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetSamplerate(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Samplerate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetVolume(v *AddTemplateResponseBodyTemplateAudioVolume) *AddTemplateResponseBodyTemplateAudio {
	s.Volume = v
	return s
}

type AddTemplateResponseBodyTemplateAudioVolume struct {
	// example:
	//
	// -100
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
}

func (s AddTemplateResponseBodyTemplateAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateAudioVolume) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateAudioVolume) SetLevel(v string) *AddTemplateResponseBodyTemplateAudioVolume {
	s.Level = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudioVolume) SetMethod(v string) *AddTemplateResponseBodyTemplateAudioVolume {
	s.Method = &v
	return s
}

type AddTemplateResponseBodyTemplateContainer struct {
	// example:
	//
	// flv
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s AddTemplateResponseBodyTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateContainer) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateContainer) SetFormat(v string) *AddTemplateResponseBodyTemplateContainer {
	s.Format = &v
	return s
}

type AddTemplateResponseBodyTemplateMuxConfig struct {
	Gif     *AddTemplateResponseBodyTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *AddTemplateResponseBodyTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
	Webp    *AddTemplateResponseBodyTemplateMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
}

func (s AddTemplateResponseBodyTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateMuxConfig) SetGif(v *AddTemplateResponseBodyTemplateMuxConfigGif) *AddTemplateResponseBodyTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *AddTemplateResponseBodyTemplateMuxConfig) SetSegment(v *AddTemplateResponseBodyTemplateMuxConfigSegment) *AddTemplateResponseBodyTemplateMuxConfig {
	s.Segment = v
	return s
}

func (s *AddTemplateResponseBodyTemplateMuxConfig) SetWebp(v *AddTemplateResponseBodyTemplateMuxConfigWebp) *AddTemplateResponseBodyTemplateMuxConfig {
	s.Webp = v
	return s
}

type AddTemplateResponseBodyTemplateMuxConfigGif struct {
	// example:
	//
	// sierra
	DitherMode *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	// example:
	//
	// 20
	FinalDelay *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	// example:
	//
	// true
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
	// example:
	//
	// 20
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s AddTemplateResponseBodyTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateMuxConfigGif) SetDitherMode(v string) *AddTemplateResponseBodyTemplateMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateMuxConfigGif) SetFinalDelay(v string) *AddTemplateResponseBodyTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateMuxConfigGif) SetIsCustomPalette(v string) *AddTemplateResponseBodyTemplateMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateMuxConfigGif) SetLoop(v string) *AddTemplateResponseBodyTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

type AddTemplateResponseBodyTemplateMuxConfigSegment struct {
	// example:
	//
	// 5
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s AddTemplateResponseBodyTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateMuxConfigSegment) SetDuration(v string) *AddTemplateResponseBodyTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type AddTemplateResponseBodyTemplateMuxConfigWebp struct {
	// example:
	//
	// 20
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s AddTemplateResponseBodyTemplateMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateMuxConfigWebp) SetLoop(v string) *AddTemplateResponseBodyTemplateMuxConfigWebp {
	s.Loop = &v
	return s
}

type AddTemplateResponseBodyTemplateTransConfig struct {
	// example:
	//
	// pda
	AdjDarMethod *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	// example:
	//
	// false
	IsCheckAudioBitrate *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	// example:
	//
	// false
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	// example:
	//
	// false
	IsCheckReso *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	// example:
	//
	// false
	IsCheckResoFail *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	// example:
	//
	// false
	IsCheckVideoBitrate *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	// example:
	//
	// false
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	// example:
	//
	// onepass
	TransMode *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s AddTemplateResponseBodyTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetAdjDarMethod(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckAudioBitrate(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckReso(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckResoFail(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckVideoBitrate(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetTransMode(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.TransMode = &v
	return s
}

type AddTemplateResponseBodyTemplateVideo struct {
	// example:
	//
	// 100
	Bitrate    *string                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd *AddTemplateResponseBodyTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	// example:
	//
	// 1000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// example:
	//
	// aac
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 15
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// example:
	//
	// 5
	Degrain *string `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	// example:
	//
	// 50
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 10
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 800
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 20
	MaxFps *string `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	// example:
	//
	// 10
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// example:
	//
	// high
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 20
	Qscale *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// cropFirst
	ResoPriority *string `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
	// example:
	//
	// interlaced
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// example:
	//
	// 129
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddTemplateResponseBodyTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateVideo) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateVideo) SetBitrate(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetBitrateBnd(v *AddTemplateResponseBodyTemplateVideoBitrateBnd) *AddTemplateResponseBodyTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetBufsize(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetCodec(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Codec = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetCrf(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Crf = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetCrop(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Crop = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetDegrain(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetFps(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Fps = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetGop(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Gop = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetHeight(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Height = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetMaxFps(v string) *AddTemplateResponseBodyTemplateVideo {
	s.MaxFps = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetMaxrate(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetPad(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Pad = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetPixFmt(v string) *AddTemplateResponseBodyTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetPreset(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Preset = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetProfile(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Profile = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetQscale(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetRemove(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Remove = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetResoPriority(v string) *AddTemplateResponseBodyTemplateVideo {
	s.ResoPriority = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetScanMode(v string) *AddTemplateResponseBodyTemplateVideo {
	s.ScanMode = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetWidth(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Width = &v
	return s
}

type AddTemplateResponseBodyTemplateVideoBitrateBnd struct {
	// example:
	//
	// 10
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	// example:
	//
	// 10
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s AddTemplateResponseBodyTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateVideoBitrateBnd) SetMax(v string) *AddTemplateResponseBodyTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideoBitrateBnd) SetMin(v string) *AddTemplateResponseBodyTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type AddTemplateResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponse) GoString() string {
	return s.String()
}

func (s *AddTemplateResponse) SetHeaders(v map[string]*string) *AddTemplateResponse {
	s.Headers = v
	return s
}

func (s *AddTemplateResponse) SetStatusCode(v int32) *AddTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTemplateResponse) SetBody(v *AddTemplateResponseBody) *AddTemplateResponse {
	s.Body = v
	return s
}

type AddWaterMarkTemplateRequest struct {
	// This parameter is required.
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// This parameter is required.
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s AddWaterMarkTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateRequest) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateRequest) SetConfig(v string) *AddWaterMarkTemplateRequest {
	s.Config = &v
	return s
}

func (s *AddWaterMarkTemplateRequest) SetName(v string) *AddWaterMarkTemplateRequest {
	s.Name = &v
	return s
}

func (s *AddWaterMarkTemplateRequest) SetOwnerAccount(v string) *AddWaterMarkTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddWaterMarkTemplateRequest) SetOwnerId(v int64) *AddWaterMarkTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *AddWaterMarkTemplateRequest) SetResourceOwnerAccount(v string) *AddWaterMarkTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddWaterMarkTemplateRequest) SetResourceOwnerId(v int64) *AddWaterMarkTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

type AddWaterMarkTemplateResponseBody struct {
	RequestId         *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WaterMarkTemplate *AddWaterMarkTemplateResponseBodyWaterMarkTemplate `json:"WaterMarkTemplate,omitempty" xml:"WaterMarkTemplate,omitempty" type:"Struct"`
}

func (s AddWaterMarkTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateResponseBody) SetRequestId(v string) *AddWaterMarkTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBody) SetWaterMarkTemplate(v *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) *AddWaterMarkTemplateResponseBody {
	s.WaterMarkTemplate = v
	return s
}

type AddWaterMarkTemplateResponseBodyWaterMarkTemplate struct {
	Dx         *string                                                      `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy         *string                                                      `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height     *string                                                      `json:"Height,omitempty" xml:"Height,omitempty"`
	Id         *string                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	Name       *string                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	RatioRefer *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer `json:"RatioRefer,omitempty" xml:"RatioRefer,omitempty" type:"Struct"`
	ReferPos   *string                                                      `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	State      *string                                                      `json:"State,omitempty" xml:"State,omitempty"`
	Timeline   *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline   `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	Type       *string                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
	Width      *string                                                      `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplate) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplate) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetDx(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Dx = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetDy(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Dy = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetHeight(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Height = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetId(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Id = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetName(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Name = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetRatioRefer(v *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.RatioRefer = v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetReferPos(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.ReferPos = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetState(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.State = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetTimeline(v *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Timeline = v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetType(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Type = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetWidth(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Width = &v
	return s
}

type AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer struct {
	Dx     *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy     *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetDx(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Dx = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetDy(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Dy = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetHeight(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Height = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetWidth(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Width = &v
	return s
}

type AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) SetDuration(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline {
	s.Duration = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) SetStart(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline {
	s.Start = &v
	return s
}

type AddWaterMarkTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddWaterMarkTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddWaterMarkTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateResponse) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateResponse) SetHeaders(v map[string]*string) *AddWaterMarkTemplateResponse {
	s.Headers = v
	return s
}

func (s *AddWaterMarkTemplateResponse) SetStatusCode(v int32) *AddWaterMarkTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *AddWaterMarkTemplateResponse) SetBody(v *AddWaterMarkTemplateResponseBody) *AddWaterMarkTemplateResponse {
	s.Body = v
	return s
}

type BindInputBucketRequest struct {
	// This parameter is required.
	Bucket               *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RoleArn              *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s BindInputBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s BindInputBucketRequest) GoString() string {
	return s.String()
}

func (s *BindInputBucketRequest) SetBucket(v string) *BindInputBucketRequest {
	s.Bucket = &v
	return s
}

func (s *BindInputBucketRequest) SetOwnerAccount(v string) *BindInputBucketRequest {
	s.OwnerAccount = &v
	return s
}

func (s *BindInputBucketRequest) SetOwnerId(v int64) *BindInputBucketRequest {
	s.OwnerId = &v
	return s
}

func (s *BindInputBucketRequest) SetResourceOwnerAccount(v string) *BindInputBucketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BindInputBucketRequest) SetResourceOwnerId(v int64) *BindInputBucketRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *BindInputBucketRequest) SetRoleArn(v string) *BindInputBucketRequest {
	s.RoleArn = &v
	return s
}

type BindInputBucketResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindInputBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindInputBucketResponseBody) GoString() string {
	return s.String()
}

func (s *BindInputBucketResponseBody) SetRequestId(v string) *BindInputBucketResponseBody {
	s.RequestId = &v
	return s
}

type BindInputBucketResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindInputBucketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindInputBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s BindInputBucketResponse) GoString() string {
	return s.String()
}

func (s *BindInputBucketResponse) SetHeaders(v map[string]*string) *BindInputBucketResponse {
	s.Headers = v
	return s
}

func (s *BindInputBucketResponse) SetStatusCode(v int32) *BindInputBucketResponse {
	s.StatusCode = &v
	return s
}

func (s *BindInputBucketResponse) SetBody(v *BindInputBucketResponseBody) *BindInputBucketResponse {
	s.Body = v
	return s
}

type BindOutputBucketRequest struct {
	// This parameter is required.
	Bucket               *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RoleArn              *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s BindOutputBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s BindOutputBucketRequest) GoString() string {
	return s.String()
}

func (s *BindOutputBucketRequest) SetBucket(v string) *BindOutputBucketRequest {
	s.Bucket = &v
	return s
}

func (s *BindOutputBucketRequest) SetOwnerAccount(v string) *BindOutputBucketRequest {
	s.OwnerAccount = &v
	return s
}

func (s *BindOutputBucketRequest) SetOwnerId(v int64) *BindOutputBucketRequest {
	s.OwnerId = &v
	return s
}

func (s *BindOutputBucketRequest) SetResourceOwnerAccount(v string) *BindOutputBucketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BindOutputBucketRequest) SetResourceOwnerId(v int64) *BindOutputBucketRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *BindOutputBucketRequest) SetRoleArn(v string) *BindOutputBucketRequest {
	s.RoleArn = &v
	return s
}

type BindOutputBucketResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindOutputBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindOutputBucketResponseBody) GoString() string {
	return s.String()
}

func (s *BindOutputBucketResponseBody) SetRequestId(v string) *BindOutputBucketResponseBody {
	s.RequestId = &v
	return s
}

type BindOutputBucketResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindOutputBucketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindOutputBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s BindOutputBucketResponse) GoString() string {
	return s.String()
}

func (s *BindOutputBucketResponse) SetHeaders(v map[string]*string) *BindOutputBucketResponse {
	s.Headers = v
	return s
}

func (s *BindOutputBucketResponse) SetStatusCode(v int32) *BindOutputBucketResponse {
	s.StatusCode = &v
	return s
}

func (s *BindOutputBucketResponse) SetBody(v *BindOutputBucketResponseBody) *BindOutputBucketResponse {
	s.Body = v
	return s
}

type CancelJobRequest struct {
	// This parameter is required.
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CancelJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelJobRequest) GoString() string {
	return s.String()
}

func (s *CancelJobRequest) SetJobId(v string) *CancelJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelJobRequest) SetOwnerAccount(v string) *CancelJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CancelJobRequest) SetOwnerId(v int64) *CancelJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelJobRequest) SetResourceOwnerAccount(v string) *CancelJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelJobRequest) SetResourceOwnerId(v int64) *CancelJobRequest {
	s.ResourceOwnerId = &v
	return s
}

type CancelJobResponseBody struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelJobResponseBody) SetJobId(v string) *CancelJobResponseBody {
	s.JobId = &v
	return s
}

func (s *CancelJobResponseBody) SetRequestId(v string) *CancelJobResponseBody {
	s.RequestId = &v
	return s
}

type CancelJobResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelJobResponse) GoString() string {
	return s.String()
}

func (s *CancelJobResponse) SetHeaders(v map[string]*string) *CancelJobResponse {
	s.Headers = v
	return s
}

func (s *CancelJobResponse) SetStatusCode(v int32) *CancelJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelJobResponse) SetBody(v *CancelJobResponseBody) *CancelJobResponse {
	s.Body = v
	return s
}

type CategoryTreeRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CategoryTreeRequest) String() string {
	return tea.Prettify(s)
}

func (s CategoryTreeRequest) GoString() string {
	return s.String()
}

func (s *CategoryTreeRequest) SetOwnerAccount(v string) *CategoryTreeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CategoryTreeRequest) SetOwnerId(v int64) *CategoryTreeRequest {
	s.OwnerId = &v
	return s
}

func (s *CategoryTreeRequest) SetResourceOwnerAccount(v string) *CategoryTreeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CategoryTreeRequest) SetResourceOwnerId(v int64) *CategoryTreeRequest {
	s.ResourceOwnerId = &v
	return s
}

type CategoryTreeResponseBody struct {
	CategoryTree *string `json:"CategoryTree,omitempty" xml:"CategoryTree,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CategoryTreeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CategoryTreeResponseBody) GoString() string {
	return s.String()
}

func (s *CategoryTreeResponseBody) SetCategoryTree(v string) *CategoryTreeResponseBody {
	s.CategoryTree = &v
	return s
}

func (s *CategoryTreeResponseBody) SetRequestId(v string) *CategoryTreeResponseBody {
	s.RequestId = &v
	return s
}

type CategoryTreeResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CategoryTreeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CategoryTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s CategoryTreeResponse) GoString() string {
	return s.String()
}

func (s *CategoryTreeResponse) SetHeaders(v map[string]*string) *CategoryTreeResponse {
	s.Headers = v
	return s
}

func (s *CategoryTreeResponse) SetStatusCode(v int32) *CategoryTreeResponse {
	s.StatusCode = &v
	return s
}

func (s *CategoryTreeResponse) SetBody(v *CategoryTreeResponseBody) *CategoryTreeResponse {
	s.Body = v
	return s
}

type DeactivateMediaWorkflowRequest struct {
	// This parameter is required.
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeactivateMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s DeactivateMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *DeactivateMediaWorkflowRequest) SetMediaWorkflowId(v string) *DeactivateMediaWorkflowRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *DeactivateMediaWorkflowRequest) SetOwnerAccount(v string) *DeactivateMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeactivateMediaWorkflowRequest) SetOwnerId(v int64) *DeactivateMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *DeactivateMediaWorkflowRequest) SetResourceOwnerAccount(v string) *DeactivateMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeactivateMediaWorkflowRequest) SetResourceOwnerId(v int64) *DeactivateMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeactivateMediaWorkflowResponseBody struct {
	MediaWorkflow *DeactivateMediaWorkflowResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeactivateMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeactivateMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *DeactivateMediaWorkflowResponseBody) SetMediaWorkflow(v *DeactivateMediaWorkflowResponseBodyMediaWorkflow) *DeactivateMediaWorkflowResponseBody {
	s.MediaWorkflow = v
	return s
}

func (s *DeactivateMediaWorkflowResponseBody) SetRequestId(v string) *DeactivateMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

type DeactivateMediaWorkflowResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s DeactivateMediaWorkflowResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s DeactivateMediaWorkflowResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *DeactivateMediaWorkflowResponseBodyMediaWorkflow) SetCreationTime(v string) *DeactivateMediaWorkflowResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *DeactivateMediaWorkflowResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *DeactivateMediaWorkflowResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *DeactivateMediaWorkflowResponseBodyMediaWorkflow) SetName(v string) *DeactivateMediaWorkflowResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *DeactivateMediaWorkflowResponseBodyMediaWorkflow) SetState(v string) *DeactivateMediaWorkflowResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *DeactivateMediaWorkflowResponseBodyMediaWorkflow) SetTopology(v string) *DeactivateMediaWorkflowResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

type DeactivateMediaWorkflowResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeactivateMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeactivateMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s DeactivateMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *DeactivateMediaWorkflowResponse) SetHeaders(v map[string]*string) *DeactivateMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *DeactivateMediaWorkflowResponse) SetStatusCode(v int32) *DeactivateMediaWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *DeactivateMediaWorkflowResponse) SetBody(v *DeactivateMediaWorkflowResponseBody) *DeactivateMediaWorkflowResponse {
	s.Body = v
	return s
}

type DeleteCategoryRequest struct {
	// This parameter is required.
	CateId               *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteCategoryRequest) SetCateId(v int64) *DeleteCategoryRequest {
	s.CateId = &v
	return s
}

func (s *DeleteCategoryRequest) SetOwnerAccount(v string) *DeleteCategoryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteCategoryRequest) SetOwnerId(v int64) *DeleteCategoryRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCategoryRequest) SetResourceOwnerAccount(v string) *DeleteCategoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteCategoryRequest) SetResourceOwnerId(v int64) *DeleteCategoryRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteCategoryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCategoryResponseBody) SetRequestId(v string) *DeleteCategoryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCategoryResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteCategoryResponse) SetHeaders(v map[string]*string) *DeleteCategoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteCategoryResponse) SetStatusCode(v int32) *DeleteCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCategoryResponse) SetBody(v *DeleteCategoryResponseBody) *DeleteCategoryResponse {
	s.Body = v
	return s
}

type DeleteMediaRequest struct {
	// This parameter is required.
	MediaIds             *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaRequest) SetMediaIds(v string) *DeleteMediaRequest {
	s.MediaIds = &v
	return s
}

func (s *DeleteMediaRequest) SetOwnerAccount(v string) *DeleteMediaRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteMediaRequest) SetOwnerId(v int64) *DeleteMediaRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMediaRequest) SetResourceOwnerAccount(v string) *DeleteMediaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMediaRequest) SetResourceOwnerId(v int64) *DeleteMediaRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteMediaResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaResponseBody) SetRequestId(v string) *DeleteMediaResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaResponse) SetHeaders(v map[string]*string) *DeleteMediaResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaResponse) SetStatusCode(v int32) *DeleteMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaResponse) SetBody(v *DeleteMediaResponseBody) *DeleteMediaResponse {
	s.Body = v
	return s
}

type DeleteMediaTagRequest struct {
	// This parameter is required.
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tag                  *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s DeleteMediaTagRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaTagRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaTagRequest) SetMediaId(v string) *DeleteMediaTagRequest {
	s.MediaId = &v
	return s
}

func (s *DeleteMediaTagRequest) SetOwnerAccount(v string) *DeleteMediaTagRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteMediaTagRequest) SetOwnerId(v int64) *DeleteMediaTagRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMediaTagRequest) SetResourceOwnerAccount(v string) *DeleteMediaTagRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMediaTagRequest) SetResourceOwnerId(v int64) *DeleteMediaTagRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteMediaTagRequest) SetTag(v string) *DeleteMediaTagRequest {
	s.Tag = &v
	return s
}

type DeleteMediaTagResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaTagResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaTagResponseBody) SetRequestId(v string) *DeleteMediaTagResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaTagResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaTagResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaTagResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaTagResponse) SetHeaders(v map[string]*string) *DeleteMediaTagResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaTagResponse) SetStatusCode(v int32) *DeleteMediaTagResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaTagResponse) SetBody(v *DeleteMediaTagResponseBody) *DeleteMediaTagResponse {
	s.Body = v
	return s
}

type DeleteMediaWorkflowRequest struct {
	// This parameter is required.
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaWorkflowRequest) SetMediaWorkflowId(v string) *DeleteMediaWorkflowRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *DeleteMediaWorkflowRequest) SetOwnerAccount(v string) *DeleteMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteMediaWorkflowRequest) SetOwnerId(v int64) *DeleteMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMediaWorkflowRequest) SetResourceOwnerAccount(v string) *DeleteMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMediaWorkflowRequest) SetResourceOwnerId(v int64) *DeleteMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteMediaWorkflowResponseBody struct {
	MediaWorkflow *DeleteMediaWorkflowResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaWorkflowResponseBody) SetMediaWorkflow(v *DeleteMediaWorkflowResponseBodyMediaWorkflow) *DeleteMediaWorkflowResponseBody {
	s.MediaWorkflow = v
	return s
}

func (s *DeleteMediaWorkflowResponseBody) SetRequestId(v string) *DeleteMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaWorkflowResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s DeleteMediaWorkflowResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaWorkflowResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *DeleteMediaWorkflowResponseBodyMediaWorkflow) SetCreationTime(v string) *DeleteMediaWorkflowResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *DeleteMediaWorkflowResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *DeleteMediaWorkflowResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *DeleteMediaWorkflowResponseBodyMediaWorkflow) SetName(v string) *DeleteMediaWorkflowResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *DeleteMediaWorkflowResponseBodyMediaWorkflow) SetState(v string) *DeleteMediaWorkflowResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *DeleteMediaWorkflowResponseBodyMediaWorkflow) SetTopology(v string) *DeleteMediaWorkflowResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

type DeleteMediaWorkflowResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaWorkflowResponse) SetHeaders(v map[string]*string) *DeleteMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaWorkflowResponse) SetStatusCode(v int32) *DeleteMediaWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaWorkflowResponse) SetBody(v *DeleteMediaWorkflowResponseBody) *DeleteMediaWorkflowResponse {
	s.Body = v
	return s
}

type DeletePipelineRequest struct {
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeletePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineRequest) GoString() string {
	return s.String()
}

func (s *DeletePipelineRequest) SetOwnerAccount(v string) *DeletePipelineRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeletePipelineRequest) SetOwnerId(v int64) *DeletePipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePipelineRequest) SetPipelineId(v string) *DeletePipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *DeletePipelineRequest) SetResourceOwnerAccount(v string) *DeletePipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeletePipelineRequest) SetResourceOwnerId(v int64) *DeletePipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeletePipelineResponseBody struct {
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponseBody) SetPipelineId(v string) *DeletePipelineResponseBody {
	s.PipelineId = &v
	return s
}

func (s *DeletePipelineResponseBody) SetRequestId(v string) *DeletePipelineResponseBody {
	s.RequestId = &v
	return s
}

type DeletePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponse) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponse) SetHeaders(v map[string]*string) *DeletePipelineResponse {
	s.Headers = v
	return s
}

func (s *DeletePipelineResponse) SetStatusCode(v int32) *DeletePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePipelineResponse) SetBody(v *DeletePipelineResponseBody) *DeletePipelineResponse {
	s.Body = v
	return s
}

type DeleteTemplateRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteTemplateRequest) SetOwnerAccount(v string) *DeleteTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteTemplateRequest) SetOwnerId(v int64) *DeleteTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteTemplateRequest) SetResourceOwnerAccount(v string) *DeleteTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteTemplateRequest) SetResourceOwnerId(v int64) *DeleteTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteTemplateRequest) SetTemplateId(v string) *DeleteTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteTemplateResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponseBody) SetRequestId(v string) *DeleteTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTemplateResponseBody) SetTemplateId(v string) *DeleteTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type DeleteTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponse) SetHeaders(v map[string]*string) *DeleteTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteTemplateResponse) SetStatusCode(v int32) *DeleteTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTemplateResponse) SetBody(v *DeleteTemplateResponseBody) *DeleteTemplateResponse {
	s.Body = v
	return s
}

type DeleteWaterMarkTemplateRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	WaterMarkTemplateId *string `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
}

func (s DeleteWaterMarkTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWaterMarkTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteWaterMarkTemplateRequest) SetOwnerAccount(v string) *DeleteWaterMarkTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteWaterMarkTemplateRequest) SetOwnerId(v int64) *DeleteWaterMarkTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteWaterMarkTemplateRequest) SetResourceOwnerAccount(v string) *DeleteWaterMarkTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteWaterMarkTemplateRequest) SetResourceOwnerId(v int64) *DeleteWaterMarkTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteWaterMarkTemplateRequest) SetWaterMarkTemplateId(v string) *DeleteWaterMarkTemplateRequest {
	s.WaterMarkTemplateId = &v
	return s
}

type DeleteWaterMarkTemplateResponseBody struct {
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WaterMarkTemplateId *string `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
}

func (s DeleteWaterMarkTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWaterMarkTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWaterMarkTemplateResponseBody) SetRequestId(v string) *DeleteWaterMarkTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteWaterMarkTemplateResponseBody) SetWaterMarkTemplateId(v string) *DeleteWaterMarkTemplateResponseBody {
	s.WaterMarkTemplateId = &v
	return s
}

type DeleteWaterMarkTemplateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteWaterMarkTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWaterMarkTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWaterMarkTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteWaterMarkTemplateResponse) SetHeaders(v map[string]*string) *DeleteWaterMarkTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteWaterMarkTemplateResponse) SetStatusCode(v int32) *DeleteWaterMarkTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWaterMarkTemplateResponse) SetBody(v *DeleteWaterMarkTemplateResponseBody) *DeleteWaterMarkTemplateResponse {
	s.Body = v
	return s
}

type DescribeMtsUserResourcePackageRequest struct {
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeMtsUserResourcePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMtsUserResourcePackageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMtsUserResourcePackageRequest) SetOwnerId(v int64) *DescribeMtsUserResourcePackageRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMtsUserResourcePackageRequest) SetSecurityToken(v string) *DescribeMtsUserResourcePackageRequest {
	s.SecurityToken = &v
	return s
}

type DescribeMtsUserResourcePackageResponseBody struct {
	RequestId            *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourcePackageInfos *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos `json:"ResourcePackageInfos,omitempty" xml:"ResourcePackageInfos,omitempty" type:"Struct"`
}

func (s DescribeMtsUserResourcePackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMtsUserResourcePackageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMtsUserResourcePackageResponseBody) SetRequestId(v string) *DescribeMtsUserResourcePackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBody) SetResourcePackageInfos(v *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos) *DescribeMtsUserResourcePackageResponseBody {
	s.ResourcePackageInfos = v
	return s
}

type DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos struct {
	ResourcePackageInfo []*DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo `json:"ResourcePackageInfo,omitempty" xml:"ResourcePackageInfo,omitempty" type:"Repeated"`
}

func (s DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos) GoString() string {
	return s.String()
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos) SetResourcePackageInfo(v []*DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos {
	s.ResourcePackageInfo = v
	return s
}

type DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo struct {
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CurrCapacity  *string `json:"CurrCapacity,omitempty" xml:"CurrCapacity,omitempty"`
	DisplayName   *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	InitCapacity  *string `json:"InitCapacity,omitempty" xml:"InitCapacity,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) GoString() string {
	return s.String()
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetCommodityCode(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.CommodityCode = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetCurrCapacity(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.CurrCapacity = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetDisplayName(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.DisplayName = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetInitCapacity(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.InitCapacity = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetInstanceId(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.InstanceId = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetStatus(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.Status = &v
	return s
}

type DescribeMtsUserResourcePackageResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMtsUserResourcePackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMtsUserResourcePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMtsUserResourcePackageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMtsUserResourcePackageResponse) SetHeaders(v map[string]*string) *DescribeMtsUserResourcePackageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMtsUserResourcePackageResponse) SetStatusCode(v int32) *DescribeMtsUserResourcePackageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponse) SetBody(v *DescribeMtsUserResourcePackageResponseBody) *DescribeMtsUserResourcePackageResponse {
	s.Body = v
	return s
}

type ListAllCategoryRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListAllCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAllCategoryRequest) GoString() string {
	return s.String()
}

func (s *ListAllCategoryRequest) SetOwnerAccount(v string) *ListAllCategoryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListAllCategoryRequest) SetOwnerId(v int64) *ListAllCategoryRequest {
	s.OwnerId = &v
	return s
}

func (s *ListAllCategoryRequest) SetResourceOwnerAccount(v string) *ListAllCategoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListAllCategoryRequest) SetResourceOwnerId(v int64) *ListAllCategoryRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListAllCategoryResponseBody struct {
	CategoryList *ListAllCategoryResponseBodyCategoryList `json:"CategoryList,omitempty" xml:"CategoryList,omitempty" type:"Struct"`
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAllCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAllCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *ListAllCategoryResponseBody) SetCategoryList(v *ListAllCategoryResponseBodyCategoryList) *ListAllCategoryResponseBody {
	s.CategoryList = v
	return s
}

func (s *ListAllCategoryResponseBody) SetRequestId(v string) *ListAllCategoryResponseBody {
	s.RequestId = &v
	return s
}

type ListAllCategoryResponseBodyCategoryList struct {
	Category []*ListAllCategoryResponseBodyCategoryListCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Repeated"`
}

func (s ListAllCategoryResponseBodyCategoryList) String() string {
	return tea.Prettify(s)
}

func (s ListAllCategoryResponseBodyCategoryList) GoString() string {
	return s.String()
}

func (s *ListAllCategoryResponseBodyCategoryList) SetCategory(v []*ListAllCategoryResponseBodyCategoryListCategory) *ListAllCategoryResponseBodyCategoryList {
	s.Category = v
	return s
}

type ListAllCategoryResponseBodyCategoryListCategory struct {
	CateId   *string `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	Level    *string `json:"Level,omitempty" xml:"Level,omitempty"`
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s ListAllCategoryResponseBodyCategoryListCategory) String() string {
	return tea.Prettify(s)
}

func (s ListAllCategoryResponseBodyCategoryListCategory) GoString() string {
	return s.String()
}

func (s *ListAllCategoryResponseBodyCategoryListCategory) SetCateId(v string) *ListAllCategoryResponseBodyCategoryListCategory {
	s.CateId = &v
	return s
}

func (s *ListAllCategoryResponseBodyCategoryListCategory) SetCateName(v string) *ListAllCategoryResponseBodyCategoryListCategory {
	s.CateName = &v
	return s
}

func (s *ListAllCategoryResponseBodyCategoryListCategory) SetLevel(v string) *ListAllCategoryResponseBodyCategoryListCategory {
	s.Level = &v
	return s
}

func (s *ListAllCategoryResponseBodyCategoryListCategory) SetParentId(v string) *ListAllCategoryResponseBodyCategoryListCategory {
	s.ParentId = &v
	return s
}

type ListAllCategoryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAllCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAllCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAllCategoryResponse) GoString() string {
	return s.String()
}

func (s *ListAllCategoryResponse) SetHeaders(v map[string]*string) *ListAllCategoryResponse {
	s.Headers = v
	return s
}

func (s *ListAllCategoryResponse) SetStatusCode(v int32) *ListAllCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAllCategoryResponse) SetBody(v *ListAllCategoryResponseBody) *ListAllCategoryResponse {
	s.Body = v
	return s
}

type ListAllMediaBucketRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListAllMediaBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAllMediaBucketRequest) GoString() string {
	return s.String()
}

func (s *ListAllMediaBucketRequest) SetOwnerAccount(v string) *ListAllMediaBucketRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListAllMediaBucketRequest) SetOwnerId(v int64) *ListAllMediaBucketRequest {
	s.OwnerId = &v
	return s
}

func (s *ListAllMediaBucketRequest) SetResourceOwnerAccount(v string) *ListAllMediaBucketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListAllMediaBucketRequest) SetResourceOwnerId(v int64) *ListAllMediaBucketRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListAllMediaBucketResponseBody struct {
	MediaBucketList *ListAllMediaBucketResponseBodyMediaBucketList `json:"MediaBucketList,omitempty" xml:"MediaBucketList,omitempty" type:"Struct"`
	RequestId       *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAllMediaBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAllMediaBucketResponseBody) GoString() string {
	return s.String()
}

func (s *ListAllMediaBucketResponseBody) SetMediaBucketList(v *ListAllMediaBucketResponseBodyMediaBucketList) *ListAllMediaBucketResponseBody {
	s.MediaBucketList = v
	return s
}

func (s *ListAllMediaBucketResponseBody) SetRequestId(v string) *ListAllMediaBucketResponseBody {
	s.RequestId = &v
	return s
}

type ListAllMediaBucketResponseBodyMediaBucketList struct {
	MediaBucket []*ListAllMediaBucketResponseBodyMediaBucketListMediaBucket `json:"MediaBucket,omitempty" xml:"MediaBucket,omitempty" type:"Repeated"`
}

func (s ListAllMediaBucketResponseBodyMediaBucketList) String() string {
	return tea.Prettify(s)
}

func (s ListAllMediaBucketResponseBodyMediaBucketList) GoString() string {
	return s.String()
}

func (s *ListAllMediaBucketResponseBodyMediaBucketList) SetMediaBucket(v []*ListAllMediaBucketResponseBodyMediaBucketListMediaBucket) *ListAllMediaBucketResponseBodyMediaBucketList {
	s.MediaBucket = v
	return s
}

type ListAllMediaBucketResponseBodyMediaBucketListMediaBucket struct {
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListAllMediaBucketResponseBodyMediaBucketListMediaBucket) String() string {
	return tea.Prettify(s)
}

func (s ListAllMediaBucketResponseBodyMediaBucketListMediaBucket) GoString() string {
	return s.String()
}

func (s *ListAllMediaBucketResponseBodyMediaBucketListMediaBucket) SetBucket(v string) *ListAllMediaBucketResponseBodyMediaBucketListMediaBucket {
	s.Bucket = &v
	return s
}

func (s *ListAllMediaBucketResponseBodyMediaBucketListMediaBucket) SetType(v string) *ListAllMediaBucketResponseBodyMediaBucketListMediaBucket {
	s.Type = &v
	return s
}

type ListAllMediaBucketResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAllMediaBucketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAllMediaBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAllMediaBucketResponse) GoString() string {
	return s.String()
}

func (s *ListAllMediaBucketResponse) SetHeaders(v map[string]*string) *ListAllMediaBucketResponse {
	s.Headers = v
	return s
}

func (s *ListAllMediaBucketResponse) SetStatusCode(v int32) *ListAllMediaBucketResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAllMediaBucketResponse) SetBody(v *ListAllMediaBucketResponseBody) *ListAllMediaBucketResponse {
	s.Body = v
	return s
}

type ListJobRequest struct {
	EndOfJobCreatedTimeRange   *string `json:"EndOfJobCreatedTimeRange,omitempty" xml:"EndOfJobCreatedTimeRange,omitempty"`
	MaximumPageSize            *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	NextPageToken              *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount               *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PipelineId                 *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResourceOwnerAccount       *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StartOfJobCreatedTimeRange *string `json:"StartOfJobCreatedTimeRange,omitempty" xml:"StartOfJobCreatedTimeRange,omitempty"`
	State                      *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobRequest) GoString() string {
	return s.String()
}

func (s *ListJobRequest) SetEndOfJobCreatedTimeRange(v string) *ListJobRequest {
	s.EndOfJobCreatedTimeRange = &v
	return s
}

func (s *ListJobRequest) SetMaximumPageSize(v int64) *ListJobRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *ListJobRequest) SetNextPageToken(v string) *ListJobRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListJobRequest) SetOwnerAccount(v string) *ListJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListJobRequest) SetOwnerId(v int64) *ListJobRequest {
	s.OwnerId = &v
	return s
}

func (s *ListJobRequest) SetPipelineId(v string) *ListJobRequest {
	s.PipelineId = &v
	return s
}

func (s *ListJobRequest) SetResourceOwnerAccount(v string) *ListJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListJobRequest) SetResourceOwnerId(v int64) *ListJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListJobRequest) SetStartOfJobCreatedTimeRange(v string) *ListJobRequest {
	s.StartOfJobCreatedTimeRange = &v
	return s
}

func (s *ListJobRequest) SetState(v string) *ListJobRequest {
	s.State = &v
	return s
}

type ListJobResponseBody struct {
	JobList       *ListJobResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
	NextPageToken *string                     `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	RequestId     *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobResponseBody) SetJobList(v *ListJobResponseBodyJobList) *ListJobResponseBody {
	s.JobList = v
	return s
}

func (s *ListJobResponseBody) SetNextPageToken(v string) *ListJobResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListJobResponseBody) SetRequestId(v string) *ListJobResponseBody {
	s.RequestId = &v
	return s
}

type ListJobResponseBodyJobList struct {
	Job []*ListJobResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobList) SetJob(v []*ListJobResponseBodyJobListJob) *ListJobResponseBodyJobList {
	s.Job = v
	return s
}

type ListJobResponseBodyJobListJob struct {
	Code             *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	CreationTime     *string                                        `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FinishTime       *string                                        `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input            *ListJobResponseBodyJobListJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId            *string                                        `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MNSMessageResult *ListJobResponseBodyJobListJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	Output           *ListJobResponseBodyJobListJobOutput           `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Percent          *int64                                         `json:"Percent,omitempty" xml:"Percent,omitempty"`
	PipelineId       *string                                        `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	State            *string                                        `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListJobResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJob) SetCode(v string) *ListJobResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetCreationTime(v string) *ListJobResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetFinishTime(v string) *ListJobResponseBodyJobListJob {
	s.FinishTime = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetInput(v *ListJobResponseBodyJobListJobInput) *ListJobResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetJobId(v string) *ListJobResponseBodyJobListJob {
	s.JobId = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetMNSMessageResult(v *ListJobResponseBodyJobListJobMNSMessageResult) *ListJobResponseBodyJobListJob {
	s.MNSMessageResult = v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetMessage(v string) *ListJobResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetOutput(v *ListJobResponseBodyJobListJobOutput) *ListJobResponseBodyJobListJob {
	s.Output = v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetPercent(v int64) *ListJobResponseBodyJobListJob {
	s.Percent = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetPipelineId(v string) *ListJobResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetState(v string) *ListJobResponseBodyJobListJob {
	s.State = &v
	return s
}

type ListJobResponseBodyJobListJobInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s ListJobResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobInput) SetBucket(v string) *ListJobResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

func (s *ListJobResponseBodyJobListJobInput) SetLocation(v string) *ListJobResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *ListJobResponseBodyJobListJobInput) SetObject(v string) *ListJobResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

type ListJobResponseBodyJobListJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s ListJobResponseBodyJobListJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobMNSMessageResult) SetErrorCode(v string) *ListJobResponseBodyJobListJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *ListJobResponseBodyJobListJobMNSMessageResult) SetErrorMessage(v string) *ListJobResponseBodyJobListJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *ListJobResponseBodyJobListJobMNSMessageResult) SetMessageId(v string) *ListJobResponseBodyJobListJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type ListJobResponseBodyJobListJobOutput struct {
	AmixList               *ListJobResponseBodyJobListJobOutputAmixList               `json:"AmixList,omitempty" xml:"AmixList,omitempty" type:"Struct"`
	Audio                  *ListJobResponseBodyJobListJobOutputAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                    `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	Clip                   *ListJobResponseBodyJobListJobOutputClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	Container              *ListJobResponseBodyJobListJobOutputContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	DeWatermark            *string                                                    `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	Encryption             *ListJobResponseBodyJobListJobOutputEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	M3U8NonStandardSupport *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                    `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	MergeList              *ListJobResponseBodyJobListJobOutputMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	MuxConfig              *ListJobResponseBodyJobListJobOutputMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	OpeningList            *ListJobResponseBodyJobListJobOutputOpeningList            `json:"OpeningList,omitempty" xml:"OpeningList,omitempty" type:"Struct"`
	OutSubtitleList        *ListJobResponseBodyJobListJobOutputOutSubtitleList        `json:"OutSubtitleList,omitempty" xml:"OutSubtitleList,omitempty" type:"Struct"`
	OutputFile             *ListJobResponseBodyJobListJobOutputOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Priority               *string                                                    `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Properties             *ListJobResponseBodyJobListJobOutputProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
	Rotate                 *string                                                    `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	SubtitleConfig         *ListJobResponseBodyJobListJobOutputSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	SuperReso              *ListJobResponseBodyJobListJobOutputSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	TailSlateList          *ListJobResponseBodyJobListJobOutputTailSlateList          `json:"TailSlateList,omitempty" xml:"TailSlateList,omitempty" type:"Struct"`
	TemplateId             *string                                                    `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TransConfig            *ListJobResponseBodyJobListJobOutputTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	UserData               *string                                                    `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Video                  *ListJobResponseBodyJobListJobOutputVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                    `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	WaterMarkConfigUrl     *string                                                    `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	WaterMarkList          *ListJobResponseBodyJobListJobOutputWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutput) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutput) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutput) SetAmixList(v *ListJobResponseBodyJobListJobOutputAmixList) *ListJobResponseBodyJobListJobOutput {
	s.AmixList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetAudio(v *ListJobResponseBodyJobListJobOutputAudio) *ListJobResponseBodyJobListJobOutput {
	s.Audio = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetAudioStreamMap(v string) *ListJobResponseBodyJobListJobOutput {
	s.AudioStreamMap = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetClip(v *ListJobResponseBodyJobListJobOutputClip) *ListJobResponseBodyJobListJobOutput {
	s.Clip = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetContainer(v *ListJobResponseBodyJobListJobOutputContainer) *ListJobResponseBodyJobListJobOutput {
	s.Container = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetDeWatermark(v string) *ListJobResponseBodyJobListJobOutput {
	s.DeWatermark = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetEncryption(v *ListJobResponseBodyJobListJobOutputEncryption) *ListJobResponseBodyJobListJobOutput {
	s.Encryption = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetM3U8NonStandardSupport(v *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport) *ListJobResponseBodyJobListJobOutput {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetMergeConfigUrl(v string) *ListJobResponseBodyJobListJobOutput {
	s.MergeConfigUrl = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetMergeList(v *ListJobResponseBodyJobListJobOutputMergeList) *ListJobResponseBodyJobListJobOutput {
	s.MergeList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetMuxConfig(v *ListJobResponseBodyJobListJobOutputMuxConfig) *ListJobResponseBodyJobListJobOutput {
	s.MuxConfig = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetOpeningList(v *ListJobResponseBodyJobListJobOutputOpeningList) *ListJobResponseBodyJobListJobOutput {
	s.OpeningList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetOutSubtitleList(v *ListJobResponseBodyJobListJobOutputOutSubtitleList) *ListJobResponseBodyJobListJobOutput {
	s.OutSubtitleList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetOutputFile(v *ListJobResponseBodyJobListJobOutputOutputFile) *ListJobResponseBodyJobListJobOutput {
	s.OutputFile = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetPriority(v string) *ListJobResponseBodyJobListJobOutput {
	s.Priority = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetProperties(v *ListJobResponseBodyJobListJobOutputProperties) *ListJobResponseBodyJobListJobOutput {
	s.Properties = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetRotate(v string) *ListJobResponseBodyJobListJobOutput {
	s.Rotate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetSubtitleConfig(v *ListJobResponseBodyJobListJobOutputSubtitleConfig) *ListJobResponseBodyJobListJobOutput {
	s.SubtitleConfig = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetSuperReso(v *ListJobResponseBodyJobListJobOutputSuperReso) *ListJobResponseBodyJobListJobOutput {
	s.SuperReso = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetTailSlateList(v *ListJobResponseBodyJobListJobOutputTailSlateList) *ListJobResponseBodyJobListJobOutput {
	s.TailSlateList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetTemplateId(v string) *ListJobResponseBodyJobListJobOutput {
	s.TemplateId = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetTransConfig(v *ListJobResponseBodyJobListJobOutputTransConfig) *ListJobResponseBodyJobListJobOutput {
	s.TransConfig = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetUserData(v string) *ListJobResponseBodyJobListJobOutput {
	s.UserData = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetVideo(v *ListJobResponseBodyJobListJobOutputVideo) *ListJobResponseBodyJobListJobOutput {
	s.Video = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetVideoStreamMap(v string) *ListJobResponseBodyJobListJobOutput {
	s.VideoStreamMap = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetWaterMarkConfigUrl(v string) *ListJobResponseBodyJobListJobOutput {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetWaterMarkList(v *ListJobResponseBodyJobListJobOutputWaterMarkList) *ListJobResponseBodyJobListJobOutput {
	s.WaterMarkList = v
	return s
}

type ListJobResponseBodyJobListJobOutputAmixList struct {
	Amix []*ListJobResponseBodyJobListJobOutputAmixListAmix `json:"Amix,omitempty" xml:"Amix,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputAmixList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputAmixList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputAmixList) SetAmix(v []*ListJobResponseBodyJobListJobOutputAmixListAmix) *ListJobResponseBodyJobListJobOutputAmixList {
	s.Amix = v
	return s
}

type ListJobResponseBodyJobListJobOutputAmixListAmix struct {
	AmixURL    *string `json:"AmixURL,omitempty" xml:"AmixURL,omitempty"`
	Duration   *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Map        *string `json:"Map,omitempty" xml:"Map,omitempty"`
	MixDurMode *string `json:"MixDurMode,omitempty" xml:"MixDurMode,omitempty"`
	Start      *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputAmixListAmix) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputAmixListAmix) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputAmixListAmix) SetAmixURL(v string) *ListJobResponseBodyJobListJobOutputAmixListAmix {
	s.AmixURL = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAmixListAmix) SetDuration(v string) *ListJobResponseBodyJobListJobOutputAmixListAmix {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAmixListAmix) SetMap(v string) *ListJobResponseBodyJobListJobOutputAmixListAmix {
	s.Map = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAmixListAmix) SetMixDurMode(v string) *ListJobResponseBodyJobListJobOutputAmixListAmix {
	s.MixDurMode = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAmixListAmix) SetStart(v string) *ListJobResponseBodyJobListJobOutputAmixListAmix {
	s.Start = &v
	return s
}

type ListJobResponseBodyJobListJobOutputAudio struct {
	Bitrate    *string                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string                                         `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string                                         `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string                                         `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string                                         `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Samplerate *string                                         `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *ListJobResponseBodyJobListJobOutputAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputAudio) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputAudio) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetChannels(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Channels = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetCodec(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Codec = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetProfile(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Profile = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetQscale(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Qscale = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetSamplerate(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Samplerate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetVolume(v *ListJobResponseBodyJobListJobOutputAudioVolume) *ListJobResponseBodyJobListJobOutputAudio {
	s.Volume = v
	return s
}

type ListJobResponseBodyJobListJobOutputAudioVolume struct {
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputAudioVolume) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputAudioVolume) SetLevel(v string) *ListJobResponseBodyJobListJobOutputAudioVolume {
	s.Level = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudioVolume) SetMethod(v string) *ListJobResponseBodyJobListJobOutputAudioVolume {
	s.Method = &v
	return s
}

type ListJobResponseBodyJobListJobOutputClip struct {
	TimeSpan *ListJobResponseBodyJobListJobOutputClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputClip) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputClip) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputClip) SetTimeSpan(v *ListJobResponseBodyJobListJobOutputClipTimeSpan) *ListJobResponseBodyJobListJobOutputClip {
	s.TimeSpan = v
	return s
}

type ListJobResponseBodyJobListJobOutputClipTimeSpan struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputClipTimeSpan) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputClipTimeSpan) SetDuration(v string) *ListJobResponseBodyJobListJobOutputClipTimeSpan {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputClipTimeSpan) SetSeek(v string) *ListJobResponseBodyJobListJobOutputClipTimeSpan {
	s.Seek = &v
	return s
}

type ListJobResponseBodyJobListJobOutputContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputContainer) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputContainer) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputContainer) SetFormat(v string) *ListJobResponseBodyJobListJobOutputContainer {
	s.Format = &v
	return s
}

type ListJobResponseBodyJobListJobOutputEncryption struct {
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputEncryption) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputEncryption) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetId(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.Id = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetKey(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.Key = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetKeyType(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.KeyType = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetKeyUri(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.KeyUri = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetSkipCnt(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.SkipCnt = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetType(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.Type = &v
	return s
}

type ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport struct {
	TS *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport) SetTS(v *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS) *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport {
	s.TS = v
	return s
}

type ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS struct {
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS) SetMd5Support(v bool) *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS) SetSizeSupport(v bool) *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

type ListJobResponseBodyJobListJobOutputMergeList struct {
	Merge []*ListJobResponseBodyJobListJobOutputMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputMergeList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMergeList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMergeList) SetMerge(v []*ListJobResponseBodyJobListJobOutputMergeListMerge) *ListJobResponseBodyJobListJobOutputMergeList {
	s.Merge = v
	return s
}

type ListJobResponseBodyJobListJobOutputMergeListMerge struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMergeListMerge) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMergeListMerge) SetDuration(v string) *ListJobResponseBodyJobListJobOutputMergeListMerge {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMergeListMerge) SetMergeURL(v string) *ListJobResponseBodyJobListJobOutputMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMergeListMerge) SetRoleArn(v string) *ListJobResponseBodyJobListJobOutputMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMergeListMerge) SetStart(v string) *ListJobResponseBodyJobListJobOutputMergeListMerge {
	s.Start = &v
	return s
}

type ListJobResponseBodyJobListJobOutputMuxConfig struct {
	Gif     *ListJobResponseBodyJobListJobOutputMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *ListJobResponseBodyJobListJobOutputMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
	Webp    *ListJobResponseBodyJobListJobOutputMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMuxConfig) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfig) SetGif(v *ListJobResponseBodyJobListJobOutputMuxConfigGif) *ListJobResponseBodyJobListJobOutputMuxConfig {
	s.Gif = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfig) SetSegment(v *ListJobResponseBodyJobListJobOutputMuxConfigSegment) *ListJobResponseBodyJobListJobOutputMuxConfig {
	s.Segment = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfig) SetWebp(v *ListJobResponseBodyJobListJobOutputMuxConfigWebp) *ListJobResponseBodyJobListJobOutputMuxConfig {
	s.Webp = v
	return s
}

type ListJobResponseBodyJobListJobOutputMuxConfigGif struct {
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigGif) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigGif) SetDitherMode(v string) *ListJobResponseBodyJobListJobOutputMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigGif) SetFinalDelay(v string) *ListJobResponseBodyJobListJobOutputMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigGif) SetIsCustomPalette(v string) *ListJobResponseBodyJobListJobOutputMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigGif) SetLoop(v string) *ListJobResponseBodyJobListJobOutputMuxConfigGif {
	s.Loop = &v
	return s
}

type ListJobResponseBodyJobListJobOutputMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigSegment) SetDuration(v string) *ListJobResponseBodyJobListJobOutputMuxConfigSegment {
	s.Duration = &v
	return s
}

type ListJobResponseBodyJobListJobOutputMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigWebp) SetLoop(v string) *ListJobResponseBodyJobListJobOutputMuxConfigWebp {
	s.Loop = &v
	return s
}

type ListJobResponseBodyJobListJobOutputOpeningList struct {
	Opening []*ListJobResponseBodyJobListJobOutputOpeningListOpening `json:"Opening,omitempty" xml:"Opening,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputOpeningList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOpeningList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOpeningList) SetOpening(v []*ListJobResponseBodyJobListJobOutputOpeningListOpening) *ListJobResponseBodyJobListJobOutputOpeningList {
	s.Opening = v
	return s
}

type ListJobResponseBodyJobListJobOutputOpeningListOpening struct {
	Height  *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Start   *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Width   *string `json:"Width,omitempty" xml:"Width,omitempty"`
	OpenUrl *string `json:"openUrl,omitempty" xml:"openUrl,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputOpeningListOpening) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOpeningListOpening) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOpeningListOpening) SetHeight(v string) *ListJobResponseBodyJobListJobOutputOpeningListOpening {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOpeningListOpening) SetStart(v string) *ListJobResponseBodyJobListJobOutputOpeningListOpening {
	s.Start = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOpeningListOpening) SetWidth(v string) *ListJobResponseBodyJobListJobOutputOpeningListOpening {
	s.Width = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOpeningListOpening) SetOpenUrl(v string) *ListJobResponseBodyJobListJobOutputOpeningListOpening {
	s.OpenUrl = &v
	return s
}

type ListJobResponseBodyJobListJobOutputOutSubtitleList struct {
	OutSubtitle []*ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle `json:"OutSubtitle,omitempty" xml:"OutSubtitle,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleList) SetOutSubtitle(v []*ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) *ListJobResponseBodyJobListJobOutputOutSubtitleList {
	s.OutSubtitle = v
	return s
}

type ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle struct {
	Map             *string                                                                       `json:"Map,omitempty" xml:"Map,omitempty"`
	Message         *string                                                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	OutSubtitleFile *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile `json:"OutSubtitleFile,omitempty" xml:"OutSubtitleFile,omitempty" type:"Struct"`
	Success         *bool                                                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetMap(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Map = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetMessage(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Message = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetOutSubtitleFile(v *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.OutSubtitleFile = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetSuccess(v bool) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Success = &v
	return s
}

type ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetBucket(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Bucket = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetLocation(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Location = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetObject(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Object = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetRoleArn(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.RoleArn = &v
	return s
}

type ListJobResponseBodyJobListJobOutputOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputOutputFile) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOutputFile) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOutputFile) SetBucket(v string) *ListJobResponseBodyJobListJobOutputOutputFile {
	s.Bucket = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutputFile) SetLocation(v string) *ListJobResponseBodyJobListJobOutputOutputFile {
	s.Location = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutputFile) SetObject(v string) *ListJobResponseBodyJobListJobOutputOutputFile {
	s.Object = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutputFile) SetRoleArn(v string) *ListJobResponseBodyJobListJobOutputOutputFile {
	s.RoleArn = &v
	return s
}

type ListJobResponseBodyJobListJobOutputProperties struct {
	Bitrate    *string                                               `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration   *string                                               `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileFormat *string                                               `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	FileSize   *string                                               `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	Format     *ListJobResponseBodyJobListJobOutputPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	Fps        *string                                               `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height     *string                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	Streams    *ListJobResponseBodyJobListJobOutputPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Width      *string                                               `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputProperties) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputProperties) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetDuration(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetFileFormat(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.FileFormat = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetFileSize(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.FileSize = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetFormat(v *ListJobResponseBodyJobListJobOutputPropertiesFormat) *ListJobResponseBodyJobListJobOutputProperties {
	s.Format = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetFps(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.Fps = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetHeight(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetStreams(v *ListJobResponseBodyJobListJobOutputPropertiesStreams) *ListJobResponseBodyJobListJobOutputProperties {
	s.Streams = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetWidth(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.Width = &v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesFormat struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesFormat) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetDuration(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetFormatLongName(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetFormatName(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.FormatName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetNumPrograms(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetNumStreams(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetSize(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.Size = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetStartTime(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.StartTime = &v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreams struct {
	AudioStreamList    *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
	VideoStreamList    *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreams) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreams) SetAudioStreamList(v *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) *ListJobResponseBodyJobListJobOutputPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreams) SetSubtitleStreamList(v *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) *ListJobResponseBodyJobListJobOutputPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreams) SetVideoStreamList(v *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) *ListJobResponseBodyJobListJobOutputPropertiesStreams {
	s.VideoStreamList = v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList struct {
	AudioStream []*ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) SetAudioStream(v []*ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList struct {
	VideoStream []*ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) SetVideoStream(v []*ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream struct {
	AvgFPS         *string                                                                                    `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	Bitrate        *string                                                                                    `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecLongName  *string                                                                                    `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string                                                                                    `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string                                                                                    `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string                                                                                    `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string                                                                                    `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Dar            *string                                                                                    `json:"Dar,omitempty" xml:"Dar,omitempty"`
	Duration       *string                                                                                    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                    `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames     *string                                                                                    `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Height         *string                                                                                    `json:"Height,omitempty" xml:"Height,omitempty"`
	Index          *string                                                                                    `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string                                                                                    `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Level          *string                                                                                    `json:"Level,omitempty" xml:"Level,omitempty"`
	NetworkCost    *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	NumFrames      *string                                                                                    `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	PixFmt         *string                                                                                    `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Profile        *string                                                                                    `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Sar            *string                                                                                    `json:"Sar,omitempty" xml:"Sar,omitempty"`
	StartTime      *string                                                                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string                                                                                    `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Width          *string                                                                                    `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfig struct {
	ExtSubtitleList *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfig) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfig) SetExtSubtitleList(v *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) *ListJobResponseBodyJobListJobOutputSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfig) SetSubtitleList(v *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList) *ListJobResponseBodyJobListJobOutputSubtitleConfig {
	s.SubtitleList = v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                           `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                           `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList struct {
	Subtitle []*ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList) SetSubtitle(v []*ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) SetMap(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type ListJobResponseBodyJobListJobOutputSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputSuperReso) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSuperReso) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSuperReso) SetIsHalfSample(v string) *ListJobResponseBodyJobListJobOutputSuperReso {
	s.IsHalfSample = &v
	return s
}

type ListJobResponseBodyJobListJobOutputTailSlateList struct {
	TailSlate []*ListJobResponseBodyJobListJobOutputTailSlateListTailSlate `json:"TailSlate,omitempty" xml:"TailSlate,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputTailSlateList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputTailSlateList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateList) SetTailSlate(v []*ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) *ListJobResponseBodyJobListJobOutputTailSlateList {
	s.TailSlate = v
	return s
}

type ListJobResponseBodyJobListJobOutputTailSlateListTailSlate struct {
	BgColor       *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	BlendDuration *string `json:"BlendDuration,omitempty" xml:"BlendDuration,omitempty"`
	Height        *string `json:"Height,omitempty" xml:"Height,omitempty"`
	IsMergeAudio  *bool   `json:"IsMergeAudio,omitempty" xml:"IsMergeAudio,omitempty"`
	Start         *string `json:"Start,omitempty" xml:"Start,omitempty"`
	TailUrl       *string `json:"TailUrl,omitempty" xml:"TailUrl,omitempty"`
	Width         *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetBgColor(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.BgColor = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetBlendDuration(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.BlendDuration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetHeight(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetIsMergeAudio(v bool) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.IsMergeAudio = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetStart(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Start = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetTailUrl(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.TailUrl = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetWidth(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Width = &v
	return s
}

type ListJobResponseBodyJobListJobOutputTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputTransConfig) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputTransConfig) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetAdjDarMethod(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckAudioBitrate(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckAudioBitrateFail(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckReso(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckResoFail(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckVideoBitrate(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckVideoBitrateFail(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetTransMode(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.TransMode = &v
	return s
}

type ListJobResponseBodyJobListJobOutputVideo struct {
	Bitrate      *string                                             `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd   *ListJobResponseBodyJobListJobOutputVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	Bufsize      *string                                             `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec        *string                                             `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf          *string                                             `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Crop         *string                                             `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Degrain      *string                                             `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	Fps          *string                                             `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop          *string                                             `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height       *string                                             `json:"Height,omitempty" xml:"Height,omitempty"`
	MaxFps       *string                                             `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Maxrate      *string                                             `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Pad          *string                                             `json:"Pad,omitempty" xml:"Pad,omitempty"`
	PixFmt       *string                                             `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Preset       *string                                             `json:"Preset,omitempty" xml:"Preset,omitempty"`
	Profile      *string                                             `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale       *string                                             `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	ResoPriority *string                                             `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
	ScanMode     *string                                             `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width        *string                                             `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputVideo) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputVideo) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetBitrateBnd(v *ListJobResponseBodyJobListJobOutputVideoBitrateBnd) *ListJobResponseBodyJobListJobOutputVideo {
	s.BitrateBnd = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetBufsize(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Bufsize = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetCodec(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Codec = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetCrf(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Crf = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetCrop(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Crop = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetDegrain(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Degrain = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetFps(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Fps = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetGop(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Gop = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetHeight(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetMaxFps(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.MaxFps = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetMaxrate(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Maxrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetPad(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Pad = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetPixFmt(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.PixFmt = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetPreset(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Preset = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetProfile(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Profile = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetQscale(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Qscale = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetResoPriority(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.ResoPriority = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetScanMode(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.ScanMode = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetWidth(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Width = &v
	return s
}

type ListJobResponseBodyJobListJobOutputVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputVideoBitrateBnd) SetMax(v string) *ListJobResponseBodyJobListJobOutputVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideoBitrateBnd) SetMin(v string) *ListJobResponseBodyJobListJobOutputVideoBitrateBnd {
	s.Min = &v
	return s
}

type ListJobResponseBodyJobListJobOutputWaterMarkList struct {
	WaterMark []*ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkList) SetWaterMark(v []*ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) *ListJobResponseBodyJobListJobOutputWaterMarkList {
	s.WaterMark = v
	return s
}

type ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark struct {
	Dx                  *string                                                             `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy                  *string                                                             `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height              *string                                                             `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	ReferPos            *string                                                             `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Type                *string                                                             `json:"Type,omitempty" xml:"Type,omitempty"`
	WaterMarkTemplateId *string                                                             `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Width               *string                                                             `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetDx(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetDy(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetHeight(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetInputFile(v *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetReferPos(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetType(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetWidth(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Width = &v
	return s
}

type ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetBucket(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetLocation(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetObject(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

type ListJobResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponse) GoString() string {
	return s.String()
}

func (s *ListJobResponse) SetHeaders(v map[string]*string) *ListJobResponse {
	s.Headers = v
	return s
}

func (s *ListJobResponse) SetStatusCode(v int32) *ListJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ListJobResponse) SetBody(v *ListJobResponseBody) *ListJobResponse {
	s.Body = v
	return s
}

type ListMediaRequest struct {
	From                 *string `json:"From,omitempty" xml:"From,omitempty"`
	MaximumPageSize      *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	NextPageToken        *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	To                   *string `json:"To,omitempty" xml:"To,omitempty"`
}

func (s ListMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaRequest) GoString() string {
	return s.String()
}

func (s *ListMediaRequest) SetFrom(v string) *ListMediaRequest {
	s.From = &v
	return s
}

func (s *ListMediaRequest) SetMaximumPageSize(v int64) *ListMediaRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *ListMediaRequest) SetNextPageToken(v string) *ListMediaRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaRequest) SetOwnerAccount(v string) *ListMediaRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListMediaRequest) SetOwnerId(v int64) *ListMediaRequest {
	s.OwnerId = &v
	return s
}

func (s *ListMediaRequest) SetResourceOwnerAccount(v string) *ListMediaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListMediaRequest) SetResourceOwnerId(v int64) *ListMediaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListMediaRequest) SetTo(v string) *ListMediaRequest {
	s.To = &v
	return s
}

type ListMediaResponseBody struct {
	MediaList     *ListMediaResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Struct"`
	NextPageToken *string                         `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	RequestId     *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBody) SetMediaList(v *ListMediaResponseBodyMediaList) *ListMediaResponseBody {
	s.MediaList = v
	return s
}

func (s *ListMediaResponseBody) SetNextPageToken(v string) *ListMediaResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaResponseBody) SetRequestId(v string) *ListMediaResponseBody {
	s.RequestId = &v
	return s
}

type ListMediaResponseBodyMediaList struct {
	Media []*ListMediaResponseBodyMediaListMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Repeated"`
}

func (s ListMediaResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBodyMediaList) SetMedia(v []*ListMediaResponseBodyMediaListMedia) *ListMediaResponseBodyMediaList {
	s.Media = v
	return s
}

type ListMediaResponseBodyMediaListMedia struct {
	Bitrate      *string                                       `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CateId       *int64                                        `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CensorState  *string                                       `json:"CensorState,omitempty" xml:"CensorState,omitempty"`
	CoverURL     *string                                       `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	CreationTime *string                                       `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string                                       `json:"Description,omitempty" xml:"Description,omitempty"`
	Duration     *string                                       `json:"Duration,omitempty" xml:"Duration,omitempty"`
	File         *ListMediaResponseBodyMediaListMediaFile      `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	Format       *string                                       `json:"Format,omitempty" xml:"Format,omitempty"`
	Fps          *string                                       `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height       *string                                       `json:"Height,omitempty" xml:"Height,omitempty"`
	MediaId      *string                                       `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	PublishState *string                                       `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	RunIdList    *ListMediaResponseBodyMediaListMediaRunIdList `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Size         *string                                       `json:"Size,omitempty" xml:"Size,omitempty"`
	Tags         *ListMediaResponseBodyMediaListMediaTags      `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Title        *string                                       `json:"Title,omitempty" xml:"Title,omitempty"`
	Width        *string                                       `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaResponseBodyMediaListMedia) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBodyMediaListMedia) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBodyMediaListMedia) SetBitrate(v string) *ListMediaResponseBodyMediaListMedia {
	s.Bitrate = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetCateId(v int64) *ListMediaResponseBodyMediaListMedia {
	s.CateId = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetCensorState(v string) *ListMediaResponseBodyMediaListMedia {
	s.CensorState = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetCoverURL(v string) *ListMediaResponseBodyMediaListMedia {
	s.CoverURL = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetCreationTime(v string) *ListMediaResponseBodyMediaListMedia {
	s.CreationTime = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetDescription(v string) *ListMediaResponseBodyMediaListMedia {
	s.Description = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetDuration(v string) *ListMediaResponseBodyMediaListMedia {
	s.Duration = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetFile(v *ListMediaResponseBodyMediaListMediaFile) *ListMediaResponseBodyMediaListMedia {
	s.File = v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetFormat(v string) *ListMediaResponseBodyMediaListMedia {
	s.Format = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetFps(v string) *ListMediaResponseBodyMediaListMedia {
	s.Fps = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetHeight(v string) *ListMediaResponseBodyMediaListMedia {
	s.Height = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetMediaId(v string) *ListMediaResponseBodyMediaListMedia {
	s.MediaId = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetPublishState(v string) *ListMediaResponseBodyMediaListMedia {
	s.PublishState = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetRunIdList(v *ListMediaResponseBodyMediaListMediaRunIdList) *ListMediaResponseBodyMediaListMedia {
	s.RunIdList = v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetSize(v string) *ListMediaResponseBodyMediaListMedia {
	s.Size = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetTags(v *ListMediaResponseBodyMediaListMediaTags) *ListMediaResponseBodyMediaListMedia {
	s.Tags = v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetTitle(v string) *ListMediaResponseBodyMediaListMedia {
	s.Title = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetWidth(v string) *ListMediaResponseBodyMediaListMedia {
	s.Width = &v
	return s
}

type ListMediaResponseBodyMediaListMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s ListMediaResponseBodyMediaListMediaFile) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBodyMediaListMediaFile) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBodyMediaListMediaFile) SetState(v string) *ListMediaResponseBodyMediaListMediaFile {
	s.State = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMediaFile) SetURL(v string) *ListMediaResponseBodyMediaListMediaFile {
	s.URL = &v
	return s
}

type ListMediaResponseBodyMediaListMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s ListMediaResponseBodyMediaListMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBodyMediaListMediaRunIdList) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBodyMediaListMediaRunIdList) SetRunId(v []*string) *ListMediaResponseBodyMediaListMediaRunIdList {
	s.RunId = v
	return s
}

type ListMediaResponseBodyMediaListMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListMediaResponseBodyMediaListMediaTags) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBodyMediaListMediaTags) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBodyMediaListMediaTags) SetTag(v []*string) *ListMediaResponseBodyMediaListMediaTags {
	s.Tag = v
	return s
}

type ListMediaResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponse) GoString() string {
	return s.String()
}

func (s *ListMediaResponse) SetHeaders(v map[string]*string) *ListMediaResponse {
	s.Headers = v
	return s
}

func (s *ListMediaResponse) SetStatusCode(v int32) *ListMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaResponse) SetBody(v *ListMediaResponseBody) *ListMediaResponse {
	s.Body = v
	return s
}

type ListMediaWorkflowExecutionsRequest struct {
	InputFileURL         *string `json:"InputFileURL,omitempty" xml:"InputFileURL,omitempty"`
	MaximumPageSize      *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	MediaWorkflowName    *string `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	NextPageToken        *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListMediaWorkflowExecutionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsRequest) SetInputFileURL(v string) *ListMediaWorkflowExecutionsRequest {
	s.InputFileURL = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetMaximumPageSize(v int64) *ListMediaWorkflowExecutionsRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetMediaWorkflowId(v string) *ListMediaWorkflowExecutionsRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetMediaWorkflowName(v string) *ListMediaWorkflowExecutionsRequest {
	s.MediaWorkflowName = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetNextPageToken(v string) *ListMediaWorkflowExecutionsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetOwnerAccount(v string) *ListMediaWorkflowExecutionsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetOwnerId(v int64) *ListMediaWorkflowExecutionsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetResourceOwnerAccount(v string) *ListMediaWorkflowExecutionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetResourceOwnerId(v int64) *ListMediaWorkflowExecutionsRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListMediaWorkflowExecutionsResponseBody struct {
	MediaWorkflowExecutionList *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList `json:"MediaWorkflowExecutionList,omitempty" xml:"MediaWorkflowExecutionList,omitempty" type:"Struct"`
	NextPageToken              *string                                                            `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	RequestId                  *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBody) SetMediaWorkflowExecutionList(v *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList) *ListMediaWorkflowExecutionsResponseBody {
	s.MediaWorkflowExecutionList = v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBody) SetNextPageToken(v string) *ListMediaWorkflowExecutionsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBody) SetRequestId(v string) *ListMediaWorkflowExecutionsResponseBody {
	s.RequestId = &v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList struct {
	MediaWorkflowExecution []*ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution `json:"MediaWorkflowExecution,omitempty" xml:"MediaWorkflowExecution,omitempty" type:"Repeated"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList) SetMediaWorkflowExecution(v []*ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList {
	s.MediaWorkflowExecution = v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution struct {
	ActivityList    *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList `json:"ActivityList,omitempty" xml:"ActivityList,omitempty" type:"Struct"`
	CreationTime    *string                                                                                              `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Input           *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput        `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MediaId         *string                                                                                              `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaWorkflowId *string                                                                                              `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Name            *string                                                                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	RunId           *string                                                                                              `json:"RunId,omitempty" xml:"RunId,omitempty"`
	State           *string                                                                                              `json:"State,omitempty" xml:"State,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetActivityList(v *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.ActivityList = v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetCreationTime(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.CreationTime = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetInput(v *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.Input = v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetMediaId(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.MediaId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetMediaWorkflowId(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.MediaWorkflowId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetName(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.Name = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetRunId(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.RunId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetState(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.State = &v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList struct {
	Activity []*ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity `json:"Activity,omitempty" xml:"Activity,omitempty" type:"Repeated"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) SetActivity(v []*ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList {
	s.Activity = v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity struct {
	Code             *string                                                                                                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	EndTime          *string                                                                                                                      `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	JobId            *string                                                                                                                      `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MNSMessageResult *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                                                                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	Name             *string                                                                                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	StartTime        *string                                                                                                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	State            *string                                                                                                                      `json:"State,omitempty" xml:"State,omitempty"`
	Type             *string                                                                                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetCode(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Code = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetEndTime(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.EndTime = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetJobId(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.JobId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetMNSMessageResult(v *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.MNSMessageResult = v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetMessage(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Message = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetName(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Name = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetStartTime(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.StartTime = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetState(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.State = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetType(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Type = &v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetErrorCode(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetErrorMessage(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetMessageId(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.MessageId = &v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput struct {
	InputFile *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	UserData  *string                                                                                                `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) SetInputFile(v *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput {
	s.InputFile = v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) SetUserData(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput {
	s.UserData = &v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetBucket(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Bucket = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetLocation(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Location = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetObject(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Object = &v
	return s
}

type ListMediaWorkflowExecutionsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaWorkflowExecutionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponse) SetHeaders(v map[string]*string) *ListMediaWorkflowExecutionsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaWorkflowExecutionsResponse) SetStatusCode(v int32) *ListMediaWorkflowExecutionsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponse) SetBody(v *ListMediaWorkflowExecutionsResponseBody) *ListMediaWorkflowExecutionsResponse {
	s.Body = v
	return s
}

type QueryAnalysisJobListRequest struct {
	// This parameter is required.
	AnalysisJobIds       *string `json:"AnalysisJobIds,omitempty" xml:"AnalysisJobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryAnalysisJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListRequest) SetAnalysisJobIds(v string) *QueryAnalysisJobListRequest {
	s.AnalysisJobIds = &v
	return s
}

func (s *QueryAnalysisJobListRequest) SetOwnerAccount(v string) *QueryAnalysisJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryAnalysisJobListRequest) SetOwnerId(v int64) *QueryAnalysisJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryAnalysisJobListRequest) SetResourceOwnerAccount(v string) *QueryAnalysisJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryAnalysisJobListRequest) SetResourceOwnerId(v int64) *QueryAnalysisJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryAnalysisJobListResponseBody struct {
	AnalysisJobList        *QueryAnalysisJobListResponseBodyAnalysisJobList        `json:"AnalysisJobList,omitempty" xml:"AnalysisJobList,omitempty" type:"Struct"`
	NonExistAnalysisJobIds *QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds `json:"NonExistAnalysisJobIds,omitempty" xml:"NonExistAnalysisJobIds,omitempty" type:"Struct"`
	RequestId              *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryAnalysisJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBody) SetAnalysisJobList(v *QueryAnalysisJobListResponseBodyAnalysisJobList) *QueryAnalysisJobListResponseBody {
	s.AnalysisJobList = v
	return s
}

func (s *QueryAnalysisJobListResponseBody) SetNonExistAnalysisJobIds(v *QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds) *QueryAnalysisJobListResponseBody {
	s.NonExistAnalysisJobIds = v
	return s
}

func (s *QueryAnalysisJobListResponseBody) SetRequestId(v string) *QueryAnalysisJobListResponseBody {
	s.RequestId = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobList struct {
	AnalysisJob []*QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob `json:"AnalysisJob,omitempty" xml:"AnalysisJob,omitempty" type:"Repeated"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobList) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobList) SetAnalysisJob(v []*QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) *QueryAnalysisJobListResponseBodyAnalysisJobList {
	s.AnalysisJob = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob struct {
	AnalysisConfig   *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig   `json:"AnalysisConfig,omitempty" xml:"AnalysisConfig,omitempty" type:"Struct"`
	Code             *string                                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	CreationTime     *string                                                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Id               *string                                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
	InputFile        *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile        `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	MNSMessageResult *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	Percent          *int64                                                                      `json:"Percent,omitempty" xml:"Percent,omitempty"`
	PipelineId       *string                                                                     `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Priority         *string                                                                     `json:"Priority,omitempty" xml:"Priority,omitempty"`
	State            *string                                                                     `json:"State,omitempty" xml:"State,omitempty"`
	TemplateList     *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList     `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Struct"`
	UserData         *string                                                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetAnalysisConfig(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.AnalysisConfig = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetCode(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.Code = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetCreationTime(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.CreationTime = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetId(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.Id = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetInputFile(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.InputFile = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetMNSMessageResult(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.MNSMessageResult = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetMessage(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.Message = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetPercent(v int64) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.Percent = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetPipelineId(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.PipelineId = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetPriority(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.Priority = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetState(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.State = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetTemplateList(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.TemplateList = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetUserData(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.UserData = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig struct {
	PropertiesControl *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl `json:"PropertiesControl,omitempty" xml:"PropertiesControl,omitempty" type:"Struct"`
	QualityControl    *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl    `json:"QualityControl,omitempty" xml:"QualityControl,omitempty" type:"Struct"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig) SetPropertiesControl(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig {
	s.PropertiesControl = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig) SetQualityControl(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig {
	s.QualityControl = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl struct {
	Crop        *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop `json:"Crop,omitempty" xml:"Crop,omitempty" type:"Struct"`
	Deinterlace *string                                                                                        `json:"Deinterlace,omitempty" xml:"Deinterlace,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl) SetCrop(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl {
	s.Crop = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl) SetDeinterlace(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl {
	s.Deinterlace = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop struct {
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Left   *string `json:"Left,omitempty" xml:"Left,omitempty"`
	Mode   *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	Top    *string `json:"Top,omitempty" xml:"Top,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) SetHeight(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Height = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) SetLeft(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Left = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) SetMode(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Mode = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) SetTop(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Top = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) SetWidth(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Width = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl struct {
	MethodStreaming *string `json:"MethodStreaming,omitempty" xml:"MethodStreaming,omitempty"`
	RateQuality     *string `json:"RateQuality,omitempty" xml:"RateQuality,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl) SetMethodStreaming(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl {
	s.MethodStreaming = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl) SetRateQuality(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl {
	s.RateQuality = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) SetBucket(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile {
	s.Bucket = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) SetLocation(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile {
	s.Location = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) SetObject(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile {
	s.Object = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) SetErrorCode(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) SetErrorMessage(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) SetMessageId(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList struct {
	Template []*QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList) SetTemplate(v []*QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList {
	s.Template = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate struct {
	Audio       *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container   *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Id          *string                                                                                    `json:"Id,omitempty" xml:"Id,omitempty"`
	MuxConfig   *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                                                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	State       *string                                                                                    `json:"State,omitempty" xml:"State,omitempty"`
	TransConfig *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetAudio(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.Audio = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetContainer(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.Container = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetId(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.Id = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetMuxConfig(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.MuxConfig = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetName(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.Name = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetState(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.State = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetTransConfig(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.TransConfig = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetVideo(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.Video = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio struct {
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetBitrate(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Bitrate = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetChannels(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Channels = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetCodec(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Codec = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetProfile(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Profile = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetQscale(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetSamplerate(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Samplerate = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer) SetFormat(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer {
	s.Format = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig struct {
	Gif     *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig) SetGif(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig) SetSegment(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig {
	s.Segment = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif struct {
	FinalDelay *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	Loop       *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif) SetFinalDelay(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif) SetLoop(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment) SetDuration(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig struct {
	TransMode *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig) SetTransMode(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig {
	s.TransMode = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo struct {
	Bitrate    *string                                                                                        `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	Bufsize    *string                                                                                        `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec      *string                                                                                        `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf        *string                                                                                        `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Degrain    *string                                                                                        `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	Fps        *string                                                                                        `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop        *string                                                                                        `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height     *string                                                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	Maxrate    *string                                                                                        `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	PixFmt     *string                                                                                        `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Preset     *string                                                                                        `json:"Preset,omitempty" xml:"Preset,omitempty"`
	Profile    *string                                                                                        `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string                                                                                        `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	ScanMode   *string                                                                                        `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width      *string                                                                                        `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetBitrate(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetBitrateBnd(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetBufsize(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetCodec(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Codec = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetCrf(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Crf = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetDegrain(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetFps(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Fps = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetGop(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Gop = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetHeight(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Height = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetMaxrate(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetPixFmt(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetPreset(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Preset = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetProfile(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Profile = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetQscale(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetScanMode(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.ScanMode = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetWidth(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Width = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd) SetMax(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd) SetMin(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds) SetString_(v []*string) *QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds {
	s.String_ = v
	return s
}

type QueryAnalysisJobListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryAnalysisJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryAnalysisJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponse) SetHeaders(v map[string]*string) *QueryAnalysisJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryAnalysisJobListResponse) SetStatusCode(v int32) *QueryAnalysisJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryAnalysisJobListResponse) SetBody(v *QueryAnalysisJobListResponseBody) *QueryAnalysisJobListResponse {
	s.Body = v
	return s
}

type QueryEditingJobListRequest struct {
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryEditingJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListRequest) SetJobIds(v string) *QueryEditingJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryEditingJobListRequest) SetOwnerAccount(v string) *QueryEditingJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryEditingJobListRequest) SetOwnerId(v int64) *QueryEditingJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryEditingJobListRequest) SetResourceOwnerAccount(v string) *QueryEditingJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryEditingJobListRequest) SetResourceOwnerId(v int64) *QueryEditingJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryEditingJobListResponseBody struct {
	JobList        *QueryEditingJobListResponseBodyJobList        `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
	NonExistJobIds *QueryEditingJobListResponseBodyNonExistJobIds `json:"NonExistJobIds,omitempty" xml:"NonExistJobIds,omitempty" type:"Struct"`
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryEditingJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBody) SetJobList(v *QueryEditingJobListResponseBodyJobList) *QueryEditingJobListResponseBody {
	s.JobList = v
	return s
}

func (s *QueryEditingJobListResponseBody) SetNonExistJobIds(v *QueryEditingJobListResponseBodyNonExistJobIds) *QueryEditingJobListResponseBody {
	s.NonExistJobIds = v
	return s
}

func (s *QueryEditingJobListResponseBody) SetRequestId(v string) *QueryEditingJobListResponseBody {
	s.RequestId = &v
	return s
}

type QueryEditingJobListResponseBodyJobList struct {
	Job []*QueryEditingJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobList) SetJob(v []*QueryEditingJobListResponseBodyJobListJob) *QueryEditingJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryEditingJobListResponseBodyJobListJob struct {
	Code             *string                                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	CreationTime     *string                                                    `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	EditingConfig    *QueryEditingJobListResponseBodyJobListJobEditingConfig    `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty" type:"Struct"`
	EditingInputs    *QueryEditingJobListResponseBodyJobListJobEditingInputs    `json:"EditingInputs,omitempty" xml:"EditingInputs,omitempty" type:"Struct"`
	FinishTime       *string                                                    `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	JobId            *string                                                    `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MNSMessageResult *QueryEditingJobListResponseBodyJobListJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	Percent          *int64                                                     `json:"Percent,omitempty" xml:"Percent,omitempty"`
	PipelineId       *string                                                    `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	State            *string                                                    `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetCode(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetEditingConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfig) *QueryEditingJobListResponseBodyJobListJob {
	s.EditingConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetEditingInputs(v *QueryEditingJobListResponseBodyJobListJobEditingInputs) *QueryEditingJobListResponseBodyJobListJob {
	s.EditingInputs = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetFinishTime(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.FinishTime = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetJobId(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.JobId = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetMNSMessageResult(v *QueryEditingJobListResponseBodyJobListJobMNSMessageResult) *QueryEditingJobListResponseBodyJobListJob {
	s.MNSMessageResult = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetMessage(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetPercent(v int64) *QueryEditingJobListResponseBodyJobListJob {
	s.Percent = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetState(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfig struct {
	Audio                  *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                                       `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	Clip                   *QueryEditingJobListResponseBodyJobListJobEditingConfigClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	Container              *QueryEditingJobListResponseBodyJobListJobEditingConfigContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	DeWatermark            *string                                                                       `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	DigiWaterMark          *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark          `json:"DigiWaterMark,omitempty" xml:"DigiWaterMark,omitempty" type:"Struct"`
	Editing                *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing                `json:"Editing,omitempty" xml:"Editing,omitempty" type:"Struct"`
	Encryption             *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	M3U8NonStandardSupport *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                                       `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	MergeList              *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	MuxConfig              *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	OutputFile             *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Priority               *string                                                                       `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Properties             *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
	Rotate                 *string                                                                       `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	SubtitleConfig         *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	SuperReso              *QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	TemplateId             *string                                                                       `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TransConfig            *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	UserData               *string                                                                       `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Video                  *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                                       `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	WaterMarkConfigUrl     *string                                                                       `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	WaterMarkList          *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetAudio(v *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Audio = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetAudioStreamMap(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.AudioStreamMap = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetClip(v *QueryEditingJobListResponseBodyJobListJobEditingConfigClip) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Clip = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetContainer(v *QueryEditingJobListResponseBodyJobListJobEditingConfigContainer) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Container = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetDeWatermark(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.DeWatermark = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetDigiWaterMark(v *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.DigiWaterMark = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetEditing(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Editing = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetEncryption(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Encryption = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetM3U8NonStandardSupport(v *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetMergeConfigUrl(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.MergeConfigUrl = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetMergeList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.MergeList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetMuxConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.MuxConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetOutputFile(v *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.OutputFile = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetPriority(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Priority = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetProperties(v *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Properties = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetRotate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Rotate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetSubtitleConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.SubtitleConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetSuperReso(v *QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.SuperReso = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetTemplateId(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.TemplateId = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetTransConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.TransConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetUserData(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.UserData = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetVideo(v *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Video = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetVideoStreamMap(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.VideoStreamMap = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetWaterMarkConfigUrl(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetWaterMarkList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.WaterMarkList = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigAudio struct {
	Bitrate    *string                                                            `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string                                                            `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string                                                            `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string                                                            `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string                                                            `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Samplerate *string                                                            `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetChannels(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Channels = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetCodec(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Codec = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetProfile(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Profile = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetQscale(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Qscale = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetSamplerate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Samplerate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetVolume(v *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Volume = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume struct {
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume) SetLevel(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume {
	s.Level = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume) SetMethod(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume {
	s.Method = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigClip struct {
	TimeSpan *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigClip) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigClip) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigClip) SetTimeSpan(v *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan) *QueryEditingJobListResponseBodyJobListJobEditingConfigClip {
	s.TimeSpan = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan) SetSeek(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan {
	s.Seek = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigContainer) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigContainer) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigContainer) SetFormat(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigContainer {
	s.Format = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark struct {
	Alpha     *string                                                                       `json:"Alpha,omitempty" xml:"Alpha,omitempty"`
	InputFile *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	Type      *string                                                                       `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) SetAlpha(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark {
	s.Alpha = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) SetInputFile(v *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark {
	s.InputFile = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) SetType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark {
	s.Type = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) SetBucket(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile {
	s.Bucket = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) SetLocation(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) SetObject(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile {
	s.Object = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditing struct {
	ClipList *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList `json:"ClipList,omitempty" xml:"ClipList,omitempty" type:"Struct"`
	Timeline *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditing) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditing) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing) SetClipList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing {
	s.ClipList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing) SetTimeline(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing {
	s.Timeline = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList struct {
	Clip []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList) SetClip(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList {
	s.Clip = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip struct {
	Effects       *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects `json:"Effects,omitempty" xml:"Effects,omitempty" type:"Struct"`
	Id            *string                                                                           `json:"Id,omitempty" xml:"Id,omitempty"`
	In            *string                                                                           `json:"In,omitempty" xml:"In,omitempty"`
	Out           *string                                                                           `json:"Out,omitempty" xml:"Out,omitempty"`
	SourceID      *string                                                                           `json:"SourceID,omitempty" xml:"SourceID,omitempty"`
	SourceStrmMap *string                                                                           `json:"SourceStrmMap,omitempty" xml:"SourceStrmMap,omitempty"`
	SourceType    *string                                                                           `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Type          *string                                                                           `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetEffects(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.Effects = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetId(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.Id = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetIn(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.In = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetOut(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.Out = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetSourceID(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.SourceID = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetSourceStrmMap(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.SourceStrmMap = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetSourceType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.SourceType = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.Type = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects struct {
	Effect []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect `json:"Effect,omitempty" xml:"Effect,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects) SetEffect(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects {
	s.Effect = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect struct {
	Effect       *string `json:"Effect,omitempty" xml:"Effect,omitempty"`
	EffectConfig *string `json:"EffectConfig,omitempty" xml:"EffectConfig,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect) SetEffect(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect {
	s.Effect = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect) SetEffectConfig(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect {
	s.EffectConfig = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline struct {
	TimelineConfig *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig `json:"TimelineConfig,omitempty" xml:"TimelineConfig,omitempty" type:"Struct"`
	TrackList      *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList      `json:"TrackList,omitempty" xml:"TrackList,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline) SetTimelineConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline {
	s.TimelineConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline) SetTrackList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline {
	s.TrackList = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig struct {
	TimelineConfigAudio *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio `json:"TimelineConfigAudio,omitempty" xml:"TimelineConfigAudio,omitempty" type:"Struct"`
	TimelineConfigVideo *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo `json:"TimelineConfigVideo,omitempty" xml:"TimelineConfigVideo,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig) SetTimelineConfigAudio(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig {
	s.TimelineConfigAudio = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig) SetTimelineConfigVideo(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig {
	s.TimelineConfigVideo = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio struct {
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels      *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Samplerate    *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetChannelLayout(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.ChannelLayout = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetChannels(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Channels = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetSamplerate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Samplerate = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo struct {
	BgColor        *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	Fps            *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height         *string `json:"Height,omitempty" xml:"Height,omitempty"`
	IsGpuData      *string `json:"IsGpuData,omitempty" xml:"IsGpuData,omitempty"`
	IsOneTrackData *string `json:"IsOneTrackData,omitempty" xml:"IsOneTrackData,omitempty"`
	ReclosePrec    *string `json:"ReclosePrec,omitempty" xml:"ReclosePrec,omitempty"`
	RenderRatio    *string `json:"RenderRatio,omitempty" xml:"RenderRatio,omitempty"`
	Width          *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetBgColor(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.BgColor = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetFps(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Fps = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetHeight(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Height = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetIsGpuData(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsGpuData = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetIsOneTrackData(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsOneTrackData = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetReclosePrec(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.ReclosePrec = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetRenderRatio(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.RenderRatio = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetWidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Width = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList struct {
	Track []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack `json:"Track,omitempty" xml:"Track,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList) SetTrack(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList {
	s.Track = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack struct {
	Clips *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips `json:"Clips,omitempty" xml:"Clips,omitempty" type:"Struct"`
	Id    *string                                                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
	Order *string                                                                                   `json:"Order,omitempty" xml:"Order,omitempty"`
	Type  *string                                                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) SetClips(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack {
	s.Clips = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) SetId(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack {
	s.Id = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) SetOrder(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack {
	s.Order = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) SetType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack {
	s.Type = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips struct {
	Clip []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips) SetClip(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips {
	s.Clip = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip struct {
	ClipsConfig *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig `json:"ClipsConfig,omitempty" xml:"ClipsConfig,omitempty" type:"Struct"`
	In          *string                                                                                                  `json:"In,omitempty" xml:"In,omitempty"`
	Out         *string                                                                                                  `json:"Out,omitempty" xml:"Out,omitempty"`
	ClipID      *string                                                                                                  `json:"clipID,omitempty" xml:"clipID,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetClipsConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.ClipsConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetIn(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.In = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetOut(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.Out = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetClipID(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.ClipID = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig struct {
	ClipsConfigVideo *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo `json:"ClipsConfigVideo,omitempty" xml:"ClipsConfigVideo,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) SetClipsConfigVideo(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig {
	s.ClipsConfigVideo = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo struct {
	L *string `json:"L,omitempty" xml:"L,omitempty"`
	T *string `json:"T,omitempty" xml:"T,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetL(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.L = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetT(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.T = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption struct {
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetId(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.Id = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetKey(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.Key = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetKeyType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.KeyType = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetKeyUri(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.KeyUri = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetSkipCnt(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.SkipCnt = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.Type = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport struct {
	TS *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport) SetTS(v *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS) *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport {
	s.TS = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS struct {
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS) SetMd5Support(v bool) *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS) SetSizeSupport(v bool) *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList struct {
	Merge []*QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList) SetMerge(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList {
	s.Merge = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) SetMergeURL(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) SetRoleArn(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) SetStart(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge {
	s.Start = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig struct {
	Gif     *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig) SetGif(v *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig {
	s.Gif = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig) SetSegment(v *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig {
	s.Segment = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif struct {
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) SetDitherMode(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) SetFinalDelay(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) SetIsCustomPalette(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) SetLoop(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif {
	s.Loop = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment {
	s.Duration = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) SetBucket(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile {
	s.Bucket = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) SetLocation(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) SetObject(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) SetRoleArn(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile {
	s.RoleArn = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigProperties struct {
	Bitrate    *string                                                                  `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration   *string                                                                  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileFormat *string                                                                  `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	FileSize   *string                                                                  `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	Format     *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	Fps        *string                                                                  `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height     *string                                                                  `json:"Height,omitempty" xml:"Height,omitempty"`
	Streams    *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Width      *string                                                                  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetFileFormat(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.FileFormat = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetFileSize(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.FileSize = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetFormat(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Format = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetFps(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Fps = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetHeight(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Height = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetStreams(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Streams = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetWidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Width = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetFormatLongName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetFormatName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.FormatName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetNumPrograms(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetNumStreams(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetSize(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.Size = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetStartTime(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.StartTime = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams struct {
	AudioStreamList    *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
	VideoStreamList    *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) SetAudioStreamList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) SetSubtitleStreamList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) SetVideoStreamList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams {
	s.VideoStreamList = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList struct {
	AudioStream []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList) SetAudioStream(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList struct {
	VideoStream []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList) SetVideoStream(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream struct {
	AvgFPS         *string                                                                                                       `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	Bitrate        *string                                                                                                       `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecLongName  *string                                                                                                       `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string                                                                                                       `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string                                                                                                       `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string                                                                                                       `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string                                                                                                       `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Dar            *string                                                                                                       `json:"Dar,omitempty" xml:"Dar,omitempty"`
	Duration       *string                                                                                                       `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                                       `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames     *string                                                                                                       `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Height         *string                                                                                                       `json:"Height,omitempty" xml:"Height,omitempty"`
	Index          *string                                                                                                       `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string                                                                                                       `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Level          *string                                                                                                       `json:"Level,omitempty" xml:"Level,omitempty"`
	NetworkCost    *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	NumFrames      *string                                                                                                       `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	PixFmt         *string                                                                                                       `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Profile        *string                                                                                                       `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Sar            *string                                                                                                       `json:"Sar,omitempty" xml:"Sar,omitempty"`
	StartTime      *string                                                                                                       `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string                                                                                                       `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Width          *string                                                                                                       `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig struct {
	ExtSubtitleList *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig) SetExtSubtitleList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig) SetSubtitleList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig {
	s.SubtitleList = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                                              `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                                              `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList struct {
	Subtitle []*QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList) SetSubtitle(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle) SetMap(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso) SetIsHalfSample(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso {
	s.IsHalfSample = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	Duration                *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetAdjDarMethod(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckAudioBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckAudioBitrateFail(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckReso(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckResoFail(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckVideoBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckVideoBitrateFail(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetTransMode(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.TransMode = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigVideo struct {
	Bitrate    *string                                                                `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	Bufsize    *string                                                                `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec      *string                                                                `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf        *string                                                                `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Crop       *string                                                                `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Degrain    *string                                                                `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	Fps        *string                                                                `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop        *string                                                                `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height     *string                                                                `json:"Height,omitempty" xml:"Height,omitempty"`
	MaxFps     *string                                                                `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Maxrate    *string                                                                `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Pad        *string                                                                `json:"Pad,omitempty" xml:"Pad,omitempty"`
	PixFmt     *string                                                                `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Preset     *string                                                                `json:"Preset,omitempty" xml:"Preset,omitempty"`
	Profile    *string                                                                `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string                                                                `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	ScanMode   *string                                                                `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width      *string                                                                `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetBitrateBnd(v *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.BitrateBnd = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetBufsize(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Bufsize = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetCodec(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Codec = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetCrf(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Crf = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetCrop(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Crop = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetDegrain(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Degrain = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetFps(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Fps = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetGop(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Gop = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetHeight(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Height = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetMaxFps(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.MaxFps = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetMaxrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Maxrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetPad(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Pad = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetPixFmt(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.PixFmt = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetPreset(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Preset = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetProfile(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Profile = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetQscale(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Qscale = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetScanMode(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.ScanMode = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetWidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Width = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd) SetMax(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd) SetMin(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd {
	s.Min = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList struct {
	WaterMark []*QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList) SetWaterMark(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList {
	s.WaterMark = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark struct {
	Dx                  *string                                                                                `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy                  *string                                                                                `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height              *string                                                                                `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	ReferPos            *string                                                                                `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Type                *string                                                                                `json:"Type,omitempty" xml:"Type,omitempty"`
	WaterMarkTemplateId *string                                                                                `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Width               *string                                                                                `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetDx(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetDy(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetHeight(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetInputFile(v *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetReferPos(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetWidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.Width = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) SetBucket(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) SetLocation(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) SetObject(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingInputs struct {
	EditingInput []*QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput `json:"EditingInput,omitempty" xml:"EditingInput,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputs) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputs) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputs) SetEditingInput(v []*QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) *QueryEditingJobListResponseBodyJobListJobEditingInputs {
	s.EditingInput = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput struct {
	Id          *string                                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	InputConfig *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	InputFile   *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile   `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) SetId(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput {
	s.Id = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) SetInputConfig(v *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput {
	s.InputConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) SetInputFile(v *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput {
	s.InputFile = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig struct {
	DeinterlaceMethod *string `json:"DeinterlaceMethod,omitempty" xml:"DeinterlaceMethod,omitempty"`
	IsNormalSar       *string `json:"IsNormalSar,omitempty" xml:"IsNormalSar,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig) SetDeinterlaceMethod(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig {
	s.DeinterlaceMethod = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig) SetIsNormalSar(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig {
	s.IsNormalSar = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) SetBucket(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile {
	s.Bucket = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) SetLocation(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile {
	s.Location = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) SetObject(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile {
	s.Object = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobMNSMessageResult) SetErrorCode(v string) *QueryEditingJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobMNSMessageResult) SetErrorMessage(v string) *QueryEditingJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobMNSMessageResult) SetMessageId(v string) *QueryEditingJobListResponseBodyJobListJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type QueryEditingJobListResponseBodyNonExistJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyNonExistJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyNonExistJobIds) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyNonExistJobIds) SetString_(v []*string) *QueryEditingJobListResponseBodyNonExistJobIds {
	s.String_ = v
	return s
}

type QueryEditingJobListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryEditingJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryEditingJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponse) SetHeaders(v map[string]*string) *QueryEditingJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryEditingJobListResponse) SetStatusCode(v int32) *QueryEditingJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryEditingJobListResponse) SetBody(v *QueryEditingJobListResponseBody) *QueryEditingJobListResponse {
	s.Body = v
	return s
}

type QueryJobListRequest struct {
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryJobListRequest) SetJobIds(v string) *QueryJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryJobListRequest) SetOwnerAccount(v string) *QueryJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryJobListRequest) SetOwnerId(v int64) *QueryJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryJobListRequest) SetResourceOwnerAccount(v string) *QueryJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryJobListRequest) SetResourceOwnerId(v int64) *QueryJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryJobListResponseBody struct {
	JobList        *QueryJobListResponseBodyJobList        `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
	NonExistJobIds *QueryJobListResponseBodyNonExistJobIds `json:"NonExistJobIds,omitempty" xml:"NonExistJobIds,omitempty" type:"Struct"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBody) SetJobList(v *QueryJobListResponseBodyJobList) *QueryJobListResponseBody {
	s.JobList = v
	return s
}

func (s *QueryJobListResponseBody) SetNonExistJobIds(v *QueryJobListResponseBodyNonExistJobIds) *QueryJobListResponseBody {
	s.NonExistJobIds = v
	return s
}

func (s *QueryJobListResponseBody) SetRequestId(v string) *QueryJobListResponseBody {
	s.RequestId = &v
	return s
}

type QueryJobListResponseBodyJobList struct {
	Job []*QueryJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobList) SetJob(v []*QueryJobListResponseBodyJobListJob) *QueryJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryJobListResponseBodyJobListJob struct {
	Code             *string                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	CreationTime     *string                                             `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FinishTime       *string                                             `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input            *QueryJobListResponseBodyJobListJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId            *string                                             `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MNSMessageResult *QueryJobListResponseBodyJobListJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	Output           *QueryJobListResponseBodyJobListJobOutput           `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Percent          *int64                                              `json:"Percent,omitempty" xml:"Percent,omitempty"`
	PipelineId       *string                                             `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	State            *string                                             `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJob) SetCode(v string) *QueryJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetFinishTime(v string) *QueryJobListResponseBodyJobListJob {
	s.FinishTime = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetInput(v *QueryJobListResponseBodyJobListJobInput) *QueryJobListResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetJobId(v string) *QueryJobListResponseBodyJobListJob {
	s.JobId = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetMNSMessageResult(v *QueryJobListResponseBodyJobListJobMNSMessageResult) *QueryJobListResponseBodyJobListJob {
	s.MNSMessageResult = v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetMessage(v string) *QueryJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetOutput(v *QueryJobListResponseBodyJobListJobOutput) *QueryJobListResponseBodyJobListJob {
	s.Output = v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetPercent(v int64) *QueryJobListResponseBodyJobListJob {
	s.Percent = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetState(v string) *QueryJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

type QueryJobListResponseBodyJobListJobInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobInput) SetBucket(v string) *QueryJobListResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobInput) SetLocation(v string) *QueryJobListResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobInput) SetObject(v string) *QueryJobListResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

type QueryJobListResponseBodyJobListJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobMNSMessageResult) SetErrorCode(v string) *QueryJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobMNSMessageResult) SetErrorMessage(v string) *QueryJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobMNSMessageResult) SetMessageId(v string) *QueryJobListResponseBodyJobListJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutput struct {
	AmixList               *QueryJobListResponseBodyJobListJobOutputAmixList               `json:"AmixList,omitempty" xml:"AmixList,omitempty" type:"Struct"`
	Audio                  *QueryJobListResponseBodyJobListJobOutputAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                         `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	Clip                   *QueryJobListResponseBodyJobListJobOutputClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	Container              *QueryJobListResponseBodyJobListJobOutputContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	DeWatermark            *string                                                         `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	Encryption             *QueryJobListResponseBodyJobListJobOutputEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	M3U8NonStandardSupport *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                         `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	MergeList              *QueryJobListResponseBodyJobListJobOutputMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	MuxConfig              *QueryJobListResponseBodyJobListJobOutputMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	OpeningList            *QueryJobListResponseBodyJobListJobOutputOpeningList            `json:"OpeningList,omitempty" xml:"OpeningList,omitempty" type:"Struct"`
	OutSubtitleList        *QueryJobListResponseBodyJobListJobOutputOutSubtitleList        `json:"OutSubtitleList,omitempty" xml:"OutSubtitleList,omitempty" type:"Struct"`
	OutputFile             *QueryJobListResponseBodyJobListJobOutputOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Priority               *string                                                         `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Properties             *QueryJobListResponseBodyJobListJobOutputProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
	Rotate                 *string                                                         `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	SubtitleConfig         *QueryJobListResponseBodyJobListJobOutputSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	SuperReso              *QueryJobListResponseBodyJobListJobOutputSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	TailSlateList          *QueryJobListResponseBodyJobListJobOutputTailSlateList          `json:"TailSlateList,omitempty" xml:"TailSlateList,omitempty" type:"Struct"`
	TemplateId             *string                                                         `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TransConfig            *QueryJobListResponseBodyJobListJobOutputTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	UserData               *string                                                         `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Video                  *QueryJobListResponseBodyJobListJobOutputVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                         `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	WaterMarkConfigUrl     *string                                                         `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	WaterMarkList          *QueryJobListResponseBodyJobListJobOutputWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutput) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutput) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetAmixList(v *QueryJobListResponseBodyJobListJobOutputAmixList) *QueryJobListResponseBodyJobListJobOutput {
	s.AmixList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetAudio(v *QueryJobListResponseBodyJobListJobOutputAudio) *QueryJobListResponseBodyJobListJobOutput {
	s.Audio = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetAudioStreamMap(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.AudioStreamMap = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetClip(v *QueryJobListResponseBodyJobListJobOutputClip) *QueryJobListResponseBodyJobListJobOutput {
	s.Clip = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetContainer(v *QueryJobListResponseBodyJobListJobOutputContainer) *QueryJobListResponseBodyJobListJobOutput {
	s.Container = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetDeWatermark(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.DeWatermark = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetEncryption(v *QueryJobListResponseBodyJobListJobOutputEncryption) *QueryJobListResponseBodyJobListJobOutput {
	s.Encryption = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetM3U8NonStandardSupport(v *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport) *QueryJobListResponseBodyJobListJobOutput {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetMergeConfigUrl(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.MergeConfigUrl = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetMergeList(v *QueryJobListResponseBodyJobListJobOutputMergeList) *QueryJobListResponseBodyJobListJobOutput {
	s.MergeList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetMuxConfig(v *QueryJobListResponseBodyJobListJobOutputMuxConfig) *QueryJobListResponseBodyJobListJobOutput {
	s.MuxConfig = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetOpeningList(v *QueryJobListResponseBodyJobListJobOutputOpeningList) *QueryJobListResponseBodyJobListJobOutput {
	s.OpeningList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetOutSubtitleList(v *QueryJobListResponseBodyJobListJobOutputOutSubtitleList) *QueryJobListResponseBodyJobListJobOutput {
	s.OutSubtitleList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetOutputFile(v *QueryJobListResponseBodyJobListJobOutputOutputFile) *QueryJobListResponseBodyJobListJobOutput {
	s.OutputFile = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetPriority(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.Priority = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetProperties(v *QueryJobListResponseBodyJobListJobOutputProperties) *QueryJobListResponseBodyJobListJobOutput {
	s.Properties = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetRotate(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.Rotate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetSubtitleConfig(v *QueryJobListResponseBodyJobListJobOutputSubtitleConfig) *QueryJobListResponseBodyJobListJobOutput {
	s.SubtitleConfig = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetSuperReso(v *QueryJobListResponseBodyJobListJobOutputSuperReso) *QueryJobListResponseBodyJobListJobOutput {
	s.SuperReso = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetTailSlateList(v *QueryJobListResponseBodyJobListJobOutputTailSlateList) *QueryJobListResponseBodyJobListJobOutput {
	s.TailSlateList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetTemplateId(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.TemplateId = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetTransConfig(v *QueryJobListResponseBodyJobListJobOutputTransConfig) *QueryJobListResponseBodyJobListJobOutput {
	s.TransConfig = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetUserData(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.UserData = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetVideo(v *QueryJobListResponseBodyJobListJobOutputVideo) *QueryJobListResponseBodyJobListJobOutput {
	s.Video = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetVideoStreamMap(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.VideoStreamMap = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetWaterMarkConfigUrl(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetWaterMarkList(v *QueryJobListResponseBodyJobListJobOutputWaterMarkList) *QueryJobListResponseBodyJobListJobOutput {
	s.WaterMarkList = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputAmixList struct {
	Amix []*QueryJobListResponseBodyJobListJobOutputAmixListAmix `json:"Amix,omitempty" xml:"Amix,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputAmixList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputAmixList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputAmixList) SetAmix(v []*QueryJobListResponseBodyJobListJobOutputAmixListAmix) *QueryJobListResponseBodyJobListJobOutputAmixList {
	s.Amix = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputAmixListAmix struct {
	AmixURL    *string `json:"AmixURL,omitempty" xml:"AmixURL,omitempty"`
	Duration   *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Map        *string `json:"Map,omitempty" xml:"Map,omitempty"`
	MixDurMode *string `json:"MixDurMode,omitempty" xml:"MixDurMode,omitempty"`
	Start      *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputAmixListAmix) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputAmixListAmix) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputAmixListAmix) SetAmixURL(v string) *QueryJobListResponseBodyJobListJobOutputAmixListAmix {
	s.AmixURL = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAmixListAmix) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputAmixListAmix {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAmixListAmix) SetMap(v string) *QueryJobListResponseBodyJobListJobOutputAmixListAmix {
	s.Map = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAmixListAmix) SetMixDurMode(v string) *QueryJobListResponseBodyJobListJobOutputAmixListAmix {
	s.MixDurMode = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAmixListAmix) SetStart(v string) *QueryJobListResponseBodyJobListJobOutputAmixListAmix {
	s.Start = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputAudio struct {
	Bitrate    *string                                              `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string                                              `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string                                              `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string                                              `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string                                              `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Samplerate *string                                              `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *QueryJobListResponseBodyJobListJobOutputAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputAudio) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetChannels(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Channels = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetCodec(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Codec = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetProfile(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Profile = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetQscale(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Qscale = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetSamplerate(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Samplerate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetVolume(v *QueryJobListResponseBodyJobListJobOutputAudioVolume) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Volume = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputAudioVolume struct {
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputAudioVolume) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputAudioVolume) SetLevel(v string) *QueryJobListResponseBodyJobListJobOutputAudioVolume {
	s.Level = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudioVolume) SetMethod(v string) *QueryJobListResponseBodyJobListJobOutputAudioVolume {
	s.Method = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputClip struct {
	TimeSpan *QueryJobListResponseBodyJobListJobOutputClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputClip) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputClip) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputClip) SetTimeSpan(v *QueryJobListResponseBodyJobListJobOutputClipTimeSpan) *QueryJobListResponseBodyJobListJobOutputClip {
	s.TimeSpan = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputClipTimeSpan struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputClipTimeSpan) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputClipTimeSpan) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputClipTimeSpan {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputClipTimeSpan) SetSeek(v string) *QueryJobListResponseBodyJobListJobOutputClipTimeSpan {
	s.Seek = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputContainer) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputContainer) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputContainer) SetFormat(v string) *QueryJobListResponseBodyJobListJobOutputContainer {
	s.Format = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputEncryption struct {
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputEncryption) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputEncryption) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetId(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.Id = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetKey(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.Key = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetKeyType(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.KeyType = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetKeyUri(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.KeyUri = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetSkipCnt(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.SkipCnt = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetType(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.Type = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport struct {
	TS *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport) SetTS(v *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS) *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport {
	s.TS = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS struct {
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS) SetMd5Support(v bool) *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS) SetSizeSupport(v bool) *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMergeList struct {
	Merge []*QueryJobListResponseBodyJobListJobOutputMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputMergeList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMergeList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMergeList) SetMerge(v []*QueryJobListResponseBodyJobListJobOutputMergeListMerge) *QueryJobListResponseBodyJobListJobOutputMergeList {
	s.Merge = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMergeListMerge struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMergeListMerge) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMergeListMerge) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputMergeListMerge {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMergeListMerge) SetMergeURL(v string) *QueryJobListResponseBodyJobListJobOutputMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMergeListMerge) SetRoleArn(v string) *QueryJobListResponseBodyJobListJobOutputMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMergeListMerge) SetStart(v string) *QueryJobListResponseBodyJobListJobOutputMergeListMerge {
	s.Start = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMuxConfig struct {
	Gif     *QueryJobListResponseBodyJobListJobOutputMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *QueryJobListResponseBodyJobListJobOutputMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
	Webp    *QueryJobListResponseBodyJobListJobOutputMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfig) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfig) SetGif(v *QueryJobListResponseBodyJobListJobOutputMuxConfigGif) *QueryJobListResponseBodyJobListJobOutputMuxConfig {
	s.Gif = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfig) SetSegment(v *QueryJobListResponseBodyJobListJobOutputMuxConfigSegment) *QueryJobListResponseBodyJobListJobOutputMuxConfig {
	s.Segment = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfig) SetWebp(v *QueryJobListResponseBodyJobListJobOutputMuxConfigWebp) *QueryJobListResponseBodyJobListJobOutputMuxConfig {
	s.Webp = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMuxConfigGif struct {
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigGif) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigGif) SetDitherMode(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigGif) SetFinalDelay(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigGif) SetIsCustomPalette(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigGif) SetLoop(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigGif {
	s.Loop = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigSegment) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigSegment {
	s.Duration = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigWebp) SetLoop(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigWebp {
	s.Loop = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOpeningList struct {
	Opening []*QueryJobListResponseBodyJobListJobOutputOpeningListOpening `json:"Opening,omitempty" xml:"Opening,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputOpeningList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOpeningList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOpeningList) SetOpening(v []*QueryJobListResponseBodyJobListJobOutputOpeningListOpening) *QueryJobListResponseBodyJobListJobOutputOpeningList {
	s.Opening = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOpeningListOpening struct {
	Height  *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Start   *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Width   *string `json:"Width,omitempty" xml:"Width,omitempty"`
	OpenUrl *string `json:"openUrl,omitempty" xml:"openUrl,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputOpeningListOpening) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOpeningListOpening) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOpeningListOpening) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputOpeningListOpening {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOpeningListOpening) SetStart(v string) *QueryJobListResponseBodyJobListJobOutputOpeningListOpening {
	s.Start = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOpeningListOpening) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputOpeningListOpening {
	s.Width = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOpeningListOpening) SetOpenUrl(v string) *QueryJobListResponseBodyJobListJobOutputOpeningListOpening {
	s.OpenUrl = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOutSubtitleList struct {
	OutSubtitle []*QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle `json:"OutSubtitle,omitempty" xml:"OutSubtitle,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleList) SetOutSubtitle(v []*QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) *QueryJobListResponseBodyJobListJobOutputOutSubtitleList {
	s.OutSubtitle = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle struct {
	Map             *string                                                                            `json:"Map,omitempty" xml:"Map,omitempty"`
	Message         *string                                                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	OutSubtitleFile *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile `json:"OutSubtitleFile,omitempty" xml:"OutSubtitleFile,omitempty" type:"Struct"`
	Success         *bool                                                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetMap(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Map = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetMessage(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Message = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetOutSubtitleFile(v *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.OutSubtitleFile = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetSuccess(v bool) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Success = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetBucket(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Bucket = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetLocation(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Location = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetObject(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Object = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetRoleArn(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.RoleArn = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOutputFile) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOutputFile) SetBucket(v string) *QueryJobListResponseBodyJobListJobOutputOutputFile {
	s.Bucket = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutputFile) SetLocation(v string) *QueryJobListResponseBodyJobListJobOutputOutputFile {
	s.Location = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutputFile) SetObject(v string) *QueryJobListResponseBodyJobListJobOutputOutputFile {
	s.Object = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutputFile) SetRoleArn(v string) *QueryJobListResponseBodyJobListJobOutputOutputFile {
	s.RoleArn = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputProperties struct {
	Bitrate     *string                                                        `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration    *string                                                        `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileFormat  *string                                                        `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	FileSize    *string                                                        `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	Format      *QueryJobListResponseBodyJobListJobOutputPropertiesFormat      `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	Fps         *string                                                        `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height      *string                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	SourceLogos *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos `json:"SourceLogos,omitempty" xml:"SourceLogos,omitempty" type:"Struct"`
	Streams     *QueryJobListResponseBodyJobListJobOutputPropertiesStreams     `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Width       *string                                                        `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputProperties) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputProperties) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetFileFormat(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.FileFormat = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetFileSize(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.FileSize = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetFormat(v *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Format = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetFps(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Fps = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetSourceLogos(v *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.SourceLogos = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetStreams(v *QueryJobListResponseBodyJobListJobOutputPropertiesStreams) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Streams = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Width = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesFormat struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesFormat) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetFormatLongName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetFormatName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.FormatName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetNumPrograms(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetNumStreams(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetSize(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.Size = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetStartTime(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.StartTime = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos struct {
	SourceLogo []*QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo `json:"SourceLogo,omitempty" xml:"SourceLogo,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos) SetSourceLogo(v []*QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo) *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos {
	s.SourceLogo = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo struct {
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo) SetSource(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo {
	s.Source = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreams struct {
	AudioStreamList    *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
	VideoStreamList    *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreams) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreams) SetAudioStreamList(v *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) *QueryJobListResponseBodyJobListJobOutputPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreams) SetSubtitleStreamList(v *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) *QueryJobListResponseBodyJobListJobOutputPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreams) SetVideoStreamList(v *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) *QueryJobListResponseBodyJobListJobOutputPropertiesStreams {
	s.VideoStreamList = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList struct {
	AudioStream []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) SetAudioStream(v []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList struct {
	VideoStream []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) SetVideoStream(v []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream struct {
	AvgFPS         *string                                                                                         `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	Bitrate        *string                                                                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecLongName  *string                                                                                         `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string                                                                                         `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string                                                                                         `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string                                                                                         `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string                                                                                         `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Dar            *string                                                                                         `json:"Dar,omitempty" xml:"Dar,omitempty"`
	Duration       *string                                                                                         `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                         `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames     *string                                                                                         `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Height         *string                                                                                         `json:"Height,omitempty" xml:"Height,omitempty"`
	Index          *string                                                                                         `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string                                                                                         `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Level          *string                                                                                         `json:"Level,omitempty" xml:"Level,omitempty"`
	NetworkCost    *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	NumFrames      *string                                                                                         `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	PixFmt         *string                                                                                         `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Profile        *string                                                                                         `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Sar            *string                                                                                         `json:"Sar,omitempty" xml:"Sar,omitempty"`
	StartTime      *string                                                                                         `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string                                                                                         `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Width          *string                                                                                         `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfig struct {
	ExtSubtitleList *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfig) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfig) SetExtSubtitleList(v *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) *QueryJobListResponseBodyJobListJobOutputSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfig) SetSubtitleList(v *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList) *QueryJobListResponseBodyJobListJobOutputSubtitleConfig {
	s.SubtitleList = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                                `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                                `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList struct {
	Subtitle []*QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList) SetSubtitle(v []*QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) SetMap(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputSuperReso) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSuperReso) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSuperReso) SetIsHalfSample(v string) *QueryJobListResponseBodyJobListJobOutputSuperReso {
	s.IsHalfSample = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputTailSlateList struct {
	TailSlate []*QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate `json:"TailSlate,omitempty" xml:"TailSlate,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputTailSlateList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputTailSlateList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateList) SetTailSlate(v []*QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) *QueryJobListResponseBodyJobListJobOutputTailSlateList {
	s.TailSlate = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate struct {
	BgColor       *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	BlendDuration *string `json:"BlendDuration,omitempty" xml:"BlendDuration,omitempty"`
	Height        *string `json:"Height,omitempty" xml:"Height,omitempty"`
	IsMergeAudio  *bool   `json:"IsMergeAudio,omitempty" xml:"IsMergeAudio,omitempty"`
	Start         *string `json:"Start,omitempty" xml:"Start,omitempty"`
	TailUrl       *string `json:"TailUrl,omitempty" xml:"TailUrl,omitempty"`
	Width         *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetBgColor(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.BgColor = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetBlendDuration(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.BlendDuration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetIsMergeAudio(v bool) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.IsMergeAudio = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetStart(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Start = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetTailUrl(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.TailUrl = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Width = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputTransConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputTransConfig) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetAdjDarMethod(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckAudioBitrate(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckAudioBitrateFail(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckReso(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckResoFail(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckVideoBitrate(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckVideoBitrateFail(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetTransMode(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.TransMode = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputVideo struct {
	Bitrate      *string                                                  `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd   *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	Bufsize      *string                                                  `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec        *string                                                  `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf          *string                                                  `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Crop         *string                                                  `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Degrain      *string                                                  `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	Fps          *string                                                  `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop          *string                                                  `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height       *string                                                  `json:"Height,omitempty" xml:"Height,omitempty"`
	MaxFps       *string                                                  `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Maxrate      *string                                                  `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Pad          *string                                                  `json:"Pad,omitempty" xml:"Pad,omitempty"`
	PixFmt       *string                                                  `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Preset       *string                                                  `json:"Preset,omitempty" xml:"Preset,omitempty"`
	Profile      *string                                                  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale       *string                                                  `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	ResoPriority *string                                                  `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
	ScanMode     *string                                                  `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width        *string                                                  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputVideo) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetBitrateBnd(v *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.BitrateBnd = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetBufsize(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Bufsize = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetCodec(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Codec = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetCrf(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Crf = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetCrop(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Crop = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetDegrain(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Degrain = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetFps(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Fps = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetGop(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Gop = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetMaxFps(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.MaxFps = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetMaxrate(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Maxrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetPad(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Pad = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetPixFmt(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.PixFmt = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetPreset(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Preset = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetProfile(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Profile = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetQscale(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Qscale = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetResoPriority(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.ResoPriority = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetScanMode(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.ScanMode = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Width = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd) SetMax(v string) *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd) SetMin(v string) *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd {
	s.Min = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputWaterMarkList struct {
	WaterMark []*QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkList) SetWaterMark(v []*QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) *QueryJobListResponseBodyJobListJobOutputWaterMarkList {
	s.WaterMark = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark struct {
	Dx                  *string                                                                  `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy                  *string                                                                  `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height              *string                                                                  `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	ReferPos            *string                                                                  `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Type                *string                                                                  `json:"Type,omitempty" xml:"Type,omitempty"`
	WaterMarkTemplateId *string                                                                  `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Width               *string                                                                  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetDx(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetDy(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetInputFile(v *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetReferPos(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetType(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Width = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetBucket(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetLocation(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetObject(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

type QueryJobListResponseBodyNonExistJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyNonExistJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyNonExistJobIds) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyNonExistJobIds) SetString_(v []*string) *QueryJobListResponseBodyNonExistJobIds {
	s.String_ = v
	return s
}

type QueryJobListResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryJobListResponse) SetHeaders(v map[string]*string) *QueryJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryJobListResponse) SetStatusCode(v int32) *QueryJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryJobListResponse) SetBody(v *QueryJobListResponseBody) *QueryJobListResponse {
	s.Body = v
	return s
}

type QueryMediaInfoJobListRequest struct {
	// This parameter is required.
	MediaInfoJobIds      *string `json:"MediaInfoJobIds,omitempty" xml:"MediaInfoJobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMediaInfoJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListRequest) SetMediaInfoJobIds(v string) *QueryMediaInfoJobListRequest {
	s.MediaInfoJobIds = &v
	return s
}

func (s *QueryMediaInfoJobListRequest) SetOwnerAccount(v string) *QueryMediaInfoJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaInfoJobListRequest) SetOwnerId(v int64) *QueryMediaInfoJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaInfoJobListRequest) SetResourceOwnerAccount(v string) *QueryMediaInfoJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaInfoJobListRequest) SetResourceOwnerId(v int64) *QueryMediaInfoJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMediaInfoJobListResponseBody struct {
	MediaInfoJobList        *QueryMediaInfoJobListResponseBodyMediaInfoJobList        `json:"MediaInfoJobList,omitempty" xml:"MediaInfoJobList,omitempty" type:"Struct"`
	NonExistMediaInfoJobIds *QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds `json:"NonExistMediaInfoJobIds,omitempty" xml:"NonExistMediaInfoJobIds,omitempty" type:"Struct"`
	RequestId               *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaInfoJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBody) SetMediaInfoJobList(v *QueryMediaInfoJobListResponseBodyMediaInfoJobList) *QueryMediaInfoJobListResponseBody {
	s.MediaInfoJobList = v
	return s
}

func (s *QueryMediaInfoJobListResponseBody) SetNonExistMediaInfoJobIds(v *QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds) *QueryMediaInfoJobListResponseBody {
	s.NonExistMediaInfoJobIds = v
	return s
}

func (s *QueryMediaInfoJobListResponseBody) SetRequestId(v string) *QueryMediaInfoJobListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobList struct {
	MediaInfoJob []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Repeated"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobList) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobList) SetMediaInfoJob(v []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) *QueryMediaInfoJobListResponseBodyMediaInfoJobList {
	s.MediaInfoJob = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob struct {
	Async            *bool                                                                          `json:"Async,omitempty" xml:"Async,omitempty"`
	Code             *string                                                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	CreationTime     *string                                                                        `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Input            *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId            *string                                                                        `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MNSMessageResult *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId       *string                                                                        `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Properties       *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties       `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
	State            *string                                                                        `json:"State,omitempty" xml:"State,omitempty"`
	UserData         *string                                                                        `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetAsync(v bool) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.Async = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetCode(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.Code = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetCreationTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetInput(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.Input = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetJobId(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetMNSMessageResult(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.MNSMessageResult = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetMessage(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.Message = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetPipelineId(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetProperties(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.Properties = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetState(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.State = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetUserData(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.UserData = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) SetBucket(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput {
	s.Bucket = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) SetLocation(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput {
	s.Location = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) SetObject(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput {
	s.Object = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) SetErrorCode(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) SetErrorMessage(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) SetMessageId(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties struct {
	Bitrate    *string                                                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration   *string                                                                         `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileFormat *string                                                                         `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	FileSize   *string                                                                         `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	Format     *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	Fps        *string                                                                         `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height     *string                                                                         `json:"Height,omitempty" xml:"Height,omitempty"`
	Streams    *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Width      *string                                                                         `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetBitrate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetDuration(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Duration = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetFileFormat(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.FileFormat = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetFileSize(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.FileSize = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetFormat(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Format = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetFps(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Fps = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetHeight(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Height = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetStreams(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Streams = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetWidth(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Width = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetBitrate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetDuration(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetFormatLongName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetFormatName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.FormatName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetNumPrograms(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetNumStreams(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetSize(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.Size = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetStartTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.StartTime = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams struct {
	AudioStreamList    *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
	VideoStreamList    *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) SetAudioStreamList(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) SetSubtitleStreamList(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) SetVideoStreamList(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams {
	s.VideoStreamList = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList struct {
	AudioStream []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList) SetAudioStream(v []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList struct {
	VideoStream []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList) SetVideoStream(v []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream struct {
	AvgFPS         *string                                                                                                              `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	Bitrate        *string                                                                                                              `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecLongName  *string                                                                                                              `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string                                                                                                              `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string                                                                                                              `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string                                                                                                              `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string                                                                                                              `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Dar            *string                                                                                                              `json:"Dar,omitempty" xml:"Dar,omitempty"`
	Duration       *string                                                                                                              `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                                              `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames     *string                                                                                                              `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Height         *string                                                                                                              `json:"Height,omitempty" xml:"Height,omitempty"`
	Index          *string                                                                                                              `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string                                                                                                              `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Level          *string                                                                                                              `json:"Level,omitempty" xml:"Level,omitempty"`
	NetworkCost    *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	NumFrames      *string                                                                                                              `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	PixFmt         *string                                                                                                              `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Profile        *string                                                                                                              `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Rotate         *string                                                                                                              `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Sar            *string                                                                                                              `json:"Sar,omitempty" xml:"Sar,omitempty"`
	StartTime      *string                                                                                                              `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string                                                                                                              `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Width          *string                                                                                                              `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetRotate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Rotate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

type QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds) SetString_(v []*string) *QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds {
	s.String_ = v
	return s
}

type QueryMediaInfoJobListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaInfoJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaInfoJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponse) SetHeaders(v map[string]*string) *QueryMediaInfoJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaInfoJobListResponse) SetStatusCode(v int32) *QueryMediaInfoJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaInfoJobListResponse) SetBody(v *QueryMediaInfoJobListResponseBody) *QueryMediaInfoJobListResponse {
	s.Body = v
	return s
}

type QueryMediaListRequest struct {
	IncludeMediaInfo    *bool `json:"IncludeMediaInfo,omitempty" xml:"IncludeMediaInfo,omitempty"`
	IncludePlayList     *bool `json:"IncludePlayList,omitempty" xml:"IncludePlayList,omitempty"`
	IncludeSnapshotList *bool `json:"IncludeSnapshotList,omitempty" xml:"IncludeSnapshotList,omitempty"`
	IncludeSummaryList  *bool `json:"IncludeSummaryList,omitempty" xml:"IncludeSummaryList,omitempty"`
	// This parameter is required.
	MediaIds             *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMediaListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaListRequest) SetIncludeMediaInfo(v bool) *QueryMediaListRequest {
	s.IncludeMediaInfo = &v
	return s
}

func (s *QueryMediaListRequest) SetIncludePlayList(v bool) *QueryMediaListRequest {
	s.IncludePlayList = &v
	return s
}

func (s *QueryMediaListRequest) SetIncludeSnapshotList(v bool) *QueryMediaListRequest {
	s.IncludeSnapshotList = &v
	return s
}

func (s *QueryMediaListRequest) SetIncludeSummaryList(v bool) *QueryMediaListRequest {
	s.IncludeSummaryList = &v
	return s
}

func (s *QueryMediaListRequest) SetMediaIds(v string) *QueryMediaListRequest {
	s.MediaIds = &v
	return s
}

func (s *QueryMediaListRequest) SetOwnerAccount(v string) *QueryMediaListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaListRequest) SetOwnerId(v int64) *QueryMediaListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaListRequest) SetResourceOwnerAccount(v string) *QueryMediaListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaListRequest) SetResourceOwnerId(v int64) *QueryMediaListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMediaListResponseBody struct {
	MediaList        *QueryMediaListResponseBodyMediaList        `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Struct"`
	NonExistMediaIds *QueryMediaListResponseBodyNonExistMediaIds `json:"NonExistMediaIds,omitempty" xml:"NonExistMediaIds,omitempty" type:"Struct"`
	RequestId        *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBody) SetMediaList(v *QueryMediaListResponseBodyMediaList) *QueryMediaListResponseBody {
	s.MediaList = v
	return s
}

func (s *QueryMediaListResponseBody) SetNonExistMediaIds(v *QueryMediaListResponseBodyNonExistMediaIds) *QueryMediaListResponseBody {
	s.NonExistMediaIds = v
	return s
}

func (s *QueryMediaListResponseBody) SetRequestId(v string) *QueryMediaListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaListResponseBodyMediaList struct {
	Media []*QueryMediaListResponseBodyMediaListMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaList) SetMedia(v []*QueryMediaListResponseBodyMediaListMedia) *QueryMediaListResponseBodyMediaList {
	s.Media = v
	return s
}

type QueryMediaListResponseBodyMediaListMedia struct {
	Bitrate      *string                                               `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CateId       *int64                                                `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CensorState  *string                                               `json:"CensorState,omitempty" xml:"CensorState,omitempty"`
	CoverURL     *string                                               `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	CreationTime *string                                               `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	Duration     *string                                               `json:"Duration,omitempty" xml:"Duration,omitempty"`
	File         *QueryMediaListResponseBodyMediaListMediaFile         `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	Format       *string                                               `json:"Format,omitempty" xml:"Format,omitempty"`
	Fps          *string                                               `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height       *string                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	MediaId      *string                                               `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaInfo    *QueryMediaListResponseBodyMediaListMediaMediaInfo    `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	PlayList     *QueryMediaListResponseBodyMediaListMediaPlayList     `json:"PlayList,omitempty" xml:"PlayList,omitempty" type:"Struct"`
	PublishState *string                                               `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	RunIdList    *QueryMediaListResponseBodyMediaListMediaRunIdList    `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Size         *string                                               `json:"Size,omitempty" xml:"Size,omitempty"`
	SnapshotList *QueryMediaListResponseBodyMediaListMediaSnapshotList `json:"SnapshotList,omitempty" xml:"SnapshotList,omitempty" type:"Struct"`
	SummaryList  *QueryMediaListResponseBodyMediaListMediaSummaryList  `json:"SummaryList,omitempty" xml:"SummaryList,omitempty" type:"Struct"`
	Tags         *QueryMediaListResponseBodyMediaListMediaTags         `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Title        *string                                               `json:"Title,omitempty" xml:"Title,omitempty"`
	Width        *string                                               `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMedia) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMedia) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetBitrate(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetCateId(v int64) *QueryMediaListResponseBodyMediaListMedia {
	s.CateId = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetCensorState(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.CensorState = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetCoverURL(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.CoverURL = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetCreationTime(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetDescription(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Description = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetDuration(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Duration = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetFile(v *QueryMediaListResponseBodyMediaListMediaFile) *QueryMediaListResponseBodyMediaListMedia {
	s.File = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetFormat(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Format = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetFps(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Fps = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetHeight(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Height = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetMediaId(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.MediaId = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetMediaInfo(v *QueryMediaListResponseBodyMediaListMediaMediaInfo) *QueryMediaListResponseBodyMediaListMedia {
	s.MediaInfo = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetPlayList(v *QueryMediaListResponseBodyMediaListMediaPlayList) *QueryMediaListResponseBodyMediaListMedia {
	s.PlayList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetPublishState(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.PublishState = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetRunIdList(v *QueryMediaListResponseBodyMediaListMediaRunIdList) *QueryMediaListResponseBodyMediaListMedia {
	s.RunIdList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetSize(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Size = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetSnapshotList(v *QueryMediaListResponseBodyMediaListMediaSnapshotList) *QueryMediaListResponseBodyMediaListMedia {
	s.SnapshotList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetSummaryList(v *QueryMediaListResponseBodyMediaListMediaSummaryList) *QueryMediaListResponseBodyMediaListMedia {
	s.SummaryList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetTags(v *QueryMediaListResponseBodyMediaListMediaTags) *QueryMediaListResponseBodyMediaListMedia {
	s.Tags = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetTitle(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Title = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetWidth(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Width = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaFile) SetState(v string) *QueryMediaListResponseBodyMediaListMediaFile {
	s.State = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaFile) SetURL(v string) *QueryMediaListResponseBodyMediaListMediaFile {
	s.URL = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfo struct {
	Format  *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	Streams *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfo) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfo) SetFormat(v *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) *QueryMediaListResponseBodyMediaListMediaMediaInfo {
	s.Format = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfo) SetStreams(v *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) *QueryMediaListResponseBodyMediaListMediaMediaInfo {
	s.Streams = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoFormat struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetBitrate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetDuration(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.Duration = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetFormatLongName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetFormatName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.FormatName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetNumPrograms(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetNumStreams(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetSize(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.Size = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetStartTime(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.StartTime = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreams struct {
	AudioStreamList    *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
	VideoStreamList    *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) SetAudioStreamList(v *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) SetSubtitleStreamList(v *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams {
	s.SubtitleStreamList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) SetVideoStreamList(v *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams {
	s.VideoStreamList = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList struct {
	AudioStream []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) SetAudioStream(v []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetLang(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList struct {
	VideoStream []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) SetVideoStream(v []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream struct {
	AvgFPS         *string                                                                                        `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	Bitrate        *string                                                                                        `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecLongName  *string                                                                                        `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string                                                                                        `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string                                                                                        `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string                                                                                        `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string                                                                                        `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Dar            *string                                                                                        `json:"Dar,omitempty" xml:"Dar,omitempty"`
	Duration       *string                                                                                        `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                        `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames     *string                                                                                        `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Height         *string                                                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	Index          *string                                                                                        `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string                                                                                        `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Level          *string                                                                                        `json:"Level,omitempty" xml:"Level,omitempty"`
	NetworkCost    *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	NumFrames      *string                                                                                        `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	PixFmt         *string                                                                                        `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Profile        *string                                                                                        `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Rotate         *string                                                                                        `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Sar            *string                                                                                        `json:"Sar,omitempty" xml:"Sar,omitempty"`
	StartTime      *string                                                                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string                                                                                        `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Width          *string                                                                                        `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetDar(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetFps(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetLang(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetRotate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Rotate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetSar(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost struct {
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaPlayList struct {
	Play []*QueryMediaListResponseBodyMediaListMediaPlayListPlay `json:"Play,omitempty" xml:"Play,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaPlayList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaPlayList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayList) SetPlay(v []*QueryMediaListResponseBodyMediaListMediaPlayListPlay) *QueryMediaListResponseBodyMediaListMediaPlayList {
	s.Play = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaPlayListPlay struct {
	ActivityName      *string                                                   `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	Bitrate           *string                                                   `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration          *string                                                   `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Encryption        *string                                                   `json:"Encryption,omitempty" xml:"Encryption,omitempty"`
	File              *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	Format            *string                                                   `json:"Format,omitempty" xml:"Format,omitempty"`
	Fps               *string                                                   `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height            *string                                                   `json:"Height,omitempty" xml:"Height,omitempty"`
	MediaWorkflowId   *string                                                   `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	MediaWorkflowName *string                                                   `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	Size              *string                                                   `json:"Size,omitempty" xml:"Size,omitempty"`
	Width             *string                                                   `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaPlayListPlay) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaPlayListPlay) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetActivityName(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetBitrate(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetDuration(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Duration = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetEncryption(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Encryption = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetFile(v *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.File = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetFormat(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Format = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetFps(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Fps = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetHeight(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Height = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetMediaWorkflowId(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetMediaWorkflowName(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.MediaWorkflowName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetSize(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Size = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetWidth(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Width = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaPlayListPlayFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaPlayListPlayFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaPlayListPlayFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile) SetState(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile {
	s.State = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile) SetURL(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile {
	s.URL = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaRunIdList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaRunIdList) SetRunId(v []*string) *QueryMediaListResponseBodyMediaListMediaRunIdList {
	s.RunId = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSnapshotList struct {
	Snapshot []*QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot `json:"Snapshot,omitempty" xml:"Snapshot,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotList) SetSnapshot(v []*QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) *QueryMediaListResponseBodyMediaListMediaSnapshotList {
	s.Snapshot = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot struct {
	ActivityName      *string                                                           `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	Count             *string                                                           `json:"Count,omitempty" xml:"Count,omitempty"`
	File              *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	MediaWorkflowId   *string                                                           `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	MediaWorkflowName *string                                                           `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	Type              *string                                                           `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetActivityName(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetCount(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.Count = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetFile(v *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.File = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetMediaWorkflowId(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetMediaWorkflowName(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.MediaWorkflowName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetType(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.Type = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile) SetState(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile {
	s.State = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile) SetURL(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile {
	s.URL = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSummaryList struct {
	Summary []*QueryMediaListResponseBodyMediaListMediaSummaryListSummary `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryList) SetSummary(v []*QueryMediaListResponseBodyMediaListMediaSummaryListSummary) *QueryMediaListResponseBodyMediaListMediaSummaryList {
	s.Summary = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSummaryListSummary struct {
	ActivityName      *string                                                         `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	File              *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	MediaWorkflowId   *string                                                         `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	MediaWorkflowName *string                                                         `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	Type              *string                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryListSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryListSummary) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummary) SetActivityName(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummary {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummary) SetFile(v *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile) *QueryMediaListResponseBodyMediaListMediaSummaryListSummary {
	s.File = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummary) SetMediaWorkflowId(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummary {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummary) SetMediaWorkflowName(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummary {
	s.MediaWorkflowName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummary) SetType(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummary {
	s.Type = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile) SetState(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile {
	s.State = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile) SetURL(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile {
	s.URL = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaTags) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaTags) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaTags) SetTag(v []*string) *QueryMediaListResponseBodyMediaListMediaTags {
	s.Tag = v
	return s
}

type QueryMediaListResponseBodyNonExistMediaIds struct {
	MediaId []*string `json:"MediaId,omitempty" xml:"MediaId,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyNonExistMediaIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyNonExistMediaIds) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyNonExistMediaIds) SetMediaId(v []*string) *QueryMediaListResponseBodyNonExistMediaIds {
	s.MediaId = v
	return s
}

type QueryMediaListResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponse) SetHeaders(v map[string]*string) *QueryMediaListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaListResponse) SetStatusCode(v int32) *QueryMediaListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaListResponse) SetBody(v *QueryMediaListResponseBody) *QueryMediaListResponse {
	s.Body = v
	return s
}

type QueryMediaListByURLRequest struct {
	// This parameter is required.
	FileURLs             *string `json:"FileURLs,omitempty" xml:"FileURLs,omitempty"`
	IncludeMediaInfo     *bool   `json:"IncludeMediaInfo,omitempty" xml:"IncludeMediaInfo,omitempty"`
	IncludePlayList      *bool   `json:"IncludePlayList,omitempty" xml:"IncludePlayList,omitempty"`
	IncludeSnapshotList  *bool   `json:"IncludeSnapshotList,omitempty" xml:"IncludeSnapshotList,omitempty"`
	IncludeSummaryList   *bool   `json:"IncludeSummaryList,omitempty" xml:"IncludeSummaryList,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMediaListByURLRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLRequest) SetFileURLs(v string) *QueryMediaListByURLRequest {
	s.FileURLs = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetIncludeMediaInfo(v bool) *QueryMediaListByURLRequest {
	s.IncludeMediaInfo = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetIncludePlayList(v bool) *QueryMediaListByURLRequest {
	s.IncludePlayList = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetIncludeSnapshotList(v bool) *QueryMediaListByURLRequest {
	s.IncludeSnapshotList = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetIncludeSummaryList(v bool) *QueryMediaListByURLRequest {
	s.IncludeSummaryList = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetOwnerAccount(v string) *QueryMediaListByURLRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetOwnerId(v int64) *QueryMediaListByURLRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetResourceOwnerAccount(v string) *QueryMediaListByURLRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetResourceOwnerId(v int64) *QueryMediaListByURLRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMediaListByURLResponseBody struct {
	MediaList        *QueryMediaListByURLResponseBodyMediaList        `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Struct"`
	NonExistFileURLs *QueryMediaListByURLResponseBodyNonExistFileURLs `json:"NonExistFileURLs,omitempty" xml:"NonExistFileURLs,omitempty" type:"Struct"`
	RequestId        *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaListByURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBody) SetMediaList(v *QueryMediaListByURLResponseBodyMediaList) *QueryMediaListByURLResponseBody {
	s.MediaList = v
	return s
}

func (s *QueryMediaListByURLResponseBody) SetNonExistFileURLs(v *QueryMediaListByURLResponseBodyNonExistFileURLs) *QueryMediaListByURLResponseBody {
	s.NonExistFileURLs = v
	return s
}

func (s *QueryMediaListByURLResponseBody) SetRequestId(v string) *QueryMediaListByURLResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaList struct {
	Media []*QueryMediaListByURLResponseBodyMediaListMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaList) SetMedia(v []*QueryMediaListByURLResponseBodyMediaListMedia) *QueryMediaListByURLResponseBodyMediaList {
	s.Media = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMedia struct {
	Bitrate      *string                                                    `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CateId       *int64                                                     `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CensorState  *string                                                    `json:"CensorState,omitempty" xml:"CensorState,omitempty"`
	CoverURL     *string                                                    `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	CreationTime *string                                                    `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string                                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	Duration     *string                                                    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	File         *QueryMediaListByURLResponseBodyMediaListMediaFile         `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	Format       *string                                                    `json:"Format,omitempty" xml:"Format,omitempty"`
	Fps          *string                                                    `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height       *string                                                    `json:"Height,omitempty" xml:"Height,omitempty"`
	MediaId      *string                                                    `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaInfo    *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo    `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	PlayList     *QueryMediaListByURLResponseBodyMediaListMediaPlayList     `json:"PlayList,omitempty" xml:"PlayList,omitempty" type:"Struct"`
	PublishState *string                                                    `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	RunIdList    *QueryMediaListByURLResponseBodyMediaListMediaRunIdList    `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Size         *string                                                    `json:"Size,omitempty" xml:"Size,omitempty"`
	SnapshotList *QueryMediaListByURLResponseBodyMediaListMediaSnapshotList `json:"SnapshotList,omitempty" xml:"SnapshotList,omitempty" type:"Struct"`
	SummaryList  *QueryMediaListByURLResponseBodyMediaListMediaSummaryList  `json:"SummaryList,omitempty" xml:"SummaryList,omitempty" type:"Struct"`
	Tags         *QueryMediaListByURLResponseBodyMediaListMediaTags         `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Title        *string                                                    `json:"Title,omitempty" xml:"Title,omitempty"`
	Width        *string                                                    `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMedia) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMedia) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetCateId(v int64) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.CateId = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetCensorState(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.CensorState = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetCoverURL(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.CoverURL = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetCreationTime(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetDescription(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Description = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetDuration(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Duration = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetFile(v *QueryMediaListByURLResponseBodyMediaListMediaFile) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.File = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetFormat(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Format = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetFps(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Fps = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetHeight(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Height = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetMediaId(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.MediaId = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetMediaInfo(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.MediaInfo = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetPlayList(v *QueryMediaListByURLResponseBodyMediaListMediaPlayList) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.PlayList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetPublishState(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.PublishState = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetRunIdList(v *QueryMediaListByURLResponseBodyMediaListMediaRunIdList) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.RunIdList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetSize(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Size = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetSnapshotList(v *QueryMediaListByURLResponseBodyMediaListMediaSnapshotList) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.SnapshotList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetSummaryList(v *QueryMediaListByURLResponseBodyMediaListMediaSummaryList) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.SummaryList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetTags(v *QueryMediaListByURLResponseBodyMediaListMediaTags) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Tags = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetTitle(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Title = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetWidth(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Width = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaFile) SetState(v string) *QueryMediaListByURLResponseBodyMediaListMediaFile {
	s.State = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaFile) SetURL(v string) *QueryMediaListByURLResponseBodyMediaListMediaFile {
	s.URL = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfo struct {
	Format  *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	Streams *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfo) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo) SetFormat(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo {
	s.Format = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo) SetStreams(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo {
	s.Streams = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetDuration(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.Duration = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetFormatLongName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetFormatName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.FormatName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetNumPrograms(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetNumStreams(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetSize(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.Size = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetStartTime(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.StartTime = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams struct {
	AudioStreamList    *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
	VideoStreamList    *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) SetAudioStreamList(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) SetSubtitleStreamList(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams {
	s.SubtitleStreamList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) SetVideoStreamList(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams {
	s.VideoStreamList = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList struct {
	AudioStream []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) SetAudioStream(v []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetLang(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList struct {
	VideoStream []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) SetVideoStream(v []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream struct {
	AvgFPS         *string                                                                                             `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	Bitrate        *string                                                                                             `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecLongName  *string                                                                                             `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string                                                                                             `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string                                                                                             `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string                                                                                             `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string                                                                                             `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Dar            *string                                                                                             `json:"Dar,omitempty" xml:"Dar,omitempty"`
	Duration       *string                                                                                             `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                             `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames     *string                                                                                             `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Height         *string                                                                                             `json:"Height,omitempty" xml:"Height,omitempty"`
	Index          *string                                                                                             `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string                                                                                             `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Level          *string                                                                                             `json:"Level,omitempty" xml:"Level,omitempty"`
	NetworkCost    *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	NumFrames      *string                                                                                             `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	PixFmt         *string                                                                                             `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Profile        *string                                                                                             `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Rotate         *string                                                                                             `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Sar            *string                                                                                             `json:"Sar,omitempty" xml:"Sar,omitempty"`
	StartTime      *string                                                                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string                                                                                             `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Width          *string                                                                                             `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetDar(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetFps(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetLang(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetRotate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Rotate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetSar(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost struct {
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaPlayList struct {
	Play []*QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay `json:"Play,omitempty" xml:"Play,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayList) SetPlay(v []*QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) *QueryMediaListByURLResponseBodyMediaListMediaPlayList {
	s.Play = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay struct {
	ActivityName      *string                                                        `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	Bitrate           *string                                                        `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration          *string                                                        `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Encryption        *string                                                        `json:"Encryption,omitempty" xml:"Encryption,omitempty"`
	File              *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	Format            *string                                                        `json:"Format,omitempty" xml:"Format,omitempty"`
	Fps               *string                                                        `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height            *string                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	MediaWorkflowId   *string                                                        `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	MediaWorkflowName *string                                                        `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	Size              *string                                                        `json:"Size,omitempty" xml:"Size,omitempty"`
	Width             *string                                                        `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetActivityName(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetDuration(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Duration = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetEncryption(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Encryption = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetFile(v *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.File = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetFormat(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Format = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetFps(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Fps = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetHeight(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Height = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetMediaWorkflowId(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetMediaWorkflowName(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.MediaWorkflowName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetSize(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Size = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetWidth(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Width = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile) SetState(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile {
	s.State = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile) SetURL(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile {
	s.URL = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaRunIdList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaRunIdList) SetRunId(v []*string) *QueryMediaListByURLResponseBodyMediaListMediaRunIdList {
	s.RunId = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSnapshotList struct {
	Snapshot []*QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot `json:"Snapshot,omitempty" xml:"Snapshot,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotList) SetSnapshot(v []*QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotList {
	s.Snapshot = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot struct {
	ActivityName      *string                                                                `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	Count             *string                                                                `json:"Count,omitempty" xml:"Count,omitempty"`
	File              *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	MediaWorkflowId   *string                                                                `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	MediaWorkflowName *string                                                                `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	Type              *string                                                                `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetActivityName(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetCount(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.Count = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetFile(v *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.File = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetMediaWorkflowId(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetMediaWorkflowName(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.MediaWorkflowName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetType(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.Type = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile) SetState(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile {
	s.State = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile) SetURL(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile {
	s.URL = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSummaryList struct {
	Summary []*QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryList) SetSummary(v []*QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) *QueryMediaListByURLResponseBodyMediaListMediaSummaryList {
	s.Summary = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary struct {
	ActivityName      *string                                                              `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	File              *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	MediaWorkflowId   *string                                                              `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	MediaWorkflowName *string                                                              `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	Type              *string                                                              `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) SetActivityName(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) SetFile(v *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary {
	s.File = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) SetMediaWorkflowId(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) SetMediaWorkflowName(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary {
	s.MediaWorkflowName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) SetType(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary {
	s.Type = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile) SetState(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile {
	s.State = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile) SetURL(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile {
	s.URL = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaTags) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaTags) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaTags) SetTag(v []*string) *QueryMediaListByURLResponseBodyMediaListMediaTags {
	s.Tag = v
	return s
}

type QueryMediaListByURLResponseBodyNonExistFileURLs struct {
	FileURL []*string `json:"FileURL,omitempty" xml:"FileURL,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyNonExistFileURLs) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyNonExistFileURLs) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyNonExistFileURLs) SetFileURL(v []*string) *QueryMediaListByURLResponseBodyNonExistFileURLs {
	s.FileURL = v
	return s
}

type QueryMediaListByURLResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaListByURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaListByURLResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponse) SetHeaders(v map[string]*string) *QueryMediaListByURLResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaListByURLResponse) SetStatusCode(v int32) *QueryMediaListByURLResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaListByURLResponse) SetBody(v *QueryMediaListByURLResponseBody) *QueryMediaListByURLResponse {
	s.Body = v
	return s
}

type QueryMediaWorkflowExecutionListRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	RunIds *string `json:"RunIds,omitempty" xml:"RunIds,omitempty"`
}

func (s QueryMediaWorkflowExecutionListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListRequest) SetOwnerAccount(v string) *QueryMediaWorkflowExecutionListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListRequest) SetOwnerId(v int64) *QueryMediaWorkflowExecutionListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListRequest) SetResourceOwnerAccount(v string) *QueryMediaWorkflowExecutionListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListRequest) SetResourceOwnerId(v int64) *QueryMediaWorkflowExecutionListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListRequest) SetRunIds(v string) *QueryMediaWorkflowExecutionListRequest {
	s.RunIds = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBody struct {
	MediaWorkflowExecutionList *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList `json:"MediaWorkflowExecutionList,omitempty" xml:"MediaWorkflowExecutionList,omitempty" type:"Struct"`
	NonExistRunIds             *QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds             `json:"NonExistRunIds,omitempty" xml:"NonExistRunIds,omitempty" type:"Struct"`
	RequestId                  *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBody) SetMediaWorkflowExecutionList(v *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList) *QueryMediaWorkflowExecutionListResponseBody {
	s.MediaWorkflowExecutionList = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBody) SetNonExistRunIds(v *QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds) *QueryMediaWorkflowExecutionListResponseBody {
	s.NonExistRunIds = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBody) SetRequestId(v string) *QueryMediaWorkflowExecutionListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList struct {
	MediaWorkflowExecution []*QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution `json:"MediaWorkflowExecution,omitempty" xml:"MediaWorkflowExecution,omitempty" type:"Repeated"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList) SetMediaWorkflowExecution(v []*QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList {
	s.MediaWorkflowExecution = v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution struct {
	ActivityList    *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList `json:"ActivityList,omitempty" xml:"ActivityList,omitempty" type:"Struct"`
	CreationTime    *string                                                                                                  `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Input           *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput        `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MediaId         *string                                                                                                  `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaWorkflowId *string                                                                                                  `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Name            *string                                                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	RunId           *string                                                                                                  `json:"RunId,omitempty" xml:"RunId,omitempty"`
	State           *string                                                                                                  `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetActivityList(v *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.ActivityList = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetCreationTime(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetInput(v *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.Input = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetMediaId(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.MediaId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetMediaWorkflowId(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetName(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.Name = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetRunId(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.RunId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetState(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.State = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList struct {
	Activity []*QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity `json:"Activity,omitempty" xml:"Activity,omitempty" type:"Repeated"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) SetActivity(v []*QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList {
	s.Activity = v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity struct {
	Code             *string                                                                                                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	EndTime          *string                                                                                                                          `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	JobId            *string                                                                                                                          `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MNSMessageResult *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                                                                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	Name             *string                                                                                                                          `json:"Name,omitempty" xml:"Name,omitempty"`
	StartTime        *string                                                                                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	State            *string                                                                                                                          `json:"State,omitempty" xml:"State,omitempty"`
	Type             *string                                                                                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetCode(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Code = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetEndTime(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.EndTime = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetJobId(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.JobId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetMNSMessageResult(v *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.MNSMessageResult = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetMessage(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Message = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetName(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Name = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetStartTime(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.StartTime = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetState(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.State = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetType(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Type = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetErrorCode(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetErrorMessage(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetMessageId(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.MessageId = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput struct {
	InputFile *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	UserData  *string                                                                                                    `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) SetInputFile(v *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput {
	s.InputFile = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) SetUserData(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput {
	s.UserData = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetBucket(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Bucket = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetLocation(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Location = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetObject(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Object = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds) SetRunId(v []*string) *QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds {
	s.RunId = v
	return s
}

type QueryMediaWorkflowExecutionListResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaWorkflowExecutionListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponse) SetHeaders(v map[string]*string) *QueryMediaWorkflowExecutionListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponse) SetStatusCode(v int32) *QueryMediaWorkflowExecutionListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponse) SetBody(v *QueryMediaWorkflowExecutionListResponseBody) *QueryMediaWorkflowExecutionListResponse {
	s.Body = v
	return s
}

type QueryMediaWorkflowListRequest struct {
	// This parameter is required.
	MediaWorkflowIds     *string `json:"MediaWorkflowIds,omitempty" xml:"MediaWorkflowIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMediaWorkflowListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListRequest) SetMediaWorkflowIds(v string) *QueryMediaWorkflowListRequest {
	s.MediaWorkflowIds = &v
	return s
}

func (s *QueryMediaWorkflowListRequest) SetOwnerAccount(v string) *QueryMediaWorkflowListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaWorkflowListRequest) SetOwnerId(v int64) *QueryMediaWorkflowListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaWorkflowListRequest) SetResourceOwnerAccount(v string) *QueryMediaWorkflowListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaWorkflowListRequest) SetResourceOwnerId(v int64) *QueryMediaWorkflowListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMediaWorkflowListResponseBody struct {
	MediaWorkflowList        *QueryMediaWorkflowListResponseBodyMediaWorkflowList        `json:"MediaWorkflowList,omitempty" xml:"MediaWorkflowList,omitempty" type:"Struct"`
	NonExistMediaWorkflowIds *QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds `json:"NonExistMediaWorkflowIds,omitempty" xml:"NonExistMediaWorkflowIds,omitempty" type:"Struct"`
	RequestId                *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaWorkflowListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListResponseBody) SetMediaWorkflowList(v *QueryMediaWorkflowListResponseBodyMediaWorkflowList) *QueryMediaWorkflowListResponseBody {
	s.MediaWorkflowList = v
	return s
}

func (s *QueryMediaWorkflowListResponseBody) SetNonExistMediaWorkflowIds(v *QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds) *QueryMediaWorkflowListResponseBody {
	s.NonExistMediaWorkflowIds = v
	return s
}

func (s *QueryMediaWorkflowListResponseBody) SetRequestId(v string) *QueryMediaWorkflowListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaWorkflowListResponseBodyMediaWorkflowList struct {
	MediaWorkflow []*QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Repeated"`
}

func (s QueryMediaWorkflowListResponseBodyMediaWorkflowList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListResponseBodyMediaWorkflowList) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowList) SetMediaWorkflow(v []*QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) *QueryMediaWorkflowListResponseBodyMediaWorkflowList {
	s.MediaWorkflow = v
	return s
}

type QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
	TriggerMode     *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
}

func (s QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetCreationTime(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetMediaWorkflowId(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetName(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.Name = &v
	return s
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetState(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.State = &v
	return s
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetTopology(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.Topology = &v
	return s
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetTriggerMode(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.TriggerMode = &v
	return s
}

type QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds struct {
	MediaWorkflowId []*string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty" type:"Repeated"`
}

func (s QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds) SetMediaWorkflowId(v []*string) *QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds {
	s.MediaWorkflowId = v
	return s
}

type QueryMediaWorkflowListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaWorkflowListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaWorkflowListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListResponse) SetHeaders(v map[string]*string) *QueryMediaWorkflowListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaWorkflowListResponse) SetStatusCode(v int32) *QueryMediaWorkflowListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaWorkflowListResponse) SetBody(v *QueryMediaWorkflowListResponseBody) *QueryMediaWorkflowListResponse {
	s.Body = v
	return s
}

type QueryPipelineListRequest struct {
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PipelineIds          *string `json:"PipelineIds,omitempty" xml:"PipelineIds,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryPipelineListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListRequest) GoString() string {
	return s.String()
}

func (s *QueryPipelineListRequest) SetOwnerAccount(v string) *QueryPipelineListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryPipelineListRequest) SetOwnerId(v int64) *QueryPipelineListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryPipelineListRequest) SetPipelineIds(v string) *QueryPipelineListRequest {
	s.PipelineIds = &v
	return s
}

func (s *QueryPipelineListRequest) SetResourceOwnerAccount(v string) *QueryPipelineListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryPipelineListRequest) SetResourceOwnerId(v int64) *QueryPipelineListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryPipelineListResponseBody struct {
	NonExistPids *QueryPipelineListResponseBodyNonExistPids `json:"NonExistPids,omitempty" xml:"NonExistPids,omitempty" type:"Struct"`
	PipelineList *QueryPipelineListResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryPipelineListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponseBody) SetNonExistPids(v *QueryPipelineListResponseBodyNonExistPids) *QueryPipelineListResponseBody {
	s.NonExistPids = v
	return s
}

func (s *QueryPipelineListResponseBody) SetPipelineList(v *QueryPipelineListResponseBodyPipelineList) *QueryPipelineListResponseBody {
	s.PipelineList = v
	return s
}

func (s *QueryPipelineListResponseBody) SetRequestId(v string) *QueryPipelineListResponseBody {
	s.RequestId = &v
	return s
}

type QueryPipelineListResponseBodyNonExistPids struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryPipelineListResponseBodyNonExistPids) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponseBodyNonExistPids) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponseBodyNonExistPids) SetString_(v []*string) *QueryPipelineListResponseBodyNonExistPids {
	s.String_ = v
	return s
}

type QueryPipelineListResponseBodyPipelineList struct {
	Pipeline []*QueryPipelineListResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s QueryPipelineListResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponseBodyPipelineList) SetPipeline(v []*QueryPipelineListResponseBodyPipelineListPipeline) *QueryPipelineListResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type QueryPipelineListResponseBodyPipelineListPipeline struct {
	Id           *string                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string                                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	NotifyConfig *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Role         *string                                                        `json:"Role,omitempty" xml:"Role,omitempty"`
	Speed        *string                                                        `json:"Speed,omitempty" xml:"Speed,omitempty"`
	SpeedLevel   *int64                                                         `json:"SpeedLevel,omitempty" xml:"SpeedLevel,omitempty"`
	State        *string                                                        `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryPipelineListResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetId(v string) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetName(v string) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetNotifyConfig(v *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetRole(v string) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.Role = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetSpeed(v string) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.Speed = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetSpeedLevel(v int64) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.SpeedLevel = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetState(v string) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

type QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig struct {
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetQueueName(v string) *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type QueryPipelineListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryPipelineListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryPipelineListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponse) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponse) SetHeaders(v map[string]*string) *QueryPipelineListResponse {
	s.Headers = v
	return s
}

func (s *QueryPipelineListResponse) SetStatusCode(v int32) *QueryPipelineListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryPipelineListResponse) SetBody(v *QueryPipelineListResponseBody) *QueryPipelineListResponse {
	s.Body = v
	return s
}

type QuerySnapshotJobListRequest struct {
	EndOfJobCreatedTimeRange   *string `json:"EndOfJobCreatedTimeRange,omitempty" xml:"EndOfJobCreatedTimeRange,omitempty"`
	MaximumPageSize            *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	NextPageToken              *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount               *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId                    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PipelineId                 *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResourceOwnerAccount       *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SnapshotJobIds             *string `json:"SnapshotJobIds,omitempty" xml:"SnapshotJobIds,omitempty"`
	StartOfJobCreatedTimeRange *string `json:"StartOfJobCreatedTimeRange,omitempty" xml:"StartOfJobCreatedTimeRange,omitempty"`
	State                      *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QuerySnapshotJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListRequest) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListRequest) SetEndOfJobCreatedTimeRange(v string) *QuerySnapshotJobListRequest {
	s.EndOfJobCreatedTimeRange = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetMaximumPageSize(v int64) *QuerySnapshotJobListRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetNextPageToken(v string) *QuerySnapshotJobListRequest {
	s.NextPageToken = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetOwnerAccount(v string) *QuerySnapshotJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetOwnerId(v int64) *QuerySnapshotJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetPipelineId(v string) *QuerySnapshotJobListRequest {
	s.PipelineId = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetResourceOwnerAccount(v string) *QuerySnapshotJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetResourceOwnerId(v int64) *QuerySnapshotJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetSnapshotJobIds(v string) *QuerySnapshotJobListRequest {
	s.SnapshotJobIds = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetStartOfJobCreatedTimeRange(v string) *QuerySnapshotJobListRequest {
	s.StartOfJobCreatedTimeRange = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetState(v string) *QuerySnapshotJobListRequest {
	s.State = &v
	return s
}

type QuerySnapshotJobListResponseBody struct {
	NextPageToken          *string                                                 `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	NonExistSnapshotJobIds *QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds `json:"NonExistSnapshotJobIds,omitempty" xml:"NonExistSnapshotJobIds,omitempty" type:"Struct"`
	RequestId              *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnapshotJobList        *QuerySnapshotJobListResponseBodySnapshotJobList        `json:"SnapshotJobList,omitempty" xml:"SnapshotJobList,omitempty" type:"Struct"`
}

func (s QuerySnapshotJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBody) SetNextPageToken(v string) *QuerySnapshotJobListResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *QuerySnapshotJobListResponseBody) SetNonExistSnapshotJobIds(v *QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds) *QuerySnapshotJobListResponseBody {
	s.NonExistSnapshotJobIds = v
	return s
}

func (s *QuerySnapshotJobListResponseBody) SetRequestId(v string) *QuerySnapshotJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySnapshotJobListResponseBody) SetSnapshotJobList(v *QuerySnapshotJobListResponseBodySnapshotJobList) *QuerySnapshotJobListResponseBody {
	s.SnapshotJobList = v
	return s
}

type QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds) SetString_(v []*string) *QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds {
	s.String_ = v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobList struct {
	SnapshotJob []*QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob `json:"SnapshotJob,omitempty" xml:"SnapshotJob,omitempty" type:"Repeated"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobList) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobList) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobList) SetSnapshotJob(v []*QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) *QuerySnapshotJobListResponseBodySnapshotJobList {
	s.SnapshotJob = v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob struct {
	Code             *string                                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Count            *string                                                                     `json:"Count,omitempty" xml:"Count,omitempty"`
	CreationTime     *string                                                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Id               *string                                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
	Input            *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MNSMessageResult *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId       *string                                                                     `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	SnapshotConfig   *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig   `json:"SnapshotConfig,omitempty" xml:"SnapshotConfig,omitempty" type:"Struct"`
	State            *string                                                                     `json:"State,omitempty" xml:"State,omitempty"`
	TileCount        *string                                                                     `json:"TileCount,omitempty" xml:"TileCount,omitempty"`
	UserData         *string                                                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetCode(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.Code = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetCount(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.Count = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetCreationTime(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.CreationTime = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetId(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.Id = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetInput(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.Input = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetMNSMessageResult(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.MNSMessageResult = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetMessage(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.Message = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetPipelineId(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.PipelineId = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetSnapshotConfig(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.SnapshotConfig = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetState(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.State = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetTileCount(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.TileCount = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetUserData(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.UserData = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) SetBucket(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput {
	s.Bucket = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) SetLocation(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput {
	s.Location = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) SetObject(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput {
	s.Object = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) SetRoleArn(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput {
	s.RoleArn = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) SetErrorCode(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) SetErrorMessage(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) SetMessageId(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig struct {
	FrameType      *string                                                                                 `json:"FrameType,omitempty" xml:"FrameType,omitempty"`
	Height         *string                                                                                 `json:"Height,omitempty" xml:"Height,omitempty"`
	Interval       *string                                                                                 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Num            *string                                                                                 `json:"Num,omitempty" xml:"Num,omitempty"`
	OutputFile     *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile     `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	TileOut        *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut        `json:"TileOut,omitempty" xml:"TileOut,omitempty" type:"Struct"`
	TileOutputFile *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile `json:"TileOutputFile,omitempty" xml:"TileOutputFile,omitempty" type:"Struct"`
	Time           *string                                                                                 `json:"Time,omitempty" xml:"Time,omitempty"`
	Width          *string                                                                                 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetFrameType(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.FrameType = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetHeight(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.Height = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetInterval(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.Interval = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetNum(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.Num = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetOutputFile(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.OutputFile = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetTileOut(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.TileOut = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetTileOutputFile(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.TileOutputFile = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetTime(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.Time = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetWidth(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.Width = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) SetBucket(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile {
	s.Bucket = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) SetLocation(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) SetObject(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) SetRoleArn(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile {
	s.RoleArn = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut struct {
	CellHeight    *string `json:"CellHeight,omitempty" xml:"CellHeight,omitempty"`
	CellSelStep   *string `json:"CellSelStep,omitempty" xml:"CellSelStep,omitempty"`
	CellWidth     *string `json:"CellWidth,omitempty" xml:"CellWidth,omitempty"`
	Color         *string `json:"Color,omitempty" xml:"Color,omitempty"`
	Columns       *string `json:"Columns,omitempty" xml:"Columns,omitempty"`
	IsKeepCellPic *string `json:"IsKeepCellPic,omitempty" xml:"IsKeepCellPic,omitempty"`
	Lines         *string `json:"Lines,omitempty" xml:"Lines,omitempty"`
	Margin        *string `json:"Margin,omitempty" xml:"Margin,omitempty"`
	Padding       *string `json:"Padding,omitempty" xml:"Padding,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetCellHeight(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.CellHeight = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetCellSelStep(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.CellSelStep = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetCellWidth(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.CellWidth = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetColor(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.Color = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetColumns(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.Columns = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetIsKeepCellPic(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.IsKeepCellPic = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetLines(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.Lines = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetMargin(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.Margin = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetPadding(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.Padding = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) SetBucket(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile {
	s.Bucket = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) SetLocation(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile {
	s.Location = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) SetObject(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile {
	s.Object = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) SetRoleArn(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile {
	s.RoleArn = &v
	return s
}

type QuerySnapshotJobListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySnapshotJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySnapshotJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponse) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponse) SetHeaders(v map[string]*string) *QuerySnapshotJobListResponse {
	s.Headers = v
	return s
}

func (s *QuerySnapshotJobListResponse) SetStatusCode(v int32) *QuerySnapshotJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySnapshotJobListResponse) SetBody(v *QuerySnapshotJobListResponseBody) *QuerySnapshotJobListResponse {
	s.Body = v
	return s
}

type QueryTemplateListRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	TemplateIds *string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty"`
}

func (s QueryTemplateListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListRequest) GoString() string {
	return s.String()
}

func (s *QueryTemplateListRequest) SetOwnerAccount(v string) *QueryTemplateListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryTemplateListRequest) SetOwnerId(v int64) *QueryTemplateListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryTemplateListRequest) SetResourceOwnerAccount(v string) *QueryTemplateListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryTemplateListRequest) SetResourceOwnerId(v int64) *QueryTemplateListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryTemplateListRequest) SetTemplateIds(v string) *QueryTemplateListRequest {
	s.TemplateIds = &v
	return s
}

type QueryTemplateListResponseBody struct {
	NonExistTids *QueryTemplateListResponseBodyNonExistTids `json:"NonExistTids,omitempty" xml:"NonExistTids,omitempty" type:"Struct"`
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateList *QueryTemplateListResponseBodyTemplateList `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Struct"`
}

func (s QueryTemplateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBody) SetNonExistTids(v *QueryTemplateListResponseBodyNonExistTids) *QueryTemplateListResponseBody {
	s.NonExistTids = v
	return s
}

func (s *QueryTemplateListResponseBody) SetRequestId(v string) *QueryTemplateListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTemplateListResponseBody) SetTemplateList(v *QueryTemplateListResponseBodyTemplateList) *QueryTemplateListResponseBody {
	s.TemplateList = v
	return s
}

type QueryTemplateListResponseBodyNonExistTids struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryTemplateListResponseBodyNonExistTids) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyNonExistTids) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyNonExistTids) SetString_(v []*string) *QueryTemplateListResponseBodyNonExistTids {
	s.String_ = v
	return s
}

type QueryTemplateListResponseBodyTemplateList struct {
	Template []*QueryTemplateListResponseBodyTemplateListTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s QueryTemplateListResponseBodyTemplateList) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateList) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateList) SetTemplate(v []*QueryTemplateListResponseBodyTemplateListTemplate) *QueryTemplateListResponseBodyTemplateList {
	s.Template = v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplate struct {
	Audio       *QueryTemplateListResponseBodyTemplateListTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container   *QueryTemplateListResponseBodyTemplateListTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Id          *string                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	MuxConfig   *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	State       *string                                                       `json:"State,omitempty" xml:"State,omitempty"`
	TransConfig *QueryTemplateListResponseBodyTemplateListTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *QueryTemplateListResponseBodyTemplateListTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplate) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplate) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetAudio(v *QueryTemplateListResponseBodyTemplateListTemplateAudio) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.Audio = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetContainer(v *QueryTemplateListResponseBodyTemplateListTemplateContainer) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.Container = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetId(v string) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.Id = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetMuxConfig(v *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.MuxConfig = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetName(v string) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.Name = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetState(v string) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.State = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetTransConfig(v *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.TransConfig = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetVideo(v *QueryTemplateListResponseBodyTemplateListTemplateVideo) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.Video = v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateAudio struct {
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Remove     *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateAudio) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetBitrate(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Bitrate = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetChannels(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Channels = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetCodec(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Codec = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetProfile(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Profile = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetQscale(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetRemove(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Remove = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetSamplerate(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Samplerate = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateContainer) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateContainer) SetFormat(v string) *QueryTemplateListResponseBodyTemplateListTemplateContainer {
	s.Format = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateMuxConfig struct {
	Gif     *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
	Webp    *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) SetGif(v *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) SetSegment(v *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig {
	s.Segment = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) SetWebp(v *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig {
	s.Webp = v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif struct {
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) SetDitherMode(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) SetFinalDelay(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) SetIsCustomPalette(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) SetLoop(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment) SetDuration(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp) SetLoop(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp {
	s.Loop = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetAdjDarMethod(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckAudioBitrate(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckReso(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckResoFail(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckVideoBitrate(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetTransMode(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.TransMode = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateVideo struct {
	Bitrate      *string                                                           `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd   *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	Bufsize      *string                                                           `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec        *string                                                           `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf          *string                                                           `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Crop         *string                                                           `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Degrain      *string                                                           `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	Fps          *string                                                           `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop          *string                                                           `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height       *string                                                           `json:"Height,omitempty" xml:"Height,omitempty"`
	MaxFps       *string                                                           `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Maxrate      *string                                                           `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Pad          *string                                                           `json:"Pad,omitempty" xml:"Pad,omitempty"`
	PixFmt       *string                                                           `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Preset       *string                                                           `json:"Preset,omitempty" xml:"Preset,omitempty"`
	Profile      *string                                                           `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale       *string                                                           `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Remove       *string                                                           `json:"Remove,omitempty" xml:"Remove,omitempty"`
	ResoPriority *string                                                           `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
	ScanMode     *string                                                           `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width        *string                                                           `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateVideo) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetBitrate(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetBitrateBnd(v *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetBufsize(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetCodec(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Codec = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetCrf(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Crf = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetCrop(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Crop = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetDegrain(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetFps(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Fps = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetGop(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Gop = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetHeight(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Height = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetMaxFps(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.MaxFps = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetMaxrate(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetPad(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Pad = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetPixFmt(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetPreset(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Preset = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetProfile(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Profile = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetQscale(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetRemove(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Remove = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetResoPriority(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.ResoPriority = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetScanMode(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.ScanMode = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetWidth(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Width = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd) SetMax(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd) SetMin(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type QueryTemplateListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryTemplateListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryTemplateListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponse) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponse) SetHeaders(v map[string]*string) *QueryTemplateListResponse {
	s.Headers = v
	return s
}

func (s *QueryTemplateListResponse) SetStatusCode(v int32) *QueryTemplateListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTemplateListResponse) SetBody(v *QueryTemplateListResponseBody) *QueryTemplateListResponse {
	s.Body = v
	return s
}

type QueryWaterMarkTemplateListRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	WaterMarkTemplateIds *string `json:"WaterMarkTemplateIds,omitempty" xml:"WaterMarkTemplateIds,omitempty"`
}

func (s QueryWaterMarkTemplateListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListRequest) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListRequest) SetOwnerAccount(v string) *QueryWaterMarkTemplateListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryWaterMarkTemplateListRequest) SetOwnerId(v int64) *QueryWaterMarkTemplateListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryWaterMarkTemplateListRequest) SetResourceOwnerAccount(v string) *QueryWaterMarkTemplateListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryWaterMarkTemplateListRequest) SetResourceOwnerId(v int64) *QueryWaterMarkTemplateListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryWaterMarkTemplateListRequest) SetWaterMarkTemplateIds(v string) *QueryWaterMarkTemplateListRequest {
	s.WaterMarkTemplateIds = &v
	return s
}

type QueryWaterMarkTemplateListResponseBody struct {
	NonExistWids          *QueryWaterMarkTemplateListResponseBodyNonExistWids          `json:"NonExistWids,omitempty" xml:"NonExistWids,omitempty" type:"Struct"`
	RequestId             *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WaterMarkTemplateList *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList `json:"WaterMarkTemplateList,omitempty" xml:"WaterMarkTemplateList,omitempty" type:"Struct"`
}

func (s QueryWaterMarkTemplateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBody) SetNonExistWids(v *QueryWaterMarkTemplateListResponseBodyNonExistWids) *QueryWaterMarkTemplateListResponseBody {
	s.NonExistWids = v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBody) SetRequestId(v string) *QueryWaterMarkTemplateListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBody) SetWaterMarkTemplateList(v *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList) *QueryWaterMarkTemplateListResponseBody {
	s.WaterMarkTemplateList = v
	return s
}

type QueryWaterMarkTemplateListResponseBodyNonExistWids struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryWaterMarkTemplateListResponseBodyNonExistWids) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBodyNonExistWids) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBodyNonExistWids) SetString_(v []*string) *QueryWaterMarkTemplateListResponseBodyNonExistWids {
	s.String_ = v
	return s
}

type QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList struct {
	WaterMarkTemplate []*QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate `json:"WaterMarkTemplate,omitempty" xml:"WaterMarkTemplate,omitempty" type:"Repeated"`
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList) SetWaterMarkTemplate(v []*QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList {
	s.WaterMarkTemplate = v
	return s
}

type QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate struct {
	Dx         *string                                                                                 `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy         *string                                                                                 `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height     *string                                                                                 `json:"Height,omitempty" xml:"Height,omitempty"`
	Id         *string                                                                                 `json:"Id,omitempty" xml:"Id,omitempty"`
	Name       *string                                                                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	RatioRefer *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer `json:"RatioRefer,omitempty" xml:"RatioRefer,omitempty" type:"Struct"`
	ReferPos   *string                                                                                 `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	State      *string                                                                                 `json:"State,omitempty" xml:"State,omitempty"`
	Timeline   *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline   `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	Type       *string                                                                                 `json:"Type,omitempty" xml:"Type,omitempty"`
	Width      *string                                                                                 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetDx(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Dx = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetDy(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Dy = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetHeight(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Height = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetId(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Id = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetName(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Name = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetRatioRefer(v *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.RatioRefer = v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetReferPos(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.ReferPos = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetState(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.State = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetTimeline(v *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Timeline = v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetType(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Type = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetWidth(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Width = &v
	return s
}

type QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer struct {
	Dx     *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy     *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetDx(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Dx = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetDy(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Dy = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetHeight(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Height = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetWidth(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Width = &v
	return s
}

type QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) SetDuration(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline {
	s.Duration = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) SetStart(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline {
	s.Start = &v
	return s
}

type QueryWaterMarkTemplateListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryWaterMarkTemplateListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryWaterMarkTemplateListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponse) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponse) SetHeaders(v map[string]*string) *QueryWaterMarkTemplateListResponse {
	s.Headers = v
	return s
}

func (s *QueryWaterMarkTemplateListResponse) SetStatusCode(v int32) *QueryWaterMarkTemplateListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponse) SetBody(v *QueryWaterMarkTemplateListResponseBody) *QueryWaterMarkTemplateListResponse {
	s.Body = v
	return s
}

type SearchMediaWorkflowRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StateList            *string `json:"StateList,omitempty" xml:"StateList,omitempty"`
}

func (s SearchMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaWorkflowRequest) SetOwnerAccount(v string) *SearchMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetOwnerId(v int64) *SearchMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetPageNumber(v int64) *SearchMediaWorkflowRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetPageSize(v int64) *SearchMediaWorkflowRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetResourceOwnerAccount(v string) *SearchMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetResourceOwnerId(v int64) *SearchMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetStateList(v string) *SearchMediaWorkflowRequest {
	s.StateList = &v
	return s
}

type SearchMediaWorkflowResponseBody struct {
	MediaWorkflowList *SearchMediaWorkflowResponseBodyMediaWorkflowList `json:"MediaWorkflowList,omitempty" xml:"MediaWorkflowList,omitempty" type:"Struct"`
	PageNumber        *int64                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int64                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount        *int64                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaWorkflowResponseBody) SetMediaWorkflowList(v *SearchMediaWorkflowResponseBodyMediaWorkflowList) *SearchMediaWorkflowResponseBody {
	s.MediaWorkflowList = v
	return s
}

func (s *SearchMediaWorkflowResponseBody) SetPageNumber(v int64) *SearchMediaWorkflowResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchMediaWorkflowResponseBody) SetPageSize(v int64) *SearchMediaWorkflowResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchMediaWorkflowResponseBody) SetRequestId(v string) *SearchMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaWorkflowResponseBody) SetTotalCount(v int64) *SearchMediaWorkflowResponseBody {
	s.TotalCount = &v
	return s
}

type SearchMediaWorkflowResponseBodyMediaWorkflowList struct {
	MediaWorkflow []*SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Repeated"`
}

func (s SearchMediaWorkflowResponseBodyMediaWorkflowList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaWorkflowResponseBodyMediaWorkflowList) GoString() string {
	return s.String()
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowList) SetMediaWorkflow(v []*SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) *SearchMediaWorkflowResponseBodyMediaWorkflowList {
	s.MediaWorkflow = v
	return s
}

type SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
	TriggerMode     *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
}

func (s SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) GoString() string {
	return s.String()
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetCreationTime(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetMediaWorkflowId(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetName(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.Name = &v
	return s
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetState(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.State = &v
	return s
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetTopology(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.Topology = &v
	return s
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetTriggerMode(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.TriggerMode = &v
	return s
}

type SearchMediaWorkflowResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaWorkflowResponse) SetHeaders(v map[string]*string) *SearchMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaWorkflowResponse) SetStatusCode(v int32) *SearchMediaWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaWorkflowResponse) SetBody(v *SearchMediaWorkflowResponseBody) *SearchMediaWorkflowResponse {
	s.Body = v
	return s
}

type SearchPipelineRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SearchPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineRequest) GoString() string {
	return s.String()
}

func (s *SearchPipelineRequest) SetOwnerAccount(v string) *SearchPipelineRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SearchPipelineRequest) SetOwnerId(v int64) *SearchPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *SearchPipelineRequest) SetPageNumber(v int64) *SearchPipelineRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchPipelineRequest) SetPageSize(v int64) *SearchPipelineRequest {
	s.PageSize = &v
	return s
}

func (s *SearchPipelineRequest) SetResourceOwnerAccount(v string) *SearchPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SearchPipelineRequest) SetResourceOwnerId(v int64) *SearchPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SearchPipelineRequest) SetState(v string) *SearchPipelineRequest {
	s.State = &v
	return s
}

type SearchPipelineResponseBody struct {
	PageNumber   *int64                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PipelineList *SearchPipelineResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int64                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *SearchPipelineResponseBody) SetPageNumber(v int64) *SearchPipelineResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchPipelineResponseBody) SetPageSize(v int64) *SearchPipelineResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchPipelineResponseBody) SetPipelineList(v *SearchPipelineResponseBodyPipelineList) *SearchPipelineResponseBody {
	s.PipelineList = v
	return s
}

func (s *SearchPipelineResponseBody) SetRequestId(v string) *SearchPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchPipelineResponseBody) SetTotalCount(v int64) *SearchPipelineResponseBody {
	s.TotalCount = &v
	return s
}

type SearchPipelineResponseBodyPipelineList struct {
	Pipeline []*SearchPipelineResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s SearchPipelineResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *SearchPipelineResponseBodyPipelineList) SetPipeline(v []*SearchPipelineResponseBodyPipelineListPipeline) *SearchPipelineResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type SearchPipelineResponseBodyPipelineListPipeline struct {
	Id           *string                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string                                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	NotifyConfig *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Role         *string                                                     `json:"Role,omitempty" xml:"Role,omitempty"`
	Speed        *string                                                     `json:"Speed,omitempty" xml:"Speed,omitempty"`
	SpeedLevel   *int64                                                      `json:"SpeedLevel,omitempty" xml:"SpeedLevel,omitempty"`
	State        *string                                                     `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SearchPipelineResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetId(v string) *SearchPipelineResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetName(v string) *SearchPipelineResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetNotifyConfig(v *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) *SearchPipelineResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetRole(v string) *SearchPipelineResponseBodyPipelineListPipeline {
	s.Role = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetSpeed(v string) *SearchPipelineResponseBodyPipelineListPipeline {
	s.Speed = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetSpeedLevel(v int64) *SearchPipelineResponseBodyPipelineListPipeline {
	s.SpeedLevel = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetState(v string) *SearchPipelineResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

type SearchPipelineResponseBodyPipelineListPipelineNotifyConfig struct {
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) SetQueueName(v string) *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type SearchPipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineResponse) GoString() string {
	return s.String()
}

func (s *SearchPipelineResponse) SetHeaders(v map[string]*string) *SearchPipelineResponse {
	s.Headers = v
	return s
}

func (s *SearchPipelineResponse) SetStatusCode(v int32) *SearchPipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchPipelineResponse) SetBody(v *SearchPipelineResponseBody) *SearchPipelineResponse {
	s.Body = v
	return s
}

type SearchTemplateRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SearchTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateRequest) GoString() string {
	return s.String()
}

func (s *SearchTemplateRequest) SetOwnerAccount(v string) *SearchTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SearchTemplateRequest) SetOwnerId(v int64) *SearchTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *SearchTemplateRequest) SetPageNumber(v int64) *SearchTemplateRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchTemplateRequest) SetPageSize(v int64) *SearchTemplateRequest {
	s.PageSize = &v
	return s
}

func (s *SearchTemplateRequest) SetResourceOwnerAccount(v string) *SearchTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SearchTemplateRequest) SetResourceOwnerId(v int64) *SearchTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SearchTemplateRequest) SetState(v string) *SearchTemplateRequest {
	s.State = &v
	return s
}

type SearchTemplateResponseBody struct {
	PageNumber   *int64                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateList *SearchTemplateResponseBodyTemplateList `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Struct"`
	TotalCount   *int64                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBody) SetPageNumber(v int64) *SearchTemplateResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchTemplateResponseBody) SetPageSize(v int64) *SearchTemplateResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchTemplateResponseBody) SetRequestId(v string) *SearchTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchTemplateResponseBody) SetTemplateList(v *SearchTemplateResponseBodyTemplateList) *SearchTemplateResponseBody {
	s.TemplateList = v
	return s
}

func (s *SearchTemplateResponseBody) SetTotalCount(v int64) *SearchTemplateResponseBody {
	s.TotalCount = &v
	return s
}

type SearchTemplateResponseBodyTemplateList struct {
	Template []*SearchTemplateResponseBodyTemplateListTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s SearchTemplateResponseBodyTemplateList) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateList) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateList) SetTemplate(v []*SearchTemplateResponseBodyTemplateListTemplate) *SearchTemplateResponseBodyTemplateList {
	s.Template = v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplate struct {
	Audio       *SearchTemplateResponseBodyTemplateListTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container   *SearchTemplateResponseBodyTemplateListTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Id          *string                                                    `json:"Id,omitempty" xml:"Id,omitempty"`
	MuxConfig   *SearchTemplateResponseBodyTemplateListTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	State       *string                                                    `json:"State,omitempty" xml:"State,omitempty"`
	TransConfig *SearchTemplateResponseBodyTemplateListTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *SearchTemplateResponseBodyTemplateListTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SearchTemplateResponseBodyTemplateListTemplate) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplate) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetAudio(v *SearchTemplateResponseBodyTemplateListTemplateAudio) *SearchTemplateResponseBodyTemplateListTemplate {
	s.Audio = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetContainer(v *SearchTemplateResponseBodyTemplateListTemplateContainer) *SearchTemplateResponseBodyTemplateListTemplate {
	s.Container = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetId(v string) *SearchTemplateResponseBodyTemplateListTemplate {
	s.Id = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetMuxConfig(v *SearchTemplateResponseBodyTemplateListTemplateMuxConfig) *SearchTemplateResponseBodyTemplateListTemplate {
	s.MuxConfig = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetName(v string) *SearchTemplateResponseBodyTemplateListTemplate {
	s.Name = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetState(v string) *SearchTemplateResponseBodyTemplateListTemplate {
	s.State = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetTransConfig(v *SearchTemplateResponseBodyTemplateListTemplateTransConfig) *SearchTemplateResponseBodyTemplateListTemplate {
	s.TransConfig = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetVideo(v *SearchTemplateResponseBodyTemplateListTemplateVideo) *SearchTemplateResponseBodyTemplateListTemplate {
	s.Video = v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateAudio struct {
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Remove     *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateAudio) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetBitrate(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Bitrate = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetChannels(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Channels = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetCodec(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Codec = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetProfile(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Profile = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetQscale(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetRemove(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Remove = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetSamplerate(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Samplerate = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateContainer) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateContainer) SetFormat(v string) *SearchTemplateResponseBodyTemplateListTemplateContainer {
	s.Format = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateMuxConfig struct {
	Gif     *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfig) SetGif(v *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) *SearchTemplateResponseBodyTemplateListTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfig) SetSegment(v *SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment) *SearchTemplateResponseBodyTemplateListTemplateMuxConfig {
	s.Segment = v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif struct {
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) SetDitherMode(v string) *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) SetFinalDelay(v string) *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) SetIsCustomPalette(v string) *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) SetLoop(v string) *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment) SetDuration(v string) *SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetAdjDarMethod(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckAudioBitrate(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckReso(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckResoFail(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckVideoBitrate(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetTransMode(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.TransMode = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateVideo struct {
	Bitrate    *string                                                        `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	Bufsize    *string                                                        `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec      *string                                                        `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf        *string                                                        `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Crop       *string                                                        `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Degrain    *string                                                        `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	Fps        *string                                                        `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop        *string                                                        `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height     *string                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	MaxFps     *string                                                        `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Maxrate    *string                                                        `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Pad        *string                                                        `json:"Pad,omitempty" xml:"Pad,omitempty"`
	PixFmt     *string                                                        `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Preset     *string                                                        `json:"Preset,omitempty" xml:"Preset,omitempty"`
	Profile    *string                                                        `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string                                                        `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Remove     *string                                                        `json:"Remove,omitempty" xml:"Remove,omitempty"`
	ScanMode   *string                                                        `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width      *string                                                        `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateVideo) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetBitrate(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetBitrateBnd(v *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetBufsize(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetCodec(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Codec = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetCrf(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Crf = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetCrop(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Crop = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetDegrain(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetFps(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Fps = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetGop(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Gop = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetHeight(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Height = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetMaxFps(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.MaxFps = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetMaxrate(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetPad(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Pad = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetPixFmt(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetPreset(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Preset = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetProfile(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Profile = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetQscale(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetRemove(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Remove = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetScanMode(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.ScanMode = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetWidth(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Width = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd) SetMax(v string) *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd) SetMin(v string) *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type SearchTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponse) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponse) SetHeaders(v map[string]*string) *SearchTemplateResponse {
	s.Headers = v
	return s
}

func (s *SearchTemplateResponse) SetStatusCode(v int32) *SearchTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchTemplateResponse) SetBody(v *SearchTemplateResponseBody) *SearchTemplateResponse {
	s.Body = v
	return s
}

type SearchWaterMarkTemplateRequest struct {
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SearchWaterMarkTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateRequest) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateRequest) SetOwnerAccount(v string) *SearchWaterMarkTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetOwnerId(v int64) *SearchWaterMarkTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetPageNumber(v int64) *SearchWaterMarkTemplateRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetPageSize(v int64) *SearchWaterMarkTemplateRequest {
	s.PageSize = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetResourceOwnerAccount(v string) *SearchWaterMarkTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetResourceOwnerId(v int64) *SearchWaterMarkTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetState(v string) *SearchWaterMarkTemplateRequest {
	s.State = &v
	return s
}

type SearchWaterMarkTemplateResponseBody struct {
	PageNumber            *int64                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize              *int64                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId             *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount            *int64                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	WaterMarkTemplateList *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList `json:"WaterMarkTemplateList,omitempty" xml:"WaterMarkTemplateList,omitempty" type:"Struct"`
}

func (s SearchWaterMarkTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponseBody) SetPageNumber(v int64) *SearchWaterMarkTemplateResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBody) SetPageSize(v int64) *SearchWaterMarkTemplateResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBody) SetRequestId(v string) *SearchWaterMarkTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBody) SetTotalCount(v int64) *SearchWaterMarkTemplateResponseBody {
	s.TotalCount = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBody) SetWaterMarkTemplateList(v *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList) *SearchWaterMarkTemplateResponseBody {
	s.WaterMarkTemplateList = v
	return s
}

type SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList struct {
	WaterMarkTemplate []*SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate `json:"WaterMarkTemplate,omitempty" xml:"WaterMarkTemplate,omitempty" type:"Repeated"`
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList) SetWaterMarkTemplate(v []*SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList {
	s.WaterMarkTemplate = v
	return s
}

type SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate struct {
	Dx         *string                                                                              `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy         *string                                                                              `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height     *string                                                                              `json:"Height,omitempty" xml:"Height,omitempty"`
	Id         *string                                                                              `json:"Id,omitempty" xml:"Id,omitempty"`
	Name       *string                                                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	RatioRefer *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer `json:"RatioRefer,omitempty" xml:"RatioRefer,omitempty" type:"Struct"`
	ReferPos   *string                                                                              `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	State      *string                                                                              `json:"State,omitempty" xml:"State,omitempty"`
	Timeline   *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline   `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	Type       *string                                                                              `json:"Type,omitempty" xml:"Type,omitempty"`
	Width      *string                                                                              `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetDx(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Dx = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetDy(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Dy = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetHeight(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Height = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetId(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Id = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetName(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Name = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetRatioRefer(v *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.RatioRefer = v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetReferPos(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.ReferPos = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetState(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.State = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetTimeline(v *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Timeline = v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetType(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Type = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetWidth(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Width = &v
	return s
}

type SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer struct {
	Dx     *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy     *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetDx(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Dx = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetDy(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Dy = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetHeight(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Height = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetWidth(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Width = &v
	return s
}

type SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) SetDuration(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline {
	s.Duration = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) SetStart(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline {
	s.Start = &v
	return s
}

type SearchWaterMarkTemplateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchWaterMarkTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchWaterMarkTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponse) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponse) SetHeaders(v map[string]*string) *SearchWaterMarkTemplateResponse {
	s.Headers = v
	return s
}

func (s *SearchWaterMarkTemplateResponse) SetStatusCode(v int32) *SearchWaterMarkTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchWaterMarkTemplateResponse) SetBody(v *SearchWaterMarkTemplateResponseBody) *SearchWaterMarkTemplateResponse {
	s.Body = v
	return s
}

type SubmitAnalysisJobRequest struct {
	AnalysisConfig *string `json:"AnalysisConfig,omitempty" xml:"AnalysisConfig,omitempty"`
	// This parameter is required.
	Input        *string `json:"Input,omitempty" xml:"Input,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Priority             *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitAnalysisJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobRequest) SetAnalysisConfig(v string) *SubmitAnalysisJobRequest {
	s.AnalysisConfig = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetInput(v string) *SubmitAnalysisJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetOwnerAccount(v string) *SubmitAnalysisJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetOwnerId(v int64) *SubmitAnalysisJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetPipelineId(v string) *SubmitAnalysisJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetPriority(v string) *SubmitAnalysisJobRequest {
	s.Priority = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetResourceOwnerAccount(v string) *SubmitAnalysisJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetResourceOwnerId(v int64) *SubmitAnalysisJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetUserData(v string) *SubmitAnalysisJobRequest {
	s.UserData = &v
	return s
}

type SubmitAnalysisJobResponseBody struct {
	AnalysisJob *SubmitAnalysisJobResponseBodyAnalysisJob `json:"AnalysisJob,omitempty" xml:"AnalysisJob,omitempty" type:"Struct"`
	RequestId   *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitAnalysisJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBody) SetAnalysisJob(v *SubmitAnalysisJobResponseBodyAnalysisJob) *SubmitAnalysisJobResponseBody {
	s.AnalysisJob = v
	return s
}

func (s *SubmitAnalysisJobResponseBody) SetRequestId(v string) *SubmitAnalysisJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJob struct {
	AnalysisConfig   *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig   `json:"AnalysisConfig,omitempty" xml:"AnalysisConfig,omitempty" type:"Struct"`
	Code             *string                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	CreationTime     *string                                                   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Id               *string                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
	InputFile        *SubmitAnalysisJobResponseBodyAnalysisJobInputFile        `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	MNSMessageResult *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	Percent          *int64                                                    `json:"Percent,omitempty" xml:"Percent,omitempty"`
	PipelineId       *string                                                   `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Priority         *string                                                   `json:"Priority,omitempty" xml:"Priority,omitempty"`
	State            *string                                                   `json:"State,omitempty" xml:"State,omitempty"`
	TemplateList     *SubmitAnalysisJobResponseBodyAnalysisJobTemplateList     `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Struct"`
	UserData         *string                                                   `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJob) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetAnalysisConfig(v *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.AnalysisConfig = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetCode(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.Code = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetCreationTime(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetId(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.Id = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetInputFile(v *SubmitAnalysisJobResponseBodyAnalysisJobInputFile) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.InputFile = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetMNSMessageResult(v *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetMessage(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.Message = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetPercent(v int64) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.Percent = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetPipelineId(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetPriority(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.Priority = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetState(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.State = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetTemplateList(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateList) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.TemplateList = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetUserData(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.UserData = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig struct {
	PropertiesControl *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl `json:"PropertiesControl,omitempty" xml:"PropertiesControl,omitempty" type:"Struct"`
	QualityControl    *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl    `json:"QualityControl,omitempty" xml:"QualityControl,omitempty" type:"Struct"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig) SetPropertiesControl(v *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig {
	s.PropertiesControl = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig) SetQualityControl(v *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig {
	s.QualityControl = v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl struct {
	Crop        *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop `json:"Crop,omitempty" xml:"Crop,omitempty" type:"Struct"`
	Deinterlace *string                                                                      `json:"Deinterlace,omitempty" xml:"Deinterlace,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl) SetCrop(v *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl {
	s.Crop = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl) SetDeinterlace(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl {
	s.Deinterlace = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop struct {
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Left   *string `json:"Left,omitempty" xml:"Left,omitempty"`
	Mode   *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	Top    *string `json:"Top,omitempty" xml:"Top,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) SetHeight(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Height = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) SetLeft(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Left = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) SetMode(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Mode = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) SetTop(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Top = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) SetWidth(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Width = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl struct {
	MethodStreaming *string `json:"MethodStreaming,omitempty" xml:"MethodStreaming,omitempty"`
	RateQuality     *string `json:"RateQuality,omitempty" xml:"RateQuality,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl) SetMethodStreaming(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl {
	s.MethodStreaming = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl) SetRateQuality(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl {
	s.RateQuality = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobInputFile) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobInputFile) SetBucket(v string) *SubmitAnalysisJobResponseBodyAnalysisJobInputFile {
	s.Bucket = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobInputFile) SetLocation(v string) *SubmitAnalysisJobResponseBodyAnalysisJobInputFile {
	s.Location = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobInputFile) SetObject(v string) *SubmitAnalysisJobResponseBodyAnalysisJobInputFile {
	s.Object = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) SetErrorCode(v string) *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) SetErrorMessage(v string) *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) SetMessageId(v string) *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateList struct {
	Template []*SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateList) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateList) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateList) SetTemplate(v []*SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateList {
	s.Template = v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate struct {
	Audio       *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container   *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Id          *string                                                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	MuxConfig   *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	State       *string                                                                  `json:"State,omitempty" xml:"State,omitempty"`
	TransConfig *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetAudio(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.Audio = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetContainer(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.Container = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetId(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.Id = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetMuxConfig(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.MuxConfig = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetName(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.Name = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetState(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.State = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetTransConfig(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.TransConfig = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetVideo(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.Video = v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio struct {
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetBitrate(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetChannels(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Channels = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetCodec(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Codec = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetProfile(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Profile = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetQscale(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetSamplerate(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Samplerate = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer) SetFormat(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer {
	s.Format = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig struct {
	Gif     *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig) SetGif(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig) SetSegment(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig {
	s.Segment = v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif struct {
	FinalDelay *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	Loop       *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif) SetFinalDelay(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif) SetLoop(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment) SetDuration(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig struct {
	TransMode *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig) SetTransMode(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig {
	s.TransMode = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo struct {
	Bitrate    *string                                                                      `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	Bufsize    *string                                                                      `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec      *string                                                                      `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf        *string                                                                      `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Degrain    *string                                                                      `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	Fps        *string                                                                      `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop        *string                                                                      `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height     *string                                                                      `json:"Height,omitempty" xml:"Height,omitempty"`
	Maxrate    *string                                                                      `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	PixFmt     *string                                                                      `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Preset     *string                                                                      `json:"Preset,omitempty" xml:"Preset,omitempty"`
	Profile    *string                                                                      `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string                                                                      `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	ScanMode   *string                                                                      `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width      *string                                                                      `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetBitrate(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetBitrateBnd(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetBufsize(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetCodec(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Codec = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetCrf(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Crf = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetDegrain(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetFps(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Fps = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetGop(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Gop = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetHeight(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Height = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetMaxrate(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetPixFmt(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetPreset(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Preset = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetProfile(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Profile = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetQscale(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetScanMode(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetWidth(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Width = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd) SetMax(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd) SetMin(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type SubmitAnalysisJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitAnalysisJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitAnalysisJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponse) SetHeaders(v map[string]*string) *SubmitAnalysisJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAnalysisJobResponse) SetStatusCode(v int32) *SubmitAnalysisJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitAnalysisJobResponse) SetBody(v *SubmitAnalysisJobResponseBody) *SubmitAnalysisJobResponse {
	s.Body = v
	return s
}

type SubmitEditingJobsRequest struct {
	// This parameter is required.
	EditingInputs *string `json:"EditingInputs,omitempty" xml:"EditingInputs,omitempty"`
	// This parameter is required.
	EditingJobOutputs *string `json:"EditingJobOutputs,omitempty" xml:"EditingJobOutputs,omitempty"`
	// This parameter is required.
	OutputBucket   *string `json:"OutputBucket,omitempty" xml:"OutputBucket,omitempty"`
	OutputLocation *string `json:"OutputLocation,omitempty" xml:"OutputLocation,omitempty"`
	OwnerAccount   *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s SubmitEditingJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsRequest) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsRequest) SetEditingInputs(v string) *SubmitEditingJobsRequest {
	s.EditingInputs = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetEditingJobOutputs(v string) *SubmitEditingJobsRequest {
	s.EditingJobOutputs = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetOutputBucket(v string) *SubmitEditingJobsRequest {
	s.OutputBucket = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetOutputLocation(v string) *SubmitEditingJobsRequest {
	s.OutputLocation = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetOwnerAccount(v string) *SubmitEditingJobsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetOwnerId(v int64) *SubmitEditingJobsRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetPipelineId(v string) *SubmitEditingJobsRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetResourceOwnerAccount(v string) *SubmitEditingJobsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetResourceOwnerId(v int64) *SubmitEditingJobsRequest {
	s.ResourceOwnerId = &v
	return s
}

type SubmitEditingJobsResponseBody struct {
	JobResultList *SubmitEditingJobsResponseBodyJobResultList `json:"JobResultList,omitempty" xml:"JobResultList,omitempty" type:"Struct"`
	RequestId     *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitEditingJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBody) SetJobResultList(v *SubmitEditingJobsResponseBodyJobResultList) *SubmitEditingJobsResponseBody {
	s.JobResultList = v
	return s
}

func (s *SubmitEditingJobsResponseBody) SetRequestId(v string) *SubmitEditingJobsResponseBody {
	s.RequestId = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultList struct {
	JobResult []*SubmitEditingJobsResponseBodyJobResultListJobResult `json:"JobResult,omitempty" xml:"JobResult,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultList) SetJobResult(v []*SubmitEditingJobsResponseBodyJobResultListJobResult) *SubmitEditingJobsResponseBodyJobResultList {
	s.JobResult = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResult struct {
	Code    *string                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Job     *SubmitEditingJobsResponseBodyJobResultListJobResultJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	Message *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResult) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResult) SetCode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResult {
	s.Code = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResult) SetJob(v *SubmitEditingJobsResponseBodyJobResultListJobResultJob) *SubmitEditingJobsResponseBodyJobResultListJobResult {
	s.Job = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResult) SetMessage(v string) *SubmitEditingJobsResponseBodyJobResultListJobResult {
	s.Message = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResult) SetSuccess(v bool) *SubmitEditingJobsResponseBodyJobResultListJobResult {
	s.Success = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJob struct {
	Code             *string                                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	CreationTime     *string                                                                 `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	EditingConfig    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig    `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty" type:"Struct"`
	EditingInputs    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs    `json:"EditingInputs,omitempty" xml:"EditingInputs,omitempty" type:"Struct"`
	FinishTime       *string                                                                 `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	JobId            *string                                                                 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MNSMessageResult *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	Percent          *int64                                                                  `json:"Percent,omitempty" xml:"Percent,omitempty"`
	PipelineId       *string                                                                 `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	State            *string                                                                 `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJob) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetCode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.Code = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetCreationTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetEditingConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.EditingConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetEditingInputs(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.EditingInputs = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetFinishTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetJobId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.JobId = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetMNSMessageResult(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetMessage(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.Message = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetPercent(v int64) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.Percent = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetPipelineId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetState(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.State = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig struct {
	Audio                  *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                                                    `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	Clip                   *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	Container              *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	DeWatermark            *string                                                                                    `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	DigiWaterMark          *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark          `json:"DigiWaterMark,omitempty" xml:"DigiWaterMark,omitempty" type:"Struct"`
	Editing                *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing                `json:"Editing,omitempty" xml:"Editing,omitempty" type:"Struct"`
	Encryption             *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	M3U8NonStandardSupport *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                                                    `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	MergeList              *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	MuxConfig              *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	OutputFile             *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Priority               *string                                                                                    `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Properties             *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
	Rotate                 *string                                                                                    `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	SubtitleConfig         *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	SuperReso              *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	TemplateId             *string                                                                                    `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TransConfig            *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	UserData               *string                                                                                    `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Video                  *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                                                    `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	WaterMarkConfigUrl     *string                                                                                    `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	WaterMarkList          *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetAudio(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Audio = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetAudioStreamMap(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.AudioStreamMap = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetClip(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Clip = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetContainer(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Container = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetDeWatermark(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.DeWatermark = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetDigiWaterMark(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.DigiWaterMark = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetEditing(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Editing = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetEncryption(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Encryption = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetM3U8NonStandardSupport(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetMergeConfigUrl(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.MergeConfigUrl = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetMergeList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.MergeList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetMuxConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.MuxConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetOutputFile(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.OutputFile = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetPriority(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Priority = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetProperties(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Properties = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetRotate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Rotate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetSubtitleConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.SubtitleConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetSuperReso(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.SuperReso = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetTemplateId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.TemplateId = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetTransConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.TransConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetUserData(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.UserData = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetVideo(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Video = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetVideoStreamMap(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.VideoStreamMap = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetWaterMarkConfigUrl(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetWaterMarkList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.WaterMarkList = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio struct {
	Bitrate    *string                                                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string                                                                         `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string                                                                         `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string                                                                         `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string                                                                         `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Samplerate *string                                                                         `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetChannels(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Channels = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetCodec(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Codec = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetProfile(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Profile = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetQscale(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Qscale = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetSamplerate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetVolume(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Volume = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume struct {
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume) SetLevel(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume {
	s.Level = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume) SetMethod(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume {
	s.Method = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip struct {
	TimeSpan *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip) SetTimeSpan(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip {
	s.TimeSpan = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan) SetSeek(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan {
	s.Seek = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer) SetFormat(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer {
	s.Format = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark struct {
	Alpha     *string                                                                                    `json:"Alpha,omitempty" xml:"Alpha,omitempty"`
	InputFile *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	Type      *string                                                                                    `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) SetAlpha(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark {
	s.Alpha = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) SetInputFile(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark {
	s.InputFile = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) SetType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark {
	s.Type = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) SetBucket(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile {
	s.Bucket = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) SetLocation(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) SetObject(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile {
	s.Object = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing struct {
	ClipList *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList `json:"ClipList,omitempty" xml:"ClipList,omitempty" type:"Struct"`
	Timeline *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing) SetClipList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing {
	s.ClipList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing) SetTimeline(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing {
	s.Timeline = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList struct {
	Clip []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList) SetClip(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList {
	s.Clip = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip struct {
	Effects       *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects `json:"Effects,omitempty" xml:"Effects,omitempty" type:"Struct"`
	Id            *string                                                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	In            *string                                                                                        `json:"In,omitempty" xml:"In,omitempty"`
	Out           *string                                                                                        `json:"Out,omitempty" xml:"Out,omitempty"`
	SourceID      *string                                                                                        `json:"SourceID,omitempty" xml:"SourceID,omitempty"`
	SourceStrmMap *string                                                                                        `json:"SourceStrmMap,omitempty" xml:"SourceStrmMap,omitempty"`
	SourceType    *string                                                                                        `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Type          *string                                                                                        `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetEffects(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.Effects = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.Id = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetIn(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.In = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetOut(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.Out = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetSourceID(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.SourceID = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetSourceStrmMap(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.SourceStrmMap = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetSourceType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.SourceType = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.Type = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects struct {
	Effect []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect `json:"Effect,omitempty" xml:"Effect,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects) SetEffect(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects {
	s.Effect = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect struct {
	Effect       *string `json:"Effect,omitempty" xml:"Effect,omitempty"`
	EffectConfig *string `json:"EffectConfig,omitempty" xml:"EffectConfig,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect) SetEffect(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect {
	s.Effect = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect) SetEffectConfig(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect {
	s.EffectConfig = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline struct {
	TimelineConfig *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig `json:"TimelineConfig,omitempty" xml:"TimelineConfig,omitempty" type:"Struct"`
	TrackList      *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList      `json:"TrackList,omitempty" xml:"TrackList,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline) SetTimelineConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline {
	s.TimelineConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline) SetTrackList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline {
	s.TrackList = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig struct {
	TimelineConfigAudio *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio `json:"TimelineConfigAudio,omitempty" xml:"TimelineConfigAudio,omitempty" type:"Struct"`
	TimelineConfigVideo *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo `json:"TimelineConfigVideo,omitempty" xml:"TimelineConfigVideo,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig) SetTimelineConfigAudio(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig {
	s.TimelineConfigAudio = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig) SetTimelineConfigVideo(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig {
	s.TimelineConfigVideo = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio struct {
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels      *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Samplerate    *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetChannelLayout(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetChannels(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Channels = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetSamplerate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Samplerate = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo struct {
	BgColor        *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	Fps            *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height         *string `json:"Height,omitempty" xml:"Height,omitempty"`
	IsGpuData      *string `json:"IsGpuData,omitempty" xml:"IsGpuData,omitempty"`
	IsOneTrackData *string `json:"IsOneTrackData,omitempty" xml:"IsOneTrackData,omitempty"`
	ReclosePrec    *string `json:"ReclosePrec,omitempty" xml:"ReclosePrec,omitempty"`
	RenderRatio    *string `json:"RenderRatio,omitempty" xml:"RenderRatio,omitempty"`
	Width          *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetBgColor(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.BgColor = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetFps(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Fps = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetHeight(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Height = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetIsGpuData(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsGpuData = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetIsOneTrackData(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsOneTrackData = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetReclosePrec(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.ReclosePrec = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetRenderRatio(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.RenderRatio = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetWidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Width = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList struct {
	Track []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack `json:"Track,omitempty" xml:"Track,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList) SetTrack(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList {
	s.Track = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack struct {
	Clips *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips `json:"Clips,omitempty" xml:"Clips,omitempty" type:"Struct"`
	Id    *string                                                                                                `json:"Id,omitempty" xml:"Id,omitempty"`
	Order *string                                                                                                `json:"Order,omitempty" xml:"Order,omitempty"`
	Type  *string                                                                                                `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) SetClips(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack {
	s.Clips = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) SetId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack {
	s.Id = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) SetOrder(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack {
	s.Order = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) SetType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack {
	s.Type = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips struct {
	Clip []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips) SetClip(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips {
	s.Clip = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip struct {
	ClipsConfig *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig `json:"ClipsConfig,omitempty" xml:"ClipsConfig,omitempty" type:"Struct"`
	In          *string                                                                                                               `json:"In,omitempty" xml:"In,omitempty"`
	Out         *string                                                                                                               `json:"Out,omitempty" xml:"Out,omitempty"`
	ClipID      *string                                                                                                               `json:"clipID,omitempty" xml:"clipID,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetClipsConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.ClipsConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetIn(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.In = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetOut(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.Out = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetClipID(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.ClipID = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig struct {
	ClipsConfigVideo *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo `json:"ClipsConfigVideo,omitempty" xml:"ClipsConfigVideo,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) SetClipsConfigVideo(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig {
	s.ClipsConfigVideo = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo struct {
	L *string `json:"L,omitempty" xml:"L,omitempty"`
	T *string `json:"T,omitempty" xml:"T,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetL(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.L = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetT(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.T = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption struct {
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.Id = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetKey(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.Key = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetKeyType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.KeyType = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetKeyUri(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.KeyUri = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetSkipCnt(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.SkipCnt = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.Type = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport struct {
	TS *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport) SetTS(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport {
	s.TS = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS struct {
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS) SetMd5Support(v bool) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS) SetSizeSupport(v bool) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList struct {
	Merge []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList) SetMerge(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList {
	s.Merge = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) SetMergeURL(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) SetRoleArn(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) SetStart(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge {
	s.Start = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig struct {
	Gif     *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig) SetGif(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig {
	s.Gif = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig) SetSegment(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig {
	s.Segment = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif struct {
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) SetDitherMode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) SetFinalDelay(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) SetIsCustomPalette(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) SetLoop(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif {
	s.Loop = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment {
	s.Duration = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) SetBucket(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile {
	s.Bucket = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) SetLocation(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile {
	s.Location = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) SetObject(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile {
	s.Object = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) SetRoleArn(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile {
	s.RoleArn = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties struct {
	Bitrate    *string                                                                               `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration   *string                                                                               `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileFormat *string                                                                               `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	FileSize   *string                                                                               `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	Format     *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	Fps        *string                                                                               `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height     *string                                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	Streams    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Width      *string                                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetFileFormat(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.FileFormat = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetFileSize(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.FileSize = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetFormat(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Format = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetFps(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Fps = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetHeight(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Height = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetStreams(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Streams = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetWidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Width = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetFormatLongName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetFormatName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.FormatName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetNumPrograms(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetNumStreams(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetSize(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.Size = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetStartTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.StartTime = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams struct {
	AudioStreamList    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
	VideoStreamList    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) SetAudioStreamList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) SetSubtitleStreamList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) SetVideoStreamList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams {
	s.VideoStreamList = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList struct {
	AudioStream []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList) SetAudioStream(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList struct {
	VideoStream []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList) SetVideoStream(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream struct {
	AvgFPS         *string                                                                                                                    `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	Bitrate        *string                                                                                                                    `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecLongName  *string                                                                                                                    `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string                                                                                                                    `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string                                                                                                                    `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string                                                                                                                    `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string                                                                                                                    `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Dar            *string                                                                                                                    `json:"Dar,omitempty" xml:"Dar,omitempty"`
	Duration       *string                                                                                                                    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                                                    `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames     *string                                                                                                                    `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Height         *string                                                                                                                    `json:"Height,omitempty" xml:"Height,omitempty"`
	Index          *string                                                                                                                    `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string                                                                                                                    `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Level          *string                                                                                                                    `json:"Level,omitempty" xml:"Level,omitempty"`
	NetworkCost    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	NumFrames      *string                                                                                                                    `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	PixFmt         *string                                                                                                                    `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Profile        *string                                                                                                                    `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Sar            *string                                                                                                                    `json:"Sar,omitempty" xml:"Sar,omitempty"`
	StartTime      *string                                                                                                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string                                                                                                                    `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Width          *string                                                                                                                    `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig struct {
	ExtSubtitleList *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig) SetExtSubtitleList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig) SetSubtitleList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig {
	s.SubtitleList = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                                                           `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                                                           `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList struct {
	Subtitle []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList) SetSubtitle(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle) SetMap(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso) SetIsHalfSample(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso {
	s.IsHalfSample = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	Duration                *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetAdjDarMethod(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckAudioBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckReso(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckResoFail(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckVideoBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetTransMode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.TransMode = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo struct {
	Bitrate    *string                                                                             `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	Bufsize    *string                                                                             `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec      *string                                                                             `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf        *string                                                                             `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Crop       *string                                                                             `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Degrain    *string                                                                             `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	Fps        *string                                                                             `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop        *string                                                                             `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height     *string                                                                             `json:"Height,omitempty" xml:"Height,omitempty"`
	MaxFps     *string                                                                             `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Maxrate    *string                                                                             `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Pad        *string                                                                             `json:"Pad,omitempty" xml:"Pad,omitempty"`
	PixFmt     *string                                                                             `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Preset     *string                                                                             `json:"Preset,omitempty" xml:"Preset,omitempty"`
	Profile    *string                                                                             `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string                                                                             `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	ScanMode   *string                                                                             `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width      *string                                                                             `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetBitrateBnd(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.BitrateBnd = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetBufsize(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetCodec(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Codec = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetCrf(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Crf = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetCrop(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Crop = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetDegrain(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Degrain = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetFps(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Fps = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetGop(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Gop = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetHeight(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Height = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetMaxFps(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.MaxFps = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetMaxrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetPad(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Pad = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetPixFmt(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetPreset(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Preset = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetProfile(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Profile = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetQscale(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Qscale = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetScanMode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetWidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Width = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd) SetMax(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd) SetMin(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd {
	s.Min = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList struct {
	WaterMark []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList) SetWaterMark(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList {
	s.WaterMark = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark struct {
	Dx                  *string                                                                                             `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy                  *string                                                                                             `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height              *string                                                                                             `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	ReferPos            *string                                                                                             `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Type                *string                                                                                             `json:"Type,omitempty" xml:"Type,omitempty"`
	WaterMarkTemplateId *string                                                                                             `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Width               *string                                                                                             `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetDx(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetDy(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetHeight(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetInputFile(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetReferPos(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetWidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.Width = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) SetBucket(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) SetLocation(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) SetObject(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs struct {
	EditingInput []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput `json:"EditingInput,omitempty" xml:"EditingInput,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs) SetEditingInput(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs {
	s.EditingInput = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput struct {
	Id          *string                                                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
	InputConfig *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	InputFile   *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile   `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) SetId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput {
	s.Id = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) SetInputConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput {
	s.InputConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) SetInputFile(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput {
	s.InputFile = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig struct {
	DeinterlaceMethod *string `json:"DeinterlaceMethod,omitempty" xml:"DeinterlaceMethod,omitempty"`
	IsNormalSar       *string `json:"IsNormalSar,omitempty" xml:"IsNormalSar,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig) SetDeinterlaceMethod(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig {
	s.DeinterlaceMethod = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig) SetIsNormalSar(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig {
	s.IsNormalSar = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) SetBucket(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile {
	s.Bucket = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) SetLocation(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile {
	s.Location = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) SetObject(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile {
	s.Object = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetErrorCode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetErrorMessage(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetMessageId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type SubmitEditingJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitEditingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitEditingJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponse) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponse) SetHeaders(v map[string]*string) *SubmitEditingJobsResponse {
	s.Headers = v
	return s
}

func (s *SubmitEditingJobsResponse) SetStatusCode(v int32) *SubmitEditingJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitEditingJobsResponse) SetBody(v *SubmitEditingJobsResponseBody) *SubmitEditingJobsResponse {
	s.Body = v
	return s
}

type SubmitJobsRequest struct {
	// This parameter is required.
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// This parameter is required.
	OutputBucket   *string `json:"OutputBucket,omitempty" xml:"OutputBucket,omitempty"`
	OutputLocation *string `json:"OutputLocation,omitempty" xml:"OutputLocation,omitempty"`
	// This parameter is required.
	Outputs      *string `json:"Outputs,omitempty" xml:"Outputs,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s SubmitJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsRequest) GoString() string {
	return s.String()
}

func (s *SubmitJobsRequest) SetInput(v string) *SubmitJobsRequest {
	s.Input = &v
	return s
}

func (s *SubmitJobsRequest) SetOutputBucket(v string) *SubmitJobsRequest {
	s.OutputBucket = &v
	return s
}

func (s *SubmitJobsRequest) SetOutputLocation(v string) *SubmitJobsRequest {
	s.OutputLocation = &v
	return s
}

func (s *SubmitJobsRequest) SetOutputs(v string) *SubmitJobsRequest {
	s.Outputs = &v
	return s
}

func (s *SubmitJobsRequest) SetOwnerAccount(v string) *SubmitJobsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitJobsRequest) SetOwnerId(v int64) *SubmitJobsRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitJobsRequest) SetPipelineId(v string) *SubmitJobsRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitJobsRequest) SetResourceOwnerAccount(v string) *SubmitJobsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitJobsRequest) SetResourceOwnerId(v int64) *SubmitJobsRequest {
	s.ResourceOwnerId = &v
	return s
}

type SubmitJobsResponseBody struct {
	JobResultList *SubmitJobsResponseBodyJobResultList `json:"JobResultList,omitempty" xml:"JobResultList,omitempty" type:"Struct"`
	RequestId     *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBody) SetJobResultList(v *SubmitJobsResponseBodyJobResultList) *SubmitJobsResponseBody {
	s.JobResultList = v
	return s
}

func (s *SubmitJobsResponseBody) SetRequestId(v string) *SubmitJobsResponseBody {
	s.RequestId = &v
	return s
}

type SubmitJobsResponseBodyJobResultList struct {
	JobResult []*SubmitJobsResponseBodyJobResultListJobResult `json:"JobResult,omitempty" xml:"JobResult,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultList) SetJobResult(v []*SubmitJobsResponseBodyJobResultListJobResult) *SubmitJobsResponseBodyJobResultList {
	s.JobResult = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResult struct {
	Code    *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Job     *SubmitJobsResponseBodyJobResultListJobResultJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	Message *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	Success *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResult) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResult) SetCode(v string) *SubmitJobsResponseBodyJobResultListJobResult {
	s.Code = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResult) SetJob(v *SubmitJobsResponseBodyJobResultListJobResultJob) *SubmitJobsResponseBodyJobResultListJobResult {
	s.Job = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResult) SetMessage(v string) *SubmitJobsResponseBodyJobResultListJobResult {
	s.Message = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResult) SetSuccess(v bool) *SubmitJobsResponseBodyJobResultListJobResult {
	s.Success = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJob struct {
	Code             *string                                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	CreationTime     *string                                                          `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FinishTime       *string                                                          `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input            *SubmitJobsResponseBodyJobResultListJobResultJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId            *string                                                          `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MNSMessageResult *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	Output           *SubmitJobsResponseBodyJobResultListJobResultJobOutput           `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	Percent          *int64                                                           `json:"Percent,omitempty" xml:"Percent,omitempty"`
	PipelineId       *string                                                          `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	State            *string                                                          `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJob) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetCode(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.Code = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetCreationTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetFinishTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetInput(v *SubmitJobsResponseBodyJobResultListJobResultJobInput) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.Input = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetJobId(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.JobId = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetMNSMessageResult(v *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetMessage(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.Message = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetOutput(v *SubmitJobsResponseBodyJobResultListJobResultJobOutput) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.Output = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetPercent(v int64) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.Percent = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetPipelineId(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetState(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.State = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobInput) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobInput) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobInput {
	s.Bucket = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobInput) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobInput {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobInput) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobInput {
	s.Object = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetErrorCode(v string) *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetErrorMessage(v string) *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetMessageId(v string) *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutput struct {
	AmixList               *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList               `json:"AmixList,omitempty" xml:"AmixList,omitempty" type:"Struct"`
	Audio                  *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                                      `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	Clip                   *SubmitJobsResponseBodyJobResultListJobResultJobOutputClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	Container              *SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	DeWatermark            *string                                                                      `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	DigiWaterMark          *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark          `json:"DigiWaterMark,omitempty" xml:"DigiWaterMark,omitempty" type:"Struct"`
	Encryption             *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	M3U8NonStandardSupport *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                                      `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	MergeList              *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	MuxConfig              *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	OpeningList            *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList            `json:"OpeningList,omitempty" xml:"OpeningList,omitempty" type:"Struct"`
	OutSubtitleList        *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList        `json:"OutSubtitleList,omitempty" xml:"OutSubtitleList,omitempty" type:"Struct"`
	OutputFile             *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Priority               *string                                                                      `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Properties             *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
	Rotate                 *string                                                                      `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	SubtitleConfig         *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	SuperReso              *SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	TailSlateList          *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList          `json:"TailSlateList,omitempty" xml:"TailSlateList,omitempty" type:"Struct"`
	TemplateId             *string                                                                      `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TransConfig            *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	UserData               *string                                                                      `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Video                  *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                                      `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	WaterMarkConfigUrl     *string                                                                      `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	WaterMarkList          *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutput) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetAmixList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.AmixList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetAudio(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Audio = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetAudioStreamMap(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.AudioStreamMap = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetClip(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputClip) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Clip = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetContainer(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Container = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetDeWatermark(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.DeWatermark = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetDigiWaterMark(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.DigiWaterMark = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetEncryption(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Encryption = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetM3U8NonStandardSupport(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetMergeConfigUrl(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.MergeConfigUrl = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetMergeList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.MergeList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetMuxConfig(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.MuxConfig = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetOpeningList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.OpeningList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetOutSubtitleList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.OutSubtitleList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetOutputFile(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.OutputFile = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetPriority(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Priority = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetProperties(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Properties = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetRotate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Rotate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetSubtitleConfig(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.SubtitleConfig = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetSuperReso(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.SuperReso = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetTailSlateList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.TailSlateList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetTemplateId(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.TemplateId = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetTransConfig(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.TransConfig = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetUserData(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.UserData = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetVideo(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Video = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetVideoStreamMap(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.VideoStreamMap = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetWaterMarkConfigUrl(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetWaterMarkList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.WaterMarkList = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList struct {
	Amix []*SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix `json:"Amix,omitempty" xml:"Amix,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList) SetAmix(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList {
	s.Amix = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix struct {
	AmixURL    *string `json:"AmixURL,omitempty" xml:"AmixURL,omitempty"`
	Duration   *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Map        *string `json:"Map,omitempty" xml:"Map,omitempty"`
	MixDurMode *string `json:"MixDurMode,omitempty" xml:"MixDurMode,omitempty"`
	Start      *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) SetAmixURL(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix {
	s.AmixURL = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) SetMap(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix {
	s.Map = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) SetMixDurMode(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix {
	s.MixDurMode = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) SetStart(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix {
	s.Start = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio struct {
	Bitrate    *string                                                           `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string                                                           `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string                                                           `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string                                                           `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string                                                           `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Samplerate *string                                                           `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetChannels(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Channels = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetCodec(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Codec = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetProfile(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Profile = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetQscale(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Qscale = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetSamplerate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetVolume(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Volume = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume struct {
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume) SetLevel(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume {
	s.Level = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume) SetMethod(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume {
	s.Method = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputClip struct {
	TimeSpan *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputClip) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputClip) SetTimeSpan(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan) *SubmitJobsResponseBodyJobResultListJobResultJobOutputClip {
	s.TimeSpan = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan) SetSeek(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan {
	s.Seek = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer) SetFormat(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer {
	s.Format = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark struct {
	Alpha     *string                                                                      `json:"Alpha,omitempty" xml:"Alpha,omitempty"`
	InputFile *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	Type      *string                                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) SetAlpha(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark {
	s.Alpha = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) SetInputFile(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark {
	s.InputFile = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) SetType(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark {
	s.Type = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile {
	s.Bucket = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile {
	s.Object = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption struct {
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetId(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.Id = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetKey(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.Key = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetKeyType(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.KeyType = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetKeyUri(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.KeyUri = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetSkipCnt(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.SkipCnt = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetType(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.Type = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport struct {
	TS *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport) SetTS(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS) *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport {
	s.TS = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS struct {
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS) SetMd5Support(v bool) *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS) SetSizeSupport(v bool) *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList struct {
	Merge []*SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList) SetMerge(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList {
	s.Merge = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) SetMergeURL(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) SetRoleArn(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) SetStart(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge {
	s.Start = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig struct {
	Gif     *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
	Webp    *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) SetGif(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig {
	s.Gif = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) SetSegment(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig {
	s.Segment = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) SetWebp(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig {
	s.Webp = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif struct {
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) SetDitherMode(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) SetFinalDelay(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) SetIsCustomPalette(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) SetLoop(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif {
	s.Loop = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment {
	s.Duration = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp) SetLoop(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp {
	s.Loop = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList struct {
	Opening []*SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening `json:"Opening,omitempty" xml:"Opening,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList) SetOpening(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList {
	s.Opening = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening struct {
	Height  *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Start   *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Width   *string `json:"Width,omitempty" xml:"Width,omitempty"`
	OpenUrl *string `json:"openUrl,omitempty" xml:"openUrl,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) SetStart(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening {
	s.Start = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening {
	s.Width = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) SetOpenUrl(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening {
	s.OpenUrl = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList struct {
	OutSubtitle []*SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle `json:"OutSubtitle,omitempty" xml:"OutSubtitle,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList) SetOutSubtitle(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList {
	s.OutSubtitle = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle struct {
	Map             *string                                                                                         `json:"Map,omitempty" xml:"Map,omitempty"`
	Message         *string                                                                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	OutSubtitleFile *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile `json:"OutSubtitleFile,omitempty" xml:"OutSubtitleFile,omitempty" type:"Struct"`
	Success         *bool                                                                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) SetMap(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle {
	s.Map = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) SetMessage(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle {
	s.Message = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) SetOutSubtitleFile(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle {
	s.OutSubtitleFile = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) SetSuccess(v bool) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle {
	s.Success = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Bucket = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Object = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetRoleArn(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.RoleArn = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile {
	s.Bucket = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile {
	s.Object = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) SetRoleArn(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile {
	s.RoleArn = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties struct {
	Bitrate    *string                                                                 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration   *string                                                                 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileFormat *string                                                                 `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	FileSize   *string                                                                 `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	Format     *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	Fps        *string                                                                 `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height     *string                                                                 `json:"Height,omitempty" xml:"Height,omitempty"`
	Streams    *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Width      *string                                                                 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetFileFormat(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.FileFormat = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetFileSize(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.FileSize = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetFormat(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Format = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetFps(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Fps = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetStreams(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Streams = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Width = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetFormatLongName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetFormatName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.FormatName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetNumPrograms(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetNumStreams(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetSize(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.Size = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetStartTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.StartTime = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams struct {
	AudioStreamList    *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
	VideoStreamList    *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) SetAudioStreamList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) SetSubtitleStreamList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) SetVideoStreamList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams {
	s.VideoStreamList = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList struct {
	AudioStream []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList) SetAudioStream(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList struct {
	VideoStream []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList) SetVideoStream(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream struct {
	AvgFPS         *string                                                                                                      `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	Bitrate        *string                                                                                                      `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecLongName  *string                                                                                                      `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string                                                                                                      `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string                                                                                                      `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string                                                                                                      `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string                                                                                                      `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Dar            *string                                                                                                      `json:"Dar,omitempty" xml:"Dar,omitempty"`
	Duration       *string                                                                                                      `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                                      `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames     *string                                                                                                      `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Height         *string                                                                                                      `json:"Height,omitempty" xml:"Height,omitempty"`
	Index          *string                                                                                                      `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string                                                                                                      `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Level          *string                                                                                                      `json:"Level,omitempty" xml:"Level,omitempty"`
	NetworkCost    *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	NumFrames      *string                                                                                                      `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	PixFmt         *string                                                                                                      `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Profile        *string                                                                                                      `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Sar            *string                                                                                                      `json:"Sar,omitempty" xml:"Sar,omitempty"`
	StartTime      *string                                                                                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string                                                                                                      `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Width          *string                                                                                                      `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig struct {
	ExtSubtitleList *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig) SetExtSubtitleList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig) SetSubtitleList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig {
	s.SubtitleList = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                                             `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                                             `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList struct {
	Subtitle []*SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList) SetSubtitle(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle) SetMap(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso) SetIsHalfSample(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso {
	s.IsHalfSample = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList struct {
	TailSlate []*SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate `json:"TailSlate,omitempty" xml:"TailSlate,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList) SetTailSlate(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList {
	s.TailSlate = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate struct {
	BgColor       *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	BlendDuration *string `json:"BlendDuration,omitempty" xml:"BlendDuration,omitempty"`
	Height        *string `json:"Height,omitempty" xml:"Height,omitempty"`
	IsMergeAudio  *bool   `json:"IsMergeAudio,omitempty" xml:"IsMergeAudio,omitempty"`
	Start         *string `json:"Start,omitempty" xml:"Start,omitempty"`
	TailUrl       *string `json:"TailUrl,omitempty" xml:"TailUrl,omitempty"`
	Width         *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetBgColor(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.BgColor = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetBlendDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.BlendDuration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetIsMergeAudio(v bool) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.IsMergeAudio = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetStart(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.Start = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetTailUrl(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.TailUrl = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.Width = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetAdjDarMethod(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckAudioBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckReso(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckResoFail(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckVideoBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetTransMode(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.TransMode = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo struct {
	Bitrate      *string                                                               `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd   *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	Bufsize      *string                                                               `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec        *string                                                               `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf          *string                                                               `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Crop         *string                                                               `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Degrain      *string                                                               `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	Fps          *string                                                               `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop          *string                                                               `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height       *string                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	MaxFps       *string                                                               `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Maxrate      *string                                                               `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Pad          *string                                                               `json:"Pad,omitempty" xml:"Pad,omitempty"`
	PixFmt       *string                                                               `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Preset       *string                                                               `json:"Preset,omitempty" xml:"Preset,omitempty"`
	Profile      *string                                                               `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale       *string                                                               `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	ResoPriority *string                                                               `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
	ScanMode     *string                                                               `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width        *string                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetBitrateBnd(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.BitrateBnd = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetBufsize(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetCodec(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Codec = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetCrf(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Crf = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetCrop(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Crop = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetDegrain(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Degrain = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetFps(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Fps = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetGop(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Gop = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetMaxFps(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.MaxFps = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetMaxrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetPad(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Pad = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetPixFmt(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetPreset(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Preset = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetProfile(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Profile = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetQscale(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Qscale = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetResoPriority(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.ResoPriority = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetScanMode(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Width = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd) SetMax(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd) SetMin(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd {
	s.Min = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList struct {
	WaterMark []*SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList) SetWaterMark(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList {
	s.WaterMark = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark struct {
	Dx                  *string                                                                               `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy                  *string                                                                               `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height              *string                                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	ReferPos            *string                                                                               `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Type                *string                                                                               `json:"Type,omitempty" xml:"Type,omitempty"`
	WaterMarkTemplateId *string                                                                               `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Width               *string                                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetDx(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetDy(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetInputFile(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetReferPos(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetType(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.Width = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

type SubmitJobsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponse) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponse) SetHeaders(v map[string]*string) *SubmitJobsResponse {
	s.Headers = v
	return s
}

func (s *SubmitJobsResponse) SetStatusCode(v int32) *SubmitJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitJobsResponse) SetBody(v *SubmitJobsResponseBody) *SubmitJobsResponse {
	s.Body = v
	return s
}

type SubmitMediaInfoJobRequest struct {
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// This parameter is required.
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequest) SetAsync(v bool) *SubmitMediaInfoJobRequest {
	s.Async = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetInput(v string) *SubmitMediaInfoJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetOwnerAccount(v string) *SubmitMediaInfoJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetOwnerId(v int64) *SubmitMediaInfoJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetPipelineId(v string) *SubmitMediaInfoJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetResourceOwnerAccount(v string) *SubmitMediaInfoJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetResourceOwnerId(v int64) *SubmitMediaInfoJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetUserData(v string) *SubmitMediaInfoJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobResponseBody struct {
	MediaInfoJob *SubmitMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBody) SetMediaInfoJob(v *SubmitMediaInfoJobResponseBodyMediaInfoJob) *SubmitMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *SubmitMediaInfoJobResponseBody) SetRequestId(v string) *SubmitMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJob struct {
	Async            *bool                                                       `json:"Async,omitempty" xml:"Async,omitempty"`
	Code             *string                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	CreationTime     *string                                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Input            *SubmitMediaInfoJobResponseBodyMediaInfoJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId            *string                                                     `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MNSMessageResult *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId       *string                                                     `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Properties       *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties       `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
	State            *string                                                     `json:"State,omitempty" xml:"State,omitempty"`
	UserData         *string                                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetCode(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Code = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetCreationTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetMNSMessageResult(v *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetMessage(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Message = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetPipelineId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetProperties(v *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Properties = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetState(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.State = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetBucket(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Bucket = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetLocation(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Location = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetObject(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Object = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) SetErrorCode(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) SetErrorMessage(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) SetMessageId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobProperties struct {
	Bitrate    *string                                                      `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration   *string                                                      `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FileFormat *string                                                      `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	FileSize   *string                                                      `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	Format     *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	Fps        *string                                                      `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height     *string                                                      `json:"Height,omitempty" xml:"Height,omitempty"`
	Streams    *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Width      *string                                                      `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetFileFormat(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.FileFormat = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetFileSize(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.FileSize = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetFormat(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Format = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetFps(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Fps = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetHeight(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Height = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetStreams(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Streams = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetWidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Width = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetFormatLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetFormatName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.FormatName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetNumPrograms(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetNumStreams(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetSize(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.Size = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.StartTime = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams struct {
	AudioStreamList    *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
	VideoStreamList    *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) SetAudioStreamList(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) SetSubtitleStreamList(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) SetVideoStreamList(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams {
	s.VideoStreamList = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList struct {
	AudioStream []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList) SetAudioStream(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream struct {
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList struct {
	VideoStream []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList) SetVideoStream(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream struct {
	AvgFPS         *string                                                                                           `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	Bitrate        *string                                                                                           `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecLongName  *string                                                                                           `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	CodecName      *string                                                                                           `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	CodecTag       *string                                                                                           `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTagString *string                                                                                           `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	CodecTimeBase  *string                                                                                           `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Dar            *string                                                                                           `json:"Dar,omitempty" xml:"Dar,omitempty"`
	Duration       *string                                                                                           `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                           `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames     *string                                                                                           `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Height         *string                                                                                           `json:"Height,omitempty" xml:"Height,omitempty"`
	Index          *string                                                                                           `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang           *string                                                                                           `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Level          *string                                                                                           `json:"Level,omitempty" xml:"Level,omitempty"`
	NetworkCost    *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	NumFrames      *string                                                                                           `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	PixFmt         *string                                                                                           `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Profile        *string                                                                                           `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Rotate         *string                                                                                           `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Sar            *string                                                                                           `json:"Sar,omitempty" xml:"Sar,omitempty"`
	StartTime      *string                                                                                           `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Timebase       *string                                                                                           `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Width          *string                                                                                           `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetRotate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Rotate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

type SubmitMediaInfoJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponse) SetHeaders(v map[string]*string) *SubmitMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaInfoJobResponse) SetStatusCode(v int32) *SubmitMediaInfoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaInfoJobResponse) SetBody(v *SubmitMediaInfoJobResponseBody) *SubmitMediaInfoJobResponse {
	s.Body = v
	return s
}

type SubmitSnapshotJobRequest struct {
	// This parameter is required.
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	SnapshotConfig *string `json:"SnapshotConfig,omitempty" xml:"SnapshotConfig,omitempty"`
	UserData       *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequest) SetInput(v string) *SubmitSnapshotJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetOwnerAccount(v string) *SubmitSnapshotJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetOwnerId(v int64) *SubmitSnapshotJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetPipelineId(v string) *SubmitSnapshotJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetResourceOwnerAccount(v string) *SubmitSnapshotJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetResourceOwnerId(v int64) *SubmitSnapshotJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetSnapshotConfig(v string) *SubmitSnapshotJobRequest {
	s.SnapshotConfig = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetUserData(v string) *SubmitSnapshotJobRequest {
	s.UserData = &v
	return s
}

type SubmitSnapshotJobResponseBody struct {
	RequestId   *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnapshotJob *SubmitSnapshotJobResponseBodySnapshotJob `json:"SnapshotJob,omitempty" xml:"SnapshotJob,omitempty" type:"Struct"`
}

func (s SubmitSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBody) SetRequestId(v string) *SubmitSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitSnapshotJobResponseBody) SetSnapshotJob(v *SubmitSnapshotJobResponseBodySnapshotJob) *SubmitSnapshotJobResponseBody {
	s.SnapshotJob = v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJob struct {
	Code             *string                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Count            *string                                                   `json:"Count,omitempty" xml:"Count,omitempty"`
	CreationTime     *string                                                   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Id               *string                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
	Input            *SubmitSnapshotJobResponseBodySnapshotJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MNSMessageResult *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Message          *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId       *string                                                   `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	SnapshotConfig   *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig   `json:"SnapshotConfig,omitempty" xml:"SnapshotConfig,omitempty" type:"Struct"`
	State            *string                                                   `json:"State,omitempty" xml:"State,omitempty"`
	TileCount        *string                                                   `json:"TileCount,omitempty" xml:"TileCount,omitempty"`
	UserData         *string                                                   `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJob) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetCode(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.Code = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetCount(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.Count = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetCreationTime(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetId(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.Id = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetInput(v *SubmitSnapshotJobResponseBodySnapshotJobInput) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.Input = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetMNSMessageResult(v *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetMessage(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.Message = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetPipelineId(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetSnapshotConfig(v *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.SnapshotConfig = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetState(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.State = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetTileCount(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.TileCount = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetUserData(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.UserData = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobInput) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobInput) SetBucket(v string) *SubmitSnapshotJobResponseBodySnapshotJobInput {
	s.Bucket = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobInput) SetLocation(v string) *SubmitSnapshotJobResponseBodySnapshotJobInput {
	s.Location = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobInput) SetObject(v string) *SubmitSnapshotJobResponseBodySnapshotJobInput {
	s.Object = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobInput) SetRoleArn(v string) *SubmitSnapshotJobResponseBodySnapshotJobInput {
	s.RoleArn = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult struct {
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) SetErrorCode(v string) *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) SetErrorMessage(v string) *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) SetMessageId(v string) *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult {
	s.MessageId = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig struct {
	FrameType      *string                                                               `json:"FrameType,omitempty" xml:"FrameType,omitempty"`
	Height         *string                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	Interval       *string                                                               `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Num            *string                                                               `json:"Num,omitempty" xml:"Num,omitempty"`
	OutputFile     *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile     `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	TileOut        *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut        `json:"TileOut,omitempty" xml:"TileOut,omitempty" type:"Struct"`
	TileOutputFile *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile `json:"TileOutputFile,omitempty" xml:"TileOutputFile,omitempty" type:"Struct"`
	Time           *string                                                               `json:"Time,omitempty" xml:"Time,omitempty"`
	Width          *string                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetFrameType(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.FrameType = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetHeight(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.Height = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetInterval(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.Interval = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetNum(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.Num = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetOutputFile(v *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.OutputFile = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetTileOut(v *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.TileOut = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetTileOutputFile(v *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.TileOutputFile = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetTime(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.Time = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetWidth(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.Width = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) SetBucket(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile {
	s.Bucket = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) SetLocation(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile {
	s.Location = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) SetObject(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile {
	s.Object = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) SetRoleArn(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile {
	s.RoleArn = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut struct {
	CellHeight    *string `json:"CellHeight,omitempty" xml:"CellHeight,omitempty"`
	CellSelStep   *string `json:"CellSelStep,omitempty" xml:"CellSelStep,omitempty"`
	CellWidth     *string `json:"CellWidth,omitempty" xml:"CellWidth,omitempty"`
	Color         *string `json:"Color,omitempty" xml:"Color,omitempty"`
	Columns       *string `json:"Columns,omitempty" xml:"Columns,omitempty"`
	IsKeepCellPic *string `json:"IsKeepCellPic,omitempty" xml:"IsKeepCellPic,omitempty"`
	Lines         *string `json:"Lines,omitempty" xml:"Lines,omitempty"`
	Margin        *string `json:"Margin,omitempty" xml:"Margin,omitempty"`
	Padding       *string `json:"Padding,omitempty" xml:"Padding,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetCellHeight(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.CellHeight = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetCellSelStep(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.CellSelStep = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetCellWidth(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.CellWidth = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetColor(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.Color = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetColumns(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.Columns = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetIsKeepCellPic(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.IsKeepCellPic = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetLines(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.Lines = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetMargin(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.Margin = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetPadding(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.Padding = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) SetBucket(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile {
	s.Bucket = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) SetLocation(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile {
	s.Location = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) SetObject(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile {
	s.Object = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) SetRoleArn(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile {
	s.RoleArn = &v
	return s
}

type SubmitSnapshotJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponse) SetHeaders(v map[string]*string) *SubmitSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSnapshotJobResponse) SetStatusCode(v int32) *SubmitSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSnapshotJobResponse) SetBody(v *SubmitSnapshotJobResponseBody) *SubmitSnapshotJobResponse {
	s.Body = v
	return s
}

type UnbindInputBucketRequest struct {
	// This parameter is required.
	Bucket               *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RoleArn              *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s UnbindInputBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindInputBucketRequest) GoString() string {
	return s.String()
}

func (s *UnbindInputBucketRequest) SetBucket(v string) *UnbindInputBucketRequest {
	s.Bucket = &v
	return s
}

func (s *UnbindInputBucketRequest) SetOwnerAccount(v string) *UnbindInputBucketRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnbindInputBucketRequest) SetOwnerId(v int64) *UnbindInputBucketRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindInputBucketRequest) SetResourceOwnerAccount(v string) *UnbindInputBucketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnbindInputBucketRequest) SetResourceOwnerId(v int64) *UnbindInputBucketRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnbindInputBucketRequest) SetRoleArn(v string) *UnbindInputBucketRequest {
	s.RoleArn = &v
	return s
}

type UnbindInputBucketResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindInputBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindInputBucketResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindInputBucketResponseBody) SetRequestId(v string) *UnbindInputBucketResponseBody {
	s.RequestId = &v
	return s
}

type UnbindInputBucketResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnbindInputBucketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnbindInputBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindInputBucketResponse) GoString() string {
	return s.String()
}

func (s *UnbindInputBucketResponse) SetHeaders(v map[string]*string) *UnbindInputBucketResponse {
	s.Headers = v
	return s
}

func (s *UnbindInputBucketResponse) SetStatusCode(v int32) *UnbindInputBucketResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindInputBucketResponse) SetBody(v *UnbindInputBucketResponseBody) *UnbindInputBucketResponse {
	s.Body = v
	return s
}

type UnbindOutputBucketRequest struct {
	// This parameter is required.
	Bucket               *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s UnbindOutputBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindOutputBucketRequest) GoString() string {
	return s.String()
}

func (s *UnbindOutputBucketRequest) SetBucket(v string) *UnbindOutputBucketRequest {
	s.Bucket = &v
	return s
}

func (s *UnbindOutputBucketRequest) SetOwnerAccount(v string) *UnbindOutputBucketRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnbindOutputBucketRequest) SetOwnerId(v int64) *UnbindOutputBucketRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindOutputBucketRequest) SetResourceOwnerAccount(v string) *UnbindOutputBucketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnbindOutputBucketRequest) SetResourceOwnerId(v int64) *UnbindOutputBucketRequest {
	s.ResourceOwnerId = &v
	return s
}

type UnbindOutputBucketResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindOutputBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindOutputBucketResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindOutputBucketResponseBody) SetRequestId(v string) *UnbindOutputBucketResponseBody {
	s.RequestId = &v
	return s
}

type UnbindOutputBucketResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnbindOutputBucketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnbindOutputBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindOutputBucketResponse) GoString() string {
	return s.String()
}

func (s *UnbindOutputBucketResponse) SetHeaders(v map[string]*string) *UnbindOutputBucketResponse {
	s.Headers = v
	return s
}

func (s *UnbindOutputBucketResponse) SetStatusCode(v int32) *UnbindOutputBucketResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindOutputBucketResponse) SetBody(v *UnbindOutputBucketResponseBody) *UnbindOutputBucketResponse {
	s.Body = v
	return s
}

type UpdateCategoryNameRequest struct {
	// This parameter is required.
	CateId *string `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// This parameter is required.
	CateName             *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s UpdateCategoryNameRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryNameRequest) GoString() string {
	return s.String()
}

func (s *UpdateCategoryNameRequest) SetCateId(v string) *UpdateCategoryNameRequest {
	s.CateId = &v
	return s
}

func (s *UpdateCategoryNameRequest) SetCateName(v string) *UpdateCategoryNameRequest {
	s.CateName = &v
	return s
}

func (s *UpdateCategoryNameRequest) SetOwnerAccount(v string) *UpdateCategoryNameRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateCategoryNameRequest) SetOwnerId(v int64) *UpdateCategoryNameRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCategoryNameRequest) SetResourceOwnerAccount(v string) *UpdateCategoryNameRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateCategoryNameRequest) SetResourceOwnerId(v int64) *UpdateCategoryNameRequest {
	s.ResourceOwnerId = &v
	return s
}

type UpdateCategoryNameResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCategoryNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryNameResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCategoryNameResponseBody) SetRequestId(v string) *UpdateCategoryNameResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCategoryNameResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCategoryNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCategoryNameResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryNameResponse) GoString() string {
	return s.String()
}

func (s *UpdateCategoryNameResponse) SetHeaders(v map[string]*string) *UpdateCategoryNameResponse {
	s.Headers = v
	return s
}

func (s *UpdateCategoryNameResponse) SetStatusCode(v int32) *UpdateCategoryNameResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCategoryNameResponse) SetBody(v *UpdateCategoryNameResponseBody) *UpdateCategoryNameResponse {
	s.Body = v
	return s
}

type UpdateMediaRequest struct {
	CateId      *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CoverURL    *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Tags                 *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Title                *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaRequest) SetCateId(v int64) *UpdateMediaRequest {
	s.CateId = &v
	return s
}

func (s *UpdateMediaRequest) SetCoverURL(v string) *UpdateMediaRequest {
	s.CoverURL = &v
	return s
}

func (s *UpdateMediaRequest) SetDescription(v string) *UpdateMediaRequest {
	s.Description = &v
	return s
}

func (s *UpdateMediaRequest) SetMediaId(v string) *UpdateMediaRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaRequest) SetOwnerAccount(v string) *UpdateMediaRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateMediaRequest) SetOwnerId(v int64) *UpdateMediaRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaRequest) SetResourceOwnerAccount(v string) *UpdateMediaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaRequest) SetResourceOwnerId(v int64) *UpdateMediaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMediaRequest) SetTags(v string) *UpdateMediaRequest {
	s.Tags = &v
	return s
}

func (s *UpdateMediaRequest) SetTitle(v string) *UpdateMediaRequest {
	s.Title = &v
	return s
}

type UpdateMediaResponseBody struct {
	Media     *UpdateMediaResponseBodyMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Struct"`
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponseBody) SetMedia(v *UpdateMediaResponseBodyMedia) *UpdateMediaResponseBody {
	s.Media = v
	return s
}

func (s *UpdateMediaResponseBody) SetRequestId(v string) *UpdateMediaResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaResponseBodyMedia struct {
	Bitrate      *string                                `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CateId       *int64                                 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CensorState  *string                                `json:"CensorState,omitempty" xml:"CensorState,omitempty"`
	CoverURL     *string                                `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	CreationTime *string                                `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string                                `json:"Description,omitempty" xml:"Description,omitempty"`
	Duration     *string                                `json:"Duration,omitempty" xml:"Duration,omitempty"`
	File         *UpdateMediaResponseBodyMediaFile      `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	Format       *string                                `json:"Format,omitempty" xml:"Format,omitempty"`
	Fps          *string                                `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height       *string                                `json:"Height,omitempty" xml:"Height,omitempty"`
	MediaId      *string                                `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	PublishState *string                                `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	RunIdList    *UpdateMediaResponseBodyMediaRunIdList `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Size         *string                                `json:"Size,omitempty" xml:"Size,omitempty"`
	Tags         *UpdateMediaResponseBodyMediaTags      `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Title        *string                                `json:"Title,omitempty" xml:"Title,omitempty"`
	Width        *string                                `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s UpdateMediaResponseBodyMedia) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponseBodyMedia) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponseBodyMedia) SetBitrate(v string) *UpdateMediaResponseBodyMedia {
	s.Bitrate = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetCateId(v int64) *UpdateMediaResponseBodyMedia {
	s.CateId = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetCensorState(v string) *UpdateMediaResponseBodyMedia {
	s.CensorState = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetCoverURL(v string) *UpdateMediaResponseBodyMedia {
	s.CoverURL = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetCreationTime(v string) *UpdateMediaResponseBodyMedia {
	s.CreationTime = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetDescription(v string) *UpdateMediaResponseBodyMedia {
	s.Description = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetDuration(v string) *UpdateMediaResponseBodyMedia {
	s.Duration = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetFile(v *UpdateMediaResponseBodyMediaFile) *UpdateMediaResponseBodyMedia {
	s.File = v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetFormat(v string) *UpdateMediaResponseBodyMedia {
	s.Format = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetFps(v string) *UpdateMediaResponseBodyMedia {
	s.Fps = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetHeight(v string) *UpdateMediaResponseBodyMedia {
	s.Height = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetMediaId(v string) *UpdateMediaResponseBodyMedia {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetPublishState(v string) *UpdateMediaResponseBodyMedia {
	s.PublishState = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetRunIdList(v *UpdateMediaResponseBodyMediaRunIdList) *UpdateMediaResponseBodyMedia {
	s.RunIdList = v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetSize(v string) *UpdateMediaResponseBodyMedia {
	s.Size = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetTags(v *UpdateMediaResponseBodyMediaTags) *UpdateMediaResponseBodyMedia {
	s.Tags = v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetTitle(v string) *UpdateMediaResponseBodyMedia {
	s.Title = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetWidth(v string) *UpdateMediaResponseBodyMedia {
	s.Width = &v
	return s
}

type UpdateMediaResponseBodyMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s UpdateMediaResponseBodyMediaFile) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponseBodyMediaFile) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponseBodyMediaFile) SetState(v string) *UpdateMediaResponseBodyMediaFile {
	s.State = &v
	return s
}

func (s *UpdateMediaResponseBodyMediaFile) SetURL(v string) *UpdateMediaResponseBodyMediaFile {
	s.URL = &v
	return s
}

type UpdateMediaResponseBodyMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s UpdateMediaResponseBodyMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponseBodyMediaRunIdList) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponseBodyMediaRunIdList) SetRunId(v []*string) *UpdateMediaResponseBodyMediaRunIdList {
	s.RunId = v
	return s
}

type UpdateMediaResponseBodyMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s UpdateMediaResponseBodyMediaTags) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponseBodyMediaTags) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponseBodyMediaTags) SetTag(v []*string) *UpdateMediaResponseBodyMediaTags {
	s.Tag = v
	return s
}

type UpdateMediaResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponse) SetHeaders(v map[string]*string) *UpdateMediaResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaResponse) SetStatusCode(v int32) *UpdateMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaResponse) SetBody(v *UpdateMediaResponseBody) *UpdateMediaResponse {
	s.Body = v
	return s
}

type UpdateMediaCategoryRequest struct {
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// This parameter is required.
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s UpdateMediaCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCategoryRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaCategoryRequest) SetCateId(v int64) *UpdateMediaCategoryRequest {
	s.CateId = &v
	return s
}

func (s *UpdateMediaCategoryRequest) SetMediaId(v string) *UpdateMediaCategoryRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaCategoryRequest) SetOwnerAccount(v string) *UpdateMediaCategoryRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateMediaCategoryRequest) SetOwnerId(v int64) *UpdateMediaCategoryRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaCategoryRequest) SetResourceOwnerAccount(v string) *UpdateMediaCategoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaCategoryRequest) SetResourceOwnerId(v int64) *UpdateMediaCategoryRequest {
	s.ResourceOwnerId = &v
	return s
}

type UpdateMediaCategoryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaCategoryResponseBody) SetRequestId(v string) *UpdateMediaCategoryResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaCategoryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCategoryResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaCategoryResponse) SetHeaders(v map[string]*string) *UpdateMediaCategoryResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaCategoryResponse) SetStatusCode(v int32) *UpdateMediaCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaCategoryResponse) SetBody(v *UpdateMediaCategoryResponseBody) *UpdateMediaCategoryResponse {
	s.Body = v
	return s
}

type UpdateMediaCoverRequest struct {
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// This parameter is required.
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s UpdateMediaCoverRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCoverRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaCoverRequest) SetCoverURL(v string) *UpdateMediaCoverRequest {
	s.CoverURL = &v
	return s
}

func (s *UpdateMediaCoverRequest) SetMediaId(v string) *UpdateMediaCoverRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaCoverRequest) SetOwnerAccount(v string) *UpdateMediaCoverRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateMediaCoverRequest) SetOwnerId(v int64) *UpdateMediaCoverRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaCoverRequest) SetResourceOwnerAccount(v string) *UpdateMediaCoverRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaCoverRequest) SetResourceOwnerId(v int64) *UpdateMediaCoverRequest {
	s.ResourceOwnerId = &v
	return s
}

type UpdateMediaCoverResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaCoverResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCoverResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaCoverResponseBody) SetRequestId(v string) *UpdateMediaCoverResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaCoverResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaCoverResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaCoverResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCoverResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaCoverResponse) SetHeaders(v map[string]*string) *UpdateMediaCoverResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaCoverResponse) SetStatusCode(v int32) *UpdateMediaCoverResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaCoverResponse) SetBody(v *UpdateMediaCoverResponseBody) *UpdateMediaCoverResponse {
	s.Body = v
	return s
}

type UpdateMediaPublishStateRequest struct {
	// This parameter is required.
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Publish              *bool   `json:"Publish,omitempty" xml:"Publish,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s UpdateMediaPublishStateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaPublishStateRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaPublishStateRequest) SetMediaId(v string) *UpdateMediaPublishStateRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaPublishStateRequest) SetOwnerAccount(v string) *UpdateMediaPublishStateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateMediaPublishStateRequest) SetOwnerId(v int64) *UpdateMediaPublishStateRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaPublishStateRequest) SetPublish(v bool) *UpdateMediaPublishStateRequest {
	s.Publish = &v
	return s
}

func (s *UpdateMediaPublishStateRequest) SetResourceOwnerAccount(v string) *UpdateMediaPublishStateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaPublishStateRequest) SetResourceOwnerId(v int64) *UpdateMediaPublishStateRequest {
	s.ResourceOwnerId = &v
	return s
}

type UpdateMediaPublishStateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaPublishStateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaPublishStateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaPublishStateResponseBody) SetRequestId(v string) *UpdateMediaPublishStateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaPublishStateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaPublishStateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaPublishStateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaPublishStateResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaPublishStateResponse) SetHeaders(v map[string]*string) *UpdateMediaPublishStateResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaPublishStateResponse) SetStatusCode(v int32) *UpdateMediaPublishStateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaPublishStateResponse) SetBody(v *UpdateMediaPublishStateResponseBody) *UpdateMediaPublishStateResponse {
	s.Body = v
	return s
}

type UpdateMediaWorkflowRequest struct {
	// This parameter is required.
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	Topology *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s UpdateMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowRequest) SetMediaWorkflowId(v string) *UpdateMediaWorkflowRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *UpdateMediaWorkflowRequest) SetOwnerAccount(v string) *UpdateMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateMediaWorkflowRequest) SetOwnerId(v int64) *UpdateMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaWorkflowRequest) SetResourceOwnerAccount(v string) *UpdateMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaWorkflowRequest) SetResourceOwnerId(v int64) *UpdateMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMediaWorkflowRequest) SetTopology(v string) *UpdateMediaWorkflowRequest {
	s.Topology = &v
	return s
}

type UpdateMediaWorkflowResponseBody struct {
	MediaWorkflow *UpdateMediaWorkflowResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowResponseBody) SetMediaWorkflow(v *UpdateMediaWorkflowResponseBodyMediaWorkflow) *UpdateMediaWorkflowResponseBody {
	s.MediaWorkflow = v
	return s
}

func (s *UpdateMediaWorkflowResponseBody) SetRequestId(v string) *UpdateMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaWorkflowResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
	TriggerMode     *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
}

func (s UpdateMediaWorkflowResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetCreationTime(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetName(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetState(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetTopology(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetTriggerMode(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.TriggerMode = &v
	return s
}

type UpdateMediaWorkflowResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowResponse) SetHeaders(v map[string]*string) *UpdateMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaWorkflowResponse) SetStatusCode(v int32) *UpdateMediaWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaWorkflowResponse) SetBody(v *UpdateMediaWorkflowResponseBody) *UpdateMediaWorkflowResponse {
	s.Body = v
	return s
}

type UpdateMediaWorkflowTriggerModeRequest struct {
	// This parameter is required.
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	TriggerMode *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
}

func (s UpdateMediaWorkflowTriggerModeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowTriggerModeRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetMediaWorkflowId(v string) *UpdateMediaWorkflowTriggerModeRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetOwnerAccount(v string) *UpdateMediaWorkflowTriggerModeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetOwnerId(v int64) *UpdateMediaWorkflowTriggerModeRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetResourceOwnerAccount(v string) *UpdateMediaWorkflowTriggerModeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetResourceOwnerId(v int64) *UpdateMediaWorkflowTriggerModeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetTriggerMode(v string) *UpdateMediaWorkflowTriggerModeRequest {
	s.TriggerMode = &v
	return s
}

type UpdateMediaWorkflowTriggerModeResponseBody struct {
	MediaWorkflow *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
	RequestId     *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaWorkflowTriggerModeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowTriggerModeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowTriggerModeResponseBody) SetMediaWorkflow(v *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) *UpdateMediaWorkflowTriggerModeResponseBody {
	s.MediaWorkflow = v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBody) SetRequestId(v string) *UpdateMediaWorkflowTriggerModeResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
	TriggerMode     *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
}

func (s UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetCreationTime(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetName(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetState(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetTopology(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetTriggerMode(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.TriggerMode = &v
	return s
}

type UpdateMediaWorkflowTriggerModeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaWorkflowTriggerModeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaWorkflowTriggerModeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowTriggerModeResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowTriggerModeResponse) SetHeaders(v map[string]*string) *UpdateMediaWorkflowTriggerModeResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponse) SetStatusCode(v int32) *UpdateMediaWorkflowTriggerModeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponse) SetBody(v *UpdateMediaWorkflowTriggerModeResponseBody) *UpdateMediaWorkflowTriggerModeResponse {
	s.Body = v
	return s
}

type UpdatePipelineRequest struct {
	// This parameter is required.
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NotifyConfig *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// This parameter is required.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s UpdatePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdatePipelineRequest) SetName(v string) *UpdatePipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdatePipelineRequest) SetNotifyConfig(v string) *UpdatePipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *UpdatePipelineRequest) SetOwnerAccount(v string) *UpdatePipelineRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdatePipelineRequest) SetOwnerId(v int64) *UpdatePipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdatePipelineRequest) SetPipelineId(v string) *UpdatePipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *UpdatePipelineRequest) SetResourceOwnerAccount(v string) *UpdatePipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdatePipelineRequest) SetResourceOwnerId(v int64) *UpdatePipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdatePipelineRequest) SetRole(v string) *UpdatePipelineRequest {
	s.Role = &v
	return s
}

func (s *UpdatePipelineRequest) SetState(v string) *UpdatePipelineRequest {
	s.State = &v
	return s
}

type UpdatePipelineResponseBody struct {
	Pipeline  *UpdatePipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdatePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponseBody) SetPipeline(v *UpdatePipelineResponseBodyPipeline) *UpdatePipelineResponseBody {
	s.Pipeline = v
	return s
}

func (s *UpdatePipelineResponseBody) SetRequestId(v string) *UpdatePipelineResponseBody {
	s.RequestId = &v
	return s
}

type UpdatePipelineResponseBodyPipeline struct {
	Id           *string                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	NotifyConfig *UpdatePipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Role         *string                                         `json:"Role,omitempty" xml:"Role,omitempty"`
	Speed        *string                                         `json:"Speed,omitempty" xml:"Speed,omitempty"`
	State        *string                                         `json:"State,omitempty" xml:"State,omitempty"`
}

func (s UpdatePipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponseBodyPipeline) SetId(v string) *UpdatePipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetName(v string) *UpdatePipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetNotifyConfig(v *UpdatePipelineResponseBodyPipelineNotifyConfig) *UpdatePipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetRole(v string) *UpdatePipelineResponseBodyPipeline {
	s.Role = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetSpeed(v string) *UpdatePipelineResponseBodyPipeline {
	s.Speed = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetState(v string) *UpdatePipelineResponseBodyPipeline {
	s.State = &v
	return s
}

type UpdatePipelineResponseBodyPipelineNotifyConfig struct {
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s UpdatePipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponseBodyPipelineNotifyConfig) SetQueueName(v string) *UpdatePipelineResponseBodyPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *UpdatePipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type UpdatePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponse) SetHeaders(v map[string]*string) *UpdatePipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdatePipelineResponse) SetStatusCode(v int32) *UpdatePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePipelineResponse) SetBody(v *UpdatePipelineResponseBody) *UpdatePipelineResponse {
	s.Body = v
	return s
}

type UpdateTemplateRequest struct {
	Audio     *string `json:"Audio,omitempty" xml:"Audio,omitempty"`
	Container *string `json:"Container,omitempty" xml:"Container,omitempty"`
	MuxConfig *string `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty"`
	// This parameter is required.
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	TemplateId  *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TransConfig *string `json:"TransConfig,omitempty" xml:"TransConfig,omitempty"`
	Video       *string `json:"Video,omitempty" xml:"Video,omitempty"`
}

func (s UpdateTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateTemplateRequest) SetAudio(v string) *UpdateTemplateRequest {
	s.Audio = &v
	return s
}

func (s *UpdateTemplateRequest) SetContainer(v string) *UpdateTemplateRequest {
	s.Container = &v
	return s
}

func (s *UpdateTemplateRequest) SetMuxConfig(v string) *UpdateTemplateRequest {
	s.MuxConfig = &v
	return s
}

func (s *UpdateTemplateRequest) SetName(v string) *UpdateTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateTemplateRequest) SetOwnerAccount(v string) *UpdateTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateTemplateRequest) SetOwnerId(v int64) *UpdateTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateTemplateRequest) SetResourceOwnerAccount(v string) *UpdateTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateTemplateRequest) SetResourceOwnerId(v int64) *UpdateTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateTemplateRequest) SetTemplateId(v string) *UpdateTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateTemplateRequest) SetTransConfig(v string) *UpdateTemplateRequest {
	s.TransConfig = &v
	return s
}

func (s *UpdateTemplateRequest) SetVideo(v string) *UpdateTemplateRequest {
	s.Video = &v
	return s
}

type UpdateTemplateResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Template  *UpdateTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s UpdateTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBody) SetRequestId(v string) *UpdateTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTemplateResponseBody) SetTemplate(v *UpdateTemplateResponseBodyTemplate) *UpdateTemplateResponseBody {
	s.Template = v
	return s
}

type UpdateTemplateResponseBodyTemplate struct {
	Audio       *UpdateTemplateResponseBodyTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container   *UpdateTemplateResponseBodyTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Id          *string                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	MuxConfig   *UpdateTemplateResponseBodyTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	State       *string                                        `json:"State,omitempty" xml:"State,omitempty"`
	TransConfig *UpdateTemplateResponseBodyTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *UpdateTemplateResponseBodyTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s UpdateTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplate) SetAudio(v *UpdateTemplateResponseBodyTemplateAudio) *UpdateTemplateResponseBodyTemplate {
	s.Audio = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetContainer(v *UpdateTemplateResponseBodyTemplateContainer) *UpdateTemplateResponseBodyTemplate {
	s.Container = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetId(v string) *UpdateTemplateResponseBodyTemplate {
	s.Id = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetMuxConfig(v *UpdateTemplateResponseBodyTemplateMuxConfig) *UpdateTemplateResponseBodyTemplate {
	s.MuxConfig = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetName(v string) *UpdateTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetState(v string) *UpdateTemplateResponseBodyTemplate {
	s.State = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetTransConfig(v *UpdateTemplateResponseBodyTemplateTransConfig) *UpdateTemplateResponseBodyTemplate {
	s.TransConfig = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetVideo(v *UpdateTemplateResponseBodyTemplateVideo) *UpdateTemplateResponseBodyTemplate {
	s.Video = v
	return s
}

type UpdateTemplateResponseBodyTemplateAudio struct {
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale     *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Remove     *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateAudio) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetBitrate(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Bitrate = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetChannels(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Channels = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetCodec(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Codec = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetProfile(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Profile = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetQscale(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetRemove(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Remove = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetSamplerate(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Samplerate = &v
	return s
}

type UpdateTemplateResponseBodyTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateContainer) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateContainer) SetFormat(v string) *UpdateTemplateResponseBodyTemplateContainer {
	s.Format = &v
	return s
}

type UpdateTemplateResponseBodyTemplateMuxConfig struct {
	Gif     *UpdateTemplateResponseBodyTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *UpdateTemplateResponseBodyTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
	Webp    *UpdateTemplateResponseBodyTemplateMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
}

func (s UpdateTemplateResponseBodyTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfig) SetGif(v *UpdateTemplateResponseBodyTemplateMuxConfigGif) *UpdateTemplateResponseBodyTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfig) SetSegment(v *UpdateTemplateResponseBodyTemplateMuxConfigSegment) *UpdateTemplateResponseBodyTemplateMuxConfig {
	s.Segment = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfig) SetWebp(v *UpdateTemplateResponseBodyTemplateMuxConfigWebp) *UpdateTemplateResponseBodyTemplateMuxConfig {
	s.Webp = v
	return s
}

type UpdateTemplateResponseBodyTemplateMuxConfigGif struct {
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigGif) SetDitherMode(v string) *UpdateTemplateResponseBodyTemplateMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigGif) SetFinalDelay(v string) *UpdateTemplateResponseBodyTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigGif) SetIsCustomPalette(v string) *UpdateTemplateResponseBodyTemplateMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigGif) SetLoop(v string) *UpdateTemplateResponseBodyTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

type UpdateTemplateResponseBodyTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigSegment) SetDuration(v string) *UpdateTemplateResponseBodyTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type UpdateTemplateResponseBodyTemplateMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigWebp) SetLoop(v string) *UpdateTemplateResponseBodyTemplateMuxConfigWebp {
	s.Loop = &v
	return s
}

type UpdateTemplateResponseBodyTemplateTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetAdjDarMethod(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckAudioBitrate(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckReso(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckResoFail(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckVideoBitrate(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetTransMode(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.TransMode = &v
	return s
}

type UpdateTemplateResponseBodyTemplateVideo struct {
	Bitrate      *string                                            `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	BitrateBnd   *UpdateTemplateResponseBodyTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	Bufsize      *string                                            `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Codec        *string                                            `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Crf          *string                                            `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Crop         *string                                            `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Degrain      *string                                            `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	Fps          *string                                            `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop          *string                                            `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height       *string                                            `json:"Height,omitempty" xml:"Height,omitempty"`
	MaxFps       *string                                            `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Maxrate      *string                                            `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Pad          *string                                            `json:"Pad,omitempty" xml:"Pad,omitempty"`
	PixFmt       *string                                            `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Preset       *string                                            `json:"Preset,omitempty" xml:"Preset,omitempty"`
	Profile      *string                                            `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Qscale       *string                                            `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Remove       *string                                            `json:"Remove,omitempty" xml:"Remove,omitempty"`
	ResoPriority *string                                            `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
	ScanMode     *string                                            `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	Width        *string                                            `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateVideo) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetBitrate(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetBitrateBnd(v *UpdateTemplateResponseBodyTemplateVideoBitrateBnd) *UpdateTemplateResponseBodyTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetBufsize(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetCodec(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Codec = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetCrf(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Crf = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetCrop(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Crop = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetDegrain(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetFps(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Fps = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetGop(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Gop = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetHeight(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Height = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetMaxFps(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.MaxFps = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetMaxrate(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetPad(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Pad = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetPixFmt(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetPreset(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Preset = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetProfile(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Profile = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetQscale(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetRemove(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Remove = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetResoPriority(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.ResoPriority = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetScanMode(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.ScanMode = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetWidth(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Width = &v
	return s
}

type UpdateTemplateResponseBodyTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateVideoBitrateBnd) SetMax(v string) *UpdateTemplateResponseBodyTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideoBitrateBnd) SetMin(v string) *UpdateTemplateResponseBodyTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type UpdateTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponse) SetHeaders(v map[string]*string) *UpdateTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateTemplateResponse) SetStatusCode(v int32) *UpdateTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTemplateResponse) SetBody(v *UpdateTemplateResponseBody) *UpdateTemplateResponse {
	s.Body = v
	return s
}

type UpdateWaterMarkTemplateRequest struct {
	// This parameter is required.
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// This parameter is required.
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// This parameter is required.
	WaterMarkTemplateId *string `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
}

func (s UpdateWaterMarkTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateRequest) SetConfig(v string) *UpdateWaterMarkTemplateRequest {
	s.Config = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetName(v string) *UpdateWaterMarkTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetOwnerAccount(v string) *UpdateWaterMarkTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetOwnerId(v int64) *UpdateWaterMarkTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetResourceOwnerAccount(v string) *UpdateWaterMarkTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetResourceOwnerId(v int64) *UpdateWaterMarkTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetWaterMarkTemplateId(v string) *UpdateWaterMarkTemplateRequest {
	s.WaterMarkTemplateId = &v
	return s
}

type UpdateWaterMarkTemplateResponseBody struct {
	RequestId         *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WaterMarkTemplate *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate `json:"WaterMarkTemplate,omitempty" xml:"WaterMarkTemplate,omitempty" type:"Struct"`
}

func (s UpdateWaterMarkTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateResponseBody) SetRequestId(v string) *UpdateWaterMarkTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBody) SetWaterMarkTemplate(v *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) *UpdateWaterMarkTemplateResponseBody {
	s.WaterMarkTemplate = v
	return s
}

type UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate struct {
	Dx         *string                                                         `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy         *string                                                         `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height     *string                                                         `json:"Height,omitempty" xml:"Height,omitempty"`
	Id         *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	Name       *string                                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	RatioRefer *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer `json:"RatioRefer,omitempty" xml:"RatioRefer,omitempty" type:"Struct"`
	ReferPos   *string                                                         `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	State      *string                                                         `json:"State,omitempty" xml:"State,omitempty"`
	Timeline   *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline   `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	Type       *string                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
	Width      *string                                                         `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetDx(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Dx = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetDy(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Dy = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetHeight(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Height = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetId(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Id = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetName(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Name = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetRatioRefer(v *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.RatioRefer = v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetReferPos(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.ReferPos = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetState(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.State = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetTimeline(v *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Timeline = v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetType(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Type = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetWidth(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Width = &v
	return s
}

type UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer struct {
	Dx     *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Dy     *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetDx(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Dx = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetDy(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Dy = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetHeight(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Height = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetWidth(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Width = &v
	return s
}

type UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) SetDuration(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline {
	s.Duration = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) SetStart(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline {
	s.Start = &v
	return s
}

type UpdateWaterMarkTemplateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateWaterMarkTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWaterMarkTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateResponse) SetHeaders(v map[string]*string) *UpdateWaterMarkTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateWaterMarkTemplateResponse) SetStatusCode(v int32) *UpdateWaterMarkTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponse) SetBody(v *UpdateWaterMarkTemplateResponseBody) *UpdateWaterMarkTemplateResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-2-pop":          tea.String("mts.aliyuncs.com"),
		"ap-southeast-2":              tea.String("mts.aliyuncs.com"),
		"ap-southeast-3":              tea.String("mts.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("mts.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("mts.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("mts.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("mts.aliyuncs.com"),
		"cn-chengdu":                  tea.String("mts.aliyuncs.com"),
		"cn-edge-1":                   tea.String("mts.aliyuncs.com"),
		"cn-fujian":                   tea.String("mts.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("mts.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("mts.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("mts.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("mts.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("mts.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("mts.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("mts.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("mts.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("mts.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("mts.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("mts.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("mts.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("mts.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("mts.aliyuncs.com"),
		"cn-wuhan":                    tea.String("mts.aliyuncs.com"),
		"cn-wulanchabu":               tea.String("mts.aliyuncs.com"),
		"cn-yushanfang":               tea.String("mts.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("mts.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("mts.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("mts.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("mts.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("mts.aliyuncs.com"),
		"me-east-1":                   tea.String("mts.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("mts.aliyuncs.com"),
		"us-east-1":                   tea.String("mts.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("mts"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ActivateMediaWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ActivateMediaWorkflowResponse
func (client *Client) ActivateMediaWorkflowWithOptions(request *ActivateMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *ActivateMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaWorkflowId)) {
		query["MediaWorkflowId"] = request.MediaWorkflowId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ActivateMediaWorkflow"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ActivateMediaWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ActivateMediaWorkflowRequest
//
// @return ActivateMediaWorkflowResponse
func (client *Client) ActivateMediaWorkflow(request *ActivateMediaWorkflowRequest) (_result *ActivateMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ActivateMediaWorkflowResponse{}
	_body, _err := client.ActivateMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddCategoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCategoryResponse
func (client *Client) AddCategoryWithOptions(request *AddCategoryRequest, runtime *util.RuntimeOptions) (_result *AddCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateName)) {
		query["CateName"] = request.CateName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCategory"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddCategoryRequest
//
// @return AddCategoryResponse
func (client *Client) AddCategory(request *AddCategoryRequest) (_result *AddCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCategoryResponse{}
	_body, _err := client.AddCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddMediaResponse
func (client *Client) AddMediaWithOptions(request *AddMediaRequest, runtime *util.RuntimeOptions) (_result *AddMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.FileURL)) {
		query["FileURL"] = request.FileURL
	}

	if !tea.BoolValue(util.IsUnset(request.InputUnbind)) {
		query["InputUnbind"] = request.InputUnbind
	}

	if !tea.BoolValue(util.IsUnset(request.MediaWorkflowId)) {
		query["MediaWorkflowId"] = request.MediaWorkflowId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaWorkflowUserData)) {
		query["MediaWorkflowUserData"] = request.MediaWorkflowUserData
	}

	if !tea.BoolValue(util.IsUnset(request.OverrideParams)) {
		query["OverrideParams"] = request.OverrideParams
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMedia"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddMediaRequest
//
// @return AddMediaResponse
func (client *Client) AddMedia(request *AddMediaRequest) (_result *AddMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMediaResponse{}
	_body, _err := client.AddMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddMediaTagRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddMediaTagResponse
func (client *Client) AddMediaTagWithOptions(request *AddMediaTagRequest, runtime *util.RuntimeOptions) (_result *AddMediaTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMediaTag"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMediaTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddMediaTagRequest
//
// @return AddMediaTagResponse
func (client *Client) AddMediaTag(request *AddMediaTagRequest) (_result *AddMediaTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMediaTagResponse{}
	_body, _err := client.AddMediaTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddMediaWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddMediaWorkflowResponse
func (client *Client) AddMediaWorkflowWithOptions(request *AddMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *AddMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Topology)) {
		query["Topology"] = request.Topology
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerMode)) {
		query["TriggerMode"] = request.TriggerMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMediaWorkflow"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMediaWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddMediaWorkflowRequest
//
// @return AddMediaWorkflowResponse
func (client *Client) AddMediaWorkflow(request *AddMediaWorkflowRequest) (_result *AddMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMediaWorkflowResponse{}
	_body, _err := client.AddMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddPipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddPipelineResponse
func (client *Client) AddPipelineWithOptions(request *AddPipelineRequest, runtime *util.RuntimeOptions) (_result *AddPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyConfig)) {
		query["NotifyConfig"] = request.NotifyConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.Speed)) {
		query["Speed"] = request.Speed
	}

	if !tea.BoolValue(util.IsUnset(request.SpeedLevel)) {
		query["SpeedLevel"] = request.SpeedLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddPipeline"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddPipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddPipelineRequest
//
// @return AddPipelineResponse
func (client *Client) AddPipeline(request *AddPipelineRequest) (_result *AddPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPipelineResponse{}
	_body, _err := client.AddPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddTemplateResponse
func (client *Client) AddTemplateWithOptions(request *AddTemplateRequest, runtime *util.RuntimeOptions) (_result *AddTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Audio)) {
		query["Audio"] = request.Audio
	}

	if !tea.BoolValue(util.IsUnset(request.Container)) {
		query["Container"] = request.Container
	}

	if !tea.BoolValue(util.IsUnset(request.MuxConfig)) {
		query["MuxConfig"] = request.MuxConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TransConfig)) {
		query["TransConfig"] = request.TransConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Video)) {
		query["Video"] = request.Video
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTemplate"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddTemplateRequest
//
// @return AddTemplateResponse
func (client *Client) AddTemplate(request *AddTemplateRequest) (_result *AddTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTemplateResponse{}
	_body, _err := client.AddTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddWaterMarkTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddWaterMarkTemplateResponse
func (client *Client) AddWaterMarkTemplateWithOptions(request *AddWaterMarkTemplateRequest, runtime *util.RuntimeOptions) (_result *AddWaterMarkTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddWaterMarkTemplate"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddWaterMarkTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddWaterMarkTemplateRequest
//
// @return AddWaterMarkTemplateResponse
func (client *Client) AddWaterMarkTemplate(request *AddWaterMarkTemplateRequest) (_result *AddWaterMarkTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddWaterMarkTemplateResponse{}
	_body, _err := client.AddWaterMarkTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BindInputBucketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindInputBucketResponse
func (client *Client) BindInputBucketWithOptions(request *BindInputBucketRequest, runtime *util.RuntimeOptions) (_result *BindInputBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bucket)) {
		query["Bucket"] = request.Bucket
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleArn)) {
		query["RoleArn"] = request.RoleArn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindInputBucket"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindInputBucketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BindInputBucketRequest
//
// @return BindInputBucketResponse
func (client *Client) BindInputBucket(request *BindInputBucketRequest) (_result *BindInputBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindInputBucketResponse{}
	_body, _err := client.BindInputBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BindOutputBucketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindOutputBucketResponse
func (client *Client) BindOutputBucketWithOptions(request *BindOutputBucketRequest, runtime *util.RuntimeOptions) (_result *BindOutputBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bucket)) {
		query["Bucket"] = request.Bucket
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleArn)) {
		query["RoleArn"] = request.RoleArn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BindOutputBucket"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindOutputBucketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BindOutputBucketRequest
//
// @return BindOutputBucketResponse
func (client *Client) BindOutputBucket(request *BindOutputBucketRequest) (_result *BindOutputBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindOutputBucketResponse{}
	_body, _err := client.BindOutputBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CancelJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelJobResponse
func (client *Client) CancelJobWithOptions(request *CancelJobRequest, runtime *util.RuntimeOptions) (_result *CancelJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelJob"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CancelJobRequest
//
// @return CancelJobResponse
func (client *Client) CancelJob(request *CancelJobRequest) (_result *CancelJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelJobResponse{}
	_body, _err := client.CancelJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CategoryTreeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CategoryTreeResponse
func (client *Client) CategoryTreeWithOptions(request *CategoryTreeRequest, runtime *util.RuntimeOptions) (_result *CategoryTreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CategoryTree"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CategoryTreeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CategoryTreeRequest
//
// @return CategoryTreeResponse
func (client *Client) CategoryTree(request *CategoryTreeRequest) (_result *CategoryTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CategoryTreeResponse{}
	_body, _err := client.CategoryTreeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeactivateMediaWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeactivateMediaWorkflowResponse
func (client *Client) DeactivateMediaWorkflowWithOptions(request *DeactivateMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *DeactivateMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaWorkflowId)) {
		query["MediaWorkflowId"] = request.MediaWorkflowId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeactivateMediaWorkflow"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeactivateMediaWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeactivateMediaWorkflowRequest
//
// @return DeactivateMediaWorkflowResponse
func (client *Client) DeactivateMediaWorkflow(request *DeactivateMediaWorkflowRequest) (_result *DeactivateMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeactivateMediaWorkflowResponse{}
	_body, _err := client.DeactivateMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteCategoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCategoryResponse
func (client *Client) DeleteCategoryWithOptions(request *DeleteCategoryRequest, runtime *util.RuntimeOptions) (_result *DeleteCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCategory"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteCategoryRequest
//
// @return DeleteCategoryResponse
func (client *Client) DeleteCategory(request *DeleteCategoryRequest) (_result *DeleteCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCategoryResponse{}
	_body, _err := client.DeleteCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaResponse
func (client *Client) DeleteMediaWithOptions(request *DeleteMediaRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMedia"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteMediaRequest
//
// @return DeleteMediaResponse
func (client *Client) DeleteMedia(request *DeleteMediaRequest) (_result *DeleteMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaResponse{}
	_body, _err := client.DeleteMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteMediaTagRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaTagResponse
func (client *Client) DeleteMediaTagWithOptions(request *DeleteMediaTagRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaTag"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteMediaTagRequest
//
// @return DeleteMediaTagResponse
func (client *Client) DeleteMediaTag(request *DeleteMediaTagRequest) (_result *DeleteMediaTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaTagResponse{}
	_body, _err := client.DeleteMediaTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteMediaWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaWorkflowResponse
func (client *Client) DeleteMediaWorkflowWithOptions(request *DeleteMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaWorkflowId)) {
		query["MediaWorkflowId"] = request.MediaWorkflowId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaWorkflow"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteMediaWorkflowRequest
//
// @return DeleteMediaWorkflowResponse
func (client *Client) DeleteMediaWorkflow(request *DeleteMediaWorkflowRequest) (_result *DeleteMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaWorkflowResponse{}
	_body, _err := client.DeleteMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeletePipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePipelineResponse
func (client *Client) DeletePipelineWithOptions(request *DeletePipelineRequest, runtime *util.RuntimeOptions) (_result *DeletePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePipeline"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeletePipelineRequest
//
// @return DeletePipelineResponse
func (client *Client) DeletePipeline(request *DeletePipelineRequest) (_result *DeletePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePipelineResponse{}
	_body, _err := client.DeletePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTemplateResponse
func (client *Client) DeleteTemplateWithOptions(request *DeleteTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTemplate"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteTemplateRequest
//
// @return DeleteTemplateResponse
func (client *Client) DeleteTemplate(request *DeleteTemplateRequest) (_result *DeleteTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.DeleteTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteWaterMarkTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWaterMarkTemplateResponse
func (client *Client) DeleteWaterMarkTemplateWithOptions(request *DeleteWaterMarkTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteWaterMarkTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.WaterMarkTemplateId)) {
		query["WaterMarkTemplateId"] = request.WaterMarkTemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWaterMarkTemplate"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWaterMarkTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteWaterMarkTemplateRequest
//
// @return DeleteWaterMarkTemplateResponse
func (client *Client) DeleteWaterMarkTemplate(request *DeleteWaterMarkTemplateRequest) (_result *DeleteWaterMarkTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteWaterMarkTemplateResponse{}
	_body, _err := client.DeleteWaterMarkTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMtsUserResourcePackageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMtsUserResourcePackageResponse
func (client *Client) DescribeMtsUserResourcePackageWithOptions(request *DescribeMtsUserResourcePackageRequest, runtime *util.RuntimeOptions) (_result *DescribeMtsUserResourcePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		query["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMtsUserResourcePackage"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMtsUserResourcePackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMtsUserResourcePackageRequest
//
// @return DescribeMtsUserResourcePackageResponse
func (client *Client) DescribeMtsUserResourcePackage(request *DescribeMtsUserResourcePackageRequest) (_result *DescribeMtsUserResourcePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMtsUserResourcePackageResponse{}
	_body, _err := client.DescribeMtsUserResourcePackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListAllCategoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAllCategoryResponse
func (client *Client) ListAllCategoryWithOptions(request *ListAllCategoryRequest, runtime *util.RuntimeOptions) (_result *ListAllCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAllCategory"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAllCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListAllCategoryRequest
//
// @return ListAllCategoryResponse
func (client *Client) ListAllCategory(request *ListAllCategoryRequest) (_result *ListAllCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAllCategoryResponse{}
	_body, _err := client.ListAllCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListAllMediaBucketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAllMediaBucketResponse
func (client *Client) ListAllMediaBucketWithOptions(request *ListAllMediaBucketRequest, runtime *util.RuntimeOptions) (_result *ListAllMediaBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAllMediaBucket"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAllMediaBucketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListAllMediaBucketRequest
//
// @return ListAllMediaBucketResponse
func (client *Client) ListAllMediaBucket(request *ListAllMediaBucketRequest) (_result *ListAllMediaBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAllMediaBucketResponse{}
	_body, _err := client.ListAllMediaBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListJobResponse
func (client *Client) ListJobWithOptions(request *ListJobRequest, runtime *util.RuntimeOptions) (_result *ListJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfJobCreatedTimeRange)) {
		query["EndOfJobCreatedTimeRange"] = request.EndOfJobCreatedTimeRange
	}

	if !tea.BoolValue(util.IsUnset(request.MaximumPageSize)) {
		query["MaximumPageSize"] = request.MaximumPageSize
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfJobCreatedTimeRange)) {
		query["StartOfJobCreatedTimeRange"] = request.StartOfJobCreatedTimeRange
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListJob"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListJobRequest
//
// @return ListJobResponse
func (client *Client) ListJob(request *ListJobRequest) (_result *ListJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobResponse{}
	_body, _err := client.ListJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaResponse
func (client *Client) ListMediaWithOptions(request *ListMediaRequest, runtime *util.RuntimeOptions) (_result *ListMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.From)) {
		query["From"] = request.From
	}

	if !tea.BoolValue(util.IsUnset(request.MaximumPageSize)) {
		query["MaximumPageSize"] = request.MaximumPageSize
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.To)) {
		query["To"] = request.To
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMedia"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListMediaRequest
//
// @return ListMediaResponse
func (client *Client) ListMedia(request *ListMediaRequest) (_result *ListMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaResponse{}
	_body, _err := client.ListMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListMediaWorkflowExecutionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaWorkflowExecutionsResponse
func (client *Client) ListMediaWorkflowExecutionsWithOptions(request *ListMediaWorkflowExecutionsRequest, runtime *util.RuntimeOptions) (_result *ListMediaWorkflowExecutionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputFileURL)) {
		query["InputFileURL"] = request.InputFileURL
	}

	if !tea.BoolValue(util.IsUnset(request.MaximumPageSize)) {
		query["MaximumPageSize"] = request.MaximumPageSize
	}

	if !tea.BoolValue(util.IsUnset(request.MediaWorkflowId)) {
		query["MediaWorkflowId"] = request.MediaWorkflowId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaWorkflowName)) {
		query["MediaWorkflowName"] = request.MediaWorkflowName
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaWorkflowExecutions"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaWorkflowExecutionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListMediaWorkflowExecutionsRequest
//
// @return ListMediaWorkflowExecutionsResponse
func (client *Client) ListMediaWorkflowExecutions(request *ListMediaWorkflowExecutionsRequest) (_result *ListMediaWorkflowExecutionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaWorkflowExecutionsResponse{}
	_body, _err := client.ListMediaWorkflowExecutionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryAnalysisJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryAnalysisJobListResponse
func (client *Client) QueryAnalysisJobListWithOptions(request *QueryAnalysisJobListRequest, runtime *util.RuntimeOptions) (_result *QueryAnalysisJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AnalysisJobIds)) {
		query["AnalysisJobIds"] = request.AnalysisJobIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryAnalysisJobList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryAnalysisJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryAnalysisJobListRequest
//
// @return QueryAnalysisJobListResponse
func (client *Client) QueryAnalysisJobList(request *QueryAnalysisJobListRequest) (_result *QueryAnalysisJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAnalysisJobListResponse{}
	_body, _err := client.QueryAnalysisJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryEditingJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryEditingJobListResponse
func (client *Client) QueryEditingJobListWithOptions(request *QueryEditingJobListRequest, runtime *util.RuntimeOptions) (_result *QueryEditingJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryEditingJobList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryEditingJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryEditingJobListRequest
//
// @return QueryEditingJobListResponse
func (client *Client) QueryEditingJobList(request *QueryEditingJobListRequest) (_result *QueryEditingJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEditingJobListResponse{}
	_body, _err := client.QueryEditingJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryJobListResponse
func (client *Client) QueryJobListWithOptions(request *QueryJobListRequest, runtime *util.RuntimeOptions) (_result *QueryJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryJobList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryJobListRequest
//
// @return QueryJobListResponse
func (client *Client) QueryJobList(request *QueryJobListRequest) (_result *QueryJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryJobListResponse{}
	_body, _err := client.QueryJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMediaInfoJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaInfoJobListResponse
func (client *Client) QueryMediaInfoJobListWithOptions(request *QueryMediaInfoJobListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaInfoJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaInfoJobIds)) {
		query["MediaInfoJobIds"] = request.MediaInfoJobIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaInfoJobList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaInfoJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMediaInfoJobListRequest
//
// @return QueryMediaInfoJobListResponse
func (client *Client) QueryMediaInfoJobList(request *QueryMediaInfoJobListRequest) (_result *QueryMediaInfoJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaInfoJobListResponse{}
	_body, _err := client.QueryMediaInfoJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMediaListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaListResponse
func (client *Client) QueryMediaListWithOptions(request *QueryMediaListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IncludeMediaInfo)) {
		query["IncludeMediaInfo"] = request.IncludeMediaInfo
	}

	if !tea.BoolValue(util.IsUnset(request.IncludePlayList)) {
		query["IncludePlayList"] = request.IncludePlayList
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeSnapshotList)) {
		query["IncludeSnapshotList"] = request.IncludeSnapshotList
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeSummaryList)) {
		query["IncludeSummaryList"] = request.IncludeSummaryList
	}

	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMediaListRequest
//
// @return QueryMediaListResponse
func (client *Client) QueryMediaList(request *QueryMediaListRequest) (_result *QueryMediaListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaListResponse{}
	_body, _err := client.QueryMediaListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMediaListByURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaListByURLResponse
func (client *Client) QueryMediaListByURLWithOptions(request *QueryMediaListByURLRequest, runtime *util.RuntimeOptions) (_result *QueryMediaListByURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileURLs)) {
		query["FileURLs"] = request.FileURLs
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeMediaInfo)) {
		query["IncludeMediaInfo"] = request.IncludeMediaInfo
	}

	if !tea.BoolValue(util.IsUnset(request.IncludePlayList)) {
		query["IncludePlayList"] = request.IncludePlayList
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeSnapshotList)) {
		query["IncludeSnapshotList"] = request.IncludeSnapshotList
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeSummaryList)) {
		query["IncludeSummaryList"] = request.IncludeSummaryList
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaListByURL"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaListByURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMediaListByURLRequest
//
// @return QueryMediaListByURLResponse
func (client *Client) QueryMediaListByURL(request *QueryMediaListByURLRequest) (_result *QueryMediaListByURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaListByURLResponse{}
	_body, _err := client.QueryMediaListByURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMediaWorkflowExecutionListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaWorkflowExecutionListResponse
func (client *Client) QueryMediaWorkflowExecutionListWithOptions(request *QueryMediaWorkflowExecutionListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaWorkflowExecutionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RunIds)) {
		query["RunIds"] = request.RunIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaWorkflowExecutionList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaWorkflowExecutionListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMediaWorkflowExecutionListRequest
//
// @return QueryMediaWorkflowExecutionListResponse
func (client *Client) QueryMediaWorkflowExecutionList(request *QueryMediaWorkflowExecutionListRequest) (_result *QueryMediaWorkflowExecutionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaWorkflowExecutionListResponse{}
	_body, _err := client.QueryMediaWorkflowExecutionListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMediaWorkflowListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaWorkflowListResponse
func (client *Client) QueryMediaWorkflowListWithOptions(request *QueryMediaWorkflowListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaWorkflowListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaWorkflowIds)) {
		query["MediaWorkflowIds"] = request.MediaWorkflowIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaWorkflowList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaWorkflowListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMediaWorkflowListRequest
//
// @return QueryMediaWorkflowListResponse
func (client *Client) QueryMediaWorkflowList(request *QueryMediaWorkflowListRequest) (_result *QueryMediaWorkflowListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaWorkflowListResponse{}
	_body, _err := client.QueryMediaWorkflowListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryPipelineListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryPipelineListResponse
func (client *Client) QueryPipelineListWithOptions(request *QueryPipelineListRequest, runtime *util.RuntimeOptions) (_result *QueryPipelineListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineIds)) {
		query["PipelineIds"] = request.PipelineIds
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryPipelineList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryPipelineListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryPipelineListRequest
//
// @return QueryPipelineListResponse
func (client *Client) QueryPipelineList(request *QueryPipelineListRequest) (_result *QueryPipelineListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPipelineListResponse{}
	_body, _err := client.QueryPipelineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySnapshotJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySnapshotJobListResponse
func (client *Client) QuerySnapshotJobListWithOptions(request *QuerySnapshotJobListRequest, runtime *util.RuntimeOptions) (_result *QuerySnapshotJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfJobCreatedTimeRange)) {
		query["EndOfJobCreatedTimeRange"] = request.EndOfJobCreatedTimeRange
	}

	if !tea.BoolValue(util.IsUnset(request.MaximumPageSize)) {
		query["MaximumPageSize"] = request.MaximumPageSize
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotJobIds)) {
		query["SnapshotJobIds"] = request.SnapshotJobIds
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfJobCreatedTimeRange)) {
		query["StartOfJobCreatedTimeRange"] = request.StartOfJobCreatedTimeRange
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySnapshotJobList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySnapshotJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySnapshotJobListRequest
//
// @return QuerySnapshotJobListResponse
func (client *Client) QuerySnapshotJobList(request *QuerySnapshotJobListRequest) (_result *QuerySnapshotJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySnapshotJobListResponse{}
	_body, _err := client.QuerySnapshotJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryTemplateListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryTemplateListResponse
func (client *Client) QueryTemplateListWithOptions(request *QueryTemplateListRequest, runtime *util.RuntimeOptions) (_result *QueryTemplateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateIds)) {
		query["TemplateIds"] = request.TemplateIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTemplateList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTemplateListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryTemplateListRequest
//
// @return QueryTemplateListResponse
func (client *Client) QueryTemplateList(request *QueryTemplateListRequest) (_result *QueryTemplateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTemplateListResponse{}
	_body, _err := client.QueryTemplateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryWaterMarkTemplateListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryWaterMarkTemplateListResponse
func (client *Client) QueryWaterMarkTemplateListWithOptions(request *QueryWaterMarkTemplateListRequest, runtime *util.RuntimeOptions) (_result *QueryWaterMarkTemplateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.WaterMarkTemplateIds)) {
		query["WaterMarkTemplateIds"] = request.WaterMarkTemplateIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryWaterMarkTemplateList"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryWaterMarkTemplateListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryWaterMarkTemplateListRequest
//
// @return QueryWaterMarkTemplateListResponse
func (client *Client) QueryWaterMarkTemplateList(request *QueryWaterMarkTemplateListRequest) (_result *QueryWaterMarkTemplateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryWaterMarkTemplateListResponse{}
	_body, _err := client.QueryWaterMarkTemplateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SearchMediaWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaWorkflowResponse
func (client *Client) SearchMediaWorkflowWithOptions(request *SearchMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *SearchMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StateList)) {
		query["StateList"] = request.StateList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaWorkflow"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SearchMediaWorkflowRequest
//
// @return SearchMediaWorkflowResponse
func (client *Client) SearchMediaWorkflow(request *SearchMediaWorkflowRequest) (_result *SearchMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaWorkflowResponse{}
	_body, _err := client.SearchMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SearchPipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchPipelineResponse
func (client *Client) SearchPipelineWithOptions(request *SearchPipelineRequest, runtime *util.RuntimeOptions) (_result *SearchPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchPipeline"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchPipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SearchPipelineRequest
//
// @return SearchPipelineResponse
func (client *Client) SearchPipeline(request *SearchPipelineRequest) (_result *SearchPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchPipelineResponse{}
	_body, _err := client.SearchPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SearchTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchTemplateResponse
func (client *Client) SearchTemplateWithOptions(request *SearchTemplateRequest, runtime *util.RuntimeOptions) (_result *SearchTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchTemplate"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SearchTemplateRequest
//
// @return SearchTemplateResponse
func (client *Client) SearchTemplate(request *SearchTemplateRequest) (_result *SearchTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchTemplateResponse{}
	_body, _err := client.SearchTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SearchWaterMarkTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchWaterMarkTemplateResponse
func (client *Client) SearchWaterMarkTemplateWithOptions(request *SearchWaterMarkTemplateRequest, runtime *util.RuntimeOptions) (_result *SearchWaterMarkTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchWaterMarkTemplate"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchWaterMarkTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SearchWaterMarkTemplateRequest
//
// @return SearchWaterMarkTemplateResponse
func (client *Client) SearchWaterMarkTemplate(request *SearchWaterMarkTemplateRequest) (_result *SearchWaterMarkTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchWaterMarkTemplateResponse{}
	_body, _err := client.SearchWaterMarkTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SubmitAnalysisJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitAnalysisJobResponse
func (client *Client) SubmitAnalysisJobWithOptions(request *SubmitAnalysisJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAnalysisJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AnalysisConfig)) {
		query["AnalysisConfig"] = request.AnalysisConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Input)) {
		query["Input"] = request.Input
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitAnalysisJob"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitAnalysisJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitAnalysisJobRequest
//
// @return SubmitAnalysisJobResponse
func (client *Client) SubmitAnalysisJob(request *SubmitAnalysisJobRequest) (_result *SubmitAnalysisJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAnalysisJobResponse{}
	_body, _err := client.SubmitAnalysisJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SubmitEditingJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitEditingJobsResponse
func (client *Client) SubmitEditingJobsWithOptions(request *SubmitEditingJobsRequest, runtime *util.RuntimeOptions) (_result *SubmitEditingJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EditingInputs)) {
		query["EditingInputs"] = request.EditingInputs
	}

	if !tea.BoolValue(util.IsUnset(request.EditingJobOutputs)) {
		query["EditingJobOutputs"] = request.EditingJobOutputs
	}

	if !tea.BoolValue(util.IsUnset(request.OutputBucket)) {
		query["OutputBucket"] = request.OutputBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OutputLocation)) {
		query["OutputLocation"] = request.OutputLocation
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitEditingJobs"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitEditingJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitEditingJobsRequest
//
// @return SubmitEditingJobsResponse
func (client *Client) SubmitEditingJobs(request *SubmitEditingJobsRequest) (_result *SubmitEditingJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitEditingJobsResponse{}
	_body, _err := client.SubmitEditingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SubmitJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitJobsResponse
func (client *Client) SubmitJobsWithOptions(request *SubmitJobsRequest, runtime *util.RuntimeOptions) (_result *SubmitJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Input)) {
		query["Input"] = request.Input
	}

	if !tea.BoolValue(util.IsUnset(request.OutputBucket)) {
		query["OutputBucket"] = request.OutputBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OutputLocation)) {
		query["OutputLocation"] = request.OutputLocation
	}

	if !tea.BoolValue(util.IsUnset(request.Outputs)) {
		query["Outputs"] = request.Outputs
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitJobs"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitJobsRequest
//
// @return SubmitJobsResponse
func (client *Client) SubmitJobs(request *SubmitJobsRequest) (_result *SubmitJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitJobsResponse{}
	_body, _err := client.SubmitJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SubmitMediaInfoJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitMediaInfoJobResponse
func (client *Client) SubmitMediaInfoJobWithOptions(request *SubmitMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Async)) {
		query["Async"] = request.Async
	}

	if !tea.BoolValue(util.IsUnset(request.Input)) {
		query["Input"] = request.Input
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaInfoJob"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaInfoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitMediaInfoJobRequest
//
// @return SubmitMediaInfoJobResponse
func (client *Client) SubmitMediaInfoJob(request *SubmitMediaInfoJobRequest) (_result *SubmitMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaInfoJobResponse{}
	_body, _err := client.SubmitMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SubmitSnapshotJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitSnapshotJobResponse
func (client *Client) SubmitSnapshotJobWithOptions(request *SubmitSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Input)) {
		query["Input"] = request.Input
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotConfig)) {
		query["SnapshotConfig"] = request.SnapshotConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSnapshotJob"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitSnapshotJobRequest
//
// @return SubmitSnapshotJobResponse
func (client *Client) SubmitSnapshotJob(request *SubmitSnapshotJobRequest) (_result *SubmitSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSnapshotJobResponse{}
	_body, _err := client.SubmitSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnbindInputBucketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindInputBucketResponse
func (client *Client) UnbindInputBucketWithOptions(request *UnbindInputBucketRequest, runtime *util.RuntimeOptions) (_result *UnbindInputBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bucket)) {
		query["Bucket"] = request.Bucket
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleArn)) {
		query["RoleArn"] = request.RoleArn
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindInputBucket"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindInputBucketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnbindInputBucketRequest
//
// @return UnbindInputBucketResponse
func (client *Client) UnbindInputBucket(request *UnbindInputBucketRequest) (_result *UnbindInputBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindInputBucketResponse{}
	_body, _err := client.UnbindInputBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnbindOutputBucketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindOutputBucketResponse
func (client *Client) UnbindOutputBucketWithOptions(request *UnbindOutputBucketRequest, runtime *util.RuntimeOptions) (_result *UnbindOutputBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bucket)) {
		query["Bucket"] = request.Bucket
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindOutputBucket"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindOutputBucketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnbindOutputBucketRequest
//
// @return UnbindOutputBucketResponse
func (client *Client) UnbindOutputBucket(request *UnbindOutputBucketRequest) (_result *UnbindOutputBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindOutputBucketResponse{}
	_body, _err := client.UnbindOutputBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateCategoryNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCategoryNameResponse
func (client *Client) UpdateCategoryNameWithOptions(request *UpdateCategoryNameRequest, runtime *util.RuntimeOptions) (_result *UpdateCategoryNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.CateName)) {
		query["CateName"] = request.CateName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCategoryName"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCategoryNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateCategoryNameRequest
//
// @return UpdateCategoryNameResponse
func (client *Client) UpdateCategoryName(request *UpdateCategoryNameRequest) (_result *UpdateCategoryNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCategoryNameResponse{}
	_body, _err := client.UpdateCategoryNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaResponse
func (client *Client) UpdateMediaWithOptions(request *UpdateMediaRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMedia"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateMediaRequest
//
// @return UpdateMediaResponse
func (client *Client) UpdateMedia(request *UpdateMediaRequest) (_result *UpdateMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaResponse{}
	_body, _err := client.UpdateMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateMediaCategoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaCategoryResponse
func (client *Client) UpdateMediaCategoryWithOptions(request *UpdateMediaCategoryRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaCategory"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateMediaCategoryRequest
//
// @return UpdateMediaCategoryResponse
func (client *Client) UpdateMediaCategory(request *UpdateMediaCategoryRequest) (_result *UpdateMediaCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaCategoryResponse{}
	_body, _err := client.UpdateMediaCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateMediaCoverRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaCoverResponse
func (client *Client) UpdateMediaCoverWithOptions(request *UpdateMediaCoverRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaCoverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaCover"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaCoverResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateMediaCoverRequest
//
// @return UpdateMediaCoverResponse
func (client *Client) UpdateMediaCover(request *UpdateMediaCoverRequest) (_result *UpdateMediaCoverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaCoverResponse{}
	_body, _err := client.UpdateMediaCoverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateMediaPublishStateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaPublishStateResponse
func (client *Client) UpdateMediaPublishStateWithOptions(request *UpdateMediaPublishStateRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaPublishStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Publish)) {
		query["Publish"] = request.Publish
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaPublishState"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaPublishStateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateMediaPublishStateRequest
//
// @return UpdateMediaPublishStateResponse
func (client *Client) UpdateMediaPublishState(request *UpdateMediaPublishStateRequest) (_result *UpdateMediaPublishStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaPublishStateResponse{}
	_body, _err := client.UpdateMediaPublishStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateMediaWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaWorkflowResponse
func (client *Client) UpdateMediaWorkflowWithOptions(request *UpdateMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaWorkflowId)) {
		query["MediaWorkflowId"] = request.MediaWorkflowId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Topology)) {
		query["Topology"] = request.Topology
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaWorkflow"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateMediaWorkflowRequest
//
// @return UpdateMediaWorkflowResponse
func (client *Client) UpdateMediaWorkflow(request *UpdateMediaWorkflowRequest) (_result *UpdateMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaWorkflowResponse{}
	_body, _err := client.UpdateMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateMediaWorkflowTriggerModeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaWorkflowTriggerModeResponse
func (client *Client) UpdateMediaWorkflowTriggerModeWithOptions(request *UpdateMediaWorkflowTriggerModeRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaWorkflowTriggerModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaWorkflowId)) {
		query["MediaWorkflowId"] = request.MediaWorkflowId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TriggerMode)) {
		query["TriggerMode"] = request.TriggerMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaWorkflowTriggerMode"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaWorkflowTriggerModeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateMediaWorkflowTriggerModeRequest
//
// @return UpdateMediaWorkflowTriggerModeResponse
func (client *Client) UpdateMediaWorkflowTriggerMode(request *UpdateMediaWorkflowTriggerModeRequest) (_result *UpdateMediaWorkflowTriggerModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaWorkflowTriggerModeResponse{}
	_body, _err := client.UpdateMediaWorkflowTriggerModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdatePipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePipelineResponse
func (client *Client) UpdatePipelineWithOptions(request *UpdatePipelineRequest, runtime *util.RuntimeOptions) (_result *UpdatePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyConfig)) {
		query["NotifyConfig"] = request.NotifyConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePipeline"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdatePipelineRequest
//
// @return UpdatePipelineResponse
func (client *Client) UpdatePipeline(request *UpdatePipelineRequest) (_result *UpdatePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.UpdatePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTemplateResponse
func (client *Client) UpdateTemplateWithOptions(request *UpdateTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Audio)) {
		query["Audio"] = request.Audio
	}

	if !tea.BoolValue(util.IsUnset(request.Container)) {
		query["Container"] = request.Container
	}

	if !tea.BoolValue(util.IsUnset(request.MuxConfig)) {
		query["MuxConfig"] = request.MuxConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TransConfig)) {
		query["TransConfig"] = request.TransConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Video)) {
		query["Video"] = request.Video
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTemplate"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateTemplateRequest
//
// @return UpdateTemplateResponse
func (client *Client) UpdateTemplate(request *UpdateTemplateRequest) (_result *UpdateTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTemplateResponse{}
	_body, _err := client.UpdateTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateWaterMarkTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWaterMarkTemplateResponse
func (client *Client) UpdateWaterMarkTemplateWithOptions(request *UpdateWaterMarkTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateWaterMarkTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.WaterMarkTemplateId)) {
		query["WaterMarkTemplateId"] = request.WaterMarkTemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWaterMarkTemplate"),
		Version:     tea.String("2018-05-28"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWaterMarkTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateWaterMarkTemplateRequest
//
// @return UpdateWaterMarkTemplateResponse
func (client *Client) UpdateWaterMarkTemplate(request *UpdateWaterMarkTemplateRequest) (_result *UpdateWaterMarkTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateWaterMarkTemplateResponse{}
	_body, _err := client.UpdateWaterMarkTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
